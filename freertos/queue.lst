ARM GAS  /tmp/ccMyq1Ea.s 			page 1


   1              		.cpu cortex-m3
   2              		.arch armv7-m
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1	@ Tag_ABI_FP_denormal
   5              		.eabi_attribute 21, 1	@ Tag_ABI_FP_exceptions
   6              		.eabi_attribute 23, 3	@ Tag_ABI_FP_number_model
   7              		.eabi_attribute 24, 1	@ Tag_ABI_align8_needed
   8              		.eabi_attribute 25, 1	@ Tag_ABI_align8_preserved
   9              		.eabi_attribute 26, 1	@ Tag_ABI_enum_size
  10              		.eabi_attribute 30, 4	@ Tag_ABI_optimization_goals
  11              		.eabi_attribute 34, 1	@ Tag_CPU_unaligned_access
  12              		.eabi_attribute 18, 4	@ Tag_ABI_PCS_wchar_t
  13              		.file	"queue.c"
  14              	@ GNU C17 (Arch Repository) version 13.2.0 (arm-none-eabi)
  15              	@	compiled by GNU C version 13.2.1 20230801, GMP version 6.3.0, MPFR version 4.2.0-p12, MPC version
  16              	
  17              	@ warning: MPFR header version 4.2.0-p12 differs from library version 4.2.1.
  18              	@ GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
  19              	@ options passed: -mcpu=cortex-m3 -mthumb -mfloat-abi=soft -march=armv7-m -g -gdwarf-2 -Os -fomit-f
  20              		.text
  21              	.Ltext0:
  22              		.cfi_sections	.debug_frame
  23              		.file 1 "../freertos/queue.c"
  24              		.align	1
  25              		.syntax unified
  26              		.thumb
  27              		.thumb_func
  28              		.type	prvIsQueueEmpty, %function
  29              	prvIsQueueEmpty:
  30              	.LVL0:
  31              	.LFB32:
   1:../freertos/queue.c **** /*
   2:../freertos/queue.c ****  * FreeRTOS Kernel V10.2.1
   3:../freertos/queue.c ****  * Copyright (C) 2019 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:../freertos/queue.c ****  *
   5:../freertos/queue.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:../freertos/queue.c ****  * this software and associated documentation files (the "Software"), to deal in
   7:../freertos/queue.c ****  * the Software without restriction, including without limitation the rights to
   8:../freertos/queue.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:../freertos/queue.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:../freertos/queue.c ****  * subject to the following conditions:
  11:../freertos/queue.c ****  *
  12:../freertos/queue.c ****  * The above copyright notice and this permission notice shall be included in all
  13:../freertos/queue.c ****  * copies or substantial portions of the Software.
  14:../freertos/queue.c ****  *
  15:../freertos/queue.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:../freertos/queue.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:../freertos/queue.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:../freertos/queue.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:../freertos/queue.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:../freertos/queue.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:../freertos/queue.c ****  *
  22:../freertos/queue.c ****  * http://www.FreeRTOS.org
  23:../freertos/queue.c ****  * http://aws.amazon.com/freertos
  24:../freertos/queue.c ****  *
  25:../freertos/queue.c ****  * 1 tab == 4 spaces!
  26:../freertos/queue.c ****  */
ARM GAS  /tmp/ccMyq1Ea.s 			page 2


  27:../freertos/queue.c **** 
  28:../freertos/queue.c **** #include <stdlib.h>
  29:../freertos/queue.c **** #include <string.h>
  30:../freertos/queue.c **** 
  31:../freertos/queue.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  32:../freertos/queue.c **** all the API functions to use the MPU wrappers.  That should only be done when
  33:../freertos/queue.c **** task.h is included from an application file. */
  34:../freertos/queue.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  35:../freertos/queue.c **** 
  36:../freertos/queue.c **** #include "FreeRTOS.h"
  37:../freertos/queue.c **** #include "task.h"
  38:../freertos/queue.c **** #include "queue.h"
  39:../freertos/queue.c **** 
  40:../freertos/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
  41:../freertos/queue.c **** 	#include "croutine.h"
  42:../freertos/queue.c **** #endif
  43:../freertos/queue.c **** 
  44:../freertos/queue.c **** /* Lint e9021, e961 and e750 are suppressed as a MISRA exception justified
  45:../freertos/queue.c **** because the MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined
  46:../freertos/queue.c **** for the header files above, but not in this file, in order to generate the
  47:../freertos/queue.c **** correct privileged Vs unprivileged linkage and placement. */
  48:../freertos/queue.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750 !e9021. */
  49:../freertos/queue.c **** 
  50:../freertos/queue.c **** 
  51:../freertos/queue.c **** /* Constants used with the cRxLock and cTxLock structure members. */
  52:../freertos/queue.c **** #define queueUNLOCKED					( ( int8_t ) -1 )
  53:../freertos/queue.c **** #define queueLOCKED_UNMODIFIED			( ( int8_t ) 0 )
  54:../freertos/queue.c **** 
  55:../freertos/queue.c **** /* When the Queue_t structure is used to represent a base queue its pcHead and
  56:../freertos/queue.c **** pcTail members are used as pointers into the queue storage area.  When the
  57:../freertos/queue.c **** Queue_t structure is used to represent a mutex pcHead and pcTail pointers are
  58:../freertos/queue.c **** not necessary, and the pcHead pointer is set to NULL to indicate that the
  59:../freertos/queue.c **** structure instead holds a pointer to the mutex holder (if any).  Map alternative
  60:../freertos/queue.c **** names to the pcHead and structure member to ensure the readability of the code
  61:../freertos/queue.c **** is maintained.  The QueuePointers_t and SemaphoreData_t types are used to form
  62:../freertos/queue.c **** a union as their usage is mutually exclusive dependent on what the queue is
  63:../freertos/queue.c **** being used for. */
  64:../freertos/queue.c **** #define uxQueueType						pcHead
  65:../freertos/queue.c **** #define queueQUEUE_IS_MUTEX				NULL
  66:../freertos/queue.c **** 
  67:../freertos/queue.c **** typedef struct QueuePointers
  68:../freertos/queue.c **** {
  69:../freertos/queue.c **** 	int8_t *pcTail;					/*< Points to the byte at the end of the queue storage area.  Once more byte i
  70:../freertos/queue.c **** 	int8_t *pcReadFrom;				/*< Points to the last place that a queued item was read from when the stru
  71:../freertos/queue.c **** } QueuePointers_t;
  72:../freertos/queue.c **** 
  73:../freertos/queue.c **** typedef struct SemaphoreData
  74:../freertos/queue.c **** {
  75:../freertos/queue.c **** 	TaskHandle_t xMutexHolder;		 /*< The handle of the task that holds the mutex. */
  76:../freertos/queue.c **** 	UBaseType_t uxRecursiveCallCount;/*< Maintains a count of the number of times a recursive mutex ha
  77:../freertos/queue.c **** } SemaphoreData_t;
  78:../freertos/queue.c **** 
  79:../freertos/queue.c **** /* Semaphores do not actually store or copy data, so have an item size of
  80:../freertos/queue.c **** zero. */
  81:../freertos/queue.c **** #define queueSEMAPHORE_QUEUE_ITEM_LENGTH ( ( UBaseType_t ) 0 )
  82:../freertos/queue.c **** #define queueMUTEX_GIVE_BLOCK_TIME		 ( ( TickType_t ) 0U )
  83:../freertos/queue.c **** 
ARM GAS  /tmp/ccMyq1Ea.s 			page 3


  84:../freertos/queue.c **** #if( configUSE_PREEMPTION == 0 )
  85:../freertos/queue.c **** 	/* If the cooperative scheduler is being used then a yield should not be
  86:../freertos/queue.c **** 	performed just because a higher priority task has been woken. */
  87:../freertos/queue.c **** 	#define queueYIELD_IF_USING_PREEMPTION()
  88:../freertos/queue.c **** #else
  89:../freertos/queue.c **** 	#define queueYIELD_IF_USING_PREEMPTION() portYIELD_WITHIN_API()
  90:../freertos/queue.c **** #endif
  91:../freertos/queue.c **** 
  92:../freertos/queue.c **** /*
  93:../freertos/queue.c ****  * Definition of the queue used by the scheduler.
  94:../freertos/queue.c ****  * Items are queued by copy, not reference.  See the following link for the
  95:../freertos/queue.c ****  * rationale: https://www.freertos.org/Embedded-RTOS-Queues.html
  96:../freertos/queue.c ****  */
  97:../freertos/queue.c **** typedef struct QueueDefinition 		/* The old naming convention is used to prevent breaking kernel aw
  98:../freertos/queue.c **** {
  99:../freertos/queue.c **** 	int8_t *pcHead;					/*< Points to the beginning of the queue storage area. */
 100:../freertos/queue.c **** 	int8_t *pcWriteTo;				/*< Points to the free next place in the storage area. */
 101:../freertos/queue.c **** 
 102:../freertos/queue.c **** 	union
 103:../freertos/queue.c **** 	{
 104:../freertos/queue.c **** 		QueuePointers_t xQueue;		/*< Data required exclusively when this structure is used as a queue. */
 105:../freertos/queue.c **** 		SemaphoreData_t xSemaphore; /*< Data required exclusively when this structure is used as a semaph
 106:../freertos/queue.c **** 	} u;
 107:../freertos/queue.c **** 
 108:../freertos/queue.c **** 	List_t xTasksWaitingToSend;		/*< List of tasks that are blocked waiting to post onto this queue.  
 109:../freertos/queue.c **** 	List_t xTasksWaitingToReceive;	/*< List of tasks that are blocked waiting to read from this queue.
 110:../freertos/queue.c **** 
 111:../freertos/queue.c **** 	volatile UBaseType_t uxMessagesWaiting;/*< The number of items currently in the queue. */
 112:../freertos/queue.c **** 	UBaseType_t uxLength;			/*< The length of the queue defined as the number of items it will hold, n
 113:../freertos/queue.c **** 	UBaseType_t uxItemSize;			/*< The size of each items that the queue will hold. */
 114:../freertos/queue.c **** 
 115:../freertos/queue.c **** 	volatile int8_t cRxLock;		/*< Stores the number of items received from the queue (removed from the
 116:../freertos/queue.c **** 	volatile int8_t cTxLock;		/*< Stores the number of items transmitted to the queue (added to the qu
 117:../freertos/queue.c **** 
 118:../freertos/queue.c **** 	#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 119:../freertos/queue.c **** 		uint8_t ucStaticallyAllocated;	/*< Set to pdTRUE if the memory used by the queue was statically a
 120:../freertos/queue.c **** 	#endif
 121:../freertos/queue.c **** 
 122:../freertos/queue.c **** 	#if ( configUSE_QUEUE_SETS == 1 )
 123:../freertos/queue.c **** 		struct QueueDefinition *pxQueueSetContainer;
 124:../freertos/queue.c **** 	#endif
 125:../freertos/queue.c **** 
 126:../freertos/queue.c **** 	#if ( configUSE_TRACE_FACILITY == 1 )
 127:../freertos/queue.c **** 		UBaseType_t uxQueueNumber;
 128:../freertos/queue.c **** 		uint8_t ucQueueType;
 129:../freertos/queue.c **** 	#endif
 130:../freertos/queue.c **** 
 131:../freertos/queue.c **** } xQUEUE;
 132:../freertos/queue.c **** 
 133:../freertos/queue.c **** /* The old xQUEUE name is maintained above then typedefed to the new Queue_t
 134:../freertos/queue.c **** name below to enable the use of older kernel aware debuggers. */
 135:../freertos/queue.c **** typedef xQUEUE Queue_t;
 136:../freertos/queue.c **** 
 137:../freertos/queue.c **** /*-----------------------------------------------------------*/
 138:../freertos/queue.c **** 
 139:../freertos/queue.c **** /*
 140:../freertos/queue.c ****  * The queue registry is just a means for kernel aware debuggers to locate
ARM GAS  /tmp/ccMyq1Ea.s 			page 4


 141:../freertos/queue.c ****  * queue structures.  It has no other purpose so is an optional component.
 142:../freertos/queue.c ****  */
 143:../freertos/queue.c **** #if ( configQUEUE_REGISTRY_SIZE > 0 )
 144:../freertos/queue.c **** 
 145:../freertos/queue.c **** 	/* The type stored within the queue registry array.  This allows a name
 146:../freertos/queue.c **** 	to be assigned to each queue making kernel aware debugging a little
 147:../freertos/queue.c **** 	more user friendly. */
 148:../freertos/queue.c **** 	typedef struct QUEUE_REGISTRY_ITEM
 149:../freertos/queue.c **** 	{
 150:../freertos/queue.c **** 		const char *pcQueueName; /*lint !e971 Unqualified char types are allowed for strings and single c
 151:../freertos/queue.c **** 		QueueHandle_t xHandle;
 152:../freertos/queue.c **** 	} xQueueRegistryItem;
 153:../freertos/queue.c **** 
 154:../freertos/queue.c **** 	/* The old xQueueRegistryItem name is maintained above then typedefed to the
 155:../freertos/queue.c **** 	new xQueueRegistryItem name below to enable the use of older kernel aware
 156:../freertos/queue.c **** 	debuggers. */
 157:../freertos/queue.c **** 	typedef xQueueRegistryItem QueueRegistryItem_t;
 158:../freertos/queue.c **** 
 159:../freertos/queue.c **** 	/* The queue registry is simply an array of QueueRegistryItem_t structures.
 160:../freertos/queue.c **** 	The pcQueueName member of a structure being NULL is indicative of the
 161:../freertos/queue.c **** 	array position being vacant. */
 162:../freertos/queue.c **** 	PRIVILEGED_DATA QueueRegistryItem_t xQueueRegistry[ configQUEUE_REGISTRY_SIZE ];
 163:../freertos/queue.c **** 
 164:../freertos/queue.c **** #endif /* configQUEUE_REGISTRY_SIZE */
 165:../freertos/queue.c **** 
 166:../freertos/queue.c **** /*
 167:../freertos/queue.c ****  * Unlocks a queue locked by a call to prvLockQueue.  Locking a queue does not
 168:../freertos/queue.c ****  * prevent an ISR from adding or removing items to the queue, but does prevent
 169:../freertos/queue.c ****  * an ISR from removing tasks from the queue event lists.  If an ISR finds a
 170:../freertos/queue.c ****  * queue is locked it will instead increment the appropriate queue lock count
 171:../freertos/queue.c ****  * to indicate that a task may require unblocking.  When the queue in unlocked
 172:../freertos/queue.c ****  * these lock counts are inspected, and the appropriate action taken.
 173:../freertos/queue.c ****  */
 174:../freertos/queue.c **** static void prvUnlockQueue( Queue_t * const pxQueue ) PRIVILEGED_FUNCTION;
 175:../freertos/queue.c **** 
 176:../freertos/queue.c **** /*
 177:../freertos/queue.c ****  * Uses a critical section to determine if there is any data in a queue.
 178:../freertos/queue.c ****  *
 179:../freertos/queue.c ****  * @return pdTRUE if the queue contains no items, otherwise pdFALSE.
 180:../freertos/queue.c ****  */
 181:../freertos/queue.c **** static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue ) PRIVILEGED_FUNCTION;
 182:../freertos/queue.c **** 
 183:../freertos/queue.c **** /*
 184:../freertos/queue.c ****  * Uses a critical section to determine if there is any space in a queue.
 185:../freertos/queue.c ****  *
 186:../freertos/queue.c ****  * @return pdTRUE if there is no space, otherwise pdFALSE;
 187:../freertos/queue.c ****  */
 188:../freertos/queue.c **** static BaseType_t prvIsQueueFull( const Queue_t *pxQueue ) PRIVILEGED_FUNCTION;
 189:../freertos/queue.c **** 
 190:../freertos/queue.c **** /*
 191:../freertos/queue.c ****  * Copies an item into the queue, either at the front of the queue or the
 192:../freertos/queue.c ****  * back of the queue.
 193:../freertos/queue.c ****  */
 194:../freertos/queue.c **** static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const Bas
 195:../freertos/queue.c **** 
 196:../freertos/queue.c **** /*
 197:../freertos/queue.c ****  * Copies an item out of a queue.
ARM GAS  /tmp/ccMyq1Ea.s 			page 5


 198:../freertos/queue.c ****  */
 199:../freertos/queue.c **** static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer ) PRIVILEGED_FUNCT
 200:../freertos/queue.c **** 
 201:../freertos/queue.c **** #if ( configUSE_QUEUE_SETS == 1 )
 202:../freertos/queue.c **** 	/*
 203:../freertos/queue.c **** 	 * Checks to see if a queue is a member of a queue set, and if so, notifies
 204:../freertos/queue.c **** 	 * the queue set that the queue contains data.
 205:../freertos/queue.c **** 	 */
 206:../freertos/queue.c **** 	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCop
 207:../freertos/queue.c **** #endif
 208:../freertos/queue.c **** 
 209:../freertos/queue.c **** /*
 210:../freertos/queue.c ****  * Called after a Queue_t structure has been allocated either statically or
 211:../freertos/queue.c ****  * dynamically to fill in the structure's members.
 212:../freertos/queue.c ****  */
 213:../freertos/queue.c **** static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, u
 214:../freertos/queue.c **** 
 215:../freertos/queue.c **** /*
 216:../freertos/queue.c ****  * Mutexes are a special type of queue.  When a mutex is created, first the
 217:../freertos/queue.c ****  * queue is created, then prvInitialiseMutex() is called to configure the queue
 218:../freertos/queue.c ****  * as a mutex.
 219:../freertos/queue.c ****  */
 220:../freertos/queue.c **** #if( configUSE_MUTEXES == 1 )
 221:../freertos/queue.c **** 	static void prvInitialiseMutex( Queue_t *pxNewQueue ) PRIVILEGED_FUNCTION;
 222:../freertos/queue.c **** #endif
 223:../freertos/queue.c **** 
 224:../freertos/queue.c **** #if( configUSE_MUTEXES == 1 )
 225:../freertos/queue.c **** 	/*
 226:../freertos/queue.c **** 	 * If a task waiting for a mutex causes the mutex holder to inherit a
 227:../freertos/queue.c **** 	 * priority, but the waiting task times out, then the holder should
 228:../freertos/queue.c **** 	 * disinherit the priority - but only down to the highest priority of any
 229:../freertos/queue.c **** 	 * other tasks that are waiting for the same mutex.  This function returns
 230:../freertos/queue.c **** 	 * that priority.
 231:../freertos/queue.c **** 	 */
 232:../freertos/queue.c **** 	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue ) PRIVILEGE
 233:../freertos/queue.c **** #endif
 234:../freertos/queue.c **** /*-----------------------------------------------------------*/
 235:../freertos/queue.c **** 
 236:../freertos/queue.c **** /*
 237:../freertos/queue.c ****  * Macro to mark a queue as locked.  Locking a queue prevents an ISR from
 238:../freertos/queue.c ****  * accessing the queue event lists.
 239:../freertos/queue.c ****  */
 240:../freertos/queue.c **** #define prvLockQueue( pxQueue )								\
 241:../freertos/queue.c **** 	taskENTER_CRITICAL();									\
 242:../freertos/queue.c **** 	{														\
 243:../freertos/queue.c **** 		if( ( pxQueue )->cRxLock == queueUNLOCKED )			\
 244:../freertos/queue.c **** 		{													\
 245:../freertos/queue.c **** 			( pxQueue )->cRxLock = queueLOCKED_UNMODIFIED;	\
 246:../freertos/queue.c **** 		}													\
 247:../freertos/queue.c **** 		if( ( pxQueue )->cTxLock == queueUNLOCKED )			\
 248:../freertos/queue.c **** 		{													\
 249:../freertos/queue.c **** 			( pxQueue )->cTxLock = queueLOCKED_UNMODIFIED;	\
 250:../freertos/queue.c **** 		}													\
 251:../freertos/queue.c **** 	}														\
 252:../freertos/queue.c **** 	taskEXIT_CRITICAL()
 253:../freertos/queue.c **** /*-----------------------------------------------------------*/
 254:../freertos/queue.c **** 
ARM GAS  /tmp/ccMyq1Ea.s 			page 6


 255:../freertos/queue.c **** BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
 256:../freertos/queue.c **** {
 257:../freertos/queue.c **** Queue_t * const pxQueue = xQueue;
 258:../freertos/queue.c **** 
 259:../freertos/queue.c **** 	configASSERT( pxQueue );
 260:../freertos/queue.c **** 
 261:../freertos/queue.c **** 	taskENTER_CRITICAL();
 262:../freertos/queue.c **** 	{
 263:../freertos/queue.c **** 		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint 
 264:../freertos/queue.c **** 		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 265:../freertos/queue.c **** 		pxQueue->pcWriteTo = pxQueue->pcHead;
 266:../freertos/queue.c **** 		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSi
 267:../freertos/queue.c **** 		pxQueue->cRxLock = queueUNLOCKED;
 268:../freertos/queue.c **** 		pxQueue->cTxLock = queueUNLOCKED;
 269:../freertos/queue.c **** 
 270:../freertos/queue.c **** 		if( xNewQueue == pdFALSE )
 271:../freertos/queue.c **** 		{
 272:../freertos/queue.c **** 			/* If there are tasks blocked waiting to read from the queue, then
 273:../freertos/queue.c **** 			the tasks will remain blocked as after this function exits the queue
 274:../freertos/queue.c **** 			will still be empty.  If there are tasks blocked waiting to write to
 275:../freertos/queue.c **** 			the queue, then one should be unblocked as after this function exits
 276:../freertos/queue.c **** 			it will be possible to write to it. */
 277:../freertos/queue.c **** 			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 278:../freertos/queue.c **** 			{
 279:../freertos/queue.c **** 				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 280:../freertos/queue.c **** 				{
 281:../freertos/queue.c **** 					queueYIELD_IF_USING_PREEMPTION();
 282:../freertos/queue.c **** 				}
 283:../freertos/queue.c **** 				else
 284:../freertos/queue.c **** 				{
 285:../freertos/queue.c **** 					mtCOVERAGE_TEST_MARKER();
 286:../freertos/queue.c **** 				}
 287:../freertos/queue.c **** 			}
 288:../freertos/queue.c **** 			else
 289:../freertos/queue.c **** 			{
 290:../freertos/queue.c **** 				mtCOVERAGE_TEST_MARKER();
 291:../freertos/queue.c **** 			}
 292:../freertos/queue.c **** 		}
 293:../freertos/queue.c **** 		else
 294:../freertos/queue.c **** 		{
 295:../freertos/queue.c **** 			/* Ensure the event queues start in the correct state. */
 296:../freertos/queue.c **** 			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 297:../freertos/queue.c **** 			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 298:../freertos/queue.c **** 		}
 299:../freertos/queue.c **** 	}
 300:../freertos/queue.c **** 	taskEXIT_CRITICAL();
 301:../freertos/queue.c **** 
 302:../freertos/queue.c **** 	/* A value is returned for calling semantic consistency with previous
 303:../freertos/queue.c **** 	versions. */
 304:../freertos/queue.c **** 	return pdPASS;
 305:../freertos/queue.c **** }
 306:../freertos/queue.c **** /*-----------------------------------------------------------*/
 307:../freertos/queue.c **** 
 308:../freertos/queue.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 309:../freertos/queue.c **** 
 310:../freertos/queue.c **** 	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItem
 311:../freertos/queue.c **** 	{
ARM GAS  /tmp/ccMyq1Ea.s 			page 7


 312:../freertos/queue.c **** 	Queue_t *pxNewQueue;
 313:../freertos/queue.c **** 
 314:../freertos/queue.c **** 		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 315:../freertos/queue.c **** 
 316:../freertos/queue.c **** 		/* The StaticQueue_t structure and the queue storage area must be
 317:../freertos/queue.c **** 		supplied. */
 318:../freertos/queue.c **** 		configASSERT( pxStaticQueue != NULL );
 319:../freertos/queue.c **** 
 320:../freertos/queue.c **** 		/* A queue storage area should be provided if the item size is not 0, and
 321:../freertos/queue.c **** 		should not be provided if the item size is 0. */
 322:../freertos/queue.c **** 		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 323:../freertos/queue.c **** 		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 324:../freertos/queue.c **** 
 325:../freertos/queue.c **** 		#if( configASSERT_DEFINED == 1 )
 326:../freertos/queue.c **** 		{
 327:../freertos/queue.c **** 			/* Sanity check that the size of the structure used to declare a
 328:../freertos/queue.c **** 			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
 329:../freertos/queue.c **** 			the real queue and semaphore structures. */
 330:../freertos/queue.c **** 			volatile size_t xSize = sizeof( StaticQueue_t );
 331:../freertos/queue.c **** 			configASSERT( xSize == sizeof( Queue_t ) );
 332:../freertos/queue.c **** 			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 333:../freertos/queue.c **** 		}
 334:../freertos/queue.c **** 		#endif /* configASSERT_DEFINED */
 335:../freertos/queue.c **** 
 336:../freertos/queue.c **** 		/* The address of a statically allocated queue was passed in, use it.
 337:../freertos/queue.c **** 		The address of a statically allocated storage area was also passed in
 338:../freertos/queue.c **** 		but is already set. */
 339:../freertos/queue.c **** 		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structure
 340:../freertos/queue.c **** 
 341:../freertos/queue.c **** 		if( pxNewQueue != NULL )
 342:../freertos/queue.c **** 		{
 343:../freertos/queue.c **** 			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 344:../freertos/queue.c **** 			{
 345:../freertos/queue.c **** 				/* Queues can be allocated wither statically or dynamically, so
 346:../freertos/queue.c **** 				note this queue was allocated statically in case the queue is
 347:../freertos/queue.c **** 				later deleted. */
 348:../freertos/queue.c **** 				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 349:../freertos/queue.c **** 			}
 350:../freertos/queue.c **** 			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 351:../freertos/queue.c **** 
 352:../freertos/queue.c **** 			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 353:../freertos/queue.c **** 		}
 354:../freertos/queue.c **** 		else
 355:../freertos/queue.c **** 		{
 356:../freertos/queue.c **** 			traceQUEUE_CREATE_FAILED( ucQueueType );
 357:../freertos/queue.c **** 			mtCOVERAGE_TEST_MARKER();
 358:../freertos/queue.c **** 		}
 359:../freertos/queue.c **** 
 360:../freertos/queue.c **** 		return pxNewQueue;
 361:../freertos/queue.c **** 	}
 362:../freertos/queue.c **** 
 363:../freertos/queue.c **** #endif /* configSUPPORT_STATIC_ALLOCATION */
 364:../freertos/queue.c **** /*-----------------------------------------------------------*/
 365:../freertos/queue.c **** 
 366:../freertos/queue.c **** #if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 367:../freertos/queue.c **** 
 368:../freertos/queue.c **** 	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, 
ARM GAS  /tmp/ccMyq1Ea.s 			page 8


 369:../freertos/queue.c **** 	{
 370:../freertos/queue.c **** 	Queue_t *pxNewQueue;
 371:../freertos/queue.c **** 	size_t xQueueSizeInBytes;
 372:../freertos/queue.c **** 	uint8_t *pucQueueStorage;
 373:../freertos/queue.c **** 
 374:../freertos/queue.c **** 		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 375:../freertos/queue.c **** 
 376:../freertos/queue.c **** 		if( uxItemSize == ( UBaseType_t ) 0 )
 377:../freertos/queue.c **** 		{
 378:../freertos/queue.c **** 			/* There is not going to be a queue storage area. */
 379:../freertos/queue.c **** 			xQueueSizeInBytes = ( size_t ) 0;
 380:../freertos/queue.c **** 		}
 381:../freertos/queue.c **** 		else
 382:../freertos/queue.c **** 		{
 383:../freertos/queue.c **** 			/* Allocate enough space to hold the maximum number of items that
 384:../freertos/queue.c **** 			can be in the queue at any time. */
 385:../freertos/queue.c **** 			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as t
 386:../freertos/queue.c **** 		}
 387:../freertos/queue.c **** 
 388:../freertos/queue.c **** 		/* Allocate the queue and storage area.  Justification for MISRA
 389:../freertos/queue.c **** 		deviation as follows:  pvPortMalloc() always ensures returned memory
 390:../freertos/queue.c **** 		blocks are aligned per the requirements of the MCU stack.  In this case
 391:../freertos/queue.c **** 		pvPortMalloc() must return a pointer that is guaranteed to meet the
 392:../freertos/queue.c **** 		alignment requirements of the Queue_t structure - which in this case
 393:../freertos/queue.c **** 		is an int8_t *.  Therefore, whenever the stack alignment requirements
 394:../freertos/queue.c **** 		are greater than or equal to the pointer to char requirements the cast
 395:../freertos/queue.c **** 		is safe.  In other cases alignment requirements are not strict (one or
 396:../freertos/queue.c **** 		two bytes). */
 397:../freertos/queue.c **** 		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !
 398:../freertos/queue.c **** 
 399:../freertos/queue.c **** 		if( pxNewQueue != NULL )
 400:../freertos/queue.c **** 		{
 401:../freertos/queue.c **** 			/* Jump past the queue structure to find the location of the queue
 402:../freertos/queue.c **** 			storage area. */
 403:../freertos/queue.c **** 			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 404:../freertos/queue.c **** 			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, es
 405:../freertos/queue.c **** 
 406:../freertos/queue.c **** 			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
 407:../freertos/queue.c **** 			{
 408:../freertos/queue.c **** 				/* Queues can be created either statically or dynamically, so
 409:../freertos/queue.c **** 				note this task was created dynamically in case it is later
 410:../freertos/queue.c **** 				deleted. */
 411:../freertos/queue.c **** 				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 412:../freertos/queue.c **** 			}
 413:../freertos/queue.c **** 			#endif /* configSUPPORT_STATIC_ALLOCATION */
 414:../freertos/queue.c **** 
 415:../freertos/queue.c **** 			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 416:../freertos/queue.c **** 		}
 417:../freertos/queue.c **** 		else
 418:../freertos/queue.c **** 		{
 419:../freertos/queue.c **** 			traceQUEUE_CREATE_FAILED( ucQueueType );
 420:../freertos/queue.c **** 			mtCOVERAGE_TEST_MARKER();
 421:../freertos/queue.c **** 		}
 422:../freertos/queue.c **** 
 423:../freertos/queue.c **** 		return pxNewQueue;
 424:../freertos/queue.c **** 	}
 425:../freertos/queue.c **** 
ARM GAS  /tmp/ccMyq1Ea.s 			page 9


 426:../freertos/queue.c **** #endif /* configSUPPORT_STATIC_ALLOCATION */
 427:../freertos/queue.c **** /*-----------------------------------------------------------*/
 428:../freertos/queue.c **** 
 429:../freertos/queue.c **** static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, u
 430:../freertos/queue.c **** {
 431:../freertos/queue.c **** 	/* Remove compiler warnings about unused parameters should
 432:../freertos/queue.c **** 	configUSE_TRACE_FACILITY not be set to 1. */
 433:../freertos/queue.c **** 	( void ) ucQueueType;
 434:../freertos/queue.c **** 
 435:../freertos/queue.c **** 	if( uxItemSize == ( UBaseType_t ) 0 )
 436:../freertos/queue.c **** 	{
 437:../freertos/queue.c **** 		/* No RAM was allocated for the queue storage area, but PC head cannot
 438:../freertos/queue.c **** 		be set to NULL because NULL is used as a key to say the queue is used as
 439:../freertos/queue.c **** 		a mutex.  Therefore just set pcHead to point to the queue as a benign
 440:../freertos/queue.c **** 		value that is known to be within the memory map. */
 441:../freertos/queue.c **** 		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 442:../freertos/queue.c **** 	}
 443:../freertos/queue.c **** 	else
 444:../freertos/queue.c **** 	{
 445:../freertos/queue.c **** 		/* Set the head to the start of the queue storage area. */
 446:../freertos/queue.c **** 		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 447:../freertos/queue.c **** 	}
 448:../freertos/queue.c **** 
 449:../freertos/queue.c **** 	/* Initialise the queue members as described where the queue type is
 450:../freertos/queue.c **** 	defined. */
 451:../freertos/queue.c **** 	pxNewQueue->uxLength = uxQueueLength;
 452:../freertos/queue.c **** 	pxNewQueue->uxItemSize = uxItemSize;
 453:../freertos/queue.c **** 	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 454:../freertos/queue.c **** 
 455:../freertos/queue.c **** 	#if ( configUSE_TRACE_FACILITY == 1 )
 456:../freertos/queue.c **** 	{
 457:../freertos/queue.c **** 		pxNewQueue->ucQueueType = ucQueueType;
 458:../freertos/queue.c **** 	}
 459:../freertos/queue.c **** 	#endif /* configUSE_TRACE_FACILITY */
 460:../freertos/queue.c **** 
 461:../freertos/queue.c **** 	#if( configUSE_QUEUE_SETS == 1 )
 462:../freertos/queue.c **** 	{
 463:../freertos/queue.c **** 		pxNewQueue->pxQueueSetContainer = NULL;
 464:../freertos/queue.c **** 	}
 465:../freertos/queue.c **** 	#endif /* configUSE_QUEUE_SETS */
 466:../freertos/queue.c **** 
 467:../freertos/queue.c **** 	traceQUEUE_CREATE( pxNewQueue );
 468:../freertos/queue.c **** }
 469:../freertos/queue.c **** /*-----------------------------------------------------------*/
 470:../freertos/queue.c **** 
 471:../freertos/queue.c **** #if( configUSE_MUTEXES == 1 )
 472:../freertos/queue.c **** 
 473:../freertos/queue.c **** 	static void prvInitialiseMutex( Queue_t *pxNewQueue )
 474:../freertos/queue.c **** 	{
 475:../freertos/queue.c **** 		if( pxNewQueue != NULL )
 476:../freertos/queue.c **** 		{
 477:../freertos/queue.c **** 			/* The queue create function will set all the queue structure members
 478:../freertos/queue.c **** 			correctly for a generic queue, but this function is creating a
 479:../freertos/queue.c **** 			mutex.  Overwrite those members that need to be set differently -
 480:../freertos/queue.c **** 			in particular the information required for priority inheritance. */
 481:../freertos/queue.c **** 			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 482:../freertos/queue.c **** 			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
ARM GAS  /tmp/ccMyq1Ea.s 			page 10


 483:../freertos/queue.c **** 
 484:../freertos/queue.c **** 			/* In case this is a recursive mutex. */
 485:../freertos/queue.c **** 			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 486:../freertos/queue.c **** 
 487:../freertos/queue.c **** 			traceCREATE_MUTEX( pxNewQueue );
 488:../freertos/queue.c **** 
 489:../freertos/queue.c **** 			/* Start with the semaphore in the expected state. */
 490:../freertos/queue.c **** 			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 491:../freertos/queue.c **** 		}
 492:../freertos/queue.c **** 		else
 493:../freertos/queue.c **** 		{
 494:../freertos/queue.c **** 			traceCREATE_MUTEX_FAILED();
 495:../freertos/queue.c **** 		}
 496:../freertos/queue.c **** 	}
 497:../freertos/queue.c **** 
 498:../freertos/queue.c **** #endif /* configUSE_MUTEXES */
 499:../freertos/queue.c **** /*-----------------------------------------------------------*/
 500:../freertos/queue.c **** 
 501:../freertos/queue.c **** #if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 502:../freertos/queue.c **** 
 503:../freertos/queue.c **** 	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
 504:../freertos/queue.c **** 	{
 505:../freertos/queue.c **** 	QueueHandle_t xNewQueue;
 506:../freertos/queue.c **** 	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 507:../freertos/queue.c **** 
 508:../freertos/queue.c **** 		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 509:../freertos/queue.c **** 		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 510:../freertos/queue.c **** 
 511:../freertos/queue.c **** 		return xNewQueue;
 512:../freertos/queue.c **** 	}
 513:../freertos/queue.c **** 
 514:../freertos/queue.c **** #endif /* configUSE_MUTEXES */
 515:../freertos/queue.c **** /*-----------------------------------------------------------*/
 516:../freertos/queue.c **** 
 517:../freertos/queue.c **** #if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 518:../freertos/queue.c **** 
 519:../freertos/queue.c **** 	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
 520:../freertos/queue.c **** 	{
 521:../freertos/queue.c **** 	QueueHandle_t xNewQueue;
 522:../freertos/queue.c **** 	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 523:../freertos/queue.c **** 
 524:../freertos/queue.c **** 		/* Prevent compiler warnings about unused parameters if
 525:../freertos/queue.c **** 		configUSE_TRACE_FACILITY does not equal 1. */
 526:../freertos/queue.c **** 		( void ) ucQueueType;
 527:../freertos/queue.c **** 
 528:../freertos/queue.c **** 		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueTy
 529:../freertos/queue.c **** 		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 530:../freertos/queue.c **** 
 531:../freertos/queue.c **** 		return xNewQueue;
 532:../freertos/queue.c **** 	}
 533:../freertos/queue.c **** 
 534:../freertos/queue.c **** #endif /* configUSE_MUTEXES */
 535:../freertos/queue.c **** /*-----------------------------------------------------------*/
 536:../freertos/queue.c **** 
 537:../freertos/queue.c **** #if ( ( configUSE_MUTEXES == 1 ) && ( INCLUDE_xSemaphoreGetMutexHolder == 1 ) )
 538:../freertos/queue.c **** 
 539:../freertos/queue.c **** 	TaskHandle_t xQueueGetMutexHolder( QueueHandle_t xSemaphore )
ARM GAS  /tmp/ccMyq1Ea.s 			page 11


 540:../freertos/queue.c **** 	{
 541:../freertos/queue.c **** 	TaskHandle_t pxReturn;
 542:../freertos/queue.c **** 	Queue_t * const pxSemaphore = ( Queue_t * ) xSemaphore;
 543:../freertos/queue.c **** 
 544:../freertos/queue.c **** 		/* This function is called by xSemaphoreGetMutexHolder(), and should not
 545:../freertos/queue.c **** 		be called directly.  Note:  This is a good way of determining if the
 546:../freertos/queue.c **** 		calling task is the mutex holder, but not a good way of determining the
 547:../freertos/queue.c **** 		identity of the mutex holder, as the holder may change between the
 548:../freertos/queue.c **** 		following critical section exiting and the function returning. */
 549:../freertos/queue.c **** 		taskENTER_CRITICAL();
 550:../freertos/queue.c **** 		{
 551:../freertos/queue.c **** 			if( pxSemaphore->uxQueueType == queueQUEUE_IS_MUTEX )
 552:../freertos/queue.c **** 			{
 553:../freertos/queue.c **** 				pxReturn = pxSemaphore->u.xSemaphore.xMutexHolder;
 554:../freertos/queue.c **** 			}
 555:../freertos/queue.c **** 			else
 556:../freertos/queue.c **** 			{
 557:../freertos/queue.c **** 				pxReturn = NULL;
 558:../freertos/queue.c **** 			}
 559:../freertos/queue.c **** 		}
 560:../freertos/queue.c **** 		taskEXIT_CRITICAL();
 561:../freertos/queue.c **** 
 562:../freertos/queue.c **** 		return pxReturn;
 563:../freertos/queue.c **** 	} /*lint !e818 xSemaphore cannot be a pointer to const because it is a typedef. */
 564:../freertos/queue.c **** 
 565:../freertos/queue.c **** #endif
 566:../freertos/queue.c **** /*-----------------------------------------------------------*/
 567:../freertos/queue.c **** 
 568:../freertos/queue.c **** #if ( ( configUSE_MUTEXES == 1 ) && ( INCLUDE_xSemaphoreGetMutexHolder == 1 ) )
 569:../freertos/queue.c **** 
 570:../freertos/queue.c **** 	TaskHandle_t xQueueGetMutexHolderFromISR( QueueHandle_t xSemaphore )
 571:../freertos/queue.c **** 	{
 572:../freertos/queue.c **** 	TaskHandle_t pxReturn;
 573:../freertos/queue.c **** 
 574:../freertos/queue.c **** 		configASSERT( xSemaphore );
 575:../freertos/queue.c **** 
 576:../freertos/queue.c **** 		/* Mutexes cannot be used in interrupt service routines, so the mutex
 577:../freertos/queue.c **** 		holder should not change in an ISR, and therefore a critical section is
 578:../freertos/queue.c **** 		not required here. */
 579:../freertos/queue.c **** 		if( ( ( Queue_t * ) xSemaphore )->uxQueueType == queueQUEUE_IS_MUTEX )
 580:../freertos/queue.c **** 		{
 581:../freertos/queue.c **** 			pxReturn = ( ( Queue_t * ) xSemaphore )->u.xSemaphore.xMutexHolder;
 582:../freertos/queue.c **** 		}
 583:../freertos/queue.c **** 		else
 584:../freertos/queue.c **** 		{
 585:../freertos/queue.c **** 			pxReturn = NULL;
 586:../freertos/queue.c **** 		}
 587:../freertos/queue.c **** 
 588:../freertos/queue.c **** 		return pxReturn;
 589:../freertos/queue.c **** 	} /*lint !e818 xSemaphore cannot be a pointer to const because it is a typedef. */
 590:../freertos/queue.c **** 
 591:../freertos/queue.c **** #endif
 592:../freertos/queue.c **** /*-----------------------------------------------------------*/
 593:../freertos/queue.c **** 
 594:../freertos/queue.c **** #if ( configUSE_RECURSIVE_MUTEXES == 1 )
 595:../freertos/queue.c **** 
 596:../freertos/queue.c **** 	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
ARM GAS  /tmp/ccMyq1Ea.s 			page 12


 597:../freertos/queue.c **** 	{
 598:../freertos/queue.c **** 	BaseType_t xReturn;
 599:../freertos/queue.c **** 	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 600:../freertos/queue.c **** 
 601:../freertos/queue.c **** 		configASSERT( pxMutex );
 602:../freertos/queue.c **** 
 603:../freertos/queue.c **** 		/* If this is the task that holds the mutex then xMutexHolder will not
 604:../freertos/queue.c **** 		change outside of this task.  If this task does not hold the mutex then
 605:../freertos/queue.c **** 		pxMutexHolder can never coincidentally equal the tasks handle, and as
 606:../freertos/queue.c **** 		this is the only condition we are interested in it does not matter if
 607:../freertos/queue.c **** 		pxMutexHolder is accessed simultaneously by another task.  Therefore no
 608:../freertos/queue.c **** 		mutual exclusion is required to test the pxMutexHolder variable. */
 609:../freertos/queue.c **** 		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 610:../freertos/queue.c **** 		{
 611:../freertos/queue.c **** 			traceGIVE_MUTEX_RECURSIVE( pxMutex );
 612:../freertos/queue.c **** 
 613:../freertos/queue.c **** 			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
 614:../freertos/queue.c **** 			the task handle, therefore no underflow check is required.  Also,
 615:../freertos/queue.c **** 			uxRecursiveCallCount is only modified by the mutex holder, and as
 616:../freertos/queue.c **** 			there can only be one, no mutual exclusion is required to modify the
 617:../freertos/queue.c **** 			uxRecursiveCallCount member. */
 618:../freertos/queue.c **** 			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 619:../freertos/queue.c **** 
 620:../freertos/queue.c **** 			/* Has the recursive call count unwound to 0? */
 621:../freertos/queue.c **** 			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 622:../freertos/queue.c **** 			{
 623:../freertos/queue.c **** 				/* Return the mutex.  This will automatically unblock any other
 624:../freertos/queue.c **** 				task that might be waiting to access the mutex. */
 625:../freertos/queue.c **** 				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 626:../freertos/queue.c **** 			}
 627:../freertos/queue.c **** 			else
 628:../freertos/queue.c **** 			{
 629:../freertos/queue.c **** 				mtCOVERAGE_TEST_MARKER();
 630:../freertos/queue.c **** 			}
 631:../freertos/queue.c **** 
 632:../freertos/queue.c **** 			xReturn = pdPASS;
 633:../freertos/queue.c **** 		}
 634:../freertos/queue.c **** 		else
 635:../freertos/queue.c **** 		{
 636:../freertos/queue.c **** 			/* The mutex cannot be given because the calling task is not the
 637:../freertos/queue.c **** 			holder. */
 638:../freertos/queue.c **** 			xReturn = pdFAIL;
 639:../freertos/queue.c **** 
 640:../freertos/queue.c **** 			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
 641:../freertos/queue.c **** 		}
 642:../freertos/queue.c **** 
 643:../freertos/queue.c **** 		return xReturn;
 644:../freertos/queue.c **** 	}
 645:../freertos/queue.c **** 
 646:../freertos/queue.c **** #endif /* configUSE_RECURSIVE_MUTEXES */
 647:../freertos/queue.c **** /*-----------------------------------------------------------*/
 648:../freertos/queue.c **** 
 649:../freertos/queue.c **** #if ( configUSE_RECURSIVE_MUTEXES == 1 )
 650:../freertos/queue.c **** 
 651:../freertos/queue.c **** 	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
 652:../freertos/queue.c **** 	{
 653:../freertos/queue.c **** 	BaseType_t xReturn;
ARM GAS  /tmp/ccMyq1Ea.s 			page 13


 654:../freertos/queue.c **** 	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 655:../freertos/queue.c **** 
 656:../freertos/queue.c **** 		configASSERT( pxMutex );
 657:../freertos/queue.c **** 
 658:../freertos/queue.c **** 		/* Comments regarding mutual exclusion as per those within
 659:../freertos/queue.c **** 		xQueueGiveMutexRecursive(). */
 660:../freertos/queue.c **** 
 661:../freertos/queue.c **** 		traceTAKE_MUTEX_RECURSIVE( pxMutex );
 662:../freertos/queue.c **** 
 663:../freertos/queue.c **** 		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 664:../freertos/queue.c **** 		{
 665:../freertos/queue.c **** 			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 666:../freertos/queue.c **** 			xReturn = pdPASS;
 667:../freertos/queue.c **** 		}
 668:../freertos/queue.c **** 		else
 669:../freertos/queue.c **** 		{
 670:../freertos/queue.c **** 			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 671:../freertos/queue.c **** 
 672:../freertos/queue.c **** 			/* pdPASS will only be returned if the mutex was successfully
 673:../freertos/queue.c **** 			obtained.  The calling task may have entered the Blocked state
 674:../freertos/queue.c **** 			before reaching here. */
 675:../freertos/queue.c **** 			if( xReturn != pdFAIL )
 676:../freertos/queue.c **** 			{
 677:../freertos/queue.c **** 				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 678:../freertos/queue.c **** 			}
 679:../freertos/queue.c **** 			else
 680:../freertos/queue.c **** 			{
 681:../freertos/queue.c **** 				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
 682:../freertos/queue.c **** 			}
 683:../freertos/queue.c **** 		}
 684:../freertos/queue.c **** 
 685:../freertos/queue.c **** 		return xReturn;
 686:../freertos/queue.c **** 	}
 687:../freertos/queue.c **** 
 688:../freertos/queue.c **** #endif /* configUSE_RECURSIVE_MUTEXES */
 689:../freertos/queue.c **** /*-----------------------------------------------------------*/
 690:../freertos/queue.c **** 
 691:../freertos/queue.c **** #if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 692:../freertos/queue.c **** 
 693:../freertos/queue.c **** 	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t
 694:../freertos/queue.c **** 	{
 695:../freertos/queue.c **** 	QueueHandle_t xHandle;
 696:../freertos/queue.c **** 
 697:../freertos/queue.c **** 		configASSERT( uxMaxCount != 0 );
 698:../freertos/queue.c **** 		configASSERT( uxInitialCount <= uxMaxCount );
 699:../freertos/queue.c **** 
 700:../freertos/queue.c **** 		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStatic
 701:../freertos/queue.c **** 
 702:../freertos/queue.c **** 		if( xHandle != NULL )
 703:../freertos/queue.c **** 		{
 704:../freertos/queue.c **** 			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 705:../freertos/queue.c **** 
 706:../freertos/queue.c **** 			traceCREATE_COUNTING_SEMAPHORE();
 707:../freertos/queue.c **** 		}
 708:../freertos/queue.c **** 		else
 709:../freertos/queue.c **** 		{
 710:../freertos/queue.c **** 			traceCREATE_COUNTING_SEMAPHORE_FAILED();
ARM GAS  /tmp/ccMyq1Ea.s 			page 14


 711:../freertos/queue.c **** 		}
 712:../freertos/queue.c **** 
 713:../freertos/queue.c **** 		return xHandle;
 714:../freertos/queue.c **** 	}
 715:../freertos/queue.c **** 
 716:../freertos/queue.c **** #endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) *
 717:../freertos/queue.c **** /*-----------------------------------------------------------*/
 718:../freertos/queue.c **** 
 719:../freertos/queue.c **** #if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 720:../freertos/queue.c **** 
 721:../freertos/queue.c **** 	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxIni
 722:../freertos/queue.c **** 	{
 723:../freertos/queue.c **** 	QueueHandle_t xHandle;
 724:../freertos/queue.c **** 
 725:../freertos/queue.c **** 		configASSERT( uxMaxCount != 0 );
 726:../freertos/queue.c **** 		configASSERT( uxInitialCount <= uxMaxCount );
 727:../freertos/queue.c **** 
 728:../freertos/queue.c **** 		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUN
 729:../freertos/queue.c **** 
 730:../freertos/queue.c **** 		if( xHandle != NULL )
 731:../freertos/queue.c **** 		{
 732:../freertos/queue.c **** 			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 733:../freertos/queue.c **** 
 734:../freertos/queue.c **** 			traceCREATE_COUNTING_SEMAPHORE();
 735:../freertos/queue.c **** 		}
 736:../freertos/queue.c **** 		else
 737:../freertos/queue.c **** 		{
 738:../freertos/queue.c **** 			traceCREATE_COUNTING_SEMAPHORE_FAILED();
 739:../freertos/queue.c **** 		}
 740:../freertos/queue.c **** 
 741:../freertos/queue.c **** 		return xHandle;
 742:../freertos/queue.c **** 	}
 743:../freertos/queue.c **** 
 744:../freertos/queue.c **** #endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) *
 745:../freertos/queue.c **** /*-----------------------------------------------------------*/
 746:../freertos/queue.c **** 
 747:../freertos/queue.c **** BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xT
 748:../freertos/queue.c **** {
 749:../freertos/queue.c **** BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 750:../freertos/queue.c **** TimeOut_t xTimeOut;
 751:../freertos/queue.c **** Queue_t * const pxQueue = xQueue;
 752:../freertos/queue.c **** 
 753:../freertos/queue.c **** 	configASSERT( pxQueue );
 754:../freertos/queue.c **** 	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 755:../freertos/queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 756:../freertos/queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 757:../freertos/queue.c **** 	{
 758:../freertos/queue.c **** 		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 )
 759:../freertos/queue.c **** 	}
 760:../freertos/queue.c **** 	#endif
 761:../freertos/queue.c **** 
 762:../freertos/queue.c **** 
 763:../freertos/queue.c **** 	/*lint -save -e904 This function relaxes the coding standard somewhat to
 764:../freertos/queue.c **** 	allow return statements within the function itself.  This is done in the
 765:../freertos/queue.c **** 	interest of execution time efficiency. */
 766:../freertos/queue.c **** 	for( ;; )
 767:../freertos/queue.c **** 	{
ARM GAS  /tmp/ccMyq1Ea.s 			page 15


 768:../freertos/queue.c **** 		taskENTER_CRITICAL();
 769:../freertos/queue.c **** 		{
 770:../freertos/queue.c **** 			/* Is there room on the queue now?  The running task must be the
 771:../freertos/queue.c **** 			highest priority task wanting to access the queue.  If the head item
 772:../freertos/queue.c **** 			in the queue is to be overwritten then it does not matter if the
 773:../freertos/queue.c **** 			queue is full. */
 774:../freertos/queue.c **** 			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 775:../freertos/queue.c **** 			{
 776:../freertos/queue.c **** 				traceQUEUE_SEND( pxQueue );
 777:../freertos/queue.c **** 
 778:../freertos/queue.c **** 				#if ( configUSE_QUEUE_SETS == 1 )
 779:../freertos/queue.c **** 				{
 780:../freertos/queue.c **** 				UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 781:../freertos/queue.c **** 
 782:../freertos/queue.c **** 					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 783:../freertos/queue.c **** 
 784:../freertos/queue.c **** 					if( pxQueue->pxQueueSetContainer != NULL )
 785:../freertos/queue.c **** 					{
 786:../freertos/queue.c **** 						if( ( xCopyPosition == queueOVERWRITE ) && ( uxPreviousMessagesWaiting != ( UBaseType_t ) 0 )
 787:../freertos/queue.c **** 						{
 788:../freertos/queue.c **** 							/* Do not notify the queue set as an existing item
 789:../freertos/queue.c **** 							was overwritten in the queue so the number of items
 790:../freertos/queue.c **** 							in the queue has not changed. */
 791:../freertos/queue.c **** 							mtCOVERAGE_TEST_MARKER();
 792:../freertos/queue.c **** 						}
 793:../freertos/queue.c **** 						else if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
 794:../freertos/queue.c **** 						{
 795:../freertos/queue.c **** 							/* The queue is a member of a queue set, and posting
 796:../freertos/queue.c **** 							to the queue set caused a higher priority task to
 797:../freertos/queue.c **** 							unblock. A context switch is required. */
 798:../freertos/queue.c **** 							queueYIELD_IF_USING_PREEMPTION();
 799:../freertos/queue.c **** 						}
 800:../freertos/queue.c **** 						else
 801:../freertos/queue.c **** 						{
 802:../freertos/queue.c **** 							mtCOVERAGE_TEST_MARKER();
 803:../freertos/queue.c **** 						}
 804:../freertos/queue.c **** 					}
 805:../freertos/queue.c **** 					else
 806:../freertos/queue.c **** 					{
 807:../freertos/queue.c **** 						/* If there was a task waiting for data to arrive on the
 808:../freertos/queue.c **** 						queue then unblock it now. */
 809:../freertos/queue.c **** 						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 810:../freertos/queue.c **** 						{
 811:../freertos/queue.c **** 							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 812:../freertos/queue.c **** 							{
 813:../freertos/queue.c **** 								/* The unblocked task has a priority higher than
 814:../freertos/queue.c **** 								our own so yield immediately.  Yes it is ok to
 815:../freertos/queue.c **** 								do this from within the critical section - the
 816:../freertos/queue.c **** 								kernel takes care of that. */
 817:../freertos/queue.c **** 								queueYIELD_IF_USING_PREEMPTION();
 818:../freertos/queue.c **** 							}
 819:../freertos/queue.c **** 							else
 820:../freertos/queue.c **** 							{
 821:../freertos/queue.c **** 								mtCOVERAGE_TEST_MARKER();
 822:../freertos/queue.c **** 							}
 823:../freertos/queue.c **** 						}
 824:../freertos/queue.c **** 						else if( xYieldRequired != pdFALSE )
ARM GAS  /tmp/ccMyq1Ea.s 			page 16


 825:../freertos/queue.c **** 						{
 826:../freertos/queue.c **** 							/* This path is a special case that will only get
 827:../freertos/queue.c **** 							executed if the task was holding multiple mutexes
 828:../freertos/queue.c **** 							and the mutexes were given back in an order that is
 829:../freertos/queue.c **** 							different to that in which they were taken. */
 830:../freertos/queue.c **** 							queueYIELD_IF_USING_PREEMPTION();
 831:../freertos/queue.c **** 						}
 832:../freertos/queue.c **** 						else
 833:../freertos/queue.c **** 						{
 834:../freertos/queue.c **** 							mtCOVERAGE_TEST_MARKER();
 835:../freertos/queue.c **** 						}
 836:../freertos/queue.c **** 					}
 837:../freertos/queue.c **** 				}
 838:../freertos/queue.c **** 				#else /* configUSE_QUEUE_SETS */
 839:../freertos/queue.c **** 				{
 840:../freertos/queue.c **** 					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 841:../freertos/queue.c **** 
 842:../freertos/queue.c **** 					/* If there was a task waiting for data to arrive on the
 843:../freertos/queue.c **** 					queue then unblock it now. */
 844:../freertos/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 845:../freertos/queue.c **** 					{
 846:../freertos/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 847:../freertos/queue.c **** 						{
 848:../freertos/queue.c **** 							/* The unblocked task has a priority higher than
 849:../freertos/queue.c **** 							our own so yield immediately.  Yes it is ok to do
 850:../freertos/queue.c **** 							this from within the critical section - the kernel
 851:../freertos/queue.c **** 							takes care of that. */
 852:../freertos/queue.c **** 							queueYIELD_IF_USING_PREEMPTION();
 853:../freertos/queue.c **** 						}
 854:../freertos/queue.c **** 						else
 855:../freertos/queue.c **** 						{
 856:../freertos/queue.c **** 							mtCOVERAGE_TEST_MARKER();
 857:../freertos/queue.c **** 						}
 858:../freertos/queue.c **** 					}
 859:../freertos/queue.c **** 					else if( xYieldRequired != pdFALSE )
 860:../freertos/queue.c **** 					{
 861:../freertos/queue.c **** 						/* This path is a special case that will only get
 862:../freertos/queue.c **** 						executed if the task was holding multiple mutexes and
 863:../freertos/queue.c **** 						the mutexes were given back in an order that is
 864:../freertos/queue.c **** 						different to that in which they were taken. */
 865:../freertos/queue.c **** 						queueYIELD_IF_USING_PREEMPTION();
 866:../freertos/queue.c **** 					}
 867:../freertos/queue.c **** 					else
 868:../freertos/queue.c **** 					{
 869:../freertos/queue.c **** 						mtCOVERAGE_TEST_MARKER();
 870:../freertos/queue.c **** 					}
 871:../freertos/queue.c **** 				}
 872:../freertos/queue.c **** 				#endif /* configUSE_QUEUE_SETS */
 873:../freertos/queue.c **** 
 874:../freertos/queue.c **** 				taskEXIT_CRITICAL();
 875:../freertos/queue.c **** 				return pdPASS;
 876:../freertos/queue.c **** 			}
 877:../freertos/queue.c **** 			else
 878:../freertos/queue.c **** 			{
 879:../freertos/queue.c **** 				if( xTicksToWait == ( TickType_t ) 0 )
 880:../freertos/queue.c **** 				{
 881:../freertos/queue.c **** 					/* The queue was full and no block time is specified (or
ARM GAS  /tmp/ccMyq1Ea.s 			page 17


 882:../freertos/queue.c **** 					the block time has expired) so leave now. */
 883:../freertos/queue.c **** 					taskEXIT_CRITICAL();
 884:../freertos/queue.c **** 
 885:../freertos/queue.c **** 					/* Return to the original privilege level before exiting
 886:../freertos/queue.c **** 					the function. */
 887:../freertos/queue.c **** 					traceQUEUE_SEND_FAILED( pxQueue );
 888:../freertos/queue.c **** 					return errQUEUE_FULL;
 889:../freertos/queue.c **** 				}
 890:../freertos/queue.c **** 				else if( xEntryTimeSet == pdFALSE )
 891:../freertos/queue.c **** 				{
 892:../freertos/queue.c **** 					/* The queue was full and a block time was specified so
 893:../freertos/queue.c **** 					configure the timeout structure. */
 894:../freertos/queue.c **** 					vTaskInternalSetTimeOutState( &xTimeOut );
 895:../freertos/queue.c **** 					xEntryTimeSet = pdTRUE;
 896:../freertos/queue.c **** 				}
 897:../freertos/queue.c **** 				else
 898:../freertos/queue.c **** 				{
 899:../freertos/queue.c **** 					/* Entry time was already set. */
 900:../freertos/queue.c **** 					mtCOVERAGE_TEST_MARKER();
 901:../freertos/queue.c **** 				}
 902:../freertos/queue.c **** 			}
 903:../freertos/queue.c **** 		}
 904:../freertos/queue.c **** 		taskEXIT_CRITICAL();
 905:../freertos/queue.c **** 
 906:../freertos/queue.c **** 		/* Interrupts and other tasks can send to and receive from the queue
 907:../freertos/queue.c **** 		now the critical section has been exited. */
 908:../freertos/queue.c **** 
 909:../freertos/queue.c **** 		vTaskSuspendAll();
 910:../freertos/queue.c **** 		prvLockQueue( pxQueue );
 911:../freertos/queue.c **** 
 912:../freertos/queue.c **** 		/* Update the timeout state to see if it has expired yet. */
 913:../freertos/queue.c **** 		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 914:../freertos/queue.c **** 		{
 915:../freertos/queue.c **** 			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 916:../freertos/queue.c **** 			{
 917:../freertos/queue.c **** 				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
 918:../freertos/queue.c **** 				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 919:../freertos/queue.c **** 
 920:../freertos/queue.c **** 				/* Unlocking the queue means queue events can effect the
 921:../freertos/queue.c **** 				event list.  It is possible that interrupts occurring now
 922:../freertos/queue.c **** 				remove this task from the event list again - but as the
 923:../freertos/queue.c **** 				scheduler is suspended the task will go onto the pending
 924:../freertos/queue.c **** 				ready last instead of the actual ready list. */
 925:../freertos/queue.c **** 				prvUnlockQueue( pxQueue );
 926:../freertos/queue.c **** 
 927:../freertos/queue.c **** 				/* Resuming the scheduler will move tasks from the pending
 928:../freertos/queue.c **** 				ready list into the ready list - so it is feasible that this
 929:../freertos/queue.c **** 				task is already in a ready list before it yields - in which
 930:../freertos/queue.c **** 				case the yield will not cause a context switch unless there
 931:../freertos/queue.c **** 				is also a higher priority task in the pending ready list. */
 932:../freertos/queue.c **** 				if( xTaskResumeAll() == pdFALSE )
 933:../freertos/queue.c **** 				{
 934:../freertos/queue.c **** 					portYIELD_WITHIN_API();
 935:../freertos/queue.c **** 				}
 936:../freertos/queue.c **** 			}
 937:../freertos/queue.c **** 			else
 938:../freertos/queue.c **** 			{
ARM GAS  /tmp/ccMyq1Ea.s 			page 18


 939:../freertos/queue.c **** 				/* Try again. */
 940:../freertos/queue.c **** 				prvUnlockQueue( pxQueue );
 941:../freertos/queue.c **** 				( void ) xTaskResumeAll();
 942:../freertos/queue.c **** 			}
 943:../freertos/queue.c **** 		}
 944:../freertos/queue.c **** 		else
 945:../freertos/queue.c **** 		{
 946:../freertos/queue.c **** 			/* The timeout has expired. */
 947:../freertos/queue.c **** 			prvUnlockQueue( pxQueue );
 948:../freertos/queue.c **** 			( void ) xTaskResumeAll();
 949:../freertos/queue.c **** 
 950:../freertos/queue.c **** 			traceQUEUE_SEND_FAILED( pxQueue );
 951:../freertos/queue.c **** 			return errQUEUE_FULL;
 952:../freertos/queue.c **** 		}
 953:../freertos/queue.c **** 	} /*lint -restore */
 954:../freertos/queue.c **** }
 955:../freertos/queue.c **** /*-----------------------------------------------------------*/
 956:../freertos/queue.c **** 
 957:../freertos/queue.c **** BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseTy
 958:../freertos/queue.c **** {
 959:../freertos/queue.c **** BaseType_t xReturn;
 960:../freertos/queue.c **** UBaseType_t uxSavedInterruptStatus;
 961:../freertos/queue.c **** Queue_t * const pxQueue = xQueue;
 962:../freertos/queue.c **** 
 963:../freertos/queue.c **** 	configASSERT( pxQueue );
 964:../freertos/queue.c **** 	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 965:../freertos/queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 966:../freertos/queue.c **** 
 967:../freertos/queue.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
 968:../freertos/queue.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
 969:../freertos/queue.c **** 	above the maximum system call priority are kept permanently enabled, even
 970:../freertos/queue.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
 971:../freertos/queue.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
 972:../freertos/queue.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
 973:../freertos/queue.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
 974:../freertos/queue.c **** 	assigned a priority above the configured maximum system call priority.
 975:../freertos/queue.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
 976:../freertos/queue.c **** 	that have been assigned a priority at or (logically) below the maximum
 977:../freertos/queue.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
 978:../freertos/queue.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
 979:../freertos/queue.c **** 	More information (albeit Cortex-M specific) is provided on the following
 980:../freertos/queue.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
 981:../freertos/queue.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 982:../freertos/queue.c **** 
 983:../freertos/queue.c **** 	/* Similar to xQueueGenericSend, except without blocking if there is no room
 984:../freertos/queue.c **** 	in the queue.  Also don't directly wake a task that was blocked on a queue
 985:../freertos/queue.c **** 	read, instead return a flag to say whether a context switch is required or
 986:../freertos/queue.c **** 	not (i.e. has a task with a higher priority than us been woken by this
 987:../freertos/queue.c **** 	post). */
 988:../freertos/queue.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 989:../freertos/queue.c **** 	{
 990:../freertos/queue.c **** 		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 991:../freertos/queue.c **** 		{
 992:../freertos/queue.c **** 			const int8_t cTxLock = pxQueue->cTxLock;
 993:../freertos/queue.c **** 
 994:../freertos/queue.c **** 			traceQUEUE_SEND_FROM_ISR( pxQueue );
 995:../freertos/queue.c **** 
ARM GAS  /tmp/ccMyq1Ea.s 			page 19


 996:../freertos/queue.c **** 			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
 997:../freertos/queue.c **** 			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
 998:../freertos/queue.c **** 			in a task disinheriting a priority and prvCopyDataToQueue() can be
 999:../freertos/queue.c **** 			called here even though the disinherit function does not check if
1000:../freertos/queue.c **** 			the scheduler is suspended before accessing the ready lists. */
1001:../freertos/queue.c **** 			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
1002:../freertos/queue.c **** 
1003:../freertos/queue.c **** 			/* The event list is not altered if the queue is locked.  This will
1004:../freertos/queue.c **** 			be done when the queue is unlocked later. */
1005:../freertos/queue.c **** 			if( cTxLock == queueUNLOCKED )
1006:../freertos/queue.c **** 			{
1007:../freertos/queue.c **** 				#if ( configUSE_QUEUE_SETS == 1 )
1008:../freertos/queue.c **** 				{
1009:../freertos/queue.c **** 					if( pxQueue->pxQueueSetContainer != NULL )
1010:../freertos/queue.c **** 					{
1011:../freertos/queue.c **** 						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
1012:../freertos/queue.c **** 						{
1013:../freertos/queue.c **** 							/* The queue is a member of a queue set, and posting
1014:../freertos/queue.c **** 							to the queue set caused a higher priority task to
1015:../freertos/queue.c **** 							unblock.  A context switch is required. */
1016:../freertos/queue.c **** 							if( pxHigherPriorityTaskWoken != NULL )
1017:../freertos/queue.c **** 							{
1018:../freertos/queue.c **** 								*pxHigherPriorityTaskWoken = pdTRUE;
1019:../freertos/queue.c **** 							}
1020:../freertos/queue.c **** 							else
1021:../freertos/queue.c **** 							{
1022:../freertos/queue.c **** 								mtCOVERAGE_TEST_MARKER();
1023:../freertos/queue.c **** 							}
1024:../freertos/queue.c **** 						}
1025:../freertos/queue.c **** 						else
1026:../freertos/queue.c **** 						{
1027:../freertos/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1028:../freertos/queue.c **** 						}
1029:../freertos/queue.c **** 					}
1030:../freertos/queue.c **** 					else
1031:../freertos/queue.c **** 					{
1032:../freertos/queue.c **** 						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1033:../freertos/queue.c **** 						{
1034:../freertos/queue.c **** 							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1035:../freertos/queue.c **** 							{
1036:../freertos/queue.c **** 								/* The task waiting has a higher priority so
1037:../freertos/queue.c **** 								record that a context switch is required. */
1038:../freertos/queue.c **** 								if( pxHigherPriorityTaskWoken != NULL )
1039:../freertos/queue.c **** 								{
1040:../freertos/queue.c **** 									*pxHigherPriorityTaskWoken = pdTRUE;
1041:../freertos/queue.c **** 								}
1042:../freertos/queue.c **** 								else
1043:../freertos/queue.c **** 								{
1044:../freertos/queue.c **** 									mtCOVERAGE_TEST_MARKER();
1045:../freertos/queue.c **** 								}
1046:../freertos/queue.c **** 							}
1047:../freertos/queue.c **** 							else
1048:../freertos/queue.c **** 							{
1049:../freertos/queue.c **** 								mtCOVERAGE_TEST_MARKER();
1050:../freertos/queue.c **** 							}
1051:../freertos/queue.c **** 						}
1052:../freertos/queue.c **** 						else
ARM GAS  /tmp/ccMyq1Ea.s 			page 20


1053:../freertos/queue.c **** 						{
1054:../freertos/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1055:../freertos/queue.c **** 						}
1056:../freertos/queue.c **** 					}
1057:../freertos/queue.c **** 				}
1058:../freertos/queue.c **** 				#else /* configUSE_QUEUE_SETS */
1059:../freertos/queue.c **** 				{
1060:../freertos/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1061:../freertos/queue.c **** 					{
1062:../freertos/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1063:../freertos/queue.c **** 						{
1064:../freertos/queue.c **** 							/* The task waiting has a higher priority so record that a
1065:../freertos/queue.c **** 							context	switch is required. */
1066:../freertos/queue.c **** 							if( pxHigherPriorityTaskWoken != NULL )
1067:../freertos/queue.c **** 							{
1068:../freertos/queue.c **** 								*pxHigherPriorityTaskWoken = pdTRUE;
1069:../freertos/queue.c **** 							}
1070:../freertos/queue.c **** 							else
1071:../freertos/queue.c **** 							{
1072:../freertos/queue.c **** 								mtCOVERAGE_TEST_MARKER();
1073:../freertos/queue.c **** 							}
1074:../freertos/queue.c **** 						}
1075:../freertos/queue.c **** 						else
1076:../freertos/queue.c **** 						{
1077:../freertos/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1078:../freertos/queue.c **** 						}
1079:../freertos/queue.c **** 					}
1080:../freertos/queue.c **** 					else
1081:../freertos/queue.c **** 					{
1082:../freertos/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1083:../freertos/queue.c **** 					}
1084:../freertos/queue.c **** 				}
1085:../freertos/queue.c **** 				#endif /* configUSE_QUEUE_SETS */
1086:../freertos/queue.c **** 			}
1087:../freertos/queue.c **** 			else
1088:../freertos/queue.c **** 			{
1089:../freertos/queue.c **** 				/* Increment the lock count so the task that unlocks the queue
1090:../freertos/queue.c **** 				knows that data was posted while it was locked. */
1091:../freertos/queue.c **** 				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
1092:../freertos/queue.c **** 			}
1093:../freertos/queue.c **** 
1094:../freertos/queue.c **** 			xReturn = pdPASS;
1095:../freertos/queue.c **** 		}
1096:../freertos/queue.c **** 		else
1097:../freertos/queue.c **** 		{
1098:../freertos/queue.c **** 			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
1099:../freertos/queue.c **** 			xReturn = errQUEUE_FULL;
1100:../freertos/queue.c **** 		}
1101:../freertos/queue.c **** 	}
1102:../freertos/queue.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1103:../freertos/queue.c **** 
1104:../freertos/queue.c **** 	return xReturn;
1105:../freertos/queue.c **** }
1106:../freertos/queue.c **** /*-----------------------------------------------------------*/
1107:../freertos/queue.c **** 
1108:../freertos/queue.c **** BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
1109:../freertos/queue.c **** {
ARM GAS  /tmp/ccMyq1Ea.s 			page 21


1110:../freertos/queue.c **** BaseType_t xReturn;
1111:../freertos/queue.c **** UBaseType_t uxSavedInterruptStatus;
1112:../freertos/queue.c **** Queue_t * const pxQueue = xQueue;
1113:../freertos/queue.c **** 
1114:../freertos/queue.c **** 	/* Similar to xQueueGenericSendFromISR() but used with semaphores where the
1115:../freertos/queue.c **** 	item size is 0.  Don't directly wake a task that was blocked on a queue
1116:../freertos/queue.c **** 	read, instead return a flag to say whether a context switch is required or
1117:../freertos/queue.c **** 	not (i.e. has a task with a higher priority than us been woken by this
1118:../freertos/queue.c **** 	post). */
1119:../freertos/queue.c **** 
1120:../freertos/queue.c **** 	configASSERT( pxQueue );
1121:../freertos/queue.c **** 
1122:../freertos/queue.c **** 	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
1123:../freertos/queue.c **** 	if the item size is not 0. */
1124:../freertos/queue.c **** 	configASSERT( pxQueue->uxItemSize == 0 );
1125:../freertos/queue.c **** 
1126:../freertos/queue.c **** 	/* Normally a mutex would not be given from an interrupt, especially if
1127:../freertos/queue.c **** 	there is a mutex holder, as priority inheritance makes no sense for an
1128:../freertos/queue.c **** 	interrupts, only tasks. */
1129:../freertos/queue.c **** 	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutex
1130:../freertos/queue.c **** 
1131:../freertos/queue.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
1132:../freertos/queue.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
1133:../freertos/queue.c **** 	above the maximum system call priority are kept permanently enabled, even
1134:../freertos/queue.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
1135:../freertos/queue.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
1136:../freertos/queue.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1137:../freertos/queue.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
1138:../freertos/queue.c **** 	assigned a priority above the configured maximum system call priority.
1139:../freertos/queue.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
1140:../freertos/queue.c **** 	that have been assigned a priority at or (logically) below the maximum
1141:../freertos/queue.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
1142:../freertos/queue.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
1143:../freertos/queue.c **** 	More information (albeit Cortex-M specific) is provided on the following
1144:../freertos/queue.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1145:../freertos/queue.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1146:../freertos/queue.c **** 
1147:../freertos/queue.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
1148:../freertos/queue.c **** 	{
1149:../freertos/queue.c **** 		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1150:../freertos/queue.c **** 
1151:../freertos/queue.c **** 		/* When the queue is used to implement a semaphore no data is ever
1152:../freertos/queue.c **** 		moved through the queue but it is still valid to see if the queue 'has
1153:../freertos/queue.c **** 		space'. */
1154:../freertos/queue.c **** 		if( uxMessagesWaiting < pxQueue->uxLength )
1155:../freertos/queue.c **** 		{
1156:../freertos/queue.c **** 			const int8_t cTxLock = pxQueue->cTxLock;
1157:../freertos/queue.c **** 
1158:../freertos/queue.c **** 			traceQUEUE_SEND_FROM_ISR( pxQueue );
1159:../freertos/queue.c **** 
1160:../freertos/queue.c **** 			/* A task can only have an inherited priority if it is a mutex
1161:../freertos/queue.c **** 			holder - and if there is a mutex holder then the mutex cannot be
1162:../freertos/queue.c **** 			given from an ISR.  As this is the ISR version of the function it
1163:../freertos/queue.c **** 			can be assumed there is no mutex holder and no need to determine if
1164:../freertos/queue.c **** 			priority disinheritance is needed.  Simply increase the count of
1165:../freertos/queue.c **** 			messages (semaphores) available. */
1166:../freertos/queue.c **** 			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
ARM GAS  /tmp/ccMyq1Ea.s 			page 22


1167:../freertos/queue.c **** 
1168:../freertos/queue.c **** 			/* The event list is not altered if the queue is locked.  This will
1169:../freertos/queue.c **** 			be done when the queue is unlocked later. */
1170:../freertos/queue.c **** 			if( cTxLock == queueUNLOCKED )
1171:../freertos/queue.c **** 			{
1172:../freertos/queue.c **** 				#if ( configUSE_QUEUE_SETS == 1 )
1173:../freertos/queue.c **** 				{
1174:../freertos/queue.c **** 					if( pxQueue->pxQueueSetContainer != NULL )
1175:../freertos/queue.c **** 					{
1176:../freertos/queue.c **** 						if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
1177:../freertos/queue.c **** 						{
1178:../freertos/queue.c **** 							/* The semaphore is a member of a queue set, and
1179:../freertos/queue.c **** 							posting	to the queue set caused a higher priority
1180:../freertos/queue.c **** 							task to	unblock.  A context switch is required. */
1181:../freertos/queue.c **** 							if( pxHigherPriorityTaskWoken != NULL )
1182:../freertos/queue.c **** 							{
1183:../freertos/queue.c **** 								*pxHigherPriorityTaskWoken = pdTRUE;
1184:../freertos/queue.c **** 							}
1185:../freertos/queue.c **** 							else
1186:../freertos/queue.c **** 							{
1187:../freertos/queue.c **** 								mtCOVERAGE_TEST_MARKER();
1188:../freertos/queue.c **** 							}
1189:../freertos/queue.c **** 						}
1190:../freertos/queue.c **** 						else
1191:../freertos/queue.c **** 						{
1192:../freertos/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1193:../freertos/queue.c **** 						}
1194:../freertos/queue.c **** 					}
1195:../freertos/queue.c **** 					else
1196:../freertos/queue.c **** 					{
1197:../freertos/queue.c **** 						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1198:../freertos/queue.c **** 						{
1199:../freertos/queue.c **** 							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1200:../freertos/queue.c **** 							{
1201:../freertos/queue.c **** 								/* The task waiting has a higher priority so
1202:../freertos/queue.c **** 								record that a context switch is required. */
1203:../freertos/queue.c **** 								if( pxHigherPriorityTaskWoken != NULL )
1204:../freertos/queue.c **** 								{
1205:../freertos/queue.c **** 									*pxHigherPriorityTaskWoken = pdTRUE;
1206:../freertos/queue.c **** 								}
1207:../freertos/queue.c **** 								else
1208:../freertos/queue.c **** 								{
1209:../freertos/queue.c **** 									mtCOVERAGE_TEST_MARKER();
1210:../freertos/queue.c **** 								}
1211:../freertos/queue.c **** 							}
1212:../freertos/queue.c **** 							else
1213:../freertos/queue.c **** 							{
1214:../freertos/queue.c **** 								mtCOVERAGE_TEST_MARKER();
1215:../freertos/queue.c **** 							}
1216:../freertos/queue.c **** 						}
1217:../freertos/queue.c **** 						else
1218:../freertos/queue.c **** 						{
1219:../freertos/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1220:../freertos/queue.c **** 						}
1221:../freertos/queue.c **** 					}
1222:../freertos/queue.c **** 				}
1223:../freertos/queue.c **** 				#else /* configUSE_QUEUE_SETS */
ARM GAS  /tmp/ccMyq1Ea.s 			page 23


1224:../freertos/queue.c **** 				{
1225:../freertos/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1226:../freertos/queue.c **** 					{
1227:../freertos/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1228:../freertos/queue.c **** 						{
1229:../freertos/queue.c **** 							/* The task waiting has a higher priority so record that a
1230:../freertos/queue.c **** 							context	switch is required. */
1231:../freertos/queue.c **** 							if( pxHigherPriorityTaskWoken != NULL )
1232:../freertos/queue.c **** 							{
1233:../freertos/queue.c **** 								*pxHigherPriorityTaskWoken = pdTRUE;
1234:../freertos/queue.c **** 							}
1235:../freertos/queue.c **** 							else
1236:../freertos/queue.c **** 							{
1237:../freertos/queue.c **** 								mtCOVERAGE_TEST_MARKER();
1238:../freertos/queue.c **** 							}
1239:../freertos/queue.c **** 						}
1240:../freertos/queue.c **** 						else
1241:../freertos/queue.c **** 						{
1242:../freertos/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1243:../freertos/queue.c **** 						}
1244:../freertos/queue.c **** 					}
1245:../freertos/queue.c **** 					else
1246:../freertos/queue.c **** 					{
1247:../freertos/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1248:../freertos/queue.c **** 					}
1249:../freertos/queue.c **** 				}
1250:../freertos/queue.c **** 				#endif /* configUSE_QUEUE_SETS */
1251:../freertos/queue.c **** 			}
1252:../freertos/queue.c **** 			else
1253:../freertos/queue.c **** 			{
1254:../freertos/queue.c **** 				/* Increment the lock count so the task that unlocks the queue
1255:../freertos/queue.c **** 				knows that data was posted while it was locked. */
1256:../freertos/queue.c **** 				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
1257:../freertos/queue.c **** 			}
1258:../freertos/queue.c **** 
1259:../freertos/queue.c **** 			xReturn = pdPASS;
1260:../freertos/queue.c **** 		}
1261:../freertos/queue.c **** 		else
1262:../freertos/queue.c **** 		{
1263:../freertos/queue.c **** 			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
1264:../freertos/queue.c **** 			xReturn = errQUEUE_FULL;
1265:../freertos/queue.c **** 		}
1266:../freertos/queue.c **** 	}
1267:../freertos/queue.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1268:../freertos/queue.c **** 
1269:../freertos/queue.c **** 	return xReturn;
1270:../freertos/queue.c **** }
1271:../freertos/queue.c **** /*-----------------------------------------------------------*/
1272:../freertos/queue.c **** 
1273:../freertos/queue.c **** BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
1274:../freertos/queue.c **** {
1275:../freertos/queue.c **** BaseType_t xEntryTimeSet = pdFALSE;
1276:../freertos/queue.c **** TimeOut_t xTimeOut;
1277:../freertos/queue.c **** Queue_t * const pxQueue = xQueue;
1278:../freertos/queue.c **** 
1279:../freertos/queue.c **** 	/* Check the pointer is not NULL. */
1280:../freertos/queue.c **** 	configASSERT( ( pxQueue ) );
ARM GAS  /tmp/ccMyq1Ea.s 			page 24


1281:../freertos/queue.c **** 
1282:../freertos/queue.c **** 	/* The buffer into which data is received can only be NULL if the data size
1283:../freertos/queue.c **** 	is zero (so no data is copied into the buffer. */
1284:../freertos/queue.c **** 	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) )
1285:../freertos/queue.c **** 
1286:../freertos/queue.c **** 	/* Cannot block if the scheduler is suspended. */
1287:../freertos/queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
1288:../freertos/queue.c **** 	{
1289:../freertos/queue.c **** 		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 )
1290:../freertos/queue.c **** 	}
1291:../freertos/queue.c **** 	#endif
1292:../freertos/queue.c **** 
1293:../freertos/queue.c **** 
1294:../freertos/queue.c **** 	/*lint -save -e904  This function relaxes the coding standard somewhat to
1295:../freertos/queue.c **** 	allow return statements within the function itself.  This is done in the
1296:../freertos/queue.c **** 	interest of execution time efficiency. */
1297:../freertos/queue.c **** 	for( ;; )
1298:../freertos/queue.c **** 	{
1299:../freertos/queue.c **** 		taskENTER_CRITICAL();
1300:../freertos/queue.c **** 		{
1301:../freertos/queue.c **** 			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1302:../freertos/queue.c **** 
1303:../freertos/queue.c **** 			/* Is there data in the queue now?  To be running the calling task
1304:../freertos/queue.c **** 			must be the highest priority task wanting to access the queue. */
1305:../freertos/queue.c **** 			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1306:../freertos/queue.c **** 			{
1307:../freertos/queue.c **** 				/* Data available, remove one item. */
1308:../freertos/queue.c **** 				prvCopyDataFromQueue( pxQueue, pvBuffer );
1309:../freertos/queue.c **** 				traceQUEUE_RECEIVE( pxQueue );
1310:../freertos/queue.c **** 				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
1311:../freertos/queue.c **** 
1312:../freertos/queue.c **** 				/* There is now space in the queue, were any tasks waiting to
1313:../freertos/queue.c **** 				post to the queue?  If so, unblock the highest priority waiting
1314:../freertos/queue.c **** 				task. */
1315:../freertos/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1316:../freertos/queue.c **** 				{
1317:../freertos/queue.c **** 					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1318:../freertos/queue.c **** 					{
1319:../freertos/queue.c **** 						queueYIELD_IF_USING_PREEMPTION();
1320:../freertos/queue.c **** 					}
1321:../freertos/queue.c **** 					else
1322:../freertos/queue.c **** 					{
1323:../freertos/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1324:../freertos/queue.c **** 					}
1325:../freertos/queue.c **** 				}
1326:../freertos/queue.c **** 				else
1327:../freertos/queue.c **** 				{
1328:../freertos/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1329:../freertos/queue.c **** 				}
1330:../freertos/queue.c **** 
1331:../freertos/queue.c **** 				taskEXIT_CRITICAL();
1332:../freertos/queue.c **** 				return pdPASS;
1333:../freertos/queue.c **** 			}
1334:../freertos/queue.c **** 			else
1335:../freertos/queue.c **** 			{
1336:../freertos/queue.c **** 				if( xTicksToWait == ( TickType_t ) 0 )
1337:../freertos/queue.c **** 				{
ARM GAS  /tmp/ccMyq1Ea.s 			page 25


1338:../freertos/queue.c **** 					/* The queue was empty and no block time is specified (or
1339:../freertos/queue.c **** 					the block time has expired) so leave now. */
1340:../freertos/queue.c **** 					taskEXIT_CRITICAL();
1341:../freertos/queue.c **** 					traceQUEUE_RECEIVE_FAILED( pxQueue );
1342:../freertos/queue.c **** 					return errQUEUE_EMPTY;
1343:../freertos/queue.c **** 				}
1344:../freertos/queue.c **** 				else if( xEntryTimeSet == pdFALSE )
1345:../freertos/queue.c **** 				{
1346:../freertos/queue.c **** 					/* The queue was empty and a block time was specified so
1347:../freertos/queue.c **** 					configure the timeout structure. */
1348:../freertos/queue.c **** 					vTaskInternalSetTimeOutState( &xTimeOut );
1349:../freertos/queue.c **** 					xEntryTimeSet = pdTRUE;
1350:../freertos/queue.c **** 				}
1351:../freertos/queue.c **** 				else
1352:../freertos/queue.c **** 				{
1353:../freertos/queue.c **** 					/* Entry time was already set. */
1354:../freertos/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1355:../freertos/queue.c **** 				}
1356:../freertos/queue.c **** 			}
1357:../freertos/queue.c **** 		}
1358:../freertos/queue.c **** 		taskEXIT_CRITICAL();
1359:../freertos/queue.c **** 
1360:../freertos/queue.c **** 		/* Interrupts and other tasks can send to and receive from the queue
1361:../freertos/queue.c **** 		now the critical section has been exited. */
1362:../freertos/queue.c **** 
1363:../freertos/queue.c **** 		vTaskSuspendAll();
1364:../freertos/queue.c **** 		prvLockQueue( pxQueue );
1365:../freertos/queue.c **** 
1366:../freertos/queue.c **** 		/* Update the timeout state to see if it has expired yet. */
1367:../freertos/queue.c **** 		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1368:../freertos/queue.c **** 		{
1369:../freertos/queue.c **** 			/* The timeout has not expired.  If the queue is still empty place
1370:../freertos/queue.c **** 			the task on the list of tasks waiting to receive from the queue. */
1371:../freertos/queue.c **** 			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1372:../freertos/queue.c **** 			{
1373:../freertos/queue.c **** 				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
1374:../freertos/queue.c **** 				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
1375:../freertos/queue.c **** 				prvUnlockQueue( pxQueue );
1376:../freertos/queue.c **** 				if( xTaskResumeAll() == pdFALSE )
1377:../freertos/queue.c **** 				{
1378:../freertos/queue.c **** 					portYIELD_WITHIN_API();
1379:../freertos/queue.c **** 				}
1380:../freertos/queue.c **** 				else
1381:../freertos/queue.c **** 				{
1382:../freertos/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1383:../freertos/queue.c **** 				}
1384:../freertos/queue.c **** 			}
1385:../freertos/queue.c **** 			else
1386:../freertos/queue.c **** 			{
1387:../freertos/queue.c **** 				/* The queue contains data again.  Loop back to try and read the
1388:../freertos/queue.c **** 				data. */
1389:../freertos/queue.c **** 				prvUnlockQueue( pxQueue );
1390:../freertos/queue.c **** 				( void ) xTaskResumeAll();
1391:../freertos/queue.c **** 			}
1392:../freertos/queue.c **** 		}
1393:../freertos/queue.c **** 		else
1394:../freertos/queue.c **** 		{
ARM GAS  /tmp/ccMyq1Ea.s 			page 26


1395:../freertos/queue.c **** 			/* Timed out.  If there is no data in the queue exit, otherwise loop
1396:../freertos/queue.c **** 			back and attempt to read the data. */
1397:../freertos/queue.c **** 			prvUnlockQueue( pxQueue );
1398:../freertos/queue.c **** 			( void ) xTaskResumeAll();
1399:../freertos/queue.c **** 
1400:../freertos/queue.c **** 			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1401:../freertos/queue.c **** 			{
1402:../freertos/queue.c **** 				traceQUEUE_RECEIVE_FAILED( pxQueue );
1403:../freertos/queue.c **** 				return errQUEUE_EMPTY;
1404:../freertos/queue.c **** 			}
1405:../freertos/queue.c **** 			else
1406:../freertos/queue.c **** 			{
1407:../freertos/queue.c **** 				mtCOVERAGE_TEST_MARKER();
1408:../freertos/queue.c **** 			}
1409:../freertos/queue.c **** 		}
1410:../freertos/queue.c **** 	} /*lint -restore */
1411:../freertos/queue.c **** }
1412:../freertos/queue.c **** /*-----------------------------------------------------------*/
1413:../freertos/queue.c **** 
1414:../freertos/queue.c **** BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
1415:../freertos/queue.c **** {
1416:../freertos/queue.c **** BaseType_t xEntryTimeSet = pdFALSE;
1417:../freertos/queue.c **** TimeOut_t xTimeOut;
1418:../freertos/queue.c **** Queue_t * const pxQueue = xQueue;
1419:../freertos/queue.c **** 
1420:../freertos/queue.c **** #if( configUSE_MUTEXES == 1 )
1421:../freertos/queue.c **** 	BaseType_t xInheritanceOccurred = pdFALSE;
1422:../freertos/queue.c **** #endif
1423:../freertos/queue.c **** 
1424:../freertos/queue.c **** 	/* Check the queue pointer is not NULL. */
1425:../freertos/queue.c **** 	configASSERT( ( pxQueue ) );
1426:../freertos/queue.c **** 
1427:../freertos/queue.c **** 	/* Check this really is a semaphore, in which case the item size will be
1428:../freertos/queue.c **** 	0. */
1429:../freertos/queue.c **** 	configASSERT( pxQueue->uxItemSize == 0 );
1430:../freertos/queue.c **** 
1431:../freertos/queue.c **** 	/* Cannot block if the scheduler is suspended. */
1432:../freertos/queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
1433:../freertos/queue.c **** 	{
1434:../freertos/queue.c **** 		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 )
1435:../freertos/queue.c **** 	}
1436:../freertos/queue.c **** 	#endif
1437:../freertos/queue.c **** 
1438:../freertos/queue.c **** 
1439:../freertos/queue.c **** 	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
1440:../freertos/queue.c **** 	statements within the function itself.  This is done in the interest
1441:../freertos/queue.c **** 	of execution time efficiency. */
1442:../freertos/queue.c **** 	for( ;; )
1443:../freertos/queue.c **** 	{
1444:../freertos/queue.c **** 		taskENTER_CRITICAL();
1445:../freertos/queue.c **** 		{
1446:../freertos/queue.c **** 			/* Semaphores are queues with an item size of 0, and where the
1447:../freertos/queue.c **** 			number of messages in the queue is the semaphore's count value. */
1448:../freertos/queue.c **** 			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
1449:../freertos/queue.c **** 
1450:../freertos/queue.c **** 			/* Is there data in the queue now?  To be running the calling task
1451:../freertos/queue.c **** 			must be the highest priority task wanting to access the queue. */
ARM GAS  /tmp/ccMyq1Ea.s 			page 27


1452:../freertos/queue.c **** 			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
1453:../freertos/queue.c **** 			{
1454:../freertos/queue.c **** 				traceQUEUE_RECEIVE( pxQueue );
1455:../freertos/queue.c **** 
1456:../freertos/queue.c **** 				/* Semaphores are queues with a data size of zero and where the
1457:../freertos/queue.c **** 				messages waiting is the semaphore's count.  Reduce the count. */
1458:../freertos/queue.c **** 				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
1459:../freertos/queue.c **** 
1460:../freertos/queue.c **** 				#if ( configUSE_MUTEXES == 1 )
1461:../freertos/queue.c **** 				{
1462:../freertos/queue.c **** 					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1463:../freertos/queue.c **** 					{
1464:../freertos/queue.c **** 						/* Record the information required to implement
1465:../freertos/queue.c **** 						priority inheritance should it become necessary. */
1466:../freertos/queue.c **** 						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
1467:../freertos/queue.c **** 					}
1468:../freertos/queue.c **** 					else
1469:../freertos/queue.c **** 					{
1470:../freertos/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1471:../freertos/queue.c **** 					}
1472:../freertos/queue.c **** 				}
1473:../freertos/queue.c **** 				#endif /* configUSE_MUTEXES */
1474:../freertos/queue.c **** 
1475:../freertos/queue.c **** 				/* Check to see if other tasks are blocked waiting to give the
1476:../freertos/queue.c **** 				semaphore, and if so, unblock the highest priority such task. */
1477:../freertos/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1478:../freertos/queue.c **** 				{
1479:../freertos/queue.c **** 					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1480:../freertos/queue.c **** 					{
1481:../freertos/queue.c **** 						queueYIELD_IF_USING_PREEMPTION();
1482:../freertos/queue.c **** 					}
1483:../freertos/queue.c **** 					else
1484:../freertos/queue.c **** 					{
1485:../freertos/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1486:../freertos/queue.c **** 					}
1487:../freertos/queue.c **** 				}
1488:../freertos/queue.c **** 				else
1489:../freertos/queue.c **** 				{
1490:../freertos/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1491:../freertos/queue.c **** 				}
1492:../freertos/queue.c **** 
1493:../freertos/queue.c **** 				taskEXIT_CRITICAL();
1494:../freertos/queue.c **** 				return pdPASS;
1495:../freertos/queue.c **** 			}
1496:../freertos/queue.c **** 			else
1497:../freertos/queue.c **** 			{
1498:../freertos/queue.c **** 				if( xTicksToWait == ( TickType_t ) 0 )
1499:../freertos/queue.c **** 				{
1500:../freertos/queue.c **** 					/* For inheritance to have occurred there must have been an
1501:../freertos/queue.c **** 					initial timeout, and an adjusted timeout cannot become 0, as
1502:../freertos/queue.c **** 					if it were 0 the function would have exited. */
1503:../freertos/queue.c **** 					#if( configUSE_MUTEXES == 1 )
1504:../freertos/queue.c **** 					{
1505:../freertos/queue.c **** 						configASSERT( xInheritanceOccurred == pdFALSE );
1506:../freertos/queue.c **** 					}
1507:../freertos/queue.c **** 					#endif /* configUSE_MUTEXES */
1508:../freertos/queue.c **** 
ARM GAS  /tmp/ccMyq1Ea.s 			page 28


1509:../freertos/queue.c **** 					/* The semaphore count was 0 and no block time is specified
1510:../freertos/queue.c **** 					(or the block time has expired) so exit now. */
1511:../freertos/queue.c **** 					taskEXIT_CRITICAL();
1512:../freertos/queue.c **** 					traceQUEUE_RECEIVE_FAILED( pxQueue );
1513:../freertos/queue.c **** 					return errQUEUE_EMPTY;
1514:../freertos/queue.c **** 				}
1515:../freertos/queue.c **** 				else if( xEntryTimeSet == pdFALSE )
1516:../freertos/queue.c **** 				{
1517:../freertos/queue.c **** 					/* The semaphore count was 0 and a block time was specified
1518:../freertos/queue.c **** 					so configure the timeout structure ready to block. */
1519:../freertos/queue.c **** 					vTaskInternalSetTimeOutState( &xTimeOut );
1520:../freertos/queue.c **** 					xEntryTimeSet = pdTRUE;
1521:../freertos/queue.c **** 				}
1522:../freertos/queue.c **** 				else
1523:../freertos/queue.c **** 				{
1524:../freertos/queue.c **** 					/* Entry time was already set. */
1525:../freertos/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1526:../freertos/queue.c **** 				}
1527:../freertos/queue.c **** 			}
1528:../freertos/queue.c **** 		}
1529:../freertos/queue.c **** 		taskEXIT_CRITICAL();
1530:../freertos/queue.c **** 
1531:../freertos/queue.c **** 		/* Interrupts and other tasks can give to and take from the semaphore
1532:../freertos/queue.c **** 		now the critical section has been exited. */
1533:../freertos/queue.c **** 
1534:../freertos/queue.c **** 		vTaskSuspendAll();
1535:../freertos/queue.c **** 		prvLockQueue( pxQueue );
1536:../freertos/queue.c **** 
1537:../freertos/queue.c **** 		/* Update the timeout state to see if it has expired yet. */
1538:../freertos/queue.c **** 		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1539:../freertos/queue.c **** 		{
1540:../freertos/queue.c **** 			/* A block time is specified and not expired.  If the semaphore
1541:../freertos/queue.c **** 			count is 0 then enter the Blocked state to wait for a semaphore to
1542:../freertos/queue.c **** 			become available.  As semaphores are implemented with queues the
1543:../freertos/queue.c **** 			queue being empty is equivalent to the semaphore count being 0. */
1544:../freertos/queue.c **** 			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1545:../freertos/queue.c **** 			{
1546:../freertos/queue.c **** 				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
1547:../freertos/queue.c **** 
1548:../freertos/queue.c **** 				#if ( configUSE_MUTEXES == 1 )
1549:../freertos/queue.c **** 				{
1550:../freertos/queue.c **** 					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1551:../freertos/queue.c **** 					{
1552:../freertos/queue.c **** 						taskENTER_CRITICAL();
1553:../freertos/queue.c **** 						{
1554:../freertos/queue.c **** 							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
1555:../freertos/queue.c **** 						}
1556:../freertos/queue.c **** 						taskEXIT_CRITICAL();
1557:../freertos/queue.c **** 					}
1558:../freertos/queue.c **** 					else
1559:../freertos/queue.c **** 					{
1560:../freertos/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1561:../freertos/queue.c **** 					}
1562:../freertos/queue.c **** 				}
1563:../freertos/queue.c **** 				#endif
1564:../freertos/queue.c **** 
1565:../freertos/queue.c **** 				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
ARM GAS  /tmp/ccMyq1Ea.s 			page 29


1566:../freertos/queue.c **** 				prvUnlockQueue( pxQueue );
1567:../freertos/queue.c **** 				if( xTaskResumeAll() == pdFALSE )
1568:../freertos/queue.c **** 				{
1569:../freertos/queue.c **** 					portYIELD_WITHIN_API();
1570:../freertos/queue.c **** 				}
1571:../freertos/queue.c **** 				else
1572:../freertos/queue.c **** 				{
1573:../freertos/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1574:../freertos/queue.c **** 				}
1575:../freertos/queue.c **** 			}
1576:../freertos/queue.c **** 			else
1577:../freertos/queue.c **** 			{
1578:../freertos/queue.c **** 				/* There was no timeout and the semaphore count was not 0, so
1579:../freertos/queue.c **** 				attempt to take the semaphore again. */
1580:../freertos/queue.c **** 				prvUnlockQueue( pxQueue );
1581:../freertos/queue.c **** 				( void ) xTaskResumeAll();
1582:../freertos/queue.c **** 			}
1583:../freertos/queue.c **** 		}
1584:../freertos/queue.c **** 		else
1585:../freertos/queue.c **** 		{
1586:../freertos/queue.c **** 			/* Timed out. */
1587:../freertos/queue.c **** 			prvUnlockQueue( pxQueue );
1588:../freertos/queue.c **** 			( void ) xTaskResumeAll();
1589:../freertos/queue.c **** 
1590:../freertos/queue.c **** 			/* If the semaphore count is 0 exit now as the timeout has
1591:../freertos/queue.c **** 			expired.  Otherwise return to attempt to take the semaphore that is
1592:../freertos/queue.c **** 			known to be available.  As semaphores are implemented by queues the
1593:../freertos/queue.c **** 			queue being empty is equivalent to the semaphore count being 0. */
1594:../freertos/queue.c **** 			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1595:../freertos/queue.c **** 			{
1596:../freertos/queue.c **** 				#if ( configUSE_MUTEXES == 1 )
1597:../freertos/queue.c **** 				{
1598:../freertos/queue.c **** 					/* xInheritanceOccurred could only have be set if
1599:../freertos/queue.c **** 					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
1600:../freertos/queue.c **** 					test the mutex type again to check it is actually a mutex. */
1601:../freertos/queue.c **** 					if( xInheritanceOccurred != pdFALSE )
1602:../freertos/queue.c **** 					{
1603:../freertos/queue.c **** 						taskENTER_CRITICAL();
1604:../freertos/queue.c **** 						{
1605:../freertos/queue.c **** 							UBaseType_t uxHighestWaitingPriority;
1606:../freertos/queue.c **** 
1607:../freertos/queue.c **** 							/* This task blocking on the mutex caused another
1608:../freertos/queue.c **** 							task to inherit this task's priority.  Now this task
1609:../freertos/queue.c **** 							has timed out the priority should be disinherited
1610:../freertos/queue.c **** 							again, but only as low as the next highest priority
1611:../freertos/queue.c **** 							task that is waiting for the same mutex. */
1612:../freertos/queue.c **** 							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
1613:../freertos/queue.c **** 							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPri
1614:../freertos/queue.c **** 						}
1615:../freertos/queue.c **** 						taskEXIT_CRITICAL();
1616:../freertos/queue.c **** 					}
1617:../freertos/queue.c **** 				}
1618:../freertos/queue.c **** 				#endif /* configUSE_MUTEXES */
1619:../freertos/queue.c **** 
1620:../freertos/queue.c **** 				traceQUEUE_RECEIVE_FAILED( pxQueue );
1621:../freertos/queue.c **** 				return errQUEUE_EMPTY;
1622:../freertos/queue.c **** 			}
ARM GAS  /tmp/ccMyq1Ea.s 			page 30


1623:../freertos/queue.c **** 			else
1624:../freertos/queue.c **** 			{
1625:../freertos/queue.c **** 				mtCOVERAGE_TEST_MARKER();
1626:../freertos/queue.c **** 			}
1627:../freertos/queue.c **** 		}
1628:../freertos/queue.c **** 	} /*lint -restore */
1629:../freertos/queue.c **** }
1630:../freertos/queue.c **** /*-----------------------------------------------------------*/
1631:../freertos/queue.c **** 
1632:../freertos/queue.c **** BaseType_t xQueuePeek( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
1633:../freertos/queue.c **** {
1634:../freertos/queue.c **** BaseType_t xEntryTimeSet = pdFALSE;
1635:../freertos/queue.c **** TimeOut_t xTimeOut;
1636:../freertos/queue.c **** int8_t *pcOriginalReadPosition;
1637:../freertos/queue.c **** Queue_t * const pxQueue = xQueue;
1638:../freertos/queue.c **** 
1639:../freertos/queue.c **** 	/* Check the pointer is not NULL. */
1640:../freertos/queue.c **** 	configASSERT( ( pxQueue ) );
1641:../freertos/queue.c **** 
1642:../freertos/queue.c **** 	/* The buffer into which data is received can only be NULL if the data size
1643:../freertos/queue.c **** 	is zero (so no data is copied into the buffer. */
1644:../freertos/queue.c **** 	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) )
1645:../freertos/queue.c **** 
1646:../freertos/queue.c **** 	/* Cannot block if the scheduler is suspended. */
1647:../freertos/queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
1648:../freertos/queue.c **** 	{
1649:../freertos/queue.c **** 		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 )
1650:../freertos/queue.c **** 	}
1651:../freertos/queue.c **** 	#endif
1652:../freertos/queue.c **** 
1653:../freertos/queue.c **** 
1654:../freertos/queue.c **** 	/*lint -save -e904  This function relaxes the coding standard somewhat to
1655:../freertos/queue.c **** 	allow return statements within the function itself.  This is done in the
1656:../freertos/queue.c **** 	interest of execution time efficiency. */
1657:../freertos/queue.c **** 	for( ;; )
1658:../freertos/queue.c **** 	{
1659:../freertos/queue.c **** 		taskENTER_CRITICAL();
1660:../freertos/queue.c **** 		{
1661:../freertos/queue.c **** 			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1662:../freertos/queue.c **** 
1663:../freertos/queue.c **** 			/* Is there data in the queue now?  To be running the calling task
1664:../freertos/queue.c **** 			must be the highest priority task wanting to access the queue. */
1665:../freertos/queue.c **** 			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1666:../freertos/queue.c **** 			{
1667:../freertos/queue.c **** 				/* Remember the read position so it can be reset after the data
1668:../freertos/queue.c **** 				is read from the queue as this function is only peeking the
1669:../freertos/queue.c **** 				data, not removing it. */
1670:../freertos/queue.c **** 				pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
1671:../freertos/queue.c **** 
1672:../freertos/queue.c **** 				prvCopyDataFromQueue( pxQueue, pvBuffer );
1673:../freertos/queue.c **** 				traceQUEUE_PEEK( pxQueue );
1674:../freertos/queue.c **** 
1675:../freertos/queue.c **** 				/* The data is not being removed, so reset the read pointer. */
1676:../freertos/queue.c **** 				pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
1677:../freertos/queue.c **** 
1678:../freertos/queue.c **** 				/* The data is being left in the queue, so see if there are
1679:../freertos/queue.c **** 				any other tasks waiting for the data. */
ARM GAS  /tmp/ccMyq1Ea.s 			page 31


1680:../freertos/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1681:../freertos/queue.c **** 				{
1682:../freertos/queue.c **** 					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1683:../freertos/queue.c **** 					{
1684:../freertos/queue.c **** 						/* The task waiting has a higher priority than this task. */
1685:../freertos/queue.c **** 						queueYIELD_IF_USING_PREEMPTION();
1686:../freertos/queue.c **** 					}
1687:../freertos/queue.c **** 					else
1688:../freertos/queue.c **** 					{
1689:../freertos/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1690:../freertos/queue.c **** 					}
1691:../freertos/queue.c **** 				}
1692:../freertos/queue.c **** 				else
1693:../freertos/queue.c **** 				{
1694:../freertos/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1695:../freertos/queue.c **** 				}
1696:../freertos/queue.c **** 
1697:../freertos/queue.c **** 				taskEXIT_CRITICAL();
1698:../freertos/queue.c **** 				return pdPASS;
1699:../freertos/queue.c **** 			}
1700:../freertos/queue.c **** 			else
1701:../freertos/queue.c **** 			{
1702:../freertos/queue.c **** 				if( xTicksToWait == ( TickType_t ) 0 )
1703:../freertos/queue.c **** 				{
1704:../freertos/queue.c **** 					/* The queue was empty and no block time is specified (or
1705:../freertos/queue.c **** 					the block time has expired) so leave now. */
1706:../freertos/queue.c **** 					taskEXIT_CRITICAL();
1707:../freertos/queue.c **** 					traceQUEUE_PEEK_FAILED( pxQueue );
1708:../freertos/queue.c **** 					return errQUEUE_EMPTY;
1709:../freertos/queue.c **** 				}
1710:../freertos/queue.c **** 				else if( xEntryTimeSet == pdFALSE )
1711:../freertos/queue.c **** 				{
1712:../freertos/queue.c **** 					/* The queue was empty and a block time was specified so
1713:../freertos/queue.c **** 					configure the timeout structure ready to enter the blocked
1714:../freertos/queue.c **** 					state. */
1715:../freertos/queue.c **** 					vTaskInternalSetTimeOutState( &xTimeOut );
1716:../freertos/queue.c **** 					xEntryTimeSet = pdTRUE;
1717:../freertos/queue.c **** 				}
1718:../freertos/queue.c **** 				else
1719:../freertos/queue.c **** 				{
1720:../freertos/queue.c **** 					/* Entry time was already set. */
1721:../freertos/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1722:../freertos/queue.c **** 				}
1723:../freertos/queue.c **** 			}
1724:../freertos/queue.c **** 		}
1725:../freertos/queue.c **** 		taskEXIT_CRITICAL();
1726:../freertos/queue.c **** 
1727:../freertos/queue.c **** 		/* Interrupts and other tasks can send to and receive from the queue
1728:../freertos/queue.c **** 		now the critical section has been exited. */
1729:../freertos/queue.c **** 
1730:../freertos/queue.c **** 		vTaskSuspendAll();
1731:../freertos/queue.c **** 		prvLockQueue( pxQueue );
1732:../freertos/queue.c **** 
1733:../freertos/queue.c **** 		/* Update the timeout state to see if it has expired yet. */
1734:../freertos/queue.c **** 		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1735:../freertos/queue.c **** 		{
1736:../freertos/queue.c **** 			/* Timeout has not expired yet, check to see if there is data in the
ARM GAS  /tmp/ccMyq1Ea.s 			page 32


1737:../freertos/queue.c **** 			queue now, and if not enter the Blocked state to wait for data. */
1738:../freertos/queue.c **** 			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1739:../freertos/queue.c **** 			{
1740:../freertos/queue.c **** 				traceBLOCKING_ON_QUEUE_PEEK( pxQueue );
1741:../freertos/queue.c **** 				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
1742:../freertos/queue.c **** 				prvUnlockQueue( pxQueue );
1743:../freertos/queue.c **** 				if( xTaskResumeAll() == pdFALSE )
1744:../freertos/queue.c **** 				{
1745:../freertos/queue.c **** 					portYIELD_WITHIN_API();
1746:../freertos/queue.c **** 				}
1747:../freertos/queue.c **** 				else
1748:../freertos/queue.c **** 				{
1749:../freertos/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1750:../freertos/queue.c **** 				}
1751:../freertos/queue.c **** 			}
1752:../freertos/queue.c **** 			else
1753:../freertos/queue.c **** 			{
1754:../freertos/queue.c **** 				/* There is data in the queue now, so don't enter the blocked
1755:../freertos/queue.c **** 				state, instead return to try and obtain the data. */
1756:../freertos/queue.c **** 				prvUnlockQueue( pxQueue );
1757:../freertos/queue.c **** 				( void ) xTaskResumeAll();
1758:../freertos/queue.c **** 			}
1759:../freertos/queue.c **** 		}
1760:../freertos/queue.c **** 		else
1761:../freertos/queue.c **** 		{
1762:../freertos/queue.c **** 			/* The timeout has expired.  If there is still no data in the queue
1763:../freertos/queue.c **** 			exit, otherwise go back and try to read the data again. */
1764:../freertos/queue.c **** 			prvUnlockQueue( pxQueue );
1765:../freertos/queue.c **** 			( void ) xTaskResumeAll();
1766:../freertos/queue.c **** 
1767:../freertos/queue.c **** 			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1768:../freertos/queue.c **** 			{
1769:../freertos/queue.c **** 				traceQUEUE_PEEK_FAILED( pxQueue );
1770:../freertos/queue.c **** 				return errQUEUE_EMPTY;
1771:../freertos/queue.c **** 			}
1772:../freertos/queue.c **** 			else
1773:../freertos/queue.c **** 			{
1774:../freertos/queue.c **** 				mtCOVERAGE_TEST_MARKER();
1775:../freertos/queue.c **** 			}
1776:../freertos/queue.c **** 		}
1777:../freertos/queue.c **** 	} /*lint -restore */
1778:../freertos/queue.c **** }
1779:../freertos/queue.c **** /*-----------------------------------------------------------*/
1780:../freertos/queue.c **** 
1781:../freertos/queue.c **** BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const px
1782:../freertos/queue.c **** {
1783:../freertos/queue.c **** BaseType_t xReturn;
1784:../freertos/queue.c **** UBaseType_t uxSavedInterruptStatus;
1785:../freertos/queue.c **** Queue_t * const pxQueue = xQueue;
1786:../freertos/queue.c **** 
1787:../freertos/queue.c **** 	configASSERT( pxQueue );
1788:../freertos/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1789:../freertos/queue.c **** 
1790:../freertos/queue.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
1791:../freertos/queue.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
1792:../freertos/queue.c **** 	above the maximum system call priority are kept permanently enabled, even
1793:../freertos/queue.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
ARM GAS  /tmp/ccMyq1Ea.s 			page 33


1794:../freertos/queue.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
1795:../freertos/queue.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1796:../freertos/queue.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
1797:../freertos/queue.c **** 	assigned a priority above the configured maximum system call priority.
1798:../freertos/queue.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
1799:../freertos/queue.c **** 	that have been assigned a priority at or (logically) below the maximum
1800:../freertos/queue.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
1801:../freertos/queue.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
1802:../freertos/queue.c **** 	More information (albeit Cortex-M specific) is provided on the following
1803:../freertos/queue.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1804:../freertos/queue.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1805:../freertos/queue.c **** 
1806:../freertos/queue.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
1807:../freertos/queue.c **** 	{
1808:../freertos/queue.c **** 		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1809:../freertos/queue.c **** 
1810:../freertos/queue.c **** 		/* Cannot block in an ISR, so check there is data available. */
1811:../freertos/queue.c **** 		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1812:../freertos/queue.c **** 		{
1813:../freertos/queue.c **** 			const int8_t cRxLock = pxQueue->cRxLock;
1814:../freertos/queue.c **** 
1815:../freertos/queue.c **** 			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );
1816:../freertos/queue.c **** 
1817:../freertos/queue.c **** 			prvCopyDataFromQueue( pxQueue, pvBuffer );
1818:../freertos/queue.c **** 			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
1819:../freertos/queue.c **** 
1820:../freertos/queue.c **** 			/* If the queue is locked the event list will not be modified.
1821:../freertos/queue.c **** 			Instead update the lock count so the task that unlocks the queue
1822:../freertos/queue.c **** 			will know that an ISR has removed data while the queue was
1823:../freertos/queue.c **** 			locked. */
1824:../freertos/queue.c **** 			if( cRxLock == queueUNLOCKED )
1825:../freertos/queue.c **** 			{
1826:../freertos/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1827:../freertos/queue.c **** 				{
1828:../freertos/queue.c **** 					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1829:../freertos/queue.c **** 					{
1830:../freertos/queue.c **** 						/* The task waiting has a higher priority than us so
1831:../freertos/queue.c **** 						force a context switch. */
1832:../freertos/queue.c **** 						if( pxHigherPriorityTaskWoken != NULL )
1833:../freertos/queue.c **** 						{
1834:../freertos/queue.c **** 							*pxHigherPriorityTaskWoken = pdTRUE;
1835:../freertos/queue.c **** 						}
1836:../freertos/queue.c **** 						else
1837:../freertos/queue.c **** 						{
1838:../freertos/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1839:../freertos/queue.c **** 						}
1840:../freertos/queue.c **** 					}
1841:../freertos/queue.c **** 					else
1842:../freertos/queue.c **** 					{
1843:../freertos/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1844:../freertos/queue.c **** 					}
1845:../freertos/queue.c **** 				}
1846:../freertos/queue.c **** 				else
1847:../freertos/queue.c **** 				{
1848:../freertos/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1849:../freertos/queue.c **** 				}
1850:../freertos/queue.c **** 			}
ARM GAS  /tmp/ccMyq1Ea.s 			page 34


1851:../freertos/queue.c **** 			else
1852:../freertos/queue.c **** 			{
1853:../freertos/queue.c **** 				/* Increment the lock count so the task that unlocks the queue
1854:../freertos/queue.c **** 				knows that data was removed while it was locked. */
1855:../freertos/queue.c **** 				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
1856:../freertos/queue.c **** 			}
1857:../freertos/queue.c **** 
1858:../freertos/queue.c **** 			xReturn = pdPASS;
1859:../freertos/queue.c **** 		}
1860:../freertos/queue.c **** 		else
1861:../freertos/queue.c **** 		{
1862:../freertos/queue.c **** 			xReturn = pdFAIL;
1863:../freertos/queue.c **** 			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
1864:../freertos/queue.c **** 		}
1865:../freertos/queue.c **** 	}
1866:../freertos/queue.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1867:../freertos/queue.c **** 
1868:../freertos/queue.c **** 	return xReturn;
1869:../freertos/queue.c **** }
1870:../freertos/queue.c **** /*-----------------------------------------------------------*/
1871:../freertos/queue.c **** 
1872:../freertos/queue.c **** BaseType_t xQueuePeekFromISR( QueueHandle_t xQueue,  void * const pvBuffer )
1873:../freertos/queue.c **** {
1874:../freertos/queue.c **** BaseType_t xReturn;
1875:../freertos/queue.c **** UBaseType_t uxSavedInterruptStatus;
1876:../freertos/queue.c **** int8_t *pcOriginalReadPosition;
1877:../freertos/queue.c **** Queue_t * const pxQueue = xQueue;
1878:../freertos/queue.c **** 
1879:../freertos/queue.c **** 	configASSERT( pxQueue );
1880:../freertos/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1881:../freertos/queue.c **** 	configASSERT( pxQueue->uxItemSize != 0 ); /* Can't peek a semaphore. */
1882:../freertos/queue.c **** 
1883:../freertos/queue.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
1884:../freertos/queue.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
1885:../freertos/queue.c **** 	above the maximum system call priority are kept permanently enabled, even
1886:../freertos/queue.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
1887:../freertos/queue.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
1888:../freertos/queue.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1889:../freertos/queue.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
1890:../freertos/queue.c **** 	assigned a priority above the configured maximum system call priority.
1891:../freertos/queue.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
1892:../freertos/queue.c **** 	that have been assigned a priority at or (logically) below the maximum
1893:../freertos/queue.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
1894:../freertos/queue.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
1895:../freertos/queue.c **** 	More information (albeit Cortex-M specific) is provided on the following
1896:../freertos/queue.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1897:../freertos/queue.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1898:../freertos/queue.c **** 
1899:../freertos/queue.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
1900:../freertos/queue.c **** 	{
1901:../freertos/queue.c **** 		/* Cannot block in an ISR, so check there is data available. */
1902:../freertos/queue.c **** 		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
1903:../freertos/queue.c **** 		{
1904:../freertos/queue.c **** 			traceQUEUE_PEEK_FROM_ISR( pxQueue );
1905:../freertos/queue.c **** 
1906:../freertos/queue.c **** 			/* Remember the read position so it can be reset as nothing is
1907:../freertos/queue.c **** 			actually being removed from the queue. */
ARM GAS  /tmp/ccMyq1Ea.s 			page 35


1908:../freertos/queue.c **** 			pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
1909:../freertos/queue.c **** 			prvCopyDataFromQueue( pxQueue, pvBuffer );
1910:../freertos/queue.c **** 			pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
1911:../freertos/queue.c **** 
1912:../freertos/queue.c **** 			xReturn = pdPASS;
1913:../freertos/queue.c **** 		}
1914:../freertos/queue.c **** 		else
1915:../freertos/queue.c **** 		{
1916:../freertos/queue.c **** 			xReturn = pdFAIL;
1917:../freertos/queue.c **** 			traceQUEUE_PEEK_FROM_ISR_FAILED( pxQueue );
1918:../freertos/queue.c **** 		}
1919:../freertos/queue.c **** 	}
1920:../freertos/queue.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1921:../freertos/queue.c **** 
1922:../freertos/queue.c **** 	return xReturn;
1923:../freertos/queue.c **** }
1924:../freertos/queue.c **** /*-----------------------------------------------------------*/
1925:../freertos/queue.c **** 
1926:../freertos/queue.c **** UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
1927:../freertos/queue.c **** {
1928:../freertos/queue.c **** UBaseType_t uxReturn;
1929:../freertos/queue.c **** 
1930:../freertos/queue.c **** 	configASSERT( xQueue );
1931:../freertos/queue.c **** 
1932:../freertos/queue.c **** 	taskENTER_CRITICAL();
1933:../freertos/queue.c **** 	{
1934:../freertos/queue.c **** 		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
1935:../freertos/queue.c **** 	}
1936:../freertos/queue.c **** 	taskEXIT_CRITICAL();
1937:../freertos/queue.c **** 
1938:../freertos/queue.c **** 	return uxReturn;
1939:../freertos/queue.c **** } /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
1940:../freertos/queue.c **** /*-----------------------------------------------------------*/
1941:../freertos/queue.c **** 
1942:../freertos/queue.c **** UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
1943:../freertos/queue.c **** {
1944:../freertos/queue.c **** UBaseType_t uxReturn;
1945:../freertos/queue.c **** Queue_t * const pxQueue = xQueue;
1946:../freertos/queue.c **** 
1947:../freertos/queue.c **** 	configASSERT( pxQueue );
1948:../freertos/queue.c **** 
1949:../freertos/queue.c **** 	taskENTER_CRITICAL();
1950:../freertos/queue.c **** 	{
1951:../freertos/queue.c **** 		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
1952:../freertos/queue.c **** 	}
1953:../freertos/queue.c **** 	taskEXIT_CRITICAL();
1954:../freertos/queue.c **** 
1955:../freertos/queue.c **** 	return uxReturn;
1956:../freertos/queue.c **** } /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
1957:../freertos/queue.c **** /*-----------------------------------------------------------*/
1958:../freertos/queue.c **** 
1959:../freertos/queue.c **** UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
1960:../freertos/queue.c **** {
1961:../freertos/queue.c **** UBaseType_t uxReturn;
1962:../freertos/queue.c **** Queue_t * const pxQueue = xQueue;
1963:../freertos/queue.c **** 
1964:../freertos/queue.c **** 	configASSERT( pxQueue );
ARM GAS  /tmp/ccMyq1Ea.s 			page 36


1965:../freertos/queue.c **** 	uxReturn = pxQueue->uxMessagesWaiting;
1966:../freertos/queue.c **** 
1967:../freertos/queue.c **** 	return uxReturn;
1968:../freertos/queue.c **** } /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
1969:../freertos/queue.c **** /*-----------------------------------------------------------*/
1970:../freertos/queue.c **** 
1971:../freertos/queue.c **** void vQueueDelete( QueueHandle_t xQueue )
1972:../freertos/queue.c **** {
1973:../freertos/queue.c **** Queue_t * const pxQueue = xQueue;
1974:../freertos/queue.c **** 
1975:../freertos/queue.c **** 	configASSERT( pxQueue );
1976:../freertos/queue.c **** 	traceQUEUE_DELETE( pxQueue );
1977:../freertos/queue.c **** 
1978:../freertos/queue.c **** 	#if ( configQUEUE_REGISTRY_SIZE > 0 )
1979:../freertos/queue.c **** 	{
1980:../freertos/queue.c **** 		vQueueUnregisterQueue( pxQueue );
1981:../freertos/queue.c **** 	}
1982:../freertos/queue.c **** 	#endif
1983:../freertos/queue.c **** 
1984:../freertos/queue.c **** 	#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
1985:../freertos/queue.c **** 	{
1986:../freertos/queue.c **** 		/* The queue can only have been allocated dynamically - free it
1987:../freertos/queue.c **** 		again. */
1988:../freertos/queue.c **** 		vPortFree( pxQueue );
1989:../freertos/queue.c **** 	}
1990:../freertos/queue.c **** 	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
1991:../freertos/queue.c **** 	{
1992:../freertos/queue.c **** 		/* The queue could have been allocated statically or dynamically, so
1993:../freertos/queue.c **** 		check before attempting to free the memory. */
1994:../freertos/queue.c **** 		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
1995:../freertos/queue.c **** 		{
1996:../freertos/queue.c **** 			vPortFree( pxQueue );
1997:../freertos/queue.c **** 		}
1998:../freertos/queue.c **** 		else
1999:../freertos/queue.c **** 		{
2000:../freertos/queue.c **** 			mtCOVERAGE_TEST_MARKER();
2001:../freertos/queue.c **** 		}
2002:../freertos/queue.c **** 	}
2003:../freertos/queue.c **** 	#else
2004:../freertos/queue.c **** 	{
2005:../freertos/queue.c **** 		/* The queue must have been statically allocated, so is not going to be
2006:../freertos/queue.c **** 		deleted.  Avoid compiler warnings about the unused parameter. */
2007:../freertos/queue.c **** 		( void ) pxQueue;
2008:../freertos/queue.c **** 	}
2009:../freertos/queue.c **** 	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
2010:../freertos/queue.c **** }
2011:../freertos/queue.c **** /*-----------------------------------------------------------*/
2012:../freertos/queue.c **** 
2013:../freertos/queue.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2014:../freertos/queue.c **** 
2015:../freertos/queue.c **** 	UBaseType_t uxQueueGetQueueNumber( QueueHandle_t xQueue )
2016:../freertos/queue.c **** 	{
2017:../freertos/queue.c **** 		return ( ( Queue_t * ) xQueue )->uxQueueNumber;
2018:../freertos/queue.c **** 	}
2019:../freertos/queue.c **** 
2020:../freertos/queue.c **** #endif /* configUSE_TRACE_FACILITY */
2021:../freertos/queue.c **** /*-----------------------------------------------------------*/
ARM GAS  /tmp/ccMyq1Ea.s 			page 37


2022:../freertos/queue.c **** 
2023:../freertos/queue.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2024:../freertos/queue.c **** 
2025:../freertos/queue.c **** 	void vQueueSetQueueNumber( QueueHandle_t xQueue, UBaseType_t uxQueueNumber )
2026:../freertos/queue.c **** 	{
2027:../freertos/queue.c **** 		( ( Queue_t * ) xQueue )->uxQueueNumber = uxQueueNumber;
2028:../freertos/queue.c **** 	}
2029:../freertos/queue.c **** 
2030:../freertos/queue.c **** #endif /* configUSE_TRACE_FACILITY */
2031:../freertos/queue.c **** /*-----------------------------------------------------------*/
2032:../freertos/queue.c **** 
2033:../freertos/queue.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2034:../freertos/queue.c **** 
2035:../freertos/queue.c **** 	uint8_t ucQueueGetQueueType( QueueHandle_t xQueue )
2036:../freertos/queue.c **** 	{
2037:../freertos/queue.c **** 		return ( ( Queue_t * ) xQueue )->ucQueueType;
2038:../freertos/queue.c **** 	}
2039:../freertos/queue.c **** 
2040:../freertos/queue.c **** #endif /* configUSE_TRACE_FACILITY */
2041:../freertos/queue.c **** /*-----------------------------------------------------------*/
2042:../freertos/queue.c **** 
2043:../freertos/queue.c **** #if( configUSE_MUTEXES == 1 )
2044:../freertos/queue.c **** 
2045:../freertos/queue.c **** 	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
2046:../freertos/queue.c **** 	{
2047:../freertos/queue.c **** 	UBaseType_t uxHighestPriorityOfWaitingTasks;
2048:../freertos/queue.c **** 
2049:../freertos/queue.c **** 		/* If a task waiting for a mutex causes the mutex holder to inherit a
2050:../freertos/queue.c **** 		priority, but the waiting task times out, then the holder should
2051:../freertos/queue.c **** 		disinherit the priority - but only down to the highest priority of any
2052:../freertos/queue.c **** 		other tasks that are waiting for the same mutex.  For this purpose,
2053:../freertos/queue.c **** 		return the priority of the highest priority task that is waiting for the
2054:../freertos/queue.c **** 		mutex. */
2055:../freertos/queue.c **** 		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
2056:../freertos/queue.c **** 		{
2057:../freertos/queue.c **** 			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET
2058:../freertos/queue.c **** 		}
2059:../freertos/queue.c **** 		else
2060:../freertos/queue.c **** 		{
2061:../freertos/queue.c **** 			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
2062:../freertos/queue.c **** 		}
2063:../freertos/queue.c **** 
2064:../freertos/queue.c **** 		return uxHighestPriorityOfWaitingTasks;
2065:../freertos/queue.c **** 	}
2066:../freertos/queue.c **** 
2067:../freertos/queue.c **** #endif /* configUSE_MUTEXES */
2068:../freertos/queue.c **** /*-----------------------------------------------------------*/
2069:../freertos/queue.c **** 
2070:../freertos/queue.c **** static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const Bas
2071:../freertos/queue.c **** {
2072:../freertos/queue.c **** BaseType_t xReturn = pdFALSE;
2073:../freertos/queue.c **** UBaseType_t uxMessagesWaiting;
2074:../freertos/queue.c **** 
2075:../freertos/queue.c **** 	/* This function is called from a critical section. */
2076:../freertos/queue.c **** 
2077:../freertos/queue.c **** 	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
2078:../freertos/queue.c **** 
ARM GAS  /tmp/ccMyq1Ea.s 			page 38


2079:../freertos/queue.c **** 	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
2080:../freertos/queue.c **** 	{
2081:../freertos/queue.c **** 		#if ( configUSE_MUTEXES == 1 )
2082:../freertos/queue.c **** 		{
2083:../freertos/queue.c **** 			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
2084:../freertos/queue.c **** 			{
2085:../freertos/queue.c **** 				/* The mutex is no longer being held. */
2086:../freertos/queue.c **** 				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
2087:../freertos/queue.c **** 				pxQueue->u.xSemaphore.xMutexHolder = NULL;
2088:../freertos/queue.c **** 			}
2089:../freertos/queue.c **** 			else
2090:../freertos/queue.c **** 			{
2091:../freertos/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2092:../freertos/queue.c **** 			}
2093:../freertos/queue.c **** 		}
2094:../freertos/queue.c **** 		#endif /* configUSE_MUTEXES */
2095:../freertos/queue.c **** 	}
2096:../freertos/queue.c **** 	else if( xPosition == queueSEND_TO_BACK )
2097:../freertos/queue.c **** 	{
2098:../freertos/queue.c **** 		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); 
2099:../freertos/queue.c **** 		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, esp
2100:../freertos/queue.c **** 		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as co
2101:../freertos/queue.c **** 		{
2102:../freertos/queue.c **** 			pxQueue->pcWriteTo = pxQueue->pcHead;
2103:../freertos/queue.c **** 		}
2104:../freertos/queue.c **** 		else
2105:../freertos/queue.c **** 		{
2106:../freertos/queue.c **** 			mtCOVERAGE_TEST_MARKER();
2107:../freertos/queue.c **** 		}
2108:../freertos/queue.c **** 	}
2109:../freertos/queue.c **** 	else
2110:../freertos/queue.c **** 	{
2111:../freertos/queue.c **** 		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxIt
2112:../freertos/queue.c **** 		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
2113:../freertos/queue.c **** 		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as co
2114:../freertos/queue.c **** 		{
2115:../freertos/queue.c **** 			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
2116:../freertos/queue.c **** 		}
2117:../freertos/queue.c **** 		else
2118:../freertos/queue.c **** 		{
2119:../freertos/queue.c **** 			mtCOVERAGE_TEST_MARKER();
2120:../freertos/queue.c **** 		}
2121:../freertos/queue.c **** 
2122:../freertos/queue.c **** 		if( xPosition == queueOVERWRITE )
2123:../freertos/queue.c **** 		{
2124:../freertos/queue.c **** 			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
2125:../freertos/queue.c **** 			{
2126:../freertos/queue.c **** 				/* An item is not being added but overwritten, so subtract
2127:../freertos/queue.c **** 				one from the recorded number of items in the queue so when
2128:../freertos/queue.c **** 				one is added again below the number of recorded items remains
2129:../freertos/queue.c **** 				correct. */
2130:../freertos/queue.c **** 				--uxMessagesWaiting;
2131:../freertos/queue.c **** 			}
2132:../freertos/queue.c **** 			else
2133:../freertos/queue.c **** 			{
2134:../freertos/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2135:../freertos/queue.c **** 			}
ARM GAS  /tmp/ccMyq1Ea.s 			page 39


2136:../freertos/queue.c **** 		}
2137:../freertos/queue.c **** 		else
2138:../freertos/queue.c **** 		{
2139:../freertos/queue.c **** 			mtCOVERAGE_TEST_MARKER();
2140:../freertos/queue.c **** 		}
2141:../freertos/queue.c **** 	}
2142:../freertos/queue.c **** 
2143:../freertos/queue.c **** 	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
2144:../freertos/queue.c **** 
2145:../freertos/queue.c **** 	return xReturn;
2146:../freertos/queue.c **** }
2147:../freertos/queue.c **** /*-----------------------------------------------------------*/
2148:../freertos/queue.c **** 
2149:../freertos/queue.c **** static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
2150:../freertos/queue.c **** {
2151:../freertos/queue.c **** 	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
2152:../freertos/queue.c **** 	{
2153:../freertos/queue.c **** 		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char typ
2154:../freertos/queue.c **** 		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justi
2155:../freertos/queue.c **** 		{
2156:../freertos/queue.c **** 			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
2157:../freertos/queue.c **** 		}
2158:../freertos/queue.c **** 		else
2159:../freertos/queue.c **** 		{
2160:../freertos/queue.c **** 			mtCOVERAGE_TEST_MARKER();
2161:../freertos/queue.c **** 		}
2162:../freertos/queue.c **** 		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue
2163:../freertos/queue.c **** 	}
2164:../freertos/queue.c **** }
2165:../freertos/queue.c **** /*-----------------------------------------------------------*/
2166:../freertos/queue.c **** 
2167:../freertos/queue.c **** static void prvUnlockQueue( Queue_t * const pxQueue )
2168:../freertos/queue.c **** {
2169:../freertos/queue.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED. */
2170:../freertos/queue.c **** 
2171:../freertos/queue.c **** 	/* The lock counts contains the number of extra data items placed or
2172:../freertos/queue.c **** 	removed from the queue while the queue was locked.  When a queue is
2173:../freertos/queue.c **** 	locked items can be added or removed, but the event lists cannot be
2174:../freertos/queue.c **** 	updated. */
2175:../freertos/queue.c **** 	taskENTER_CRITICAL();
2176:../freertos/queue.c **** 	{
2177:../freertos/queue.c **** 		int8_t cTxLock = pxQueue->cTxLock;
2178:../freertos/queue.c **** 
2179:../freertos/queue.c **** 		/* See if data was added to the queue while it was locked. */
2180:../freertos/queue.c **** 		while( cTxLock > queueLOCKED_UNMODIFIED )
2181:../freertos/queue.c **** 		{
2182:../freertos/queue.c **** 			/* Data was posted while the queue was locked.  Are any tasks
2183:../freertos/queue.c **** 			blocked waiting for data to become available? */
2184:../freertos/queue.c **** 			#if ( configUSE_QUEUE_SETS == 1 )
2185:../freertos/queue.c **** 			{
2186:../freertos/queue.c **** 				if( pxQueue->pxQueueSetContainer != NULL )
2187:../freertos/queue.c **** 				{
2188:../freertos/queue.c **** 					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
2189:../freertos/queue.c **** 					{
2190:../freertos/queue.c **** 						/* The queue is a member of a queue set, and posting to
2191:../freertos/queue.c **** 						the queue set caused a higher priority task to unblock.
2192:../freertos/queue.c **** 						A context switch is required. */
ARM GAS  /tmp/ccMyq1Ea.s 			page 40


2193:../freertos/queue.c **** 						vTaskMissedYield();
2194:../freertos/queue.c **** 					}
2195:../freertos/queue.c **** 					else
2196:../freertos/queue.c **** 					{
2197:../freertos/queue.c **** 						mtCOVERAGE_TEST_MARKER();
2198:../freertos/queue.c **** 					}
2199:../freertos/queue.c **** 				}
2200:../freertos/queue.c **** 				else
2201:../freertos/queue.c **** 				{
2202:../freertos/queue.c **** 					/* Tasks that are removed from the event list will get
2203:../freertos/queue.c **** 					added to the pending ready list as the scheduler is still
2204:../freertos/queue.c **** 					suspended. */
2205:../freertos/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
2206:../freertos/queue.c **** 					{
2207:../freertos/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
2208:../freertos/queue.c **** 						{
2209:../freertos/queue.c **** 							/* The task waiting has a higher priority so record that a
2210:../freertos/queue.c **** 							context	switch is required. */
2211:../freertos/queue.c **** 							vTaskMissedYield();
2212:../freertos/queue.c **** 						}
2213:../freertos/queue.c **** 						else
2214:../freertos/queue.c **** 						{
2215:../freertos/queue.c **** 							mtCOVERAGE_TEST_MARKER();
2216:../freertos/queue.c **** 						}
2217:../freertos/queue.c **** 					}
2218:../freertos/queue.c **** 					else
2219:../freertos/queue.c **** 					{
2220:../freertos/queue.c **** 						break;
2221:../freertos/queue.c **** 					}
2222:../freertos/queue.c **** 				}
2223:../freertos/queue.c **** 			}
2224:../freertos/queue.c **** 			#else /* configUSE_QUEUE_SETS */
2225:../freertos/queue.c **** 			{
2226:../freertos/queue.c **** 				/* Tasks that are removed from the event list will get added to
2227:../freertos/queue.c **** 				the pending ready list as the scheduler is still suspended. */
2228:../freertos/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
2229:../freertos/queue.c **** 				{
2230:../freertos/queue.c **** 					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
2231:../freertos/queue.c **** 					{
2232:../freertos/queue.c **** 						/* The task waiting has a higher priority so record that
2233:../freertos/queue.c **** 						a context switch is required. */
2234:../freertos/queue.c **** 						vTaskMissedYield();
2235:../freertos/queue.c **** 					}
2236:../freertos/queue.c **** 					else
2237:../freertos/queue.c **** 					{
2238:../freertos/queue.c **** 						mtCOVERAGE_TEST_MARKER();
2239:../freertos/queue.c **** 					}
2240:../freertos/queue.c **** 				}
2241:../freertos/queue.c **** 				else
2242:../freertos/queue.c **** 				{
2243:../freertos/queue.c **** 					break;
2244:../freertos/queue.c **** 				}
2245:../freertos/queue.c **** 			}
2246:../freertos/queue.c **** 			#endif /* configUSE_QUEUE_SETS */
2247:../freertos/queue.c **** 
2248:../freertos/queue.c **** 			--cTxLock;
2249:../freertos/queue.c **** 		}
ARM GAS  /tmp/ccMyq1Ea.s 			page 41


2250:../freertos/queue.c **** 
2251:../freertos/queue.c **** 		pxQueue->cTxLock = queueUNLOCKED;
2252:../freertos/queue.c **** 	}
2253:../freertos/queue.c **** 	taskEXIT_CRITICAL();
2254:../freertos/queue.c **** 
2255:../freertos/queue.c **** 	/* Do the same for the Rx lock. */
2256:../freertos/queue.c **** 	taskENTER_CRITICAL();
2257:../freertos/queue.c **** 	{
2258:../freertos/queue.c **** 		int8_t cRxLock = pxQueue->cRxLock;
2259:../freertos/queue.c **** 
2260:../freertos/queue.c **** 		while( cRxLock > queueLOCKED_UNMODIFIED )
2261:../freertos/queue.c **** 		{
2262:../freertos/queue.c **** 			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
2263:../freertos/queue.c **** 			{
2264:../freertos/queue.c **** 				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
2265:../freertos/queue.c **** 				{
2266:../freertos/queue.c **** 					vTaskMissedYield();
2267:../freertos/queue.c **** 				}
2268:../freertos/queue.c **** 				else
2269:../freertos/queue.c **** 				{
2270:../freertos/queue.c **** 					mtCOVERAGE_TEST_MARKER();
2271:../freertos/queue.c **** 				}
2272:../freertos/queue.c **** 
2273:../freertos/queue.c **** 				--cRxLock;
2274:../freertos/queue.c **** 			}
2275:../freertos/queue.c **** 			else
2276:../freertos/queue.c **** 			{
2277:../freertos/queue.c **** 				break;
2278:../freertos/queue.c **** 			}
2279:../freertos/queue.c **** 		}
2280:../freertos/queue.c **** 
2281:../freertos/queue.c **** 		pxQueue->cRxLock = queueUNLOCKED;
2282:../freertos/queue.c **** 	}
2283:../freertos/queue.c **** 	taskEXIT_CRITICAL();
2284:../freertos/queue.c **** }
2285:../freertos/queue.c **** /*-----------------------------------------------------------*/
2286:../freertos/queue.c **** 
2287:../freertos/queue.c **** static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
2288:../freertos/queue.c **** {
  32              		.loc 1 2288 1 view -0
  33              		.cfi_startproc
  34              		@ args = 0, pretend = 0, frame = 0
  35              		@ frame_needed = 0, uses_anonymous_args = 0
2289:../freertos/queue.c **** BaseType_t xReturn;
  36              		.loc 1 2289 1 view .LVU1
2290:../freertos/queue.c **** 
2291:../freertos/queue.c **** 	taskENTER_CRITICAL();
  37              		.loc 1 2291 2 view .LVU2
  38              	@ ../freertos/queue.c:2288: {
2288:../freertos/queue.c **** BaseType_t xReturn;
  39              		.loc 1 2288 1 is_stmt 0 view .LVU3
  40 0000 10B5     		push	{r4, lr}	@
  41              	.LCFI0:
  42              		.cfi_def_cfa_offset 8
  43              		.cfi_offset 4, -8
  44              		.cfi_offset 14, -4
  45              	@ ../freertos/queue.c:2288: {
ARM GAS  /tmp/ccMyq1Ea.s 			page 42


2288:../freertos/queue.c **** BaseType_t xReturn;
  46              		.loc 1 2288 1 view .LVU4
  47 0002 0446     		mov	r4, r0	@ pxQueue, tmp121
  48              	@ ../freertos/queue.c:2291: 	taskENTER_CRITICAL();
  49              		.loc 1 2291 2 view .LVU5
  50 0004 FFF7FEFF 		bl	vPortEnterCritical		@
  51              	.LVL1:
2292:../freertos/queue.c **** 	{
2293:../freertos/queue.c **** 		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
  52              		.loc 1 2293 3 is_stmt 1 view .LVU6
  53              	@ ../freertos/queue.c:2293: 		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
  54              		.loc 1 2293 14 is_stmt 0 view .LVU7
  55 0008 A46B     		ldr	r4, [r4, #56]	@ _1, pxQueue_5(D)->uxMessagesWaiting
  56              	.LVL2:
2294:../freertos/queue.c **** 		{
2295:../freertos/queue.c **** 			xReturn = pdTRUE;
2296:../freertos/queue.c **** 		}
2297:../freertos/queue.c **** 		else
2298:../freertos/queue.c **** 		{
2299:../freertos/queue.c **** 			xReturn = pdFALSE;
2300:../freertos/queue.c **** 		}
2301:../freertos/queue.c **** 	}
2302:../freertos/queue.c **** 	taskEXIT_CRITICAL();
  57              		.loc 1 2302 2 is_stmt 1 view .LVU8
  58 000a FFF7FEFF 		bl	vPortExitCritical		@
  59              	.LVL3:
2303:../freertos/queue.c **** 
2304:../freertos/queue.c **** 	return xReturn;
  60              		.loc 1 2304 2 view .LVU9
  61              	@ ../freertos/queue.c:2305: }
2305:../freertos/queue.c **** }
  62              		.loc 1 2305 1 is_stmt 0 view .LVU10
  63 000e B4FA84F0 		clz	r0, r4	@, _1
  64 0012 4009     		lsrs	r0, r0, #5	@,,
  65 0014 10BD     		pop	{r4, pc}	@
  66              		.loc 1 2305 1 view .LVU11
  67              		.cfi_endproc
  68              	.LFE32:
  69              		.size	prvIsQueueEmpty, .-prvIsQueueEmpty
  70              		.align	1
  71              		.syntax unified
  72              		.thumb
  73              		.thumb_func
  74              		.type	prvCopyDataToQueue, %function
  75              	prvCopyDataToQueue:
  76              	.LVL4:
  77              	.LFB29:
2071:../freertos/queue.c **** BaseType_t xReturn = pdFALSE;
  78              		.loc 1 2071 1 is_stmt 1 view -0
  79              		.cfi_startproc
  80              		@ args = 0, pretend = 0, frame = 0
  81              		@ frame_needed = 0, uses_anonymous_args = 0
2072:../freertos/queue.c **** UBaseType_t uxMessagesWaiting;
  82              		.loc 1 2072 1 view .LVU13
2073:../freertos/queue.c **** 
  83              		.loc 1 2073 1 view .LVU14
2077:../freertos/queue.c **** 
ARM GAS  /tmp/ccMyq1Ea.s 			page 43


  84              		.loc 1 2077 2 view .LVU15
  85              	@ ../freertos/queue.c:2071: {
2071:../freertos/queue.c **** BaseType_t xReturn = pdFALSE;
  86              		.loc 1 2071 1 is_stmt 0 view .LVU16
  87 0016 70B5     		push	{r4, r5, r6, lr}	@
  88              	.LCFI1:
  89              		.cfi_def_cfa_offset 16
  90              		.cfi_offset 4, -16
  91              		.cfi_offset 5, -12
  92              		.cfi_offset 6, -8
  93              		.cfi_offset 14, -4
  94              	@ ../freertos/queue.c:2071: {
2071:../freertos/queue.c **** BaseType_t xReturn = pdFALSE;
  95              		.loc 1 2071 1 view .LVU17
  96 0018 1646     		mov	r6, r2	@ xPosition, tmp161
  97              	@ ../freertos/queue.c:2079: 	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
2079:../freertos/queue.c **** 	{
  98              		.loc 1 2079 13 view .LVU18
  99 001a 026C     		ldr	r2, [r0, #64]	@ _1, pxQueue_26(D)->uxItemSize
 100              	.LVL5:
 101              	@ ../freertos/queue.c:2071: {
2071:../freertos/queue.c **** BaseType_t xReturn = pdFALSE;
 102              		.loc 1 2071 1 view .LVU19
 103 001c 0446     		mov	r4, r0	@ pxQueue, tmp160
 104              	@ ../freertos/queue.c:2077: 	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
2077:../freertos/queue.c **** 
 105              		.loc 1 2077 20 view .LVU20
 106 001e 856B     		ldr	r5, [r0, #56]	@ uxMessagesWaiting, pxQueue_26(D)->uxMessagesWaiting
 107              	.LVL6:
2079:../freertos/queue.c **** 	{
 108              		.loc 1 2079 2 is_stmt 1 view .LVU21
 109              	@ ../freertos/queue.c:2079: 	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
2079:../freertos/queue.c **** 	{
 110              		.loc 1 2079 4 is_stmt 0 view .LVU22
 111 0020 42B9     		cbnz	r2, .L3	@ _1,
2083:../freertos/queue.c **** 			{
 112              		.loc 1 2083 4 is_stmt 1 view .LVU23
 113              	@ ../freertos/queue.c:2083: 			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
2083:../freertos/queue.c **** 			{
 114              		.loc 1 2083 6 is_stmt 0 view .LVU24
 115 0022 0668     		ldr	r6, [r0]	@ pxQueue_26(D)->pcHead, pxQueue_26(D)->pcHead
 116              	.LVL7:
2083:../freertos/queue.c **** 			{
 117              		.loc 1 2083 6 view .LVU25
 118 0024 9EB9     		cbnz	r6, .L9	@ pxQueue_26(D)->pcHead,
2086:../freertos/queue.c **** 				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 119              		.loc 1 2086 5 is_stmt 1 view .LVU26
 120              	@ ../freertos/queue.c:2086: 				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHold
2086:../freertos/queue.c **** 				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 121              		.loc 1 2086 15 is_stmt 0 view .LVU27
 122 0026 8068     		ldr	r0, [r0, #8]	@, pxQueue_26(D)->u.xSemaphore.xMutexHolder
 123              	.LVL8:
2086:../freertos/queue.c **** 				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 124              		.loc 1 2086 15 view .LVU28
 125 0028 FFF7FEFF 		bl	xTaskPriorityDisinherit		@
 126              	.LVL9:
2087:../freertos/queue.c **** 			}
ARM GAS  /tmp/ccMyq1Ea.s 			page 44


 127              		.loc 1 2087 5 is_stmt 1 view .LVU29
 128              	@ ../freertos/queue.c:2087: 				pxQueue->u.xSemaphore.xMutexHolder = NULL;
2087:../freertos/queue.c **** 			}
 129              		.loc 1 2087 40 is_stmt 0 view .LVU30
 130 002c A660     		str	r6, [r4, #8]	@ pxQueue_26(D)->pcHead, pxQueue_26(D)->u.xSemaphore.xMutexHolder
 131              	.LVL10:
 132              	.L5:
2139:../freertos/queue.c **** 		}
 133              		.loc 1 2139 28 is_stmt 1 view .LVU31
2143:../freertos/queue.c **** 
 134              		.loc 1 2143 2 view .LVU32
 135              	@ ../freertos/queue.c:2143: 	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
2143:../freertos/queue.c **** 
 136              		.loc 1 2143 49 is_stmt 0 view .LVU33
 137 002e 0135     		adds	r5, r5, #1	@ _20, uxMessagesWaiting,
 138              	.LVL11:
 139              	@ ../freertos/queue.c:2143: 	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
2143:../freertos/queue.c **** 
 140              		.loc 1 2143 29 view .LVU34
 141 0030 A563     		str	r5, [r4, #56]	@ _20, pxQueue_26(D)->uxMessagesWaiting
2145:../freertos/queue.c **** }
 142              		.loc 1 2145 2 is_stmt 1 view .LVU35
 143              	@ ../freertos/queue.c:2146: }
2146:../freertos/queue.c **** /*-----------------------------------------------------------*/
 144              		.loc 1 2146 1 is_stmt 0 view .LVU36
 145 0032 70BD     		pop	{r4, r5, r6, pc}	@
 146              	.LVL12:
 147              	.L3:
2096:../freertos/queue.c **** 	{
 148              		.loc 1 2096 7 is_stmt 1 view .LVU37
 149              	@ ../freertos/queue.c:2096: 	else if( xPosition == queueSEND_TO_BACK )
2096:../freertos/queue.c **** 	{
 150              		.loc 1 2096 9 is_stmt 0 view .LVU38
 151 0034 6EB9     		cbnz	r6, .L6	@ xPosition,
2098:../freertos/queue.c **** 		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, esp
 152              		.loc 1 2098 3 is_stmt 1 view .LVU39
 153              	@ ../freertos/queue.c:2098: 		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size
2098:../freertos/queue.c **** 		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, esp
 154              		.loc 1 2098 12 is_stmt 0 view .LVU40
 155 0036 4068     		ldr	r0, [r0, #4]	@, pxQueue_26(D)->pcWriteTo
 156              	.LVL13:
2098:../freertos/queue.c **** 		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, esp
 157              		.loc 1 2098 12 view .LVU41
 158 0038 FFF7FEFF 		bl	memcpy		@
 159              	.LVL14:
2099:../freertos/queue.c **** 		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as co
 160              		.loc 1 2099 3 is_stmt 1 view .LVU42
 161              	@ ../freertos/queue.c:2099: 		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arit
2099:../freertos/queue.c **** 		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as co
 162              		.loc 1 2099 22 is_stmt 0 view .LVU43
 163 003c 6368     		ldr	r3, [r4, #4]	@ pxQueue_26(D)->pcWriteTo, pxQueue_26(D)->pcWriteTo
 164 003e 226C     		ldr	r2, [r4, #64]	@ pxQueue_26(D)->uxItemSize, pxQueue_26(D)->uxItemSize
 165 0040 1344     		add	r3, r3, r2	@ _7, pxQueue_26(D)->uxItemSize
 166              	@ ../freertos/queue.c:2100: 		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MIS
2100:../freertos/queue.c **** 		{
 167              		.loc 1 2100 5 view .LVU44
 168 0042 A268     		ldr	r2, [r4, #8]	@ pxQueue_26(D)->u.xQueue.pcTail, pxQueue_26(D)->u.xQueue.pcTail
ARM GAS  /tmp/ccMyq1Ea.s 			page 45


 169              	@ ../freertos/queue.c:2099: 		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arit
2099:../freertos/queue.c **** 		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as co
 170              		.loc 1 2099 22 view .LVU45
 171 0044 6360     		str	r3, [r4, #4]	@ _7, pxQueue_26(D)->pcWriteTo
2100:../freertos/queue.c **** 		{
 172              		.loc 1 2100 3 is_stmt 1 view .LVU46
 173              	@ ../freertos/queue.c:2100: 		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MIS
2100:../freertos/queue.c **** 		{
 174              		.loc 1 2100 5 is_stmt 0 view .LVU47
 175 0046 9342     		cmp	r3, r2	@ _7, pxQueue_26(D)->u.xQueue.pcTail
2102:../freertos/queue.c **** 		}
 176              		.loc 1 2102 4 is_stmt 1 view .LVU48
 177              	@ ../freertos/queue.c:2102: 			pxQueue->pcWriteTo = pxQueue->pcHead;
2102:../freertos/queue.c **** 		}
 178              		.loc 1 2102 23 is_stmt 0 view .LVU49
 179 0048 24BF     		itt	cs
 180 004a 2368     		ldrcs	r3, [r4]	@ pxQueue_26(D)->pcHead, pxQueue_26(D)->pcHead
 181 004c 6360     		strcs	r3, [r4, #4]	@ pxQueue_26(D)->pcHead, pxQueue_26(D)->pcWriteTo
 182              	.LVL15:
 183              	.L9:
 184              	@ ../freertos/queue.c:2072: BaseType_t xReturn = pdFALSE;
2072:../freertos/queue.c **** UBaseType_t uxMessagesWaiting;
 185              		.loc 1 2072 12 view .LVU50
 186 004e 0020     		movs	r0, #0	@ <retval>,
 187 0050 EDE7     		b	.L5		@
 188              	.LVL16:
 189              	.L6:
2111:../freertos/queue.c **** 		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 190              		.loc 1 2111 3 is_stmt 1 view .LVU51
 191              	@ ../freertos/queue.c:2111: 		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQue
2111:../freertos/queue.c **** 		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 192              		.loc 1 2111 12 is_stmt 0 view .LVU52
 193 0052 C068     		ldr	r0, [r0, #12]	@, pxQueue_26(D)->u.xQueue.pcReadFrom
 194              	.LVL17:
2111:../freertos/queue.c **** 		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 195              		.loc 1 2111 12 view .LVU53
 196 0054 FFF7FEFF 		bl	memcpy		@
 197              	.LVL18:
2112:../freertos/queue.c **** 		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as co
 198              		.loc 1 2112 3 is_stmt 1 view .LVU54
 199              	@ ../freertos/queue.c:2112: 		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
2112:../freertos/queue.c **** 		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as co
 200              		.loc 1 2112 32 is_stmt 0 view .LVU55
 201 0058 226C     		ldr	r2, [r4, #64]	@ pxQueue_26(D)->uxItemSize, pxQueue_26(D)->uxItemSize
 202 005a E368     		ldr	r3, [r4, #12]	@ pxQueue_26(D)->u.xQueue.pcReadFrom, pxQueue_26(D)->u.xQueue.pcReadFrom
 203 005c 5142     		rsbs	r1, r2, #0	@ _14, pxQueue_26(D)->uxItemSize
 204 005e 9B1A     		subs	r3, r3, r2	@ _15, pxQueue_26(D)->u.xQueue.pcReadFrom, pxQueue_26(D)->uxItemSize
 205              	@ ../freertos/queue.c:2113: 		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MIS
2113:../freertos/queue.c **** 		{
 206              		.loc 1 2113 5 view .LVU56
 207 0060 2268     		ldr	r2, [r4]	@ pxQueue_26(D)->pcHead, pxQueue_26(D)->pcHead
 208              	@ ../freertos/queue.c:2112: 		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
2112:../freertos/queue.c **** 		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as co
 209              		.loc 1 2112 32 view .LVU57
 210 0062 E360     		str	r3, [r4, #12]	@ _15, pxQueue_26(D)->u.xQueue.pcReadFrom
2113:../freertos/queue.c **** 		{
 211              		.loc 1 2113 3 is_stmt 1 view .LVU58
ARM GAS  /tmp/ccMyq1Ea.s 			page 46


 212              	@ ../freertos/queue.c:2113: 		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MIS
2113:../freertos/queue.c **** 		{
 213              		.loc 1 2113 5 is_stmt 0 view .LVU59
 214 0064 9342     		cmp	r3, r2	@ _15, pxQueue_26(D)->pcHead
2115:../freertos/queue.c **** 		}
 215              		.loc 1 2115 4 is_stmt 1 view .LVU60
 216              	@ ../freertos/queue.c:2115: 			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue-
2115:../freertos/queue.c **** 		}
 217              		.loc 1 2115 62 is_stmt 0 view .LVU61
 218 0066 3EBF     		ittt	cc
 219 0068 A368     		ldrcc	r3, [r4, #8]	@ pxQueue_26(D)->u.xQueue.pcTail, pxQueue_26(D)->u.xQueue.pcTail
 220 006a 5B18     		addcc	r3, r3, r1	@ tmp156, _14
 221              	@ ../freertos/queue.c:2115: 			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue-
2115:../freertos/queue.c **** 		}
 222              		.loc 1 2115 33 view .LVU62
 223 006c E360     		strcc	r3, [r4, #12]	@ tmp156, pxQueue_26(D)->u.xQueue.pcReadFrom
2119:../freertos/queue.c **** 		}
 224              		.loc 1 2119 28 is_stmt 1 view .LVU63
2122:../freertos/queue.c **** 		{
 225              		.loc 1 2122 3 view .LVU64
 226              	@ ../freertos/queue.c:2122: 		if( xPosition == queueOVERWRITE )
2122:../freertos/queue.c **** 		{
 227              		.loc 1 2122 5 is_stmt 0 view .LVU65
 228 006e 022E     		cmp	r6, #2	@ xPosition,
 229 0070 EDD1     		bne	.L9		@,
2124:../freertos/queue.c **** 			{
 230              		.loc 1 2124 4 is_stmt 1 view .LVU66
 231              	@ ../freertos/queue.c:2124: 			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
2124:../freertos/queue.c **** 			{
 232              		.loc 1 2124 6 is_stmt 0 view .LVU67
 233 0072 0DB1     		cbz	r5, .L10	@ uxMessagesWaiting,
2130:../freertos/queue.c **** 			}
 234              		.loc 1 2130 5 is_stmt 1 view .LVU68
 235 0074 013D     		subs	r5, r5, #1	@ uxMessagesWaiting, uxMessagesWaiting,
 236              	.LVL19:
2130:../freertos/queue.c **** 			}
 237              		.loc 1 2130 5 is_stmt 0 view .LVU69
 238 0076 EAE7     		b	.L9		@
 239              	.L10:
 240              	@ ../freertos/queue.c:2072: BaseType_t xReturn = pdFALSE;
2072:../freertos/queue.c **** UBaseType_t uxMessagesWaiting;
 241              		.loc 1 2072 12 view .LVU70
 242 0078 2846     		mov	r0, r5	@ <retval>, uxMessagesWaiting
 243 007a D8E7     		b	.L5		@
 244              		.cfi_endproc
 245              	.LFE29:
 246              		.size	prvCopyDataToQueue, .-prvCopyDataToQueue
 247              		.align	1
 248              		.syntax unified
 249              		.thumb
 250              		.thumb_func
 251              		.type	prvCopyDataFromQueue, %function
 252              	prvCopyDataFromQueue:
 253              	.LVL20:
 254              	.LFB30:
2150:../freertos/queue.c **** 	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 255              		.loc 1 2150 1 is_stmt 1 view -0
ARM GAS  /tmp/ccMyq1Ea.s 			page 47


 256              		.cfi_startproc
 257              		@ args = 0, pretend = 0, frame = 0
 258              		@ frame_needed = 0, uses_anonymous_args = 0
 259              		@ link register save eliminated.
2151:../freertos/queue.c **** 	{
 260              		.loc 1 2151 2 view .LVU72
 261              	@ ../freertos/queue.c:2150: {
2150:../freertos/queue.c **** 	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 262              		.loc 1 2150 1 is_stmt 0 view .LVU73
 263 007c 0346     		mov	r3, r0	@ pxQueue, tmp130
 264              	@ ../freertos/queue.c:2151: 	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
2151:../freertos/queue.c **** 	{
 265              		.loc 1 2151 13 view .LVU74
 266 007e 1A6C     		ldr	r2, [r3, #64]	@ _1, pxQueue_10(D)->uxItemSize
 267              	@ ../freertos/queue.c:2150: {
2150:../freertos/queue.c **** 	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 268              		.loc 1 2150 1 view .LVU75
 269 0080 0846     		mov	r0, r1	@ pvBuffer, tmp131
 270              	.LVL21:
2150:../freertos/queue.c **** 	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 271              		.loc 1 2150 1 view .LVU76
 272 0082 10B4     		push	{r4}	@
 273              	.LCFI2:
 274              		.cfi_def_cfa_offset 4
 275              		.cfi_offset 4, -4
 276              	@ ../freertos/queue.c:2151: 	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
2151:../freertos/queue.c **** 	{
 277              		.loc 1 2151 4 view .LVU77
 278 0084 62B1     		cbz	r2, .L11	@ _1,
2153:../freertos/queue.c **** 		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justi
 279              		.loc 1 2153 3 is_stmt 1 view .LVU78
 280              	@ ../freertos/queue.c:2153: 		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Po
2153:../freertos/queue.c **** 		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justi
 281              		.loc 1 2153 32 is_stmt 0 view .LVU79
 282 0086 DC68     		ldr	r4, [r3, #12]	@ pxQueue_10(D)->u.xQueue.pcReadFrom, pxQueue_10(D)->u.xQueue.pcReadFrom
 283              	@ ../freertos/queue.c:2154: 		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint
2154:../freertos/queue.c **** 		{
 284              		.loc 1 2154 5 view .LVU80
 285 0088 9968     		ldr	r1, [r3, #8]	@ pxQueue_10(D)->u.xQueue.pcTail, pxQueue_10(D)->u.xQueue.pcTail
 286              	.LVL22:
 287              	@ ../freertos/queue.c:2153: 		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Po
2153:../freertos/queue.c **** 		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justi
 288              		.loc 1 2153 32 view .LVU81
 289 008a 1444     		add	r4, r4, r2	@ _3, _1
 290              	@ ../freertos/queue.c:2154: 		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint
2154:../freertos/queue.c **** 		{
 291              		.loc 1 2154 5 view .LVU82
 292 008c 8C42     		cmp	r4, r1	@ _3, pxQueue_10(D)->u.xQueue.pcTail
 293              	@ ../freertos/queue.c:2156: 			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
2156:../freertos/queue.c **** 		}
 294              		.loc 1 2156 33 view .LVU83
 295 008e 28BF     		it	cs
 296 0090 1968     		ldrcs	r1, [r3]	@ pxQueue_10(D)->pcHead, pxQueue_10(D)->pcHead
 297              	@ ../freertos/queue.c:2153: 		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Po
2153:../freertos/queue.c **** 		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justi
 298              		.loc 1 2153 32 view .LVU84
 299 0092 DC60     		str	r4, [r3, #12]	@ _3, pxQueue_10(D)->u.xQueue.pcReadFrom
ARM GAS  /tmp/ccMyq1Ea.s 			page 48


2154:../freertos/queue.c **** 		{
 300              		.loc 1 2154 3 is_stmt 1 view .LVU85
2156:../freertos/queue.c **** 		}
 301              		.loc 1 2156 4 view .LVU86
 302              	@ ../freertos/queue.c:2156: 			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
2156:../freertos/queue.c **** 		}
 303              		.loc 1 2156 33 is_stmt 0 view .LVU87
 304 0094 28BF     		it	cs
 305 0096 D960     		strcs	r1, [r3, #12]	@ pxQueue_10(D)->pcHead, pxQueue_10(D)->u.xQueue.pcReadFrom
2160:../freertos/queue.c **** 		}
 306              		.loc 1 2160 28 is_stmt 1 view .LVU88
2162:../freertos/queue.c **** 	}
 307              		.loc 1 2162 3 view .LVU89
 308              	@ ../freertos/queue.c:2162: 		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pc
2162:../freertos/queue.c **** 	}
 309              		.loc 1 2162 12 is_stmt 0 view .LVU90
 310 0098 D968     		ldr	r1, [r3, #12]	@, pxQueue_10(D)->u.xQueue.pcReadFrom
 311              	@ ../freertos/queue.c:2164: }
2164:../freertos/queue.c **** /*-----------------------------------------------------------*/
 312              		.loc 1 2164 1 view .LVU91
 313 009a 10BC     		pop	{r4}		@
 314              	.LCFI3:
 315              		.cfi_remember_state
 316              		.cfi_restore 4
 317              		.cfi_def_cfa_offset 0
 318              	@ ../freertos/queue.c:2162: 		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pc
2162:../freertos/queue.c **** 	}
 319              		.loc 1 2162 12 view .LVU92
 320 009c FFF7FEBF 		b	memcpy		@
 321              	.LVL23:
 322              	.L11:
 323              	.LCFI4:
 324              		.cfi_restore_state
 325              	@ ../freertos/queue.c:2164: }
2164:../freertos/queue.c **** /*-----------------------------------------------------------*/
 326              		.loc 1 2164 1 view .LVU93
 327 00a0 10BC     		pop	{r4}		@
 328              	.LCFI5:
 329              		.cfi_restore 4
 330              		.cfi_def_cfa_offset 0
 331 00a2 7047     		bx	lr	@
 332              		.cfi_endproc
 333              	.LFE30:
 334              		.size	prvCopyDataFromQueue, .-prvCopyDataFromQueue
 335              		.align	1
 336              		.syntax unified
 337              		.thumb
 338              		.thumb_func
 339              		.type	prvUnlockQueue, %function
 340              	prvUnlockQueue:
 341              	.LVL24:
 342              	.LFB31:
2168:../freertos/queue.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED. */
 343              		.loc 1 2168 1 is_stmt 1 view -0
 344              		.cfi_startproc
 345              		@ args = 0, pretend = 0, frame = 0
 346              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccMyq1Ea.s 			page 49


2175:../freertos/queue.c **** 	{
 347              		.loc 1 2175 2 view .LVU95
 348              	@ ../freertos/queue.c:2168: {
2168:../freertos/queue.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED. */
 349              		.loc 1 2168 1 is_stmt 0 view .LVU96
 350 00a4 70B5     		push	{r4, r5, r6, lr}	@
 351              	.LCFI6:
 352              		.cfi_def_cfa_offset 16
 353              		.cfi_offset 4, -16
 354              		.cfi_offset 5, -12
 355              		.cfi_offset 6, -8
 356              		.cfi_offset 14, -4
 357              	@ ../freertos/queue.c:2168: {
2168:../freertos/queue.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED. */
 358              		.loc 1 2168 1 view .LVU97
 359 00a6 0446     		mov	r4, r0	@ pxQueue, tmp149
 360              	@ ../freertos/queue.c:2175: 	taskENTER_CRITICAL();
2175:../freertos/queue.c **** 	{
 361              		.loc 1 2175 2 view .LVU98
 362 00a8 FFF7FEFF 		bl	vPortEnterCritical		@
 363              	.LVL25:
 364              	.LBB23:
2177:../freertos/queue.c **** 
 365              		.loc 1 2177 3 is_stmt 1 view .LVU99
 366              	@ ../freertos/queue.c:2177: 		int8_t cTxLock = pxQueue->cTxLock;
2177:../freertos/queue.c **** 
 367              		.loc 1 2177 10 is_stmt 0 view .LVU100
 368 00ac 94F84550 		ldrb	r5, [r4, #69]	@ zero_extendqisi2	@ pxQueue_19(D)->cTxLock, pxQueue_19(D)->cTxLock
 369              	@ ../freertos/queue.c:2230: 					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive )
2230:../freertos/queue.c **** 					{
 370              		.loc 1 2230 36 view .LVU101
 371 00b0 04F12406 		add	r6, r4, #36	@ tmp148, pxQueue,
 372              	@ ../freertos/queue.c:2177: 		int8_t cTxLock = pxQueue->cTxLock;
2177:../freertos/queue.c **** 
 373              		.loc 1 2177 10 view .LVU102
 374 00b4 6DB2     		sxtb	r5, r5	@ cTxLock, pxQueue_19(D)->cTxLock
 375              	.LVL26:
2180:../freertos/queue.c **** 		{
 376              		.loc 1 2180 3 is_stmt 1 view .LVU103
 377              	.L15:
2180:../freertos/queue.c **** 		{
 378              		.loc 1 2180 18 view .LVU104
 379 00b6 002D     		cmp	r5, #0	@ cTxLock,
 380 00b8 01DD     		ble	.L20		@,
2228:../freertos/queue.c **** 				{
 381              		.loc 1 2228 5 view .LVU105
 382              	@ ../freertos/queue.c:2228: 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pd
2228:../freertos/queue.c **** 				{
 383              		.loc 1 2228 9 is_stmt 0 view .LVU106
 384 00ba 636A     		ldr	r3, [r4, #36]	@ _1, pxQueue_19(D)->xTasksWaitingToReceive.uxNumberOfItems
 385              	@ ../freertos/queue.c:2228: 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pd
2228:../freertos/queue.c **** 				{
 386              		.loc 1 2228 7 view .LVU107
 387 00bc B3B9     		cbnz	r3, .L16	@ _1,
 388              	.L20:
2251:../freertos/queue.c **** 	}
 389              		.loc 1 2251 3 is_stmt 1 view .LVU108
ARM GAS  /tmp/ccMyq1Ea.s 			page 50


 390              	@ ../freertos/queue.c:2251: 		pxQueue->cTxLock = queueUNLOCKED;
2251:../freertos/queue.c **** 	}
 391              		.loc 1 2251 20 is_stmt 0 view .LVU109
 392 00be FF23     		movs	r3, #255	@ tmp130,
 393 00c0 84F84530 		strb	r3, [r4, #69]	@ tmp130, pxQueue_19(D)->cTxLock
 394              	.LBE23:
2253:../freertos/queue.c **** 
 395              		.loc 1 2253 2 is_stmt 1 view .LVU110
 396 00c4 FFF7FEFF 		bl	vPortExitCritical		@
 397              	.LVL27:
2256:../freertos/queue.c **** 	{
 398              		.loc 1 2256 2 view .LVU111
 399 00c8 FFF7FEFF 		bl	vPortEnterCritical		@
 400              	.LVL28:
 401              	.LBB24:
2258:../freertos/queue.c **** 
 402              		.loc 1 2258 3 view .LVU112
 403              	@ ../freertos/queue.c:2258: 		int8_t cRxLock = pxQueue->cRxLock;
2258:../freertos/queue.c **** 
 404              		.loc 1 2258 10 is_stmt 0 view .LVU113
 405 00cc 94F84450 		ldrb	r5, [r4, #68]	@ zero_extendqisi2	@ pxQueue_19(D)->cRxLock, pxQueue_19(D)->cRxLock
 406              	.LVL29:
 407              	@ ../freertos/queue.c:2264: 				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) !
2264:../freertos/queue.c **** 				{
 408              		.loc 1 2264 35 view .LVU114
 409 00d0 04F11006 		add	r6, r4, #16	@ tmp147, pxQueue,
 410              	@ ../freertos/queue.c:2258: 		int8_t cRxLock = pxQueue->cRxLock;
2258:../freertos/queue.c **** 
 411              		.loc 1 2258 10 view .LVU115
 412 00d4 6DB2     		sxtb	r5, r5	@ cRxLock, pxQueue_19(D)->cRxLock
 413              	.LVL30:
2260:../freertos/queue.c **** 		{
 414              		.loc 1 2260 3 is_stmt 1 view .LVU116
 415              	.L17:
2260:../freertos/queue.c **** 		{
 416              		.loc 1 2260 18 view .LVU117
 417 00d6 002D     		cmp	r5, #0	@ cRxLock,
 418 00d8 01DD     		ble	.L24		@,
2262:../freertos/queue.c **** 			{
 419              		.loc 1 2262 4 view .LVU118
 420              	@ ../freertos/queue.c:2262: 			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALS
2262:../freertos/queue.c **** 			{
 421              		.loc 1 2262 8 is_stmt 0 view .LVU119
 422 00da 2369     		ldr	r3, [r4, #16]	@ _6, pxQueue_19(D)->xTasksWaitingToSend.uxNumberOfItems
 423              	@ ../freertos/queue.c:2262: 			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALS
2262:../freertos/queue.c **** 			{
 424              		.loc 1 2262 6 view .LVU120
 425 00dc 7BB9     		cbnz	r3, .L21	@ _6,
 426              	.L24:
2281:../freertos/queue.c **** 	}
 427              		.loc 1 2281 3 is_stmt 1 view .LVU121
 428              	@ ../freertos/queue.c:2281: 		pxQueue->cRxLock = queueUNLOCKED;
2281:../freertos/queue.c **** 	}
 429              		.loc 1 2281 20 is_stmt 0 view .LVU122
 430 00de FF23     		movs	r3, #255	@ tmp140,
 431 00e0 84F84430 		strb	r3, [r4, #68]	@ tmp140, pxQueue_19(D)->cRxLock
 432              	.LBE24:
ARM GAS  /tmp/ccMyq1Ea.s 			page 51


2283:../freertos/queue.c **** }
 433              		.loc 1 2283 2 is_stmt 1 view .LVU123
 434              	@ ../freertos/queue.c:2284: }
2284:../freertos/queue.c **** /*-----------------------------------------------------------*/
 435              		.loc 1 2284 1 is_stmt 0 view .LVU124
 436 00e4 BDE87040 		pop	{r4, r5, r6, lr}	@
 437              	.LCFI7:
 438              		.cfi_remember_state
 439              		.cfi_restore 14
 440              		.cfi_restore 6
 441              		.cfi_restore 5
 442              		.cfi_restore 4
 443              		.cfi_def_cfa_offset 0
 444              	.LVL31:
 445              	@ ../freertos/queue.c:2283: 	taskEXIT_CRITICAL();
2283:../freertos/queue.c **** }
 446              		.loc 1 2283 2 view .LVU125
 447 00e8 FFF7FEBF 		b	vPortExitCritical		@
 448              	.LVL32:
 449              	.L16:
 450              	.LCFI8:
 451              		.cfi_restore_state
 452              	.LBB25:
2230:../freertos/queue.c **** 					{
 453              		.loc 1 2230 6 is_stmt 1 view .LVU126
 454              	@ ../freertos/queue.c:2230: 					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive )
2230:../freertos/queue.c **** 					{
 455              		.loc 1 2230 10 is_stmt 0 view .LVU127
 456 00ec 3046     		mov	r0, r6	@, tmp148
 457 00ee FFF7FEFF 		bl	xTaskRemoveFromEventList		@
 458              	.LVL33:
 459              	@ ../freertos/queue.c:2230: 					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive )
2230:../freertos/queue.c **** 					{
 460              		.loc 1 2230 8 discriminator 1 view .LVU128
 461 00f2 08B1     		cbz	r0, .L18	@ tmp150,
2234:../freertos/queue.c **** 					}
 462              		.loc 1 2234 7 is_stmt 1 view .LVU129
 463 00f4 FFF7FEFF 		bl	vTaskMissedYield		@
 464              	.LVL34:
 465              	.L18:
2238:../freertos/queue.c **** 					}
 466              		.loc 1 2238 31 view .LVU130
2248:../freertos/queue.c **** 		}
 467              		.loc 1 2248 4 view .LVU131
 468 00f8 013D     		subs	r5, r5, #1	@ tmp137, cTxLock,
 469              	.LVL35:
2248:../freertos/queue.c **** 		}
 470              		.loc 1 2248 4 is_stmt 0 view .LVU132
 471 00fa 6DB2     		sxtb	r5, r5	@ cTxLock, tmp137
 472              	.LVL36:
2248:../freertos/queue.c **** 		}
 473              		.loc 1 2248 4 view .LVU133
 474 00fc DBE7     		b	.L15		@
 475              	.LVL37:
 476              	.L21:
2248:../freertos/queue.c **** 		}
 477              		.loc 1 2248 4 view .LVU134
ARM GAS  /tmp/ccMyq1Ea.s 			page 52


 478              	.LBE25:
 479              	.LBB26:
2264:../freertos/queue.c **** 				{
 480              		.loc 1 2264 5 is_stmt 1 view .LVU135
 481              	@ ../freertos/queue.c:2264: 				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) !
2264:../freertos/queue.c **** 				{
 482              		.loc 1 2264 9 is_stmt 0 view .LVU136
 483 00fe 3046     		mov	r0, r6	@, tmp147
 484 0100 FFF7FEFF 		bl	xTaskRemoveFromEventList		@
 485              	.LVL38:
 486              	@ ../freertos/queue.c:2264: 				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) !
2264:../freertos/queue.c **** 				{
 487              		.loc 1 2264 7 discriminator 1 view .LVU137
 488 0104 08B1     		cbz	r0, .L22	@ tmp151,
2266:../freertos/queue.c **** 				}
 489              		.loc 1 2266 6 is_stmt 1 view .LVU138
 490 0106 FFF7FEFF 		bl	vTaskMissedYield		@
 491              	.LVL39:
 492              	.L22:
2270:../freertos/queue.c **** 				}
 493              		.loc 1 2270 30 view .LVU139
2273:../freertos/queue.c **** 			}
 494              		.loc 1 2273 5 view .LVU140
 495 010a 013D     		subs	r5, r5, #1	@ tmp144, cRxLock,
 496              	.LVL40:
2273:../freertos/queue.c **** 			}
 497              		.loc 1 2273 5 is_stmt 0 view .LVU141
 498 010c 6DB2     		sxtb	r5, r5	@ cRxLock, tmp144
 499              	.LVL41:
2273:../freertos/queue.c **** 			}
 500              		.loc 1 2273 5 view .LVU142
 501 010e E2E7     		b	.L17		@
 502              	.LBE26:
 503              		.cfi_endproc
 504              	.LFE31:
 505              		.size	prvUnlockQueue, .-prvUnlockQueue
 506              		.align	1
 507              		.global	xQueueGenericReset
 508              		.syntax unified
 509              		.thumb
 510              		.thumb_func
 511              		.type	xQueueGenericReset, %function
 512              	xQueueGenericReset:
 513              	.LVL42:
 514              	.LFB5:
 256:../freertos/queue.c **** Queue_t * const pxQueue = xQueue;
 515              		.loc 1 256 1 is_stmt 1 view -0
 516              		.cfi_startproc
 517              		@ args = 0, pretend = 0, frame = 0
 518              		@ frame_needed = 0, uses_anonymous_args = 0
 257:../freertos/queue.c **** 
 519              		.loc 1 257 1 view .LVU144
 520              	@ ../freertos/queue.c:256: {
 256:../freertos/queue.c **** Queue_t * const pxQueue = xQueue;
 521              		.loc 1 256 1 is_stmt 0 view .LVU145
 522 0110 38B5     		push	{r3, r4, r5, lr}	@
 523              	.LCFI9:
ARM GAS  /tmp/ccMyq1Ea.s 			page 53


 524              		.cfi_def_cfa_offset 16
 525              		.cfi_offset 3, -16
 526              		.cfi_offset 4, -12
 527              		.cfi_offset 5, -8
 528              		.cfi_offset 14, -4
 529              	@ ../freertos/queue.c:256: {
 256:../freertos/queue.c **** Queue_t * const pxQueue = xQueue;
 530              		.loc 1 256 1 view .LVU146
 531 0112 0446     		mov	r4, r0	@ xQueue, tmp144
 532              	.LVL43:
 259:../freertos/queue.c **** 
 533              		.loc 1 259 25 is_stmt 1 view .LVU147
 261:../freertos/queue.c **** 	{
 534              		.loc 1 261 2 view .LVU148
 535              	@ ../freertos/queue.c:256: {
 256:../freertos/queue.c **** Queue_t * const pxQueue = xQueue;
 536              		.loc 1 256 1 is_stmt 0 view .LVU149
 537 0114 0D46     		mov	r5, r1	@ xNewQueue, tmp145
 538              	@ ../freertos/queue.c:261: 	taskENTER_CRITICAL();
 261:../freertos/queue.c **** 	{
 539              		.loc 1 261 2 view .LVU150
 540 0116 FFF7FEFF 		bl	vPortEnterCritical		@
 541              	.LVL44:
 263:../freertos/queue.c **** 		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 542              		.loc 1 263 3 is_stmt 1 view .LVU151
 543              	@ ../freertos/queue.c:263: 		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQ
 263:../freertos/queue.c **** 		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 544              		.loc 1 263 68 is_stmt 0 view .LVU152
 545 011a D4E90F31 		ldrd	r3, r1, [r4, #60]	@ MEM[(struct Queue_t *)xQueue_15(D)].uxLength, _3, xQueue,
 546 011e 4B43     		muls	r3, r1, r3	@ _4, _3
 547              	@ ../freertos/queue.c:263: 		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQ
 263:../freertos/queue.c **** 		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 548              		.loc 1 263 37 view .LVU153
 549 0120 2268     		ldr	r2, [r4]	@ _1, MEM[(struct Queue_t *)xQueue_15(D)].pcHead
 550              	@ ../freertos/queue.c:263: 		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQ
 263:../freertos/queue.c **** 		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 551              		.loc 1 263 46 view .LVU154
 552 0122 D018     		adds	r0, r2, r3	@ tmp130, _1, _4
 553              	@ ../freertos/queue.c:266: 		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength
 266:../freertos/queue.c **** 		pxQueue->cRxLock = queueUNLOCKED;
 554              		.loc 1 266 50 view .LVU155
 555 0124 5B1A     		subs	r3, r3, r1	@ tmp132, _4, _3
 556              	@ ../freertos/queue.c:263: 		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQ
 263:../freertos/queue.c **** 		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 557              		.loc 1 263 28 view .LVU156
 558 0126 A060     		str	r0, [r4, #8]	@ tmp130, MEM[(struct Queue_t *)xQueue_15(D)].u.xQueue.pcTail
 264:../freertos/queue.c **** 		pxQueue->pcWriteTo = pxQueue->pcHead;
 559              		.loc 1 264 3 is_stmt 1 view .LVU157
 560              	@ ../freertos/queue.c:265: 		pxQueue->pcWriteTo = pxQueue->pcHead;
 265:../freertos/queue.c **** 		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSi
 561              		.loc 1 265 22 is_stmt 0 view .LVU158
 562 0128 6260     		str	r2, [r4, #4]	@ _1, MEM[(struct Queue_t *)xQueue_15(D)].pcWriteTo
 563              	@ ../freertos/queue.c:264: 		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 264:../freertos/queue.c **** 		pxQueue->pcWriteTo = pxQueue->pcHead;
 564              		.loc 1 264 30 view .LVU159
 565 012a 0020     		movs	r0, #0	@ tmp131,
 566              	@ ../freertos/queue.c:266: 		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength
ARM GAS  /tmp/ccMyq1Ea.s 			page 54


 266:../freertos/queue.c **** 		pxQueue->cRxLock = queueUNLOCKED;
 567              		.loc 1 266 50 view .LVU160
 568 012c 1A44     		add	r2, r2, r3	@ tmp133, tmp132
 569              	@ ../freertos/queue.c:267: 		pxQueue->cRxLock = queueUNLOCKED;
 267:../freertos/queue.c **** 		pxQueue->cTxLock = queueUNLOCKED;
 570              		.loc 1 267 20 view .LVU161
 571 012e FF23     		movs	r3, #255	@ tmp134,
 572              	@ ../freertos/queue.c:264: 		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 264:../freertos/queue.c **** 		pxQueue->pcWriteTo = pxQueue->pcHead;
 573              		.loc 1 264 30 view .LVU162
 574 0130 A063     		str	r0, [r4, #56]	@ tmp131, MEM[(struct Queue_t *)xQueue_15(D)].uxMessagesWaiting
 265:../freertos/queue.c **** 		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSi
 575              		.loc 1 265 3 is_stmt 1 view .LVU163
 266:../freertos/queue.c **** 		pxQueue->cRxLock = queueUNLOCKED;
 576              		.loc 1 266 3 view .LVU164
 577              	@ ../freertos/queue.c:266: 		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength
 266:../freertos/queue.c **** 		pxQueue->cRxLock = queueUNLOCKED;
 578              		.loc 1 266 32 is_stmt 0 view .LVU165
 579 0132 E260     		str	r2, [r4, #12]	@ tmp133, MEM[(struct Queue_t *)xQueue_15(D)].u.xQueue.pcReadFrom
 267:../freertos/queue.c **** 		pxQueue->cTxLock = queueUNLOCKED;
 580              		.loc 1 267 3 is_stmt 1 view .LVU166
 581              	@ ../freertos/queue.c:267: 		pxQueue->cRxLock = queueUNLOCKED;
 267:../freertos/queue.c **** 		pxQueue->cTxLock = queueUNLOCKED;
 582              		.loc 1 267 20 is_stmt 0 view .LVU167
 583 0134 84F84430 		strb	r3, [r4, #68]	@ tmp134, MEM[(struct Queue_t *)xQueue_15(D)].cRxLock
 268:../freertos/queue.c **** 
 584              		.loc 1 268 3 is_stmt 1 view .LVU168
 585              	@ ../freertos/queue.c:268: 		pxQueue->cTxLock = queueUNLOCKED;
 268:../freertos/queue.c **** 
 586              		.loc 1 268 20 is_stmt 0 view .LVU169
 587 0138 84F84530 		strb	r3, [r4, #69]	@ tmp134, MEM[(struct Queue_t *)xQueue_15(D)].cTxLock
 270:../freertos/queue.c **** 		{
 588              		.loc 1 270 3 is_stmt 1 view .LVU170
 589              	@ ../freertos/queue.c:270: 		if( xNewQueue == pdFALSE )
 270:../freertos/queue.c **** 		{
 590              		.loc 1 270 5 is_stmt 0 view .LVU171
 591 013c A5B9     		cbnz	r5, .L32	@ xNewQueue,
 277:../freertos/queue.c **** 			{
 592              		.loc 1 277 4 is_stmt 1 view .LVU172
 593              	@ ../freertos/queue.c:277: 			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE
 277:../freertos/queue.c **** 			{
 594              		.loc 1 277 8 is_stmt 0 view .LVU173
 595 013e 2369     		ldr	r3, [r4, #16]	@ _9, MEM[(struct Queue_t *)xQueue_15(D)].xTasksWaitingToSend.uxNumberOfItems
 596              	@ ../freertos/queue.c:277: 			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE
 277:../freertos/queue.c **** 			{
 597              		.loc 1 277 6 view .LVU174
 598 0140 73B1     		cbz	r3, .L34	@ _9,
 279:../freertos/queue.c **** 				{
 599              		.loc 1 279 5 is_stmt 1 view .LVU175
 600              	@ ../freertos/queue.c:279: 				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) !=
 279:../freertos/queue.c **** 				{
 601              		.loc 1 279 9 is_stmt 0 view .LVU176
 602 0142 04F11000 		add	r0, r4, #16	@, xQueue,
 603 0146 FFF7FEFF 		bl	xTaskRemoveFromEventList		@
 604              	.LVL45:
 605              	@ ../freertos/queue.c:279: 				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) !=
 279:../freertos/queue.c **** 				{
ARM GAS  /tmp/ccMyq1Ea.s 			page 55


 606              		.loc 1 279 7 discriminator 1 view .LVU177
 607 014a 48B1     		cbz	r0, .L34	@ tmp146,
 281:../freertos/queue.c **** 				}
 608              		.loc 1 281 6 is_stmt 1 view .LVU178
 609 014c 4FF0E023 		mov	r3, #-536813568	@ tmp139,
 610 0150 4FF08052 		mov	r2, #268435456	@ tmp140,
 611 0154 C3F8042D 		str	r2, [r3, #3332]	@ tmp140, MEM[(volatile uint32_t *)3758157060B]
 281:../freertos/queue.c **** 				}
 612              		.loc 1 281 6 view .LVU179
 613              		.syntax unified
 614              	@ 281 "../freertos/queue.c" 1
 615 0158 BFF34F8F 		dsb	
 616              	@ 0 "" 2
 281:../freertos/queue.c **** 				}
 617              		.loc 1 281 6 view .LVU180
 618              	@ 281 "../freertos/queue.c" 1
 619 015c BFF36F8F 		isb
 620              	@ 0 "" 2
 281:../freertos/queue.c **** 				}
 621              		.loc 1 281 38 view .LVU181
 622              		.thumb
 623              		.syntax unified
 624              	.L34:
 300:../freertos/queue.c **** 
 625              		.loc 1 300 2 view .LVU182
 626 0160 FFF7FEFF 		bl	vPortExitCritical		@
 627              	.LVL46:
 304:../freertos/queue.c **** }
 628              		.loc 1 304 2 view .LVU183
 629              	@ ../freertos/queue.c:305: }
 305:../freertos/queue.c **** /*-----------------------------------------------------------*/
 630              		.loc 1 305 1 is_stmt 0 view .LVU184
 631 0164 0120     		movs	r0, #1	@,
 632 0166 38BD     		pop	{r3, r4, r5, pc}	@
 633              	.LVL47:
 634              	.L32:
 296:../freertos/queue.c **** 			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 635              		.loc 1 296 4 is_stmt 1 view .LVU185
 636 0168 04F11000 		add	r0, r4, #16	@, xQueue,
 637 016c FFF7FEFF 		bl	vListInitialise		@
 638              	.LVL48:
 297:../freertos/queue.c **** 		}
 639              		.loc 1 297 4 view .LVU186
 640 0170 04F12400 		add	r0, r4, #36	@, xQueue,
 641 0174 FFF7FEFF 		bl	vListInitialise		@
 642              	.LVL49:
 643 0178 F2E7     		b	.L34		@
 644              		.cfi_endproc
 645              	.LFE5:
 646              		.size	xQueueGenericReset, .-xQueueGenericReset
 647              		.align	1
 648              		.global	xQueueGenericCreate
 649              		.syntax unified
 650              		.thumb
 651              		.thumb_func
 652              		.type	xQueueGenericCreate, %function
 653              	xQueueGenericCreate:
ARM GAS  /tmp/ccMyq1Ea.s 			page 56


 654              	.LVL50:
 655              	.LFB6:
 369:../freertos/queue.c **** 	Queue_t *pxNewQueue;
 656              		.loc 1 369 2 view -0
 657              		.cfi_startproc
 658              		@ args = 0, pretend = 0, frame = 0
 659              		@ frame_needed = 0, uses_anonymous_args = 0
 370:../freertos/queue.c **** 	size_t xQueueSizeInBytes;
 660              		.loc 1 370 2 view .LVU188
 371:../freertos/queue.c **** 	uint8_t *pucQueueStorage;
 661              		.loc 1 371 2 view .LVU189
 372:../freertos/queue.c **** 
 662              		.loc 1 372 2 view .LVU190
 374:../freertos/queue.c **** 
 663              		.loc 1 374 52 view .LVU191
 376:../freertos/queue.c **** 		{
 664              		.loc 1 376 3 view .LVU192
 397:../freertos/queue.c **** 
 665              		.loc 1 397 3 view .LVU193
 666              	@ ../freertos/queue.c:369: 	{
 369:../freertos/queue.c **** 	Queue_t *pxNewQueue;
 667              		.loc 1 369 2 is_stmt 0 view .LVU194
 668 017a F8B5     		push	{r3, r4, r5, r6, r7, lr}	@
 669              	.LCFI10:
 670              		.cfi_def_cfa_offset 24
 671              		.cfi_offset 3, -24
 672              		.cfi_offset 4, -20
 673              		.cfi_offset 5, -16
 674              		.cfi_offset 6, -12
 675              		.cfi_offset 7, -8
 676              		.cfi_offset 14, -4
 677              	@ ../freertos/queue.c:369: 	{
 369:../freertos/queue.c **** 	Queue_t *pxNewQueue;
 678              		.loc 1 369 2 view .LVU195
 679 017c 0646     		mov	r6, r0	@ uxQueueLength, tmp125
 680              	@ ../freertos/queue.c:385: 			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint
 385:../freertos/queue.c **** 		}
 681              		.loc 1 385 22 view .LVU196
 682 017e 4843     		muls	r0, r1, r0	@ xQueueSizeInBytes, uxItemSize
 683              	.LVL51:
 684              	@ ../freertos/queue.c:397: 		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSiz
 397:../freertos/queue.c **** 
 685              		.loc 1 397 30 view .LVU197
 686 0180 5030     		adds	r0, r0, #80	@, xQueueSizeInBytes,
 687              	.LVL52:
 688              	@ ../freertos/queue.c:369: 	{
 369:../freertos/queue.c **** 	Queue_t *pxNewQueue;
 689              		.loc 1 369 2 view .LVU198
 690 0182 0D46     		mov	r5, r1	@ uxItemSize, tmp126
 691 0184 1746     		mov	r7, r2	@ ucQueueType, tmp127
 692              	@ ../freertos/queue.c:397: 		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSiz
 397:../freertos/queue.c **** 
 693              		.loc 1 397 30 view .LVU199
 694 0186 FFF7FEFF 		bl	pvPortMalloc		@
 695              	.LVL53:
 399:../freertos/queue.c **** 		{
 696              		.loc 1 399 3 is_stmt 1 view .LVU200
ARM GAS  /tmp/ccMyq1Ea.s 			page 57


 697              	@ ../freertos/queue.c:399: 		if( pxNewQueue != NULL )
 399:../freertos/queue.c **** 		{
 698              		.loc 1 399 5 is_stmt 0 view .LVU201
 699 018a 0446     		mov	r4, r0	@ <retval>, tmp128
 700 018c 58B1     		cbz	r0, .L39	@ <retval>,
 403:../freertos/queue.c **** 			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, es
 701              		.loc 1 403 4 is_stmt 1 view .LVU202
 702              	.LVL54:
 404:../freertos/queue.c **** 
 703              		.loc 1 404 4 view .LVU203
 415:../freertos/queue.c **** 		}
 704              		.loc 1 415 4 view .LVU204
 705              	.LBB29:
 706              	.LBI29:
 429:../freertos/queue.c **** {
 707              		.loc 1 429 13 view .LVU205
 708              	.LBB30:
 433:../freertos/queue.c **** 
 709              		.loc 1 433 2 view .LVU206
 435:../freertos/queue.c **** 	{
 710              		.loc 1 435 2 view .LVU207
 711              	@ ../freertos/queue.c:435: 	if( uxItemSize == ( UBaseType_t ) 0 )
 435:../freertos/queue.c **** 	{
 712              		.loc 1 435 4 is_stmt 0 view .LVU208
 713 018e 65B1     		cbz	r5, .L42	@ uxItemSize,
 714              	.LBE30:
 715              	.LBE29:
 716              	@ ../freertos/queue.c:404: 			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmeti
 404:../freertos/queue.c **** 
 717              		.loc 1 404 20 view .LVU209
 718 0190 00F15003 		add	r3, r0, #80	@ pucQueueStorage, <retval>,
 719              	.LVL55:
 720              	.LBB33:
 721              	.LBB31:
 446:../freertos/queue.c **** 	}
 722              		.loc 1 446 3 is_stmt 1 view .LVU210
 723              	.L41:
 724              	@ ../freertos/queue.c:453: 	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 453:../freertos/queue.c **** 
 725              		.loc 1 453 11 is_stmt 0 view .LVU211
 726 0194 0121     		movs	r1, #1	@,
 727 0196 2046     		mov	r0, r4	@, <retval>
 728              	.LVL56:
 729              	@ ../freertos/queue.c:452: 	pxNewQueue->uxItemSize = uxItemSize;
 452:../freertos/queue.c **** 	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 730              		.loc 1 452 25 view .LVU212
 731 0198 C4E90F65 		strd	r6, r5, [r4, #60]	@ uxQueueLength, uxItemSize, <retval>,
 732 019c 2360     		str	r3, [r4]	@ pucQueueStorage, pxNewQueue_9->pcHead
 451:../freertos/queue.c **** 	pxNewQueue->uxItemSize = uxItemSize;
 733              		.loc 1 451 2 is_stmt 1 view .LVU213
 453:../freertos/queue.c **** 
 734              		.loc 1 453 2 view .LVU214
 735              	@ ../freertos/queue.c:453: 	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 453:../freertos/queue.c **** 
 736              		.loc 1 453 11 is_stmt 0 view .LVU215
 737 019e FFF7FEFF 		bl	xQueueGenericReset		@
 738              	.LVL57:
ARM GAS  /tmp/ccMyq1Ea.s 			page 58


 457:../freertos/queue.c **** 	}
 739              		.loc 1 457 3 is_stmt 1 view .LVU216
 740              	@ ../freertos/queue.c:457: 		pxNewQueue->ucQueueType = ucQueueType;
 457:../freertos/queue.c **** 	}
 741              		.loc 1 457 27 is_stmt 0 view .LVU217
 742 01a2 84F84C70 		strb	r7, [r4, #76]	@ ucQueueType, pxNewQueue_9->ucQueueType
 467:../freertos/queue.c **** }
 743              		.loc 1 467 33 is_stmt 1 view .LVU218
 744              	.LVL58:
 467:../freertos/queue.c **** }
 745              		.loc 1 467 33 is_stmt 0 view .LVU219
 746              	.LBE31:
 747              	.LBE33:
 419:../freertos/queue.c **** 			mtCOVERAGE_TEST_MARKER();
 748              		.loc 1 419 43 is_stmt 1 view .LVU220
 420:../freertos/queue.c **** 		}
 749              		.loc 1 420 28 view .LVU221
 423:../freertos/queue.c **** 	}
 750              		.loc 1 423 3 view .LVU222
 751              	.L39:
 752              	@ ../freertos/queue.c:424: 	}
 424:../freertos/queue.c **** 
 753              		.loc 1 424 2 is_stmt 0 view .LVU223
 754 01a6 2046     		mov	r0, r4	@, <retval>
 755 01a8 F8BD     		pop	{r3, r4, r5, r6, r7, pc}	@
 756              	.LVL59:
 757              	.L42:
 758              	.LBB34:
 759              	.LBB32:
 760              	@ ../freertos/queue.c:441: 		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 441:../freertos/queue.c **** 	}
 761              		.loc 1 441 22 view .LVU224
 762 01aa 0346     		mov	r3, r0	@ pucQueueStorage, <retval>
 763 01ac F2E7     		b	.L41		@
 764              	.LBE32:
 765              	.LBE34:
 766              		.cfi_endproc
 767              	.LFE6:
 768              		.size	xQueueGenericCreate, .-xQueueGenericCreate
 769              		.align	1
 770              		.global	xQueueCreateCountingSemaphore
 771              		.syntax unified
 772              		.thumb
 773              		.thumb_func
 774              		.type	xQueueCreateCountingSemaphore, %function
 775              	xQueueCreateCountingSemaphore:
 776              	.LVL60:
 777              	.LFB12:
 722:../freertos/queue.c **** 	QueueHandle_t xHandle;
 778              		.loc 1 722 2 is_stmt 1 view -0
 779              		.cfi_startproc
 780              		@ args = 0, pretend = 0, frame = 0
 781              		@ frame_needed = 0, uses_anonymous_args = 0
 723:../freertos/queue.c **** 
 782              		.loc 1 723 2 view .LVU226
 725:../freertos/queue.c **** 		configASSERT( uxInitialCount <= uxMaxCount );
 783              		.loc 1 725 34 view .LVU227
ARM GAS  /tmp/ccMyq1Ea.s 			page 59


 726:../freertos/queue.c **** 
 784              		.loc 1 726 47 view .LVU228
 728:../freertos/queue.c **** 
 785              		.loc 1 728 3 view .LVU229
 786              	@ ../freertos/queue.c:722: 	{
 722:../freertos/queue.c **** 	QueueHandle_t xHandle;
 787              		.loc 1 722 2 is_stmt 0 view .LVU230
 788 01ae 10B5     		push	{r4, lr}	@
 789              	.LCFI11:
 790              		.cfi_def_cfa_offset 8
 791              		.cfi_offset 4, -8
 792              		.cfi_offset 14, -4
 793              	@ ../freertos/queue.c:728: 		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_L
 728:../freertos/queue.c **** 
 794              		.loc 1 728 13 view .LVU231
 795 01b0 0222     		movs	r2, #2	@,
 796              	@ ../freertos/queue.c:722: 	{
 722:../freertos/queue.c **** 	QueueHandle_t xHandle;
 797              		.loc 1 722 2 view .LVU232
 798 01b2 0C46     		mov	r4, r1	@ uxInitialCount, tmp118
 799              	@ ../freertos/queue.c:728: 		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_L
 728:../freertos/queue.c **** 
 800              		.loc 1 728 13 view .LVU233
 801 01b4 0021     		movs	r1, #0	@,
 802              	.LVL61:
 728:../freertos/queue.c **** 
 803              		.loc 1 728 13 view .LVU234
 804 01b6 FFF7FEFF 		bl	xQueueGenericCreate		@
 805              	.LVL62:
 730:../freertos/queue.c **** 		{
 806              		.loc 1 730 3 is_stmt 1 view .LVU235
 807              	@ ../freertos/queue.c:730: 		if( xHandle != NULL )
 730:../freertos/queue.c **** 		{
 808              		.loc 1 730 5 is_stmt 0 view .LVU236
 809 01ba 00B1     		cbz	r0, .L46	@ <retval>,
 732:../freertos/queue.c **** 
 810              		.loc 1 732 4 is_stmt 1 view .LVU237
 811              	@ ../freertos/queue.c:732: 			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 732:../freertos/queue.c **** 
 812              		.loc 1 732 49 is_stmt 0 view .LVU238
 813 01bc 8463     		str	r4, [r0, #56]	@ uxInitialCount, MEM[(struct Queue_t *)xHandle_5].uxMessagesWaiting
 734:../freertos/queue.c **** 		}
 814              		.loc 1 734 36 is_stmt 1 view .LVU239
 738:../freertos/queue.c **** 		}
 815              		.loc 1 738 43 view .LVU240
 741:../freertos/queue.c **** 	}
 816              		.loc 1 741 3 view .LVU241
 817              	.L46:
 818              	@ ../freertos/queue.c:742: 	}
 742:../freertos/queue.c **** 
 819              		.loc 1 742 2 is_stmt 0 view .LVU242
 820 01be 10BD     		pop	{r4, pc}	@
 742:../freertos/queue.c **** 
 821              		.loc 1 742 2 view .LVU243
 822              		.cfi_endproc
 823              	.LFE12:
 824              		.size	xQueueCreateCountingSemaphore, .-xQueueCreateCountingSemaphore
ARM GAS  /tmp/ccMyq1Ea.s 			page 60


 825              		.align	1
 826              		.global	xQueueGenericSend
 827              		.syntax unified
 828              		.thumb
 829              		.thumb_func
 830              		.type	xQueueGenericSend, %function
 831              	xQueueGenericSend:
 832              	.LVL63:
 833              	.LFB13:
 748:../freertos/queue.c **** BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 834              		.loc 1 748 1 is_stmt 1 view -0
 835              		.cfi_startproc
 836              		@ args = 0, pretend = 0, frame = 16
 837              		@ frame_needed = 0, uses_anonymous_args = 0
 749:../freertos/queue.c **** TimeOut_t xTimeOut;
 838              		.loc 1 749 1 view .LVU245
 750:../freertos/queue.c **** Queue_t * const pxQueue = xQueue;
 839              		.loc 1 750 1 view .LVU246
 751:../freertos/queue.c **** 
 840              		.loc 1 751 1 view .LVU247
 841              	@ ../freertos/queue.c:748: {
 748:../freertos/queue.c **** BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 842              		.loc 1 748 1 is_stmt 0 view .LVU248
 843 01c0 2DE9FF41 		push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}	@
 844              	.LCFI12:
 845              		.cfi_def_cfa_offset 40
 846              		.cfi_offset 4, -24
 847              		.cfi_offset 5, -20
 848              		.cfi_offset 6, -16
 849              		.cfi_offset 7, -12
 850              		.cfi_offset 8, -8
 851              		.cfi_offset 14, -4
 852              	@ ../freertos/queue.c:749: BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 749:../freertos/queue.c **** TimeOut_t xTimeOut;
 853              		.loc 1 749 12 view .LVU249
 854 01c4 0027     		movs	r7, #0	@ xEntryTimeSet,
 855              	@ ../freertos/queue.c:748: {
 748:../freertos/queue.c **** BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 856              		.loc 1 748 1 view .LVU250
 857 01c6 0446     		mov	r4, r0	@ xQueue, tmp163
 858              	.LVL64:
 748:../freertos/queue.c **** BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 859              		.loc 1 748 1 view .LVU251
 860 01c8 0E46     		mov	r6, r1	@ pvItemToQueue, tmp164
 861 01ca 1D46     		mov	r5, r3	@ xCopyPosition, tmp165
 862              	@ ../freertos/queue.c:910: 		prvLockQueue( pxQueue );
 910:../freertos/queue.c **** 
 863              		.loc 1 910 3 discriminator 1 view .LVU252
 864 01cc B846     		mov	r8, r7	@ tmp161, xEntryTimeSet
 865              	@ ../freertos/queue.c:748: {
 748:../freertos/queue.c **** BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 866              		.loc 1 748 1 view .LVU253
 867 01ce 0192     		str	r2, [sp, #4]	@ xTicksToWait, xTicksToWait
 868              	.LVL65:
 869              	.L52:
 753:../freertos/queue.c **** 	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 870              		.loc 1 753 25 is_stmt 1 view .LVU254
ARM GAS  /tmp/ccMyq1Ea.s 			page 61


 754:../freertos/queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 871              		.loc 1 754 97 view .LVU255
 755:../freertos/queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 872              		.loc 1 755 88 view .LVU256
 758:../freertos/queue.c **** 	}
 873              		.loc 1 758 104 view .LVU257
 766:../freertos/queue.c **** 	{
 874              		.loc 1 766 2 view .LVU258
 768:../freertos/queue.c **** 		{
 875              		.loc 1 768 3 view .LVU259
 876 01d0 FFF7FEFF 		bl	vPortEnterCritical		@
 877              	.LVL66:
 774:../freertos/queue.c **** 			{
 878              		.loc 1 774 4 view .LVU260
 879              	@ ../freertos/queue.c:774: 			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosi
 774:../freertos/queue.c **** 			{
 880              		.loc 1 774 17 is_stmt 0 view .LVU261
 881 01d4 A26B     		ldr	r2, [r4, #56]	@ _1, MEM[(struct Queue_t *)xQueue_24(D)].uxMessagesWaiting
 882              	@ ../freertos/queue.c:774: 			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosi
 774:../freertos/queue.c **** 			{
 883              		.loc 1 774 6 view .LVU262
 884 01d6 E36B     		ldr	r3, [r4, #60]	@ MEM[(struct Queue_t *)xQueue_24(D)].uxLength, MEM[(struct Queue_t *)xQueue_24(
 885 01d8 9A42     		cmp	r2, r3	@ _1, MEM[(struct Queue_t *)xQueue_24(D)].uxLength
 886 01da 1BD2     		bcs	.L53		@,
 887              	.L56:
 776:../freertos/queue.c **** 
 888              		.loc 1 776 31 is_stmt 1 view .LVU263
 840:../freertos/queue.c **** 
 889              		.loc 1 840 6 view .LVU264
 890              	@ ../freertos/queue.c:840: 					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyP
 840:../freertos/queue.c **** 
 891              		.loc 1 840 23 is_stmt 0 view .LVU265
 892 01dc 2A46     		mov	r2, r5	@, xCopyPosition
 893 01de 3146     		mov	r1, r6	@, pvItemToQueue
 894 01e0 2046     		mov	r0, r4	@, xQueue
 895 01e2 FFF718FF 		bl	prvCopyDataToQueue		@
 896              	.LVL67:
 844:../freertos/queue.c **** 					{
 897              		.loc 1 844 6 is_stmt 1 view .LVU266
 898              	@ ../freertos/queue.c:844: 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pd
 844:../freertos/queue.c **** 					{
 899              		.loc 1 844 10 is_stmt 0 view .LVU267
 900 01e6 636A     		ldr	r3, [r4, #36]	@ _3, MEM[(struct Queue_t *)xQueue_24(D)].xTasksWaitingToReceive.uxNumberOfItems
 901              	@ ../freertos/queue.c:844: 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pd
 844:../freertos/queue.c **** 					{
 902              		.loc 1 844 8 view .LVU268
 903 01e8 1BB1     		cbz	r3, .L77	@ _3,
 846:../freertos/queue.c **** 						{
 904              		.loc 1 846 7 is_stmt 1 view .LVU269
 905              	@ ../freertos/queue.c:846: 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive )
 846:../freertos/queue.c **** 						{
 906              		.loc 1 846 11 is_stmt 0 view .LVU270
 907 01ea 04F12400 		add	r0, r4, #36	@, xQueue,
 908              	.LVL68:
 846:../freertos/queue.c **** 						{
 909              		.loc 1 846 11 view .LVU271
 910 01ee FFF7FEFF 		bl	xTaskRemoveFromEventList		@
ARM GAS  /tmp/ccMyq1Ea.s 			page 62


 911              	.LVL69:
 912              	.L77:
 859:../freertos/queue.c **** 					{
 913              		.loc 1 859 11 is_stmt 1 view .LVU272
 914              	@ ../freertos/queue.c:859: 					else if( xYieldRequired != pdFALSE )
 859:../freertos/queue.c **** 					{
 915              		.loc 1 859 13 is_stmt 0 view .LVU273
 916 01f2 48B1     		cbz	r0, .L59	@ xYieldRequired,
 865:../freertos/queue.c **** 					}
 917              		.loc 1 865 7 is_stmt 1 view .LVU274
 918 01f4 4FF0E023 		mov	r3, #-536813568	@ tmp138,
 919 01f8 4FF08052 		mov	r2, #268435456	@ tmp139,
 920 01fc C3F8042D 		str	r2, [r3, #3332]	@ tmp139,
 865:../freertos/queue.c **** 					}
 921              		.loc 1 865 7 view .LVU275
 922              		.syntax unified
 923              	@ 865 "../freertos/queue.c" 1
 924 0200 BFF34F8F 		dsb	
 925              	@ 0 "" 2
 865:../freertos/queue.c **** 					}
 926              		.loc 1 865 7 view .LVU276
 927              	@ 865 "../freertos/queue.c" 1
 928 0204 BFF36F8F 		isb
 929              	@ 0 "" 2
 865:../freertos/queue.c **** 					}
 930              		.loc 1 865 39 view .LVU277
 931              		.thumb
 932              		.syntax unified
 933              	.L59:
 869:../freertos/queue.c **** 					}
 934              		.loc 1 869 31 view .LVU278
 874:../freertos/queue.c **** 				return pdPASS;
 935              		.loc 1 874 5 view .LVU279
 936 0208 FFF7FEFF 		bl	vPortExitCritical		@
 937              	.LVL70:
 875:../freertos/queue.c **** 			}
 938              		.loc 1 875 5 view .LVU280
 939              	@ ../freertos/queue.c:875: 				return pdPASS;
 875:../freertos/queue.c **** 			}
 940              		.loc 1 875 12 is_stmt 0 view .LVU281
 941 020c 0120     		movs	r0, #1	@ <retval>,
 942              	.LVL71:
 943              	.L51:
 944              	@ ../freertos/queue.c:954: }
 954:../freertos/queue.c **** /*-----------------------------------------------------------*/
 945              		.loc 1 954 1 view .LVU282
 946 020e 04B0     		add	sp, sp, #16	@,,
 947              	.LCFI13:
 948              		.cfi_remember_state
 949              		.cfi_def_cfa_offset 24
 950              		@ sp needed	@
 951 0210 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}	@
 952              	.LVL72:
 953              	.L53:
 954              	.LCFI14:
 955              		.cfi_restore_state
 956              	@ ../freertos/queue.c:774: 			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosi
ARM GAS  /tmp/ccMyq1Ea.s 			page 63


 774:../freertos/queue.c **** 			{
 957              		.loc 1 774 59 discriminator 1 view .LVU283
 958 0214 022D     		cmp	r5, #2	@ xCopyPosition,
 959 0216 E1D0     		beq	.L56		@,
 879:../freertos/queue.c **** 				{
 960              		.loc 1 879 5 is_stmt 1 view .LVU284
 961              	@ ../freertos/queue.c:879: 				if( xTicksToWait == ( TickType_t ) 0 )
 879:../freertos/queue.c **** 				{
 962              		.loc 1 879 7 is_stmt 0 view .LVU285
 963 0218 019B     		ldr	r3, [sp, #4]	@ xTicksToWait, xTicksToWait
 964 021a 1BB9     		cbnz	r3, .L62	@ xTicksToWait,
 883:../freertos/queue.c **** 
 965              		.loc 1 883 6 is_stmt 1 view .LVU286
 966 021c FFF7FEFF 		bl	vPortExitCritical		@
 967              	.LVL73:
 887:../freertos/queue.c **** 					return errQUEUE_FULL;
 968              		.loc 1 887 39 view .LVU287
 888:../freertos/queue.c **** 				}
 969              		.loc 1 888 6 view .LVU288
 970              	.L63:
 971              	@ ../freertos/queue.c:888: 					return errQUEUE_FULL;
 888:../freertos/queue.c **** 				}
 972              		.loc 1 888 13 is_stmt 0 view .LVU289
 973 0220 0020     		movs	r0, #0	@ <retval>,
 974 0222 F4E7     		b	.L51		@
 975              	.LVL74:
 976              	.L62:
 890:../freertos/queue.c **** 				{
 977              		.loc 1 890 10 is_stmt 1 view .LVU290
 978              	@ ../freertos/queue.c:890: 				else if( xEntryTimeSet == pdFALSE )
 890:../freertos/queue.c **** 				{
 979              		.loc 1 890 12 is_stmt 0 view .LVU291
 980 0224 17B9     		cbnz	r7, .L64	@ xEntryTimeSet,
 894:../freertos/queue.c **** 					xEntryTimeSet = pdTRUE;
 981              		.loc 1 894 6 is_stmt 1 view .LVU292
 982 0226 02A8     		add	r0, sp, #8	@ tmp171,,
 983 0228 FFF7FEFF 		bl	vTaskInternalSetTimeOutState		@
 984              	.LVL75:
 895:../freertos/queue.c **** 				}
 985              		.loc 1 895 6 view .LVU293
 986              	.L64:
 900:../freertos/queue.c **** 				}
 987              		.loc 1 900 30 view .LVU294
 904:../freertos/queue.c **** 
 988              		.loc 1 904 3 view .LVU295
 989 022c FFF7FEFF 		bl	vPortExitCritical		@
 990              	.LVL76:
 909:../freertos/queue.c **** 		prvLockQueue( pxQueue );
 991              		.loc 1 909 3 view .LVU296
 992 0230 FFF7FEFF 		bl	vTaskSuspendAll		@
 993              	.LVL77:
 910:../freertos/queue.c **** 
 994              		.loc 1 910 3 view .LVU297
 995 0234 FFF7FEFF 		bl	vPortEnterCritical		@
 996              	.LVL78:
 910:../freertos/queue.c **** 
 997              		.loc 1 910 3 discriminator 1 view .LVU298
ARM GAS  /tmp/ccMyq1Ea.s 			page 64


 998 0238 94F84430 		ldrb	r3, [r4, #68]	@ zero_extendqisi2	@ MEM[(struct Queue_t *)xQueue_24(D)].cRxLock, MEM[(struct Q
 999 023c FF2B     		cmp	r3, #255	@ MEM[(struct Queue_t *)xQueue_24(D)].cRxLock,
 910:../freertos/queue.c **** 
 1000              		.loc 1 910 3 discriminator 1 view .LVU299
 1001 023e 08BF     		it	eq
 1002 0240 84F84480 		strbeq	r8, [r4, #68]	@ tmp161, MEM[(struct Queue_t *)xQueue_24(D)].cRxLock
 910:../freertos/queue.c **** 
 1003              		.loc 1 910 3 discriminator 3 view .LVU300
 1004 0244 94F84530 		ldrb	r3, [r4, #69]	@ zero_extendqisi2	@ MEM[(struct Queue_t *)xQueue_24(D)].cTxLock, MEM[(struct Q
 1005 0248 FF2B     		cmp	r3, #255	@ MEM[(struct Queue_t *)xQueue_24(D)].cTxLock,
 910:../freertos/queue.c **** 
 1006              		.loc 1 910 3 discriminator 4 view .LVU301
 1007 024a 08BF     		it	eq
 1008 024c 84F84580 		strbeq	r8, [r4, #69]	@ tmp161, MEM[(struct Queue_t *)xQueue_24(D)].cTxLock
 910:../freertos/queue.c **** 
 1009              		.loc 1 910 3 discriminator 6 view .LVU302
 1010 0250 FFF7FEFF 		bl	vPortExitCritical		@
 1011              	.LVL79:
 913:../freertos/queue.c **** 		{
 1012              		.loc 1 913 3 view .LVU303
 1013              	@ ../freertos/queue.c:913: 		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 913:../freertos/queue.c **** 		{
 1014              		.loc 1 913 7 is_stmt 0 view .LVU304
 1015 0254 01A9     		add	r1, sp, #4	@ tmp172,,
 1016 0256 02A8     		add	r0, sp, #8	@ tmp173,,
 1017 0258 FFF7FEFF 		bl	xTaskCheckForTimeOut		@
 1018              	.LVL80:
 1019              	@ ../freertos/queue.c:913: 		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 913:../freertos/queue.c **** 		{
 1020              		.loc 1 913 5 discriminator 1 view .LVU305
 1021 025c 38BB     		cbnz	r0, .L67	@ tmp168,
 915:../freertos/queue.c **** 			{
 1022              		.loc 1 915 4 is_stmt 1 view .LVU306
 1023              	.LVL81:
 1024              	.LBB37:
 1025              	.LBI37:
2306:../freertos/queue.c **** /*-----------------------------------------------------------*/
2307:../freertos/queue.c **** 
2308:../freertos/queue.c **** BaseType_t xQueueIsQueueEmptyFromISR( const QueueHandle_t xQueue )
2309:../freertos/queue.c **** {
2310:../freertos/queue.c **** BaseType_t xReturn;
2311:../freertos/queue.c **** Queue_t * const pxQueue = xQueue;
2312:../freertos/queue.c **** 
2313:../freertos/queue.c **** 	configASSERT( pxQueue );
2314:../freertos/queue.c **** 	if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
2315:../freertos/queue.c **** 	{
2316:../freertos/queue.c **** 		xReturn = pdTRUE;
2317:../freertos/queue.c **** 	}
2318:../freertos/queue.c **** 	else
2319:../freertos/queue.c **** 	{
2320:../freertos/queue.c **** 		xReturn = pdFALSE;
2321:../freertos/queue.c **** 	}
2322:../freertos/queue.c **** 
2323:../freertos/queue.c **** 	return xReturn;
2324:../freertos/queue.c **** } /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
2325:../freertos/queue.c **** /*-----------------------------------------------------------*/
2326:../freertos/queue.c **** 
ARM GAS  /tmp/ccMyq1Ea.s 			page 65


2327:../freertos/queue.c **** static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
 1026              		.loc 1 2327 19 view .LVU307
 1027              	.LBB38:
2328:../freertos/queue.c **** {
2329:../freertos/queue.c **** BaseType_t xReturn;
 1028              		.loc 1 2329 1 view .LVU308
2330:../freertos/queue.c **** 
2331:../freertos/queue.c **** 	taskENTER_CRITICAL();
 1029              		.loc 1 2331 2 view .LVU309
 1030 025e FFF7FEFF 		bl	vPortEnterCritical		@
 1031              	.LVL82:
2332:../freertos/queue.c **** 	{
2333:../freertos/queue.c **** 		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 1032              		.loc 1 2333 3 view .LVU310
 1033              	@ ../freertos/queue.c:2333: 		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 1034              		.loc 1 2333 14 is_stmt 0 view .LVU311
 1035 0262 A26B     		ldr	r2, [r4, #56]	@ _61, MEM[(const struct Queue_t *)xQueue_24(D)].uxMessagesWaiting
 1036              	@ ../freertos/queue.c:2333: 		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 1037              		.loc 1 2333 5 view .LVU312
 1038 0264 E36B     		ldr	r3, [r4, #60]	@ MEM[(const struct Queue_t *)xQueue_24(D)].uxLength, MEM[(const struct Queue_t 
 1039 0266 9A42     		cmp	r2, r3	@ _61, MEM[(const struct Queue_t *)xQueue_24(D)].uxLength
 1040 0268 0ED1     		bne	.L68		@,
 1041              	.LVL83:
2334:../freertos/queue.c **** 		{
2335:../freertos/queue.c **** 			xReturn = pdTRUE;
2336:../freertos/queue.c **** 		}
2337:../freertos/queue.c **** 		else
2338:../freertos/queue.c **** 		{
2339:../freertos/queue.c **** 			xReturn = pdFALSE;
2340:../freertos/queue.c **** 		}
2341:../freertos/queue.c **** 	}
2342:../freertos/queue.c **** 	taskEXIT_CRITICAL();
 1042              		.loc 1 2342 2 is_stmt 1 view .LVU313
 1043 026a FFF7FEFF 		bl	vPortExitCritical		@
 1044              	.LVL84:
2343:../freertos/queue.c **** 
2344:../freertos/queue.c **** 	return xReturn;
 1045              		.loc 1 2344 2 view .LVU314
 1046              		.loc 1 2344 2 is_stmt 0 view .LVU315
 1047              	.LBE38:
 1048              	.LBE37:
 917:../freertos/queue.c **** 				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 1049              		.loc 1 917 43 is_stmt 1 view .LVU316
 918:../freertos/queue.c **** 
 1050              		.loc 1 918 5 view .LVU317
 1051 026e 0199     		ldr	r1, [sp, #4]	@, xTicksToWait
 1052 0270 04F11000 		add	r0, r4, #16	@, xQueue,
 1053 0274 FFF7FEFF 		bl	vTaskPlaceOnEventList		@
 1054              	.LVL85:
 925:../freertos/queue.c **** 
 1055              		.loc 1 925 5 view .LVU318
 1056 0278 2046     		mov	r0, r4	@, xQueue
 1057 027a FFF713FF 		bl	prvUnlockQueue		@
 1058              	.LVL86:
 932:../freertos/queue.c **** 				{
 1059              		.loc 1 932 5 view .LVU319
 1060              	@ ../freertos/queue.c:932: 				if( xTaskResumeAll() == pdFALSE )
ARM GAS  /tmp/ccMyq1Ea.s 			page 66


 932:../freertos/queue.c **** 				{
 1061              		.loc 1 932 9 is_stmt 0 view .LVU320
 1062 027e FFF7FEFF 		bl	xTaskResumeAll		@
 1063              	.LVL87:
 1064              	@ ../freertos/queue.c:932: 				if( xTaskResumeAll() == pdFALSE )
 932:../freertos/queue.c **** 				{
 1065              		.loc 1 932 7 discriminator 1 view .LVU321
 1066 0282 48B1     		cbz	r0, .L69	@ tmp169,
 1067              	.L70:
 1068              	@ ../freertos/queue.c:748: {
 748:../freertos/queue.c **** BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 1069              		.loc 1 748 1 view .LVU322
 1070 0284 0127     		movs	r7, #1	@ xEntryTimeSet,
 1071 0286 A3E7     		b	.L52		@
 1072              	.LVL88:
 1073              	.L68:
 1074              	.LBB40:
 1075              	.LBB39:
2339:../freertos/queue.c **** 		}
 1076              		.loc 1 2339 4 is_stmt 1 view .LVU323
2342:../freertos/queue.c **** 
 1077              		.loc 1 2342 2 view .LVU324
 1078 0288 FFF7FEFF 		bl	vPortExitCritical		@
 1079              	.LVL89:
 1080              		.loc 1 2344 2 view .LVU325
 1081              		.loc 1 2344 2 is_stmt 0 view .LVU326
 1082              	.LBE39:
 1083              	.LBE40:
 940:../freertos/queue.c **** 				( void ) xTaskResumeAll();
 1084              		.loc 1 940 5 is_stmt 1 view .LVU327
 1085 028c 2046     		mov	r0, r4	@, xQueue
 1086 028e FFF709FF 		bl	prvUnlockQueue		@
 1087              	.LVL90:
 941:../freertos/queue.c **** 			}
 1088              		.loc 1 941 5 view .LVU328
 1089              	@ ../freertos/queue.c:941: 				( void ) xTaskResumeAll();
 941:../freertos/queue.c **** 			}
 1090              		.loc 1 941 14 is_stmt 0 view .LVU329
 1091 0292 FFF7FEFF 		bl	xTaskResumeAll		@
 1092              	.LVL91:
 1093 0296 F5E7     		b	.L70		@
 1094              	.L69:
 934:../freertos/queue.c **** 				}
 1095              		.loc 1 934 6 is_stmt 1 view .LVU330
 1096 0298 4FF0E023 		mov	r3, #-536813568	@ tmp156,
 1097 029c 4FF08052 		mov	r2, #268435456	@ tmp157,
 1098 02a0 C3F8042D 		str	r2, [r3, #3332]	@ tmp157, MEM[(volatile uint32_t *)3758157060B]
 934:../freertos/queue.c **** 				}
 1099              		.loc 1 934 6 view .LVU331
 1100              		.syntax unified
 1101              	@ 934 "../freertos/queue.c" 1
 1102 02a4 BFF34F8F 		dsb	
 1103              	@ 0 "" 2
 934:../freertos/queue.c **** 				}
 1104              		.loc 1 934 6 view .LVU332
 1105              	@ 934 "../freertos/queue.c" 1
 1106 02a8 BFF36F8F 		isb
ARM GAS  /tmp/ccMyq1Ea.s 			page 67


 1107              	@ 0 "" 2
 1108              		.thumb
 1109              		.syntax unified
 1110 02ac EAE7     		b	.L70		@
 1111              	.L67:
 947:../freertos/queue.c **** 			( void ) xTaskResumeAll();
 1112              		.loc 1 947 4 view .LVU333
 1113 02ae 2046     		mov	r0, r4	@, xQueue
 1114 02b0 FFF7F8FE 		bl	prvUnlockQueue		@
 1115              	.LVL92:
 948:../freertos/queue.c **** 
 1116              		.loc 1 948 4 view .LVU334
 1117              	@ ../freertos/queue.c:948: 			( void ) xTaskResumeAll();
 948:../freertos/queue.c **** 
 1118              		.loc 1 948 13 is_stmt 0 view .LVU335
 1119 02b4 FFF7FEFF 		bl	xTaskResumeAll		@
 1120              	.LVL93:
 950:../freertos/queue.c **** 			return errQUEUE_FULL;
 1121              		.loc 1 950 37 is_stmt 1 view .LVU336
 951:../freertos/queue.c **** 		}
 1122              		.loc 1 951 4 view .LVU337
 1123              	@ ../freertos/queue.c:951: 			return errQUEUE_FULL;
 951:../freertos/queue.c **** 		}
 1124              		.loc 1 951 11 is_stmt 0 view .LVU338
 1125 02b8 B2E7     		b	.L63		@
 1126              		.cfi_endproc
 1127              	.LFE13:
 1128              		.size	xQueueGenericSend, .-xQueueGenericSend
 1129              		.align	1
 1130              		.global	xQueueCreateMutex
 1131              		.syntax unified
 1132              		.thumb
 1133              		.thumb_func
 1134              		.type	xQueueCreateMutex, %function
 1135              	xQueueCreateMutex:
 1136              	.LVL94:
 1137              	.LFB9:
 504:../freertos/queue.c **** 	QueueHandle_t xNewQueue;
 1138              		.loc 1 504 2 is_stmt 1 view -0
 1139              		.cfi_startproc
 1140              		@ args = 0, pretend = 0, frame = 0
 1141              		@ frame_needed = 0, uses_anonymous_args = 0
 505:../freertos/queue.c **** 	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 1142              		.loc 1 505 2 view .LVU340
 506:../freertos/queue.c **** 
 1143              		.loc 1 506 2 view .LVU341
 508:../freertos/queue.c **** 		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 1144              		.loc 1 508 3 view .LVU342
 1145              	@ ../freertos/queue.c:504: 	{
 504:../freertos/queue.c **** 	QueueHandle_t xNewQueue;
 1146              		.loc 1 504 2 is_stmt 0 view .LVU343
 1147 02ba 0246     		mov	r2, r0	@ tmp120, ucQueueType
 1148 02bc 10B5     		push	{r4, lr}	@
 1149              	.LCFI15:
 1150              		.cfi_def_cfa_offset 8
 1151              		.cfi_offset 4, -8
 1152              		.cfi_offset 14, -4
ARM GAS  /tmp/ccMyq1Ea.s 			page 68


 1153              	@ ../freertos/queue.c:508: 		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueTy
 508:../freertos/queue.c **** 		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 1154              		.loc 1 508 15 view .LVU344
 1155 02be 0021     		movs	r1, #0	@,
 1156 02c0 0120     		movs	r0, #1	@,
 1157              	.LVL95:
 508:../freertos/queue.c **** 		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 1158              		.loc 1 508 15 view .LVU345
 1159 02c2 FFF7FEFF 		bl	xQueueGenericCreate		@
 1160              	.LVL96:
 509:../freertos/queue.c **** 
 1161              		.loc 1 509 3 is_stmt 1 view .LVU346
 1162              	.LBB43:
 1163              	.LBI43:
 473:../freertos/queue.c **** 	{
 1164              		.loc 1 473 14 view .LVU347
 1165              	.LBB44:
 475:../freertos/queue.c **** 		{
 1166              		.loc 1 475 3 view .LVU348
 1167              	@ ../freertos/queue.c:475: 		if( pxNewQueue != NULL )
 475:../freertos/queue.c **** 		{
 1168              		.loc 1 475 5 is_stmt 0 view .LVU349
 1169 02c6 0446     		mov	r4, r0	@ <retval>, tmp121
 1170 02c8 38B1     		cbz	r0, .L81	@ <retval>,
 481:../freertos/queue.c **** 			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 1171              		.loc 1 481 4 is_stmt 1 view .LVU350
 1172              	@ ../freertos/queue.c:481: 			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 481:../freertos/queue.c **** 			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 1173              		.loc 1 481 42 is_stmt 0 view .LVU351
 1174 02ca 0023     		movs	r3, #0	@ tmp116,
 1175              	@ ../freertos/queue.c:490: 			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queu
 490:../freertos/queue.c **** 		}
 1176              		.loc 1 490 13 view .LVU352
 1177 02cc 1A46     		mov	r2, r3	@,
 1178 02ce 1946     		mov	r1, r3	@,
 1179              	@ ../freertos/queue.c:481: 			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 481:../freertos/queue.c **** 			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 1180              		.loc 1 481 42 view .LVU353
 1181 02d0 8360     		str	r3, [r0, #8]	@ tmp116, MEM[(struct Queue_t *)xNewQueue_4].u.xSemaphore.xMutexHolder
 482:../freertos/queue.c **** 
 1182              		.loc 1 482 4 is_stmt 1 view .LVU354
 1183              	@ ../freertos/queue.c:482: 			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 482:../freertos/queue.c **** 
 1184              		.loc 1 482 28 is_stmt 0 view .LVU355
 1185 02d2 0360     		str	r3, [r0]	@ tmp116, MEM[(struct Queue_t *)xNewQueue_4].pcHead
 485:../freertos/queue.c **** 
 1186              		.loc 1 485 4 is_stmt 1 view .LVU356
 1187              	@ ../freertos/queue.c:485: 			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 485:../freertos/queue.c **** 
 1188              		.loc 1 485 50 is_stmt 0 view .LVU357
 1189 02d4 C360     		str	r3, [r0, #12]	@ tmp116, MEM[(struct Queue_t *)xNewQueue_4].u.xSemaphore.uxRecursiveCallCount
 487:../freertos/queue.c **** 
 1190              		.loc 1 487 35 is_stmt 1 view .LVU358
 490:../freertos/queue.c **** 		}
 1191              		.loc 1 490 4 view .LVU359
 1192              	@ ../freertos/queue.c:490: 			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queu
 490:../freertos/queue.c **** 		}
ARM GAS  /tmp/ccMyq1Ea.s 			page 69


 1193              		.loc 1 490 13 is_stmt 0 view .LVU360
 1194 02d6 FFF7FEFF 		bl	xQueueGenericSend		@
 1195              	.LVL97:
 494:../freertos/queue.c **** 		}
 1196              		.loc 1 494 30 is_stmt 1 view .LVU361
 494:../freertos/queue.c **** 		}
 1197              		.loc 1 494 30 is_stmt 0 view .LVU362
 1198              	.LBE44:
 1199              	.LBE43:
 511:../freertos/queue.c **** 	}
 1200              		.loc 1 511 3 is_stmt 1 view .LVU363
 1201              	.L81:
 1202              	@ ../freertos/queue.c:512: 	}
 512:../freertos/queue.c **** 
 1203              		.loc 1 512 2 is_stmt 0 view .LVU364
 1204 02da 2046     		mov	r0, r4	@, <retval>
 1205 02dc 10BD     		pop	{r4, pc}	@
 512:../freertos/queue.c **** 
 1206              		.loc 1 512 2 view .LVU365
 1207              		.cfi_endproc
 1208              	.LFE9:
 1209              		.size	xQueueCreateMutex, .-xQueueCreateMutex
 1210              		.align	1
 1211              		.global	xQueueGiveMutexRecursive
 1212              		.syntax unified
 1213              		.thumb
 1214              		.thumb_func
 1215              		.type	xQueueGiveMutexRecursive, %function
 1216              	xQueueGiveMutexRecursive:
 1217              	.LVL98:
 1218              	.LFB10:
 597:../freertos/queue.c **** 	BaseType_t xReturn;
 1219              		.loc 1 597 2 is_stmt 1 view -0
 1220              		.cfi_startproc
 1221              		@ args = 0, pretend = 0, frame = 0
 1222              		@ frame_needed = 0, uses_anonymous_args = 0
 598:../freertos/queue.c **** 	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 1223              		.loc 1 598 2 view .LVU367
 599:../freertos/queue.c **** 
 1224              		.loc 1 599 2 view .LVU368
 601:../freertos/queue.c **** 
 1225              		.loc 1 601 26 view .LVU369
 609:../freertos/queue.c **** 		{
 1226              		.loc 1 609 3 view .LVU370
 1227              	@ ../freertos/queue.c:597: 	{
 597:../freertos/queue.c **** 	BaseType_t xReturn;
 1228              		.loc 1 597 2 is_stmt 0 view .LVU371
 1229 02de 38B5     		push	{r3, r4, r5, lr}	@
 1230              	.LCFI16:
 1231              		.cfi_def_cfa_offset 16
 1232              		.cfi_offset 3, -16
 1233              		.cfi_offset 4, -12
 1234              		.cfi_offset 5, -8
 1235              		.cfi_offset 14, -4
 1236              	@ ../freertos/queue.c:609: 		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() 
 609:../freertos/queue.c **** 		{
 1237              		.loc 1 609 28 view .LVU372
ARM GAS  /tmp/ccMyq1Ea.s 			page 70


 1238 02e0 8568     		ldr	r5, [r0, #8]	@ _1, MEM[(struct Queue_t *)xMutex_8(D)].u.xSemaphore.xMutexHolder
 1239              	@ ../freertos/queue.c:597: 	{
 597:../freertos/queue.c **** 	BaseType_t xReturn;
 1240              		.loc 1 597 2 view .LVU373
 1241 02e2 0446     		mov	r4, r0	@ xMutex, tmp122
 1242              	@ ../freertos/queue.c:609: 		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() 
 609:../freertos/queue.c **** 		{
 1243              		.loc 1 609 45 view .LVU374
 1244 02e4 FFF7FEFF 		bl	xTaskGetCurrentTaskHandle		@
 1245              	.LVL99:
 1246              	@ ../freertos/queue.c:609: 		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() 
 609:../freertos/queue.c **** 		{
 1247              		.loc 1 609 5 discriminator 1 view .LVU375
 1248 02e8 8542     		cmp	r5, r0	@ _1, tmp123
 1249 02ea 0BD1     		bne	.L90		@,
 611:../freertos/queue.c **** 
 1250              		.loc 1 611 40 is_stmt 1 view .LVU376
 618:../freertos/queue.c **** 
 1251              		.loc 1 618 4 view .LVU377
 1252              	@ ../freertos/queue.c:618: 			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 618:../freertos/queue.c **** 
 1253              		.loc 1 618 50 is_stmt 0 view .LVU378
 1254 02ec E368     		ldr	r3, [r4, #12]	@ MEM[(struct Queue_t *)xMutex_8(D)].u.xSemaphore.uxRecursiveCallCount, MEM[(str
 1255 02ee 013B     		subs	r3, r3, #1	@ _4, MEM[(struct Queue_t *)xMutex_8(D)].u.xSemaphore.uxRecursiveCallCount,
 1256 02f0 E360     		str	r3, [r4, #12]	@ _4, MEM[(struct Queue_t *)xMutex_8(D)].u.xSemaphore.uxRecursiveCallCount
 621:../freertos/queue.c **** 			{
 1257              		.loc 1 621 4 is_stmt 1 view .LVU379
 1258              	@ ../freertos/queue.c:621: 			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 621:../freertos/queue.c **** 			{
 1259              		.loc 1 621 6 is_stmt 0 view .LVU380
 1260 02f2 0BB1     		cbz	r3, .L88	@ _4,
 1261              	.L89:
 1262              	@ ../freertos/queue.c:632: 			xReturn = pdPASS;
 632:../freertos/queue.c **** 		}
 1263              		.loc 1 632 12 view .LVU381
 1264 02f4 0120     		movs	r0, #1	@ <retval>,
 1265              	.L86:
 1266              	@ ../freertos/queue.c:644: 	}
 644:../freertos/queue.c **** 
 1267              		.loc 1 644 2 view .LVU382
 1268 02f6 38BD     		pop	{r3, r4, r5, pc}	@
 1269              	.LVL100:
 1270              	.L88:
 625:../freertos/queue.c **** 			}
 1271              		.loc 1 625 5 is_stmt 1 view .LVU383
 1272              	@ ../freertos/queue.c:625: 				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIM
 625:../freertos/queue.c **** 			}
 1273              		.loc 1 625 14 is_stmt 0 view .LVU384
 1274 02f8 1A46     		mov	r2, r3	@,
 1275 02fa 1946     		mov	r1, r3	@,
 1276 02fc 2046     		mov	r0, r4	@, xMutex
 1277 02fe FFF7FEFF 		bl	xQueueGenericSend		@
 1278              	.LVL101:
 1279 0302 F7E7     		b	.L89		@
 1280              	.L90:
 1281              	@ ../freertos/queue.c:638: 			xReturn = pdFAIL;
 638:../freertos/queue.c **** 
ARM GAS  /tmp/ccMyq1Ea.s 			page 71


 1282              		.loc 1 638 12 view .LVU385
 1283 0304 0020     		movs	r0, #0	@ <retval>,
 1284              	.LVL102:
 640:../freertos/queue.c **** 		}
 1285              		.loc 1 640 47 is_stmt 1 view .LVU386
 643:../freertos/queue.c **** 	}
 1286              		.loc 1 643 3 view .LVU387
 1287              	@ ../freertos/queue.c:643: 		return xReturn;
 643:../freertos/queue.c **** 	}
 1288              		.loc 1 643 10 is_stmt 0 view .LVU388
 1289 0306 F6E7     		b	.L86		@
 1290              		.cfi_endproc
 1291              	.LFE10:
 1292              		.size	xQueueGiveMutexRecursive, .-xQueueGiveMutexRecursive
 1293              		.align	1
 1294              		.global	xQueueGenericSendFromISR
 1295              		.syntax unified
 1296              		.thumb
 1297              		.thumb_func
 1298              		.type	xQueueGenericSendFromISR, %function
 1299              	xQueueGenericSendFromISR:
 1300              	.LVL103:
 1301              	.LFB14:
 958:../freertos/queue.c **** BaseType_t xReturn;
 1302              		.loc 1 958 1 is_stmt 1 view -0
 1303              		.cfi_startproc
 1304              		@ args = 0, pretend = 0, frame = 0
 1305              		@ frame_needed = 0, uses_anonymous_args = 0
 959:../freertos/queue.c **** UBaseType_t uxSavedInterruptStatus;
 1306              		.loc 1 959 1 view .LVU390
 960:../freertos/queue.c **** Queue_t * const pxQueue = xQueue;
 1307              		.loc 1 960 1 view .LVU391
 961:../freertos/queue.c **** 
 1308              		.loc 1 961 1 view .LVU392
 963:../freertos/queue.c **** 	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 1309              		.loc 1 963 25 view .LVU393
 964:../freertos/queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 1310              		.loc 1 964 97 view .LVU394
 965:../freertos/queue.c **** 
 1311              		.loc 1 965 88 view .LVU395
 981:../freertos/queue.c **** 
 1312              		.loc 1 981 44 view .LVU396
 988:../freertos/queue.c **** 	{
 1313              		.loc 1 988 2 view .LVU397
 1314              	.LBB45:
 1315              	.LBI45:
 1316              		.file 2 "../freertos/portable/GCC/ARM_CM3/portmacro.h"
   1:../freertos/portable/GCC/ARM_CM3/portmacro.h **** /*
   2:../freertos/portable/GCC/ARM_CM3/portmacro.h ****  * FreeRTOS Kernel V10.2.1
   3:../freertos/portable/GCC/ARM_CM3/portmacro.h ****  * Copyright (C) 2019 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:../freertos/portable/GCC/ARM_CM3/portmacro.h ****  *
   5:../freertos/portable/GCC/ARM_CM3/portmacro.h ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:../freertos/portable/GCC/ARM_CM3/portmacro.h ****  * this software and associated documentation files (the "Software"), to deal in
   7:../freertos/portable/GCC/ARM_CM3/portmacro.h ****  * the Software without restriction, including without limitation the rights to
   8:../freertos/portable/GCC/ARM_CM3/portmacro.h ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:../freertos/portable/GCC/ARM_CM3/portmacro.h ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:../freertos/portable/GCC/ARM_CM3/portmacro.h ****  * subject to the following conditions:
ARM GAS  /tmp/ccMyq1Ea.s 			page 72


  11:../freertos/portable/GCC/ARM_CM3/portmacro.h ****  *
  12:../freertos/portable/GCC/ARM_CM3/portmacro.h ****  * The above copyright notice and this permission notice shall be included in all
  13:../freertos/portable/GCC/ARM_CM3/portmacro.h ****  * copies or substantial portions of the Software.
  14:../freertos/portable/GCC/ARM_CM3/portmacro.h ****  *
  15:../freertos/portable/GCC/ARM_CM3/portmacro.h ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:../freertos/portable/GCC/ARM_CM3/portmacro.h ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:../freertos/portable/GCC/ARM_CM3/portmacro.h ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:../freertos/portable/GCC/ARM_CM3/portmacro.h ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:../freertos/portable/GCC/ARM_CM3/portmacro.h ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:../freertos/portable/GCC/ARM_CM3/portmacro.h ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:../freertos/portable/GCC/ARM_CM3/portmacro.h ****  *
  22:../freertos/portable/GCC/ARM_CM3/portmacro.h ****  * http://www.FreeRTOS.org
  23:../freertos/portable/GCC/ARM_CM3/portmacro.h ****  * http://aws.amazon.com/freertos
  24:../freertos/portable/GCC/ARM_CM3/portmacro.h ****  *
  25:../freertos/portable/GCC/ARM_CM3/portmacro.h ****  * 1 tab == 4 spaces!
  26:../freertos/portable/GCC/ARM_CM3/portmacro.h ****  */
  27:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 
  28:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 
  29:../freertos/portable/GCC/ARM_CM3/portmacro.h **** #ifndef PORTMACRO_H
  30:../freertos/portable/GCC/ARM_CM3/portmacro.h **** #define PORTMACRO_H
  31:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 
  32:../freertos/portable/GCC/ARM_CM3/portmacro.h **** #ifdef __cplusplus
  33:../freertos/portable/GCC/ARM_CM3/portmacro.h **** extern "C" {
  34:../freertos/portable/GCC/ARM_CM3/portmacro.h **** #endif
  35:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 
  36:../freertos/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------
  37:../freertos/portable/GCC/ARM_CM3/portmacro.h ****  * Port specific definitions.
  38:../freertos/portable/GCC/ARM_CM3/portmacro.h ****  *
  39:../freertos/portable/GCC/ARM_CM3/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  40:../freertos/portable/GCC/ARM_CM3/portmacro.h ****  * given hardware and compiler.
  41:../freertos/portable/GCC/ARM_CM3/portmacro.h ****  *
  42:../freertos/portable/GCC/ARM_CM3/portmacro.h ****  * These settings should not be altered.
  43:../freertos/portable/GCC/ARM_CM3/portmacro.h ****  *-----------------------------------------------------------
  44:../freertos/portable/GCC/ARM_CM3/portmacro.h ****  */
  45:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 
  46:../freertos/portable/GCC/ARM_CM3/portmacro.h **** /* Type definitions. */
  47:../freertos/portable/GCC/ARM_CM3/portmacro.h **** #define portCHAR		char
  48:../freertos/portable/GCC/ARM_CM3/portmacro.h **** #define portFLOAT		float
  49:../freertos/portable/GCC/ARM_CM3/portmacro.h **** #define portDOUBLE		double
  50:../freertos/portable/GCC/ARM_CM3/portmacro.h **** #define portLONG		long
  51:../freertos/portable/GCC/ARM_CM3/portmacro.h **** #define portSHORT		short
  52:../freertos/portable/GCC/ARM_CM3/portmacro.h **** #define portSTACK_TYPE	uint32_t
  53:../freertos/portable/GCC/ARM_CM3/portmacro.h **** #define portBASE_TYPE	long
  54:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 
  55:../freertos/portable/GCC/ARM_CM3/portmacro.h **** typedef portSTACK_TYPE StackType_t;
  56:../freertos/portable/GCC/ARM_CM3/portmacro.h **** typedef long BaseType_t;
  57:../freertos/portable/GCC/ARM_CM3/portmacro.h **** typedef unsigned long UBaseType_t;
  58:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 
  59:../freertos/portable/GCC/ARM_CM3/portmacro.h **** #if( configUSE_16_BIT_TICKS == 1 )
  60:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	typedef uint16_t TickType_t;
  61:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffff
  62:../freertos/portable/GCC/ARM_CM3/portmacro.h **** #else
  63:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	typedef uint32_t TickType_t;
  64:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffffffffUL
  65:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 
  66:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	/* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
  67:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	not need to be guarded with a critical section. */
ARM GAS  /tmp/ccMyq1Ea.s 			page 73


  68:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	#define portTICK_TYPE_IS_ATOMIC 1
  69:../freertos/portable/GCC/ARM_CM3/portmacro.h **** #endif
  70:../freertos/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
  71:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 
  72:../freertos/portable/GCC/ARM_CM3/portmacro.h **** /* Architecture specifics. */
  73:../freertos/portable/GCC/ARM_CM3/portmacro.h **** #define portSTACK_GROWTH			( -1 )
  74:../freertos/portable/GCC/ARM_CM3/portmacro.h **** #define portTICK_PERIOD_MS			( ( TickType_t ) 1000 / configTICK_RATE_HZ )
  75:../freertos/portable/GCC/ARM_CM3/portmacro.h **** #define portBYTE_ALIGNMENT			8
  76:../freertos/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
  77:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 
  78:../freertos/portable/GCC/ARM_CM3/portmacro.h **** /* Scheduler utilities. */
  79:../freertos/portable/GCC/ARM_CM3/portmacro.h **** #define portYIELD() 															\
  80:../freertos/portable/GCC/ARM_CM3/portmacro.h **** {																				\
  81:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	/* Set a PendSV to request a context switch. */								\
  82:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;								\
  83:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 																				\
  84:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	/* Barriers are normally not required but do ensure the code is completely	\
  85:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	within the specified behaviour for the architecture. */						\
  86:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	__asm volatile( "dsb" ::: "memory" );										\
  87:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	__asm volatile( "isb" );													\
  88:../freertos/portable/GCC/ARM_CM3/portmacro.h **** }
  89:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 
  90:../freertos/portable/GCC/ARM_CM3/portmacro.h **** #define portNVIC_INT_CTRL_REG		( * ( ( volatile uint32_t * ) 0xe000ed04 ) )
  91:../freertos/portable/GCC/ARM_CM3/portmacro.h **** #define portNVIC_PENDSVSET_BIT		( 1UL << 28UL )
  92:../freertos/portable/GCC/ARM_CM3/portmacro.h **** #define portEND_SWITCHING_ISR( xSwitchRequired ) if( xSwitchRequired != pdFALSE ) portYIELD()
  93:../freertos/portable/GCC/ARM_CM3/portmacro.h **** #define portYIELD_FROM_ISR( x ) portEND_SWITCHING_ISR( x )
  94:../freertos/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
  95:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 
  96:../freertos/portable/GCC/ARM_CM3/portmacro.h **** /* Critical section management. */
  97:../freertos/portable/GCC/ARM_CM3/portmacro.h **** extern void vPortEnterCritical( void );
  98:../freertos/portable/GCC/ARM_CM3/portmacro.h **** extern void vPortExitCritical( void );
  99:../freertos/portable/GCC/ARM_CM3/portmacro.h **** #define portSET_INTERRUPT_MASK_FROM_ISR()		ulPortRaiseBASEPRI()
 100:../freertos/portable/GCC/ARM_CM3/portmacro.h **** #define portCLEAR_INTERRUPT_MASK_FROM_ISR(x)	vPortSetBASEPRI(x)
 101:../freertos/portable/GCC/ARM_CM3/portmacro.h **** #define portDISABLE_INTERRUPTS()				vPortRaiseBASEPRI()
 102:../freertos/portable/GCC/ARM_CM3/portmacro.h **** #define portENABLE_INTERRUPTS()					vPortSetBASEPRI(0)
 103:../freertos/portable/GCC/ARM_CM3/portmacro.h **** #define portENTER_CRITICAL()					vPortEnterCritical()
 104:../freertos/portable/GCC/ARM_CM3/portmacro.h **** #define portEXIT_CRITICAL()						vPortExitCritical()
 105:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 
 106:../freertos/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 107:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 
 108:../freertos/portable/GCC/ARM_CM3/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 109:../freertos/portable/GCC/ARM_CM3/portmacro.h **** not necessary for to use this port.  They are defined so the common demo files
 110:../freertos/portable/GCC/ARM_CM3/portmacro.h **** (which build with all the ports) will build. */
 111:../freertos/portable/GCC/ARM_CM3/portmacro.h **** #define portTASK_FUNCTION_PROTO( vFunction, pvParameters ) void vFunction( void *pvParameters )
 112:../freertos/portable/GCC/ARM_CM3/portmacro.h **** #define portTASK_FUNCTION( vFunction, pvParameters ) void vFunction( void *pvParameters )
 113:../freertos/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 114:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 
 115:../freertos/portable/GCC/ARM_CM3/portmacro.h **** /* Tickless idle/low power functionality. */
 116:../freertos/portable/GCC/ARM_CM3/portmacro.h **** #ifndef portSUPPRESS_TICKS_AND_SLEEP
 117:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 118:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	#define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime ) vPortSuppressTicksAndSleep( xExpectedIdl
 119:../freertos/portable/GCC/ARM_CM3/portmacro.h **** #endif
 120:../freertos/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 121:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 
 122:../freertos/portable/GCC/ARM_CM3/portmacro.h **** /* Architecture specific optimisations. */
 123:../freertos/portable/GCC/ARM_CM3/portmacro.h **** #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 124:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	#define configUSE_PORT_OPTIMISED_TASK_SELECTION 1
ARM GAS  /tmp/ccMyq1Ea.s 			page 74


 125:../freertos/portable/GCC/ARM_CM3/portmacro.h **** #endif
 126:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 
 127:../freertos/portable/GCC/ARM_CM3/portmacro.h **** #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 128:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 
 129:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	/* Generic helper function. */
 130:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitma
 131:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	{
 132:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	uint8_t ucReturn;
 133:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 
 134:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 135:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 		return ucReturn;
 136:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	}
 137:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 
 138:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	/* Check the configuration. */
 139:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	#if( configMAX_PRIORITIES > 32 )
 140:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 		#error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIORITIES is 
 141:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	#endif
 142:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 
 143:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	/* Store/clear the ready priorities in a bit map. */
 144:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	#define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) |= ( 1UL 
 145:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	#define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) &= ~( 1UL 
 146:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 
 147:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	/*-----------------------------------------------------------*/
 148:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 
 149:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	#define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities ) uxTopPriority = ( 31UL - ( ui
 150:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 
 151:../freertos/portable/GCC/ARM_CM3/portmacro.h **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 152:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 
 153:../freertos/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 154:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 
 155:../freertos/portable/GCC/ARM_CM3/portmacro.h **** #ifdef configASSERT
 156:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	void vPortValidateInterruptPriority( void );
 157:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	#define portASSERT_IF_INTERRUPT_PRIORITY_INVALID() 	vPortValidateInterruptPriority()
 158:../freertos/portable/GCC/ARM_CM3/portmacro.h **** #endif
 159:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 
 160:../freertos/portable/GCC/ARM_CM3/portmacro.h **** /* portNOP() is not required by this port. */
 161:../freertos/portable/GCC/ARM_CM3/portmacro.h **** #define portNOP()
 162:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 
 163:../freertos/portable/GCC/ARM_CM3/portmacro.h **** #define portINLINE	__inline
 164:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 
 165:../freertos/portable/GCC/ARM_CM3/portmacro.h **** #ifndef portFORCE_INLINE
 166:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	#define portFORCE_INLINE inline __attribute__(( always_inline))
 167:../freertos/portable/GCC/ARM_CM3/portmacro.h **** #endif
 168:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 
 169:../freertos/portable/GCC/ARM_CM3/portmacro.h **** portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 170:../freertos/portable/GCC/ARM_CM3/portmacro.h **** {
 171:../freertos/portable/GCC/ARM_CM3/portmacro.h **** uint32_t ulCurrentInterrupt;
 172:../freertos/portable/GCC/ARM_CM3/portmacro.h **** BaseType_t xReturn;
 173:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 
 174:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	/* Obtain the number of the currently executing interrupt. */
 175:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 176:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 
 177:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	if( ulCurrentInterrupt == 0 )
 178:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	{
 179:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 		xReturn = pdFALSE;
 180:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	}
 181:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	else
ARM GAS  /tmp/ccMyq1Ea.s 			page 75


 182:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	{
 183:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 		xReturn = pdTRUE;
 184:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	}
 185:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 
 186:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	return xReturn;
 187:../freertos/portable/GCC/ARM_CM3/portmacro.h **** }
 188:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 
 189:../freertos/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 190:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 
 191:../freertos/portable/GCC/ARM_CM3/portmacro.h **** portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 192:../freertos/portable/GCC/ARM_CM3/portmacro.h **** {
 193:../freertos/portable/GCC/ARM_CM3/portmacro.h **** uint32_t ulNewBASEPRI;
 194:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 
 195:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	__asm volatile
 196:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	(
 197:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 		"	mov %0, %1												\n" \
 198:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 		"	msr basepri, %0											\n" \
 199:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 		"	isb														\n" \
 200:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 		"	dsb														\n" \
 201:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
 202:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	);
 203:../freertos/portable/GCC/ARM_CM3/portmacro.h **** }
 204:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 
 205:../freertos/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 206:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 
 207:../freertos/portable/GCC/ARM_CM3/portmacro.h **** portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
 1317              		.loc 2 207 34 view .LVU398
 1318              	.LBB46:
 208:../freertos/portable/GCC/ARM_CM3/portmacro.h **** {
 209:../freertos/portable/GCC/ARM_CM3/portmacro.h **** uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
 1319              		.loc 2 209 1 view .LVU399
 210:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 
 211:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	__asm volatile
 1320              		.loc 2 211 2 view .LVU400
 1321              	.LBE46:
 1322              	.LBE45:
 1323              	@ ../freertos/queue.c:958: {
 958:../freertos/queue.c **** BaseType_t xReturn;
 1324              		.loc 1 958 1 is_stmt 0 view .LVU401
 1325 0308 F8B5     		push	{r3, r4, r5, r6, r7, lr}	@
 1326              	.LCFI17:
 1327              		.cfi_def_cfa_offset 24
 1328              		.cfi_offset 3, -24
 1329              		.cfi_offset 4, -20
 1330              		.cfi_offset 5, -16
 1331              		.cfi_offset 6, -12
 1332              		.cfi_offset 7, -8
 1333              		.cfi_offset 14, -4
 1334              	@ ../freertos/queue.c:958: {
 958:../freertos/queue.c **** BaseType_t xReturn;
 1335              		.loc 1 958 1 view .LVU402
 1336 030a 1646     		mov	r6, r2	@ pxHigherPriorityTaskWoken, tmp145
 1337 030c 0446     		mov	r4, r0	@ xQueue, tmp143
 1338 030e 1A46     		mov	r2, r3	@ xCopyPosition, tmp146
 1339              	.LVL104:
 1340              	.LBB48:
 1341              	.LBB47:
ARM GAS  /tmp/ccMyq1Ea.s 			page 76


 1342              	@ ../freertos/portable/GCC/ARM_CM3/portmacro.h:211: 	__asm volatile
 1343              		.loc 2 211 2 view .LVU403
 1344              		.syntax unified
 1345              	@ 211 "../freertos/portable/GCC/ARM_CM3/portmacro.h" 1
 1346 0310 EFF31187 			mrs r7, basepri												@ ulOriginalBASEPRI
 1347 0314 4FF01003 		mov r3, #16													@ ulNewBASEPRI,
 1348 0318 83F31188 		msr basepri, r3												@ ulNewBASEPRI
 1349 031c BFF36F8F 		isb														
 1350 0320 BFF34F8F 		dsb														
 1351              	
 1352              	@ 0 "" 2
 1353              	.LVL105:
 212:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	(
 213:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 		"	mrs %0, basepri											\n" \
 214:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 		"	mov %1, %2												\n" \
 215:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 		"	msr basepri, %1											\n" \
 216:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 		"	isb														\n" \
 217:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 		"	dsb														\n" \
 218:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "
 219:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	);
 220:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 
 221:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	/* This return will not be reached but is necessary to prevent compiler
 222:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	warnings. */
 223:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	return ulOriginalBASEPRI;
 1354              		.loc 2 223 2 is_stmt 1 view .LVU404
 1355              		.loc 2 223 2 is_stmt 0 view .LVU405
 1356              		.thumb
 1357              		.syntax unified
 1358              	.LBE47:
 1359              	.LBE48:
 990:../freertos/queue.c **** 		{
 1360              		.loc 1 990 3 is_stmt 1 view .LVU406
 1361              	@ ../freertos/queue.c:990: 		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosit
 990:../freertos/queue.c **** 		{
 1362              		.loc 1 990 16 is_stmt 0 view .LVU407
 1363 0324 806B     		ldr	r0, [r0, #56]	@ _1, MEM[(struct Queue_t *)xQueue_12(D)].uxMessagesWaiting
 1364              	.LVL106:
 1365              	@ ../freertos/queue.c:990: 		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosit
 990:../freertos/queue.c **** 		{
 1366              		.loc 1 990 5 view .LVU408
 1367 0326 E36B     		ldr	r3, [r4, #60]	@ MEM[(struct Queue_t *)xQueue_12(D)].uxLength, MEM[(struct Queue_t *)xQueue_12(
 1368 0328 9842     		cmp	r0, r3	@ _1, MEM[(struct Queue_t *)xQueue_12(D)].uxLength
 1369 032a 01D3     		bcc	.L92		@,
 1370              	@ ../freertos/queue.c:990: 		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosit
 990:../freertos/queue.c **** 		{
 1371              		.loc 1 990 58 discriminator 1 view .LVU409
 1372 032c 022A     		cmp	r2, #2	@ xCopyPosition,
 1373 032e 1AD1     		bne	.L98		@,
 1374              	.L92:
 1375              	.LBB49:
 992:../freertos/queue.c **** 
 1376              		.loc 1 992 4 is_stmt 1 view .LVU410
 1377              	@ ../freertos/queue.c:992: 			const int8_t cTxLock = pxQueue->cTxLock;
 992:../freertos/queue.c **** 
 1378              		.loc 1 992 17 is_stmt 0 view .LVU411
 1379 0330 94F84550 		ldrb	r5, [r4, #69]	@ zero_extendqisi2	@ MEM[(struct Queue_t *)xQueue_12(D)].cTxLock, MEM[(struct Q
 1380              	@ ../freertos/queue.c:1001: 			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition )
ARM GAS  /tmp/ccMyq1Ea.s 			page 77


1001:../freertos/queue.c **** 
 1381              		.loc 1 1001 13 view .LVU412
 1382 0334 2046     		mov	r0, r4	@, xQueue
 1383              	@ ../freertos/queue.c:992: 			const int8_t cTxLock = pxQueue->cTxLock;
 992:../freertos/queue.c **** 
 1384              		.loc 1 992 17 view .LVU413
 1385 0336 6DB2     		sxtb	r5, r5	@ cTxLock, MEM[(struct Queue_t *)xQueue_12(D)].cTxLock
 1386              	.LVL107:
 994:../freertos/queue.c **** 
 1387              		.loc 1 994 39 is_stmt 1 view .LVU414
1001:../freertos/queue.c **** 
 1388              		.loc 1 1001 4 view .LVU415
 1389              	@ ../freertos/queue.c:1001: 			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition )
1001:../freertos/queue.c **** 
 1390              		.loc 1 1001 13 is_stmt 0 view .LVU416
 1391 0338 FFF76DFE 		bl	prvCopyDataToQueue		@
 1392              	.LVL108:
1005:../freertos/queue.c **** 			{
 1393              		.loc 1 1005 4 is_stmt 1 view .LVU417
 1394              	@ ../freertos/queue.c:1005: 			if( cTxLock == queueUNLOCKED )
1005:../freertos/queue.c **** 			{
 1395              		.loc 1 1005 6 is_stmt 0 view .LVU418
 1396 033c 6B1C     		adds	r3, r5, #1	@, cTxLock,
 1397 033e 0DD1     		bne	.L94		@,
1060:../freertos/queue.c **** 					{
 1398              		.loc 1 1060 6 is_stmt 1 view .LVU419
 1399              	@ ../freertos/queue.c:1060: 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == p
1060:../freertos/queue.c **** 					{
 1400              		.loc 1 1060 10 is_stmt 0 view .LVU420
 1401 0340 636A     		ldr	r3, [r4, #36]	@ _3, MEM[(struct Queue_t *)xQueue_12(D)].xTasksWaitingToReceive.uxNumberOfItems
 1402              	@ ../freertos/queue.c:1060: 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == p
1060:../freertos/queue.c **** 					{
 1403              		.loc 1 1060 8 view .LVU421
 1404 0342 3BB1     		cbz	r3, .L96	@ _3,
1062:../freertos/queue.c **** 						{
 1405              		.loc 1 1062 7 is_stmt 1 view .LVU422
 1406              	@ ../freertos/queue.c:1062: 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive 
1062:../freertos/queue.c **** 						{
 1407              		.loc 1 1062 11 is_stmt 0 view .LVU423
 1408 0344 04F12400 		add	r0, r4, #36	@, xQueue,
 1409 0348 FFF7FEFF 		bl	xTaskRemoveFromEventList		@
 1410              	.LVL109:
 1411              	@ ../freertos/queue.c:1062: 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive 
1062:../freertos/queue.c **** 						{
 1412              		.loc 1 1062 9 discriminator 1 view .LVU424
 1413 034c 10B1     		cbz	r0, .L96	@ tmp147,
1066:../freertos/queue.c **** 							{
 1414              		.loc 1 1066 8 is_stmt 1 view .LVU425
 1415              	@ ../freertos/queue.c:1066: 							if( pxHigherPriorityTaskWoken != NULL )
1066:../freertos/queue.c **** 							{
 1416              		.loc 1 1066 10 is_stmt 0 view .LVU426
 1417 034e 0EB1     		cbz	r6, .L96	@ pxHigherPriorityTaskWoken,
1068:../freertos/queue.c **** 							}
 1418              		.loc 1 1068 9 is_stmt 1 view .LVU427
 1419              	@ ../freertos/queue.c:1068: 								*pxHigherPriorityTaskWoken = pdTRUE;
1068:../freertos/queue.c **** 							}
 1420              		.loc 1 1068 36 is_stmt 0 view .LVU428
ARM GAS  /tmp/ccMyq1Ea.s 			page 78


 1421 0350 0123     		movs	r3, #1	@ tmp137,
 1422 0352 3360     		str	r3, [r6]	@ tmp137, *pxHigherPriorityTaskWoken_20(D)
 1423              	.LVL110:
 1424              	.L96:
 1425              	@ ../freertos/queue.c:1094: 			xReturn = pdPASS;
1094:../freertos/queue.c **** 		}
 1426              		.loc 1 1094 12 view .LVU429
 1427 0354 0120     		movs	r0, #1	@ <retval>,
 1428              	.LVL111:
 1429              	.L93:
1094:../freertos/queue.c **** 		}
 1430              		.loc 1 1094 12 view .LVU430
 1431              	.LBE49:
1102:../freertos/queue.c **** 
 1432              		.loc 1 1102 2 is_stmt 1 view .LVU431
 1433              	.LBB50:
 1434              	.LBI50:
 224:../freertos/portable/GCC/ARM_CM3/portmacro.h **** }
 225:../freertos/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 226:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 
 227:../freertos/portable/GCC/ARM_CM3/portmacro.h **** portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
 1435              		.loc 2 227 30 view .LVU432
 1436              	.LBB51:
 228:../freertos/portable/GCC/ARM_CM3/portmacro.h **** {
 229:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	__asm volatile
 1437              		.loc 2 229 2 view .LVU433
 1438              		.syntax unified
 1439              	@ 229 "../freertos/portable/GCC/ARM_CM3/portmacro.h" 1
 1440 0356 87F31188 			msr basepri, r7		@ ulOriginalBASEPRI
 1441              	@ 0 "" 2
 1442              	.LVL112:
 1443              		.loc 2 229 2 is_stmt 0 view .LVU434
 1444              		.thumb
 1445              		.syntax unified
 1446              	.LBE51:
 1447              	.LBE50:
1104:../freertos/queue.c **** }
 1448              		.loc 1 1104 2 is_stmt 1 view .LVU435
 1449              	@ ../freertos/queue.c:1105: }
1105:../freertos/queue.c **** /*-----------------------------------------------------------*/
 1450              		.loc 1 1105 1 is_stmt 0 view .LVU436
 1451 035a F8BD     		pop	{r3, r4, r5, r6, r7, pc}	@
 1452              	.LVL113:
 1453              	.L94:
 1454              	.LBB52:
1091:../freertos/queue.c **** 			}
 1455              		.loc 1 1091 5 is_stmt 1 view .LVU437
 1456              	@ ../freertos/queue.c:1091: 				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
1091:../freertos/queue.c **** 			}
 1457              		.loc 1 1091 45 is_stmt 0 view .LVU438
 1458 035c 0135     		adds	r5, r5, #1	@ tmp139, cTxLock,
 1459              	.LVL114:
 1460              	@ ../freertos/queue.c:1091: 				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
1091:../freertos/queue.c **** 			}
 1461              		.loc 1 1091 24 view .LVU439
 1462 035e 6DB2     		sxtb	r5, r5	@ _8, tmp139
 1463              	.LVL115:
ARM GAS  /tmp/ccMyq1Ea.s 			page 79


 1464              	@ ../freertos/queue.c:1091: 				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
1091:../freertos/queue.c **** 			}
 1465              		.loc 1 1091 22 view .LVU440
 1466 0360 84F84550 		strb	r5, [r4, #69]	@ _8, MEM[(struct Queue_t *)xQueue_12(D)].cTxLock
 1467 0364 F6E7     		b	.L96		@
 1468              	.LVL116:
 1469              	.L98:
1091:../freertos/queue.c **** 			}
 1470              		.loc 1 1091 22 view .LVU441
 1471              	.LBE52:
 1472              	@ ../freertos/queue.c:1099: 			xReturn = errQUEUE_FULL;
1099:../freertos/queue.c **** 		}
 1473              		.loc 1 1099 12 view .LVU442
 1474 0366 0020     		movs	r0, #0	@ <retval>,
 1475 0368 F5E7     		b	.L93		@
 1476              		.cfi_endproc
 1477              	.LFE14:
 1478              		.size	xQueueGenericSendFromISR, .-xQueueGenericSendFromISR
 1479              		.align	1
 1480              		.global	xQueueGiveFromISR
 1481              		.syntax unified
 1482              		.thumb
 1483              		.thumb_func
 1484              		.type	xQueueGiveFromISR, %function
 1485              	xQueueGiveFromISR:
 1486              	.LVL117:
 1487              	.LFB15:
1109:../freertos/queue.c **** BaseType_t xReturn;
 1488              		.loc 1 1109 1 is_stmt 1 view -0
 1489              		.cfi_startproc
 1490              		@ args = 0, pretend = 0, frame = 0
 1491              		@ frame_needed = 0, uses_anonymous_args = 0
1110:../freertos/queue.c **** UBaseType_t uxSavedInterruptStatus;
 1492              		.loc 1 1110 1 view .LVU444
1111:../freertos/queue.c **** Queue_t * const pxQueue = xQueue;
 1493              		.loc 1 1111 1 view .LVU445
1112:../freertos/queue.c **** 
 1494              		.loc 1 1112 1 view .LVU446
1120:../freertos/queue.c **** 
 1495              		.loc 1 1120 25 view .LVU447
1124:../freertos/queue.c **** 
 1496              		.loc 1 1124 42 view .LVU448
1129:../freertos/queue.c **** 
 1497              		.loc 1 1129 120 view .LVU449
1145:../freertos/queue.c **** 
 1498              		.loc 1 1145 44 view .LVU450
1147:../freertos/queue.c **** 	{
 1499              		.loc 1 1147 2 view .LVU451
 1500              	.LBB53:
 1501              	.LBI53:
 207:../freertos/portable/GCC/ARM_CM3/portmacro.h **** {
 1502              		.loc 2 207 34 view .LVU452
 1503              	.LBB54:
 209:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 
 1504              		.loc 2 209 1 view .LVU453
 211:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	(
 1505              		.loc 2 211 2 view .LVU454
ARM GAS  /tmp/ccMyq1Ea.s 			page 80


 1506              	.LBE54:
 1507              	.LBE53:
 1508              	@ ../freertos/queue.c:1109: {
1109:../freertos/queue.c **** BaseType_t xReturn;
 1509              		.loc 1 1109 1 is_stmt 0 view .LVU455
 1510 036a 38B5     		push	{r3, r4, r5, lr}	@
 1511              	.LCFI18:
 1512              		.cfi_def_cfa_offset 16
 1513              		.cfi_offset 3, -16
 1514              		.cfi_offset 4, -12
 1515              		.cfi_offset 5, -8
 1516              		.cfi_offset 14, -4
 1517              	@ ../freertos/queue.c:1109: {
1109:../freertos/queue.c **** BaseType_t xReturn;
 1518              		.loc 1 1109 1 view .LVU456
 1519 036c 0C46     		mov	r4, r1	@ pxHigherPriorityTaskWoken, tmp143
 1520              	.LBB56:
 1521              	.LBB55:
 1522              	@ ../freertos/portable/GCC/ARM_CM3/portmacro.h:211: 	__asm volatile
 211:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	(
 1523              		.loc 2 211 2 view .LVU457
 1524              		.syntax unified
 1525              	@ 211 "../freertos/portable/GCC/ARM_CM3/portmacro.h" 1
 1526 036e EFF31185 			mrs r5, basepri												@ ulOriginalBASEPRI
 1527 0372 4FF01003 		mov r3, #16													@ ulNewBASEPRI,
 1528 0376 83F31188 		msr basepri, r3												@ ulNewBASEPRI
 1529 037a BFF36F8F 		isb														
 1530 037e BFF34F8F 		dsb														
 1531              	
 1532              	@ 0 "" 2
 1533              	.LVL118:
 223:../freertos/portable/GCC/ARM_CM3/portmacro.h **** }
 1534              		.loc 2 223 2 is_stmt 1 view .LVU458
 223:../freertos/portable/GCC/ARM_CM3/portmacro.h **** }
 1535              		.loc 2 223 2 is_stmt 0 view .LVU459
 1536              		.thumb
 1537              		.syntax unified
 1538              	.LBE55:
 1539              	.LBE56:
 1540              	.LBB57:
1149:../freertos/queue.c **** 
 1541              		.loc 1 1149 3 is_stmt 1 view .LVU460
 1542              	@ ../freertos/queue.c:1149: 		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1149:../freertos/queue.c **** 
 1543              		.loc 1 1149 21 is_stmt 0 view .LVU461
 1544 0382 826B     		ldr	r2, [r0, #56]	@ uxMessagesWaiting, MEM[(struct Queue_t *)xQueue_12(D)].uxMessagesWaiting
 1545              	.LVL119:
1154:../freertos/queue.c **** 		{
 1546              		.loc 1 1154 3 is_stmt 1 view .LVU462
 1547              	@ ../freertos/queue.c:1154: 		if( uxMessagesWaiting < pxQueue->uxLength )
1154:../freertos/queue.c **** 		{
 1548              		.loc 1 1154 5 is_stmt 0 view .LVU463
 1549 0384 C36B     		ldr	r3, [r0, #60]	@ MEM[(struct Queue_t *)xQueue_12(D)].uxLength, MEM[(struct Queue_t *)xQueue_12(
 1550 0386 9342     		cmp	r3, r2	@ MEM[(struct Queue_t *)xQueue_12(D)].uxLength, uxMessagesWaiting
 1551 0388 18D9     		bls	.L111		@,
 1552              	.LBB58:
1156:../freertos/queue.c **** 
ARM GAS  /tmp/ccMyq1Ea.s 			page 81


 1553              		.loc 1 1156 4 is_stmt 1 view .LVU464
 1554              	@ ../freertos/queue.c:1156: 			const int8_t cTxLock = pxQueue->cTxLock;
1156:../freertos/queue.c **** 
 1555              		.loc 1 1156 17 is_stmt 0 view .LVU465
 1556 038a 90F84510 		ldrb	r1, [r0, #69]	@ zero_extendqisi2	@ MEM[(struct Queue_t *)xQueue_12(D)].cTxLock, MEM[(struct Q
 1557              	.LVL120:
 1558              	@ ../freertos/queue.c:1166: 			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
1166:../freertos/queue.c **** 
 1559              		.loc 1 1166 51 view .LVU466
 1560 038e 0132     		adds	r2, r2, #1	@ _2, uxMessagesWaiting,
 1561              	.LVL121:
 1562              	@ ../freertos/queue.c:1170: 			if( cTxLock == queueUNLOCKED )
1170:../freertos/queue.c **** 			{
 1563              		.loc 1 1170 6 view .LVU467
 1564 0390 FF29     		cmp	r1, #255	@ MEM[(struct Queue_t *)xQueue_12(D)].cTxLock,
 1565              	@ ../freertos/queue.c:1156: 			const int8_t cTxLock = pxQueue->cTxLock;
1156:../freertos/queue.c **** 
 1566              		.loc 1 1156 17 view .LVU468
 1567 0392 4BB2     		sxtb	r3, r1	@ cTxLock, MEM[(struct Queue_t *)xQueue_12(D)].cTxLock
 1568              	.LVL122:
1158:../freertos/queue.c **** 
 1569              		.loc 1 1158 39 is_stmt 1 view .LVU469
1166:../freertos/queue.c **** 
 1570              		.loc 1 1166 4 view .LVU470
 1571              	@ ../freertos/queue.c:1166: 			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
1166:../freertos/queue.c **** 
 1572              		.loc 1 1166 31 is_stmt 0 view .LVU471
 1573 0394 8263     		str	r2, [r0, #56]	@ _2, MEM[(struct Queue_t *)xQueue_12(D)].uxMessagesWaiting
1170:../freertos/queue.c **** 			{
 1574              		.loc 1 1170 4 is_stmt 1 view .LVU472
 1575              	@ ../freertos/queue.c:1170: 			if( cTxLock == queueUNLOCKED )
1170:../freertos/queue.c **** 			{
 1576              		.loc 1 1170 6 is_stmt 0 view .LVU473
 1577 0396 0CD1     		bne	.L107		@,
1225:../freertos/queue.c **** 					{
 1578              		.loc 1 1225 6 is_stmt 1 view .LVU474
 1579              	@ ../freertos/queue.c:1225: 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == p
1225:../freertos/queue.c **** 					{
 1580              		.loc 1 1225 10 is_stmt 0 view .LVU475
 1581 0398 436A     		ldr	r3, [r0, #36]	@ _3, MEM[(struct Queue_t *)xQueue_12(D)].xTasksWaitingToReceive.uxNumberOfItems
 1582              	.LVL123:
 1583              	@ ../freertos/queue.c:1225: 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == p
1225:../freertos/queue.c **** 					{
 1584              		.loc 1 1225 8 view .LVU476
 1585 039a 33B1     		cbz	r3, .L109	@ _3,
1227:../freertos/queue.c **** 						{
 1586              		.loc 1 1227 7 is_stmt 1 view .LVU477
 1587              	@ ../freertos/queue.c:1227: 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive 
1227:../freertos/queue.c **** 						{
 1588              		.loc 1 1227 11 is_stmt 0 view .LVU478
 1589 039c 2430     		adds	r0, r0, #36	@, xQueue,
 1590              	.LVL124:
1227:../freertos/queue.c **** 						{
 1591              		.loc 1 1227 11 view .LVU479
 1592 039e FFF7FEFF 		bl	xTaskRemoveFromEventList		@
 1593              	.LVL125:
 1594              	@ ../freertos/queue.c:1227: 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive 
ARM GAS  /tmp/ccMyq1Ea.s 			page 82


1227:../freertos/queue.c **** 						{
 1595              		.loc 1 1227 9 discriminator 1 view .LVU480
 1596 03a2 10B1     		cbz	r0, .L109	@ tmp144,
1231:../freertos/queue.c **** 							{
 1597              		.loc 1 1231 8 is_stmt 1 view .LVU481
 1598              	@ ../freertos/queue.c:1231: 							if( pxHigherPriorityTaskWoken != NULL )
1231:../freertos/queue.c **** 							{
 1599              		.loc 1 1231 10 is_stmt 0 view .LVU482
 1600 03a4 0CB1     		cbz	r4, .L109	@ pxHigherPriorityTaskWoken,
1233:../freertos/queue.c **** 							}
 1601              		.loc 1 1233 9 is_stmt 1 view .LVU483
 1602              	@ ../freertos/queue.c:1233: 								*pxHigherPriorityTaskWoken = pdTRUE;
1233:../freertos/queue.c **** 							}
 1603              		.loc 1 1233 36 is_stmt 0 view .LVU484
 1604 03a6 0123     		movs	r3, #1	@ tmp136,
 1605 03a8 2360     		str	r3, [r4]	@ tmp136, *pxHigherPriorityTaskWoken_19(D)
 1606              	.L109:
 1607              	@ ../freertos/queue.c:1259: 			xReturn = pdPASS;
1259:../freertos/queue.c **** 		}
 1608              		.loc 1 1259 12 view .LVU485
 1609 03aa 0120     		movs	r0, #1	@ <retval>,
 1610              	.LVL126:
 1611              	.L106:
1259:../freertos/queue.c **** 		}
 1612              		.loc 1 1259 12 view .LVU486
 1613              	.LBE58:
 1614              	.LBE57:
1267:../freertos/queue.c **** 
 1615              		.loc 1 1267 2 is_stmt 1 view .LVU487
 1616              	.LBB60:
 1617              	.LBI60:
 227:../freertos/portable/GCC/ARM_CM3/portmacro.h **** {
 1618              		.loc 2 227 30 view .LVU488
 1619              	.LBB61:
 1620              		.loc 2 229 2 view .LVU489
 1621              		.syntax unified
 1622              	@ 229 "../freertos/portable/GCC/ARM_CM3/portmacro.h" 1
 1623 03ac 85F31188 			msr basepri, r5		@ ulOriginalBASEPRI
 1624              	@ 0 "" 2
 1625              	.LVL127:
 1626              		.loc 2 229 2 is_stmt 0 view .LVU490
 1627              		.thumb
 1628              		.syntax unified
 1629              	.LBE61:
 1630              	.LBE60:
1269:../freertos/queue.c **** }
 1631              		.loc 1 1269 2 is_stmt 1 view .LVU491
 1632              	@ ../freertos/queue.c:1270: }
1270:../freertos/queue.c **** /*-----------------------------------------------------------*/
 1633              		.loc 1 1270 1 is_stmt 0 view .LVU492
 1634 03b0 38BD     		pop	{r3, r4, r5, pc}	@
 1635              	.LVL128:
 1636              	.L107:
 1637              	.LBB62:
 1638              	.LBB59:
1256:../freertos/queue.c **** 			}
 1639              		.loc 1 1256 5 is_stmt 1 view .LVU493
ARM GAS  /tmp/ccMyq1Ea.s 			page 83


 1640              	@ ../freertos/queue.c:1256: 				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
1256:../freertos/queue.c **** 			}
 1641              		.loc 1 1256 45 is_stmt 0 view .LVU494
 1642 03b2 0133     		adds	r3, r3, #1	@ tmp138, cTxLock,
 1643              	.LVL129:
 1644              	@ ../freertos/queue.c:1256: 				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
1256:../freertos/queue.c **** 			}
 1645              		.loc 1 1256 24 view .LVU495
 1646 03b4 5BB2     		sxtb	r3, r3	@ _8, tmp138
 1647              	.LVL130:
 1648              	@ ../freertos/queue.c:1256: 				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
1256:../freertos/queue.c **** 			}
 1649              		.loc 1 1256 22 view .LVU496
 1650 03b6 80F84530 		strb	r3, [r0, #69]	@ _8, MEM[(struct Queue_t *)xQueue_12(D)].cTxLock
 1651 03ba F6E7     		b	.L109		@
 1652              	.LVL131:
 1653              	.L111:
1256:../freertos/queue.c **** 			}
 1654              		.loc 1 1256 22 view .LVU497
 1655              	.LBE59:
 1656              	@ ../freertos/queue.c:1264: 			xReturn = errQUEUE_FULL;
1264:../freertos/queue.c **** 		}
 1657              		.loc 1 1264 12 view .LVU498
 1658 03bc 0020     		movs	r0, #0	@ <retval>,
 1659              	.LVL132:
1264:../freertos/queue.c **** 		}
 1660              		.loc 1 1264 12 view .LVU499
 1661 03be F5E7     		b	.L106		@
 1662              	.LBE62:
 1663              		.cfi_endproc
 1664              	.LFE15:
 1665              		.size	xQueueGiveFromISR, .-xQueueGiveFromISR
 1666              		.align	1
 1667              		.global	xQueueReceive
 1668              		.syntax unified
 1669              		.thumb
 1670              		.thumb_func
 1671              		.type	xQueueReceive, %function
 1672              	xQueueReceive:
 1673              	.LVL133:
 1674              	.LFB16:
1274:../freertos/queue.c **** BaseType_t xEntryTimeSet = pdFALSE;
 1675              		.loc 1 1274 1 is_stmt 1 view -0
 1676              		.cfi_startproc
 1677              		@ args = 0, pretend = 0, frame = 16
 1678              		@ frame_needed = 0, uses_anonymous_args = 0
1275:../freertos/queue.c **** TimeOut_t xTimeOut;
 1679              		.loc 1 1275 1 view .LVU501
1276:../freertos/queue.c **** Queue_t * const pxQueue = xQueue;
 1680              		.loc 1 1276 1 view .LVU502
1277:../freertos/queue.c **** 
 1681              		.loc 1 1277 1 view .LVU503
 1682              	@ ../freertos/queue.c:1274: {
1274:../freertos/queue.c **** BaseType_t xEntryTimeSet = pdFALSE;
 1683              		.loc 1 1274 1 is_stmt 0 view .LVU504
 1684 03c0 2DE9FF41 		push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}	@
 1685              	.LCFI19:
ARM GAS  /tmp/ccMyq1Ea.s 			page 84


 1686              		.cfi_def_cfa_offset 40
 1687              		.cfi_offset 4, -24
 1688              		.cfi_offset 5, -20
 1689              		.cfi_offset 6, -16
 1690              		.cfi_offset 7, -12
 1691              		.cfi_offset 8, -8
 1692              		.cfi_offset 14, -4
 1693              	@ ../freertos/queue.c:1275: BaseType_t xEntryTimeSet = pdFALSE;
1275:../freertos/queue.c **** TimeOut_t xTimeOut;
 1694              		.loc 1 1275 12 view .LVU505
 1695 03c4 0027     		movs	r7, #0	@ xEntryTimeSet,
 1696              	@ ../freertos/queue.c:1274: {
1274:../freertos/queue.c **** BaseType_t xEntryTimeSet = pdFALSE;
 1697              		.loc 1 1274 1 view .LVU506
 1698 03c6 0446     		mov	r4, r0	@ xQueue, tmp157
 1699              	.LVL134:
1274:../freertos/queue.c **** BaseType_t xEntryTimeSet = pdFALSE;
 1700              		.loc 1 1274 1 view .LVU507
 1701 03c8 0E46     		mov	r6, r1	@ pvBuffer, tmp158
 1702              	@ ../freertos/queue.c:1364: 		prvLockQueue( pxQueue );
1364:../freertos/queue.c **** 
 1703              		.loc 1 1364 3 discriminator 1 view .LVU508
 1704 03ca B846     		mov	r8, r7	@ tmp155, xEntryTimeSet
 1705              	@ ../freertos/queue.c:1274: {
1274:../freertos/queue.c **** BaseType_t xEntryTimeSet = pdFALSE;
 1706              		.loc 1 1274 1 view .LVU509
 1707 03cc 0192     		str	r2, [sp, #4]	@ xTicksToWait, xTicksToWait
 1708              	.LVL135:
 1709              	.L119:
1280:../freertos/queue.c **** 
 1710              		.loc 1 1280 29 is_stmt 1 view .LVU510
1284:../freertos/queue.c **** 
 1711              		.loc 1 1284 100 view .LVU511
1289:../freertos/queue.c **** 	}
 1712              		.loc 1 1289 104 view .LVU512
1297:../freertos/queue.c **** 	{
 1713              		.loc 1 1297 2 view .LVU513
1299:../freertos/queue.c **** 		{
 1714              		.loc 1 1299 3 view .LVU514
 1715 03ce FFF7FEFF 		bl	vPortEnterCritical		@
 1716              	.LVL136:
 1717              	.LBB63:
1301:../freertos/queue.c **** 
 1718              		.loc 1 1301 4 view .LVU515
 1719              	@ ../freertos/queue.c:1301: 			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1301:../freertos/queue.c **** 
 1720              		.loc 1 1301 22 is_stmt 0 view .LVU516
 1721 03d2 A56B     		ldr	r5, [r4, #56]	@ uxMessagesWaiting, MEM[(struct Queue_t *)xQueue_25(D)].uxMessagesWaiting
 1722              	.LVL137:
1305:../freertos/queue.c **** 			{
 1723              		.loc 1 1305 4 is_stmt 1 view .LVU517
 1724              	@ ../freertos/queue.c:1305: 			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1305:../freertos/queue.c **** 			{
 1725              		.loc 1 1305 6 is_stmt 0 view .LVU518
 1726 03d4 E5B1     		cbz	r5, .L120	@ uxMessagesWaiting,
1308:../freertos/queue.c **** 				traceQUEUE_RECEIVE( pxQueue );
 1727              		.loc 1 1308 5 is_stmt 1 view .LVU519
ARM GAS  /tmp/ccMyq1Ea.s 			page 85


 1728 03d6 3146     		mov	r1, r6	@, pvBuffer
 1729 03d8 2046     		mov	r0, r4	@, xQueue
 1730              	@ ../freertos/queue.c:1310: 				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
1310:../freertos/queue.c **** 
 1731              		.loc 1 1310 52 is_stmt 0 view .LVU520
 1732 03da 013D     		subs	r5, r5, #1	@ _1, uxMessagesWaiting,
 1733              	.LVL138:
 1734              	@ ../freertos/queue.c:1308: 				prvCopyDataFromQueue( pxQueue, pvBuffer );
1308:../freertos/queue.c **** 				traceQUEUE_RECEIVE( pxQueue );
 1735              		.loc 1 1308 5 view .LVU521
 1736 03dc FFF74EFE 		bl	prvCopyDataFromQueue		@
 1737              	.LVL139:
1309:../freertos/queue.c **** 				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 1738              		.loc 1 1309 34 is_stmt 1 view .LVU522
1310:../freertos/queue.c **** 
 1739              		.loc 1 1310 5 view .LVU523
 1740              	@ ../freertos/queue.c:1310: 				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
1310:../freertos/queue.c **** 
 1741              		.loc 1 1310 32 is_stmt 0 view .LVU524
 1742 03e0 A563     		str	r5, [r4, #56]	@ _1, MEM[(struct Queue_t *)xQueue_25(D)].uxMessagesWaiting
1315:../freertos/queue.c **** 				{
 1743              		.loc 1 1315 5 is_stmt 1 view .LVU525
 1744              	@ ../freertos/queue.c:1315: 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFAL
1315:../freertos/queue.c **** 				{
 1745              		.loc 1 1315 9 is_stmt 0 view .LVU526
 1746 03e2 2369     		ldr	r3, [r4, #16]	@ _2, MEM[(struct Queue_t *)xQueue_25(D)].xTasksWaitingToSend.uxNumberOfItems
 1747              	@ ../freertos/queue.c:1315: 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFAL
1315:../freertos/queue.c **** 				{
 1748              		.loc 1 1315 7 view .LVU527
 1749 03e4 73B1     		cbz	r3, .L122	@ _2,
1317:../freertos/queue.c **** 					{
 1750              		.loc 1 1317 6 is_stmt 1 view .LVU528
 1751              	@ ../freertos/queue.c:1317: 					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) 
1317:../freertos/queue.c **** 					{
 1752              		.loc 1 1317 10 is_stmt 0 view .LVU529
 1753 03e6 04F11000 		add	r0, r4, #16	@, xQueue,
 1754 03ea FFF7FEFF 		bl	xTaskRemoveFromEventList		@
 1755              	.LVL140:
 1756              	@ ../freertos/queue.c:1317: 					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) 
1317:../freertos/queue.c **** 					{
 1757              		.loc 1 1317 8 discriminator 1 view .LVU530
 1758 03ee 48B1     		cbz	r0, .L122	@ tmp159,
1319:../freertos/queue.c **** 					}
 1759              		.loc 1 1319 7 is_stmt 1 view .LVU531
 1760 03f0 4FF0E023 		mov	r3, #-536813568	@ tmp133,
 1761 03f4 4FF08052 		mov	r2, #268435456	@ tmp134,
 1762 03f8 C3F8042D 		str	r2, [r3, #3332]	@ tmp134, MEM[(volatile uint32_t *)3758157060B]
1319:../freertos/queue.c **** 					}
 1763              		.loc 1 1319 7 view .LVU532
 1764              		.syntax unified
 1765              	@ 1319 "../freertos/queue.c" 1
 1766 03fc BFF34F8F 		dsb	
 1767              	@ 0 "" 2
1319:../freertos/queue.c **** 					}
 1768              		.loc 1 1319 7 view .LVU533
 1769              	@ 1319 "../freertos/queue.c" 1
 1770 0400 BFF36F8F 		isb
ARM GAS  /tmp/ccMyq1Ea.s 			page 86


 1771              	@ 0 "" 2
1319:../freertos/queue.c **** 					}
 1772              		.loc 1 1319 39 view .LVU534
 1773              		.thumb
 1774              		.syntax unified
 1775              	.L122:
1328:../freertos/queue.c **** 				}
 1776              		.loc 1 1328 30 view .LVU535
1331:../freertos/queue.c **** 				return pdPASS;
 1777              		.loc 1 1331 5 view .LVU536
 1778 0404 FFF7FEFF 		bl	vPortExitCritical		@
 1779              	.LVL141:
1332:../freertos/queue.c **** 			}
 1780              		.loc 1 1332 5 view .LVU537
 1781              	@ ../freertos/queue.c:1332: 				return pdPASS;
1332:../freertos/queue.c **** 			}
 1782              		.loc 1 1332 12 is_stmt 0 view .LVU538
 1783 0408 0120     		movs	r0, #1	@ <retval>,
 1784              	.LVL142:
 1785              	.L118:
1332:../freertos/queue.c **** 			}
 1786              		.loc 1 1332 12 view .LVU539
 1787              	.LBE63:
 1788              	@ ../freertos/queue.c:1411: }
1411:../freertos/queue.c **** /*-----------------------------------------------------------*/
 1789              		.loc 1 1411 1 view .LVU540
 1790 040a 04B0     		add	sp, sp, #16	@,,
 1791              	.LCFI20:
 1792              		.cfi_remember_state
 1793              		.cfi_def_cfa_offset 24
 1794              		@ sp needed	@
 1795 040c BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}	@
 1796              	.LVL143:
 1797              	.L120:
 1798              	.LCFI21:
 1799              		.cfi_restore_state
 1800              	.LBB64:
1336:../freertos/queue.c **** 				{
 1801              		.loc 1 1336 5 is_stmt 1 view .LVU541
 1802              	@ ../freertos/queue.c:1336: 				if( xTicksToWait == ( TickType_t ) 0 )
1336:../freertos/queue.c **** 				{
 1803              		.loc 1 1336 7 is_stmt 0 view .LVU542
 1804 0410 019B     		ldr	r3, [sp, #4]	@ xTicksToWait, xTicksToWait
 1805 0412 1BB9     		cbnz	r3, .L125	@ xTicksToWait,
1340:../freertos/queue.c **** 					traceQUEUE_RECEIVE_FAILED( pxQueue );
 1806              		.loc 1 1340 6 is_stmt 1 view .LVU543
 1807 0414 FFF7FEFF 		bl	vPortExitCritical		@
 1808              	.LVL144:
1341:../freertos/queue.c **** 					return errQUEUE_EMPTY;
 1809              		.loc 1 1341 42 view .LVU544
1342:../freertos/queue.c **** 				}
 1810              		.loc 1 1342 6 view .LVU545
 1811              	.L126:
 1812              	@ ../freertos/queue.c:1342: 					return errQUEUE_EMPTY;
1342:../freertos/queue.c **** 				}
 1813              		.loc 1 1342 13 is_stmt 0 view .LVU546
 1814 0418 0020     		movs	r0, #0	@ <retval>,
ARM GAS  /tmp/ccMyq1Ea.s 			page 87


 1815 041a F6E7     		b	.L118		@
 1816              	.LVL145:
 1817              	.L125:
1344:../freertos/queue.c **** 				{
 1818              		.loc 1 1344 10 is_stmt 1 view .LVU547
 1819              	@ ../freertos/queue.c:1344: 				else if( xEntryTimeSet == pdFALSE )
1344:../freertos/queue.c **** 				{
 1820              		.loc 1 1344 12 is_stmt 0 view .LVU548
 1821 041c 17B9     		cbnz	r7, .L127	@ xEntryTimeSet,
1348:../freertos/queue.c **** 					xEntryTimeSet = pdTRUE;
 1822              		.loc 1 1348 6 is_stmt 1 view .LVU549
 1823 041e 02A8     		add	r0, sp, #8	@ tmp165,,
 1824 0420 FFF7FEFF 		bl	vTaskInternalSetTimeOutState		@
 1825              	.LVL146:
1349:../freertos/queue.c **** 				}
 1826              		.loc 1 1349 6 view .LVU550
 1827              	.L127:
1354:../freertos/queue.c **** 				}
 1828              		.loc 1 1354 30 view .LVU551
 1829              	.LBE64:
1358:../freertos/queue.c **** 
 1830              		.loc 1 1358 3 view .LVU552
 1831 0424 FFF7FEFF 		bl	vPortExitCritical		@
 1832              	.LVL147:
1363:../freertos/queue.c **** 		prvLockQueue( pxQueue );
 1833              		.loc 1 1363 3 view .LVU553
 1834 0428 FFF7FEFF 		bl	vTaskSuspendAll		@
 1835              	.LVL148:
1364:../freertos/queue.c **** 
 1836              		.loc 1 1364 3 view .LVU554
 1837 042c FFF7FEFF 		bl	vPortEnterCritical		@
 1838              	.LVL149:
1364:../freertos/queue.c **** 
 1839              		.loc 1 1364 3 discriminator 1 view .LVU555
 1840 0430 94F84430 		ldrb	r3, [r4, #68]	@ zero_extendqisi2	@ MEM[(struct Queue_t *)xQueue_25(D)].cRxLock, MEM[(struct Q
 1841 0434 FF2B     		cmp	r3, #255	@ MEM[(struct Queue_t *)xQueue_25(D)].cRxLock,
1364:../freertos/queue.c **** 
 1842              		.loc 1 1364 3 discriminator 1 view .LVU556
 1843 0436 08BF     		it	eq
 1844 0438 84F84480 		strbeq	r8, [r4, #68]	@ tmp155, MEM[(struct Queue_t *)xQueue_25(D)].cRxLock
1364:../freertos/queue.c **** 
 1845              		.loc 1 1364 3 discriminator 3 view .LVU557
 1846 043c 94F84530 		ldrb	r3, [r4, #69]	@ zero_extendqisi2	@ MEM[(struct Queue_t *)xQueue_25(D)].cTxLock, MEM[(struct Q
 1847 0440 FF2B     		cmp	r3, #255	@ MEM[(struct Queue_t *)xQueue_25(D)].cTxLock,
1364:../freertos/queue.c **** 
 1848              		.loc 1 1364 3 discriminator 4 view .LVU558
 1849 0442 08BF     		it	eq
 1850 0444 84F84580 		strbeq	r8, [r4, #69]	@ tmp155, MEM[(struct Queue_t *)xQueue_25(D)].cTxLock
1364:../freertos/queue.c **** 
 1851              		.loc 1 1364 3 discriminator 6 view .LVU559
 1852 0448 FFF7FEFF 		bl	vPortExitCritical		@
 1853              	.LVL150:
1367:../freertos/queue.c **** 		{
 1854              		.loc 1 1367 3 view .LVU560
 1855              	@ ../freertos/queue.c:1367: 		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1367:../freertos/queue.c **** 		{
 1856              		.loc 1 1367 7 is_stmt 0 view .LVU561
ARM GAS  /tmp/ccMyq1Ea.s 			page 88


 1857 044c 01A9     		add	r1, sp, #4	@ tmp166,,
 1858 044e 02A8     		add	r0, sp, #8	@ tmp167,,
 1859 0450 FFF7FEFF 		bl	xTaskCheckForTimeOut		@
 1860              	.LVL151:
 1861              	@ ../freertos/queue.c:1367: 		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1367:../freertos/queue.c **** 		{
 1862              		.loc 1 1367 5 discriminator 1 view .LVU562
 1863 0454 00BB     		cbnz	r0, .L130	@ tmp160,
1371:../freertos/queue.c **** 			{
 1864              		.loc 1 1371 4 is_stmt 1 view .LVU563
 1865              	@ ../freertos/queue.c:1371: 			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1371:../freertos/queue.c **** 			{
 1866              		.loc 1 1371 8 is_stmt 0 view .LVU564
 1867 0456 2046     		mov	r0, r4	@, xQueue
 1868 0458 FFF7D2FD 		bl	prvIsQueueEmpty		@
 1869              	.LVL152:
 1870              	@ ../freertos/queue.c:1371: 			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1371:../freertos/queue.c **** 			{
 1871              		.loc 1 1371 6 discriminator 1 view .LVU565
 1872 045c B0B1     		cbz	r0, .L131	@ tmp161,
1373:../freertos/queue.c **** 				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 1873              		.loc 1 1373 46 is_stmt 1 view .LVU566
1374:../freertos/queue.c **** 				prvUnlockQueue( pxQueue );
 1874              		.loc 1 1374 5 view .LVU567
 1875 045e 0199     		ldr	r1, [sp, #4]	@, xTicksToWait
 1876 0460 04F12400 		add	r0, r4, #36	@, xQueue,
 1877 0464 FFF7FEFF 		bl	vTaskPlaceOnEventList		@
 1878              	.LVL153:
1375:../freertos/queue.c **** 				if( xTaskResumeAll() == pdFALSE )
 1879              		.loc 1 1375 5 view .LVU568
 1880 0468 2046     		mov	r0, r4	@, xQueue
 1881 046a FFF71BFE 		bl	prvUnlockQueue		@
 1882              	.LVL154:
1376:../freertos/queue.c **** 				{
 1883              		.loc 1 1376 5 view .LVU569
 1884              	@ ../freertos/queue.c:1376: 				if( xTaskResumeAll() == pdFALSE )
1376:../freertos/queue.c **** 				{
 1885              		.loc 1 1376 9 is_stmt 0 view .LVU570
 1886 046e FFF7FEFF 		bl	xTaskResumeAll		@
 1887              	.LVL155:
 1888              	@ ../freertos/queue.c:1376: 				if( xTaskResumeAll() == pdFALSE )
1376:../freertos/queue.c **** 				{
 1889              		.loc 1 1376 7 discriminator 1 view .LVU571
 1890 0472 48B9     		cbnz	r0, .L133	@ tmp162,
1378:../freertos/queue.c **** 				}
 1891              		.loc 1 1378 6 is_stmt 1 view .LVU572
 1892 0474 4FF0E023 		mov	r3, #-536813568	@ tmp150,
 1893 0478 4FF08052 		mov	r2, #268435456	@ tmp151,
 1894 047c C3F8042D 		str	r2, [r3, #3332]	@ tmp151, MEM[(volatile uint32_t *)3758157060B]
1378:../freertos/queue.c **** 				}
 1895              		.loc 1 1378 6 view .LVU573
 1896              		.syntax unified
 1897              	@ 1378 "../freertos/queue.c" 1
 1898 0480 BFF34F8F 		dsb	
 1899              	@ 0 "" 2
1378:../freertos/queue.c **** 				}
 1900              		.loc 1 1378 6 view .LVU574
ARM GAS  /tmp/ccMyq1Ea.s 			page 89


 1901              	@ 1378 "../freertos/queue.c" 1
 1902 0484 BFF36F8F 		isb
 1903              	@ 0 "" 2
1378:../freertos/queue.c **** 				}
 1904              		.loc 1 1378 28 view .LVU575
 1905              		.thumb
 1906              		.syntax unified
 1907              	.L133:
 1908              	@ ../freertos/queue.c:1274: {
1274:../freertos/queue.c **** BaseType_t xEntryTimeSet = pdFALSE;
 1909              		.loc 1 1274 1 is_stmt 0 view .LVU576
 1910 0488 0127     		movs	r7, #1	@ xEntryTimeSet,
 1911 048a A0E7     		b	.L119		@
 1912              	.L131:
1389:../freertos/queue.c **** 				( void ) xTaskResumeAll();
 1913              		.loc 1 1389 5 is_stmt 1 view .LVU577
 1914 048c 2046     		mov	r0, r4	@, xQueue
 1915 048e FFF709FE 		bl	prvUnlockQueue		@
 1916              	.LVL156:
1390:../freertos/queue.c **** 			}
 1917              		.loc 1 1390 5 view .LVU578
 1918              	@ ../freertos/queue.c:1390: 				( void ) xTaskResumeAll();
1390:../freertos/queue.c **** 			}
 1919              		.loc 1 1390 14 is_stmt 0 view .LVU579
 1920 0492 FFF7FEFF 		bl	xTaskResumeAll		@
 1921              	.LVL157:
 1922 0496 F7E7     		b	.L133		@
 1923              	.L130:
1397:../freertos/queue.c **** 			( void ) xTaskResumeAll();
 1924              		.loc 1 1397 4 is_stmt 1 view .LVU580
 1925 0498 2046     		mov	r0, r4	@, xQueue
 1926 049a FFF703FE 		bl	prvUnlockQueue		@
 1927              	.LVL158:
1398:../freertos/queue.c **** 
 1928              		.loc 1 1398 4 view .LVU581
 1929              	@ ../freertos/queue.c:1398: 			( void ) xTaskResumeAll();
1398:../freertos/queue.c **** 
 1930              		.loc 1 1398 13 is_stmt 0 view .LVU582
 1931 049e FFF7FEFF 		bl	xTaskResumeAll		@
 1932              	.LVL159:
1400:../freertos/queue.c **** 			{
 1933              		.loc 1 1400 4 is_stmt 1 view .LVU583
 1934              	@ ../freertos/queue.c:1400: 			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1400:../freertos/queue.c **** 			{
 1935              		.loc 1 1400 8 is_stmt 0 view .LVU584
 1936 04a2 2046     		mov	r0, r4	@, xQueue
 1937 04a4 FFF7ACFD 		bl	prvIsQueueEmpty		@
 1938              	.LVL160:
 1939              	@ ../freertos/queue.c:1400: 			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1400:../freertos/queue.c **** 			{
 1940              		.loc 1 1400 6 discriminator 1 view .LVU585
 1941 04a8 0028     		cmp	r0, #0	@ tmp163
 1942 04aa EDD0     		beq	.L133	@
 1943 04ac B4E7     		b	.L126		@
 1944              		.cfi_endproc
 1945              	.LFE16:
 1946              		.size	xQueueReceive, .-xQueueReceive
ARM GAS  /tmp/ccMyq1Ea.s 			page 90


 1947              		.align	1
 1948              		.global	xQueueSemaphoreTake
 1949              		.syntax unified
 1950              		.thumb
 1951              		.thumb_func
 1952              		.type	xQueueSemaphoreTake, %function
 1953              	xQueueSemaphoreTake:
 1954              	.LVL161:
 1955              	.LFB17:
1415:../freertos/queue.c **** BaseType_t xEntryTimeSet = pdFALSE;
 1956              		.loc 1 1415 1 is_stmt 1 view -0
 1957              		.cfi_startproc
 1958              		@ args = 0, pretend = 0, frame = 16
 1959              		@ frame_needed = 0, uses_anonymous_args = 0
1416:../freertos/queue.c **** TimeOut_t xTimeOut;
 1960              		.loc 1 1416 1 view .LVU587
1417:../freertos/queue.c **** Queue_t * const pxQueue = xQueue;
 1961              		.loc 1 1417 1 view .LVU588
1418:../freertos/queue.c **** 
 1962              		.loc 1 1418 1 view .LVU589
 1963              	@ ../freertos/queue.c:1415: {
1415:../freertos/queue.c **** BaseType_t xEntryTimeSet = pdFALSE;
 1964              		.loc 1 1415 1 is_stmt 0 view .LVU590
 1965 04ae F0B5     		push	{r4, r5, r6, r7, lr}	@
 1966              	.LCFI22:
 1967              		.cfi_def_cfa_offset 20
 1968              		.cfi_offset 4, -20
 1969              		.cfi_offset 5, -16
 1970              		.cfi_offset 6, -12
 1971              		.cfi_offset 7, -8
 1972              		.cfi_offset 14, -4
 1973              	@ ../freertos/queue.c:1421: 	BaseType_t xInheritanceOccurred = pdFALSE;
1421:../freertos/queue.c **** #endif
 1974              		.loc 1 1421 13 view .LVU591
 1975 04b0 0025     		movs	r5, #0	@ xInheritanceOccurred,
 1976              	@ ../freertos/queue.c:1415: {
1415:../freertos/queue.c **** BaseType_t xEntryTimeSet = pdFALSE;
 1977              		.loc 1 1415 1 view .LVU592
 1978 04b2 0446     		mov	r4, r0	@ xQueue, tmp169
 1979              	.LVL162:
1421:../freertos/queue.c **** #endif
 1980              		.loc 1 1421 2 is_stmt 1 view .LVU593
 1981              	@ ../freertos/queue.c:1416: BaseType_t xEntryTimeSet = pdFALSE;
1416:../freertos/queue.c **** TimeOut_t xTimeOut;
 1982              		.loc 1 1416 12 is_stmt 0 view .LVU594
 1983 04b4 2F46     		mov	r7, r5	@ xEntryTimeSet, xInheritanceOccurred
 1984              	@ ../freertos/queue.c:1535: 		prvLockQueue( pxQueue );
1535:../freertos/queue.c **** 
 1985              		.loc 1 1535 3 discriminator 1 view .LVU595
 1986 04b6 2E46     		mov	r6, r5	@ tmp167, xInheritanceOccurred
 1987              	@ ../freertos/queue.c:1415: {
1415:../freertos/queue.c **** BaseType_t xEntryTimeSet = pdFALSE;
 1988              		.loc 1 1415 1 view .LVU596
 1989 04b8 85B0     		sub	sp, sp, #20	@,,
 1990              	.LCFI23:
 1991              		.cfi_def_cfa_offset 40
 1992              	@ ../freertos/queue.c:1415: {
ARM GAS  /tmp/ccMyq1Ea.s 			page 91


1415:../freertos/queue.c **** BaseType_t xEntryTimeSet = pdFALSE;
 1993              		.loc 1 1415 1 view .LVU597
 1994 04ba 0191     		str	r1, [sp, #4]	@ xTicksToWait, xTicksToWait
 1995              	.LVL163:
 1996              	.L141:
1425:../freertos/queue.c **** 
 1997              		.loc 1 1425 29 is_stmt 1 view .LVU598
1429:../freertos/queue.c **** 
 1998              		.loc 1 1429 42 view .LVU599
1434:../freertos/queue.c **** 	}
 1999              		.loc 1 1434 104 view .LVU600
1442:../freertos/queue.c **** 	{
 2000              		.loc 1 1442 2 view .LVU601
1444:../freertos/queue.c **** 		{
 2001              		.loc 1 1444 3 view .LVU602
 2002 04bc FFF7FEFF 		bl	vPortEnterCritical		@
 2003              	.LVL164:
 2004              	.LBB69:
1448:../freertos/queue.c **** 
 2005              		.loc 1 1448 4 view .LVU603
 2006              	@ ../freertos/queue.c:1448: 			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
1448:../freertos/queue.c **** 
 2007              		.loc 1 1448 22 is_stmt 0 view .LVU604
 2008 04c0 A36B     		ldr	r3, [r4, #56]	@ uxSemaphoreCount, MEM[(struct Queue_t *)xQueue_34(D)].uxMessagesWaiting
 2009              	.LVL165:
1452:../freertos/queue.c **** 			{
 2010              		.loc 1 1452 4 is_stmt 1 view .LVU605
 2011              	@ ../freertos/queue.c:1452: 			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
1452:../freertos/queue.c **** 			{
 2012              		.loc 1 1452 6 is_stmt 0 view .LVU606
 2013 04c2 E3B1     		cbz	r3, .L142	@ uxSemaphoreCount,
1454:../freertos/queue.c **** 
 2014              		.loc 1 1454 34 is_stmt 1 view .LVU607
1458:../freertos/queue.c **** 
 2015              		.loc 1 1458 5 view .LVU608
 2016              	@ ../freertos/queue.c:1458: 				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
1458:../freertos/queue.c **** 
 2017              		.loc 1 1458 51 is_stmt 0 view .LVU609
 2018 04c4 013B     		subs	r3, r3, #1	@ _1, uxSemaphoreCount,
 2019              	.LVL166:
 2020              	@ ../freertos/queue.c:1458: 				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
1458:../freertos/queue.c **** 
 2021              		.loc 1 1458 32 view .LVU610
 2022 04c6 A363     		str	r3, [r4, #56]	@ _1, MEM[(struct Queue_t *)xQueue_34(D)].uxMessagesWaiting
1462:../freertos/queue.c **** 					{
 2023              		.loc 1 1462 6 is_stmt 1 view .LVU611
 2024              	@ ../freertos/queue.c:1462: 					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1462:../freertos/queue.c **** 					{
 2025              		.loc 1 1462 8 is_stmt 0 view .LVU612
 2026 04c8 2368     		ldr	r3, [r4]	@ MEM[(struct Queue_t *)xQueue_34(D)].pcHead, MEM[(struct Queue_t *)xQueue_34(D)].pcH
 2027              	.LVL167:
1462:../freertos/queue.c **** 					{
 2028              		.loc 1 1462 8 view .LVU613
 2029 04ca 13B9     		cbnz	r3, .L143	@ MEM[(struct Queue_t *)xQueue_34(D)].pcHead,
1466:../freertos/queue.c **** 					}
 2030              		.loc 1 1466 7 is_stmt 1 view .LVU614
 2031              	@ ../freertos/queue.c:1466: 						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCoun
ARM GAS  /tmp/ccMyq1Ea.s 			page 92


1466:../freertos/queue.c **** 					}
 2032              		.loc 1 1466 44 is_stmt 0 view .LVU615
 2033 04cc FFF7FEFF 		bl	pvTaskIncrementMutexHeldCount		@
 2034              	.LVL168:
 2035              	@ ../freertos/queue.c:1466: 						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCoun
1466:../freertos/queue.c **** 					}
 2036              		.loc 1 1466 42 discriminator 1 view .LVU616
 2037 04d0 A060     		str	r0, [r4, #8]	@ tmp170, MEM[(struct Queue_t *)xQueue_34(D)].u.xSemaphore.xMutexHolder
 2038              	.L143:
1470:../freertos/queue.c **** 					}
 2039              		.loc 1 1470 31 is_stmt 1 view .LVU617
1477:../freertos/queue.c **** 				{
 2040              		.loc 1 1477 5 view .LVU618
 2041              	@ ../freertos/queue.c:1477: 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFAL
1477:../freertos/queue.c **** 				{
 2042              		.loc 1 1477 9 is_stmt 0 view .LVU619
 2043 04d2 2369     		ldr	r3, [r4, #16]	@ _4, MEM[(struct Queue_t *)xQueue_34(D)].xTasksWaitingToSend.uxNumberOfItems
 2044              	@ ../freertos/queue.c:1477: 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFAL
1477:../freertos/queue.c **** 				{
 2045              		.loc 1 1477 7 view .LVU620
 2046 04d4 73B1     		cbz	r3, .L145	@ _4,
1479:../freertos/queue.c **** 					{
 2047              		.loc 1 1479 6 is_stmt 1 view .LVU621
 2048              	@ ../freertos/queue.c:1479: 					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) 
1479:../freertos/queue.c **** 					{
 2049              		.loc 1 1479 10 is_stmt 0 view .LVU622
 2050 04d6 04F11000 		add	r0, r4, #16	@, xQueue,
 2051 04da FFF7FEFF 		bl	xTaskRemoveFromEventList		@
 2052              	.LVL169:
 2053              	@ ../freertos/queue.c:1479: 					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) 
1479:../freertos/queue.c **** 					{
 2054              		.loc 1 1479 8 discriminator 1 view .LVU623
 2055 04de 48B1     		cbz	r0, .L145	@ tmp171,
1481:../freertos/queue.c **** 					}
 2056              		.loc 1 1481 7 is_stmt 1 view .LVU624
 2057 04e0 4FF0E023 		mov	r3, #-536813568	@ tmp142,
 2058 04e4 4FF08052 		mov	r2, #268435456	@ tmp143,
 2059 04e8 C3F8042D 		str	r2, [r3, #3332]	@ tmp143, MEM[(volatile uint32_t *)3758157060B]
1481:../freertos/queue.c **** 					}
 2060              		.loc 1 1481 7 view .LVU625
 2061              		.syntax unified
 2062              	@ 1481 "../freertos/queue.c" 1
 2063 04ec BFF34F8F 		dsb	
 2064              	@ 0 "" 2
1481:../freertos/queue.c **** 					}
 2065              		.loc 1 1481 7 view .LVU626
 2066              	@ 1481 "../freertos/queue.c" 1
 2067 04f0 BFF36F8F 		isb
 2068              	@ 0 "" 2
1481:../freertos/queue.c **** 					}
 2069              		.loc 1 1481 39 view .LVU627
 2070              		.thumb
 2071              		.syntax unified
 2072              	.L145:
1490:../freertos/queue.c **** 				}
 2073              		.loc 1 1490 30 view .LVU628
1493:../freertos/queue.c **** 				return pdPASS;
ARM GAS  /tmp/ccMyq1Ea.s 			page 93


 2074              		.loc 1 1493 5 view .LVU629
 2075 04f4 FFF7FEFF 		bl	vPortExitCritical		@
 2076              	.LVL170:
1494:../freertos/queue.c **** 			}
 2077              		.loc 1 1494 5 view .LVU630
 2078              	@ ../freertos/queue.c:1494: 				return pdPASS;
1494:../freertos/queue.c **** 			}
 2079              		.loc 1 1494 12 is_stmt 0 view .LVU631
 2080 04f8 0120     		movs	r0, #1	@ <retval>,
 2081              	.LVL171:
 2082              	.L140:
1494:../freertos/queue.c **** 			}
 2083              		.loc 1 1494 12 view .LVU632
 2084              	.LBE69:
 2085              	@ ../freertos/queue.c:1629: }
1629:../freertos/queue.c **** /*-----------------------------------------------------------*/
 2086              		.loc 1 1629 1 view .LVU633
 2087 04fa 05B0     		add	sp, sp, #20	@,,
 2088              	.LCFI24:
 2089              		.cfi_remember_state
 2090              		.cfi_def_cfa_offset 20
 2091              		@ sp needed	@
 2092 04fc F0BD     		pop	{r4, r5, r6, r7, pc}	@
 2093              	.LVL172:
 2094              	.L142:
 2095              	.LCFI25:
 2096              		.cfi_restore_state
 2097              	.LBB70:
1498:../freertos/queue.c **** 				{
 2098              		.loc 1 1498 5 is_stmt 1 view .LVU634
 2099              	@ ../freertos/queue.c:1498: 				if( xTicksToWait == ( TickType_t ) 0 )
1498:../freertos/queue.c **** 				{
 2100              		.loc 1 1498 7 is_stmt 0 view .LVU635
 2101 04fe 019B     		ldr	r3, [sp, #4]	@ xTicksToWait, xTicksToWait
 2102              	.LVL173:
1498:../freertos/queue.c **** 				{
 2103              		.loc 1 1498 7 view .LVU636
 2104 0500 1BB9     		cbnz	r3, .L148	@ xTicksToWait,
 2105              	.LVL174:
 2106              	.L170:
1498:../freertos/queue.c **** 				{
 2107              		.loc 1 1498 7 view .LVU637
 2108              	.LBE70:
1615:../freertos/queue.c **** 					}
 2109              		.loc 1 1615 7 is_stmt 1 view .LVU638
 2110 0502 FFF7FEFF 		bl	vPortExitCritical		@
 2111              	.LVL175:
 2112              	.L149:
 2113              	.LBB71:
 2114              	@ ../freertos/queue.c:1513: 					return errQUEUE_EMPTY;
1513:../freertos/queue.c **** 				}
 2115              		.loc 1 1513 13 is_stmt 0 view .LVU639
 2116 0506 0020     		movs	r0, #0	@ <retval>,
 2117 0508 F7E7     		b	.L140		@
 2118              	.LVL176:
 2119              	.L148:
1515:../freertos/queue.c **** 				{
ARM GAS  /tmp/ccMyq1Ea.s 			page 94


 2120              		.loc 1 1515 10 is_stmt 1 view .LVU640
 2121              	@ ../freertos/queue.c:1515: 				else if( xEntryTimeSet == pdFALSE )
1515:../freertos/queue.c **** 				{
 2122              		.loc 1 1515 12 is_stmt 0 view .LVU641
 2123 050a 17B9     		cbnz	r7, .L150	@ xEntryTimeSet,
1519:../freertos/queue.c **** 					xEntryTimeSet = pdTRUE;
 2124              		.loc 1 1519 6 is_stmt 1 view .LVU642
 2125 050c 02A8     		add	r0, sp, #8	@ tmp178,,
 2126 050e FFF7FEFF 		bl	vTaskInternalSetTimeOutState		@
 2127              	.LVL177:
1520:../freertos/queue.c **** 				}
 2128              		.loc 1 1520 6 view .LVU643
 2129              	.L150:
1525:../freertos/queue.c **** 				}
 2130              		.loc 1 1525 30 view .LVU644
 2131              	.LBE71:
1529:../freertos/queue.c **** 
 2132              		.loc 1 1529 3 view .LVU645
 2133 0512 FFF7FEFF 		bl	vPortExitCritical		@
 2134              	.LVL178:
1534:../freertos/queue.c **** 		prvLockQueue( pxQueue );
 2135              		.loc 1 1534 3 view .LVU646
 2136 0516 FFF7FEFF 		bl	vTaskSuspendAll		@
 2137              	.LVL179:
1535:../freertos/queue.c **** 
 2138              		.loc 1 1535 3 view .LVU647
 2139 051a FFF7FEFF 		bl	vPortEnterCritical		@
 2140              	.LVL180:
1535:../freertos/queue.c **** 
 2141              		.loc 1 1535 3 discriminator 1 view .LVU648
 2142 051e 94F84430 		ldrb	r3, [r4, #68]	@ zero_extendqisi2	@ MEM[(struct Queue_t *)xQueue_34(D)].cRxLock, MEM[(struct Q
 2143 0522 FF2B     		cmp	r3, #255	@ MEM[(struct Queue_t *)xQueue_34(D)].cRxLock,
1535:../freertos/queue.c **** 
 2144              		.loc 1 1535 3 discriminator 1 view .LVU649
 2145 0524 08BF     		it	eq
 2146 0526 84F84460 		strbeq	r6, [r4, #68]	@ tmp167, MEM[(struct Queue_t *)xQueue_34(D)].cRxLock
1535:../freertos/queue.c **** 
 2147              		.loc 1 1535 3 discriminator 3 view .LVU650
 2148 052a 94F84530 		ldrb	r3, [r4, #69]	@ zero_extendqisi2	@ MEM[(struct Queue_t *)xQueue_34(D)].cTxLock, MEM[(struct Q
 2149 052e FF2B     		cmp	r3, #255	@ MEM[(struct Queue_t *)xQueue_34(D)].cTxLock,
1535:../freertos/queue.c **** 
 2150              		.loc 1 1535 3 discriminator 4 view .LVU651
 2151 0530 08BF     		it	eq
 2152 0532 84F84560 		strbeq	r6, [r4, #69]	@ tmp167, MEM[(struct Queue_t *)xQueue_34(D)].cTxLock
1535:../freertos/queue.c **** 
 2153              		.loc 1 1535 3 discriminator 6 view .LVU652
 2154 0536 FFF7FEFF 		bl	vPortExitCritical		@
 2155              	.LVL181:
1538:../freertos/queue.c **** 		{
 2156              		.loc 1 1538 3 view .LVU653
 2157              	@ ../freertos/queue.c:1538: 		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1538:../freertos/queue.c **** 		{
 2158              		.loc 1 1538 7 is_stmt 0 view .LVU654
 2159 053a 01A9     		add	r1, sp, #4	@ tmp179,,
 2160 053c 02A8     		add	r0, sp, #8	@ tmp180,,
 2161 053e FFF7FEFF 		bl	xTaskCheckForTimeOut		@
 2162              	.LVL182:
ARM GAS  /tmp/ccMyq1Ea.s 			page 95


 2163              	@ ../freertos/queue.c:1538: 		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1538:../freertos/queue.c **** 		{
 2164              		.loc 1 1538 5 discriminator 1 view .LVU655
 2165 0542 50BB     		cbnz	r0, .L153	@ tmp172,
1544:../freertos/queue.c **** 			{
 2166              		.loc 1 1544 4 is_stmt 1 view .LVU656
 2167              	@ ../freertos/queue.c:1544: 			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1544:../freertos/queue.c **** 			{
 2168              		.loc 1 1544 8 is_stmt 0 view .LVU657
 2169 0544 2046     		mov	r0, r4	@, xQueue
 2170 0546 FFF75BFD 		bl	prvIsQueueEmpty		@
 2171              	.LVL183:
 2172              	@ ../freertos/queue.c:1544: 			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1544:../freertos/queue.c **** 			{
 2173              		.loc 1 1544 6 discriminator 1 view .LVU658
 2174 054a 00B3     		cbz	r0, .L154	@ tmp173,
1546:../freertos/queue.c **** 
 2175              		.loc 1 1546 46 is_stmt 1 view .LVU659
1550:../freertos/queue.c **** 					{
 2176              		.loc 1 1550 6 view .LVU660
 2177              	@ ../freertos/queue.c:1550: 					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1550:../freertos/queue.c **** 					{
 2178              		.loc 1 1550 8 is_stmt 0 view .LVU661
 2179 054c 2368     		ldr	r3, [r4]	@ MEM[(struct Queue_t *)xQueue_34(D)].pcHead, MEM[(struct Queue_t *)xQueue_34(D)].pcH
 2180 054e 3BB9     		cbnz	r3, .L155	@ MEM[(struct Queue_t *)xQueue_34(D)].pcHead,
1552:../freertos/queue.c **** 						{
 2181              		.loc 1 1552 7 is_stmt 1 view .LVU662
 2182 0550 FFF7FEFF 		bl	vPortEnterCritical		@
 2183              	.LVL184:
1554:../freertos/queue.c **** 						}
 2184              		.loc 1 1554 8 view .LVU663
 2185              	@ ../freertos/queue.c:1554: 							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemapho
1554:../freertos/queue.c **** 						}
 2186              		.loc 1 1554 31 is_stmt 0 view .LVU664
 2187 0554 A068     		ldr	r0, [r4, #8]	@, MEM[(struct Queue_t *)xQueue_34(D)].u.xSemaphore.xMutexHolder
 2188 0556 FFF7FEFF 		bl	xTaskPriorityInherit		@
 2189              	.LVL185:
 2190 055a 0546     		mov	r5, r0	@ xInheritanceOccurred, tmp174
 2191              	.LVL186:
1556:../freertos/queue.c **** 					}
 2192              		.loc 1 1556 7 is_stmt 1 view .LVU665
 2193 055c FFF7FEFF 		bl	vPortExitCritical		@
 2194              	.LVL187:
 2195              	.L155:
1560:../freertos/queue.c **** 					}
 2196              		.loc 1 1560 31 view .LVU666
1565:../freertos/queue.c **** 				prvUnlockQueue( pxQueue );
 2197              		.loc 1 1565 5 view .LVU667
 2198 0560 0199     		ldr	r1, [sp, #4]	@, xTicksToWait
 2199 0562 04F12400 		add	r0, r4, #36	@, xQueue,
 2200 0566 FFF7FEFF 		bl	vTaskPlaceOnEventList		@
 2201              	.LVL188:
1566:../freertos/queue.c **** 				if( xTaskResumeAll() == pdFALSE )
 2202              		.loc 1 1566 5 view .LVU668
 2203 056a 2046     		mov	r0, r4	@, xQueue
 2204 056c FFF79AFD 		bl	prvUnlockQueue		@
 2205              	.LVL189:
ARM GAS  /tmp/ccMyq1Ea.s 			page 96


1567:../freertos/queue.c **** 				{
 2206              		.loc 1 1567 5 view .LVU669
 2207              	@ ../freertos/queue.c:1567: 				if( xTaskResumeAll() == pdFALSE )
1567:../freertos/queue.c **** 				{
 2208              		.loc 1 1567 9 is_stmt 0 view .LVU670
 2209 0570 FFF7FEFF 		bl	xTaskResumeAll		@
 2210              	.LVL190:
 2211              	@ ../freertos/queue.c:1567: 				if( xTaskResumeAll() == pdFALSE )
1567:../freertos/queue.c **** 				{
 2212              		.loc 1 1567 7 discriminator 1 view .LVU671
 2213 0574 48B9     		cbnz	r0, .L159	@ tmp175,
1569:../freertos/queue.c **** 				}
 2214              		.loc 1 1569 6 is_stmt 1 view .LVU672
 2215 0576 4FF0E023 		mov	r3, #-536813568	@ tmp160,
 2216 057a 4FF08052 		mov	r2, #268435456	@ tmp161,
 2217 057e C3F8042D 		str	r2, [r3, #3332]	@ tmp161, MEM[(volatile uint32_t *)3758157060B]
1569:../freertos/queue.c **** 				}
 2218              		.loc 1 1569 6 view .LVU673
 2219              		.syntax unified
 2220              	@ 1569 "../freertos/queue.c" 1
 2221 0582 BFF34F8F 		dsb	
 2222              	@ 0 "" 2
1569:../freertos/queue.c **** 				}
 2223              		.loc 1 1569 6 view .LVU674
 2224              	@ 1569 "../freertos/queue.c" 1
 2225 0586 BFF36F8F 		isb
 2226              	@ 0 "" 2
1569:../freertos/queue.c **** 				}
 2227              		.loc 1 1569 28 view .LVU675
 2228              		.thumb
 2229              		.syntax unified
 2230              	.L159:
 2231              	@ ../freertos/queue.c:1415: {
1415:../freertos/queue.c **** BaseType_t xEntryTimeSet = pdFALSE;
 2232              		.loc 1 1415 1 is_stmt 0 view .LVU676
 2233 058a 0127     		movs	r7, #1	@ xEntryTimeSet,
 2234 058c 96E7     		b	.L141		@
 2235              	.L154:
1580:../freertos/queue.c **** 				( void ) xTaskResumeAll();
 2236              		.loc 1 1580 5 is_stmt 1 view .LVU677
 2237 058e 2046     		mov	r0, r4	@, xQueue
 2238 0590 FFF788FD 		bl	prvUnlockQueue		@
 2239              	.LVL191:
1581:../freertos/queue.c **** 			}
 2240              		.loc 1 1581 5 view .LVU678
 2241              	@ ../freertos/queue.c:1581: 				( void ) xTaskResumeAll();
1581:../freertos/queue.c **** 			}
 2242              		.loc 1 1581 14 is_stmt 0 view .LVU679
 2243 0594 FFF7FEFF 		bl	xTaskResumeAll		@
 2244              	.LVL192:
 2245 0598 F7E7     		b	.L159		@
 2246              	.L153:
1587:../freertos/queue.c **** 			( void ) xTaskResumeAll();
 2247              		.loc 1 1587 4 is_stmt 1 view .LVU680
 2248 059a 2046     		mov	r0, r4	@, xQueue
 2249 059c FFF782FD 		bl	prvUnlockQueue		@
 2250              	.LVL193:
ARM GAS  /tmp/ccMyq1Ea.s 			page 97


1588:../freertos/queue.c **** 
 2251              		.loc 1 1588 4 view .LVU681
 2252              	@ ../freertos/queue.c:1588: 			( void ) xTaskResumeAll();
1588:../freertos/queue.c **** 
 2253              		.loc 1 1588 13 is_stmt 0 view .LVU682
 2254 05a0 FFF7FEFF 		bl	xTaskResumeAll		@
 2255              	.LVL194:
1594:../freertos/queue.c **** 			{
 2256              		.loc 1 1594 4 is_stmt 1 view .LVU683
 2257              	@ ../freertos/queue.c:1594: 			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1594:../freertos/queue.c **** 			{
 2258              		.loc 1 1594 8 is_stmt 0 view .LVU684
 2259 05a4 2046     		mov	r0, r4	@, xQueue
 2260 05a6 FFF72BFD 		bl	prvIsQueueEmpty		@
 2261              	.LVL195:
 2262              	@ ../freertos/queue.c:1594: 			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1594:../freertos/queue.c **** 			{
 2263              		.loc 1 1594 6 discriminator 1 view .LVU685
 2264 05aa 0028     		cmp	r0, #0	@ tmp176
 2265 05ac EDD0     		beq	.L159	@
1601:../freertos/queue.c **** 					{
 2266              		.loc 1 1601 6 is_stmt 1 view .LVU686
 2267              	@ ../freertos/queue.c:1601: 					if( xInheritanceOccurred != pdFALSE )
1601:../freertos/queue.c **** 					{
 2268              		.loc 1 1601 8 is_stmt 0 view .LVU687
 2269 05ae 002D     		cmp	r5, #0	@ xInheritanceOccurred
 2270 05b0 A9D0     		beq	.L149	@
1603:../freertos/queue.c **** 						{
 2271              		.loc 1 1603 7 is_stmt 1 view .LVU688
 2272 05b2 FFF7FEFF 		bl	vPortEnterCritical		@
 2273              	.LVL196:
 2274              	.LBB72:
1605:../freertos/queue.c **** 
 2275              		.loc 1 1605 8 view .LVU689
1612:../freertos/queue.c **** 							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPri
 2276              		.loc 1 1612 8 view .LVU690
 2277              	.LBB73:
 2278              	.LBI73:
2045:../freertos/queue.c **** 	{
 2279              		.loc 1 2045 21 view .LVU691
 2280              	.LBB74:
2047:../freertos/queue.c **** 
 2281              		.loc 1 2047 2 view .LVU692
2055:../freertos/queue.c **** 		{
 2282              		.loc 1 2055 3 view .LVU693
 2283              	@ ../freertos/queue.c:2055: 		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) >
2055:../freertos/queue.c **** 		{
 2284              		.loc 1 2055 7 is_stmt 0 view .LVU694
 2285 05b6 616A     		ldr	r1, [r4, #36]	@ uxHighestPriorityOfWaitingTasks, MEM[(const struct Queue_t *)xQueue_34(D)].xTa
 2286              	@ ../freertos/queue.c:2055: 		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) >
2055:../freertos/queue.c **** 		{
 2287              		.loc 1 2055 5 view .LVU695
 2288 05b8 19B1     		cbz	r1, .L160	@ uxHighestPriorityOfWaitingTasks,
2057:../freertos/queue.c **** 		}
 2289              		.loc 1 2057 4 is_stmt 1 view .LVU696
 2290              	@ ../freertos/queue.c:2057: 			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITI
2057:../freertos/queue.c **** 		}
ARM GAS  /tmp/ccMyq1Ea.s 			page 98


 2291              		.loc 1 2057 93 is_stmt 0 view .LVU697
 2292 05ba 236B     		ldr	r3, [r4, #48]	@ MEM[(const struct Queue_t *)xQueue_34(D)].xTasksWaitingToReceive.xListEnd.pxNe
 2293              	@ ../freertos/queue.c:2057: 			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITI
2057:../freertos/queue.c **** 		}
 2294              		.loc 1 2057 36 view .LVU698
 2295 05bc 1968     		ldr	r1, [r3]	@ _84->xItemValue, _84->xItemValue
 2296 05be C1F10501 		rsb	r1, r1, #5	@ uxHighestPriorityOfWaitingTasks, _84->xItemValue,
 2297              	.LVL197:
 2298              	.L160:
2064:../freertos/queue.c **** 	}
 2299              		.loc 1 2064 3 is_stmt 1 view .LVU699
2064:../freertos/queue.c **** 	}
 2300              		.loc 1 2064 3 is_stmt 0 view .LVU700
 2301              	.LBE74:
 2302              	.LBE73:
1613:../freertos/queue.c **** 						}
 2303              		.loc 1 1613 8 is_stmt 1 view .LVU701
 2304 05c2 A068     		ldr	r0, [r4, #8]	@, MEM[(struct Queue_t *)xQueue_34(D)].u.xSemaphore.xMutexHolder
 2305 05c4 FFF7FEFF 		bl	vTaskPriorityDisinheritAfterTimeout		@
 2306              	.LVL198:
1613:../freertos/queue.c **** 						}
 2307              		.loc 1 1613 8 is_stmt 0 view .LVU702
 2308 05c8 9BE7     		b	.L170		@
 2309              	.LBE72:
 2310              		.cfi_endproc
 2311              	.LFE17:
 2312              		.size	xQueueSemaphoreTake, .-xQueueSemaphoreTake
 2313              		.align	1
 2314              		.global	xQueueTakeMutexRecursive
 2315              		.syntax unified
 2316              		.thumb
 2317              		.thumb_func
 2318              		.type	xQueueTakeMutexRecursive, %function
 2319              	xQueueTakeMutexRecursive:
 2320              	.LVL199:
 2321              	.LFB11:
 652:../freertos/queue.c **** 	BaseType_t xReturn;
 2322              		.loc 1 652 2 is_stmt 1 view -0
 2323              		.cfi_startproc
 2324              		@ args = 0, pretend = 0, frame = 0
 2325              		@ frame_needed = 0, uses_anonymous_args = 0
 653:../freertos/queue.c **** 	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 2326              		.loc 1 653 2 view .LVU704
 654:../freertos/queue.c **** 
 2327              		.loc 1 654 2 view .LVU705
 656:../freertos/queue.c **** 
 2328              		.loc 1 656 26 view .LVU706
 661:../freertos/queue.c **** 
 2329              		.loc 1 661 39 view .LVU707
 663:../freertos/queue.c **** 		{
 2330              		.loc 1 663 3 view .LVU708
 2331              	@ ../freertos/queue.c:652: 	{
 652:../freertos/queue.c **** 	BaseType_t xReturn;
 2332              		.loc 1 652 2 is_stmt 0 view .LVU709
 2333 05ca 70B5     		push	{r4, r5, r6, lr}	@
 2334              	.LCFI26:
 2335              		.cfi_def_cfa_offset 16
ARM GAS  /tmp/ccMyq1Ea.s 			page 99


 2336              		.cfi_offset 4, -16
 2337              		.cfi_offset 5, -12
 2338              		.cfi_offset 6, -8
 2339              		.cfi_offset 14, -4
 2340              	@ ../freertos/queue.c:663: 		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() 
 663:../freertos/queue.c **** 		{
 2341              		.loc 1 663 28 view .LVU710
 2342 05cc 8668     		ldr	r6, [r0, #8]	@ _1, MEM[(struct Queue_t *)xMutex_9(D)].u.xSemaphore.xMutexHolder
 2343              	@ ../freertos/queue.c:652: 	{
 652:../freertos/queue.c **** 	BaseType_t xReturn;
 2344              		.loc 1 652 2 view .LVU711
 2345 05ce 0446     		mov	r4, r0	@ xMutex, tmp128
 2346 05d0 0D46     		mov	r5, r1	@ xTicksToWait, tmp129
 2347              	@ ../freertos/queue.c:663: 		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() 
 663:../freertos/queue.c **** 		{
 2348              		.loc 1 663 45 view .LVU712
 2349 05d2 FFF7FEFF 		bl	xTaskGetCurrentTaskHandle		@
 2350              	.LVL200:
 2351              	@ ../freertos/queue.c:663: 		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() 
 663:../freertos/queue.c **** 		{
 2352              		.loc 1 663 5 discriminator 1 view .LVU713
 2353 05d6 8642     		cmp	r6, r0	@ _1, tmp130
 2354 05d8 04D1     		bne	.L172		@,
 665:../freertos/queue.c **** 			xReturn = pdPASS;
 2355              		.loc 1 665 4 is_stmt 1 view .LVU714
 2356              	@ ../freertos/queue.c:666: 			xReturn = pdPASS;
 666:../freertos/queue.c **** 		}
 2357              		.loc 1 666 12 is_stmt 0 view .LVU715
 2358 05da 0120     		movs	r0, #1	@ <retval>,
 2359              	@ ../freertos/queue.c:665: 			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 665:../freertos/queue.c **** 			xReturn = pdPASS;
 2360              		.loc 1 665 50 view .LVU716
 2361 05dc E368     		ldr	r3, [r4, #12]	@ MEM[(struct Queue_t *)xMutex_9(D)].u.xSemaphore.uxRecursiveCallCount, MEM[(str
 2362 05de 0133     		adds	r3, r3, #1	@ tmp123, MEM[(struct Queue_t *)xMutex_9(D)].u.xSemaphore.uxRecursiveCallCount,
 2363 05e0 E360     		str	r3, [r4, #12]	@ tmp123, MEM[(struct Queue_t *)xMutex_9(D)].u.xSemaphore.uxRecursiveCallCount
 666:../freertos/queue.c **** 		}
 2364              		.loc 1 666 4 is_stmt 1 view .LVU717
 2365              	.LVL201:
 2366              	.L171:
 2367              	@ ../freertos/queue.c:686: 	}
 686:../freertos/queue.c **** 
 2368              		.loc 1 686 2 is_stmt 0 view .LVU718
 2369 05e2 70BD     		pop	{r4, r5, r6, pc}	@
 2370              	.LVL202:
 2371              	.L172:
 670:../freertos/queue.c **** 
 2372              		.loc 1 670 4 is_stmt 1 view .LVU719
 2373              	@ ../freertos/queue.c:670: 			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 670:../freertos/queue.c **** 
 2374              		.loc 1 670 14 is_stmt 0 view .LVU720
 2375 05e4 2946     		mov	r1, r5	@, xTicksToWait
 2376 05e6 2046     		mov	r0, r4	@, xMutex
 2377 05e8 FFF7FEFF 		bl	xQueueSemaphoreTake		@
 2378              	.LVL203:
 675:../freertos/queue.c **** 			{
 2379              		.loc 1 675 4 is_stmt 1 view .LVU721
 2380              	@ ../freertos/queue.c:675: 			if( xReturn != pdFAIL )
ARM GAS  /tmp/ccMyq1Ea.s 			page 100


 675:../freertos/queue.c **** 			{
 2381              		.loc 1 675 6 is_stmt 0 view .LVU722
 2382 05ec 0028     		cmp	r0, #0	@ <retval>
 2383 05ee F8D0     		beq	.L171	@
 677:../freertos/queue.c **** 			}
 2384              		.loc 1 677 5 is_stmt 1 view .LVU723
 2385              	@ ../freertos/queue.c:677: 				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 677:../freertos/queue.c **** 			}
 2386              		.loc 1 677 51 is_stmt 0 view .LVU724
 2387 05f0 E368     		ldr	r3, [r4, #12]	@ MEM[(struct Queue_t *)xMutex_9(D)].u.xSemaphore.uxRecursiveCallCount, MEM[(str
 2388 05f2 0133     		adds	r3, r3, #1	@ tmp125, MEM[(struct Queue_t *)xMutex_9(D)].u.xSemaphore.uxRecursiveCallCount,
 2389 05f4 E360     		str	r3, [r4, #12]	@ tmp125, MEM[(struct Queue_t *)xMutex_9(D)].u.xSemaphore.uxRecursiveCallCount
 2390 05f6 F4E7     		b	.L171		@
 2391              		.cfi_endproc
 2392              	.LFE11:
 2393              		.size	xQueueTakeMutexRecursive, .-xQueueTakeMutexRecursive
 2394              		.align	1
 2395              		.global	xQueuePeek
 2396              		.syntax unified
 2397              		.thumb
 2398              		.thumb_func
 2399              		.type	xQueuePeek, %function
 2400              	xQueuePeek:
 2401              	.LVL204:
 2402              	.LFB18:
1633:../freertos/queue.c **** BaseType_t xEntryTimeSet = pdFALSE;
 2403              		.loc 1 1633 1 is_stmt 1 view -0
 2404              		.cfi_startproc
 2405              		@ args = 0, pretend = 0, frame = 16
 2406              		@ frame_needed = 0, uses_anonymous_args = 0
1634:../freertos/queue.c **** TimeOut_t xTimeOut;
 2407              		.loc 1 1634 1 view .LVU726
1635:../freertos/queue.c **** int8_t *pcOriginalReadPosition;
 2408              		.loc 1 1635 1 view .LVU727
1636:../freertos/queue.c **** Queue_t * const pxQueue = xQueue;
 2409              		.loc 1 1636 1 view .LVU728
1637:../freertos/queue.c **** 
 2410              		.loc 1 1637 1 view .LVU729
 2411              	@ ../freertos/queue.c:1633: {
1633:../freertos/queue.c **** BaseType_t xEntryTimeSet = pdFALSE;
 2412              		.loc 1 1633 1 is_stmt 0 view .LVU730
 2413 05f8 F0B5     		push	{r4, r5, r6, r7, lr}	@
 2414              	.LCFI27:
 2415              		.cfi_def_cfa_offset 20
 2416              		.cfi_offset 4, -20
 2417              		.cfi_offset 5, -16
 2418              		.cfi_offset 6, -12
 2419              		.cfi_offset 7, -8
 2420              		.cfi_offset 14, -4
 2421              	@ ../freertos/queue.c:1634: BaseType_t xEntryTimeSet = pdFALSE;
1634:../freertos/queue.c **** TimeOut_t xTimeOut;
 2422              		.loc 1 1634 12 view .LVU731
 2423 05fa 0026     		movs	r6, #0	@ xEntryTimeSet,
 2424              	@ ../freertos/queue.c:1633: {
1633:../freertos/queue.c **** BaseType_t xEntryTimeSet = pdFALSE;
 2425              		.loc 1 1633 1 view .LVU732
 2426 05fc 0446     		mov	r4, r0	@ xQueue, tmp157
ARM GAS  /tmp/ccMyq1Ea.s 			page 101


 2427              	.LVL205:
1633:../freertos/queue.c **** BaseType_t xEntryTimeSet = pdFALSE;
 2428              		.loc 1 1633 1 view .LVU733
 2429 05fe 0D46     		mov	r5, r1	@ pvBuffer, tmp158
 2430              	@ ../freertos/queue.c:1731: 		prvLockQueue( pxQueue );
1731:../freertos/queue.c **** 
 2431              		.loc 1 1731 3 discriminator 1 view .LVU734
 2432 0600 3746     		mov	r7, r6	@ tmp155, xEntryTimeSet
 2433              	@ ../freertos/queue.c:1633: {
1633:../freertos/queue.c **** BaseType_t xEntryTimeSet = pdFALSE;
 2434              		.loc 1 1633 1 view .LVU735
 2435 0602 85B0     		sub	sp, sp, #20	@,,
 2436              	.LCFI28:
 2437              		.cfi_def_cfa_offset 40
 2438              	@ ../freertos/queue.c:1633: {
1633:../freertos/queue.c **** BaseType_t xEntryTimeSet = pdFALSE;
 2439              		.loc 1 1633 1 view .LVU736
 2440 0604 0192     		str	r2, [sp, #4]	@ xTicksToWait, xTicksToWait
 2441              	.LVL206:
 2442              	.L177:
1640:../freertos/queue.c **** 
 2443              		.loc 1 1640 29 is_stmt 1 view .LVU737
1644:../freertos/queue.c **** 
 2444              		.loc 1 1644 100 view .LVU738
1649:../freertos/queue.c **** 	}
 2445              		.loc 1 1649 104 view .LVU739
1657:../freertos/queue.c **** 	{
 2446              		.loc 1 1657 2 view .LVU740
1659:../freertos/queue.c **** 		{
 2447              		.loc 1 1659 3 view .LVU741
 2448 0606 FFF7FEFF 		bl	vPortEnterCritical		@
 2449              	.LVL207:
 2450              	.LBB75:
1661:../freertos/queue.c **** 
 2451              		.loc 1 1661 4 view .LVU742
 2452              	@ ../freertos/queue.c:1661: 			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1661:../freertos/queue.c **** 
 2453              		.loc 1 1661 22 is_stmt 0 view .LVU743
 2454 060a A36B     		ldr	r3, [r4, #56]	@ uxMessagesWaiting, MEM[(struct Queue_t *)xQueue_23(D)].uxMessagesWaiting
 2455              	.LVL208:
1665:../freertos/queue.c **** 			{
 2456              		.loc 1 1665 4 is_stmt 1 view .LVU744
 2457              	@ ../freertos/queue.c:1665: 			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1665:../freertos/queue.c **** 			{
 2458              		.loc 1 1665 6 is_stmt 0 view .LVU745
 2459 060c DBB1     		cbz	r3, .L178	@ uxMessagesWaiting,
1670:../freertos/queue.c **** 
 2460              		.loc 1 1670 5 is_stmt 1 view .LVU746
 2461              	@ ../freertos/queue.c:1672: 				prvCopyDataFromQueue( pxQueue, pvBuffer );
1672:../freertos/queue.c **** 				traceQUEUE_PEEK( pxQueue );
 2462              		.loc 1 1672 5 is_stmt 0 view .LVU747
 2463 060e 2946     		mov	r1, r5	@, pvBuffer
 2464 0610 2046     		mov	r0, r4	@, xQueue
 2465              	@ ../freertos/queue.c:1670: 				pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
1670:../freertos/queue.c **** 
 2466              		.loc 1 1670 28 view .LVU748
 2467 0612 E668     		ldr	r6, [r4, #12]	@ pcOriginalReadPosition, MEM[(struct Queue_t *)xQueue_23(D)].u.xQueue.pcReadFro
ARM GAS  /tmp/ccMyq1Ea.s 			page 102


 2468              	.LVL209:
1672:../freertos/queue.c **** 				traceQUEUE_PEEK( pxQueue );
 2469              		.loc 1 1672 5 is_stmt 1 view .LVU749
 2470 0614 FFF732FD 		bl	prvCopyDataFromQueue		@
 2471              	.LVL210:
1673:../freertos/queue.c **** 
 2472              		.loc 1 1673 31 view .LVU750
1676:../freertos/queue.c **** 
 2473              		.loc 1 1676 5 view .LVU751
 2474              	@ ../freertos/queue.c:1680: 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pd
1680:../freertos/queue.c **** 				{
 2475              		.loc 1 1680 9 is_stmt 0 view .LVU752
 2476 0618 636A     		ldr	r3, [r4, #36]	@ _1, MEM[(struct Queue_t *)xQueue_23(D)].xTasksWaitingToReceive.uxNumberOfItems
 2477              	@ ../freertos/queue.c:1676: 				pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
1676:../freertos/queue.c **** 
 2478              		.loc 1 1676 34 view .LVU753
 2479 061a E660     		str	r6, [r4, #12]	@ pcOriginalReadPosition, MEM[(struct Queue_t *)xQueue_23(D)].u.xQueue.pcReadFro
1680:../freertos/queue.c **** 				{
 2480              		.loc 1 1680 5 is_stmt 1 view .LVU754
 2481              	@ ../freertos/queue.c:1680: 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pd
1680:../freertos/queue.c **** 				{
 2482              		.loc 1 1680 7 is_stmt 0 view .LVU755
 2483 061c 73B1     		cbz	r3, .L180	@ _1,
1682:../freertos/queue.c **** 					{
 2484              		.loc 1 1682 6 is_stmt 1 view .LVU756
 2485              	@ ../freertos/queue.c:1682: 					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive )
1682:../freertos/queue.c **** 					{
 2486              		.loc 1 1682 10 is_stmt 0 view .LVU757
 2487 061e 04F12400 		add	r0, r4, #36	@, xQueue,
 2488 0622 FFF7FEFF 		bl	xTaskRemoveFromEventList		@
 2489              	.LVL211:
 2490              	@ ../freertos/queue.c:1682: 					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive )
1682:../freertos/queue.c **** 					{
 2491              		.loc 1 1682 8 discriminator 1 view .LVU758
 2492 0626 48B1     		cbz	r0, .L180	@ tmp159,
1685:../freertos/queue.c **** 					}
 2493              		.loc 1 1685 7 is_stmt 1 view .LVU759
 2494 0628 4FF0E023 		mov	r3, #-536813568	@ tmp133,
 2495 062c 4FF08052 		mov	r2, #268435456	@ tmp134,
 2496 0630 C3F8042D 		str	r2, [r3, #3332]	@ tmp134, MEM[(volatile uint32_t *)3758157060B]
1685:../freertos/queue.c **** 					}
 2497              		.loc 1 1685 7 view .LVU760
 2498              		.syntax unified
 2499              	@ 1685 "../freertos/queue.c" 1
 2500 0634 BFF34F8F 		dsb	
 2501              	@ 0 "" 2
1685:../freertos/queue.c **** 					}
 2502              		.loc 1 1685 7 view .LVU761
 2503              	@ 1685 "../freertos/queue.c" 1
 2504 0638 BFF36F8F 		isb
 2505              	@ 0 "" 2
1685:../freertos/queue.c **** 					}
 2506              		.loc 1 1685 39 view .LVU762
 2507              		.thumb
 2508              		.syntax unified
 2509              	.L180:
1694:../freertos/queue.c **** 				}
ARM GAS  /tmp/ccMyq1Ea.s 			page 103


 2510              		.loc 1 1694 30 view .LVU763
1697:../freertos/queue.c **** 				return pdPASS;
 2511              		.loc 1 1697 5 view .LVU764
 2512 063c FFF7FEFF 		bl	vPortExitCritical		@
 2513              	.LVL212:
1698:../freertos/queue.c **** 			}
 2514              		.loc 1 1698 5 view .LVU765
 2515              	@ ../freertos/queue.c:1698: 				return pdPASS;
1698:../freertos/queue.c **** 			}
 2516              		.loc 1 1698 12 is_stmt 0 view .LVU766
 2517 0640 0120     		movs	r0, #1	@ <retval>,
 2518              	.LVL213:
 2519              	.L176:
1698:../freertos/queue.c **** 			}
 2520              		.loc 1 1698 12 view .LVU767
 2521              	.LBE75:
 2522              	@ ../freertos/queue.c:1778: }
1778:../freertos/queue.c **** /*-----------------------------------------------------------*/
 2523              		.loc 1 1778 1 view .LVU768
 2524 0642 05B0     		add	sp, sp, #20	@,,
 2525              	.LCFI29:
 2526              		.cfi_remember_state
 2527              		.cfi_def_cfa_offset 20
 2528              		@ sp needed	@
 2529 0644 F0BD     		pop	{r4, r5, r6, r7, pc}	@
 2530              	.LVL214:
 2531              	.L178:
 2532              	.LCFI30:
 2533              		.cfi_restore_state
 2534              	.LBB76:
1702:../freertos/queue.c **** 				{
 2535              		.loc 1 1702 5 is_stmt 1 view .LVU769
 2536              	@ ../freertos/queue.c:1702: 				if( xTicksToWait == ( TickType_t ) 0 )
1702:../freertos/queue.c **** 				{
 2537              		.loc 1 1702 7 is_stmt 0 view .LVU770
 2538 0646 019B     		ldr	r3, [sp, #4]	@ xTicksToWait, xTicksToWait
 2539              	.LVL215:
1702:../freertos/queue.c **** 				{
 2540              		.loc 1 1702 7 view .LVU771
 2541 0648 1BB9     		cbnz	r3, .L183	@ xTicksToWait,
1706:../freertos/queue.c **** 					traceQUEUE_PEEK_FAILED( pxQueue );
 2542              		.loc 1 1706 6 is_stmt 1 view .LVU772
 2543 064a FFF7FEFF 		bl	vPortExitCritical		@
 2544              	.LVL216:
1707:../freertos/queue.c **** 					return errQUEUE_EMPTY;
 2545              		.loc 1 1707 39 view .LVU773
1708:../freertos/queue.c **** 				}
 2546              		.loc 1 1708 6 view .LVU774
 2547              	.L184:
 2548              	@ ../freertos/queue.c:1708: 					return errQUEUE_EMPTY;
1708:../freertos/queue.c **** 				}
 2549              		.loc 1 1708 13 is_stmt 0 view .LVU775
 2550 064e 0020     		movs	r0, #0	@ <retval>,
 2551 0650 F7E7     		b	.L176		@
 2552              	.LVL217:
 2553              	.L183:
1710:../freertos/queue.c **** 				{
ARM GAS  /tmp/ccMyq1Ea.s 			page 104


 2554              		.loc 1 1710 10 is_stmt 1 view .LVU776
 2555              	@ ../freertos/queue.c:1710: 				else if( xEntryTimeSet == pdFALSE )
1710:../freertos/queue.c **** 				{
 2556              		.loc 1 1710 12 is_stmt 0 view .LVU777
 2557 0652 16B9     		cbnz	r6, .L185	@ xEntryTimeSet,
1715:../freertos/queue.c **** 					xEntryTimeSet = pdTRUE;
 2558              		.loc 1 1715 6 is_stmt 1 view .LVU778
 2559 0654 02A8     		add	r0, sp, #8	@ tmp165,,
 2560 0656 FFF7FEFF 		bl	vTaskInternalSetTimeOutState		@
 2561              	.LVL218:
1716:../freertos/queue.c **** 				}
 2562              		.loc 1 1716 6 view .LVU779
 2563              	.L185:
1721:../freertos/queue.c **** 				}
 2564              		.loc 1 1721 30 view .LVU780
 2565              	.LBE76:
1725:../freertos/queue.c **** 
 2566              		.loc 1 1725 3 view .LVU781
 2567 065a FFF7FEFF 		bl	vPortExitCritical		@
 2568              	.LVL219:
1730:../freertos/queue.c **** 		prvLockQueue( pxQueue );
 2569              		.loc 1 1730 3 view .LVU782
 2570 065e FFF7FEFF 		bl	vTaskSuspendAll		@
 2571              	.LVL220:
1731:../freertos/queue.c **** 
 2572              		.loc 1 1731 3 view .LVU783
 2573 0662 FFF7FEFF 		bl	vPortEnterCritical		@
 2574              	.LVL221:
1731:../freertos/queue.c **** 
 2575              		.loc 1 1731 3 discriminator 1 view .LVU784
 2576 0666 94F84430 		ldrb	r3, [r4, #68]	@ zero_extendqisi2	@ MEM[(struct Queue_t *)xQueue_23(D)].cRxLock, MEM[(struct Q
 2577 066a FF2B     		cmp	r3, #255	@ MEM[(struct Queue_t *)xQueue_23(D)].cRxLock,
1731:../freertos/queue.c **** 
 2578              		.loc 1 1731 3 discriminator 1 view .LVU785
 2579 066c 08BF     		it	eq
 2580 066e 84F84470 		strbeq	r7, [r4, #68]	@ tmp155, MEM[(struct Queue_t *)xQueue_23(D)].cRxLock
1731:../freertos/queue.c **** 
 2581              		.loc 1 1731 3 discriminator 3 view .LVU786
 2582 0672 94F84530 		ldrb	r3, [r4, #69]	@ zero_extendqisi2	@ MEM[(struct Queue_t *)xQueue_23(D)].cTxLock, MEM[(struct Q
 2583 0676 FF2B     		cmp	r3, #255	@ MEM[(struct Queue_t *)xQueue_23(D)].cTxLock,
1731:../freertos/queue.c **** 
 2584              		.loc 1 1731 3 discriminator 4 view .LVU787
 2585 0678 08BF     		it	eq
 2586 067a 84F84570 		strbeq	r7, [r4, #69]	@ tmp155, MEM[(struct Queue_t *)xQueue_23(D)].cTxLock
1731:../freertos/queue.c **** 
 2587              		.loc 1 1731 3 discriminator 6 view .LVU788
 2588 067e FFF7FEFF 		bl	vPortExitCritical		@
 2589              	.LVL222:
1734:../freertos/queue.c **** 		{
 2590              		.loc 1 1734 3 view .LVU789
 2591              	@ ../freertos/queue.c:1734: 		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1734:../freertos/queue.c **** 		{
 2592              		.loc 1 1734 7 is_stmt 0 view .LVU790
 2593 0682 01A9     		add	r1, sp, #4	@ tmp166,,
 2594 0684 02A8     		add	r0, sp, #8	@ tmp167,,
 2595 0686 FFF7FEFF 		bl	xTaskCheckForTimeOut		@
 2596              	.LVL223:
ARM GAS  /tmp/ccMyq1Ea.s 			page 105


 2597              	@ ../freertos/queue.c:1734: 		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1734:../freertos/queue.c **** 		{
 2598              		.loc 1 1734 5 discriminator 1 view .LVU791
 2599 068a 00BB     		cbnz	r0, .L188	@ tmp160,
1738:../freertos/queue.c **** 			{
 2600              		.loc 1 1738 4 is_stmt 1 view .LVU792
 2601              	@ ../freertos/queue.c:1738: 			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1738:../freertos/queue.c **** 			{
 2602              		.loc 1 1738 8 is_stmt 0 view .LVU793
 2603 068c 2046     		mov	r0, r4	@, xQueue
 2604 068e FFF7B7FC 		bl	prvIsQueueEmpty		@
 2605              	.LVL224:
 2606              	@ ../freertos/queue.c:1738: 			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1738:../freertos/queue.c **** 			{
 2607              		.loc 1 1738 6 discriminator 1 view .LVU794
 2608 0692 B0B1     		cbz	r0, .L189	@ tmp161,
1740:../freertos/queue.c **** 				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 2609              		.loc 1 1740 43 is_stmt 1 view .LVU795
1741:../freertos/queue.c **** 				prvUnlockQueue( pxQueue );
 2610              		.loc 1 1741 5 view .LVU796
 2611 0694 0199     		ldr	r1, [sp, #4]	@, xTicksToWait
 2612 0696 04F12400 		add	r0, r4, #36	@, xQueue,
 2613 069a FFF7FEFF 		bl	vTaskPlaceOnEventList		@
 2614              	.LVL225:
1742:../freertos/queue.c **** 				if( xTaskResumeAll() == pdFALSE )
 2615              		.loc 1 1742 5 view .LVU797
 2616 069e 2046     		mov	r0, r4	@, xQueue
 2617 06a0 FFF700FD 		bl	prvUnlockQueue		@
 2618              	.LVL226:
1743:../freertos/queue.c **** 				{
 2619              		.loc 1 1743 5 view .LVU798
 2620              	@ ../freertos/queue.c:1743: 				if( xTaskResumeAll() == pdFALSE )
1743:../freertos/queue.c **** 				{
 2621              		.loc 1 1743 9 is_stmt 0 view .LVU799
 2622 06a4 FFF7FEFF 		bl	xTaskResumeAll		@
 2623              	.LVL227:
 2624              	@ ../freertos/queue.c:1743: 				if( xTaskResumeAll() == pdFALSE )
1743:../freertos/queue.c **** 				{
 2625              		.loc 1 1743 7 discriminator 1 view .LVU800
 2626 06a8 48B9     		cbnz	r0, .L191	@ tmp162,
1745:../freertos/queue.c **** 				}
 2627              		.loc 1 1745 6 is_stmt 1 view .LVU801
 2628 06aa 4FF0E023 		mov	r3, #-536813568	@ tmp150,
 2629 06ae 4FF08052 		mov	r2, #268435456	@ tmp151,
 2630 06b2 C3F8042D 		str	r2, [r3, #3332]	@ tmp151, MEM[(volatile uint32_t *)3758157060B]
1745:../freertos/queue.c **** 				}
 2631              		.loc 1 1745 6 view .LVU802
 2632              		.syntax unified
 2633              	@ 1745 "../freertos/queue.c" 1
 2634 06b6 BFF34F8F 		dsb	
 2635              	@ 0 "" 2
1745:../freertos/queue.c **** 				}
 2636              		.loc 1 1745 6 view .LVU803
 2637              	@ 1745 "../freertos/queue.c" 1
 2638 06ba BFF36F8F 		isb
 2639              	@ 0 "" 2
1745:../freertos/queue.c **** 				}
ARM GAS  /tmp/ccMyq1Ea.s 			page 106


 2640              		.loc 1 1745 28 view .LVU804
 2641              		.thumb
 2642              		.syntax unified
 2643              	.L191:
 2644              	@ ../freertos/queue.c:1633: {
1633:../freertos/queue.c **** BaseType_t xEntryTimeSet = pdFALSE;
 2645              		.loc 1 1633 1 is_stmt 0 view .LVU805
 2646 06be 0126     		movs	r6, #1	@ xEntryTimeSet,
 2647 06c0 A1E7     		b	.L177		@
 2648              	.L189:
1756:../freertos/queue.c **** 				( void ) xTaskResumeAll();
 2649              		.loc 1 1756 5 is_stmt 1 view .LVU806
 2650 06c2 2046     		mov	r0, r4	@, xQueue
 2651 06c4 FFF7EEFC 		bl	prvUnlockQueue		@
 2652              	.LVL228:
1757:../freertos/queue.c **** 			}
 2653              		.loc 1 1757 5 view .LVU807
 2654              	@ ../freertos/queue.c:1757: 				( void ) xTaskResumeAll();
1757:../freertos/queue.c **** 			}
 2655              		.loc 1 1757 14 is_stmt 0 view .LVU808
 2656 06c8 FFF7FEFF 		bl	xTaskResumeAll		@
 2657              	.LVL229:
 2658 06cc F7E7     		b	.L191		@
 2659              	.L188:
1764:../freertos/queue.c **** 			( void ) xTaskResumeAll();
 2660              		.loc 1 1764 4 is_stmt 1 view .LVU809
 2661 06ce 2046     		mov	r0, r4	@, xQueue
 2662 06d0 FFF7E8FC 		bl	prvUnlockQueue		@
 2663              	.LVL230:
1765:../freertos/queue.c **** 
 2664              		.loc 1 1765 4 view .LVU810
 2665              	@ ../freertos/queue.c:1765: 			( void ) xTaskResumeAll();
1765:../freertos/queue.c **** 
 2666              		.loc 1 1765 13 is_stmt 0 view .LVU811
 2667 06d4 FFF7FEFF 		bl	xTaskResumeAll		@
 2668              	.LVL231:
1767:../freertos/queue.c **** 			{
 2669              		.loc 1 1767 4 is_stmt 1 view .LVU812
 2670              	@ ../freertos/queue.c:1767: 			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1767:../freertos/queue.c **** 			{
 2671              		.loc 1 1767 8 is_stmt 0 view .LVU813
 2672 06d8 2046     		mov	r0, r4	@, xQueue
 2673 06da FFF791FC 		bl	prvIsQueueEmpty		@
 2674              	.LVL232:
 2675              	@ ../freertos/queue.c:1767: 			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1767:../freertos/queue.c **** 			{
 2676              		.loc 1 1767 6 discriminator 1 view .LVU814
 2677 06de 0028     		cmp	r0, #0	@ tmp163
 2678 06e0 EDD0     		beq	.L191	@
 2679 06e2 B4E7     		b	.L184		@
 2680              		.cfi_endproc
 2681              	.LFE18:
 2682              		.size	xQueuePeek, .-xQueuePeek
 2683              		.align	1
 2684              		.global	xQueueReceiveFromISR
 2685              		.syntax unified
 2686              		.thumb
ARM GAS  /tmp/ccMyq1Ea.s 			page 107


 2687              		.thumb_func
 2688              		.type	xQueueReceiveFromISR, %function
 2689              	xQueueReceiveFromISR:
 2690              	.LVL233:
 2691              	.LFB19:
1782:../freertos/queue.c **** BaseType_t xReturn;
 2692              		.loc 1 1782 1 is_stmt 1 view -0
 2693              		.cfi_startproc
 2694              		@ args = 0, pretend = 0, frame = 0
 2695              		@ frame_needed = 0, uses_anonymous_args = 0
1783:../freertos/queue.c **** UBaseType_t uxSavedInterruptStatus;
 2696              		.loc 1 1783 1 view .LVU816
1784:../freertos/queue.c **** Queue_t * const pxQueue = xQueue;
 2697              		.loc 1 1784 1 view .LVU817
1785:../freertos/queue.c **** 
 2698              		.loc 1 1785 1 view .LVU818
1787:../freertos/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 2699              		.loc 1 1787 25 view .LVU819
1788:../freertos/queue.c **** 
 2700              		.loc 1 1788 92 view .LVU820
1804:../freertos/queue.c **** 
 2701              		.loc 1 1804 44 view .LVU821
1806:../freertos/queue.c **** 	{
 2702              		.loc 1 1806 2 view .LVU822
 2703              	.LBB77:
 2704              	.LBI77:
 207:../freertos/portable/GCC/ARM_CM3/portmacro.h **** {
 2705              		.loc 2 207 34 view .LVU823
 2706              	.LBB78:
 209:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 
 2707              		.loc 2 209 1 view .LVU824
 211:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	(
 2708              		.loc 2 211 2 view .LVU825
 2709              	.LBE78:
 2710              	.LBE77:
 2711              	@ ../freertos/queue.c:1782: {
1782:../freertos/queue.c **** BaseType_t xReturn;
 2712              		.loc 1 1782 1 is_stmt 0 view .LVU826
 2713 06e4 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}	@
 2714              	.LCFI31:
 2715              		.cfi_def_cfa_offset 24
 2716              		.cfi_offset 4, -24
 2717              		.cfi_offset 5, -20
 2718              		.cfi_offset 6, -16
 2719              		.cfi_offset 7, -12
 2720              		.cfi_offset 8, -8
 2721              		.cfi_offset 14, -4
 2722              	@ ../freertos/queue.c:1782: {
1782:../freertos/queue.c **** BaseType_t xReturn;
 2723              		.loc 1 1782 1 view .LVU827
 2724 06e8 0546     		mov	r5, r0	@ xQueue, tmp141
 2725 06ea 9046     		mov	r8, r2	@ pxHigherPriorityTaskWoken, tmp142
 2726              	.LBB80:
 2727              	.LBB79:
 2728              	@ ../freertos/portable/GCC/ARM_CM3/portmacro.h:211: 	__asm volatile
 211:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	(
 2729              		.loc 2 211 2 view .LVU828
ARM GAS  /tmp/ccMyq1Ea.s 			page 108


 2730              		.syntax unified
 2731              	@ 211 "../freertos/portable/GCC/ARM_CM3/portmacro.h" 1
 2732 06ec EFF31187 			mrs r7, basepri												@ ulOriginalBASEPRI
 2733 06f0 4FF01003 		mov r3, #16													@ ulNewBASEPRI,
 2734 06f4 83F31188 		msr basepri, r3												@ ulNewBASEPRI
 2735 06f8 BFF36F8F 		isb														
 2736 06fc BFF34F8F 		dsb														
 2737              	
 2738              	@ 0 "" 2
 2739              	.LVL234:
 223:../freertos/portable/GCC/ARM_CM3/portmacro.h **** }
 2740              		.loc 2 223 2 is_stmt 1 view .LVU829
 223:../freertos/portable/GCC/ARM_CM3/portmacro.h **** }
 2741              		.loc 2 223 2 is_stmt 0 view .LVU830
 2742              		.thumb
 2743              		.syntax unified
 2744              	.LBE79:
 2745              	.LBE80:
 2746              	.LBB81:
1808:../freertos/queue.c **** 
 2747              		.loc 1 1808 3 is_stmt 1 view .LVU831
 2748              	@ ../freertos/queue.c:1808: 		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1808:../freertos/queue.c **** 
 2749              		.loc 1 1808 21 is_stmt 0 view .LVU832
 2750 0700 846B     		ldr	r4, [r0, #56]	@ uxMessagesWaiting, MEM[(struct Queue_t *)xQueue_11(D)].uxMessagesWaiting
 2751              	.LVL235:
1811:../freertos/queue.c **** 		{
 2752              		.loc 1 1811 3 is_stmt 1 view .LVU833
 2753              	@ ../freertos/queue.c:1811: 		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1811:../freertos/queue.c **** 		{
 2754              		.loc 1 1811 5 is_stmt 0 view .LVU834
 2755 0702 FCB1     		cbz	r4, .L204	@ uxMessagesWaiting,
 2756              	.LBB82:
1813:../freertos/queue.c **** 
 2757              		.loc 1 1813 4 is_stmt 1 view .LVU835
 2758              	@ ../freertos/queue.c:1813: 			const int8_t cRxLock = pxQueue->cRxLock;
1813:../freertos/queue.c **** 
 2759              		.loc 1 1813 17 is_stmt 0 view .LVU836
 2760 0704 90F84460 		ldrb	r6, [r0, #68]	@ zero_extendqisi2	@ MEM[(struct Queue_t *)xQueue_11(D)].cRxLock, MEM[(struct Q
 2761              	@ ../freertos/queue.c:1818: 			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
1818:../freertos/queue.c **** 
 2762              		.loc 1 1818 51 view .LVU837
 2763 0708 013C     		subs	r4, r4, #1	@ _1, uxMessagesWaiting,
 2764              	.LVL236:
 2765              	@ ../freertos/queue.c:1813: 			const int8_t cRxLock = pxQueue->cRxLock;
1813:../freertos/queue.c **** 
 2766              		.loc 1 1813 17 view .LVU838
 2767 070a 76B2     		sxtb	r6, r6	@ cRxLock, MEM[(struct Queue_t *)xQueue_11(D)].cRxLock
 2768              	.LVL237:
1815:../freertos/queue.c **** 
 2769              		.loc 1 1815 42 is_stmt 1 view .LVU839
1817:../freertos/queue.c **** 			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 2770              		.loc 1 1817 4 view .LVU840
 2771 070c FFF7B6FC 		bl	prvCopyDataFromQueue		@
 2772              	.LVL238:
1818:../freertos/queue.c **** 
 2773              		.loc 1 1818 4 view .LVU841
ARM GAS  /tmp/ccMyq1Ea.s 			page 109


 2774              	@ ../freertos/queue.c:1824: 			if( cRxLock == queueUNLOCKED )
1824:../freertos/queue.c **** 			{
 2775              		.loc 1 1824 6 is_stmt 0 view .LVU842
 2776 0710 731C     		adds	r3, r6, #1	@, cRxLock,
 2777              	@ ../freertos/queue.c:1818: 			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
1818:../freertos/queue.c **** 
 2778              		.loc 1 1818 31 view .LVU843
 2779 0712 AC63     		str	r4, [r5, #56]	@ _1, MEM[(struct Queue_t *)xQueue_11(D)].uxMessagesWaiting
1824:../freertos/queue.c **** 			{
 2780              		.loc 1 1824 4 is_stmt 1 view .LVU844
 2781              	@ ../freertos/queue.c:1824: 			if( cRxLock == queueUNLOCKED )
1824:../freertos/queue.c **** 			{
 2782              		.loc 1 1824 6 is_stmt 0 view .LVU845
 2783 0714 11D1     		bne	.L200		@,
1826:../freertos/queue.c **** 				{
 2784              		.loc 1 1826 5 is_stmt 1 view .LVU846
 2785              	@ ../freertos/queue.c:1826: 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFAL
1826:../freertos/queue.c **** 				{
 2786              		.loc 1 1826 9 is_stmt 0 view .LVU847
 2787 0716 2B69     		ldr	r3, [r5, #16]	@ _2, MEM[(struct Queue_t *)xQueue_11(D)].xTasksWaitingToSend.uxNumberOfItems
 2788              	@ ../freertos/queue.c:1826: 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFAL
1826:../freertos/queue.c **** 				{
 2789              		.loc 1 1826 7 view .LVU848
 2790 0718 53B1     		cbz	r3, .L202	@ _2,
1828:../freertos/queue.c **** 					{
 2791              		.loc 1 1828 6 is_stmt 1 view .LVU849
 2792              	@ ../freertos/queue.c:1828: 					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) 
1828:../freertos/queue.c **** 					{
 2793              		.loc 1 1828 10 is_stmt 0 view .LVU850
 2794 071a 05F11000 		add	r0, r5, #16	@, xQueue,
 2795 071e FFF7FEFF 		bl	xTaskRemoveFromEventList		@
 2796              	.LVL239:
 2797              	@ ../freertos/queue.c:1828: 					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) 
1828:../freertos/queue.c **** 					{
 2798              		.loc 1 1828 8 discriminator 1 view .LVU851
 2799 0722 28B1     		cbz	r0, .L202	@ tmp143,
1832:../freertos/queue.c **** 						{
 2800              		.loc 1 1832 7 is_stmt 1 view .LVU852
 2801              	@ ../freertos/queue.c:1832: 						if( pxHigherPriorityTaskWoken != NULL )
1832:../freertos/queue.c **** 						{
 2802              		.loc 1 1832 9 is_stmt 0 view .LVU853
 2803 0724 B8F1000F 		cmp	r8, #0	@ pxHigherPriorityTaskWoken
 2804 0728 02D0     		beq	.L202	@
1834:../freertos/queue.c **** 						}
 2805              		.loc 1 1834 8 is_stmt 1 view .LVU854
 2806              	@ ../freertos/queue.c:1834: 							*pxHigherPriorityTaskWoken = pdTRUE;
1834:../freertos/queue.c **** 						}
 2807              		.loc 1 1834 35 is_stmt 0 view .LVU855
 2808 072a 0123     		movs	r3, #1	@ tmp135,
 2809 072c C8F80030 		str	r3, [r8]	@ tmp135, *pxHigherPriorityTaskWoken_20(D)
 2810              	.LVL240:
 2811              	.L202:
 2812              	@ ../freertos/queue.c:1858: 			xReturn = pdPASS;
1858:../freertos/queue.c **** 		}
 2813              		.loc 1 1858 12 view .LVU856
 2814 0730 0120     		movs	r0, #1	@ <retval>,
 2815              	.LVL241:
ARM GAS  /tmp/ccMyq1Ea.s 			page 110


 2816              	.L199:
1858:../freertos/queue.c **** 		}
 2817              		.loc 1 1858 12 view .LVU857
 2818              	.LBE82:
1863:../freertos/queue.c **** 		}
 2819              		.loc 1 1863 49 is_stmt 1 view .LVU858
 2820              	.LBE81:
1866:../freertos/queue.c **** 
 2821              		.loc 1 1866 2 view .LVU859
 2822              	.LBB84:
 2823              	.LBI84:
 227:../freertos/portable/GCC/ARM_CM3/portmacro.h **** {
 2824              		.loc 2 227 30 view .LVU860
 2825              	.LBB85:
 2826              		.loc 2 229 2 view .LVU861
 2827              		.syntax unified
 2828              	@ 229 "../freertos/portable/GCC/ARM_CM3/portmacro.h" 1
 2829 0732 87F31188 			msr basepri, r7		@ ulOriginalBASEPRI
 2830              	@ 0 "" 2
 2831              	.LVL242:
 2832              		.loc 2 229 2 is_stmt 0 view .LVU862
 2833              		.thumb
 2834              		.syntax unified
 2835              	.LBE85:
 2836              	.LBE84:
1868:../freertos/queue.c **** }
 2837              		.loc 1 1868 2 is_stmt 1 view .LVU863
 2838              	@ ../freertos/queue.c:1869: }
1869:../freertos/queue.c **** /*-----------------------------------------------------------*/
 2839              		.loc 1 1869 1 is_stmt 0 view .LVU864
 2840 0736 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}	@
 2841              	.LVL243:
 2842              	.L200:
 2843              	.LBB86:
 2844              	.LBB83:
1855:../freertos/queue.c **** 			}
 2845              		.loc 1 1855 5 is_stmt 1 view .LVU865
 2846              	@ ../freertos/queue.c:1855: 				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
1855:../freertos/queue.c **** 			}
 2847              		.loc 1 1855 45 is_stmt 0 view .LVU866
 2848 073a 0136     		adds	r6, r6, #1	@ tmp137, cRxLock,
 2849              	.LVL244:
 2850              	@ ../freertos/queue.c:1855: 				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
1855:../freertos/queue.c **** 			}
 2851              		.loc 1 1855 24 view .LVU867
 2852 073c 76B2     		sxtb	r6, r6	@ _7, tmp137
 2853              	.LVL245:
 2854              	@ ../freertos/queue.c:1855: 				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
1855:../freertos/queue.c **** 			}
 2855              		.loc 1 1855 22 view .LVU868
 2856 073e 85F84460 		strb	r6, [r5, #68]	@ _7, MEM[(struct Queue_t *)xQueue_11(D)].cRxLock
 2857 0742 F5E7     		b	.L202		@
 2858              	.LVL246:
 2859              	.L204:
1855:../freertos/queue.c **** 			}
 2860              		.loc 1 1855 22 view .LVU869
 2861              	.LBE83:
ARM GAS  /tmp/ccMyq1Ea.s 			page 111


 2862              	@ ../freertos/queue.c:1862: 			xReturn = pdFAIL;
1862:../freertos/queue.c **** 			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
 2863              		.loc 1 1862 12 view .LVU870
 2864 0744 2046     		mov	r0, r4	@ <retval>, uxMessagesWaiting
 2865              	.LVL247:
1862:../freertos/queue.c **** 			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
 2866              		.loc 1 1862 12 view .LVU871
 2867 0746 F4E7     		b	.L199		@
 2868              	.LBE86:
 2869              		.cfi_endproc
 2870              	.LFE19:
 2871              		.size	xQueueReceiveFromISR, .-xQueueReceiveFromISR
 2872              		.align	1
 2873              		.global	xQueuePeekFromISR
 2874              		.syntax unified
 2875              		.thumb
 2876              		.thumb_func
 2877              		.type	xQueuePeekFromISR, %function
 2878              	xQueuePeekFromISR:
 2879              	.LVL248:
 2880              	.LFB20:
1873:../freertos/queue.c **** BaseType_t xReturn;
 2881              		.loc 1 1873 1 is_stmt 1 view -0
 2882              		.cfi_startproc
 2883              		@ args = 0, pretend = 0, frame = 0
 2884              		@ frame_needed = 0, uses_anonymous_args = 0
1874:../freertos/queue.c **** UBaseType_t uxSavedInterruptStatus;
 2885              		.loc 1 1874 1 view .LVU873
1875:../freertos/queue.c **** int8_t *pcOriginalReadPosition;
 2886              		.loc 1 1875 1 view .LVU874
1876:../freertos/queue.c **** Queue_t * const pxQueue = xQueue;
 2887              		.loc 1 1876 1 view .LVU875
1877:../freertos/queue.c **** 
 2888              		.loc 1 1877 1 view .LVU876
1879:../freertos/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 2889              		.loc 1 1879 25 view .LVU877
1880:../freertos/queue.c **** 	configASSERT( pxQueue->uxItemSize != 0 ); /* Can't peek a semaphore. */
 2890              		.loc 1 1880 92 view .LVU878
1881:../freertos/queue.c **** 
 2891              		.loc 1 1881 42 view .LVU879
1897:../freertos/queue.c **** 
 2892              		.loc 1 1897 44 view .LVU880
1899:../freertos/queue.c **** 	{
 2893              		.loc 1 1899 2 view .LVU881
 2894              	.LBB87:
 2895              	.LBI87:
 207:../freertos/portable/GCC/ARM_CM3/portmacro.h **** {
 2896              		.loc 2 207 34 view .LVU882
 2897              	.LBB88:
 209:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 
 2898              		.loc 2 209 1 view .LVU883
 211:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	(
 2899              		.loc 2 211 2 view .LVU884
 2900              	.LBE88:
 2901              	.LBE87:
 2902              	@ ../freertos/queue.c:1873: {
1873:../freertos/queue.c **** BaseType_t xReturn;
ARM GAS  /tmp/ccMyq1Ea.s 			page 112


 2903              		.loc 1 1873 1 is_stmt 0 view .LVU885
 2904 0748 70B5     		push	{r4, r5, r6, lr}	@
 2905              	.LCFI32:
 2906              		.cfi_def_cfa_offset 16
 2907              		.cfi_offset 4, -16
 2908              		.cfi_offset 5, -12
 2909              		.cfi_offset 6, -8
 2910              		.cfi_offset 14, -4
 2911              	@ ../freertos/queue.c:1873: {
1873:../freertos/queue.c **** BaseType_t xReturn;
 2912              		.loc 1 1873 1 view .LVU886
 2913 074a 0446     		mov	r4, r0	@ xQueue, tmp124
 2914              	.LBB90:
 2915              	.LBB89:
 2916              	@ ../freertos/portable/GCC/ARM_CM3/portmacro.h:211: 	__asm volatile
 211:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	(
 2917              		.loc 2 211 2 view .LVU887
 2918              		.syntax unified
 2919              	@ 211 "../freertos/portable/GCC/ARM_CM3/portmacro.h" 1
 2920 074c EFF31185 			mrs r5, basepri												@ ulOriginalBASEPRI
 2921 0750 4FF01003 		mov r3, #16													@ ulNewBASEPRI,
 2922 0754 83F31188 		msr basepri, r3												@ ulNewBASEPRI
 2923 0758 BFF36F8F 		isb														
 2924 075c BFF34F8F 		dsb														
 2925              	
 2926              	@ 0 "" 2
 2927              	.LVL249:
 223:../freertos/portable/GCC/ARM_CM3/portmacro.h **** }
 2928              		.loc 2 223 2 is_stmt 1 view .LVU888
 223:../freertos/portable/GCC/ARM_CM3/portmacro.h **** }
 2929              		.loc 2 223 2 is_stmt 0 view .LVU889
 2930              		.thumb
 2931              		.syntax unified
 2932              	.LBE89:
 2933              	.LBE90:
1902:../freertos/queue.c **** 		{
 2934              		.loc 1 1902 3 is_stmt 1 view .LVU890
 2935              	@ ../freertos/queue.c:1902: 		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
1902:../freertos/queue.c **** 		{
 2936              		.loc 1 1902 14 is_stmt 0 view .LVU891
 2937 0760 836B     		ldr	r3, [r0, #56]	@ _1, MEM[(struct Queue_t *)xQueue_4(D)].uxMessagesWaiting
 2938              	@ ../freertos/queue.c:1902: 		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
1902:../freertos/queue.c **** 		{
 2939              		.loc 1 1902 5 view .LVU892
 2940 0762 3BB1     		cbz	r3, .L213	@ _1,
1904:../freertos/queue.c **** 
 2941              		.loc 1 1904 39 is_stmt 1 view .LVU893
1908:../freertos/queue.c **** 			prvCopyDataFromQueue( pxQueue, pvBuffer );
 2942              		.loc 1 1908 4 view .LVU894
 2943              	@ ../freertos/queue.c:1908: 			pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
1908:../freertos/queue.c **** 			prvCopyDataFromQueue( pxQueue, pvBuffer );
 2944              		.loc 1 1908 27 is_stmt 0 view .LVU895
 2945 0764 C668     		ldr	r6, [r0, #12]	@ pcOriginalReadPosition, MEM[(struct Queue_t *)xQueue_4(D)].u.xQueue.pcReadFrom
 2946              	.LVL250:
1909:../freertos/queue.c **** 			pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
 2947              		.loc 1 1909 4 is_stmt 1 view .LVU896
 2948 0766 FFF789FC 		bl	prvCopyDataFromQueue		@
ARM GAS  /tmp/ccMyq1Ea.s 			page 113


 2949              	.LVL251:
1910:../freertos/queue.c **** 
 2950              		.loc 1 1910 4 view .LVU897
 2951              	@ ../freertos/queue.c:1912: 			xReturn = pdPASS;
1912:../freertos/queue.c **** 		}
 2952              		.loc 1 1912 12 is_stmt 0 view .LVU898
 2953 076a 0120     		movs	r0, #1	@ <retval>,
 2954              	@ ../freertos/queue.c:1910: 			pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
1910:../freertos/queue.c **** 
 2955              		.loc 1 1910 33 view .LVU899
 2956 076c E660     		str	r6, [r4, #12]	@ pcOriginalReadPosition, MEM[(struct Queue_t *)xQueue_4(D)].u.xQueue.pcReadFrom
1912:../freertos/queue.c **** 		}
 2957              		.loc 1 1912 4 is_stmt 1 view .LVU900
 2958              	.LVL252:
 2959              	.L212:
1917:../freertos/queue.c **** 		}
 2960              		.loc 1 1917 46 view .LVU901
1920:../freertos/queue.c **** 
 2961              		.loc 1 1920 2 view .LVU902
 2962              	.LBB91:
 2963              	.LBI91:
 227:../freertos/portable/GCC/ARM_CM3/portmacro.h **** {
 2964              		.loc 2 227 30 view .LVU903
 2965              	.LBB92:
 2966              		.loc 2 229 2 view .LVU904
 2967              		.syntax unified
 2968              	@ 229 "../freertos/portable/GCC/ARM_CM3/portmacro.h" 1
 2969 076e 85F31188 			msr basepri, r5		@ ulOriginalBASEPRI
 2970              	@ 0 "" 2
 2971              	.LVL253:
 2972              		.loc 2 229 2 is_stmt 0 view .LVU905
 2973              		.thumb
 2974              		.syntax unified
 2975              	.LBE92:
 2976              	.LBE91:
1922:../freertos/queue.c **** }
 2977              		.loc 1 1922 2 is_stmt 1 view .LVU906
 2978              	@ ../freertos/queue.c:1923: }
1923:../freertos/queue.c **** /*-----------------------------------------------------------*/
 2979              		.loc 1 1923 1 is_stmt 0 view .LVU907
 2980 0772 70BD     		pop	{r4, r5, r6, pc}	@
 2981              	.LVL254:
 2982              	.L213:
 2983              	@ ../freertos/queue.c:1916: 			xReturn = pdFAIL;
1916:../freertos/queue.c **** 			traceQUEUE_PEEK_FROM_ISR_FAILED( pxQueue );
 2984              		.loc 1 1916 12 view .LVU908
 2985 0774 1846     		mov	r0, r3	@ <retval>, _1
 2986              	.LVL255:
1916:../freertos/queue.c **** 			traceQUEUE_PEEK_FROM_ISR_FAILED( pxQueue );
 2987              		.loc 1 1916 12 view .LVU909
 2988 0776 FAE7     		b	.L212		@
 2989              		.cfi_endproc
 2990              	.LFE20:
 2991              		.size	xQueuePeekFromISR, .-xQueuePeekFromISR
 2992              		.align	1
 2993              		.global	uxQueueMessagesWaiting
 2994              		.syntax unified
ARM GAS  /tmp/ccMyq1Ea.s 			page 114


 2995              		.thumb
 2996              		.thumb_func
 2997              		.type	uxQueueMessagesWaiting, %function
 2998              	uxQueueMessagesWaiting:
 2999              	.LVL256:
 3000              	.LFB21:
1927:../freertos/queue.c **** UBaseType_t uxReturn;
 3001              		.loc 1 1927 1 is_stmt 1 view -0
 3002              		.cfi_startproc
 3003              		@ args = 0, pretend = 0, frame = 0
 3004              		@ frame_needed = 0, uses_anonymous_args = 0
1928:../freertos/queue.c **** 
 3005              		.loc 1 1928 1 view .LVU911
1930:../freertos/queue.c **** 
 3006              		.loc 1 1930 24 view .LVU912
1932:../freertos/queue.c **** 	{
 3007              		.loc 1 1932 2 view .LVU913
 3008              	@ ../freertos/queue.c:1927: {
1927:../freertos/queue.c **** UBaseType_t uxReturn;
 3009              		.loc 1 1927 1 is_stmt 0 view .LVU914
 3010 0778 10B5     		push	{r4, lr}	@
 3011              	.LCFI33:
 3012              		.cfi_def_cfa_offset 8
 3013              		.cfi_offset 4, -8
 3014              		.cfi_offset 14, -4
 3015              	@ ../freertos/queue.c:1927: {
1927:../freertos/queue.c **** UBaseType_t uxReturn;
 3016              		.loc 1 1927 1 view .LVU915
 3017 077a 0446     		mov	r4, r0	@ xQueue, tmp117
 3018              	@ ../freertos/queue.c:1932: 	taskENTER_CRITICAL();
1932:../freertos/queue.c **** 	{
 3019              		.loc 1 1932 2 view .LVU916
 3020 077c FFF7FEFF 		bl	vPortEnterCritical		@
 3021              	.LVL257:
1934:../freertos/queue.c **** 	}
 3022              		.loc 1 1934 3 is_stmt 1 view .LVU917
 3023              	@ ../freertos/queue.c:1934: 		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
1934:../freertos/queue.c **** 	}
 3024              		.loc 1 1934 12 is_stmt 0 view .LVU918
 3025 0780 A46B     		ldr	r4, [r4, #56]	@ <retval>, MEM[(struct Queue_t *)xQueue_3(D)].uxMessagesWaiting
 3026              	.LVL258:
1936:../freertos/queue.c **** 
 3027              		.loc 1 1936 2 is_stmt 1 view .LVU919
 3028 0782 FFF7FEFF 		bl	vPortExitCritical		@
 3029              	.LVL259:
1938:../freertos/queue.c **** } /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 3030              		.loc 1 1938 2 view .LVU920
 3031              	@ ../freertos/queue.c:1939: } /*lint !e818 Pointer cannot be declared const as xQueue is a typedef 
1939:../freertos/queue.c **** /*-----------------------------------------------------------*/
 3032              		.loc 1 1939 1 is_stmt 0 view .LVU921
 3033 0786 2046     		mov	r0, r4	@, <retval>
 3034 0788 10BD     		pop	{r4, pc}	@
1939:../freertos/queue.c **** /*-----------------------------------------------------------*/
 3035              		.loc 1 1939 1 view .LVU922
 3036              		.cfi_endproc
 3037              	.LFE21:
 3038              		.size	uxQueueMessagesWaiting, .-uxQueueMessagesWaiting
ARM GAS  /tmp/ccMyq1Ea.s 			page 115


 3039              		.align	1
 3040              		.global	uxQueueSpacesAvailable
 3041              		.syntax unified
 3042              		.thumb
 3043              		.thumb_func
 3044              		.type	uxQueueSpacesAvailable, %function
 3045              	uxQueueSpacesAvailable:
 3046              	.LVL260:
 3047              	.LFB22:
1943:../freertos/queue.c **** UBaseType_t uxReturn;
 3048              		.loc 1 1943 1 is_stmt 1 view -0
 3049              		.cfi_startproc
 3050              		@ args = 0, pretend = 0, frame = 0
 3051              		@ frame_needed = 0, uses_anonymous_args = 0
1944:../freertos/queue.c **** Queue_t * const pxQueue = xQueue;
 3052              		.loc 1 1944 1 view .LVU924
1945:../freertos/queue.c **** 
 3053              		.loc 1 1945 1 view .LVU925
 3054              	@ ../freertos/queue.c:1943: {
1943:../freertos/queue.c **** UBaseType_t uxReturn;
 3055              		.loc 1 1943 1 is_stmt 0 view .LVU926
 3056 078a 10B5     		push	{r4, lr}	@
 3057              	.LCFI34:
 3058              		.cfi_def_cfa_offset 8
 3059              		.cfi_offset 4, -8
 3060              		.cfi_offset 14, -4
 3061              	@ ../freertos/queue.c:1943: {
1943:../freertos/queue.c **** UBaseType_t uxReturn;
 3062              		.loc 1 1943 1 view .LVU927
 3063 078c 0446     		mov	r4, r0	@ xQueue, tmp120
 3064              	.LVL261:
1947:../freertos/queue.c **** 
 3065              		.loc 1 1947 25 is_stmt 1 view .LVU928
1949:../freertos/queue.c **** 	{
 3066              		.loc 1 1949 2 view .LVU929
 3067 078e FFF7FEFF 		bl	vPortEnterCritical		@
 3068              	.LVL262:
1951:../freertos/queue.c **** 	}
 3069              		.loc 1 1951 3 view .LVU930
 3070              	@ ../freertos/queue.c:1951: 		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
1951:../freertos/queue.c **** 	}
 3071              		.loc 1 1951 41 is_stmt 0 view .LVU931
 3072 0792 A36B     		ldr	r3, [r4, #56]	@ _2, MEM[(struct Queue_t *)xQueue_3(D)].uxMessagesWaiting
 3073              	@ ../freertos/queue.c:1951: 		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
1951:../freertos/queue.c **** 	}
 3074              		.loc 1 1951 12 view .LVU932
 3075 0794 E46B     		ldr	r4, [r4, #60]	@ MEM[(struct Queue_t *)xQueue_3(D)].uxLength, MEM[(struct Queue_t *)xQueue_3(D)
 3076              	.LVL263:
1951:../freertos/queue.c **** 	}
 3077              		.loc 1 1951 12 view .LVU933
 3078 0796 E41A     		subs	r4, r4, r3	@ <retval>, MEM[(struct Queue_t *)xQueue_3(D)].uxLength, _2
 3079              	.LVL264:
1953:../freertos/queue.c **** 
 3080              		.loc 1 1953 2 is_stmt 1 view .LVU934
 3081 0798 FFF7FEFF 		bl	vPortExitCritical		@
 3082              	.LVL265:
1955:../freertos/queue.c **** } /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
ARM GAS  /tmp/ccMyq1Ea.s 			page 116


 3083              		.loc 1 1955 2 view .LVU935
 3084              	@ ../freertos/queue.c:1956: } /*lint !e818 Pointer cannot be declared const as xQueue is a typedef 
1956:../freertos/queue.c **** /*-----------------------------------------------------------*/
 3085              		.loc 1 1956 1 is_stmt 0 view .LVU936
 3086 079c 2046     		mov	r0, r4	@, <retval>
 3087 079e 10BD     		pop	{r4, pc}	@
1956:../freertos/queue.c **** /*-----------------------------------------------------------*/
 3088              		.loc 1 1956 1 view .LVU937
 3089              		.cfi_endproc
 3090              	.LFE22:
 3091              		.size	uxQueueSpacesAvailable, .-uxQueueSpacesAvailable
 3092              		.align	1
 3093              		.global	uxQueueMessagesWaitingFromISR
 3094              		.syntax unified
 3095              		.thumb
 3096              		.thumb_func
 3097              		.type	uxQueueMessagesWaitingFromISR, %function
 3098              	uxQueueMessagesWaitingFromISR:
 3099              	.LVL266:
 3100              	.LFB23:
1960:../freertos/queue.c **** UBaseType_t uxReturn;
 3101              		.loc 1 1960 1 is_stmt 1 view -0
 3102              		.cfi_startproc
 3103              		@ args = 0, pretend = 0, frame = 0
 3104              		@ frame_needed = 0, uses_anonymous_args = 0
 3105              		@ link register save eliminated.
1961:../freertos/queue.c **** Queue_t * const pxQueue = xQueue;
 3106              		.loc 1 1961 1 view .LVU939
1962:../freertos/queue.c **** 
 3107              		.loc 1 1962 1 view .LVU940
1964:../freertos/queue.c **** 	uxReturn = pxQueue->uxMessagesWaiting;
 3108              		.loc 1 1964 25 view .LVU941
1965:../freertos/queue.c **** 
 3109              		.loc 1 1965 2 view .LVU942
 3110              	@ ../freertos/queue.c:1965: 	uxReturn = pxQueue->uxMessagesWaiting;
1965:../freertos/queue.c **** 
 3111              		.loc 1 1965 11 is_stmt 0 view .LVU943
 3112 07a0 806B     		ldr	r0, [r0, #56]	@ <retval>, MEM[(struct Queue_t *)xQueue_1(D)].uxMessagesWaiting
 3113              	.LVL267:
1967:../freertos/queue.c **** } /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 3114              		.loc 1 1967 2 is_stmt 1 view .LVU944
 3115              	@ ../freertos/queue.c:1968: } /*lint !e818 Pointer cannot be declared const as xQueue is a typedef 
1968:../freertos/queue.c **** /*-----------------------------------------------------------*/
 3116              		.loc 1 1968 1 is_stmt 0 view .LVU945
 3117 07a2 7047     		bx	lr	@
 3118              		.cfi_endproc
 3119              	.LFE23:
 3120              		.size	uxQueueMessagesWaitingFromISR, .-uxQueueMessagesWaitingFromISR
 3121              		.align	1
 3122              		.global	vQueueDelete
 3123              		.syntax unified
 3124              		.thumb
 3125              		.thumb_func
 3126              		.type	vQueueDelete, %function
 3127              	vQueueDelete:
 3128              	.LVL268:
 3129              	.LFB24:
ARM GAS  /tmp/ccMyq1Ea.s 			page 117


1972:../freertos/queue.c **** Queue_t * const pxQueue = xQueue;
 3130              		.loc 1 1972 1 is_stmt 1 view -0
 3131              		.cfi_startproc
 3132              		@ args = 0, pretend = 0, frame = 0
 3133              		@ frame_needed = 0, uses_anonymous_args = 0
 3134              		@ link register save eliminated.
1973:../freertos/queue.c **** 
 3135              		.loc 1 1973 1 view .LVU947
1975:../freertos/queue.c **** 	traceQUEUE_DELETE( pxQueue );
 3136              		.loc 1 1975 25 view .LVU948
1976:../freertos/queue.c **** 
 3137              		.loc 1 1976 30 view .LVU949
1988:../freertos/queue.c **** 	}
 3138              		.loc 1 1988 3 view .LVU950
 3139 07a4 FFF7FEBF 		b	vPortFree		@
 3140              	.LVL269:
1988:../freertos/queue.c **** 	}
 3141              		.loc 1 1988 3 is_stmt 0 view .LVU951
 3142              		.cfi_endproc
 3143              	.LFE24:
 3144              		.size	vQueueDelete, .-vQueueDelete
 3145              		.align	1
 3146              		.global	uxQueueGetQueueNumber
 3147              		.syntax unified
 3148              		.thumb
 3149              		.thumb_func
 3150              		.type	uxQueueGetQueueNumber, %function
 3151              	uxQueueGetQueueNumber:
 3152              	.LVL270:
 3153              	.LFB25:
2016:../freertos/queue.c **** 		return ( ( Queue_t * ) xQueue )->uxQueueNumber;
 3154              		.loc 1 2016 2 is_stmt 1 view -0
 3155              		.cfi_startproc
 3156              		@ args = 0, pretend = 0, frame = 0
 3157              		@ frame_needed = 0, uses_anonymous_args = 0
 3158              		@ link register save eliminated.
2017:../freertos/queue.c **** 	}
 3159              		.loc 1 2017 3 view .LVU953
 3160              	@ ../freertos/queue.c:2018: 	}
2018:../freertos/queue.c **** 
 3161              		.loc 1 2018 2 is_stmt 0 view .LVU954
 3162 07a8 806C     		ldr	r0, [r0, #72]	@, MEM[(struct Queue_t *)xQueue_2(D)].uxQueueNumber
 3163              	.LVL271:
2018:../freertos/queue.c **** 
 3164              		.loc 1 2018 2 view .LVU955
 3165 07aa 7047     		bx	lr	@
 3166              		.cfi_endproc
 3167              	.LFE25:
 3168              		.size	uxQueueGetQueueNumber, .-uxQueueGetQueueNumber
 3169              		.align	1
 3170              		.global	vQueueSetQueueNumber
 3171              		.syntax unified
 3172              		.thumb
 3173              		.thumb_func
 3174              		.type	vQueueSetQueueNumber, %function
 3175              	vQueueSetQueueNumber:
 3176              	.LVL272:
ARM GAS  /tmp/ccMyq1Ea.s 			page 118


 3177              	.LFB26:
2026:../freertos/queue.c **** 		( ( Queue_t * ) xQueue )->uxQueueNumber = uxQueueNumber;
 3178              		.loc 1 2026 2 is_stmt 1 view -0
 3179              		.cfi_startproc
 3180              		@ args = 0, pretend = 0, frame = 0
 3181              		@ frame_needed = 0, uses_anonymous_args = 0
 3182              		@ link register save eliminated.
2027:../freertos/queue.c **** 	}
 3183              		.loc 1 2027 3 view .LVU957
 3184              	@ ../freertos/queue.c:2027: 		( ( Queue_t * ) xQueue )->uxQueueNumber = uxQueueNumber;
2027:../freertos/queue.c **** 	}
 3185              		.loc 1 2027 43 is_stmt 0 view .LVU958
 3186 07ac 8164     		str	r1, [r0, #72]	@ tmp117, MEM[(struct Queue_t *)xQueue_2(D)].uxQueueNumber
 3187              	@ ../freertos/queue.c:2028: 	}
2028:../freertos/queue.c **** 
 3188              		.loc 1 2028 2 view .LVU959
 3189 07ae 7047     		bx	lr	@
 3190              		.cfi_endproc
 3191              	.LFE26:
 3192              		.size	vQueueSetQueueNumber, .-vQueueSetQueueNumber
 3193              		.align	1
 3194              		.global	ucQueueGetQueueType
 3195              		.syntax unified
 3196              		.thumb
 3197              		.thumb_func
 3198              		.type	ucQueueGetQueueType, %function
 3199              	ucQueueGetQueueType:
 3200              	.LVL273:
 3201              	.LFB27:
2036:../freertos/queue.c **** 		return ( ( Queue_t * ) xQueue )->ucQueueType;
 3202              		.loc 1 2036 2 is_stmt 1 view -0
 3203              		.cfi_startproc
 3204              		@ args = 0, pretend = 0, frame = 0
 3205              		@ frame_needed = 0, uses_anonymous_args = 0
 3206              		@ link register save eliminated.
2037:../freertos/queue.c **** 	}
 3207              		.loc 1 2037 3 view .LVU961
 3208              	@ ../freertos/queue.c:2038: 	}
2038:../freertos/queue.c **** 
 3209              		.loc 1 2038 2 is_stmt 0 view .LVU962
 3210 07b0 90F84C00 		ldrb	r0, [r0, #76]	@ zero_extendqisi2	@, MEM[(struct Queue_t *)xQueue_2(D)].ucQueueType
 3211              	.LVL274:
2038:../freertos/queue.c **** 
 3212              		.loc 1 2038 2 view .LVU963
 3213 07b4 7047     		bx	lr	@
 3214              		.cfi_endproc
 3215              	.LFE27:
 3216              		.size	ucQueueGetQueueType, .-ucQueueGetQueueType
 3217              		.align	1
 3218              		.global	xQueueIsQueueEmptyFromISR
 3219              		.syntax unified
 3220              		.thumb
 3221              		.thumb_func
 3222              		.type	xQueueIsQueueEmptyFromISR, %function
 3223              	xQueueIsQueueEmptyFromISR:
 3224              	.LVL275:
 3225              	.LFB33:
ARM GAS  /tmp/ccMyq1Ea.s 			page 119


2309:../freertos/queue.c **** BaseType_t xReturn;
 3226              		.loc 1 2309 1 is_stmt 1 view -0
 3227              		.cfi_startproc
 3228              		@ args = 0, pretend = 0, frame = 0
 3229              		@ frame_needed = 0, uses_anonymous_args = 0
 3230              		@ link register save eliminated.
2310:../freertos/queue.c **** Queue_t * const pxQueue = xQueue;
 3231              		.loc 1 2310 1 view .LVU965
2311:../freertos/queue.c **** 
 3232              		.loc 1 2311 1 view .LVU966
2313:../freertos/queue.c **** 	if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 3233              		.loc 1 2313 25 view .LVU967
2314:../freertos/queue.c **** 	{
 3234              		.loc 1 2314 2 view .LVU968
 3235              	@ ../freertos/queue.c:2314: 	if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
2314:../freertos/queue.c **** 	{
 3236              		.loc 1 2314 13 is_stmt 0 view .LVU969
 3237 07b6 806B     		ldr	r0, [r0, #56]	@ _1, MEM[(struct Queue_t *)xQueue_3(D)].uxMessagesWaiting
 3238              	.LVL276:
2323:../freertos/queue.c **** } /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 3239              		.loc 1 2323 2 is_stmt 1 view .LVU970
 3240              	@ ../freertos/queue.c:2324: } /*lint !e818 xQueue could not be pointer to const because it is a typ
2324:../freertos/queue.c **** /*-----------------------------------------------------------*/
 3241              		.loc 1 2324 1 is_stmt 0 view .LVU971
 3242 07b8 B0FA80F0 		clz	r0, r0	@, _1
 3243              	.LVL277:
2324:../freertos/queue.c **** /*-----------------------------------------------------------*/
 3244              		.loc 1 2324 1 view .LVU972
 3245 07bc 4009     		lsrs	r0, r0, #5	@,,
 3246 07be 7047     		bx	lr	@
 3247              		.cfi_endproc
 3248              	.LFE33:
 3249              		.size	xQueueIsQueueEmptyFromISR, .-xQueueIsQueueEmptyFromISR
 3250              		.align	1
 3251              		.global	xQueueIsQueueFullFromISR
 3252              		.syntax unified
 3253              		.thumb
 3254              		.thumb_func
 3255              		.type	xQueueIsQueueFullFromISR, %function
 3256              	xQueueIsQueueFullFromISR:
 3257              	.LVL278:
 3258              	.LFB35:
2345:../freertos/queue.c **** }
2346:../freertos/queue.c **** /*-----------------------------------------------------------*/
2347:../freertos/queue.c **** 
2348:../freertos/queue.c **** BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
2349:../freertos/queue.c **** {
 3259              		.loc 1 2349 1 is_stmt 1 view -0
 3260              		.cfi_startproc
 3261              		@ args = 0, pretend = 0, frame = 0
 3262              		@ frame_needed = 0, uses_anonymous_args = 0
 3263              		@ link register save eliminated.
2350:../freertos/queue.c **** BaseType_t xReturn;
 3264              		.loc 1 2350 1 view .LVU974
2351:../freertos/queue.c **** Queue_t * const pxQueue = xQueue;
 3265              		.loc 1 2351 1 view .LVU975
2352:../freertos/queue.c **** 
ARM GAS  /tmp/ccMyq1Ea.s 			page 120


2353:../freertos/queue.c **** 	configASSERT( pxQueue );
 3266              		.loc 1 2353 25 view .LVU976
2354:../freertos/queue.c **** 	if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 3267              		.loc 1 2354 2 view .LVU977
 3268              	@ ../freertos/queue.c:2354: 	if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 3269              		.loc 1 2354 13 is_stmt 0 view .LVU978
 3270 07c0 836B     		ldr	r3, [r0, #56]	@ _1, MEM[(struct Queue_t *)xQueue_4(D)].uxMessagesWaiting
 3271              	.LVL279:
2355:../freertos/queue.c **** 	{
2356:../freertos/queue.c **** 		xReturn = pdTRUE;
2357:../freertos/queue.c **** 	}
2358:../freertos/queue.c **** 	else
2359:../freertos/queue.c **** 	{
2360:../freertos/queue.c **** 		xReturn = pdFALSE;
2361:../freertos/queue.c **** 	}
2362:../freertos/queue.c **** 
2363:../freertos/queue.c **** 	return xReturn;
 3272              		.loc 1 2363 2 is_stmt 1 view .LVU979
 3273              	@ ../freertos/queue.c:2354: 	if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
2354:../freertos/queue.c **** 	if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 3274              		.loc 1 2354 4 is_stmt 0 view .LVU980
 3275 07c2 C06B     		ldr	r0, [r0, #60]	@ MEM[(struct Queue_t *)xQueue_4(D)].uxLength, MEM[(struct Queue_t *)xQueue_4(D)
 3276              	.LVL280:
 3277              	@ ../freertos/queue.c:2364: } /*lint !e818 xQueue could not be pointer to const because it is a typ
2364:../freertos/queue.c **** } /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 3278              		.loc 1 2364 1 view .LVU981
 3279 07c4 C31A     		subs	r3, r0, r3	@, MEM[(struct Queue_t *)xQueue_4(D)].uxLength, _1
 3280              	.LVL281:
 3281              		.loc 1 2364 1 view .LVU982
 3282 07c6 5842     		rsbs	r0, r3, #0	@,,
 3283              		.loc 1 2364 1 view .LVU983
 3284 07c8 5841     		adcs	r0, r0, r3	@,,
 3285 07ca 7047     		bx	lr	@
 3286              		.cfi_endproc
 3287              	.LFE35:
 3288              		.size	xQueueIsQueueFullFromISR, .-xQueueIsQueueFullFromISR
 3289              		.align	1
 3290              		.global	vQueueWaitForMessageRestricted
 3291              		.syntax unified
 3292              		.thumb
 3293              		.thumb_func
 3294              		.type	vQueueWaitForMessageRestricted, %function
 3295              	vQueueWaitForMessageRestricted:
 3296              	.LVL282:
 3297              	.LFB36:
2365:../freertos/queue.c **** /*-----------------------------------------------------------*/
2366:../freertos/queue.c **** 
2367:../freertos/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
2368:../freertos/queue.c **** 
2369:../freertos/queue.c **** 	BaseType_t xQueueCRSend( QueueHandle_t xQueue, const void *pvItemToQueue, TickType_t xTicksToWait 
2370:../freertos/queue.c **** 	{
2371:../freertos/queue.c **** 	BaseType_t xReturn;
2372:../freertos/queue.c **** 	Queue_t * const pxQueue = xQueue;
2373:../freertos/queue.c **** 
2374:../freertos/queue.c **** 		/* If the queue is already full we may have to block.  A critical section
2375:../freertos/queue.c **** 		is required to prevent an interrupt removing something from the queue
2376:../freertos/queue.c **** 		between the check to see if the queue is full and blocking on the queue. */
ARM GAS  /tmp/ccMyq1Ea.s 			page 121


2377:../freertos/queue.c **** 		portDISABLE_INTERRUPTS();
2378:../freertos/queue.c **** 		{
2379:../freertos/queue.c **** 			if( prvIsQueueFull( pxQueue ) != pdFALSE )
2380:../freertos/queue.c **** 			{
2381:../freertos/queue.c **** 				/* The queue is full - do we want to block or just leave without
2382:../freertos/queue.c **** 				posting? */
2383:../freertos/queue.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
2384:../freertos/queue.c **** 				{
2385:../freertos/queue.c **** 					/* As this is called from a coroutine we cannot block directly, but
2386:../freertos/queue.c **** 					return indicating that we need to block. */
2387:../freertos/queue.c **** 					vCoRoutineAddToDelayedList( xTicksToWait, &( pxQueue->xTasksWaitingToSend ) );
2388:../freertos/queue.c **** 					portENABLE_INTERRUPTS();
2389:../freertos/queue.c **** 					return errQUEUE_BLOCKED;
2390:../freertos/queue.c **** 				}
2391:../freertos/queue.c **** 				else
2392:../freertos/queue.c **** 				{
2393:../freertos/queue.c **** 					portENABLE_INTERRUPTS();
2394:../freertos/queue.c **** 					return errQUEUE_FULL;
2395:../freertos/queue.c **** 				}
2396:../freertos/queue.c **** 			}
2397:../freertos/queue.c **** 		}
2398:../freertos/queue.c **** 		portENABLE_INTERRUPTS();
2399:../freertos/queue.c **** 
2400:../freertos/queue.c **** 		portDISABLE_INTERRUPTS();
2401:../freertos/queue.c **** 		{
2402:../freertos/queue.c **** 			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
2403:../freertos/queue.c **** 			{
2404:../freertos/queue.c **** 				/* There is room in the queue, copy the data into the queue. */
2405:../freertos/queue.c **** 				prvCopyDataToQueue( pxQueue, pvItemToQueue, queueSEND_TO_BACK );
2406:../freertos/queue.c **** 				xReturn = pdPASS;
2407:../freertos/queue.c **** 
2408:../freertos/queue.c **** 				/* Were any co-routines waiting for data to become available? */
2409:../freertos/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
2410:../freertos/queue.c **** 				{
2411:../freertos/queue.c **** 					/* In this instance the co-routine could be placed directly
2412:../freertos/queue.c **** 					into the ready list as we are within a critical section.
2413:../freertos/queue.c **** 					Instead the same pending ready list mechanism is used as if
2414:../freertos/queue.c **** 					the event were caused from within an interrupt. */
2415:../freertos/queue.c **** 					if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
2416:../freertos/queue.c **** 					{
2417:../freertos/queue.c **** 						/* The co-routine waiting has a higher priority so record
2418:../freertos/queue.c **** 						that a yield might be appropriate. */
2419:../freertos/queue.c **** 						xReturn = errQUEUE_YIELD;
2420:../freertos/queue.c **** 					}
2421:../freertos/queue.c **** 					else
2422:../freertos/queue.c **** 					{
2423:../freertos/queue.c **** 						mtCOVERAGE_TEST_MARKER();
2424:../freertos/queue.c **** 					}
2425:../freertos/queue.c **** 				}
2426:../freertos/queue.c **** 				else
2427:../freertos/queue.c **** 				{
2428:../freertos/queue.c **** 					mtCOVERAGE_TEST_MARKER();
2429:../freertos/queue.c **** 				}
2430:../freertos/queue.c **** 			}
2431:../freertos/queue.c **** 			else
2432:../freertos/queue.c **** 			{
2433:../freertos/queue.c **** 				xReturn = errQUEUE_FULL;
ARM GAS  /tmp/ccMyq1Ea.s 			page 122


2434:../freertos/queue.c **** 			}
2435:../freertos/queue.c **** 		}
2436:../freertos/queue.c **** 		portENABLE_INTERRUPTS();
2437:../freertos/queue.c **** 
2438:../freertos/queue.c **** 		return xReturn;
2439:../freertos/queue.c **** 	}
2440:../freertos/queue.c **** 
2441:../freertos/queue.c **** #endif /* configUSE_CO_ROUTINES */
2442:../freertos/queue.c **** /*-----------------------------------------------------------*/
2443:../freertos/queue.c **** 
2444:../freertos/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
2445:../freertos/queue.c **** 
2446:../freertos/queue.c **** 	BaseType_t xQueueCRReceive( QueueHandle_t xQueue, void *pvBuffer, TickType_t xTicksToWait )
2447:../freertos/queue.c **** 	{
2448:../freertos/queue.c **** 	BaseType_t xReturn;
2449:../freertos/queue.c **** 	Queue_t * const pxQueue = xQueue;
2450:../freertos/queue.c **** 
2451:../freertos/queue.c **** 		/* If the queue is already empty we may have to block.  A critical section
2452:../freertos/queue.c **** 		is required to prevent an interrupt adding something to the queue
2453:../freertos/queue.c **** 		between the check to see if the queue is empty and blocking on the queue. */
2454:../freertos/queue.c **** 		portDISABLE_INTERRUPTS();
2455:../freertos/queue.c **** 		{
2456:../freertos/queue.c **** 			if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
2457:../freertos/queue.c **** 			{
2458:../freertos/queue.c **** 				/* There are no messages in the queue, do we want to block or just
2459:../freertos/queue.c **** 				leave with nothing? */
2460:../freertos/queue.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
2461:../freertos/queue.c **** 				{
2462:../freertos/queue.c **** 					/* As this is a co-routine we cannot block directly, but return
2463:../freertos/queue.c **** 					indicating that we need to block. */
2464:../freertos/queue.c **** 					vCoRoutineAddToDelayedList( xTicksToWait, &( pxQueue->xTasksWaitingToReceive ) );
2465:../freertos/queue.c **** 					portENABLE_INTERRUPTS();
2466:../freertos/queue.c **** 					return errQUEUE_BLOCKED;
2467:../freertos/queue.c **** 				}
2468:../freertos/queue.c **** 				else
2469:../freertos/queue.c **** 				{
2470:../freertos/queue.c **** 					portENABLE_INTERRUPTS();
2471:../freertos/queue.c **** 					return errQUEUE_FULL;
2472:../freertos/queue.c **** 				}
2473:../freertos/queue.c **** 			}
2474:../freertos/queue.c **** 			else
2475:../freertos/queue.c **** 			{
2476:../freertos/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2477:../freertos/queue.c **** 			}
2478:../freertos/queue.c **** 		}
2479:../freertos/queue.c **** 		portENABLE_INTERRUPTS();
2480:../freertos/queue.c **** 
2481:../freertos/queue.c **** 		portDISABLE_INTERRUPTS();
2482:../freertos/queue.c **** 		{
2483:../freertos/queue.c **** 			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
2484:../freertos/queue.c **** 			{
2485:../freertos/queue.c **** 				/* Data is available from the queue. */
2486:../freertos/queue.c **** 				pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;
2487:../freertos/queue.c **** 				if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail )
2488:../freertos/queue.c **** 				{
2489:../freertos/queue.c **** 					pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
2490:../freertos/queue.c **** 				}
ARM GAS  /tmp/ccMyq1Ea.s 			page 123


2491:../freertos/queue.c **** 				else
2492:../freertos/queue.c **** 				{
2493:../freertos/queue.c **** 					mtCOVERAGE_TEST_MARKER();
2494:../freertos/queue.c **** 				}
2495:../freertos/queue.c **** 				--( pxQueue->uxMessagesWaiting );
2496:../freertos/queue.c **** 				( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( unsigned ) pxQ
2497:../freertos/queue.c **** 
2498:../freertos/queue.c **** 				xReturn = pdPASS;
2499:../freertos/queue.c **** 
2500:../freertos/queue.c **** 				/* Were any co-routines waiting for space to become available? */
2501:../freertos/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
2502:../freertos/queue.c **** 				{
2503:../freertos/queue.c **** 					/* In this instance the co-routine could be placed directly
2504:../freertos/queue.c **** 					into the ready list as we are within a critical section.
2505:../freertos/queue.c **** 					Instead the same pending ready list mechanism is used as if
2506:../freertos/queue.c **** 					the event were caused from within an interrupt. */
2507:../freertos/queue.c **** 					if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
2508:../freertos/queue.c **** 					{
2509:../freertos/queue.c **** 						xReturn = errQUEUE_YIELD;
2510:../freertos/queue.c **** 					}
2511:../freertos/queue.c **** 					else
2512:../freertos/queue.c **** 					{
2513:../freertos/queue.c **** 						mtCOVERAGE_TEST_MARKER();
2514:../freertos/queue.c **** 					}
2515:../freertos/queue.c **** 				}
2516:../freertos/queue.c **** 				else
2517:../freertos/queue.c **** 				{
2518:../freertos/queue.c **** 					mtCOVERAGE_TEST_MARKER();
2519:../freertos/queue.c **** 				}
2520:../freertos/queue.c **** 			}
2521:../freertos/queue.c **** 			else
2522:../freertos/queue.c **** 			{
2523:../freertos/queue.c **** 				xReturn = pdFAIL;
2524:../freertos/queue.c **** 			}
2525:../freertos/queue.c **** 		}
2526:../freertos/queue.c **** 		portENABLE_INTERRUPTS();
2527:../freertos/queue.c **** 
2528:../freertos/queue.c **** 		return xReturn;
2529:../freertos/queue.c **** 	}
2530:../freertos/queue.c **** 
2531:../freertos/queue.c **** #endif /* configUSE_CO_ROUTINES */
2532:../freertos/queue.c **** /*-----------------------------------------------------------*/
2533:../freertos/queue.c **** 
2534:../freertos/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
2535:../freertos/queue.c **** 
2536:../freertos/queue.c **** 	BaseType_t xQueueCRSendFromISR( QueueHandle_t xQueue, const void *pvItemToQueue, BaseType_t xCoRou
2537:../freertos/queue.c **** 	{
2538:../freertos/queue.c **** 	Queue_t * const pxQueue = xQueue;
2539:../freertos/queue.c **** 
2540:../freertos/queue.c **** 		/* Cannot block within an ISR so if there is no space on the queue then
2541:../freertos/queue.c **** 		exit without doing anything. */
2542:../freertos/queue.c **** 		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
2543:../freertos/queue.c **** 		{
2544:../freertos/queue.c **** 			prvCopyDataToQueue( pxQueue, pvItemToQueue, queueSEND_TO_BACK );
2545:../freertos/queue.c **** 
2546:../freertos/queue.c **** 			/* We only want to wake one co-routine per ISR, so check that a
2547:../freertos/queue.c **** 			co-routine has not already been woken. */
ARM GAS  /tmp/ccMyq1Ea.s 			page 124


2548:../freertos/queue.c **** 			if( xCoRoutinePreviouslyWoken == pdFALSE )
2549:../freertos/queue.c **** 			{
2550:../freertos/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
2551:../freertos/queue.c **** 				{
2552:../freertos/queue.c **** 					if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
2553:../freertos/queue.c **** 					{
2554:../freertos/queue.c **** 						return pdTRUE;
2555:../freertos/queue.c **** 					}
2556:../freertos/queue.c **** 					else
2557:../freertos/queue.c **** 					{
2558:../freertos/queue.c **** 						mtCOVERAGE_TEST_MARKER();
2559:../freertos/queue.c **** 					}
2560:../freertos/queue.c **** 				}
2561:../freertos/queue.c **** 				else
2562:../freertos/queue.c **** 				{
2563:../freertos/queue.c **** 					mtCOVERAGE_TEST_MARKER();
2564:../freertos/queue.c **** 				}
2565:../freertos/queue.c **** 			}
2566:../freertos/queue.c **** 			else
2567:../freertos/queue.c **** 			{
2568:../freertos/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2569:../freertos/queue.c **** 			}
2570:../freertos/queue.c **** 		}
2571:../freertos/queue.c **** 		else
2572:../freertos/queue.c **** 		{
2573:../freertos/queue.c **** 			mtCOVERAGE_TEST_MARKER();
2574:../freertos/queue.c **** 		}
2575:../freertos/queue.c **** 
2576:../freertos/queue.c **** 		return xCoRoutinePreviouslyWoken;
2577:../freertos/queue.c **** 	}
2578:../freertos/queue.c **** 
2579:../freertos/queue.c **** #endif /* configUSE_CO_ROUTINES */
2580:../freertos/queue.c **** /*-----------------------------------------------------------*/
2581:../freertos/queue.c **** 
2582:../freertos/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
2583:../freertos/queue.c **** 
2584:../freertos/queue.c **** 	BaseType_t xQueueCRReceiveFromISR( QueueHandle_t xQueue, void *pvBuffer, BaseType_t *pxCoRoutineWo
2585:../freertos/queue.c **** 	{
2586:../freertos/queue.c **** 	BaseType_t xReturn;
2587:../freertos/queue.c **** 	Queue_t * const pxQueue = xQueue;
2588:../freertos/queue.c **** 
2589:../freertos/queue.c **** 		/* We cannot block from an ISR, so check there is data available. If
2590:../freertos/queue.c **** 		not then just leave without doing anything. */
2591:../freertos/queue.c **** 		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
2592:../freertos/queue.c **** 		{
2593:../freertos/queue.c **** 			/* Copy the data from the queue. */
2594:../freertos/queue.c **** 			pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;
2595:../freertos/queue.c **** 			if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail )
2596:../freertos/queue.c **** 			{
2597:../freertos/queue.c **** 				pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
2598:../freertos/queue.c **** 			}
2599:../freertos/queue.c **** 			else
2600:../freertos/queue.c **** 			{
2601:../freertos/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2602:../freertos/queue.c **** 			}
2603:../freertos/queue.c **** 			--( pxQueue->uxMessagesWaiting );
2604:../freertos/queue.c **** 			( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( unsigned ) pxQu
ARM GAS  /tmp/ccMyq1Ea.s 			page 125


2605:../freertos/queue.c **** 
2606:../freertos/queue.c **** 			if( ( *pxCoRoutineWoken ) == pdFALSE )
2607:../freertos/queue.c **** 			{
2608:../freertos/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
2609:../freertos/queue.c **** 				{
2610:../freertos/queue.c **** 					if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
2611:../freertos/queue.c **** 					{
2612:../freertos/queue.c **** 						*pxCoRoutineWoken = pdTRUE;
2613:../freertos/queue.c **** 					}
2614:../freertos/queue.c **** 					else
2615:../freertos/queue.c **** 					{
2616:../freertos/queue.c **** 						mtCOVERAGE_TEST_MARKER();
2617:../freertos/queue.c **** 					}
2618:../freertos/queue.c **** 				}
2619:../freertos/queue.c **** 				else
2620:../freertos/queue.c **** 				{
2621:../freertos/queue.c **** 					mtCOVERAGE_TEST_MARKER();
2622:../freertos/queue.c **** 				}
2623:../freertos/queue.c **** 			}
2624:../freertos/queue.c **** 			else
2625:../freertos/queue.c **** 			{
2626:../freertos/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2627:../freertos/queue.c **** 			}
2628:../freertos/queue.c **** 
2629:../freertos/queue.c **** 			xReturn = pdPASS;
2630:../freertos/queue.c **** 		}
2631:../freertos/queue.c **** 		else
2632:../freertos/queue.c **** 		{
2633:../freertos/queue.c **** 			xReturn = pdFAIL;
2634:../freertos/queue.c **** 		}
2635:../freertos/queue.c **** 
2636:../freertos/queue.c **** 		return xReturn;
2637:../freertos/queue.c **** 	}
2638:../freertos/queue.c **** 
2639:../freertos/queue.c **** #endif /* configUSE_CO_ROUTINES */
2640:../freertos/queue.c **** /*-----------------------------------------------------------*/
2641:../freertos/queue.c **** 
2642:../freertos/queue.c **** #if ( configQUEUE_REGISTRY_SIZE > 0 )
2643:../freertos/queue.c **** 
2644:../freertos/queue.c **** 	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified
2645:../freertos/queue.c **** 	{
2646:../freertos/queue.c **** 	UBaseType_t ux;
2647:../freertos/queue.c **** 
2648:../freertos/queue.c **** 		/* See if there is an empty space in the registry.  A NULL name denotes
2649:../freertos/queue.c **** 		a free slot. */
2650:../freertos/queue.c **** 		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
2651:../freertos/queue.c **** 		{
2652:../freertos/queue.c **** 			if( xQueueRegistry[ ux ].pcQueueName == NULL )
2653:../freertos/queue.c **** 			{
2654:../freertos/queue.c **** 				/* Store the information on this queue. */
2655:../freertos/queue.c **** 				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
2656:../freertos/queue.c **** 				xQueueRegistry[ ux ].xHandle = xQueue;
2657:../freertos/queue.c **** 
2658:../freertos/queue.c **** 				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
2659:../freertos/queue.c **** 				break;
2660:../freertos/queue.c **** 			}
2661:../freertos/queue.c **** 			else
ARM GAS  /tmp/ccMyq1Ea.s 			page 126


2662:../freertos/queue.c **** 			{
2663:../freertos/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2664:../freertos/queue.c **** 			}
2665:../freertos/queue.c **** 		}
2666:../freertos/queue.c **** 	}
2667:../freertos/queue.c **** 
2668:../freertos/queue.c **** #endif /* configQUEUE_REGISTRY_SIZE */
2669:../freertos/queue.c **** /*-----------------------------------------------------------*/
2670:../freertos/queue.c **** 
2671:../freertos/queue.c **** #if ( configQUEUE_REGISTRY_SIZE > 0 )
2672:../freertos/queue.c **** 
2673:../freertos/queue.c **** 	const char *pcQueueGetName( QueueHandle_t xQueue ) /*lint !e971 Unqualified char types are allowed
2674:../freertos/queue.c **** 	{
2675:../freertos/queue.c **** 	UBaseType_t ux;
2676:../freertos/queue.c **** 	const char *pcReturn = NULL; /*lint !e971 Unqualified char types are allowed for strings and singl
2677:../freertos/queue.c **** 
2678:../freertos/queue.c **** 		/* Note there is nothing here to protect against another task adding or
2679:../freertos/queue.c **** 		removing entries from the registry while it is being searched. */
2680:../freertos/queue.c **** 		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
2681:../freertos/queue.c **** 		{
2682:../freertos/queue.c **** 			if( xQueueRegistry[ ux ].xHandle == xQueue )
2683:../freertos/queue.c **** 			{
2684:../freertos/queue.c **** 				pcReturn = xQueueRegistry[ ux ].pcQueueName;
2685:../freertos/queue.c **** 				break;
2686:../freertos/queue.c **** 			}
2687:../freertos/queue.c **** 			else
2688:../freertos/queue.c **** 			{
2689:../freertos/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2690:../freertos/queue.c **** 			}
2691:../freertos/queue.c **** 		}
2692:../freertos/queue.c **** 
2693:../freertos/queue.c **** 		return pcReturn;
2694:../freertos/queue.c **** 	} /*lint !e818 xQueue cannot be a pointer to const because it is a typedef. */
2695:../freertos/queue.c **** 
2696:../freertos/queue.c **** #endif /* configQUEUE_REGISTRY_SIZE */
2697:../freertos/queue.c **** /*-----------------------------------------------------------*/
2698:../freertos/queue.c **** 
2699:../freertos/queue.c **** #if ( configQUEUE_REGISTRY_SIZE > 0 )
2700:../freertos/queue.c **** 
2701:../freertos/queue.c **** 	void vQueueUnregisterQueue( QueueHandle_t xQueue )
2702:../freertos/queue.c **** 	{
2703:../freertos/queue.c **** 	UBaseType_t ux;
2704:../freertos/queue.c **** 
2705:../freertos/queue.c **** 		/* See if the handle of the queue being unregistered in actually in the
2706:../freertos/queue.c **** 		registry. */
2707:../freertos/queue.c **** 		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
2708:../freertos/queue.c **** 		{
2709:../freertos/queue.c **** 			if( xQueueRegistry[ ux ].xHandle == xQueue )
2710:../freertos/queue.c **** 			{
2711:../freertos/queue.c **** 				/* Set the name to NULL to show that this slot if free again. */
2712:../freertos/queue.c **** 				xQueueRegistry[ ux ].pcQueueName = NULL;
2713:../freertos/queue.c **** 
2714:../freertos/queue.c **** 				/* Set the handle to NULL to ensure the same queue handle cannot
2715:../freertos/queue.c **** 				appear in the registry twice if it is added, removed, then
2716:../freertos/queue.c **** 				added again. */
2717:../freertos/queue.c **** 				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
2718:../freertos/queue.c **** 				break;
ARM GAS  /tmp/ccMyq1Ea.s 			page 127


2719:../freertos/queue.c **** 			}
2720:../freertos/queue.c **** 			else
2721:../freertos/queue.c **** 			{
2722:../freertos/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2723:../freertos/queue.c **** 			}
2724:../freertos/queue.c **** 		}
2725:../freertos/queue.c **** 
2726:../freertos/queue.c **** 	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
2727:../freertos/queue.c **** 
2728:../freertos/queue.c **** #endif /* configQUEUE_REGISTRY_SIZE */
2729:../freertos/queue.c **** /*-----------------------------------------------------------*/
2730:../freertos/queue.c **** 
2731:../freertos/queue.c **** #if ( configUSE_TIMERS == 1 )
2732:../freertos/queue.c **** 
2733:../freertos/queue.c **** 	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType
2734:../freertos/queue.c **** 	{
 3298              		.loc 1 2734 2 is_stmt 1 view -0
 3299              		.cfi_startproc
 3300              		@ args = 0, pretend = 0, frame = 0
 3301              		@ frame_needed = 0, uses_anonymous_args = 0
2735:../freertos/queue.c **** 	Queue_t * const pxQueue = xQueue;
 3302              		.loc 1 2735 2 view .LVU985
 3303              	@ ../freertos/queue.c:2734: 	{
2734:../freertos/queue.c **** 	Queue_t * const pxQueue = xQueue;
 3304              		.loc 1 2734 2 is_stmt 0 view .LVU986
 3305 07cc 70B5     		push	{r4, r5, r6, lr}	@
 3306              	.LCFI35:
 3307              		.cfi_def_cfa_offset 16
 3308              		.cfi_offset 4, -16
 3309              		.cfi_offset 5, -12
 3310              		.cfi_offset 6, -8
 3311              		.cfi_offset 14, -4
 3312              	@ ../freertos/queue.c:2734: 	{
2734:../freertos/queue.c **** 	Queue_t * const pxQueue = xQueue;
 3313              		.loc 1 2734 2 view .LVU987
 3314 07ce 0446     		mov	r4, r0	@ xQueue, tmp132
 3315              	.LVL283:
2736:../freertos/queue.c **** 
2737:../freertos/queue.c **** 		/* This function should not be called by application code hence the
2738:../freertos/queue.c **** 		'Restricted' in its name.  It is not part of the public API.  It is
2739:../freertos/queue.c **** 		designed for use by kernel code, and has special calling requirements.
2740:../freertos/queue.c **** 		It can result in vListInsert() being called on a list that can only
2741:../freertos/queue.c **** 		possibly ever have one item in it, so the list will be fast, but even
2742:../freertos/queue.c **** 		so it should be called with the scheduler locked and not from a critical
2743:../freertos/queue.c **** 		section. */
2744:../freertos/queue.c **** 
2745:../freertos/queue.c **** 		/* Only do anything if there are no messages in the queue.  This function
2746:../freertos/queue.c **** 		will not actually cause the task to block, just place it on a blocked
2747:../freertos/queue.c **** 		list.  It will not block until the scheduler is unlocked - at which
2748:../freertos/queue.c **** 		time a yield will be performed.  If an item is added to the queue while
2749:../freertos/queue.c **** 		the queue is locked, and the calling task blocks on the queue, then the
2750:../freertos/queue.c **** 		calling task will be immediately unblocked when the queue is unlocked. */
2751:../freertos/queue.c **** 		prvLockQueue( pxQueue );
 3316              		.loc 1 2751 3 is_stmt 1 view .LVU988
 3317              	@ ../freertos/queue.c:2734: 	{
2734:../freertos/queue.c **** 	Queue_t * const pxQueue = xQueue;
 3318              		.loc 1 2734 2 is_stmt 0 view .LVU989
ARM GAS  /tmp/ccMyq1Ea.s 			page 128


 3319 07d0 0D46     		mov	r5, r1	@ xTicksToWait, tmp133
 3320 07d2 1646     		mov	r6, r2	@ xWaitIndefinitely, tmp134
 3321              	@ ../freertos/queue.c:2751: 		prvLockQueue( pxQueue );
 3322              		.loc 1 2751 3 view .LVU990
 3323 07d4 FFF7FEFF 		bl	vPortEnterCritical		@
 3324              	.LVL284:
 3325              		.loc 1 2751 3 is_stmt 1 discriminator 1 view .LVU991
 3326 07d8 94F84430 		ldrb	r3, [r4, #68]	@ zero_extendqisi2	@ MEM[(struct Queue_t *)xQueue_8(D)].cRxLock, MEM[(struct Qu
 3327 07dc FF2B     		cmp	r3, #255	@ MEM[(struct Queue_t *)xQueue_8(D)].cRxLock,
 3328              		.loc 1 2751 3 discriminator 1 view .LVU992
 3329 07de 04BF     		itt	eq
 3330 07e0 0023     		moveq	r3, #0	@ tmp124,
 3331 07e2 84F84430 		strbeq	r3, [r4, #68]	@ tmp124, MEM[(struct Queue_t *)xQueue_8(D)].cRxLock
 3332              		.loc 1 2751 3 discriminator 3 view .LVU993
 3333 07e6 94F84530 		ldrb	r3, [r4, #69]	@ zero_extendqisi2	@ MEM[(struct Queue_t *)xQueue_8(D)].cTxLock, MEM[(struct Qu
 3334 07ea FF2B     		cmp	r3, #255	@ MEM[(struct Queue_t *)xQueue_8(D)].cTxLock,
 3335              		.loc 1 2751 3 discriminator 4 view .LVU994
 3336 07ec 04BF     		itt	eq
 3337 07ee 0023     		moveq	r3, #0	@ tmp129,
 3338 07f0 84F84530 		strbeq	r3, [r4, #69]	@ tmp129, MEM[(struct Queue_t *)xQueue_8(D)].cTxLock
 3339              		.loc 1 2751 3 discriminator 6 view .LVU995
 3340 07f4 FFF7FEFF 		bl	vPortExitCritical		@
 3341              	.LVL285:
2752:../freertos/queue.c **** 		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 3342              		.loc 1 2752 3 view .LVU996
 3343              	@ ../freertos/queue.c:2752: 		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 3344              		.loc 1 2752 14 is_stmt 0 view .LVU997
 3345 07f8 A36B     		ldr	r3, [r4, #56]	@ _3, MEM[(struct Queue_t *)xQueue_8(D)].uxMessagesWaiting
 3346              	@ ../freertos/queue.c:2752: 		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 3347              		.loc 1 2752 5 view .LVU998
 3348 07fa 2BB9     		cbnz	r3, .L226	@ _3,
2753:../freertos/queue.c **** 		{
2754:../freertos/queue.c **** 			/* There is nothing in the queue, block for the specified period. */
2755:../freertos/queue.c **** 			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefi
 3349              		.loc 1 2755 4 is_stmt 1 view .LVU999
 3350 07fc 3246     		mov	r2, r6	@, xWaitIndefinitely
 3351 07fe 2946     		mov	r1, r5	@, xTicksToWait
 3352 0800 04F12400 		add	r0, r4, #36	@, xQueue,
 3353 0804 FFF7FEFF 		bl	vTaskPlaceOnEventListRestricted		@
 3354              	.LVL286:
 3355              	.L226:
2756:../freertos/queue.c **** 		}
2757:../freertos/queue.c **** 		else
2758:../freertos/queue.c **** 		{
2759:../freertos/queue.c **** 			mtCOVERAGE_TEST_MARKER();
 3356              		.loc 1 2759 28 view .LVU1000
2760:../freertos/queue.c **** 		}
2761:../freertos/queue.c **** 		prvUnlockQueue( pxQueue );
 3357              		.loc 1 2761 3 view .LVU1001
 3358 0808 2046     		mov	r0, r4	@, xQueue
 3359              	@ ../freertos/queue.c:2762: 	}
2762:../freertos/queue.c **** 	}
 3360              		.loc 1 2762 2 is_stmt 0 view .LVU1002
 3361 080a BDE87040 		pop	{r4, r5, r6, lr}	@
 3362              	.LCFI36:
 3363              		.cfi_restore 14
 3364              		.cfi_restore 6
ARM GAS  /tmp/ccMyq1Ea.s 			page 129


 3365              		.cfi_restore 5
 3366              		.cfi_restore 4
 3367              		.cfi_def_cfa_offset 0
 3368              	.LVL287:
 3369              	@ ../freertos/queue.c:2761: 		prvUnlockQueue( pxQueue );
2761:../freertos/queue.c **** 	}
 3370              		.loc 1 2761 3 view .LVU1003
 3371 080e 49E4     		b	prvUnlockQueue		@
 3372              	.LVL288:
2761:../freertos/queue.c **** 	}
 3373              		.loc 1 2761 3 view .LVU1004
 3374              		.cfi_endproc
 3375              	.LFE36:
 3376              		.size	vQueueWaitForMessageRestricted, .-vQueueWaitForMessageRestricted
 3377              	.Letext0:
 3378              		.file 3 "/usr/lib/gcc/arm-none-eabi/13.2.0/include/stddef.h"
 3379              		.file 4 "/usr/arm-none-eabi/include/machine/_default_types.h"
 3380              		.file 5 "/usr/arm-none-eabi/include/sys/_stdint.h"
 3381              		.file 6 "../freertos/include/list.h"
 3382              		.file 7 "../freertos/include/task.h"
 3383              		.file 8 "../freertos/include/queue.h"
 3384              		.file 9 "../freertos/include/portable.h"
 3385              		.file 10 "/usr/arm-none-eabi/include/string.h"
 3386              		.file 11 "<built-in>"
 3387              		.section	.debug_info,"",%progbits
 3388              	.Ldebug_info0:
 3389 0000 E61D0000 		.4byte	0x1de6
 3390 0004 0200     		.2byte	0x2
 3391 0006 00000000 		.4byte	.Ldebug_abbrev0
 3392 000a 04       		.byte	0x4
 3393 000b 01       		.uleb128 0x1
 3394 000c 8C020000 		.4byte	.LASF86
 3395 0010 0C       		.byte	0xc
 3396 0011 6E070000 		.4byte	.LASF87
 3397 0015 87030000 		.4byte	.LASF88
 3398 0019 00000000 		.4byte	.Ltext0
 3399 001d 10080000 		.4byte	.Letext0
 3400 0021 00000000 		.4byte	.Ldebug_line0
 3401 0025 02       		.uleb128 0x2
 3402 0026 08       		.byte	0x8
 3403 0027 07       		.byte	0x7
 3404 0028 75020000 		.4byte	.LASF0
 3405 002c 02       		.uleb128 0x2
 3406 002d 04       		.byte	0x4
 3407 002e 07       		.byte	0x7
 3408 002f C6000000 		.4byte	.LASF1
 3409 0033 02       		.uleb128 0x2
 3410 0034 01       		.byte	0x1
 3411 0035 08       		.byte	0x8
 3412 0036 FD080000 		.4byte	.LASF2
 3413 003a 03       		.uleb128 0x3
 3414 003b D2030000 		.4byte	.LASF5
 3415 003f 03       		.byte	0x3
 3416 0040 D6       		.byte	0xd6
 3417 0041 17       		.byte	0x17
 3418 0042 2C000000 		.4byte	0x2c
 3419 0046 04       		.uleb128 0x4
ARM GAS  /tmp/ccMyq1Ea.s 			page 130


 3420 0047 04       		.byte	0x4
 3421 0048 05       		.byte	0x5
 3422 0049 696E7400 		.ascii	"int\000"
 3423 004d 02       		.uleb128 0x2
 3424 004e 08       		.byte	0x8
 3425 004f 05       		.byte	0x5
 3426 0050 C5050000 		.4byte	.LASF3
 3427 0054 02       		.uleb128 0x2
 3428 0055 08       		.byte	0x8
 3429 0056 04       		.byte	0x4
 3430 0057 28070000 		.4byte	.LASF4
 3431 005b 03       		.uleb128 0x3
 3432 005c FB060000 		.4byte	.LASF6
 3433 0060 04       		.byte	0x4
 3434 0061 29       		.byte	0x29
 3435 0062 17       		.byte	0x17
 3436 0063 67000000 		.4byte	0x67
 3437 0067 02       		.uleb128 0x2
 3438 0068 01       		.byte	0x1
 3439 0069 06       		.byte	0x6
 3440 006a C6090000 		.4byte	.LASF7
 3441 006e 03       		.uleb128 0x3
 3442 006f 6B080000 		.4byte	.LASF8
 3443 0073 04       		.byte	0x4
 3444 0074 2B       		.byte	0x2b
 3445 0075 18       		.byte	0x18
 3446 0076 33000000 		.4byte	0x33
 3447 007a 02       		.uleb128 0x2
 3448 007b 02       		.byte	0x2
 3449 007c 05       		.byte	0x5
 3450 007d C8070000 		.4byte	.LASF9
 3451 0081 02       		.uleb128 0x2
 3452 0082 02       		.byte	0x2
 3453 0083 07       		.byte	0x7
 3454 0084 D2090000 		.4byte	.LASF10
 3455 0088 02       		.uleb128 0x2
 3456 0089 04       		.byte	0x4
 3457 008a 05       		.byte	0x5
 3458 008b DD070000 		.4byte	.LASF11
 3459 008f 03       		.uleb128 0x3
 3460 0090 0B090000 		.4byte	.LASF12
 3461 0094 04       		.byte	0x4
 3462 0095 4F       		.byte	0x4f
 3463 0096 19       		.byte	0x19
 3464 0097 9B000000 		.4byte	0x9b
 3465 009b 02       		.uleb128 0x2
 3466 009c 04       		.byte	0x4
 3467 009d 07       		.byte	0x7
 3468 009e 96080000 		.4byte	.LASF13
 3469 00a2 05       		.uleb128 0x5
 3470 00a3 04       		.byte	0x4
 3471 00a4 06       		.uleb128 0x6
 3472 00a5 A2000000 		.4byte	0xa2
 3473 00a9 02       		.uleb128 0x2
 3474 00aa 01       		.byte	0x1
 3475 00ab 08       		.byte	0x8
 3476 00ac C8040000 		.4byte	.LASF14
ARM GAS  /tmp/ccMyq1Ea.s 			page 131


 3477 00b0 07       		.uleb128 0x7
 3478 00b1 04       		.byte	0x4
 3479 00b2 BB000000 		.4byte	0xbb
 3480 00b6 06       		.uleb128 0x6
 3481 00b7 B0000000 		.4byte	0xb0
 3482 00bb 08       		.uleb128 0x8
 3483 00bc 03       		.uleb128 0x3
 3484 00bd 11020000 		.4byte	.LASF15
 3485 00c1 05       		.byte	0x5
 3486 00c2 14       		.byte	0x14
 3487 00c3 12       		.byte	0x12
 3488 00c4 5B000000 		.4byte	0x5b
 3489 00c8 09       		.uleb128 0x9
 3490 00c9 BC000000 		.4byte	0xbc
 3491 00cd 06       		.uleb128 0x6
 3492 00ce BC000000 		.4byte	0xbc
 3493 00d2 03       		.uleb128 0x3
 3494 00d3 84050000 		.4byte	.LASF16
 3495 00d7 05       		.byte	0x5
 3496 00d8 18       		.byte	0x18
 3497 00d9 13       		.byte	0x13
 3498 00da 6E000000 		.4byte	0x6e
 3499 00de 06       		.uleb128 0x6
 3500 00df D2000000 		.4byte	0xd2
 3501 00e3 03       		.uleb128 0x3
 3502 00e4 08020000 		.4byte	.LASF17
 3503 00e8 05       		.byte	0x5
 3504 00e9 30       		.byte	0x30
 3505 00ea 14       		.byte	0x14
 3506 00eb 8F000000 		.4byte	0x8f
 3507 00ef 03       		.uleb128 0x3
 3508 00f0 E6050000 		.4byte	.LASF18
 3509 00f4 02       		.byte	0x2
 3510 00f5 38       		.byte	0x38
 3511 00f6 0E       		.byte	0xe
 3512 00f7 88000000 		.4byte	0x88
 3513 00fb 06       		.uleb128 0x6
 3514 00fc EF000000 		.4byte	0xef
 3515 0100 03       		.uleb128 0x3
 3516 0101 02050000 		.4byte	.LASF19
 3517 0105 02       		.byte	0x2
 3518 0106 39       		.byte	0x39
 3519 0107 17       		.byte	0x17
 3520 0108 9B000000 		.4byte	0x9b
 3521 010c 09       		.uleb128 0x9
 3522 010d 00010000 		.4byte	0x100
 3523 0111 06       		.uleb128 0x6
 3524 0112 00010000 		.4byte	0x100
 3525 0116 03       		.uleb128 0x3
 3526 0117 F0060000 		.4byte	.LASF20
 3527 011b 02       		.byte	0x2
 3528 011c 3F       		.byte	0x3f
 3529 011d 13       		.byte	0x13
 3530 011e E3000000 		.4byte	0xe3
 3531 0122 06       		.uleb128 0x6
 3532 0123 16010000 		.4byte	0x116
 3533 0127 07       		.uleb128 0x7
ARM GAS  /tmp/ccMyq1Ea.s 			page 132


 3534 0128 04       		.byte	0x4
 3535 0129 D2000000 		.4byte	0xd2
 3536 012d 0A       		.uleb128 0xa
 3537 012e F2000000 		.4byte	.LASF26
 3538 0132 14       		.byte	0x14
 3539 0133 06       		.byte	0x6
 3540 0134 8C       		.byte	0x8c
 3541 0135 08       		.byte	0x8
 3542 0136 86010000 		.4byte	0x186
 3543 013a 0B       		.uleb128 0xb
 3544 013b D2070000 		.4byte	.LASF21
 3545 013f 06       		.byte	0x6
 3546 0140 8F       		.byte	0x8f
 3547 0141 21       		.byte	0x21
 3548 0142 16010000 		.4byte	0x116
 3549 0146 02       		.byte	0x2
 3550 0147 23       		.byte	0x23
 3551 0148 00       		.uleb128 0
 3552 0149 0B       		.uleb128 0xb
 3553 014a 2C060000 		.4byte	.LASF22
 3554 014e 06       		.byte	0x6
 3555 014f 90       		.byte	0x90
 3556 0150 2A       		.byte	0x2a
 3557 0151 86010000 		.4byte	0x186
 3558 0155 02       		.byte	0x2
 3559 0156 23       		.byte	0x23
 3560 0157 04       		.uleb128 0x4
 3561 0158 0B       		.uleb128 0xb
 3562 0159 37030000 		.4byte	.LASF23
 3563 015d 06       		.byte	0x6
 3564 015e 91       		.byte	0x91
 3565 015f 2A       		.byte	0x2a
 3566 0160 86010000 		.4byte	0x186
 3567 0164 02       		.byte	0x2
 3568 0165 23       		.byte	0x23
 3569 0166 08       		.uleb128 0x8
 3570 0167 0B       		.uleb128 0xb
 3571 0168 48090000 		.4byte	.LASF24
 3572 016c 06       		.byte	0x6
 3573 016d 92       		.byte	0x92
 3574 016e 09       		.byte	0x9
 3575 016f A2000000 		.4byte	0xa2
 3576 0173 02       		.byte	0x2
 3577 0174 23       		.byte	0x23
 3578 0175 0C       		.uleb128 0xc
 3579 0176 0B       		.uleb128 0xb
 3580 0177 62070000 		.4byte	.LASF25
 3581 017b 06       		.byte	0x6
 3582 017c 93       		.byte	0x93
 3583 017d 25       		.byte	0x25
 3584 017e C7010000 		.4byte	0x1c7
 3585 0182 02       		.byte	0x2
 3586 0183 23       		.byte	0x23
 3587 0184 10       		.uleb128 0x10
 3588 0185 00       		.byte	0
 3589 0186 07       		.uleb128 0x7
 3590 0187 04       		.byte	0x4
ARM GAS  /tmp/ccMyq1Ea.s 			page 133


 3591 0188 2D010000 		.4byte	0x12d
 3592 018c 0A       		.uleb128 0xa
 3593 018d FA030000 		.4byte	.LASF27
 3594 0191 14       		.byte	0x14
 3595 0192 06       		.byte	0x6
 3596 0193 A4       		.byte	0xa4
 3597 0194 10       		.byte	0x10
 3598 0195 C7010000 		.4byte	0x1c7
 3599 0199 0B       		.uleb128 0xb
 3600 019a 00000000 		.4byte	.LASF28
 3601 019e 06       		.byte	0x6
 3602 019f A7       		.byte	0xa7
 3603 01a0 17       		.byte	0x17
 3604 01a1 0C010000 		.4byte	0x10c
 3605 01a5 02       		.byte	0x2
 3606 01a6 23       		.byte	0x23
 3607 01a7 00       		.uleb128 0
 3608 01a8 0B       		.uleb128 0xb
 3609 01a9 D3000000 		.4byte	.LASF29
 3610 01ad 06       		.byte	0x6
 3611 01ae A8       		.byte	0xa8
 3612 01af 23       		.byte	0x23
 3613 01b0 20020000 		.4byte	0x220
 3614 01b4 02       		.byte	0x2
 3615 01b5 23       		.byte	0x23
 3616 01b6 04       		.uleb128 0x4
 3617 01b7 0B       		.uleb128 0xb
 3618 01b8 2E050000 		.4byte	.LASF30
 3619 01bc 06       		.byte	0x6
 3620 01bd A9       		.byte	0xa9
 3621 01be 11       		.byte	0x11
 3622 01bf 14020000 		.4byte	0x214
 3623 01c3 02       		.byte	0x2
 3624 01c4 23       		.byte	0x23
 3625 01c5 08       		.uleb128 0x8
 3626 01c6 00       		.byte	0
 3627 01c7 07       		.uleb128 0x7
 3628 01c8 04       		.byte	0x4
 3629 01c9 8C010000 		.4byte	0x18c
 3630 01cd 03       		.uleb128 0x3
 3631 01ce CD040000 		.4byte	.LASF31
 3632 01d2 06       		.byte	0x6
 3633 01d3 96       		.byte	0x96
 3634 01d4 1B       		.byte	0x1b
 3635 01d5 2D010000 		.4byte	0x12d
 3636 01d9 0A       		.uleb128 0xa
 3637 01da EA030000 		.4byte	.LASF32
 3638 01de 0C       		.byte	0xc
 3639 01df 06       		.byte	0x6
 3640 01e0 98       		.byte	0x98
 3641 01e1 08       		.byte	0x8
 3642 01e2 14020000 		.4byte	0x214
 3643 01e6 0B       		.uleb128 0xb
 3644 01e7 D2070000 		.4byte	.LASF21
 3645 01eb 06       		.byte	0x6
 3646 01ec 9B       		.byte	0x9b
 3647 01ed 21       		.byte	0x21
ARM GAS  /tmp/ccMyq1Ea.s 			page 134


 3648 01ee 16010000 		.4byte	0x116
 3649 01f2 02       		.byte	0x2
 3650 01f3 23       		.byte	0x23
 3651 01f4 00       		.uleb128 0
 3652 01f5 0B       		.uleb128 0xb
 3653 01f6 2C060000 		.4byte	.LASF22
 3654 01fa 06       		.byte	0x6
 3655 01fb 9C       		.byte	0x9c
 3656 01fc 2A       		.byte	0x2a
 3657 01fd 86010000 		.4byte	0x186
 3658 0201 02       		.byte	0x2
 3659 0202 23       		.byte	0x23
 3660 0203 04       		.uleb128 0x4
 3661 0204 0B       		.uleb128 0xb
 3662 0205 37030000 		.4byte	.LASF23
 3663 0209 06       		.byte	0x6
 3664 020a 9D       		.byte	0x9d
 3665 020b 2A       		.byte	0x2a
 3666 020c 86010000 		.4byte	0x186
 3667 0210 02       		.byte	0x2
 3668 0211 23       		.byte	0x23
 3669 0212 08       		.uleb128 0x8
 3670 0213 00       		.byte	0
 3671 0214 03       		.uleb128 0x3
 3672 0215 55050000 		.4byte	.LASF33
 3673 0219 06       		.byte	0x6
 3674 021a 9F       		.byte	0x9f
 3675 021b 20       		.byte	0x20
 3676 021c D9010000 		.4byte	0x1d9
 3677 0220 07       		.uleb128 0x7
 3678 0221 04       		.byte	0x4
 3679 0222 CD010000 		.4byte	0x1cd
 3680 0226 03       		.uleb128 0x3
 3681 0227 CE060000 		.4byte	.LASF34
 3682 022b 06       		.byte	0x6
 3683 022c AB       		.byte	0xab
 3684 022d 03       		.byte	0x3
 3685 022e 8C010000 		.4byte	0x18c
 3686 0232 06       		.uleb128 0x6
 3687 0233 26020000 		.4byte	0x226
 3688 0237 03       		.uleb128 0x3
 3689 0238 86060000 		.4byte	.LASF35
 3690 023c 07       		.byte	0x7
 3691 023d 46       		.byte	0x46
 3692 023e 25       		.byte	0x25
 3693 023f 48020000 		.4byte	0x248
 3694 0243 06       		.uleb128 0x6
 3695 0244 37020000 		.4byte	0x237
 3696 0248 07       		.uleb128 0x7
 3697 0249 04       		.byte	0x4
 3698 024a 4E020000 		.4byte	0x24e
 3699 024e 0C       		.uleb128 0xc
 3700 024f 30000000 		.4byte	.LASF155
 3701 0253 01       		.byte	0x1
 3702 0254 0A       		.uleb128 0xa
 3703 0255 DB000000 		.4byte	.LASF36
 3704 0259 08       		.byte	0x8
ARM GAS  /tmp/ccMyq1Ea.s 			page 135


 3705 025a 07       		.byte	0x7
 3706 025b 66       		.byte	0x66
 3707 025c 10       		.byte	0x10
 3708 025d 80020000 		.4byte	0x280
 3709 0261 0B       		.uleb128 0xb
 3710 0262 70010000 		.4byte	.LASF37
 3711 0266 07       		.byte	0x7
 3712 0267 68       		.byte	0x68
 3713 0268 0D       		.byte	0xd
 3714 0269 EF000000 		.4byte	0xef
 3715 026d 02       		.byte	0x2
 3716 026e 23       		.byte	0x23
 3717 026f 00       		.uleb128 0
 3718 0270 0B       		.uleb128 0xb
 3719 0271 08060000 		.4byte	.LASF38
 3720 0275 07       		.byte	0x7
 3721 0276 69       		.byte	0x69
 3722 0277 0D       		.byte	0xd
 3723 0278 16010000 		.4byte	0x116
 3724 027c 02       		.byte	0x2
 3725 027d 23       		.byte	0x23
 3726 027e 04       		.uleb128 0x4
 3727 027f 00       		.byte	0
 3728 0280 03       		.uleb128 0x3
 3729 0281 48060000 		.4byte	.LASF39
 3730 0285 07       		.byte	0x7
 3731 0286 6A       		.byte	0x6a
 3732 0287 03       		.byte	0x3
 3733 0288 54020000 		.4byte	0x254
 3734 028c 03       		.uleb128 0x3
 3735 028d 20050000 		.4byte	.LASF40
 3736 0291 08       		.byte	0x8
 3737 0292 30       		.byte	0x30
 3738 0293 22       		.byte	0x22
 3739 0294 9D020000 		.4byte	0x29d
 3740 0298 06       		.uleb128 0x6
 3741 0299 8C020000 		.4byte	0x28c
 3742 029d 07       		.uleb128 0x7
 3743 029e 04       		.byte	0x4
 3744 029f A3020000 		.4byte	0x2a3
 3745 02a3 0A       		.uleb128 0xa
 3746 02a4 65020000 		.4byte	.LASF41
 3747 02a8 50       		.byte	0x50
 3748 02a9 01       		.byte	0x1
 3749 02aa 61       		.byte	0x61
 3750 02ab 10       		.byte	0x10
 3751 02ac 63030000 		.4byte	0x363
 3752 02b0 0B       		.uleb128 0xb
 3753 02b1 6A090000 		.4byte	.LASF42
 3754 02b5 01       		.byte	0x1
 3755 02b6 63       		.byte	0x63
 3756 02b7 0A       		.byte	0xa
 3757 02b8 8F030000 		.4byte	0x38f
 3758 02bc 02       		.byte	0x2
 3759 02bd 23       		.byte	0x23
 3760 02be 00       		.uleb128 0
 3761 02bf 0B       		.uleb128 0xb
ARM GAS  /tmp/ccMyq1Ea.s 			page 136


 3762 02c0 E6060000 		.4byte	.LASF43
 3763 02c4 01       		.byte	0x1
 3764 02c5 64       		.byte	0x64
 3765 02c6 0A       		.byte	0xa
 3766 02c7 8F030000 		.4byte	0x38f
 3767 02cb 02       		.byte	0x2
 3768 02cc 23       		.byte	0x23
 3769 02cd 04       		.uleb128 0x4
 3770 02ce 0D       		.uleb128 0xd
 3771 02cf 7500     		.ascii	"u\000"
 3772 02d1 01       		.byte	0x1
 3773 02d2 6A       		.byte	0x6a
 3774 02d3 04       		.byte	0x4
 3775 02d4 D9030000 		.4byte	0x3d9
 3776 02d8 02       		.byte	0x2
 3777 02d9 23       		.byte	0x23
 3778 02da 08       		.uleb128 0x8
 3779 02db 0B       		.uleb128 0xb
 3780 02dc 3D010000 		.4byte	.LASF44
 3781 02e0 01       		.byte	0x1
 3782 02e1 6C       		.byte	0x6c
 3783 02e2 09       		.byte	0x9
 3784 02e3 26020000 		.4byte	0x226
 3785 02e7 02       		.byte	0x2
 3786 02e8 23       		.byte	0x23
 3787 02e9 10       		.uleb128 0x10
 3788 02ea 0B       		.uleb128 0xb
 3789 02eb 8D000000 		.4byte	.LASF45
 3790 02ef 01       		.byte	0x1
 3791 02f0 6D       		.byte	0x6d
 3792 02f1 09       		.byte	0x9
 3793 02f2 26020000 		.4byte	0x226
 3794 02f6 02       		.byte	0x2
 3795 02f7 23       		.byte	0x23
 3796 02f8 24       		.uleb128 0x24
 3797 02f9 0B       		.uleb128 0xb
 3798 02fa 42030000 		.4byte	.LASF46
 3799 02fe 01       		.byte	0x1
 3800 02ff 6F       		.byte	0x6f
 3801 0300 17       		.byte	0x17
 3802 0301 0C010000 		.4byte	0x10c
 3803 0305 02       		.byte	0x2
 3804 0306 23       		.byte	0x23
 3805 0307 38       		.uleb128 0x38
 3806 0308 0B       		.uleb128 0xb
 3807 0309 92070000 		.4byte	.LASF47
 3808 030d 01       		.byte	0x1
 3809 030e 70       		.byte	0x70
 3810 030f 0E       		.byte	0xe
 3811 0310 00010000 		.4byte	0x100
 3812 0314 02       		.byte	0x2
 3813 0315 23       		.byte	0x23
 3814 0316 3C       		.uleb128 0x3c
 3815 0317 0B       		.uleb128 0xb
 3816 0318 7D040000 		.4byte	.LASF48
 3817 031c 01       		.byte	0x1
 3818 031d 71       		.byte	0x71
ARM GAS  /tmp/ccMyq1Ea.s 			page 137


 3819 031e 0E       		.byte	0xe
 3820 031f 00010000 		.4byte	0x100
 3821 0323 02       		.byte	0x2
 3822 0324 23       		.byte	0x23
 3823 0325 40       		.uleb128 0x40
 3824 0326 0B       		.uleb128 0xb
 3825 0327 0A0A0000 		.4byte	.LASF49
 3826 032b 01       		.byte	0x1
 3827 032c 73       		.byte	0x73
 3828 032d 12       		.byte	0x12
 3829 032e C8000000 		.4byte	0xc8
 3830 0332 02       		.byte	0x2
 3831 0333 23       		.byte	0x23
 3832 0334 44       		.uleb128 0x44
 3833 0335 0B       		.uleb128 0xb
 3834 0336 68010000 		.4byte	.LASF50
 3835 033a 01       		.byte	0x1
 3836 033b 74       		.byte	0x74
 3837 033c 12       		.byte	0x12
 3838 033d C8000000 		.4byte	0xc8
 3839 0341 02       		.byte	0x2
 3840 0342 23       		.byte	0x23
 3841 0343 45       		.uleb128 0x45
 3842 0344 0B       		.uleb128 0xb
 3843 0345 BA070000 		.4byte	.LASF51
 3844 0349 01       		.byte	0x1
 3845 034a 7F       		.byte	0x7f
 3846 034b 0F       		.byte	0xf
 3847 034c 00010000 		.4byte	0x100
 3848 0350 02       		.byte	0x2
 3849 0351 23       		.byte	0x23
 3850 0352 48       		.uleb128 0x48
 3851 0353 0B       		.uleb128 0xb
 3852 0354 C2060000 		.4byte	.LASF52
 3853 0358 01       		.byte	0x1
 3854 0359 80       		.byte	0x80
 3855 035a 0B       		.byte	0xb
 3856 035b D2000000 		.4byte	0xd2
 3857 035f 02       		.byte	0x2
 3858 0360 23       		.byte	0x23
 3859 0361 4C       		.uleb128 0x4c
 3860 0362 00       		.byte	0
 3861 0363 0A       		.uleb128 0xa
 3862 0364 E7040000 		.4byte	.LASF53
 3863 0368 08       		.byte	0x8
 3864 0369 01       		.byte	0x1
 3865 036a 43       		.byte	0x43
 3866 036b 10       		.byte	0x10
 3867 036c 8F030000 		.4byte	0x38f
 3868 0370 0B       		.uleb128 0xb
 3869 0371 64080000 		.4byte	.LASF54
 3870 0375 01       		.byte	0x1
 3871 0376 45       		.byte	0x45
 3872 0377 0A       		.byte	0xa
 3873 0378 8F030000 		.4byte	0x38f
 3874 037c 02       		.byte	0x2
 3875 037d 23       		.byte	0x23
ARM GAS  /tmp/ccMyq1Ea.s 			page 138


 3876 037e 00       		.uleb128 0
 3877 037f 0B       		.uleb128 0xb
 3878 0380 D0010000 		.4byte	.LASF55
 3879 0384 01       		.byte	0x1
 3880 0385 46       		.byte	0x46
 3881 0386 0A       		.byte	0xa
 3882 0387 8F030000 		.4byte	0x38f
 3883 038b 02       		.byte	0x2
 3884 038c 23       		.byte	0x23
 3885 038d 04       		.uleb128 0x4
 3886 038e 00       		.byte	0
 3887 038f 07       		.uleb128 0x7
 3888 0390 04       		.byte	0x4
 3889 0391 BC000000 		.4byte	0xbc
 3890 0395 03       		.uleb128 0x3
 3891 0396 82070000 		.4byte	.LASF56
 3892 039a 01       		.byte	0x1
 3893 039b 47       		.byte	0x47
 3894 039c 03       		.byte	0x3
 3895 039d 63030000 		.4byte	0x363
 3896 03a1 0A       		.uleb128 0xa
 3897 03a2 22000000 		.4byte	.LASF57
 3898 03a6 08       		.byte	0x8
 3899 03a7 01       		.byte	0x1
 3900 03a8 49       		.byte	0x49
 3901 03a9 10       		.byte	0x10
 3902 03aa CD030000 		.4byte	0x3cd
 3903 03ae 0B       		.uleb128 0xb
 3904 03af F3090000 		.4byte	.LASF58
 3905 03b3 01       		.byte	0x1
 3906 03b4 4B       		.byte	0x4b
 3907 03b5 0F       		.byte	0xf
 3908 03b6 37020000 		.4byte	0x237
 3909 03ba 02       		.byte	0x2
 3910 03bb 23       		.byte	0x23
 3911 03bc 00       		.uleb128 0
 3912 03bd 0B       		.uleb128 0xb
 3913 03be BD080000 		.4byte	.LASF59
 3914 03c2 01       		.byte	0x1
 3915 03c3 4C       		.byte	0x4c
 3916 03c4 0E       		.byte	0xe
 3917 03c5 00010000 		.4byte	0x100
 3918 03c9 02       		.byte	0x2
 3919 03ca 23       		.byte	0x23
 3920 03cb 04       		.uleb128 0x4
 3921 03cc 00       		.byte	0
 3922 03cd 03       		.uleb128 0x3
 3923 03ce 44000000 		.4byte	.LASF60
 3924 03d2 01       		.byte	0x1
 3925 03d3 4D       		.byte	0x4d
 3926 03d4 03       		.byte	0x3
 3927 03d5 A1030000 		.4byte	0x3a1
 3928 03d9 0E       		.uleb128 0xe
 3929 03da 08       		.byte	0x8
 3930 03db 01       		.byte	0x1
 3931 03dc 66       		.byte	0x66
 3932 03dd 02       		.byte	0x2
ARM GAS  /tmp/ccMyq1Ea.s 			page 139


 3933 03de FB030000 		.4byte	0x3fb
 3934 03e2 0F       		.uleb128 0xf
 3935 03e3 45020000 		.4byte	.LASF61
 3936 03e7 01       		.byte	0x1
 3937 03e8 68       		.byte	0x68
 3938 03e9 13       		.byte	0x13
 3939 03ea 95030000 		.4byte	0x395
 3940 03ee 0F       		.uleb128 0xf
 3941 03ef 54030000 		.4byte	.LASF62
 3942 03f3 01       		.byte	0x1
 3943 03f4 69       		.byte	0x69
 3944 03f5 13       		.byte	0x13
 3945 03f6 CD030000 		.4byte	0x3cd
 3946 03fa 00       		.byte	0
 3947 03fb 03       		.uleb128 0x3
 3948 03fc EC090000 		.4byte	.LASF63
 3949 0400 01       		.byte	0x1
 3950 0401 83       		.byte	0x83
 3951 0402 03       		.byte	0x3
 3952 0403 A3020000 		.4byte	0x2a3
 3953 0407 03       		.uleb128 0x3
 3954 0408 A3010000 		.4byte	.LASF64
 3955 040c 01       		.byte	0x1
 3956 040d 87       		.byte	0x87
 3957 040e 10       		.byte	0x10
 3958 040f FB030000 		.4byte	0x3fb
 3959 0413 06       		.uleb128 0x6
 3960 0414 07040000 		.4byte	0x407
 3961 0418 10       		.uleb128 0x10
 3962 0419 01       		.byte	0x1
 3963 041a 64050000 		.4byte	.LASF65
 3964 041e 07       		.byte	0x7
 3965 041f DE08     		.2byte	0x8de
 3966 0421 06       		.byte	0x6
 3967 0422 01       		.byte	0x1
 3968 0423 01       		.byte	0x1
 3969 0424 38040000 		.4byte	0x438
 3970 0428 11       		.uleb128 0x11
 3971 0429 3E040000 		.4byte	0x43e
 3972 042d 11       		.uleb128 0x11
 3973 042e 16010000 		.4byte	0x116
 3974 0432 11       		.uleb128 0x11
 3975 0433 FB000000 		.4byte	0xfb
 3976 0437 00       		.byte	0
 3977 0438 07       		.uleb128 0x7
 3978 0439 04       		.byte	0x4
 3979 043a 26020000 		.4byte	0x226
 3980 043e 06       		.uleb128 0x6
 3981 043f 38040000 		.4byte	0x438
 3982 0443 12       		.uleb128 0x12
 3983 0444 01       		.byte	0x1
 3984 0445 2A080000 		.4byte	.LASF66
 3985 0449 09       		.byte	0x9
 3986 044a 92       		.byte	0x92
 3987 044b 06       		.byte	0x6
 3988 044c 01       		.byte	0x1
 3989 044d 01       		.byte	0x1
ARM GAS  /tmp/ccMyq1Ea.s 			page 140


 3990 044e 58040000 		.4byte	0x458
 3991 0452 11       		.uleb128 0x11
 3992 0453 A2000000 		.4byte	0xa2
 3993 0457 00       		.byte	0
 3994 0458 10       		.uleb128 0x10
 3995 0459 01       		.byte	0x1
 3996 045a 54000000 		.4byte	.LASF67
 3997 045e 07       		.byte	0x7
 3998 045f 3B09     		.2byte	0x93b
 3999 0461 06       		.byte	0x6
 4000 0462 01       		.byte	0x1
 4001 0463 01       		.byte	0x1
 4002 0464 73040000 		.4byte	0x473
 4003 0468 11       		.uleb128 0x11
 4004 0469 43020000 		.4byte	0x243
 4005 046d 11       		.uleb128 0x11
 4006 046e 00010000 		.4byte	0x100
 4007 0472 00       		.byte	0
 4008 0473 13       		.uleb128 0x13
 4009 0474 01       		.byte	0x1
 4010 0475 A8080000 		.4byte	.LASF68
 4011 0479 07       		.byte	0x7
 4012 047a 2B09     		.2byte	0x92b
 4013 047c 0C       		.byte	0xc
 4014 047d 01       		.byte	0x1
 4015 047e EF000000 		.4byte	0xef
 4016 0482 01       		.byte	0x1
 4017 0483 8D040000 		.4byte	0x48d
 4018 0487 11       		.uleb128 0x11
 4019 0488 43020000 		.4byte	0x243
 4020 048c 00       		.byte	0
 4021 048d 14       		.uleb128 0x14
 4022 048e 01       		.byte	0x1
 4023 048f 5F040000 		.4byte	.LASF71
 4024 0493 07       		.byte	0x7
 4025 0494 6609     		.2byte	0x966
 4026 0496 0E       		.byte	0xe
 4027 0497 01       		.byte	0x1
 4028 0498 37020000 		.4byte	0x237
 4029 049c 01       		.byte	0x1
 4030 049d 15       		.uleb128 0x15
 4031 049e 01       		.byte	0x1
 4032 049f 85080000 		.4byte	.LASF75
 4033 04a3 07       		.byte	0x7
 4034 04a4 1F09     		.2byte	0x91f
 4035 04a6 06       		.byte	0x6
 4036 04a7 01       		.byte	0x1
 4037 04a8 01       		.byte	0x1
 4038 04a9 16       		.uleb128 0x16
 4039 04aa 01       		.byte	0x1
 4040 04ab E5090000 		.4byte	.LASF69
 4041 04af 0A       		.byte	0xa
 4042 04b0 1F       		.byte	0x1f
 4043 04b1 09       		.byte	0x9
 4044 04b2 01       		.byte	0x1
 4045 04b3 A2000000 		.4byte	0xa2
 4046 04b7 01       		.byte	0x1
ARM GAS  /tmp/ccMyq1Ea.s 			page 141


 4047 04b8 CC040000 		.4byte	0x4cc
 4048 04bc 11       		.uleb128 0x11
 4049 04bd A2000000 		.4byte	0xa2
 4050 04c1 11       		.uleb128 0x11
 4051 04c2 B0000000 		.4byte	0xb0
 4052 04c6 11       		.uleb128 0x11
 4053 04c7 3A000000 		.4byte	0x3a
 4054 04cb 00       		.byte	0
 4055 04cc 13       		.uleb128 0x13
 4056 04cd 01       		.byte	0x1
 4057 04ce 97040000 		.4byte	.LASF70
 4058 04d2 07       		.byte	0x7
 4059 04d3 3109     		.2byte	0x931
 4060 04d5 0C       		.byte	0xc
 4061 04d6 01       		.byte	0x1
 4062 04d7 EF000000 		.4byte	0xef
 4063 04db 01       		.byte	0x1
 4064 04dc E6040000 		.4byte	0x4e6
 4065 04e0 11       		.uleb128 0x11
 4066 04e1 43020000 		.4byte	0x243
 4067 04e5 00       		.byte	0
 4068 04e6 14       		.uleb128 0x14
 4069 04e7 01       		.byte	0x1
 4070 04e8 F8070000 		.4byte	.LASF72
 4071 04ec 07       		.byte	0x7
 4072 04ed 3805     		.2byte	0x538
 4073 04ef 0C       		.byte	0xc
 4074 04f0 01       		.byte	0x1
 4075 04f1 EF000000 		.4byte	0xef
 4076 04f5 01       		.byte	0x1
 4077 04f6 10       		.uleb128 0x10
 4078 04f7 01       		.byte	0x1
 4079 04f8 49040000 		.4byte	.LASF73
 4080 04fc 07       		.byte	0x7
 4081 04fd D008     		.2byte	0x8d0
 4082 04ff 06       		.byte	0x6
 4083 0500 01       		.byte	0x1
 4084 0501 01       		.byte	0x1
 4085 0502 11050000 		.4byte	0x511
 4086 0506 11       		.uleb128 0x11
 4087 0507 3E040000 		.4byte	0x43e
 4088 050b 11       		.uleb128 0x11
 4089 050c 22010000 		.4byte	0x122
 4090 0510 00       		.byte	0
 4091 0511 13       		.uleb128 0x13
 4092 0512 01       		.byte	0x1
 4093 0513 15080000 		.4byte	.LASF74
 4094 0517 07       		.byte	0x7
 4095 0518 1909     		.2byte	0x919
 4096 051a 0C       		.byte	0xc
 4097 051b 01       		.byte	0x1
 4098 051c EF000000 		.4byte	0xef
 4099 0520 01       		.byte	0x1
 4100 0521 30050000 		.4byte	0x530
 4101 0525 11       		.uleb128 0x11
 4102 0526 36050000 		.4byte	0x536
 4103 052a 11       		.uleb128 0x11
ARM GAS  /tmp/ccMyq1Ea.s 			page 142


 4104 052b 41050000 		.4byte	0x541
 4105 052f 00       		.byte	0
 4106 0530 07       		.uleb128 0x7
 4107 0531 04       		.byte	0x4
 4108 0532 80020000 		.4byte	0x280
 4109 0536 06       		.uleb128 0x6
 4110 0537 30050000 		.4byte	0x530
 4111 053b 07       		.uleb128 0x7
 4112 053c 04       		.byte	0x4
 4113 053d 16010000 		.4byte	0x116
 4114 0541 06       		.uleb128 0x6
 4115 0542 3B050000 		.4byte	0x53b
 4116 0546 15       		.uleb128 0x15
 4117 0547 01       		.byte	0x1
 4118 0548 6C030000 		.4byte	.LASF76
 4119 054c 07       		.byte	0x7
 4120 054d 0205     		.2byte	0x502
 4121 054f 06       		.byte	0x6
 4122 0550 01       		.byte	0x1
 4123 0551 01       		.byte	0x1
 4124 0552 10       		.uleb128 0x10
 4125 0553 01       		.byte	0x1
 4126 0554 52060000 		.4byte	.LASF77
 4127 0558 07       		.byte	0x7
 4128 0559 6C09     		.2byte	0x96c
 4129 055b 06       		.byte	0x6
 4130 055c 01       		.byte	0x1
 4131 055d 01       		.byte	0x1
 4132 055e 68050000 		.4byte	0x568
 4133 0562 11       		.uleb128 0x11
 4134 0563 36050000 		.4byte	0x536
 4135 0567 00       		.byte	0
 4136 0568 14       		.uleb128 0x14
 4137 0569 01       		.byte	0x1
 4138 056a 50090000 		.4byte	.LASF78
 4139 056e 07       		.byte	0x7
 4140 056f 0E09     		.2byte	0x90e
 4141 0571 0E       		.byte	0xe
 4142 0572 01       		.byte	0x1
 4143 0573 37020000 		.4byte	0x237
 4144 0577 01       		.byte	0x1
 4145 0578 16       		.uleb128 0x16
 4146 0579 01       		.byte	0x1
 4147 057a 5F030000 		.4byte	.LASF79
 4148 057e 09       		.byte	0x9
 4149 057f 91       		.byte	0x91
 4150 0580 07       		.byte	0x7
 4151 0581 01       		.byte	0x1
 4152 0582 A2000000 		.4byte	0xa2
 4153 0586 01       		.byte	0x1
 4154 0587 91050000 		.4byte	0x591
 4155 058b 11       		.uleb128 0x11
 4156 058c 3A000000 		.4byte	0x3a
 4157 0590 00       		.byte	0
 4158 0591 17       		.uleb128 0x17
 4159 0592 01       		.byte	0x1
 4160 0593 10000000 		.4byte	.LASF80
ARM GAS  /tmp/ccMyq1Ea.s 			page 143


 4161 0597 02       		.byte	0x2
 4162 0598 62       		.byte	0x62
 4163 0599 0D       		.byte	0xd
 4164 059a 01       		.byte	0x1
 4165 059b 01       		.byte	0x1
 4166 059c 10       		.uleb128 0x10
 4167 059d 01       		.byte	0x1
 4168 059e 16090000 		.4byte	.LASF81
 4169 05a2 06       		.byte	0x6
 4170 05a3 5901     		.2byte	0x159
 4171 05a5 06       		.byte	0x6
 4172 05a6 01       		.byte	0x1
 4173 05a7 01       		.byte	0x1
 4174 05a8 B2050000 		.4byte	0x5b2
 4175 05ac 11       		.uleb128 0x11
 4176 05ad 3E040000 		.4byte	0x43e
 4177 05b1 00       		.byte	0
 4178 05b2 13       		.uleb128 0x13
 4179 05b3 01       		.byte	0x1
 4180 05b4 AF040000 		.4byte	.LASF82
 4181 05b8 07       		.byte	0x7
 4182 05b9 F808     		.2byte	0x8f8
 4183 05bb 0C       		.byte	0xc
 4184 05bc 01       		.byte	0x1
 4185 05bd EF000000 		.4byte	0xef
 4186 05c1 01       		.byte	0x1
 4187 05c2 CC050000 		.4byte	0x5cc
 4188 05c6 11       		.uleb128 0x11
 4189 05c7 D2050000 		.4byte	0x5d2
 4190 05cb 00       		.byte	0
 4191 05cc 07       		.uleb128 0x7
 4192 05cd 04       		.byte	0x4
 4193 05ce 32020000 		.4byte	0x232
 4194 05d2 06       		.uleb128 0x6
 4195 05d3 CC050000 		.4byte	0x5cc
 4196 05d7 17       		.uleb128 0x17
 4197 05d8 01       		.byte	0x1
 4198 05d9 7F010000 		.4byte	.LASF83
 4199 05dd 02       		.byte	0x2
 4200 05de 61       		.byte	0x61
 4201 05df 0D       		.byte	0xd
 4202 05e0 01       		.byte	0x1
 4203 05e1 01       		.byte	0x1
 4204 05e2 18       		.uleb128 0x18
 4205 05e3 01       		.byte	0x1
 4206 05e4 9B070000 		.4byte	.LASF104
 4207 05e8 01       		.byte	0x1
 4208 05e9 AD0A     		.2byte	0xaad
 4209 05eb 07       		.byte	0x7
 4210 05ec 01       		.byte	0x1
 4211 05ed CC070000 		.4byte	.LFB36
 4212 05f1 10080000 		.4byte	.LFE36
 4213 05f5 00000000 		.4byte	.LLST132
 4214 05f9 01       		.byte	0x1
 4215 05fa 9D060000 		.4byte	0x69d
 4216 05fe 19       		.uleb128 0x19
 4217 05ff 45020000 		.4byte	.LASF61
ARM GAS  /tmp/ccMyq1Ea.s 			page 144


 4218 0603 01       		.byte	0x1
 4219 0604 AD0A     		.2byte	0xaad
 4220 0606 35       		.byte	0x35
 4221 0607 8C020000 		.4byte	0x28c
 4222 060b 34000000 		.4byte	.LLST133
 4223 060f 2C000000 		.4byte	.LVUS133
 4224 0613 19       		.uleb128 0x19
 4225 0614 3B090000 		.4byte	.LASF84
 4226 0618 01       		.byte	0x1
 4227 0619 AD0A     		.2byte	0xaad
 4228 061b 48       		.byte	0x48
 4229 061c 16010000 		.4byte	0x116
 4230 0620 77000000 		.4byte	.LLST134
 4231 0624 71000000 		.4byte	.LVUS134
 4232 0628 19       		.uleb128 0x19
 4233 0629 2B010000 		.4byte	.LASF85
 4234 062d 01       		.byte	0x1
 4235 062e AD0A     		.2byte	0xaad
 4236 0630 67       		.byte	0x67
 4237 0631 FB000000 		.4byte	0xfb
 4238 0635 AF000000 		.4byte	.LLST135
 4239 0639 A9000000 		.4byte	.LVUS135
 4240 063d 1A       		.uleb128 0x1a
 4241 063e 75080000 		.4byte	.LASF89
 4242 0642 01       		.byte	0x1
 4243 0643 AF0A     		.2byte	0xaaf
 4244 0645 12       		.byte	0x12
 4245 0646 A3060000 		.4byte	0x6a3
 4246 064a E9000000 		.4byte	.LLST136
 4247 064e E1000000 		.4byte	.LVUS136
 4248 0652 1B       		.uleb128 0x1b
 4249 0653 D8070000 		.4byte	.LVL284
 4250 0657 D7050000 		.4byte	0x5d7
 4251 065b 1B       		.uleb128 0x1b
 4252 065c F8070000 		.4byte	.LVL285
 4253 0660 91050000 		.4byte	0x591
 4254 0664 1C       		.uleb128 0x1c
 4255 0665 08080000 		.4byte	.LVL286
 4256 0669 18040000 		.4byte	0x418
 4257 066d 84060000 		.4byte	0x684
 4258 0671 1D       		.uleb128 0x1d
 4259 0672 01       		.byte	0x1
 4260 0673 50       		.byte	0x50
 4261 0674 02       		.byte	0x2
 4262 0675 74       		.byte	0x74
 4263 0676 24       		.sleb128 36
 4264 0677 1D       		.uleb128 0x1d
 4265 0678 01       		.byte	0x1
 4266 0679 51       		.byte	0x51
 4267 067a 02       		.byte	0x2
 4268 067b 75       		.byte	0x75
 4269 067c 00       		.sleb128 0
 4270 067d 1D       		.uleb128 0x1d
 4271 067e 01       		.byte	0x1
 4272 067f 52       		.byte	0x52
 4273 0680 02       		.byte	0x2
 4274 0681 76       		.byte	0x76
ARM GAS  /tmp/ccMyq1Ea.s 			page 145


 4275 0682 00       		.sleb128 0
 4276 0683 00       		.byte	0
 4277 0684 1E       		.uleb128 0x1e
 4278 0685 10080000 		.4byte	.LVL288
 4279 0689 01       		.byte	0x1
 4280 068a FB070000 		.4byte	0x7fb
 4281 068e 1D       		.uleb128 0x1d
 4282 068f 01       		.byte	0x1
 4283 0690 50       		.byte	0x50
 4284 0691 09       		.byte	0x9
 4285 0692 F3       		.byte	0xf3
 4286 0693 03       		.uleb128 0x3
 4287 0694 F5       		.byte	0xf5
 4288 0695 00       		.uleb128 0
 4289 0696 25       		.uleb128 0x25
 4290 0697 F7       		.byte	0xf7
 4291 0698 2C       		.uleb128 0x2c
 4292 0699 F7       		.byte	0xf7
 4293 069a 00       		.uleb128 0
 4294 069b 00       		.byte	0
 4295 069c 00       		.byte	0
 4296 069d 07       		.uleb128 0x7
 4297 069e 04       		.byte	0x4
 4298 069f 07040000 		.4byte	0x407
 4299 06a3 06       		.uleb128 0x6
 4300 06a4 9D060000 		.4byte	0x69d
 4301 06a8 1F       		.uleb128 0x1f
 4302 06a9 01       		.byte	0x1
 4303 06aa 34080000 		.4byte	.LASF91
 4304 06ae 01       		.byte	0x1
 4305 06af 2C09     		.2byte	0x92c
 4306 06b1 0C       		.byte	0xc
 4307 06b2 01       		.byte	0x1
 4308 06b3 EF000000 		.4byte	0xef
 4309 06b7 C0070000 		.4byte	.LFB35
 4310 06bb CC070000 		.4byte	.LFE35
 4311 06bf 02       		.byte	0x2
 4312 06c0 7D       		.byte	0x7d
 4313 06c1 00       		.sleb128 0
 4314 06c2 01       		.byte	0x1
 4315 06c3 07070000 		.4byte	0x707
 4316 06c7 19       		.uleb128 0x19
 4317 06c8 45020000 		.4byte	.LASF61
 4318 06cc 01       		.byte	0x1
 4319 06cd 2C09     		.2byte	0x92c
 4320 06cf 3A       		.byte	0x3a
 4321 06d0 98020000 		.4byte	0x298
 4322 06d4 2A010000 		.4byte	.LLST129
 4323 06d8 26010000 		.4byte	.LVUS129
 4324 06dc 1A       		.uleb128 0x1a
 4325 06dd 7D080000 		.4byte	.LASF90
 4326 06e1 01       		.byte	0x1
 4327 06e2 2E09     		.2byte	0x92e
 4328 06e4 0C       		.byte	0xc
 4329 06e5 EF000000 		.4byte	0xef
 4330 06e9 55010000 		.4byte	.LLST130
 4331 06ed 51010000 		.4byte	.LVUS130
ARM GAS  /tmp/ccMyq1Ea.s 			page 146


 4332 06f1 1A       		.uleb128 0x1a
 4333 06f2 75080000 		.4byte	.LASF89
 4334 06f6 01       		.byte	0x1
 4335 06f7 2F09     		.2byte	0x92f
 4336 06f9 11       		.byte	0x11
 4337 06fa A3060000 		.4byte	0x6a3
 4338 06fe 88010000 		.4byte	.LLST131
 4339 0702 84010000 		.4byte	.LVUS131
 4340 0706 00       		.byte	0
 4341 0707 20       		.uleb128 0x20
 4342 0708 D8040000 		.4byte	.LASF100
 4343 070c 01       		.byte	0x1
 4344 070d 1709     		.2byte	0x917
 4345 070f 13       		.byte	0x13
 4346 0710 01       		.byte	0x1
 4347 0711 EF000000 		.4byte	0xef
 4348 0715 01       		.byte	0x1
 4349 0716 35070000 		.4byte	0x735
 4350 071a 21       		.uleb128 0x21
 4351 071b 75080000 		.4byte	.LASF89
 4352 071f 01       		.byte	0x1
 4353 0720 1709     		.2byte	0x917
 4354 0722 32       		.byte	0x32
 4355 0723 35070000 		.4byte	0x735
 4356 0727 22       		.uleb128 0x22
 4357 0728 7D080000 		.4byte	.LASF90
 4358 072c 01       		.byte	0x1
 4359 072d 1909     		.2byte	0x919
 4360 072f 0C       		.byte	0xc
 4361 0730 EF000000 		.4byte	0xef
 4362 0734 00       		.byte	0
 4363 0735 07       		.uleb128 0x7
 4364 0736 04       		.byte	0x4
 4365 0737 13040000 		.4byte	0x413
 4366 073b 06       		.uleb128 0x6
 4367 073c 35070000 		.4byte	0x735
 4368 0740 1F       		.uleb128 0x1f
 4369 0741 01       		.byte	0x1
 4370 0742 AC090000 		.4byte	.LASF92
 4371 0746 01       		.byte	0x1
 4372 0747 0409     		.2byte	0x904
 4373 0749 0C       		.byte	0xc
 4374 074a 01       		.byte	0x1
 4375 074b EF000000 		.4byte	0xef
 4376 074f B6070000 		.4byte	.LFB33
 4377 0753 C0070000 		.4byte	.LFE33
 4378 0757 02       		.byte	0x2
 4379 0758 7D       		.byte	0x7d
 4380 0759 00       		.sleb128 0
 4381 075a 01       		.byte	0x1
 4382 075b 9F070000 		.4byte	0x79f
 4383 075f 19       		.uleb128 0x19
 4384 0760 45020000 		.4byte	.LASF61
 4385 0764 01       		.byte	0x1
 4386 0765 0409     		.2byte	0x904
 4387 0767 3B       		.byte	0x3b
 4388 0768 98020000 		.4byte	0x298
ARM GAS  /tmp/ccMyq1Ea.s 			page 147


 4389 076c B3010000 		.4byte	.LLST126
 4390 0770 AF010000 		.4byte	.LVUS126
 4391 0774 1A       		.uleb128 0x1a
 4392 0775 7D080000 		.4byte	.LASF90
 4393 0779 01       		.byte	0x1
 4394 077a 0609     		.2byte	0x906
 4395 077c 0C       		.byte	0xc
 4396 077d EF000000 		.4byte	0xef
 4397 0781 DC010000 		.4byte	.LLST127
 4398 0785 DA010000 		.4byte	.LVUS127
 4399 0789 1A       		.uleb128 0x1a
 4400 078a 75080000 		.4byte	.LASF89
 4401 078e 01       		.byte	0x1
 4402 078f 0709     		.2byte	0x907
 4403 0791 11       		.byte	0x11
 4404 0792 A3060000 		.4byte	0x6a3
 4405 0796 FA010000 		.4byte	.LLST128
 4406 079a F6010000 		.4byte	.LVUS128
 4407 079e 00       		.byte	0
 4408 079f 23       		.uleb128 0x23
 4409 07a0 F9020000 		.4byte	.LASF96
 4410 07a4 01       		.byte	0x1
 4411 07a5 EF08     		.2byte	0x8ef
 4412 07a7 13       		.byte	0x13
 4413 07a8 01       		.byte	0x1
 4414 07a9 EF000000 		.4byte	0xef
 4415 07ad 00000000 		.4byte	.LFB32
 4416 07b1 16000000 		.4byte	.LFE32
 4417 07b5 21020000 		.4byte	.LLST0
 4418 07b9 01       		.byte	0x1
 4419 07ba FB070000 		.4byte	0x7fb
 4420 07be 19       		.uleb128 0x19
 4421 07bf 75080000 		.4byte	.LASF89
 4422 07c3 01       		.byte	0x1
 4423 07c4 EF08     		.2byte	0x8ef
 4424 07c6 33       		.byte	0x33
 4425 07c7 35070000 		.4byte	0x735
 4426 07cb 47020000 		.4byte	.LLST1
 4427 07cf 41020000 		.4byte	.LVUS1
 4428 07d3 1A       		.uleb128 0x1a
 4429 07d4 7D080000 		.4byte	.LASF90
 4430 07d8 01       		.byte	0x1
 4431 07d9 F108     		.2byte	0x8f1
 4432 07db 0C       		.byte	0xc
 4433 07dc EF000000 		.4byte	0xef
 4434 07e0 7B020000 		.4byte	.LLST2
 4435 07e4 79020000 		.4byte	.LVUS2
 4436 07e8 1B       		.uleb128 0x1b
 4437 07e9 08000000 		.4byte	.LVL1
 4438 07ed D7050000 		.4byte	0x5d7
 4439 07f1 1B       		.uleb128 0x1b
 4440 07f2 0E000000 		.4byte	.LVL3
 4441 07f6 91050000 		.4byte	0x591
 4442 07fa 00       		.byte	0
 4443 07fb 24       		.uleb128 0x24
 4444 07fc 8A090000 		.4byte	.LASF93
 4445 0800 01       		.byte	0x1
ARM GAS  /tmp/ccMyq1Ea.s 			page 148


 4446 0801 7708     		.2byte	0x877
 4447 0803 0D       		.byte	0xd
 4448 0804 01       		.byte	0x1
 4449 0805 A4000000 		.4byte	.LFB31
 4450 0809 10010000 		.4byte	.LFE31
 4451 080d 95020000 		.4byte	.LLST12
 4452 0811 01       		.byte	0x1
 4453 0812 C9080000 		.4byte	0x8c9
 4454 0816 19       		.uleb128 0x19
 4455 0817 75080000 		.4byte	.LASF89
 4456 081b 01       		.byte	0x1
 4457 081c 7708     		.2byte	0x877
 4458 081e 2D       		.byte	0x2d
 4459 081f A3060000 		.4byte	0x6a3
 4460 0823 D5020000 		.4byte	.LLST13
 4461 0827 CD020000 		.4byte	.LVUS13
 4462 082b 25       		.uleb128 0x25
 4463 082c 00000000 		.4byte	.Ldebug_ranges0+0
 4464 0830 67080000 		.4byte	0x867
 4465 0834 1A       		.uleb128 0x1a
 4466 0835 68010000 		.4byte	.LASF50
 4467 0839 01       		.byte	0x1
 4468 083a 8108     		.2byte	0x881
 4469 083c 0A       		.byte	0xa
 4470 083d BC000000 		.4byte	0xbc
 4471 0841 1A030000 		.4byte	.LLST14
 4472 0845 12030000 		.4byte	.LVUS14
 4473 0849 1C       		.uleb128 0x1c
 4474 084a F2000000 		.4byte	.LVL33
 4475 084e B2050000 		.4byte	0x5b2
 4476 0852 5D080000 		.4byte	0x85d
 4477 0856 1D       		.uleb128 0x1d
 4478 0857 01       		.byte	0x1
 4479 0858 50       		.byte	0x50
 4480 0859 02       		.byte	0x2
 4481 085a 76       		.byte	0x76
 4482 085b 00       		.sleb128 0
 4483 085c 00       		.byte	0
 4484 085d 1B       		.uleb128 0x1b
 4485 085e F8000000 		.4byte	.LVL34
 4486 0862 9D040000 		.4byte	0x49d
 4487 0866 00       		.byte	0
 4488 0867 25       		.uleb128 0x25
 4489 0868 18000000 		.4byte	.Ldebug_ranges0+0x18
 4490 086c A3080000 		.4byte	0x8a3
 4491 0870 1A       		.uleb128 0x1a
 4492 0871 0A0A0000 		.4byte	.LASF49
 4493 0875 01       		.byte	0x1
 4494 0876 D208     		.2byte	0x8d2
 4495 0878 0A       		.byte	0xa
 4496 0879 BC000000 		.4byte	0xbc
 4497 087d 58030000 		.4byte	.LLST15
 4498 0881 50030000 		.4byte	.LVUS15
 4499 0885 1C       		.uleb128 0x1c
 4500 0886 04010000 		.4byte	.LVL38
 4501 088a B2050000 		.4byte	0x5b2
 4502 088e 99080000 		.4byte	0x899
ARM GAS  /tmp/ccMyq1Ea.s 			page 149


 4503 0892 1D       		.uleb128 0x1d
 4504 0893 01       		.byte	0x1
 4505 0894 50       		.byte	0x50
 4506 0895 02       		.byte	0x2
 4507 0896 76       		.byte	0x76
 4508 0897 00       		.sleb128 0
 4509 0898 00       		.byte	0
 4510 0899 1B       		.uleb128 0x1b
 4511 089a 0A010000 		.4byte	.LVL39
 4512 089e 9D040000 		.4byte	0x49d
 4513 08a2 00       		.byte	0
 4514 08a3 1B       		.uleb128 0x1b
 4515 08a4 AC000000 		.4byte	.LVL25
 4516 08a8 D7050000 		.4byte	0x5d7
 4517 08ac 1B       		.uleb128 0x1b
 4518 08ad C8000000 		.4byte	.LVL27
 4519 08b1 91050000 		.4byte	0x591
 4520 08b5 1B       		.uleb128 0x1b
 4521 08b6 CC000000 		.4byte	.LVL28
 4522 08ba D7050000 		.4byte	0x5d7
 4523 08be 26       		.uleb128 0x26
 4524 08bf EC000000 		.4byte	.LVL32
 4525 08c3 01       		.byte	0x1
 4526 08c4 91050000 		.4byte	0x591
 4527 08c8 00       		.byte	0
 4528 08c9 24       		.uleb128 0x24
 4529 08ca 26090000 		.4byte	.LASF94
 4530 08ce 01       		.byte	0x1
 4531 08cf 6508     		.2byte	0x865
 4532 08d1 0D       		.byte	0xd
 4533 08d2 01       		.byte	0x1
 4534 08d3 7C000000 		.4byte	.LFB30
 4535 08d7 A4000000 		.4byte	.LFE30
 4536 08db 8E030000 		.4byte	.LLST9
 4537 08df 01       		.byte	0x1
 4538 08e0 27090000 		.4byte	0x927
 4539 08e4 19       		.uleb128 0x19
 4540 08e5 75080000 		.4byte	.LASF89
 4541 08e9 01       		.byte	0x1
 4542 08ea 6508     		.2byte	0x865
 4543 08ec 33       		.byte	0x33
 4544 08ed A3060000 		.4byte	0x6a3
 4545 08f1 DA030000 		.4byte	.LLST10
 4546 08f5 D2030000 		.4byte	.LVUS10
 4547 08f9 19       		.uleb128 0x19
 4548 08fa 09030000 		.4byte	.LASF95
 4549 08fe 01       		.byte	0x1
 4550 08ff 6508     		.2byte	0x865
 4551 0901 49       		.byte	0x49
 4552 0902 A4000000 		.4byte	0xa4
 4553 0906 1F040000 		.4byte	.LLST11
 4554 090a 17040000 		.4byte	.LVUS11
 4555 090e 1E       		.uleb128 0x1e
 4556 090f A0000000 		.4byte	.LVL23
 4557 0913 01       		.byte	0x1
 4558 0914 DC1D0000 		.4byte	0x1ddc
 4559 0918 1D       		.uleb128 0x1d
ARM GAS  /tmp/ccMyq1Ea.s 			page 150


 4560 0919 01       		.byte	0x1
 4561 091a 50       		.byte	0x50
 4562 091b 09       		.byte	0x9
 4563 091c F3       		.byte	0xf3
 4564 091d 03       		.uleb128 0x3
 4565 091e F5       		.byte	0xf5
 4566 091f 01       		.uleb128 0x1
 4567 0920 25       		.uleb128 0x25
 4568 0921 F7       		.byte	0xf7
 4569 0922 2C       		.uleb128 0x2c
 4570 0923 F7       		.byte	0xf7
 4571 0924 00       		.uleb128 0
 4572 0925 00       		.byte	0
 4573 0926 00       		.byte	0
 4574 0927 23       		.uleb128 0x23
 4575 0928 24040000 		.4byte	.LASF97
 4576 092c 01       		.byte	0x1
 4577 092d 1608     		.2byte	0x816
 4578 092f 13       		.byte	0x13
 4579 0930 01       		.byte	0x1
 4580 0931 EF000000 		.4byte	0xef
 4581 0935 16000000 		.4byte	.LFB29
 4582 0939 7C000000 		.4byte	.LFE29
 4583 093d 5C040000 		.4byte	.LLST3
 4584 0941 01       		.byte	0x1
 4585 0942 CB090000 		.4byte	0x9cb
 4586 0946 19       		.uleb128 0x19
 4587 0947 75080000 		.4byte	.LASF89
 4588 094b 01       		.byte	0x1
 4589 094c 1608     		.2byte	0x816
 4590 094e 37       		.byte	0x37
 4591 094f A3060000 		.4byte	0x6a3
 4592 0953 88040000 		.4byte	.LLST4
 4593 0957 7C040000 		.4byte	.LVUS4
 4594 095b 19       		.uleb128 0x19
 4595 095c 07080000 		.4byte	.LASF98
 4596 0960 01       		.byte	0x1
 4597 0961 1608     		.2byte	0x816
 4598 0963 4C       		.byte	0x4c
 4599 0964 B0000000 		.4byte	0xb0
 4600 0968 DE040000 		.4byte	.LLST5
 4601 096c D2040000 		.4byte	.LVUS5
 4602 0970 19       		.uleb128 0x19
 4603 0971 000A0000 		.4byte	.LASF99
 4604 0975 01       		.byte	0x1
 4605 0976 1608     		.2byte	0x816
 4606 0978 6C       		.byte	0x6c
 4607 0979 FB000000 		.4byte	0xfb
 4608 097d 4F050000 		.4byte	.LLST6
 4609 0981 43050000 		.4byte	.LVUS6
 4610 0985 1A       		.uleb128 0x1a
 4611 0986 7D080000 		.4byte	.LASF90
 4612 098a 01       		.byte	0x1
 4613 098b 1808     		.2byte	0x818
 4614 098d 0C       		.byte	0xc
 4615 098e EF000000 		.4byte	0xef
 4616 0992 B1050000 		.4byte	.LLST7
ARM GAS  /tmp/ccMyq1Ea.s 			page 151


 4617 0996 AB050000 		.4byte	.LVUS7
 4618 099a 1A       		.uleb128 0x1a
 4619 099b 42030000 		.4byte	.LASF46
 4620 099f 01       		.byte	0x1
 4621 09a0 1908     		.2byte	0x819
 4622 09a2 0D       		.byte	0xd
 4623 09a3 00010000 		.4byte	0x100
 4624 09a7 E2050000 		.4byte	.LLST8
 4625 09ab DC050000 		.4byte	.LVUS8
 4626 09af 1B       		.uleb128 0x1b
 4627 09b0 2C000000 		.4byte	.LVL9
 4628 09b4 CC040000 		.4byte	0x4cc
 4629 09b8 1B       		.uleb128 0x1b
 4630 09b9 3C000000 		.4byte	.LVL14
 4631 09bd DC1D0000 		.4byte	0x1ddc
 4632 09c1 1B       		.uleb128 0x1b
 4633 09c2 58000000 		.4byte	.LVL18
 4634 09c6 DC1D0000 		.4byte	0x1ddc
 4635 09ca 00       		.byte	0
 4636 09cb 20       		.uleb128 0x20
 4637 09cc 12030000 		.4byte	.LASF101
 4638 09d0 01       		.byte	0x1
 4639 09d1 FD07     		.2byte	0x7fd
 4640 09d3 15       		.byte	0x15
 4641 09d4 01       		.byte	0x1
 4642 09d5 00010000 		.4byte	0x100
 4643 09d9 01       		.byte	0x1
 4644 09da F9090000 		.4byte	0x9f9
 4645 09de 21       		.uleb128 0x21
 4646 09df 75080000 		.4byte	.LASF89
 4647 09e3 01       		.byte	0x1
 4648 09e4 FD07     		.2byte	0x7fd
 4649 09e6 51       		.byte	0x51
 4650 09e7 3B070000 		.4byte	0x73b
 4651 09eb 22       		.uleb128 0x22
 4652 09ec A2060000 		.4byte	.LASF102
 4653 09f0 01       		.byte	0x1
 4654 09f1 FF07     		.2byte	0x7ff
 4655 09f3 0E       		.byte	0xe
 4656 09f4 00010000 		.4byte	0x100
 4657 09f8 00       		.byte	0
 4658 09f9 1F       		.uleb128 0x1f
 4659 09fa 01       		.byte	0x1
 4660 09fb 18060000 		.4byte	.LASF103
 4661 09ff 01       		.byte	0x1
 4662 0a00 F307     		.2byte	0x7f3
 4663 0a02 0A       		.byte	0xa
 4664 0a03 01       		.byte	0x1
 4665 0a04 D2000000 		.4byte	0xd2
 4666 0a08 B0070000 		.4byte	.LFB27
 4667 0a0c B6070000 		.4byte	.LFE27
 4668 0a10 02       		.byte	0x2
 4669 0a11 7D       		.byte	0x7d
 4670 0a12 00       		.sleb128 0
 4671 0a13 01       		.byte	0x1
 4672 0a14 2E0A0000 		.4byte	0xa2e
 4673 0a18 19       		.uleb128 0x19
ARM GAS  /tmp/ccMyq1Ea.s 			page 152


 4674 0a19 45020000 		.4byte	.LASF61
 4675 0a1d 01       		.byte	0x1
 4676 0a1e F307     		.2byte	0x7f3
 4677 0a20 2D       		.byte	0x2d
 4678 0a21 8C020000 		.4byte	0x28c
 4679 0a25 11060000 		.4byte	.LLST125
 4680 0a29 0D060000 		.4byte	.LVUS125
 4681 0a2d 00       		.byte	0
 4682 0a2e 27       		.uleb128 0x27
 4683 0a2f 01       		.byte	0x1
 4684 0a30 16010000 		.4byte	.LASF105
 4685 0a34 01       		.byte	0x1
 4686 0a35 E907     		.2byte	0x7e9
 4687 0a37 07       		.byte	0x7
 4688 0a38 01       		.byte	0x1
 4689 0a39 AC070000 		.4byte	.LFB26
 4690 0a3d B0070000 		.4byte	.LFE26
 4691 0a41 02       		.byte	0x2
 4692 0a42 7D       		.byte	0x7d
 4693 0a43 00       		.sleb128 0
 4694 0a44 01       		.byte	0x1
 4695 0a45 680A0000 		.4byte	0xa68
 4696 0a49 28       		.uleb128 0x28
 4697 0a4a 45020000 		.4byte	.LASF61
 4698 0a4e 01       		.byte	0x1
 4699 0a4f E907     		.2byte	0x7e9
 4700 0a51 2B       		.byte	0x2b
 4701 0a52 8C020000 		.4byte	0x28c
 4702 0a56 01       		.byte	0x1
 4703 0a57 50       		.byte	0x50
 4704 0a58 28       		.uleb128 0x28
 4705 0a59 BA070000 		.4byte	.LASF51
 4706 0a5d 01       		.byte	0x1
 4707 0a5e E907     		.2byte	0x7e9
 4708 0a60 3F       		.byte	0x3f
 4709 0a61 00010000 		.4byte	0x100
 4710 0a65 01       		.byte	0x1
 4711 0a66 51       		.byte	0x51
 4712 0a67 00       		.byte	0
 4713 0a68 1F       		.uleb128 0x1f
 4714 0a69 01       		.byte	0x1
 4715 0a6a 04070000 		.4byte	.LASF106
 4716 0a6e 01       		.byte	0x1
 4717 0a6f DF07     		.2byte	0x7df
 4718 0a71 0E       		.byte	0xe
 4719 0a72 01       		.byte	0x1
 4720 0a73 00010000 		.4byte	0x100
 4721 0a77 A8070000 		.4byte	.LFB25
 4722 0a7b AC070000 		.4byte	.LFE25
 4723 0a7f 02       		.byte	0x2
 4724 0a80 7D       		.byte	0x7d
 4725 0a81 00       		.sleb128 0
 4726 0a82 01       		.byte	0x1
 4727 0a83 9D0A0000 		.4byte	0xa9d
 4728 0a87 19       		.uleb128 0x19
 4729 0a88 45020000 		.4byte	.LASF61
 4730 0a8c 01       		.byte	0x1
ARM GAS  /tmp/ccMyq1Ea.s 			page 153


 4731 0a8d DF07     		.2byte	0x7df
 4732 0a8f 33       		.byte	0x33
 4733 0a90 8C020000 		.4byte	0x28c
 4734 0a94 3C060000 		.4byte	.LLST124
 4735 0a98 38060000 		.4byte	.LVUS124
 4736 0a9c 00       		.byte	0
 4737 0a9d 27       		.uleb128 0x27
 4738 0a9e 01       		.byte	0x1
 4739 0a9f E5000000 		.4byte	.LASF107
 4740 0aa3 01       		.byte	0x1
 4741 0aa4 B307     		.2byte	0x7b3
 4742 0aa6 06       		.byte	0x6
 4743 0aa7 01       		.byte	0x1
 4744 0aa8 A4070000 		.4byte	.LFB24
 4745 0aac A8070000 		.4byte	.LFE24
 4746 0ab0 02       		.byte	0x2
 4747 0ab1 7D       		.byte	0x7d
 4748 0ab2 00       		.sleb128 0
 4749 0ab3 01       		.byte	0x1
 4750 0ab4 FB0A0000 		.4byte	0xafb
 4751 0ab8 19       		.uleb128 0x19
 4752 0ab9 45020000 		.4byte	.LASF61
 4753 0abd 01       		.byte	0x1
 4754 0abe B307     		.2byte	0x7b3
 4755 0ac0 22       		.byte	0x22
 4756 0ac1 8C020000 		.4byte	0x28c
 4757 0ac5 67060000 		.4byte	.LLST122
 4758 0ac9 63060000 		.4byte	.LVUS122
 4759 0acd 1A       		.uleb128 0x1a
 4760 0ace 75080000 		.4byte	.LASF89
 4761 0ad2 01       		.byte	0x1
 4762 0ad3 B507     		.2byte	0x7b5
 4763 0ad5 11       		.byte	0x11
 4764 0ad6 A3060000 		.4byte	0x6a3
 4765 0ada 92060000 		.4byte	.LLST123
 4766 0ade 8E060000 		.4byte	.LVUS123
 4767 0ae2 1E       		.uleb128 0x1e
 4768 0ae3 A8070000 		.4byte	.LVL269
 4769 0ae7 01       		.byte	0x1
 4770 0ae8 43040000 		.4byte	0x443
 4771 0aec 1D       		.uleb128 0x1d
 4772 0aed 01       		.byte	0x1
 4773 0aee 50       		.byte	0x50
 4774 0aef 09       		.byte	0x9
 4775 0af0 F3       		.byte	0xf3
 4776 0af1 03       		.uleb128 0x3
 4777 0af2 F5       		.byte	0xf5
 4778 0af3 00       		.uleb128 0
 4779 0af4 25       		.uleb128 0x25
 4780 0af5 F7       		.byte	0xf7
 4781 0af6 2C       		.uleb128 0x2c
 4782 0af7 F7       		.byte	0xf7
 4783 0af8 00       		.uleb128 0
 4784 0af9 00       		.byte	0
 4785 0afa 00       		.byte	0
 4786 0afb 1F       		.uleb128 0x1f
 4787 0afc 01       		.byte	0x1
ARM GAS  /tmp/ccMyq1Ea.s 			page 154


 4788 0afd 37050000 		.4byte	.LASF108
 4789 0b01 01       		.byte	0x1
 4790 0b02 A707     		.2byte	0x7a7
 4791 0b04 0D       		.byte	0xd
 4792 0b05 01       		.byte	0x1
 4793 0b06 00010000 		.4byte	0x100
 4794 0b0a A0070000 		.4byte	.LFB23
 4795 0b0e A4070000 		.4byte	.LFE23
 4796 0b12 02       		.byte	0x2
 4797 0b13 7D       		.byte	0x7d
 4798 0b14 00       		.sleb128 0
 4799 0b15 01       		.byte	0x1
 4800 0b16 5A0B0000 		.4byte	0xb5a
 4801 0b1a 19       		.uleb128 0x19
 4802 0b1b 45020000 		.4byte	.LASF61
 4803 0b1f 01       		.byte	0x1
 4804 0b20 A707     		.2byte	0x7a7
 4805 0b22 40       		.byte	0x40
 4806 0b23 98020000 		.4byte	0x298
 4807 0b27 BD060000 		.4byte	.LLST119
 4808 0b2b B9060000 		.4byte	.LVUS119
 4809 0b2f 1A       		.uleb128 0x1a
 4810 0b30 C7010000 		.4byte	.LASF109
 4811 0b34 01       		.byte	0x1
 4812 0b35 A907     		.2byte	0x7a9
 4813 0b37 0D       		.byte	0xd
 4814 0b38 00010000 		.4byte	0x100
 4815 0b3c E6060000 		.4byte	.LLST120
 4816 0b40 E4060000 		.4byte	.LVUS120
 4817 0b44 1A       		.uleb128 0x1a
 4818 0b45 75080000 		.4byte	.LASF89
 4819 0b49 01       		.byte	0x1
 4820 0b4a AA07     		.2byte	0x7aa
 4821 0b4c 11       		.byte	0x11
 4822 0b4d A3060000 		.4byte	0x6a3
 4823 0b51 FD060000 		.4byte	.LLST121
 4824 0b55 F9060000 		.4byte	.LVUS121
 4825 0b59 00       		.byte	0
 4826 0b5a 29       		.uleb128 0x29
 4827 0b5b 01       		.byte	0x1
 4828 0b5c 51010000 		.4byte	.LASF110
 4829 0b60 01       		.byte	0x1
 4830 0b61 9607     		.2byte	0x796
 4831 0b63 0D       		.byte	0xd
 4832 0b64 01       		.byte	0x1
 4833 0b65 00010000 		.4byte	0x100
 4834 0b69 8A070000 		.4byte	.LFB22
 4835 0b6d A0070000 		.4byte	.LFE22
 4836 0b71 24070000 		.4byte	.LLST115
 4837 0b75 01       		.byte	0x1
 4838 0b76 CC0B0000 		.4byte	0xbcc
 4839 0b7a 19       		.uleb128 0x19
 4840 0b7b 45020000 		.4byte	.LASF61
 4841 0b7f 01       		.byte	0x1
 4842 0b80 9607     		.2byte	0x796
 4843 0b82 39       		.byte	0x39
 4844 0b83 98020000 		.4byte	0x298
ARM GAS  /tmp/ccMyq1Ea.s 			page 155


 4845 0b87 4A070000 		.4byte	.LLST116
 4846 0b8b 44070000 		.4byte	.LVUS116
 4847 0b8f 1A       		.uleb128 0x1a
 4848 0b90 C7010000 		.4byte	.LASF109
 4849 0b94 01       		.byte	0x1
 4850 0b95 9807     		.2byte	0x798
 4851 0b97 0D       		.byte	0xd
 4852 0b98 00010000 		.4byte	0x100
 4853 0b9c 7E070000 		.4byte	.LLST117
 4854 0ba0 7C070000 		.4byte	.LVUS117
 4855 0ba4 1A       		.uleb128 0x1a
 4856 0ba5 75080000 		.4byte	.LASF89
 4857 0ba9 01       		.byte	0x1
 4858 0baa 9907     		.2byte	0x799
 4859 0bac 11       		.byte	0x11
 4860 0bad A3060000 		.4byte	0x6a3
 4861 0bb1 97070000 		.4byte	.LLST118
 4862 0bb5 91070000 		.4byte	.LVUS118
 4863 0bb9 1B       		.uleb128 0x1b
 4864 0bba 92070000 		.4byte	.LVL262
 4865 0bbe D7050000 		.4byte	0x5d7
 4866 0bc2 1B       		.uleb128 0x1b
 4867 0bc3 9C070000 		.4byte	.LVL265
 4868 0bc7 91050000 		.4byte	0x591
 4869 0bcb 00       		.byte	0
 4870 0bcc 29       		.uleb128 0x29
 4871 0bcd 01       		.byte	0x1
 4872 0bce 4D080000 		.4byte	.LASF111
 4873 0bd2 01       		.byte	0x1
 4874 0bd3 8607     		.2byte	0x786
 4875 0bd5 0D       		.byte	0xd
 4876 0bd6 01       		.byte	0x1
 4877 0bd7 00010000 		.4byte	0x100
 4878 0bdb 78070000 		.4byte	.LFB21
 4879 0bdf 8A070000 		.4byte	.LFE21
 4880 0be3 C9070000 		.4byte	.LLST112
 4881 0be7 01       		.byte	0x1
 4882 0be8 290C0000 		.4byte	0xc29
 4883 0bec 19       		.uleb128 0x19
 4884 0bed 45020000 		.4byte	.LASF61
 4885 0bf1 01       		.byte	0x1
 4886 0bf2 8607     		.2byte	0x786
 4887 0bf4 39       		.byte	0x39
 4888 0bf5 98020000 		.4byte	0x298
 4889 0bf9 EF070000 		.4byte	.LLST113
 4890 0bfd E9070000 		.4byte	.LVUS113
 4891 0c01 1A       		.uleb128 0x1a
 4892 0c02 C7010000 		.4byte	.LASF109
 4893 0c06 01       		.byte	0x1
 4894 0c07 8807     		.2byte	0x788
 4895 0c09 0D       		.byte	0xd
 4896 0c0a 00010000 		.4byte	0x100
 4897 0c0e 23080000 		.4byte	.LLST114
 4898 0c12 21080000 		.4byte	.LVUS114
 4899 0c16 1B       		.uleb128 0x1b
 4900 0c17 80070000 		.4byte	.LVL257
 4901 0c1b D7050000 		.4byte	0x5d7
ARM GAS  /tmp/ccMyq1Ea.s 			page 156


 4902 0c1f 1B       		.uleb128 0x1b
 4903 0c20 86070000 		.4byte	.LVL259
 4904 0c24 91050000 		.4byte	0x591
 4905 0c28 00       		.byte	0
 4906 0c29 29       		.uleb128 0x29
 4907 0c2a 01       		.byte	0x1
 4908 0c2b D2080000 		.4byte	.LASF112
 4909 0c2f 01       		.byte	0x1
 4910 0c30 5007     		.2byte	0x750
 4911 0c32 0C       		.byte	0xc
 4912 0c33 01       		.byte	0x1
 4913 0c34 EF000000 		.4byte	0xef
 4914 0c38 48070000 		.4byte	.LFB20
 4915 0c3c 78070000 		.4byte	.LFE20
 4916 0c40 36080000 		.4byte	.LLST106
 4917 0c44 01       		.byte	0x1
 4918 0c45 240D0000 		.4byte	0xd24
 4919 0c49 19       		.uleb128 0x19
 4920 0c4a 45020000 		.4byte	.LASF61
 4921 0c4e 01       		.byte	0x1
 4922 0c4f 5007     		.2byte	0x750
 4923 0c51 2D       		.byte	0x2d
 4924 0c52 8C020000 		.4byte	0x28c
 4925 0c56 5E080000 		.4byte	.LLST107
 4926 0c5a 56080000 		.4byte	.LVUS107
 4927 0c5e 19       		.uleb128 0x19
 4928 0c5f 09030000 		.4byte	.LASF95
 4929 0c63 01       		.byte	0x1
 4930 0c64 5007     		.2byte	0x750
 4931 0c66 43       		.byte	0x43
 4932 0c67 A4000000 		.4byte	0xa4
 4933 0c6b 98080000 		.4byte	.LLST108
 4934 0c6f 92080000 		.4byte	.LVUS108
 4935 0c73 1A       		.uleb128 0x1a
 4936 0c74 7D080000 		.4byte	.LASF90
 4937 0c78 01       		.byte	0x1
 4938 0c79 5207     		.2byte	0x752
 4939 0c7b 0C       		.byte	0xc
 4940 0c7c EF000000 		.4byte	0xef
 4941 0c80 CC080000 		.4byte	.LLST109
 4942 0c84 CA080000 		.4byte	.LVUS109
 4943 0c88 22       		.uleb128 0x22
 4944 0c89 DB010000 		.4byte	.LASF113
 4945 0c8d 01       		.byte	0x1
 4946 0c8e 5307     		.2byte	0x753
 4947 0c90 0D       		.byte	0xd
 4948 0c91 00010000 		.4byte	0x100
 4949 0c95 1A       		.uleb128 0x1a
 4950 0c96 6F060000 		.4byte	.LASF114
 4951 0c9a 01       		.byte	0x1
 4952 0c9b 5407     		.2byte	0x754
 4953 0c9d 09       		.byte	0x9
 4954 0c9e 8F030000 		.4byte	0x38f
 4955 0ca2 E1080000 		.4byte	.LLST110
 4956 0ca6 DF080000 		.4byte	.LVUS110
 4957 0caa 1A       		.uleb128 0x1a
 4958 0cab 75080000 		.4byte	.LASF89
ARM GAS  /tmp/ccMyq1Ea.s 			page 157


 4959 0caf 01       		.byte	0x1
 4960 0cb0 5507     		.2byte	0x755
 4961 0cb2 11       		.byte	0x11
 4962 0cb3 A3060000 		.4byte	0x6a3
 4963 0cb7 FC080000 		.4byte	.LLST111
 4964 0cbb F4080000 		.4byte	.LVUS111
 4965 0cbf 2A       		.uleb128 0x2a
 4966 0cc0 B11D0000 		.4byte	0x1db1
 4967 0cc4 48070000 		.4byte	.LBI87
 4968 0cc8 0A       		.byte	.LVU882
 4969 0cc9 78010000 		.4byte	.Ldebug_ranges0+0x178
 4970 0ccd 01       		.byte	0x1
 4971 0cce 6B07     		.2byte	0x76b
 4972 0cd0 1B       		.byte	0x1b
 4973 0cd1 E60C0000 		.4byte	0xce6
 4974 0cd5 2B       		.uleb128 0x2b
 4975 0cd6 78010000 		.4byte	.Ldebug_ranges0+0x178
 4976 0cda 2C       		.uleb128 0x2c
 4977 0cdb C31D0000 		.4byte	0x1dc3
 4978 0cdf 2C       		.uleb128 0x2c
 4979 0ce0 CF1D0000 		.4byte	0x1dcf
 4980 0ce4 00       		.byte	0
 4981 0ce5 00       		.byte	0
 4982 0ce6 2D       		.uleb128 0x2d
 4983 0ce7 961D0000 		.4byte	0x1d96
 4984 0ceb 6E070000 		.4byte	.LBI91
 4985 0cef 03       		.byte	.LVU903
 4986 0cf0 6E070000 		.4byte	.LBB91
 4987 0cf4 72070000 		.4byte	.LBE91
 4988 0cf8 01       		.byte	0x1
 4989 0cf9 8007     		.2byte	0x780
 4990 0cfb 02       		.byte	0x2
 4991 0cfc 060D0000 		.4byte	0xd06
 4992 0d00 2E       		.uleb128 0x2e
 4993 0d01 A41D0000 		.4byte	0x1da4
 4994 0d05 00       		.byte	0
 4995 0d06 2F       		.uleb128 0x2f
 4996 0d07 6A070000 		.4byte	.LVL251
 4997 0d0b C9080000 		.4byte	0x8c9
 4998 0d0f 1D       		.uleb128 0x1d
 4999 0d10 01       		.byte	0x1
 5000 0d11 50       		.byte	0x50
 5001 0d12 02       		.byte	0x2
 5002 0d13 74       		.byte	0x74
 5003 0d14 00       		.sleb128 0
 5004 0d15 1D       		.uleb128 0x1d
 5005 0d16 01       		.byte	0x1
 5006 0d17 51       		.byte	0x51
 5007 0d18 09       		.byte	0x9
 5008 0d19 F3       		.byte	0xf3
 5009 0d1a 03       		.uleb128 0x3
 5010 0d1b F5       		.byte	0xf5
 5011 0d1c 01       		.uleb128 0x1
 5012 0d1d 25       		.uleb128 0x25
 5013 0d1e F7       		.byte	0xf7
 5014 0d1f 2C       		.uleb128 0x2c
 5015 0d20 F7       		.byte	0xf7
ARM GAS  /tmp/ccMyq1Ea.s 			page 158


 5016 0d21 00       		.uleb128 0
 5017 0d22 00       		.byte	0
 5018 0d23 00       		.byte	0
 5019 0d24 29       		.uleb128 0x29
 5020 0d25 01       		.byte	0x1
 5021 0d26 78000000 		.4byte	.LASF115
 5022 0d2a 01       		.byte	0x1
 5023 0d2b F506     		.2byte	0x6f5
 5024 0d2d 0C       		.byte	0xc
 5025 0d2e 01       		.byte	0x1
 5026 0d2f EF000000 		.4byte	0xef
 5027 0d33 E4060000 		.4byte	.LFB19
 5028 0d37 48070000 		.4byte	.LFE19
 5029 0d3b 30090000 		.4byte	.LLST98
 5030 0d3f 01       		.byte	0x1
 5031 0d40 690E0000 		.4byte	0xe69
 5032 0d44 19       		.uleb128 0x19
 5033 0d45 45020000 		.4byte	.LASF61
 5034 0d49 01       		.byte	0x1
 5035 0d4a F506     		.2byte	0x6f5
 5036 0d4c 30       		.byte	0x30
 5037 0d4d 8C020000 		.4byte	0x28c
 5038 0d51 58090000 		.4byte	.LLST99
 5039 0d55 50090000 		.4byte	.LVUS99
 5040 0d59 19       		.uleb128 0x19
 5041 0d5a 09030000 		.4byte	.LASF95
 5042 0d5e 01       		.byte	0x1
 5043 0d5f F506     		.2byte	0x6f5
 5044 0d61 45       		.byte	0x45
 5045 0d62 A4000000 		.4byte	0xa4
 5046 0d66 92090000 		.4byte	.LLST100
 5047 0d6a 8C090000 		.4byte	.LVUS100
 5048 0d6e 19       		.uleb128 0x19
 5049 0d6f A4000000 		.4byte	.LASF116
 5050 0d73 01       		.byte	0x1
 5051 0d74 F506     		.2byte	0x6f5
 5052 0d76 62       		.byte	0x62
 5053 0d77 6F0E0000 		.4byte	0xe6f
 5054 0d7b CA090000 		.4byte	.LLST101
 5055 0d7f C4090000 		.4byte	.LVUS101
 5056 0d83 1A       		.uleb128 0x1a
 5057 0d84 7D080000 		.4byte	.LASF90
 5058 0d88 01       		.byte	0x1
 5059 0d89 F706     		.2byte	0x6f7
 5060 0d8b 0C       		.byte	0xc
 5061 0d8c EF000000 		.4byte	0xef
 5062 0d90 F5090000 		.4byte	.LLST102
 5063 0d94 F3090000 		.4byte	.LVUS102
 5064 0d98 22       		.uleb128 0x22
 5065 0d99 DB010000 		.4byte	.LASF113
 5066 0d9d 01       		.byte	0x1
 5067 0d9e F806     		.2byte	0x6f8
 5068 0da0 0D       		.byte	0xd
 5069 0da1 00010000 		.4byte	0x100
 5070 0da5 1A       		.uleb128 0x1a
 5071 0da6 75080000 		.4byte	.LASF89
 5072 0daa 01       		.byte	0x1
ARM GAS  /tmp/ccMyq1Ea.s 			page 159


 5073 0dab F906     		.2byte	0x6f9
 5074 0dad 11       		.byte	0x11
 5075 0dae A3060000 		.4byte	0x6a3
 5076 0db2 100A0000 		.4byte	.LLST103
 5077 0db6 080A0000 		.4byte	.LVUS103
 5078 0dba 25       		.uleb128 0x25
 5079 0dbb 48010000 		.4byte	.Ldebug_ranges0+0x148
 5080 0dbf 250E0000 		.4byte	0xe25
 5081 0dc3 1A       		.uleb128 0x1a
 5082 0dc4 42030000 		.4byte	.LASF46
 5083 0dc8 01       		.byte	0x1
 5084 0dc9 1007     		.2byte	0x710
 5085 0dcb 15       		.byte	0x15
 5086 0dcc 11010000 		.4byte	0x111
 5087 0dd0 4C0A0000 		.4byte	.LLST104
 5088 0dd4 440A0000 		.4byte	.LVUS104
 5089 0dd8 2B       		.uleb128 0x2b
 5090 0dd9 60010000 		.4byte	.Ldebug_ranges0+0x160
 5091 0ddd 1A       		.uleb128 0x1a
 5092 0dde 0A0A0000 		.4byte	.LASF49
 5093 0de2 01       		.byte	0x1
 5094 0de3 1507     		.2byte	0x715
 5095 0de5 11       		.byte	0x11
 5096 0de6 CD000000 		.4byte	0xcd
 5097 0dea 8C0A0000 		.4byte	.LLST105
 5098 0dee 840A0000 		.4byte	.LVUS105
 5099 0df2 1C       		.uleb128 0x1c
 5100 0df3 10070000 		.4byte	.LVL238
 5101 0df7 C9080000 		.4byte	0x8c9
 5102 0dfb 130E0000 		.4byte	0xe13
 5103 0dff 1D       		.uleb128 0x1d
 5104 0e00 01       		.byte	0x1
 5105 0e01 50       		.byte	0x50
 5106 0e02 02       		.byte	0x2
 5107 0e03 75       		.byte	0x75
 5108 0e04 00       		.sleb128 0
 5109 0e05 1D       		.uleb128 0x1d
 5110 0e06 01       		.byte	0x1
 5111 0e07 51       		.byte	0x51
 5112 0e08 09       		.byte	0x9
 5113 0e09 F3       		.byte	0xf3
 5114 0e0a 03       		.uleb128 0x3
 5115 0e0b F5       		.byte	0xf5
 5116 0e0c 01       		.uleb128 0x1
 5117 0e0d 25       		.uleb128 0x25
 5118 0e0e F7       		.byte	0xf7
 5119 0e0f 2C       		.uleb128 0x2c
 5120 0e10 F7       		.byte	0xf7
 5121 0e11 00       		.uleb128 0
 5122 0e12 00       		.byte	0
 5123 0e13 2F       		.uleb128 0x2f
 5124 0e14 22070000 		.4byte	.LVL239
 5125 0e18 B2050000 		.4byte	0x5b2
 5126 0e1c 1D       		.uleb128 0x1d
 5127 0e1d 01       		.byte	0x1
 5128 0e1e 50       		.byte	0x50
 5129 0e1f 02       		.byte	0x2
ARM GAS  /tmp/ccMyq1Ea.s 			page 160


 5130 0e20 75       		.byte	0x75
 5131 0e21 10       		.sleb128 16
 5132 0e22 00       		.byte	0
 5133 0e23 00       		.byte	0
 5134 0e24 00       		.byte	0
 5135 0e25 2A       		.uleb128 0x2a
 5136 0e26 B11D0000 		.4byte	0x1db1
 5137 0e2a E4060000 		.4byte	.LBI77
 5138 0e2e 08       		.byte	.LVU823
 5139 0e2f 30010000 		.4byte	.Ldebug_ranges0+0x130
 5140 0e33 01       		.byte	0x1
 5141 0e34 0E07     		.2byte	0x70e
 5142 0e36 1B       		.byte	0x1b
 5143 0e37 4C0E0000 		.4byte	0xe4c
 5144 0e3b 2B       		.uleb128 0x2b
 5145 0e3c 30010000 		.4byte	.Ldebug_ranges0+0x130
 5146 0e40 2C       		.uleb128 0x2c
 5147 0e41 C31D0000 		.4byte	0x1dc3
 5148 0e45 2C       		.uleb128 0x2c
 5149 0e46 CF1D0000 		.4byte	0x1dcf
 5150 0e4a 00       		.byte	0
 5151 0e4b 00       		.byte	0
 5152 0e4c 30       		.uleb128 0x30
 5153 0e4d 961D0000 		.4byte	0x1d96
 5154 0e51 32070000 		.4byte	.LBI84
 5155 0e55 03       		.byte	.LVU860
 5156 0e56 32070000 		.4byte	.LBB84
 5157 0e5a 36070000 		.4byte	.LBE84
 5158 0e5e 01       		.byte	0x1
 5159 0e5f 4A07     		.2byte	0x74a
 5160 0e61 02       		.byte	0x2
 5161 0e62 2E       		.uleb128 0x2e
 5162 0e63 A41D0000 		.4byte	0x1da4
 5163 0e67 00       		.byte	0
 5164 0e68 00       		.byte	0
 5165 0e69 07       		.uleb128 0x7
 5166 0e6a 04       		.byte	0x4
 5167 0e6b EF000000 		.4byte	0xef
 5168 0e6f 06       		.uleb128 0x6
 5169 0e70 690E0000 		.4byte	0xe69
 5170 0e74 29       		.uleb128 0x29
 5171 0e75 01       		.byte	0x1
 5172 0e76 7C030000 		.4byte	.LASF117
 5173 0e7a 01       		.byte	0x1
 5174 0e7b 6006     		.2byte	0x660
 5175 0e7d 0C       		.byte	0xc
 5176 0e7e 01       		.byte	0x1
 5177 0e7f EF000000 		.4byte	0xef
 5178 0e83 F8050000 		.4byte	.LFB18
 5179 0e87 E4060000 		.4byte	.LFE18
 5180 0e8b C40A0000 		.4byte	.LLST90
 5181 0e8f 01       		.byte	0x1
 5182 0e90 68100000 		.4byte	0x1068
 5183 0e94 19       		.uleb128 0x19
 5184 0e95 45020000 		.4byte	.LASF61
 5185 0e99 01       		.byte	0x1
 5186 0e9a 6006     		.2byte	0x660
ARM GAS  /tmp/ccMyq1Ea.s 			page 161


 5187 0e9c 26       		.byte	0x26
 5188 0e9d 8C020000 		.4byte	0x28c
 5189 0ea1 0C0B0000 		.4byte	.LLST91
 5190 0ea5 080B0000 		.4byte	.LVUS91
 5191 0ea9 19       		.uleb128 0x19
 5192 0eaa 09030000 		.4byte	.LASF95
 5193 0eae 01       		.byte	0x1
 5194 0eaf 6006     		.2byte	0x660
 5195 0eb1 3B       		.byte	0x3b
 5196 0eb2 A4000000 		.4byte	0xa4
 5197 0eb6 2E0B0000 		.4byte	.LLST92
 5198 0eba 2A0B0000 		.4byte	.LVUS92
 5199 0ebe 19       		.uleb128 0x19
 5200 0ebf 3B090000 		.4byte	.LASF84
 5201 0ec3 01       		.byte	0x1
 5202 0ec4 6006     		.2byte	0x660
 5203 0ec6 50       		.byte	0x50
 5204 0ec7 16010000 		.4byte	0x116
 5205 0ecb 4E0B0000 		.4byte	.LLST93
 5206 0ecf 4C0B0000 		.4byte	.LVUS93
 5207 0ed3 1A       		.uleb128 0x1a
 5208 0ed4 C4030000 		.4byte	.LASF118
 5209 0ed8 01       		.byte	0x1
 5210 0ed9 6206     		.2byte	0x662
 5211 0edb 0C       		.byte	0xc
 5212 0edc EF000000 		.4byte	0xef
 5213 0ee0 6B0B0000 		.4byte	.LLST94
 5214 0ee4 610B0000 		.4byte	.LVUS94
 5215 0ee8 31       		.uleb128 0x31
 5216 0ee9 D9030000 		.4byte	.LASF120
 5217 0eed 01       		.byte	0x1
 5218 0eee 6306     		.2byte	0x663
 5219 0ef0 0B       		.byte	0xb
 5220 0ef1 80020000 		.4byte	0x280
 5221 0ef5 02       		.byte	0x2
 5222 0ef6 91       		.byte	0x91
 5223 0ef7 60       		.sleb128 -32
 5224 0ef8 1A       		.uleb128 0x1a
 5225 0ef9 6F060000 		.4byte	.LASF114
 5226 0efd 01       		.byte	0x1
 5227 0efe 6406     		.2byte	0x664
 5228 0f00 09       		.byte	0x9
 5229 0f01 8F030000 		.4byte	0x38f
 5230 0f05 AE0B0000 		.4byte	.LLST95
 5231 0f09 AC0B0000 		.4byte	.LVUS95
 5232 0f0d 1A       		.uleb128 0x1a
 5233 0f0e 75080000 		.4byte	.LASF89
 5234 0f12 01       		.byte	0x1
 5235 0f13 6506     		.2byte	0x665
 5236 0f15 11       		.byte	0x11
 5237 0f16 A3060000 		.4byte	0x6a3
 5238 0f1a C50B0000 		.4byte	.LLST96
 5239 0f1e C10B0000 		.4byte	.LVUS96
 5240 0f22 25       		.uleb128 0x25
 5241 0f23 18010000 		.4byte	.Ldebug_ranges0+0x118
 5242 0f27 910F0000 		.4byte	0xf91
 5243 0f2b 1A       		.uleb128 0x1a
ARM GAS  /tmp/ccMyq1Ea.s 			page 162


 5244 0f2c 42030000 		.4byte	.LASF46
 5245 0f30 01       		.byte	0x1
 5246 0f31 7D06     		.2byte	0x67d
 5247 0f33 16       		.byte	0x16
 5248 0f34 11010000 		.4byte	0x111
 5249 0f38 E70B0000 		.4byte	.LLST97
 5250 0f3c E30B0000 		.4byte	.LVUS97
 5251 0f40 1C       		.uleb128 0x1c
 5252 0f41 18060000 		.4byte	.LVL210
 5253 0f45 C9080000 		.4byte	0x8c9
 5254 0f49 5A0F0000 		.4byte	0xf5a
 5255 0f4d 1D       		.uleb128 0x1d
 5256 0f4e 01       		.byte	0x1
 5257 0f4f 50       		.byte	0x50
 5258 0f50 02       		.byte	0x2
 5259 0f51 74       		.byte	0x74
 5260 0f52 00       		.sleb128 0
 5261 0f53 1D       		.uleb128 0x1d
 5262 0f54 01       		.byte	0x1
 5263 0f55 51       		.byte	0x51
 5264 0f56 02       		.byte	0x2
 5265 0f57 75       		.byte	0x75
 5266 0f58 00       		.sleb128 0
 5267 0f59 00       		.byte	0
 5268 0f5a 1C       		.uleb128 0x1c
 5269 0f5b 26060000 		.4byte	.LVL211
 5270 0f5f B2050000 		.4byte	0x5b2
 5271 0f63 6E0F0000 		.4byte	0xf6e
 5272 0f67 1D       		.uleb128 0x1d
 5273 0f68 01       		.byte	0x1
 5274 0f69 50       		.byte	0x50
 5275 0f6a 02       		.byte	0x2
 5276 0f6b 74       		.byte	0x74
 5277 0f6c 24       		.sleb128 36
 5278 0f6d 00       		.byte	0
 5279 0f6e 1B       		.uleb128 0x1b
 5280 0f6f 40060000 		.4byte	.LVL212
 5281 0f73 91050000 		.4byte	0x591
 5282 0f77 1B       		.uleb128 0x1b
 5283 0f78 4E060000 		.4byte	.LVL216
 5284 0f7c 91050000 		.4byte	0x591
 5285 0f80 2F       		.uleb128 0x2f
 5286 0f81 5A060000 		.4byte	.LVL218
 5287 0f85 52050000 		.4byte	0x552
 5288 0f89 1D       		.uleb128 0x1d
 5289 0f8a 01       		.byte	0x1
 5290 0f8b 50       		.byte	0x50
 5291 0f8c 02       		.byte	0x2
 5292 0f8d 91       		.byte	0x91
 5293 0f8e 60       		.sleb128 -32
 5294 0f8f 00       		.byte	0
 5295 0f90 00       		.byte	0
 5296 0f91 1B       		.uleb128 0x1b
 5297 0f92 0A060000 		.4byte	.LVL207
 5298 0f96 D7050000 		.4byte	0x5d7
 5299 0f9a 1B       		.uleb128 0x1b
 5300 0f9b 5E060000 		.4byte	.LVL219
ARM GAS  /tmp/ccMyq1Ea.s 			page 163


 5301 0f9f 91050000 		.4byte	0x591
 5302 0fa3 1B       		.uleb128 0x1b
 5303 0fa4 62060000 		.4byte	.LVL220
 5304 0fa8 46050000 		.4byte	0x546
 5305 0fac 1B       		.uleb128 0x1b
 5306 0fad 66060000 		.4byte	.LVL221
 5307 0fb1 D7050000 		.4byte	0x5d7
 5308 0fb5 1B       		.uleb128 0x1b
 5309 0fb6 82060000 		.4byte	.LVL222
 5310 0fba 91050000 		.4byte	0x591
 5311 0fbe 1C       		.uleb128 0x1c
 5312 0fbf 8A060000 		.4byte	.LVL223
 5313 0fc3 11050000 		.4byte	0x511
 5314 0fc7 D80F0000 		.4byte	0xfd8
 5315 0fcb 1D       		.uleb128 0x1d
 5316 0fcc 01       		.byte	0x1
 5317 0fcd 50       		.byte	0x50
 5318 0fce 02       		.byte	0x2
 5319 0fcf 91       		.byte	0x91
 5320 0fd0 60       		.sleb128 -32
 5321 0fd1 1D       		.uleb128 0x1d
 5322 0fd2 01       		.byte	0x1
 5323 0fd3 51       		.byte	0x51
 5324 0fd4 02       		.byte	0x2
 5325 0fd5 91       		.byte	0x91
 5326 0fd6 5C       		.sleb128 -36
 5327 0fd7 00       		.byte	0
 5328 0fd8 1C       		.uleb128 0x1c
 5329 0fd9 92060000 		.4byte	.LVL224
 5330 0fdd 9F070000 		.4byte	0x79f
 5331 0fe1 EC0F0000 		.4byte	0xfec
 5332 0fe5 1D       		.uleb128 0x1d
 5333 0fe6 01       		.byte	0x1
 5334 0fe7 50       		.byte	0x50
 5335 0fe8 02       		.byte	0x2
 5336 0fe9 74       		.byte	0x74
 5337 0fea 00       		.sleb128 0
 5338 0feb 00       		.byte	0
 5339 0fec 1C       		.uleb128 0x1c
 5340 0fed 9E060000 		.4byte	.LVL225
 5341 0ff1 F6040000 		.4byte	0x4f6
 5342 0ff5 00100000 		.4byte	0x1000
 5343 0ff9 1D       		.uleb128 0x1d
 5344 0ffa 01       		.byte	0x1
 5345 0ffb 50       		.byte	0x50
 5346 0ffc 02       		.byte	0x2
 5347 0ffd 74       		.byte	0x74
 5348 0ffe 24       		.sleb128 36
 5349 0fff 00       		.byte	0
 5350 1000 1C       		.uleb128 0x1c
 5351 1001 A4060000 		.4byte	.LVL226
 5352 1005 FB070000 		.4byte	0x7fb
 5353 1009 14100000 		.4byte	0x1014
 5354 100d 1D       		.uleb128 0x1d
 5355 100e 01       		.byte	0x1
 5356 100f 50       		.byte	0x50
 5357 1010 02       		.byte	0x2
ARM GAS  /tmp/ccMyq1Ea.s 			page 164


 5358 1011 74       		.byte	0x74
 5359 1012 00       		.sleb128 0
 5360 1013 00       		.byte	0
 5361 1014 1B       		.uleb128 0x1b
 5362 1015 A8060000 		.4byte	.LVL227
 5363 1019 E6040000 		.4byte	0x4e6
 5364 101d 1C       		.uleb128 0x1c
 5365 101e C8060000 		.4byte	.LVL228
 5366 1022 FB070000 		.4byte	0x7fb
 5367 1026 31100000 		.4byte	0x1031
 5368 102a 1D       		.uleb128 0x1d
 5369 102b 01       		.byte	0x1
 5370 102c 50       		.byte	0x50
 5371 102d 02       		.byte	0x2
 5372 102e 74       		.byte	0x74
 5373 102f 00       		.sleb128 0
 5374 1030 00       		.byte	0
 5375 1031 1B       		.uleb128 0x1b
 5376 1032 CC060000 		.4byte	.LVL229
 5377 1036 E6040000 		.4byte	0x4e6
 5378 103a 1C       		.uleb128 0x1c
 5379 103b D4060000 		.4byte	.LVL230
 5380 103f FB070000 		.4byte	0x7fb
 5381 1043 4E100000 		.4byte	0x104e
 5382 1047 1D       		.uleb128 0x1d
 5383 1048 01       		.byte	0x1
 5384 1049 50       		.byte	0x50
 5385 104a 02       		.byte	0x2
 5386 104b 74       		.byte	0x74
 5387 104c 00       		.sleb128 0
 5388 104d 00       		.byte	0
 5389 104e 1B       		.uleb128 0x1b
 5390 104f D8060000 		.4byte	.LVL231
 5391 1053 E6040000 		.4byte	0x4e6
 5392 1057 2F       		.uleb128 0x2f
 5393 1058 DE060000 		.4byte	.LVL232
 5394 105c 9F070000 		.4byte	0x79f
 5395 1060 1D       		.uleb128 0x1d
 5396 1061 01       		.byte	0x1
 5397 1062 50       		.byte	0x50
 5398 1063 02       		.byte	0x2
 5399 1064 74       		.byte	0x74
 5400 1065 00       		.sleb128 0
 5401 1066 00       		.byte	0
 5402 1067 00       		.byte	0
 5403 1068 29       		.uleb128 0x29
 5404 1069 01       		.byte	0x1
 5405 106a 00040000 		.4byte	.LASF119
 5406 106e 01       		.byte	0x1
 5407 106f 8605     		.2byte	0x586
 5408 1071 0C       		.byte	0xc
 5409 1072 01       		.byte	0x1
 5410 1073 EF000000 		.4byte	0xef
 5411 1077 AE040000 		.4byte	.LFB17
 5412 107b CA050000 		.4byte	.LFE17
 5413 107f 050C0000 		.4byte	.LLST75
 5414 1083 01       		.byte	0x1
ARM GAS  /tmp/ccMyq1Ea.s 			page 165


 5415 1084 BF120000 		.4byte	0x12bf
 5416 1088 19       		.uleb128 0x19
 5417 1089 45020000 		.4byte	.LASF61
 5418 108d 01       		.byte	0x1
 5419 108e 8605     		.2byte	0x586
 5420 1090 2F       		.byte	0x2f
 5421 1091 8C020000 		.4byte	0x28c
 5422 1095 4D0C0000 		.4byte	.LLST76
 5423 1099 490C0000 		.4byte	.LVUS76
 5424 109d 19       		.uleb128 0x19
 5425 109e 3B090000 		.4byte	.LASF84
 5426 10a2 01       		.byte	0x1
 5427 10a3 8605     		.2byte	0x586
 5428 10a5 42       		.byte	0x42
 5429 10a6 16010000 		.4byte	0x116
 5430 10aa 6D0C0000 		.4byte	.LLST77
 5431 10ae 6B0C0000 		.4byte	.LVUS77
 5432 10b2 1A       		.uleb128 0x1a
 5433 10b3 C4030000 		.4byte	.LASF118
 5434 10b7 01       		.byte	0x1
 5435 10b8 8805     		.2byte	0x588
 5436 10ba 0C       		.byte	0xc
 5437 10bb EF000000 		.4byte	0xef
 5438 10bf 8A0C0000 		.4byte	.LLST78
 5439 10c3 800C0000 		.4byte	.LVUS78
 5440 10c7 31       		.uleb128 0x31
 5441 10c8 D9030000 		.4byte	.LASF120
 5442 10cc 01       		.byte	0x1
 5443 10cd 8905     		.2byte	0x589
 5444 10cf 0B       		.byte	0xb
 5445 10d0 80020000 		.4byte	0x280
 5446 10d4 02       		.byte	0x2
 5447 10d5 91       		.byte	0x91
 5448 10d6 60       		.sleb128 -32
 5449 10d7 1A       		.uleb128 0x1a
 5450 10d8 75080000 		.4byte	.LASF89
 5451 10dc 01       		.byte	0x1
 5452 10dd 8A05     		.2byte	0x58a
 5453 10df 11       		.byte	0x11
 5454 10e0 A3060000 		.4byte	0x6a3
 5455 10e4 CF0C0000 		.4byte	.LLST79
 5456 10e8 CB0C0000 		.4byte	.LVUS79
 5457 10ec 1A       		.uleb128 0x1a
 5458 10ed 34070000 		.4byte	.LASF121
 5459 10f1 01       		.byte	0x1
 5460 10f2 8D05     		.2byte	0x58d
 5461 10f4 0D       		.byte	0xd
 5462 10f5 EF000000 		.4byte	0xef
 5463 10f9 F30C0000 		.4byte	.LLST80
 5464 10fd ED0C0000 		.4byte	.LVUS80
 5465 1101 25       		.uleb128 0x25
 5466 1102 F8000000 		.4byte	.Ldebug_ranges0+0xf8
 5467 1106 56110000 		.4byte	0x1156
 5468 110a 1A       		.uleb128 0x1a
 5469 110b D5060000 		.4byte	.LASF122
 5470 110f 01       		.byte	0x1
 5471 1110 A805     		.2byte	0x5a8
ARM GAS  /tmp/ccMyq1Ea.s 			page 166


 5472 1112 16       		.byte	0x16
 5473 1113 11010000 		.4byte	0x111
 5474 1117 250D0000 		.4byte	.LLST81
 5475 111b 1D0D0000 		.4byte	.LVUS81
 5476 111f 1B       		.uleb128 0x1b
 5477 1120 D0040000 		.4byte	.LVL168
 5478 1124 8D040000 		.4byte	0x48d
 5479 1128 1C       		.uleb128 0x1c
 5480 1129 DE040000 		.4byte	.LVL169
 5481 112d B2050000 		.4byte	0x5b2
 5482 1131 3C110000 		.4byte	0x113c
 5483 1135 1D       		.uleb128 0x1d
 5484 1136 01       		.byte	0x1
 5485 1137 50       		.byte	0x50
 5486 1138 02       		.byte	0x2
 5487 1139 74       		.byte	0x74
 5488 113a 10       		.sleb128 16
 5489 113b 00       		.byte	0
 5490 113c 1B       		.uleb128 0x1b
 5491 113d F8040000 		.4byte	.LVL170
 5492 1141 91050000 		.4byte	0x591
 5493 1145 2F       		.uleb128 0x2f
 5494 1146 12050000 		.4byte	.LVL177
 5495 114a 52050000 		.4byte	0x552
 5496 114e 1D       		.uleb128 0x1d
 5497 114f 01       		.byte	0x1
 5498 1150 50       		.byte	0x50
 5499 1151 02       		.byte	0x2
 5500 1152 91       		.byte	0x91
 5501 1153 60       		.sleb128 -32
 5502 1154 00       		.byte	0
 5503 1155 00       		.byte	0
 5504 1156 32       		.uleb128 0x32
 5505 1157 B6050000 		.4byte	.LBB72
 5506 115b CA050000 		.4byte	.LBE72
 5507 115f B7110000 		.4byte	0x11b7
 5508 1163 1A       		.uleb128 0x1a
 5509 1164 E4080000 		.4byte	.LASF123
 5510 1168 01       		.byte	0x1
 5511 1169 4506     		.2byte	0x645
 5512 116b 14       		.byte	0x14
 5513 116c 00010000 		.4byte	0x100
 5514 1170 620D0000 		.4byte	.LLST82
 5515 1174 600D0000 		.4byte	.LVUS82
 5516 1178 2D       		.uleb128 0x2d
 5517 1179 CB090000 		.4byte	0x9cb
 5518 117d B6050000 		.4byte	.LBI73
 5519 1181 02       		.byte	.LVU691
 5520 1182 B6050000 		.4byte	.LBB73
 5521 1186 C2050000 		.4byte	.LBE73
 5522 118a 01       		.byte	0x1
 5523 118b 4C06     		.2byte	0x64c
 5524 118d 23       		.byte	0x23
 5525 118e AD110000 		.4byte	0x11ad
 5526 1192 33       		.uleb128 0x33
 5527 1193 DE090000 		.4byte	0x9de
 5528 1197 770D0000 		.4byte	.LLST83
ARM GAS  /tmp/ccMyq1Ea.s 			page 167


 5529 119b 750D0000 		.4byte	.LVUS83
 5530 119f 34       		.uleb128 0x34
 5531 11a0 EB090000 		.4byte	0x9eb
 5532 11a4 8C0D0000 		.4byte	.LLST84
 5533 11a8 8A0D0000 		.4byte	.LVUS84
 5534 11ac 00       		.byte	0
 5535 11ad 1B       		.uleb128 0x1b
 5536 11ae C8050000 		.4byte	.LVL198
 5537 11b2 58040000 		.4byte	0x458
 5538 11b6 00       		.byte	0
 5539 11b7 1B       		.uleb128 0x1b
 5540 11b8 C0040000 		.4byte	.LVL164
 5541 11bc D7050000 		.4byte	0x5d7
 5542 11c0 1B       		.uleb128 0x1b
 5543 11c1 06050000 		.4byte	.LVL175
 5544 11c5 91050000 		.4byte	0x591
 5545 11c9 1B       		.uleb128 0x1b
 5546 11ca 16050000 		.4byte	.LVL178
 5547 11ce 91050000 		.4byte	0x591
 5548 11d2 1B       		.uleb128 0x1b
 5549 11d3 1A050000 		.4byte	.LVL179
 5550 11d7 46050000 		.4byte	0x546
 5551 11db 1B       		.uleb128 0x1b
 5552 11dc 1E050000 		.4byte	.LVL180
 5553 11e0 D7050000 		.4byte	0x5d7
 5554 11e4 1B       		.uleb128 0x1b
 5555 11e5 3A050000 		.4byte	.LVL181
 5556 11e9 91050000 		.4byte	0x591
 5557 11ed 1C       		.uleb128 0x1c
 5558 11ee 42050000 		.4byte	.LVL182
 5559 11f2 11050000 		.4byte	0x511
 5560 11f6 07120000 		.4byte	0x1207
 5561 11fa 1D       		.uleb128 0x1d
 5562 11fb 01       		.byte	0x1
 5563 11fc 50       		.byte	0x50
 5564 11fd 02       		.byte	0x2
 5565 11fe 91       		.byte	0x91
 5566 11ff 60       		.sleb128 -32
 5567 1200 1D       		.uleb128 0x1d
 5568 1201 01       		.byte	0x1
 5569 1202 51       		.byte	0x51
 5570 1203 02       		.byte	0x2
 5571 1204 91       		.byte	0x91
 5572 1205 5C       		.sleb128 -36
 5573 1206 00       		.byte	0
 5574 1207 1C       		.uleb128 0x1c
 5575 1208 4A050000 		.4byte	.LVL183
 5576 120c 9F070000 		.4byte	0x79f
 5577 1210 1B120000 		.4byte	0x121b
 5578 1214 1D       		.uleb128 0x1d
 5579 1215 01       		.byte	0x1
 5580 1216 50       		.byte	0x50
 5581 1217 02       		.byte	0x2
 5582 1218 74       		.byte	0x74
 5583 1219 00       		.sleb128 0
 5584 121a 00       		.byte	0
 5585 121b 1B       		.uleb128 0x1b
ARM GAS  /tmp/ccMyq1Ea.s 			page 168


 5586 121c 54050000 		.4byte	.LVL184
 5587 1220 D7050000 		.4byte	0x5d7
 5588 1224 1B       		.uleb128 0x1b
 5589 1225 5A050000 		.4byte	.LVL185
 5590 1229 73040000 		.4byte	0x473
 5591 122d 1B       		.uleb128 0x1b
 5592 122e 60050000 		.4byte	.LVL187
 5593 1232 91050000 		.4byte	0x591
 5594 1236 1C       		.uleb128 0x1c
 5595 1237 6A050000 		.4byte	.LVL188
 5596 123b F6040000 		.4byte	0x4f6
 5597 123f 4A120000 		.4byte	0x124a
 5598 1243 1D       		.uleb128 0x1d
 5599 1244 01       		.byte	0x1
 5600 1245 50       		.byte	0x50
 5601 1246 02       		.byte	0x2
 5602 1247 74       		.byte	0x74
 5603 1248 24       		.sleb128 36
 5604 1249 00       		.byte	0
 5605 124a 1C       		.uleb128 0x1c
 5606 124b 70050000 		.4byte	.LVL189
 5607 124f FB070000 		.4byte	0x7fb
 5608 1253 5E120000 		.4byte	0x125e
 5609 1257 1D       		.uleb128 0x1d
 5610 1258 01       		.byte	0x1
 5611 1259 50       		.byte	0x50
 5612 125a 02       		.byte	0x2
 5613 125b 74       		.byte	0x74
 5614 125c 00       		.sleb128 0
 5615 125d 00       		.byte	0
 5616 125e 1B       		.uleb128 0x1b
 5617 125f 74050000 		.4byte	.LVL190
 5618 1263 E6040000 		.4byte	0x4e6
 5619 1267 1C       		.uleb128 0x1c
 5620 1268 94050000 		.4byte	.LVL191
 5621 126c FB070000 		.4byte	0x7fb
 5622 1270 7B120000 		.4byte	0x127b
 5623 1274 1D       		.uleb128 0x1d
 5624 1275 01       		.byte	0x1
 5625 1276 50       		.byte	0x50
 5626 1277 02       		.byte	0x2
 5627 1278 74       		.byte	0x74
 5628 1279 00       		.sleb128 0
 5629 127a 00       		.byte	0
 5630 127b 1B       		.uleb128 0x1b
 5631 127c 98050000 		.4byte	.LVL192
 5632 1280 E6040000 		.4byte	0x4e6
 5633 1284 1C       		.uleb128 0x1c
 5634 1285 A0050000 		.4byte	.LVL193
 5635 1289 FB070000 		.4byte	0x7fb
 5636 128d 98120000 		.4byte	0x1298
 5637 1291 1D       		.uleb128 0x1d
 5638 1292 01       		.byte	0x1
 5639 1293 50       		.byte	0x50
 5640 1294 02       		.byte	0x2
 5641 1295 74       		.byte	0x74
 5642 1296 00       		.sleb128 0
ARM GAS  /tmp/ccMyq1Ea.s 			page 169


 5643 1297 00       		.byte	0
 5644 1298 1B       		.uleb128 0x1b
 5645 1299 A4050000 		.4byte	.LVL194
 5646 129d E6040000 		.4byte	0x4e6
 5647 12a1 1C       		.uleb128 0x1c
 5648 12a2 AA050000 		.4byte	.LVL195
 5649 12a6 9F070000 		.4byte	0x79f
 5650 12aa B5120000 		.4byte	0x12b5
 5651 12ae 1D       		.uleb128 0x1d
 5652 12af 01       		.byte	0x1
 5653 12b0 50       		.byte	0x50
 5654 12b1 02       		.byte	0x2
 5655 12b2 74       		.byte	0x74
 5656 12b3 00       		.sleb128 0
 5657 12b4 00       		.byte	0
 5658 12b5 1B       		.uleb128 0x1b
 5659 12b6 B6050000 		.4byte	.LVL196
 5660 12ba D7050000 		.4byte	0x5d7
 5661 12be 00       		.byte	0
 5662 12bf 29       		.uleb128 0x29
 5663 12c0 01       		.byte	0x1
 5664 12c1 57020000 		.4byte	.LASF124
 5665 12c5 01       		.byte	0x1
 5666 12c6 F904     		.2byte	0x4f9
 5667 12c8 0C       		.byte	0xc
 5668 12c9 01       		.byte	0x1
 5669 12ca EF000000 		.4byte	0xef
 5670 12ce C0030000 		.4byte	.LFB16
 5671 12d2 AE040000 		.4byte	.LFE16
 5672 12d6 9F0D0000 		.4byte	.LLST68
 5673 12da 01       		.byte	0x1
 5674 12db 9E140000 		.4byte	0x149e
 5675 12df 19       		.uleb128 0x19
 5676 12e0 45020000 		.4byte	.LASF61
 5677 12e4 01       		.byte	0x1
 5678 12e5 F904     		.2byte	0x4f9
 5679 12e7 29       		.byte	0x29
 5680 12e8 8C020000 		.4byte	0x28c
 5681 12ec DB0D0000 		.4byte	.LLST69
 5682 12f0 D70D0000 		.4byte	.LVUS69
 5683 12f4 19       		.uleb128 0x19
 5684 12f5 09030000 		.4byte	.LASF95
 5685 12f9 01       		.byte	0x1
 5686 12fa F904     		.2byte	0x4f9
 5687 12fc 3E       		.byte	0x3e
 5688 12fd A4000000 		.4byte	0xa4
 5689 1301 FD0D0000 		.4byte	.LLST70
 5690 1305 F90D0000 		.4byte	.LVUS70
 5691 1309 19       		.uleb128 0x19
 5692 130a 3B090000 		.4byte	.LASF84
 5693 130e 01       		.byte	0x1
 5694 130f F904     		.2byte	0x4f9
 5695 1311 53       		.byte	0x53
 5696 1312 16010000 		.4byte	0x116
 5697 1316 1D0E0000 		.4byte	.LLST71
 5698 131a 1B0E0000 		.4byte	.LVUS71
 5699 131e 1A       		.uleb128 0x1a
ARM GAS  /tmp/ccMyq1Ea.s 			page 170


 5700 131f C4030000 		.4byte	.LASF118
 5701 1323 01       		.byte	0x1
 5702 1324 FB04     		.2byte	0x4fb
 5703 1326 0C       		.byte	0xc
 5704 1327 EF000000 		.4byte	0xef
 5705 132b 3A0E0000 		.4byte	.LLST72
 5706 132f 300E0000 		.4byte	.LVUS72
 5707 1333 31       		.uleb128 0x31
 5708 1334 D9030000 		.4byte	.LASF120
 5709 1338 01       		.byte	0x1
 5710 1339 FC04     		.2byte	0x4fc
 5711 133b 0B       		.byte	0xb
 5712 133c 80020000 		.4byte	0x280
 5713 1340 02       		.byte	0x2
 5714 1341 91       		.byte	0x91
 5715 1342 60       		.sleb128 -32
 5716 1343 1A       		.uleb128 0x1a
 5717 1344 75080000 		.4byte	.LASF89
 5718 1348 01       		.byte	0x1
 5719 1349 FD04     		.2byte	0x4fd
 5720 134b 11       		.byte	0x11
 5721 134c A3060000 		.4byte	0x6a3
 5722 1350 7F0E0000 		.4byte	.LLST73
 5723 1354 7B0E0000 		.4byte	.LVUS73
 5724 1358 25       		.uleb128 0x25
 5725 1359 E0000000 		.4byte	.Ldebug_ranges0+0xe0
 5726 135d C7130000 		.4byte	0x13c7
 5727 1361 1A       		.uleb128 0x1a
 5728 1362 42030000 		.4byte	.LASF46
 5729 1366 01       		.byte	0x1
 5730 1367 1505     		.2byte	0x515
 5731 1369 16       		.byte	0x16
 5732 136a 11010000 		.4byte	0x111
 5733 136e A30E0000 		.4byte	.LLST74
 5734 1372 9D0E0000 		.4byte	.LVUS74
 5735 1376 1C       		.uleb128 0x1c
 5736 1377 E0030000 		.4byte	.LVL139
 5737 137b C9080000 		.4byte	0x8c9
 5738 137f 90130000 		.4byte	0x1390
 5739 1383 1D       		.uleb128 0x1d
 5740 1384 01       		.byte	0x1
 5741 1385 50       		.byte	0x50
 5742 1386 02       		.byte	0x2
 5743 1387 74       		.byte	0x74
 5744 1388 00       		.sleb128 0
 5745 1389 1D       		.uleb128 0x1d
 5746 138a 01       		.byte	0x1
 5747 138b 51       		.byte	0x51
 5748 138c 02       		.byte	0x2
 5749 138d 76       		.byte	0x76
 5750 138e 00       		.sleb128 0
 5751 138f 00       		.byte	0
 5752 1390 1C       		.uleb128 0x1c
 5753 1391 EE030000 		.4byte	.LVL140
 5754 1395 B2050000 		.4byte	0x5b2
 5755 1399 A4130000 		.4byte	0x13a4
 5756 139d 1D       		.uleb128 0x1d
ARM GAS  /tmp/ccMyq1Ea.s 			page 171


 5757 139e 01       		.byte	0x1
 5758 139f 50       		.byte	0x50
 5759 13a0 02       		.byte	0x2
 5760 13a1 74       		.byte	0x74
 5761 13a2 10       		.sleb128 16
 5762 13a3 00       		.byte	0
 5763 13a4 1B       		.uleb128 0x1b
 5764 13a5 08040000 		.4byte	.LVL141
 5765 13a9 91050000 		.4byte	0x591
 5766 13ad 1B       		.uleb128 0x1b
 5767 13ae 18040000 		.4byte	.LVL144
 5768 13b2 91050000 		.4byte	0x591
 5769 13b6 2F       		.uleb128 0x2f
 5770 13b7 24040000 		.4byte	.LVL146
 5771 13bb 52050000 		.4byte	0x552
 5772 13bf 1D       		.uleb128 0x1d
 5773 13c0 01       		.byte	0x1
 5774 13c1 50       		.byte	0x50
 5775 13c2 02       		.byte	0x2
 5776 13c3 91       		.byte	0x91
 5777 13c4 60       		.sleb128 -32
 5778 13c5 00       		.byte	0
 5779 13c6 00       		.byte	0
 5780 13c7 1B       		.uleb128 0x1b
 5781 13c8 D2030000 		.4byte	.LVL136
 5782 13cc D7050000 		.4byte	0x5d7
 5783 13d0 1B       		.uleb128 0x1b
 5784 13d1 28040000 		.4byte	.LVL147
 5785 13d5 91050000 		.4byte	0x591
 5786 13d9 1B       		.uleb128 0x1b
 5787 13da 2C040000 		.4byte	.LVL148
 5788 13de 46050000 		.4byte	0x546
 5789 13e2 1B       		.uleb128 0x1b
 5790 13e3 30040000 		.4byte	.LVL149
 5791 13e7 D7050000 		.4byte	0x5d7
 5792 13eb 1B       		.uleb128 0x1b
 5793 13ec 4C040000 		.4byte	.LVL150
 5794 13f0 91050000 		.4byte	0x591
 5795 13f4 1C       		.uleb128 0x1c
 5796 13f5 54040000 		.4byte	.LVL151
 5797 13f9 11050000 		.4byte	0x511
 5798 13fd 0E140000 		.4byte	0x140e
 5799 1401 1D       		.uleb128 0x1d
 5800 1402 01       		.byte	0x1
 5801 1403 50       		.byte	0x50
 5802 1404 02       		.byte	0x2
 5803 1405 91       		.byte	0x91
 5804 1406 60       		.sleb128 -32
 5805 1407 1D       		.uleb128 0x1d
 5806 1408 01       		.byte	0x1
 5807 1409 51       		.byte	0x51
 5808 140a 02       		.byte	0x2
 5809 140b 91       		.byte	0x91
 5810 140c 5C       		.sleb128 -36
 5811 140d 00       		.byte	0
 5812 140e 1C       		.uleb128 0x1c
 5813 140f 5C040000 		.4byte	.LVL152
ARM GAS  /tmp/ccMyq1Ea.s 			page 172


 5814 1413 9F070000 		.4byte	0x79f
 5815 1417 22140000 		.4byte	0x1422
 5816 141b 1D       		.uleb128 0x1d
 5817 141c 01       		.byte	0x1
 5818 141d 50       		.byte	0x50
 5819 141e 02       		.byte	0x2
 5820 141f 74       		.byte	0x74
 5821 1420 00       		.sleb128 0
 5822 1421 00       		.byte	0
 5823 1422 1C       		.uleb128 0x1c
 5824 1423 68040000 		.4byte	.LVL153
 5825 1427 F6040000 		.4byte	0x4f6
 5826 142b 36140000 		.4byte	0x1436
 5827 142f 1D       		.uleb128 0x1d
 5828 1430 01       		.byte	0x1
 5829 1431 50       		.byte	0x50
 5830 1432 02       		.byte	0x2
 5831 1433 74       		.byte	0x74
 5832 1434 24       		.sleb128 36
 5833 1435 00       		.byte	0
 5834 1436 1C       		.uleb128 0x1c
 5835 1437 6E040000 		.4byte	.LVL154
 5836 143b FB070000 		.4byte	0x7fb
 5837 143f 4A140000 		.4byte	0x144a
 5838 1443 1D       		.uleb128 0x1d
 5839 1444 01       		.byte	0x1
 5840 1445 50       		.byte	0x50
 5841 1446 02       		.byte	0x2
 5842 1447 74       		.byte	0x74
 5843 1448 00       		.sleb128 0
 5844 1449 00       		.byte	0
 5845 144a 1B       		.uleb128 0x1b
 5846 144b 72040000 		.4byte	.LVL155
 5847 144f E6040000 		.4byte	0x4e6
 5848 1453 1C       		.uleb128 0x1c
 5849 1454 92040000 		.4byte	.LVL156
 5850 1458 FB070000 		.4byte	0x7fb
 5851 145c 67140000 		.4byte	0x1467
 5852 1460 1D       		.uleb128 0x1d
 5853 1461 01       		.byte	0x1
 5854 1462 50       		.byte	0x50
 5855 1463 02       		.byte	0x2
 5856 1464 74       		.byte	0x74
 5857 1465 00       		.sleb128 0
 5858 1466 00       		.byte	0
 5859 1467 1B       		.uleb128 0x1b
 5860 1468 96040000 		.4byte	.LVL157
 5861 146c E6040000 		.4byte	0x4e6
 5862 1470 1C       		.uleb128 0x1c
 5863 1471 9E040000 		.4byte	.LVL158
 5864 1475 FB070000 		.4byte	0x7fb
 5865 1479 84140000 		.4byte	0x1484
 5866 147d 1D       		.uleb128 0x1d
 5867 147e 01       		.byte	0x1
 5868 147f 50       		.byte	0x50
 5869 1480 02       		.byte	0x2
 5870 1481 74       		.byte	0x74
ARM GAS  /tmp/ccMyq1Ea.s 			page 173


 5871 1482 00       		.sleb128 0
 5872 1483 00       		.byte	0
 5873 1484 1B       		.uleb128 0x1b
 5874 1485 A2040000 		.4byte	.LVL159
 5875 1489 E6040000 		.4byte	0x4e6
 5876 148d 2F       		.uleb128 0x2f
 5877 148e A8040000 		.4byte	.LVL160
 5878 1492 9F070000 		.4byte	0x79f
 5879 1496 1D       		.uleb128 0x1d
 5880 1497 01       		.byte	0x1
 5881 1498 50       		.byte	0x50
 5882 1499 02       		.byte	0x2
 5883 149a 74       		.byte	0x74
 5884 149b 00       		.sleb128 0
 5885 149c 00       		.byte	0
 5886 149d 00       		.byte	0
 5887 149e 29       		.uleb128 0x29
 5888 149f 01       		.byte	0x1
 5889 14a0 0E050000 		.4byte	.LASF125
 5890 14a4 01       		.byte	0x1
 5891 14a5 5404     		.2byte	0x454
 5892 14a7 0C       		.byte	0xc
 5893 14a8 01       		.byte	0x1
 5894 14a9 EF000000 		.4byte	0xef
 5895 14ad 6A030000 		.4byte	.LFB15
 5896 14b1 C0030000 		.4byte	.LFE15
 5897 14b5 CE0E0000 		.4byte	.LLST61
 5898 14b9 01       		.byte	0x1
 5899 14ba B6150000 		.4byte	0x15b6
 5900 14be 19       		.uleb128 0x19
 5901 14bf 45020000 		.4byte	.LASF61
 5902 14c3 01       		.byte	0x1
 5903 14c4 5404     		.2byte	0x454
 5904 14c6 2D       		.byte	0x2d
 5905 14c7 8C020000 		.4byte	0x28c
 5906 14cb F80E0000 		.4byte	.LLST62
 5907 14cf EE0E0000 		.4byte	.LVUS62
 5908 14d3 19       		.uleb128 0x19
 5909 14d4 A4000000 		.4byte	.LASF116
 5910 14d8 01       		.byte	0x1
 5911 14d9 5404     		.2byte	0x454
 5912 14db 48       		.byte	0x48
 5913 14dc 6F0E0000 		.4byte	0xe6f
 5914 14e0 510F0000 		.4byte	.LLST63
 5915 14e4 4B0F0000 		.4byte	.LVUS63
 5916 14e8 1A       		.uleb128 0x1a
 5917 14e9 7D080000 		.4byte	.LASF90
 5918 14ed 01       		.byte	0x1
 5919 14ee 5604     		.2byte	0x456
 5920 14f0 0C       		.byte	0xc
 5921 14f1 EF000000 		.4byte	0xef
 5922 14f5 7C0F0000 		.4byte	.LLST64
 5923 14f9 7A0F0000 		.4byte	.LVUS64
 5924 14fd 22       		.uleb128 0x22
 5925 14fe DB010000 		.4byte	.LASF113
 5926 1502 01       		.byte	0x1
 5927 1503 5704     		.2byte	0x457
ARM GAS  /tmp/ccMyq1Ea.s 			page 174


 5928 1505 0D       		.byte	0xd
 5929 1506 00010000 		.4byte	0x100
 5930 150a 1A       		.uleb128 0x1a
 5931 150b 75080000 		.4byte	.LASF89
 5932 150f 01       		.byte	0x1
 5933 1510 5804     		.2byte	0x458
 5934 1512 11       		.byte	0x11
 5935 1513 A3060000 		.4byte	0x6a3
 5936 1517 990F0000 		.4byte	.LLST65
 5937 151b 8F0F0000 		.4byte	.LVUS65
 5938 151f 25       		.uleb128 0x25
 5939 1520 B0000000 		.4byte	.Ldebug_ranges0+0xb0
 5940 1524 72150000 		.4byte	0x1572
 5941 1528 1A       		.uleb128 0x1a
 5942 1529 42030000 		.4byte	.LASF46
 5943 152d 01       		.byte	0x1
 5944 152e 7D04     		.2byte	0x47d
 5945 1530 15       		.byte	0x15
 5946 1531 11010000 		.4byte	0x111
 5947 1535 F40F0000 		.4byte	.LLST66
 5948 1539 EC0F0000 		.4byte	.LVUS66
 5949 153d 2B       		.uleb128 0x2b
 5950 153e C8000000 		.4byte	.Ldebug_ranges0+0xc8
 5951 1542 1A       		.uleb128 0x1a
 5952 1543 68010000 		.4byte	.LASF50
 5953 1547 01       		.byte	0x1
 5954 1548 8404     		.2byte	0x484
 5955 154a 11       		.byte	0x11
 5956 154b CD000000 		.4byte	0xcd
 5957 154f 36100000 		.4byte	.LLST67
 5958 1553 2C100000 		.4byte	.LVUS67
 5959 1557 2F       		.uleb128 0x2f
 5960 1558 A2030000 		.4byte	.LVL125
 5961 155c B2050000 		.4byte	0x5b2
 5962 1560 1D       		.uleb128 0x1d
 5963 1561 01       		.byte	0x1
 5964 1562 50       		.byte	0x50
 5965 1563 0B       		.byte	0xb
 5966 1564 F3       		.byte	0xf3
 5967 1565 03       		.uleb128 0x3
 5968 1566 F5       		.byte	0xf5
 5969 1567 00       		.uleb128 0
 5970 1568 25       		.uleb128 0x25
 5971 1569 F7       		.byte	0xf7
 5972 156a 2C       		.uleb128 0x2c
 5973 156b F7       		.byte	0xf7
 5974 156c 00       		.uleb128 0
 5975 156d 23       		.byte	0x23
 5976 156e 24       		.uleb128 0x24
 5977 156f 00       		.byte	0
 5978 1570 00       		.byte	0
 5979 1571 00       		.byte	0
 5980 1572 2A       		.uleb128 0x2a
 5981 1573 B11D0000 		.4byte	0x1db1
 5982 1577 6A030000 		.4byte	.LBI53
 5983 157b 09       		.byte	.LVU452
 5984 157c 98000000 		.4byte	.Ldebug_ranges0+0x98
ARM GAS  /tmp/ccMyq1Ea.s 			page 175


 5985 1580 01       		.byte	0x1
 5986 1581 7B04     		.2byte	0x47b
 5987 1583 1B       		.byte	0x1b
 5988 1584 99150000 		.4byte	0x1599
 5989 1588 2B       		.uleb128 0x2b
 5990 1589 98000000 		.4byte	.Ldebug_ranges0+0x98
 5991 158d 2C       		.uleb128 0x2c
 5992 158e C31D0000 		.4byte	0x1dc3
 5993 1592 2C       		.uleb128 0x2c
 5994 1593 CF1D0000 		.4byte	0x1dcf
 5995 1597 00       		.byte	0
 5996 1598 00       		.byte	0
 5997 1599 30       		.uleb128 0x30
 5998 159a 961D0000 		.4byte	0x1d96
 5999 159e AC030000 		.4byte	.LBI60
 6000 15a2 02       		.byte	.LVU488
 6001 15a3 AC030000 		.4byte	.LBB60
 6002 15a7 B0030000 		.4byte	.LBE60
 6003 15ab 01       		.byte	0x1
 6004 15ac F304     		.2byte	0x4f3
 6005 15ae 02       		.byte	0x2
 6006 15af 2E       		.uleb128 0x2e
 6007 15b0 A41D0000 		.4byte	0x1da4
 6008 15b4 00       		.byte	0
 6009 15b5 00       		.byte	0
 6010 15b6 29       		.uleb128 0x29
 6011 15b7 01       		.byte	0x1
 6012 15b8 FD000000 		.4byte	.LASF126
 6013 15bc 01       		.byte	0x1
 6014 15bd BD03     		.2byte	0x3bd
 6015 15bf 0C       		.byte	0xc
 6016 15c0 01       		.byte	0x1
 6017 15c1 EF000000 		.4byte	0xef
 6018 15c5 08030000 		.4byte	.LFB14
 6019 15c9 6A030000 		.4byte	.LFE14
 6020 15cd 77100000 		.4byte	.LLST53
 6021 15d1 01       		.byte	0x1
 6022 15d2 E8160000 		.4byte	0x16e8
 6023 15d6 19       		.uleb128 0x19
 6024 15d7 45020000 		.4byte	.LASF61
 6025 15db 01       		.byte	0x1
 6026 15dc BD03     		.2byte	0x3bd
 6027 15de 34       		.byte	0x34
 6028 15df 8C020000 		.4byte	0x28c
 6029 15e3 9B100000 		.4byte	.LLST54
 6030 15e7 97100000 		.4byte	.LVUS54
 6031 15eb 19       		.uleb128 0x19
 6032 15ec 07080000 		.4byte	.LASF98
 6033 15f0 01       		.byte	0x1
 6034 15f1 BD03     		.2byte	0x3bd
 6035 15f3 4F       		.byte	0x4f
 6036 15f4 B6000000 		.4byte	0xb6
 6037 15f8 BF100000 		.4byte	.LLST55
 6038 15fc B9100000 		.4byte	.LVUS55
 6039 1600 19       		.uleb128 0x19
 6040 1601 A4000000 		.4byte	.LASF116
 6041 1605 01       		.byte	0x1
ARM GAS  /tmp/ccMyq1Ea.s 			page 176


 6042 1606 BD03     		.2byte	0x3bd
 6043 1608 71       		.byte	0x71
 6044 1609 6F0E0000 		.4byte	0xe6f
 6045 160d F5100000 		.4byte	.LLST56
 6046 1611 F1100000 		.4byte	.LVUS56
 6047 1615 19       		.uleb128 0x19
 6048 1616 B9010000 		.4byte	.LASF127
 6049 161a 01       		.byte	0x1
 6050 161b BD03     		.2byte	0x3bd
 6051 161d 9D       		.byte	0x9d
 6052 161e FB000000 		.4byte	0xfb
 6053 1622 1B110000 		.4byte	.LLST57
 6054 1626 13110000 		.4byte	.LVUS57
 6055 162a 1A       		.uleb128 0x1a
 6056 162b 7D080000 		.4byte	.LASF90
 6057 162f 01       		.byte	0x1
 6058 1630 BF03     		.2byte	0x3bf
 6059 1632 0C       		.byte	0xc
 6060 1633 EF000000 		.4byte	0xef
 6061 1637 5A110000 		.4byte	.LLST58
 6062 163b 58110000 		.4byte	.LVUS58
 6063 163f 22       		.uleb128 0x22
 6064 1640 DB010000 		.4byte	.LASF113
 6065 1644 01       		.byte	0x1
 6066 1645 C003     		.2byte	0x3c0
 6067 1647 0D       		.byte	0xd
 6068 1648 00010000 		.4byte	0x100
 6069 164c 1A       		.uleb128 0x1a
 6070 164d 75080000 		.4byte	.LASF89
 6071 1651 01       		.byte	0x1
 6072 1652 C103     		.2byte	0x3c1
 6073 1654 11       		.byte	0x11
 6074 1655 A3060000 		.4byte	0x6a3
 6075 1659 71110000 		.4byte	.LLST59
 6076 165d 6D110000 		.4byte	.LVUS59
 6077 1661 25       		.uleb128 0x25
 6078 1662 80000000 		.4byte	.Ldebug_ranges0+0x80
 6079 1666 A4160000 		.4byte	0x16a4
 6080 166a 1A       		.uleb128 0x1a
 6081 166b 68010000 		.4byte	.LASF50
 6082 166f 01       		.byte	0x1
 6083 1670 E003     		.2byte	0x3e0
 6084 1672 11       		.byte	0x11
 6085 1673 CD000000 		.4byte	0xcd
 6086 1677 97110000 		.4byte	.LLST60
 6087 167b 8F110000 		.4byte	.LVUS60
 6088 167f 1C       		.uleb128 0x1c
 6089 1680 3C030000 		.4byte	.LVL108
 6090 1684 27090000 		.4byte	0x927
 6091 1688 93160000 		.4byte	0x1693
 6092 168c 1D       		.uleb128 0x1d
 6093 168d 01       		.byte	0x1
 6094 168e 50       		.byte	0x50
 6095 168f 02       		.byte	0x2
 6096 1690 74       		.byte	0x74
 6097 1691 00       		.sleb128 0
 6098 1692 00       		.byte	0
ARM GAS  /tmp/ccMyq1Ea.s 			page 177


 6099 1693 2F       		.uleb128 0x2f
 6100 1694 4C030000 		.4byte	.LVL109
 6101 1698 B2050000 		.4byte	0x5b2
 6102 169c 1D       		.uleb128 0x1d
 6103 169d 01       		.byte	0x1
 6104 169e 50       		.byte	0x50
 6105 169f 02       		.byte	0x2
 6106 16a0 74       		.byte	0x74
 6107 16a1 24       		.sleb128 36
 6108 16a2 00       		.byte	0
 6109 16a3 00       		.byte	0
 6110 16a4 2A       		.uleb128 0x2a
 6111 16a5 B11D0000 		.4byte	0x1db1
 6112 16a9 08030000 		.4byte	.LBI45
 6113 16ad 09       		.byte	.LVU398
 6114 16ae 68000000 		.4byte	.Ldebug_ranges0+0x68
 6115 16b2 01       		.byte	0x1
 6116 16b3 DC03     		.2byte	0x3dc
 6117 16b5 1B       		.byte	0x1b
 6118 16b6 CB160000 		.4byte	0x16cb
 6119 16ba 2B       		.uleb128 0x2b
 6120 16bb 68000000 		.4byte	.Ldebug_ranges0+0x68
 6121 16bf 2C       		.uleb128 0x2c
 6122 16c0 C31D0000 		.4byte	0x1dc3
 6123 16c4 2C       		.uleb128 0x2c
 6124 16c5 CF1D0000 		.4byte	0x1dcf
 6125 16c9 00       		.byte	0
 6126 16ca 00       		.byte	0
 6127 16cb 30       		.uleb128 0x30
 6128 16cc 961D0000 		.4byte	0x1d96
 6129 16d0 56030000 		.4byte	.LBI50
 6130 16d4 02       		.byte	.LVU432
 6131 16d5 56030000 		.4byte	.LBB50
 6132 16d9 5A030000 		.4byte	.LBE50
 6133 16dd 01       		.byte	0x1
 6134 16de 4E04     		.2byte	0x44e
 6135 16e0 02       		.byte	0x2
 6136 16e1 2E       		.uleb128 0x2e
 6137 16e2 A41D0000 		.4byte	0x1da4
 6138 16e6 00       		.byte	0
 6139 16e7 00       		.byte	0
 6140 16e8 29       		.uleb128 0x29
 6141 16e9 01       		.byte	0x1
 6142 16ea 37040000 		.4byte	.LASF128
 6143 16ee 01       		.byte	0x1
 6144 16ef EB02     		.2byte	0x2eb
 6145 16f1 0C       		.byte	0xc
 6146 16f2 01       		.byte	0x1
 6147 16f3 EF000000 		.4byte	0xef
 6148 16f7 C0010000 		.4byte	.LFB13
 6149 16fb BA020000 		.4byte	.LFE13
 6150 16ff CF110000 		.4byte	.LLST36
 6151 1703 01       		.byte	0x1
 6152 1704 0A190000 		.4byte	0x190a
 6153 1708 19       		.uleb128 0x19
 6154 1709 45020000 		.4byte	.LASF61
 6155 170d 01       		.byte	0x1
ARM GAS  /tmp/ccMyq1Ea.s 			page 178


 6156 170e EB02     		.2byte	0x2eb
 6157 1710 2D       		.byte	0x2d
 6158 1711 8C020000 		.4byte	0x28c
 6159 1715 0B120000 		.4byte	.LLST37
 6160 1719 07120000 		.4byte	.LVUS37
 6161 171d 19       		.uleb128 0x19
 6162 171e 07080000 		.4byte	.LASF98
 6163 1722 01       		.byte	0x1
 6164 1723 EB02     		.2byte	0x2eb
 6165 1725 48       		.byte	0x48
 6166 1726 B6000000 		.4byte	0xb6
 6167 172a 2D120000 		.4byte	.LLST38
 6168 172e 29120000 		.4byte	.LVUS38
 6169 1732 19       		.uleb128 0x19
 6170 1733 3B090000 		.4byte	.LASF84
 6171 1737 01       		.byte	0x1
 6172 1738 EB02     		.2byte	0x2eb
 6173 173a 62       		.byte	0x62
 6174 173b 16010000 		.4byte	0x116
 6175 173f 4D120000 		.4byte	.LLST39
 6176 1743 4B120000 		.4byte	.LVUS39
 6177 1747 19       		.uleb128 0x19
 6178 1748 B9010000 		.4byte	.LASF127
 6179 174c 01       		.byte	0x1
 6180 174d EB02     		.2byte	0x2eb
 6181 174f 81       		.byte	0x81
 6182 1750 FB000000 		.4byte	0xfb
 6183 1754 64120000 		.4byte	.LLST40
 6184 1758 60120000 		.4byte	.LVUS40
 6185 175c 1A       		.uleb128 0x1a
 6186 175d C4030000 		.4byte	.LASF118
 6187 1761 01       		.byte	0x1
 6188 1762 ED02     		.2byte	0x2ed
 6189 1764 0C       		.byte	0xc
 6190 1765 EF000000 		.4byte	0xef
 6191 1769 8C120000 		.4byte	.LLST41
 6192 176d 82120000 		.4byte	.LVUS41
 6193 1771 1A       		.uleb128 0x1a
 6194 1772 24020000 		.4byte	.LASF129
 6195 1776 01       		.byte	0x1
 6196 1777 ED02     		.2byte	0x2ed
 6197 1779 25       		.byte	0x25
 6198 177a EF000000 		.4byte	0xef
 6199 177e CF120000 		.4byte	.LLST42
 6200 1782 CD120000 		.4byte	.LVUS42
 6201 1786 31       		.uleb128 0x31
 6202 1787 D9030000 		.4byte	.LASF120
 6203 178b 01       		.byte	0x1
 6204 178c EE02     		.2byte	0x2ee
 6205 178e 0B       		.byte	0xb
 6206 178f 80020000 		.4byte	0x280
 6207 1793 02       		.byte	0x2
 6208 1794 91       		.byte	0x91
 6209 1795 60       		.sleb128 -32
 6210 1796 1A       		.uleb128 0x1a
 6211 1797 75080000 		.4byte	.LASF89
 6212 179b 01       		.byte	0x1
ARM GAS  /tmp/ccMyq1Ea.s 			page 179


 6213 179c EF02     		.2byte	0x2ef
 6214 179e 11       		.byte	0x11
 6215 179f A3060000 		.4byte	0x6a3
 6216 17a3 E6120000 		.4byte	.LLST43
 6217 17a7 E2120000 		.4byte	.LVUS43
 6218 17ab 2A       		.uleb128 0x2a
 6219 17ac 07070000 		.4byte	0x707
 6220 17b0 5E020000 		.4byte	.LBI37
 6221 17b4 01       		.byte	.LVU307
 6222 17b5 50000000 		.4byte	.Ldebug_ranges0+0x50
 6223 17b9 01       		.byte	0x1
 6224 17ba 9303     		.2byte	0x393
 6225 17bc 08       		.byte	0x8
 6226 17bd FD170000 		.4byte	0x17fd
 6227 17c1 33       		.uleb128 0x33
 6228 17c2 1A070000 		.4byte	0x71a
 6229 17c6 08130000 		.4byte	.LLST44
 6230 17ca 04130000 		.4byte	.LVUS44
 6231 17ce 2B       		.uleb128 0x2b
 6232 17cf 50000000 		.4byte	.Ldebug_ranges0+0x50
 6233 17d3 34       		.uleb128 0x34
 6234 17d4 27070000 		.4byte	0x727
 6235 17d8 2A130000 		.4byte	.LLST45
 6236 17dc 26130000 		.4byte	.LVUS45
 6237 17e0 1B       		.uleb128 0x1b
 6238 17e1 62020000 		.4byte	.LVL82
 6239 17e5 D7050000 		.4byte	0x5d7
 6240 17e9 1B       		.uleb128 0x1b
 6241 17ea 6E020000 		.4byte	.LVL84
 6242 17ee 91050000 		.4byte	0x591
 6243 17f2 1B       		.uleb128 0x1b
 6244 17f3 8C020000 		.4byte	.LVL89
 6245 17f7 91050000 		.4byte	0x591
 6246 17fb 00       		.byte	0
 6247 17fc 00       		.byte	0
 6248 17fd 1B       		.uleb128 0x1b
 6249 17fe D4010000 		.4byte	.LVL66
 6250 1802 D7050000 		.4byte	0x5d7
 6251 1806 1C       		.uleb128 0x1c
 6252 1807 E6010000 		.4byte	.LVL67
 6253 180b 27090000 		.4byte	0x927
 6254 180f 26180000 		.4byte	0x1826
 6255 1813 1D       		.uleb128 0x1d
 6256 1814 01       		.byte	0x1
 6257 1815 50       		.byte	0x50
 6258 1816 02       		.byte	0x2
 6259 1817 74       		.byte	0x74
 6260 1818 00       		.sleb128 0
 6261 1819 1D       		.uleb128 0x1d
 6262 181a 01       		.byte	0x1
 6263 181b 51       		.byte	0x51
 6264 181c 02       		.byte	0x2
 6265 181d 76       		.byte	0x76
 6266 181e 00       		.sleb128 0
 6267 181f 1D       		.uleb128 0x1d
 6268 1820 01       		.byte	0x1
 6269 1821 52       		.byte	0x52
ARM GAS  /tmp/ccMyq1Ea.s 			page 180


 6270 1822 02       		.byte	0x2
 6271 1823 75       		.byte	0x75
 6272 1824 00       		.sleb128 0
 6273 1825 00       		.byte	0
 6274 1826 1C       		.uleb128 0x1c
 6275 1827 F2010000 		.4byte	.LVL69
 6276 182b B2050000 		.4byte	0x5b2
 6277 182f 3A180000 		.4byte	0x183a
 6278 1833 1D       		.uleb128 0x1d
 6279 1834 01       		.byte	0x1
 6280 1835 50       		.byte	0x50
 6281 1836 02       		.byte	0x2
 6282 1837 74       		.byte	0x74
 6283 1838 24       		.sleb128 36
 6284 1839 00       		.byte	0
 6285 183a 1B       		.uleb128 0x1b
 6286 183b 0C020000 		.4byte	.LVL70
 6287 183f 91050000 		.4byte	0x591
 6288 1843 1B       		.uleb128 0x1b
 6289 1844 20020000 		.4byte	.LVL73
 6290 1848 91050000 		.4byte	0x591
 6291 184c 1C       		.uleb128 0x1c
 6292 184d 2C020000 		.4byte	.LVL75
 6293 1851 52050000 		.4byte	0x552
 6294 1855 60180000 		.4byte	0x1860
 6295 1859 1D       		.uleb128 0x1d
 6296 185a 01       		.byte	0x1
 6297 185b 50       		.byte	0x50
 6298 185c 02       		.byte	0x2
 6299 185d 91       		.byte	0x91
 6300 185e 60       		.sleb128 -32
 6301 185f 00       		.byte	0
 6302 1860 1B       		.uleb128 0x1b
 6303 1861 30020000 		.4byte	.LVL76
 6304 1865 91050000 		.4byte	0x591
 6305 1869 1B       		.uleb128 0x1b
 6306 186a 34020000 		.4byte	.LVL77
 6307 186e 46050000 		.4byte	0x546
 6308 1872 1B       		.uleb128 0x1b
 6309 1873 38020000 		.4byte	.LVL78
 6310 1877 D7050000 		.4byte	0x5d7
 6311 187b 1B       		.uleb128 0x1b
 6312 187c 54020000 		.4byte	.LVL79
 6313 1880 91050000 		.4byte	0x591
 6314 1884 1C       		.uleb128 0x1c
 6315 1885 5C020000 		.4byte	.LVL80
 6316 1889 11050000 		.4byte	0x511
 6317 188d 9E180000 		.4byte	0x189e
 6318 1891 1D       		.uleb128 0x1d
 6319 1892 01       		.byte	0x1
 6320 1893 50       		.byte	0x50
 6321 1894 02       		.byte	0x2
 6322 1895 91       		.byte	0x91
 6323 1896 60       		.sleb128 -32
 6324 1897 1D       		.uleb128 0x1d
 6325 1898 01       		.byte	0x1
 6326 1899 51       		.byte	0x51
ARM GAS  /tmp/ccMyq1Ea.s 			page 181


 6327 189a 02       		.byte	0x2
 6328 189b 91       		.byte	0x91
 6329 189c 5C       		.sleb128 -36
 6330 189d 00       		.byte	0
 6331 189e 1C       		.uleb128 0x1c
 6332 189f 78020000 		.4byte	.LVL85
 6333 18a3 F6040000 		.4byte	0x4f6
 6334 18a7 B2180000 		.4byte	0x18b2
 6335 18ab 1D       		.uleb128 0x1d
 6336 18ac 01       		.byte	0x1
 6337 18ad 50       		.byte	0x50
 6338 18ae 02       		.byte	0x2
 6339 18af 74       		.byte	0x74
 6340 18b0 10       		.sleb128 16
 6341 18b1 00       		.byte	0
 6342 18b2 1C       		.uleb128 0x1c
 6343 18b3 7E020000 		.4byte	.LVL86
 6344 18b7 FB070000 		.4byte	0x7fb
 6345 18bb C6180000 		.4byte	0x18c6
 6346 18bf 1D       		.uleb128 0x1d
 6347 18c0 01       		.byte	0x1
 6348 18c1 50       		.byte	0x50
 6349 18c2 02       		.byte	0x2
 6350 18c3 74       		.byte	0x74
 6351 18c4 00       		.sleb128 0
 6352 18c5 00       		.byte	0
 6353 18c6 1B       		.uleb128 0x1b
 6354 18c7 82020000 		.4byte	.LVL87
 6355 18cb E6040000 		.4byte	0x4e6
 6356 18cf 1C       		.uleb128 0x1c
 6357 18d0 92020000 		.4byte	.LVL90
 6358 18d4 FB070000 		.4byte	0x7fb
 6359 18d8 E3180000 		.4byte	0x18e3
 6360 18dc 1D       		.uleb128 0x1d
 6361 18dd 01       		.byte	0x1
 6362 18de 50       		.byte	0x50
 6363 18df 02       		.byte	0x2
 6364 18e0 74       		.byte	0x74
 6365 18e1 00       		.sleb128 0
 6366 18e2 00       		.byte	0
 6367 18e3 1B       		.uleb128 0x1b
 6368 18e4 96020000 		.4byte	.LVL91
 6369 18e8 E6040000 		.4byte	0x4e6
 6370 18ec 1C       		.uleb128 0x1c
 6371 18ed B4020000 		.4byte	.LVL92
 6372 18f1 FB070000 		.4byte	0x7fb
 6373 18f5 00190000 		.4byte	0x1900
 6374 18f9 1D       		.uleb128 0x1d
 6375 18fa 01       		.byte	0x1
 6376 18fb 50       		.byte	0x50
 6377 18fc 02       		.byte	0x2
 6378 18fd 74       		.byte	0x74
 6379 18fe 00       		.sleb128 0
 6380 18ff 00       		.byte	0
 6381 1900 1B       		.uleb128 0x1b
 6382 1901 B8020000 		.4byte	.LVL93
 6383 1905 E6040000 		.4byte	0x4e6
ARM GAS  /tmp/ccMyq1Ea.s 			page 182


 6384 1909 00       		.byte	0
 6385 190a 29       		.uleb128 0x29
 6386 190b 01       		.byte	0x1
 6387 190c 120A0000 		.4byte	.LASF130
 6388 1910 01       		.byte	0x1
 6389 1911 D102     		.2byte	0x2d1
 6390 1913 10       		.byte	0x10
 6391 1914 01       		.byte	0x1
 6392 1915 8C020000 		.4byte	0x28c
 6393 1919 AE010000 		.4byte	.LFB12
 6394 191d C0010000 		.4byte	.LFE12
 6395 1921 4A130000 		.4byte	.LLST32
 6396 1925 01       		.byte	0x1
 6397 1926 8B190000 		.4byte	0x198b
 6398 192a 19       		.uleb128 0x19
 6399 192b 3D060000 		.4byte	.LASF131
 6400 192f 01       		.byte	0x1
 6401 1930 D102     		.2byte	0x2d1
 6402 1932 41       		.byte	0x41
 6403 1933 11010000 		.4byte	0x111
 6404 1937 6E130000 		.4byte	.LLST33
 6405 193b 6A130000 		.4byte	.LVUS33
 6406 193f 19       		.uleb128 0x19
 6407 1940 88040000 		.4byte	.LASF132
 6408 1944 01       		.byte	0x1
 6409 1945 D102     		.2byte	0x2d1
 6410 1947 5F       		.byte	0x5f
 6411 1948 11010000 		.4byte	0x111
 6412 194c 99130000 		.4byte	.LLST34
 6413 1950 95130000 		.4byte	.LVUS34
 6414 1954 1A       		.uleb128 0x1a
 6415 1955 E2030000 		.4byte	.LASF133
 6416 1959 01       		.byte	0x1
 6417 195a D302     		.2byte	0x2d3
 6418 195c 10       		.byte	0x10
 6419 195d 8C020000 		.4byte	0x28c
 6420 1961 B9130000 		.4byte	.LLST35
 6421 1965 B7130000 		.4byte	.LVUS35
 6422 1969 2F       		.uleb128 0x2f
 6423 196a BA010000 		.4byte	.LVL62
 6424 196e CE1B0000 		.4byte	0x1bce
 6425 1972 1D       		.uleb128 0x1d
 6426 1973 01       		.byte	0x1
 6427 1974 50       		.byte	0x50
 6428 1975 09       		.byte	0x9
 6429 1976 F3       		.byte	0xf3
 6430 1977 03       		.uleb128 0x3
 6431 1978 F5       		.byte	0xf5
 6432 1979 00       		.uleb128 0
 6433 197a 25       		.uleb128 0x25
 6434 197b F7       		.byte	0xf7
 6435 197c 2C       		.uleb128 0x2c
 6436 197d F7       		.byte	0xf7
 6437 197e 00       		.uleb128 0
 6438 197f 1D       		.uleb128 0x1d
 6439 1980 01       		.byte	0x1
 6440 1981 51       		.byte	0x51
ARM GAS  /tmp/ccMyq1Ea.s 			page 183


 6441 1982 01       		.byte	0x1
 6442 1983 30       		.byte	0x30
 6443 1984 1D       		.uleb128 0x1d
 6444 1985 01       		.byte	0x1
 6445 1986 52       		.byte	0x52
 6446 1987 01       		.byte	0x1
 6447 1988 32       		.byte	0x32
 6448 1989 00       		.byte	0
 6449 198a 00       		.byte	0
 6450 198b 29       		.uleb128 0x29
 6451 198c 01       		.byte	0x1
 6452 198d 49070000 		.4byte	.LASF134
 6453 1991 01       		.byte	0x1
 6454 1992 8B02     		.2byte	0x28b
 6455 1994 0D       		.byte	0xd
 6456 1995 01       		.byte	0x1
 6457 1996 EF000000 		.4byte	0xef
 6458 199a CA050000 		.4byte	.LFB11
 6459 199e F8050000 		.4byte	.LFE11
 6460 19a2 CC130000 		.4byte	.LLST85
 6461 19a6 01       		.byte	0x1
 6462 19a7 1F1A0000 		.4byte	0x1a1f
 6463 19ab 19       		.uleb128 0x19
 6464 19ac 01060000 		.4byte	.LASF135
 6465 19b0 01       		.byte	0x1
 6466 19b1 8B02     		.2byte	0x28b
 6467 19b3 35       		.byte	0x35
 6468 19b4 8C020000 		.4byte	0x28c
 6469 19b8 F0130000 		.4byte	.LLST86
 6470 19bc EC130000 		.4byte	.LVUS86
 6471 19c0 19       		.uleb128 0x19
 6472 19c1 3B090000 		.4byte	.LASF84
 6473 19c5 01       		.byte	0x1
 6474 19c6 8B02     		.2byte	0x28b
 6475 19c8 48       		.byte	0x48
 6476 19c9 16010000 		.4byte	0x116
 6477 19cd 12140000 		.4byte	.LLST87
 6478 19d1 0E140000 		.4byte	.LVUS87
 6479 19d5 1A       		.uleb128 0x1a
 6480 19d6 7D080000 		.4byte	.LASF90
 6481 19da 01       		.byte	0x1
 6482 19db 8D02     		.2byte	0x28d
 6483 19dd 0D       		.byte	0xd
 6484 19de EF000000 		.4byte	0xef
 6485 19e2 32140000 		.4byte	.LLST88
 6486 19e6 30140000 		.4byte	.LVUS88
 6487 19ea 1A       		.uleb128 0x1a
 6488 19eb BE000000 		.4byte	.LASF136
 6489 19ef 01       		.byte	0x1
 6490 19f0 8E02     		.2byte	0x28e
 6491 19f2 12       		.byte	0x12
 6492 19f3 A3060000 		.4byte	0x6a3
 6493 19f7 49140000 		.4byte	.LLST89
 6494 19fb 45140000 		.4byte	.LVUS89
 6495 19ff 1B       		.uleb128 0x1b
 6496 1a00 D6050000 		.4byte	.LVL200
 6497 1a04 68050000 		.4byte	0x568
ARM GAS  /tmp/ccMyq1Ea.s 			page 184


 6498 1a08 2F       		.uleb128 0x2f
 6499 1a09 EC050000 		.4byte	.LVL203
 6500 1a0d 68100000 		.4byte	0x1068
 6501 1a11 1D       		.uleb128 0x1d
 6502 1a12 01       		.byte	0x1
 6503 1a13 50       		.byte	0x50
 6504 1a14 02       		.byte	0x2
 6505 1a15 74       		.byte	0x74
 6506 1a16 00       		.sleb128 0
 6507 1a17 1D       		.uleb128 0x1d
 6508 1a18 01       		.byte	0x1
 6509 1a19 51       		.byte	0x51
 6510 1a1a 02       		.byte	0x2
 6511 1a1b 75       		.byte	0x75
 6512 1a1c 00       		.sleb128 0
 6513 1a1d 00       		.byte	0
 6514 1a1e 00       		.byte	0
 6515 1a1f 29       		.uleb128 0x29
 6516 1a20 01       		.byte	0x1
 6517 1a21 71090000 		.4byte	.LASF137
 6518 1a25 01       		.byte	0x1
 6519 1a26 5402     		.2byte	0x254
 6520 1a28 0D       		.byte	0xd
 6521 1a29 01       		.byte	0x1
 6522 1a2a EF000000 		.4byte	0xef
 6523 1a2e DE020000 		.4byte	.LFB10
 6524 1a32 08030000 		.4byte	.LFE10
 6525 1a36 67140000 		.4byte	.LLST50
 6526 1a3a 01       		.byte	0x1
 6527 1a3b 911A0000 		.4byte	0x1a91
 6528 1a3f 19       		.uleb128 0x19
 6529 1a40 01060000 		.4byte	.LASF135
 6530 1a44 01       		.byte	0x1
 6531 1a45 5402     		.2byte	0x254
 6532 1a47 35       		.byte	0x35
 6533 1a48 8C020000 		.4byte	0x28c
 6534 1a4c 8B140000 		.4byte	.LLST51
 6535 1a50 87140000 		.4byte	.LVUS51
 6536 1a54 35       		.uleb128 0x35
 6537 1a55 7D080000 		.4byte	.LASF90
 6538 1a59 01       		.byte	0x1
 6539 1a5a 5602     		.2byte	0x256
 6540 1a5c 0D       		.byte	0xd
 6541 1a5d EF000000 		.4byte	0xef
 6542 1a61 00       		.byte	0
 6543 1a62 1A       		.uleb128 0x1a
 6544 1a63 BE000000 		.4byte	.LASF136
 6545 1a67 01       		.byte	0x1
 6546 1a68 5702     		.2byte	0x257
 6547 1a6a 12       		.byte	0x12
 6548 1a6b A3060000 		.4byte	0x6a3
 6549 1a6f AD140000 		.4byte	.LLST52
 6550 1a73 A9140000 		.4byte	.LVUS52
 6551 1a77 1B       		.uleb128 0x1b
 6552 1a78 E8020000 		.4byte	.LVL99
 6553 1a7c 68050000 		.4byte	0x568
 6554 1a80 2F       		.uleb128 0x2f
ARM GAS  /tmp/ccMyq1Ea.s 			page 185


 6555 1a81 02030000 		.4byte	.LVL101
 6556 1a85 E8160000 		.4byte	0x16e8
 6557 1a89 1D       		.uleb128 0x1d
 6558 1a8a 01       		.byte	0x1
 6559 1a8b 50       		.byte	0x50
 6560 1a8c 02       		.byte	0x2
 6561 1a8d 74       		.byte	0x74
 6562 1a8e 00       		.sleb128 0
 6563 1a8f 00       		.byte	0
 6564 1a90 00       		.byte	0
 6565 1a91 29       		.uleb128 0x29
 6566 1a92 01       		.byte	0x1
 6567 1a93 A0050000 		.4byte	.LASF138
 6568 1a97 01       		.byte	0x1
 6569 1a98 F701     		.2byte	0x1f7
 6570 1a9a 10       		.byte	0x10
 6571 1a9b 01       		.byte	0x1
 6572 1a9c 8C020000 		.4byte	0x28c
 6573 1aa0 BA020000 		.4byte	.LFB9
 6574 1aa4 DE020000 		.4byte	.LFE9
 6575 1aa8 CB140000 		.4byte	.LLST46
 6576 1aac 01       		.byte	0x1
 6577 1aad 601B0000 		.4byte	0x1b60
 6578 1ab1 19       		.uleb128 0x19
 6579 1ab2 C2060000 		.4byte	.LASF52
 6580 1ab6 01       		.byte	0x1
 6581 1ab7 F701     		.2byte	0x1f7
 6582 1ab9 31       		.byte	0x31
 6583 1aba DE000000 		.4byte	0xde
 6584 1abe F1140000 		.4byte	.LLST47
 6585 1ac2 EB140000 		.4byte	.LVUS47
 6586 1ac6 1A       		.uleb128 0x1a
 6587 1ac7 33060000 		.4byte	.LASF139
 6588 1acb 01       		.byte	0x1
 6589 1acc F901     		.2byte	0x1f9
 6590 1ace 10       		.byte	0x10
 6591 1acf 8C020000 		.4byte	0x28c
 6592 1ad3 27150000 		.4byte	.LLST48
 6593 1ad7 23150000 		.4byte	.LVUS48
 6594 1adb 35       		.uleb128 0x35
 6595 1adc AB010000 		.4byte	.LASF140
 6596 1ae0 01       		.byte	0x1
 6597 1ae1 FA01     		.2byte	0x1fa
 6598 1ae3 14       		.byte	0x14
 6599 1ae4 11010000 		.4byte	0x111
 6600 1ae8 01       		.byte	0x1
 6601 1ae9 35       		.uleb128 0x35
 6602 1aea 18020000 		.4byte	.LASF141
 6603 1aee 01       		.byte	0x1
 6604 1aef FA01     		.2byte	0x1fa
 6605 1af1 37       		.byte	0x37
 6606 1af2 11010000 		.4byte	0x111
 6607 1af6 00       		.byte	0
 6608 1af7 2D       		.uleb128 0x2d
 6609 1af8 601B0000 		.4byte	0x1b60
 6610 1afc C6020000 		.4byte	.LBI43
 6611 1b00 01       		.byte	.LVU347
ARM GAS  /tmp/ccMyq1Ea.s 			page 186


 6612 1b01 C6020000 		.4byte	.LBB43
 6613 1b05 DA020000 		.4byte	.LBE43
 6614 1b09 01       		.byte	0x1
 6615 1b0a FD01     		.2byte	0x1fd
 6616 1b0c 03       		.byte	0x3
 6617 1b0d 3E1B0000 		.4byte	0x1b3e
 6618 1b11 33       		.uleb128 0x33
 6619 1b12 6F1B0000 		.4byte	0x1b6f
 6620 1b16 49150000 		.4byte	.LLST49
 6621 1b1a 45150000 		.4byte	.LVUS49
 6622 1b1e 2F       		.uleb128 0x2f
 6623 1b1f DA020000 		.4byte	.LVL97
 6624 1b23 E8160000 		.4byte	0x16e8
 6625 1b27 1D       		.uleb128 0x1d
 6626 1b28 01       		.byte	0x1
 6627 1b29 50       		.byte	0x50
 6628 1b2a 02       		.byte	0x2
 6629 1b2b 74       		.byte	0x74
 6630 1b2c 00       		.sleb128 0
 6631 1b2d 1D       		.uleb128 0x1d
 6632 1b2e 01       		.byte	0x1
 6633 1b2f 51       		.byte	0x51
 6634 1b30 01       		.byte	0x1
 6635 1b31 30       		.byte	0x30
 6636 1b32 1D       		.uleb128 0x1d
 6637 1b33 01       		.byte	0x1
 6638 1b34 52       		.byte	0x52
 6639 1b35 01       		.byte	0x1
 6640 1b36 30       		.byte	0x30
 6641 1b37 1D       		.uleb128 0x1d
 6642 1b38 01       		.byte	0x1
 6643 1b39 53       		.byte	0x53
 6644 1b3a 01       		.byte	0x1
 6645 1b3b 30       		.byte	0x30
 6646 1b3c 00       		.byte	0
 6647 1b3d 00       		.byte	0
 6648 1b3e 2F       		.uleb128 0x2f
 6649 1b3f C6020000 		.4byte	.LVL96
 6650 1b43 CE1B0000 		.4byte	0x1bce
 6651 1b47 1D       		.uleb128 0x1d
 6652 1b48 01       		.byte	0x1
 6653 1b49 50       		.byte	0x50
 6654 1b4a 01       		.byte	0x1
 6655 1b4b 31       		.byte	0x31
 6656 1b4c 1D       		.uleb128 0x1d
 6657 1b4d 01       		.byte	0x1
 6658 1b4e 51       		.byte	0x51
 6659 1b4f 01       		.byte	0x1
 6660 1b50 30       		.byte	0x30
 6661 1b51 1D       		.uleb128 0x1d
 6662 1b52 01       		.byte	0x1
 6663 1b53 52       		.byte	0x52
 6664 1b54 09       		.byte	0x9
 6665 1b55 F3       		.byte	0xf3
 6666 1b56 03       		.uleb128 0x3
 6667 1b57 F5       		.byte	0xf5
 6668 1b58 00       		.uleb128 0
ARM GAS  /tmp/ccMyq1Ea.s 			page 187


 6669 1b59 25       		.uleb128 0x25
 6670 1b5a F7       		.byte	0xf7
 6671 1b5b 33       		.uleb128 0x33
 6672 1b5c F7       		.byte	0xf7
 6673 1b5d 00       		.uleb128 0
 6674 1b5e 00       		.byte	0
 6675 1b5f 00       		.byte	0
 6676 1b60 36       		.uleb128 0x36
 6677 1b61 D3050000 		.4byte	.LASF143
 6678 1b65 01       		.byte	0x1
 6679 1b66 D901     		.2byte	0x1d9
 6680 1b68 0E       		.byte	0xe
 6681 1b69 01       		.byte	0x1
 6682 1b6a 01       		.byte	0x1
 6683 1b6b 7D1B0000 		.4byte	0x1b7d
 6684 1b6f 21       		.uleb128 0x21
 6685 1b70 4C020000 		.4byte	.LASF142
 6686 1b74 01       		.byte	0x1
 6687 1b75 D901     		.2byte	0x1d9
 6688 1b77 2B       		.byte	0x2b
 6689 1b78 9D060000 		.4byte	0x69d
 6690 1b7c 00       		.byte	0
 6691 1b7d 36       		.uleb128 0x36
 6692 1b7e F2010000 		.4byte	.LASF144
 6693 1b82 01       		.byte	0x1
 6694 1b83 AD01     		.2byte	0x1ad
 6695 1b85 0D       		.byte	0xd
 6696 1b86 01       		.byte	0x1
 6697 1b87 01       		.byte	0x1
 6698 1b88 CE1B0000 		.4byte	0x1bce
 6699 1b8c 21       		.uleb128 0x21
 6700 1b8d 1A070000 		.4byte	.LASF145
 6701 1b91 01       		.byte	0x1
 6702 1b92 AD01     		.2byte	0x1ad
 6703 1b94 36       		.byte	0x36
 6704 1b95 11010000 		.4byte	0x111
 6705 1b99 21       		.uleb128 0x21
 6706 1b9a 7D040000 		.4byte	.LASF48
 6707 1b9e 01       		.byte	0x1
 6708 1b9f AD01     		.2byte	0x1ad
 6709 1ba1 57       		.byte	0x57
 6710 1ba2 11010000 		.4byte	0x111
 6711 1ba6 21       		.uleb128 0x21
 6712 1ba7 F1050000 		.4byte	.LASF146
 6713 1bab 01       		.byte	0x1
 6714 1bac AD01     		.2byte	0x1ad
 6715 1bae 6C       		.byte	0x6c
 6716 1baf 27010000 		.4byte	0x127
 6717 1bb3 21       		.uleb128 0x21
 6718 1bb4 C2060000 		.4byte	.LASF52
 6719 1bb8 01       		.byte	0x1
 6720 1bb9 AD01     		.2byte	0x1ad
 6721 1bbb 8B       		.byte	0x8b
 6722 1bbc DE000000 		.4byte	0xde
 6723 1bc0 21       		.uleb128 0x21
 6724 1bc1 4C020000 		.4byte	.LASF142
 6725 1bc5 01       		.byte	0x1
ARM GAS  /tmp/ccMyq1Ea.s 			page 188


 6726 1bc6 AD01     		.2byte	0x1ad
 6727 1bc8 A1       		.byte	0xa1
 6728 1bc9 9D060000 		.4byte	0x69d
 6729 1bcd 00       		.byte	0
 6730 1bce 29       		.uleb128 0x29
 6731 1bcf 01       		.byte	0x1
 6732 1bd0 8C050000 		.4byte	.LASF147
 6733 1bd4 01       		.byte	0x1
 6734 1bd5 7001     		.2byte	0x170
 6735 1bd7 10       		.byte	0x10
 6736 1bd8 01       		.byte	0x1
 6737 1bd9 8C020000 		.4byte	0x28c
 6738 1bdd 7A010000 		.4byte	.LFB6
 6739 1be1 AE010000 		.4byte	.LFE6
 6740 1be5 67150000 		.4byte	.LLST20
 6741 1be9 01       		.byte	0x1
 6742 1bea EF1C0000 		.4byte	0x1cef
 6743 1bee 19       		.uleb128 0x19
 6744 1bef 1A070000 		.4byte	.LASF145
 6745 1bf3 01       		.byte	0x1
 6746 1bf4 7001     		.2byte	0x170
 6747 1bf6 37       		.byte	0x37
 6748 1bf7 11010000 		.4byte	0x111
 6749 1bfb 8B150000 		.4byte	.LLST21
 6750 1bff 87150000 		.4byte	.LVUS21
 6751 1c03 19       		.uleb128 0x19
 6752 1c04 7D040000 		.4byte	.LASF48
 6753 1c08 01       		.byte	0x1
 6754 1c09 7001     		.2byte	0x170
 6755 1c0b 58       		.byte	0x58
 6756 1c0c 11010000 		.4byte	0x111
 6757 1c10 AD150000 		.4byte	.LLST22
 6758 1c14 A9150000 		.4byte	.LVUS22
 6759 1c18 19       		.uleb128 0x19
 6760 1c19 C2060000 		.4byte	.LASF52
 6761 1c1d 01       		.byte	0x1
 6762 1c1e 7001     		.2byte	0x170
 6763 1c20 72       		.byte	0x72
 6764 1c21 DE000000 		.4byte	0xde
 6765 1c25 D1150000 		.4byte	.LLST23
 6766 1c29 CB150000 		.4byte	.LVUS23
 6767 1c2d 1A       		.uleb128 0x1a
 6768 1c2e 4C020000 		.4byte	.LASF142
 6769 1c32 01       		.byte	0x1
 6770 1c33 7201     		.2byte	0x172
 6771 1c35 0B       		.byte	0xb
 6772 1c36 9D060000 		.4byte	0x69d
 6773 1c3a 09160000 		.4byte	.LLST24
 6774 1c3e 03160000 		.4byte	.LVUS24
 6775 1c42 1A       		.uleb128 0x1a
 6776 1c43 E6070000 		.4byte	.LASF148
 6777 1c47 01       		.byte	0x1
 6778 1c48 7301     		.2byte	0x173
 6779 1c4a 09       		.byte	0x9
 6780 1c4b 3A000000 		.4byte	0x3a
 6781 1c4f 3A160000 		.4byte	.LLST25
 6782 1c53 32160000 		.4byte	.LVUS25
ARM GAS  /tmp/ccMyq1Ea.s 			page 189


 6783 1c57 1A       		.uleb128 0x1a
 6784 1c58 F1050000 		.4byte	.LASF146
 6785 1c5c 01       		.byte	0x1
 6786 1c5d 7401     		.2byte	0x174
 6787 1c5f 0B       		.byte	0xb
 6788 1c60 27010000 		.4byte	0x127
 6789 1c64 87160000 		.4byte	.LLST26
 6790 1c68 7B160000 		.4byte	.LVUS26
 6791 1c6c 2A       		.uleb128 0x2a
 6792 1c6d 7D1B0000 		.4byte	0x1b7d
 6793 1c71 8E010000 		.4byte	.LBI29
 6794 1c75 03       		.byte	.LVU205
 6795 1c76 30000000 		.4byte	.Ldebug_ranges0+0x30
 6796 1c7a 01       		.byte	0x1
 6797 1c7b 9F01     		.2byte	0x19f
 6798 1c7d 04       		.byte	0x4
 6799 1c7e D91C0000 		.4byte	0x1cd9
 6800 1c82 33       		.uleb128 0x33
 6801 1c83 C01B0000 		.4byte	0x1bc0
 6802 1c87 E3160000 		.4byte	.LLST27
 6803 1c8b DD160000 		.4byte	.LVUS27
 6804 1c8f 33       		.uleb128 0x33
 6805 1c90 B31B0000 		.4byte	0x1bb3
 6806 1c94 10170000 		.4byte	.LLST28
 6807 1c98 0C170000 		.4byte	.LVUS28
 6808 1c9c 33       		.uleb128 0x33
 6809 1c9d A61B0000 		.4byte	0x1ba6
 6810 1ca1 38170000 		.4byte	.LLST29
 6811 1ca5 2E170000 		.4byte	.LVUS29
 6812 1ca9 33       		.uleb128 0x33
 6813 1caa 991B0000 		.4byte	0x1b99
 6814 1cae 87170000 		.4byte	.LLST30
 6815 1cb2 83170000 		.4byte	.LVUS30
 6816 1cb6 33       		.uleb128 0x33
 6817 1cb7 8C1B0000 		.4byte	0x1b8c
 6818 1cbb A9170000 		.4byte	.LLST31
 6819 1cbf A5170000 		.4byte	.LVUS31
 6820 1cc3 2F       		.uleb128 0x2f
 6821 1cc4 A2010000 		.4byte	.LVL57
 6822 1cc8 EF1C0000 		.4byte	0x1cef
 6823 1ccc 1D       		.uleb128 0x1d
 6824 1ccd 01       		.byte	0x1
 6825 1cce 50       		.byte	0x50
 6826 1ccf 02       		.byte	0x2
 6827 1cd0 74       		.byte	0x74
 6828 1cd1 00       		.sleb128 0
 6829 1cd2 1D       		.uleb128 0x1d
 6830 1cd3 01       		.byte	0x1
 6831 1cd4 51       		.byte	0x51
 6832 1cd5 01       		.byte	0x1
 6833 1cd6 31       		.byte	0x31
 6834 1cd7 00       		.byte	0
 6835 1cd8 00       		.byte	0
 6836 1cd9 2F       		.uleb128 0x2f
 6837 1cda 8A010000 		.4byte	.LVL53
 6838 1cde 78050000 		.4byte	0x578
 6839 1ce2 1D       		.uleb128 0x1d
ARM GAS  /tmp/ccMyq1Ea.s 			page 190


 6840 1ce3 01       		.byte	0x1
 6841 1ce4 50       		.byte	0x50
 6842 1ce5 07       		.byte	0x7
 6843 1ce6 75       		.byte	0x75
 6844 1ce7 00       		.sleb128 0
 6845 1ce8 76       		.byte	0x76
 6846 1ce9 00       		.sleb128 0
 6847 1cea 1E       		.byte	0x1e
 6848 1ceb 23       		.byte	0x23
 6849 1cec 50       		.uleb128 0x50
 6850 1ced 00       		.byte	0
 6851 1cee 00       		.byte	0
 6852 1cef 37       		.uleb128 0x37
 6853 1cf0 01       		.byte	0x1
 6854 1cf1 99090000 		.4byte	.LASF149
 6855 1cf5 01       		.byte	0x1
 6856 1cf6 FF       		.byte	0xff
 6857 1cf7 0C       		.byte	0xc
 6858 1cf8 01       		.byte	0x1
 6859 1cf9 EF000000 		.4byte	0xef
 6860 1cfd 10010000 		.4byte	.LFB5
 6861 1d01 7A010000 		.4byte	.LFE5
 6862 1d05 C7170000 		.4byte	.LLST16
 6863 1d09 01       		.byte	0x1
 6864 1d0a 961D0000 		.4byte	0x1d96
 6865 1d0e 38       		.uleb128 0x38
 6866 1d0f 45020000 		.4byte	.LASF61
 6867 1d13 01       		.byte	0x1
 6868 1d14 FF       		.byte	0xff
 6869 1d15 2E       		.byte	0x2e
 6870 1d16 8C020000 		.4byte	0x28c
 6871 1d1a EB170000 		.4byte	.LLST17
 6872 1d1e E7170000 		.4byte	.LVUS17
 6873 1d22 38       		.uleb128 0x38
 6874 1d23 33060000 		.4byte	.LASF139
 6875 1d27 01       		.byte	0x1
 6876 1d28 FF       		.byte	0xff
 6877 1d29 41       		.byte	0x41
 6878 1d2a EF000000 		.4byte	0xef
 6879 1d2e 0D180000 		.4byte	.LLST18
 6880 1d32 09180000 		.4byte	.LVUS18
 6881 1d36 1A       		.uleb128 0x1a
 6882 1d37 75080000 		.4byte	.LASF89
 6883 1d3b 01       		.byte	0x1
 6884 1d3c 0101     		.2byte	0x101
 6885 1d3e 11       		.byte	0x11
 6886 1d3f A3060000 		.4byte	0x6a3
 6887 1d43 2F180000 		.4byte	.LLST19
 6888 1d47 2B180000 		.4byte	.LVUS19
 6889 1d4b 1B       		.uleb128 0x1b
 6890 1d4c 1A010000 		.4byte	.LVL44
 6891 1d50 D7050000 		.4byte	0x5d7
 6892 1d54 1C       		.uleb128 0x1c
 6893 1d55 4A010000 		.4byte	.LVL45
 6894 1d59 B2050000 		.4byte	0x5b2
 6895 1d5d 681D0000 		.4byte	0x1d68
 6896 1d61 1D       		.uleb128 0x1d
ARM GAS  /tmp/ccMyq1Ea.s 			page 191


 6897 1d62 01       		.byte	0x1
 6898 1d63 50       		.byte	0x50
 6899 1d64 02       		.byte	0x2
 6900 1d65 74       		.byte	0x74
 6901 1d66 10       		.sleb128 16
 6902 1d67 00       		.byte	0
 6903 1d68 1B       		.uleb128 0x1b
 6904 1d69 64010000 		.4byte	.LVL46
 6905 1d6d 91050000 		.4byte	0x591
 6906 1d71 1C       		.uleb128 0x1c
 6907 1d72 70010000 		.4byte	.LVL48
 6908 1d76 9C050000 		.4byte	0x59c
 6909 1d7a 851D0000 		.4byte	0x1d85
 6910 1d7e 1D       		.uleb128 0x1d
 6911 1d7f 01       		.byte	0x1
 6912 1d80 50       		.byte	0x50
 6913 1d81 02       		.byte	0x2
 6914 1d82 74       		.byte	0x74
 6915 1d83 10       		.sleb128 16
 6916 1d84 00       		.byte	0
 6917 1d85 2F       		.uleb128 0x2f
 6918 1d86 78010000 		.4byte	.LVL49
 6919 1d8a 9C050000 		.4byte	0x59c
 6920 1d8e 1D       		.uleb128 0x1d
 6921 1d8f 01       		.byte	0x1
 6922 1d90 50       		.byte	0x50
 6923 1d91 02       		.byte	0x2
 6924 1d92 74       		.byte	0x74
 6925 1d93 24       		.sleb128 36
 6926 1d94 00       		.byte	0
 6927 1d95 00       		.byte	0
 6928 1d96 39       		.uleb128 0x39
 6929 1d97 14040000 		.4byte	.LASF150
 6930 1d9b 02       		.byte	0x2
 6931 1d9c E3       		.byte	0xe3
 6932 1d9d 1E       		.byte	0x1e
 6933 1d9e 01       		.byte	0x1
 6934 1d9f 03       		.byte	0x3
 6935 1da0 B11D0000 		.4byte	0x1db1
 6936 1da4 3A       		.uleb128 0x3a
 6937 1da5 93060000 		.4byte	.LASF151
 6938 1da9 02       		.byte	0x2
 6939 1daa E3       		.byte	0xe3
 6940 1dab 38       		.byte	0x38
 6941 1dac E3000000 		.4byte	0xe3
 6942 1db0 00       		.byte	0
 6943 1db1 3B       		.uleb128 0x3b
 6944 1db2 B2050000 		.4byte	.LASF152
 6945 1db6 02       		.byte	0x2
 6946 1db7 CF       		.byte	0xcf
 6947 1db8 22       		.byte	0x22
 6948 1db9 01       		.byte	0x1
 6949 1dba E3000000 		.4byte	0xe3
 6950 1dbe 03       		.byte	0x3
 6951 1dbf DC1D0000 		.4byte	0x1ddc
 6952 1dc3 3C       		.uleb128 0x3c
 6953 1dc4 33020000 		.4byte	.LASF153
ARM GAS  /tmp/ccMyq1Ea.s 			page 192


 6954 1dc8 02       		.byte	0x2
 6955 1dc9 D1       		.byte	0xd1
 6956 1dca 0A       		.byte	0xa
 6957 1dcb E3000000 		.4byte	0xe3
 6958 1dcf 3C       		.uleb128 0x3c
 6959 1dd0 F5040000 		.4byte	.LASF154
 6960 1dd4 02       		.byte	0x2
 6961 1dd5 D1       		.byte	0xd1
 6962 1dd6 1D       		.byte	0x1d
 6963 1dd7 E3000000 		.4byte	0xe3
 6964 1ddb 00       		.byte	0
 6965 1ddc 3D       		.uleb128 0x3d
 6966 1ddd 01       		.byte	0x1
 6967 1dde 01       		.byte	0x1
 6968 1ddf E5090000 		.4byte	.LASF69
 6969 1de3 92010000 		.4byte	.LASF156
 6970 1de7 0B       		.byte	0xb
 6971 1de8 00       		.byte	0
 6972 1de9 00       		.byte	0
 6973              		.section	.debug_abbrev,"",%progbits
 6974              	.Ldebug_abbrev0:
 6975 0000 01       		.uleb128 0x1
 6976 0001 11       		.uleb128 0x11
 6977 0002 01       		.byte	0x1
 6978 0003 25       		.uleb128 0x25
 6979 0004 0E       		.uleb128 0xe
 6980 0005 13       		.uleb128 0x13
 6981 0006 0B       		.uleb128 0xb
 6982 0007 03       		.uleb128 0x3
 6983 0008 0E       		.uleb128 0xe
 6984 0009 1B       		.uleb128 0x1b
 6985 000a 0E       		.uleb128 0xe
 6986 000b 11       		.uleb128 0x11
 6987 000c 01       		.uleb128 0x1
 6988 000d 12       		.uleb128 0x12
 6989 000e 01       		.uleb128 0x1
 6990 000f 10       		.uleb128 0x10
 6991 0010 06       		.uleb128 0x6
 6992 0011 00       		.byte	0
 6993 0012 00       		.byte	0
 6994 0013 02       		.uleb128 0x2
 6995 0014 24       		.uleb128 0x24
 6996 0015 00       		.byte	0
 6997 0016 0B       		.uleb128 0xb
 6998 0017 0B       		.uleb128 0xb
 6999 0018 3E       		.uleb128 0x3e
 7000 0019 0B       		.uleb128 0xb
 7001 001a 03       		.uleb128 0x3
 7002 001b 0E       		.uleb128 0xe
 7003 001c 00       		.byte	0
 7004 001d 00       		.byte	0
 7005 001e 03       		.uleb128 0x3
 7006 001f 16       		.uleb128 0x16
 7007 0020 00       		.byte	0
 7008 0021 03       		.uleb128 0x3
 7009 0022 0E       		.uleb128 0xe
 7010 0023 3A       		.uleb128 0x3a
ARM GAS  /tmp/ccMyq1Ea.s 			page 193


 7011 0024 0B       		.uleb128 0xb
 7012 0025 3B       		.uleb128 0x3b
 7013 0026 0B       		.uleb128 0xb
 7014 0027 39       		.uleb128 0x39
 7015 0028 0B       		.uleb128 0xb
 7016 0029 49       		.uleb128 0x49
 7017 002a 13       		.uleb128 0x13
 7018 002b 00       		.byte	0
 7019 002c 00       		.byte	0
 7020 002d 04       		.uleb128 0x4
 7021 002e 24       		.uleb128 0x24
 7022 002f 00       		.byte	0
 7023 0030 0B       		.uleb128 0xb
 7024 0031 0B       		.uleb128 0xb
 7025 0032 3E       		.uleb128 0x3e
 7026 0033 0B       		.uleb128 0xb
 7027 0034 03       		.uleb128 0x3
 7028 0035 08       		.uleb128 0x8
 7029 0036 00       		.byte	0
 7030 0037 00       		.byte	0
 7031 0038 05       		.uleb128 0x5
 7032 0039 0F       		.uleb128 0xf
 7033 003a 00       		.byte	0
 7034 003b 0B       		.uleb128 0xb
 7035 003c 0B       		.uleb128 0xb
 7036 003d 00       		.byte	0
 7037 003e 00       		.byte	0
 7038 003f 06       		.uleb128 0x6
 7039 0040 26       		.uleb128 0x26
 7040 0041 00       		.byte	0
 7041 0042 49       		.uleb128 0x49
 7042 0043 13       		.uleb128 0x13
 7043 0044 00       		.byte	0
 7044 0045 00       		.byte	0
 7045 0046 07       		.uleb128 0x7
 7046 0047 0F       		.uleb128 0xf
 7047 0048 00       		.byte	0
 7048 0049 0B       		.uleb128 0xb
 7049 004a 0B       		.uleb128 0xb
 7050 004b 49       		.uleb128 0x49
 7051 004c 13       		.uleb128 0x13
 7052 004d 00       		.byte	0
 7053 004e 00       		.byte	0
 7054 004f 08       		.uleb128 0x8
 7055 0050 26       		.uleb128 0x26
 7056 0051 00       		.byte	0
 7057 0052 00       		.byte	0
 7058 0053 00       		.byte	0
 7059 0054 09       		.uleb128 0x9
 7060 0055 35       		.uleb128 0x35
 7061 0056 00       		.byte	0
 7062 0057 49       		.uleb128 0x49
 7063 0058 13       		.uleb128 0x13
 7064 0059 00       		.byte	0
 7065 005a 00       		.byte	0
 7066 005b 0A       		.uleb128 0xa
 7067 005c 13       		.uleb128 0x13
ARM GAS  /tmp/ccMyq1Ea.s 			page 194


 7068 005d 01       		.byte	0x1
 7069 005e 03       		.uleb128 0x3
 7070 005f 0E       		.uleb128 0xe
 7071 0060 0B       		.uleb128 0xb
 7072 0061 0B       		.uleb128 0xb
 7073 0062 3A       		.uleb128 0x3a
 7074 0063 0B       		.uleb128 0xb
 7075 0064 3B       		.uleb128 0x3b
 7076 0065 0B       		.uleb128 0xb
 7077 0066 39       		.uleb128 0x39
 7078 0067 0B       		.uleb128 0xb
 7079 0068 01       		.uleb128 0x1
 7080 0069 13       		.uleb128 0x13
 7081 006a 00       		.byte	0
 7082 006b 00       		.byte	0
 7083 006c 0B       		.uleb128 0xb
 7084 006d 0D       		.uleb128 0xd
 7085 006e 00       		.byte	0
 7086 006f 03       		.uleb128 0x3
 7087 0070 0E       		.uleb128 0xe
 7088 0071 3A       		.uleb128 0x3a
 7089 0072 0B       		.uleb128 0xb
 7090 0073 3B       		.uleb128 0x3b
 7091 0074 0B       		.uleb128 0xb
 7092 0075 39       		.uleb128 0x39
 7093 0076 0B       		.uleb128 0xb
 7094 0077 49       		.uleb128 0x49
 7095 0078 13       		.uleb128 0x13
 7096 0079 38       		.uleb128 0x38
 7097 007a 0A       		.uleb128 0xa
 7098 007b 00       		.byte	0
 7099 007c 00       		.byte	0
 7100 007d 0C       		.uleb128 0xc
 7101 007e 13       		.uleb128 0x13
 7102 007f 00       		.byte	0
 7103 0080 03       		.uleb128 0x3
 7104 0081 0E       		.uleb128 0xe
 7105 0082 3C       		.uleb128 0x3c
 7106 0083 0C       		.uleb128 0xc
 7107 0084 00       		.byte	0
 7108 0085 00       		.byte	0
 7109 0086 0D       		.uleb128 0xd
 7110 0087 0D       		.uleb128 0xd
 7111 0088 00       		.byte	0
 7112 0089 03       		.uleb128 0x3
 7113 008a 08       		.uleb128 0x8
 7114 008b 3A       		.uleb128 0x3a
 7115 008c 0B       		.uleb128 0xb
 7116 008d 3B       		.uleb128 0x3b
 7117 008e 0B       		.uleb128 0xb
 7118 008f 39       		.uleb128 0x39
 7119 0090 0B       		.uleb128 0xb
 7120 0091 49       		.uleb128 0x49
 7121 0092 13       		.uleb128 0x13
 7122 0093 38       		.uleb128 0x38
 7123 0094 0A       		.uleb128 0xa
 7124 0095 00       		.byte	0
ARM GAS  /tmp/ccMyq1Ea.s 			page 195


 7125 0096 00       		.byte	0
 7126 0097 0E       		.uleb128 0xe
 7127 0098 17       		.uleb128 0x17
 7128 0099 01       		.byte	0x1
 7129 009a 0B       		.uleb128 0xb
 7130 009b 0B       		.uleb128 0xb
 7131 009c 3A       		.uleb128 0x3a
 7132 009d 0B       		.uleb128 0xb
 7133 009e 3B       		.uleb128 0x3b
 7134 009f 0B       		.uleb128 0xb
 7135 00a0 39       		.uleb128 0x39
 7136 00a1 0B       		.uleb128 0xb
 7137 00a2 01       		.uleb128 0x1
 7138 00a3 13       		.uleb128 0x13
 7139 00a4 00       		.byte	0
 7140 00a5 00       		.byte	0
 7141 00a6 0F       		.uleb128 0xf
 7142 00a7 0D       		.uleb128 0xd
 7143 00a8 00       		.byte	0
 7144 00a9 03       		.uleb128 0x3
 7145 00aa 0E       		.uleb128 0xe
 7146 00ab 3A       		.uleb128 0x3a
 7147 00ac 0B       		.uleb128 0xb
 7148 00ad 3B       		.uleb128 0x3b
 7149 00ae 0B       		.uleb128 0xb
 7150 00af 39       		.uleb128 0x39
 7151 00b0 0B       		.uleb128 0xb
 7152 00b1 49       		.uleb128 0x49
 7153 00b2 13       		.uleb128 0x13
 7154 00b3 00       		.byte	0
 7155 00b4 00       		.byte	0
 7156 00b5 10       		.uleb128 0x10
 7157 00b6 2E       		.uleb128 0x2e
 7158 00b7 01       		.byte	0x1
 7159 00b8 3F       		.uleb128 0x3f
 7160 00b9 0C       		.uleb128 0xc
 7161 00ba 03       		.uleb128 0x3
 7162 00bb 0E       		.uleb128 0xe
 7163 00bc 3A       		.uleb128 0x3a
 7164 00bd 0B       		.uleb128 0xb
 7165 00be 3B       		.uleb128 0x3b
 7166 00bf 05       		.uleb128 0x5
 7167 00c0 39       		.uleb128 0x39
 7168 00c1 0B       		.uleb128 0xb
 7169 00c2 27       		.uleb128 0x27
 7170 00c3 0C       		.uleb128 0xc
 7171 00c4 3C       		.uleb128 0x3c
 7172 00c5 0C       		.uleb128 0xc
 7173 00c6 01       		.uleb128 0x1
 7174 00c7 13       		.uleb128 0x13
 7175 00c8 00       		.byte	0
 7176 00c9 00       		.byte	0
 7177 00ca 11       		.uleb128 0x11
 7178 00cb 05       		.uleb128 0x5
 7179 00cc 00       		.byte	0
 7180 00cd 49       		.uleb128 0x49
 7181 00ce 13       		.uleb128 0x13
ARM GAS  /tmp/ccMyq1Ea.s 			page 196


 7182 00cf 00       		.byte	0
 7183 00d0 00       		.byte	0
 7184 00d1 12       		.uleb128 0x12
 7185 00d2 2E       		.uleb128 0x2e
 7186 00d3 01       		.byte	0x1
 7187 00d4 3F       		.uleb128 0x3f
 7188 00d5 0C       		.uleb128 0xc
 7189 00d6 03       		.uleb128 0x3
 7190 00d7 0E       		.uleb128 0xe
 7191 00d8 3A       		.uleb128 0x3a
 7192 00d9 0B       		.uleb128 0xb
 7193 00da 3B       		.uleb128 0x3b
 7194 00db 0B       		.uleb128 0xb
 7195 00dc 39       		.uleb128 0x39
 7196 00dd 0B       		.uleb128 0xb
 7197 00de 27       		.uleb128 0x27
 7198 00df 0C       		.uleb128 0xc
 7199 00e0 3C       		.uleb128 0x3c
 7200 00e1 0C       		.uleb128 0xc
 7201 00e2 01       		.uleb128 0x1
 7202 00e3 13       		.uleb128 0x13
 7203 00e4 00       		.byte	0
 7204 00e5 00       		.byte	0
 7205 00e6 13       		.uleb128 0x13
 7206 00e7 2E       		.uleb128 0x2e
 7207 00e8 01       		.byte	0x1
 7208 00e9 3F       		.uleb128 0x3f
 7209 00ea 0C       		.uleb128 0xc
 7210 00eb 03       		.uleb128 0x3
 7211 00ec 0E       		.uleb128 0xe
 7212 00ed 3A       		.uleb128 0x3a
 7213 00ee 0B       		.uleb128 0xb
 7214 00ef 3B       		.uleb128 0x3b
 7215 00f0 05       		.uleb128 0x5
 7216 00f1 39       		.uleb128 0x39
 7217 00f2 0B       		.uleb128 0xb
 7218 00f3 27       		.uleb128 0x27
 7219 00f4 0C       		.uleb128 0xc
 7220 00f5 49       		.uleb128 0x49
 7221 00f6 13       		.uleb128 0x13
 7222 00f7 3C       		.uleb128 0x3c
 7223 00f8 0C       		.uleb128 0xc
 7224 00f9 01       		.uleb128 0x1
 7225 00fa 13       		.uleb128 0x13
 7226 00fb 00       		.byte	0
 7227 00fc 00       		.byte	0
 7228 00fd 14       		.uleb128 0x14
 7229 00fe 2E       		.uleb128 0x2e
 7230 00ff 00       		.byte	0
 7231 0100 3F       		.uleb128 0x3f
 7232 0101 0C       		.uleb128 0xc
 7233 0102 03       		.uleb128 0x3
 7234 0103 0E       		.uleb128 0xe
 7235 0104 3A       		.uleb128 0x3a
 7236 0105 0B       		.uleb128 0xb
 7237 0106 3B       		.uleb128 0x3b
 7238 0107 05       		.uleb128 0x5
ARM GAS  /tmp/ccMyq1Ea.s 			page 197


 7239 0108 39       		.uleb128 0x39
 7240 0109 0B       		.uleb128 0xb
 7241 010a 27       		.uleb128 0x27
 7242 010b 0C       		.uleb128 0xc
 7243 010c 49       		.uleb128 0x49
 7244 010d 13       		.uleb128 0x13
 7245 010e 3C       		.uleb128 0x3c
 7246 010f 0C       		.uleb128 0xc
 7247 0110 00       		.byte	0
 7248 0111 00       		.byte	0
 7249 0112 15       		.uleb128 0x15
 7250 0113 2E       		.uleb128 0x2e
 7251 0114 00       		.byte	0
 7252 0115 3F       		.uleb128 0x3f
 7253 0116 0C       		.uleb128 0xc
 7254 0117 03       		.uleb128 0x3
 7255 0118 0E       		.uleb128 0xe
 7256 0119 3A       		.uleb128 0x3a
 7257 011a 0B       		.uleb128 0xb
 7258 011b 3B       		.uleb128 0x3b
 7259 011c 05       		.uleb128 0x5
 7260 011d 39       		.uleb128 0x39
 7261 011e 0B       		.uleb128 0xb
 7262 011f 27       		.uleb128 0x27
 7263 0120 0C       		.uleb128 0xc
 7264 0121 3C       		.uleb128 0x3c
 7265 0122 0C       		.uleb128 0xc
 7266 0123 00       		.byte	0
 7267 0124 00       		.byte	0
 7268 0125 16       		.uleb128 0x16
 7269 0126 2E       		.uleb128 0x2e
 7270 0127 01       		.byte	0x1
 7271 0128 3F       		.uleb128 0x3f
 7272 0129 0C       		.uleb128 0xc
 7273 012a 03       		.uleb128 0x3
 7274 012b 0E       		.uleb128 0xe
 7275 012c 3A       		.uleb128 0x3a
 7276 012d 0B       		.uleb128 0xb
 7277 012e 3B       		.uleb128 0x3b
 7278 012f 0B       		.uleb128 0xb
 7279 0130 39       		.uleb128 0x39
 7280 0131 0B       		.uleb128 0xb
 7281 0132 27       		.uleb128 0x27
 7282 0133 0C       		.uleb128 0xc
 7283 0134 49       		.uleb128 0x49
 7284 0135 13       		.uleb128 0x13
 7285 0136 3C       		.uleb128 0x3c
 7286 0137 0C       		.uleb128 0xc
 7287 0138 01       		.uleb128 0x1
 7288 0139 13       		.uleb128 0x13
 7289 013a 00       		.byte	0
 7290 013b 00       		.byte	0
 7291 013c 17       		.uleb128 0x17
 7292 013d 2E       		.uleb128 0x2e
 7293 013e 00       		.byte	0
 7294 013f 3F       		.uleb128 0x3f
 7295 0140 0C       		.uleb128 0xc
ARM GAS  /tmp/ccMyq1Ea.s 			page 198


 7296 0141 03       		.uleb128 0x3
 7297 0142 0E       		.uleb128 0xe
 7298 0143 3A       		.uleb128 0x3a
 7299 0144 0B       		.uleb128 0xb
 7300 0145 3B       		.uleb128 0x3b
 7301 0146 0B       		.uleb128 0xb
 7302 0147 39       		.uleb128 0x39
 7303 0148 0B       		.uleb128 0xb
 7304 0149 27       		.uleb128 0x27
 7305 014a 0C       		.uleb128 0xc
 7306 014b 3C       		.uleb128 0x3c
 7307 014c 0C       		.uleb128 0xc
 7308 014d 00       		.byte	0
 7309 014e 00       		.byte	0
 7310 014f 18       		.uleb128 0x18
 7311 0150 2E       		.uleb128 0x2e
 7312 0151 01       		.byte	0x1
 7313 0152 3F       		.uleb128 0x3f
 7314 0153 0C       		.uleb128 0xc
 7315 0154 03       		.uleb128 0x3
 7316 0155 0E       		.uleb128 0xe
 7317 0156 3A       		.uleb128 0x3a
 7318 0157 0B       		.uleb128 0xb
 7319 0158 3B       		.uleb128 0x3b
 7320 0159 05       		.uleb128 0x5
 7321 015a 39       		.uleb128 0x39
 7322 015b 0B       		.uleb128 0xb
 7323 015c 27       		.uleb128 0x27
 7324 015d 0C       		.uleb128 0xc
 7325 015e 11       		.uleb128 0x11
 7326 015f 01       		.uleb128 0x1
 7327 0160 12       		.uleb128 0x12
 7328 0161 01       		.uleb128 0x1
 7329 0162 40       		.uleb128 0x40
 7330 0163 06       		.uleb128 0x6
 7331 0164 9742     		.uleb128 0x2117
 7332 0166 0C       		.uleb128 0xc
 7333 0167 01       		.uleb128 0x1
 7334 0168 13       		.uleb128 0x13
 7335 0169 00       		.byte	0
 7336 016a 00       		.byte	0
 7337 016b 19       		.uleb128 0x19
 7338 016c 05       		.uleb128 0x5
 7339 016d 00       		.byte	0
 7340 016e 03       		.uleb128 0x3
 7341 016f 0E       		.uleb128 0xe
 7342 0170 3A       		.uleb128 0x3a
 7343 0171 0B       		.uleb128 0xb
 7344 0172 3B       		.uleb128 0x3b
 7345 0173 05       		.uleb128 0x5
 7346 0174 39       		.uleb128 0x39
 7347 0175 0B       		.uleb128 0xb
 7348 0176 49       		.uleb128 0x49
 7349 0177 13       		.uleb128 0x13
 7350 0178 02       		.uleb128 0x2
 7351 0179 06       		.uleb128 0x6
 7352 017a B742     		.uleb128 0x2137
ARM GAS  /tmp/ccMyq1Ea.s 			page 199


 7353 017c 06       		.uleb128 0x6
 7354 017d 00       		.byte	0
 7355 017e 00       		.byte	0
 7356 017f 1A       		.uleb128 0x1a
 7357 0180 34       		.uleb128 0x34
 7358 0181 00       		.byte	0
 7359 0182 03       		.uleb128 0x3
 7360 0183 0E       		.uleb128 0xe
 7361 0184 3A       		.uleb128 0x3a
 7362 0185 0B       		.uleb128 0xb
 7363 0186 3B       		.uleb128 0x3b
 7364 0187 05       		.uleb128 0x5
 7365 0188 39       		.uleb128 0x39
 7366 0189 0B       		.uleb128 0xb
 7367 018a 49       		.uleb128 0x49
 7368 018b 13       		.uleb128 0x13
 7369 018c 02       		.uleb128 0x2
 7370 018d 06       		.uleb128 0x6
 7371 018e B742     		.uleb128 0x2137
 7372 0190 06       		.uleb128 0x6
 7373 0191 00       		.byte	0
 7374 0192 00       		.byte	0
 7375 0193 1B       		.uleb128 0x1b
 7376 0194 898201   		.uleb128 0x4109
 7377 0197 00       		.byte	0
 7378 0198 11       		.uleb128 0x11
 7379 0199 01       		.uleb128 0x1
 7380 019a 31       		.uleb128 0x31
 7381 019b 13       		.uleb128 0x13
 7382 019c 00       		.byte	0
 7383 019d 00       		.byte	0
 7384 019e 1C       		.uleb128 0x1c
 7385 019f 898201   		.uleb128 0x4109
 7386 01a2 01       		.byte	0x1
 7387 01a3 11       		.uleb128 0x11
 7388 01a4 01       		.uleb128 0x1
 7389 01a5 31       		.uleb128 0x31
 7390 01a6 13       		.uleb128 0x13
 7391 01a7 01       		.uleb128 0x1
 7392 01a8 13       		.uleb128 0x13
 7393 01a9 00       		.byte	0
 7394 01aa 00       		.byte	0
 7395 01ab 1D       		.uleb128 0x1d
 7396 01ac 8A8201   		.uleb128 0x410a
 7397 01af 00       		.byte	0
 7398 01b0 02       		.uleb128 0x2
 7399 01b1 0A       		.uleb128 0xa
 7400 01b2 9142     		.uleb128 0x2111
 7401 01b4 0A       		.uleb128 0xa
 7402 01b5 00       		.byte	0
 7403 01b6 00       		.byte	0
 7404 01b7 1E       		.uleb128 0x1e
 7405 01b8 898201   		.uleb128 0x4109
 7406 01bb 01       		.byte	0x1
 7407 01bc 11       		.uleb128 0x11
 7408 01bd 01       		.uleb128 0x1
 7409 01be 9542     		.uleb128 0x2115
ARM GAS  /tmp/ccMyq1Ea.s 			page 200


 7410 01c0 0C       		.uleb128 0xc
 7411 01c1 31       		.uleb128 0x31
 7412 01c2 13       		.uleb128 0x13
 7413 01c3 00       		.byte	0
 7414 01c4 00       		.byte	0
 7415 01c5 1F       		.uleb128 0x1f
 7416 01c6 2E       		.uleb128 0x2e
 7417 01c7 01       		.byte	0x1
 7418 01c8 3F       		.uleb128 0x3f
 7419 01c9 0C       		.uleb128 0xc
 7420 01ca 03       		.uleb128 0x3
 7421 01cb 0E       		.uleb128 0xe
 7422 01cc 3A       		.uleb128 0x3a
 7423 01cd 0B       		.uleb128 0xb
 7424 01ce 3B       		.uleb128 0x3b
 7425 01cf 05       		.uleb128 0x5
 7426 01d0 39       		.uleb128 0x39
 7427 01d1 0B       		.uleb128 0xb
 7428 01d2 27       		.uleb128 0x27
 7429 01d3 0C       		.uleb128 0xc
 7430 01d4 49       		.uleb128 0x49
 7431 01d5 13       		.uleb128 0x13
 7432 01d6 11       		.uleb128 0x11
 7433 01d7 01       		.uleb128 0x1
 7434 01d8 12       		.uleb128 0x12
 7435 01d9 01       		.uleb128 0x1
 7436 01da 40       		.uleb128 0x40
 7437 01db 0A       		.uleb128 0xa
 7438 01dc 9742     		.uleb128 0x2117
 7439 01de 0C       		.uleb128 0xc
 7440 01df 01       		.uleb128 0x1
 7441 01e0 13       		.uleb128 0x13
 7442 01e1 00       		.byte	0
 7443 01e2 00       		.byte	0
 7444 01e3 20       		.uleb128 0x20
 7445 01e4 2E       		.uleb128 0x2e
 7446 01e5 01       		.byte	0x1
 7447 01e6 03       		.uleb128 0x3
 7448 01e7 0E       		.uleb128 0xe
 7449 01e8 3A       		.uleb128 0x3a
 7450 01e9 0B       		.uleb128 0xb
 7451 01ea 3B       		.uleb128 0x3b
 7452 01eb 05       		.uleb128 0x5
 7453 01ec 39       		.uleb128 0x39
 7454 01ed 0B       		.uleb128 0xb
 7455 01ee 27       		.uleb128 0x27
 7456 01ef 0C       		.uleb128 0xc
 7457 01f0 49       		.uleb128 0x49
 7458 01f1 13       		.uleb128 0x13
 7459 01f2 20       		.uleb128 0x20
 7460 01f3 0B       		.uleb128 0xb
 7461 01f4 01       		.uleb128 0x1
 7462 01f5 13       		.uleb128 0x13
 7463 01f6 00       		.byte	0
 7464 01f7 00       		.byte	0
 7465 01f8 21       		.uleb128 0x21
 7466 01f9 05       		.uleb128 0x5
ARM GAS  /tmp/ccMyq1Ea.s 			page 201


 7467 01fa 00       		.byte	0
 7468 01fb 03       		.uleb128 0x3
 7469 01fc 0E       		.uleb128 0xe
 7470 01fd 3A       		.uleb128 0x3a
 7471 01fe 0B       		.uleb128 0xb
 7472 01ff 3B       		.uleb128 0x3b
 7473 0200 05       		.uleb128 0x5
 7474 0201 39       		.uleb128 0x39
 7475 0202 0B       		.uleb128 0xb
 7476 0203 49       		.uleb128 0x49
 7477 0204 13       		.uleb128 0x13
 7478 0205 00       		.byte	0
 7479 0206 00       		.byte	0
 7480 0207 22       		.uleb128 0x22
 7481 0208 34       		.uleb128 0x34
 7482 0209 00       		.byte	0
 7483 020a 03       		.uleb128 0x3
 7484 020b 0E       		.uleb128 0xe
 7485 020c 3A       		.uleb128 0x3a
 7486 020d 0B       		.uleb128 0xb
 7487 020e 3B       		.uleb128 0x3b
 7488 020f 05       		.uleb128 0x5
 7489 0210 39       		.uleb128 0x39
 7490 0211 0B       		.uleb128 0xb
 7491 0212 49       		.uleb128 0x49
 7492 0213 13       		.uleb128 0x13
 7493 0214 00       		.byte	0
 7494 0215 00       		.byte	0
 7495 0216 23       		.uleb128 0x23
 7496 0217 2E       		.uleb128 0x2e
 7497 0218 01       		.byte	0x1
 7498 0219 03       		.uleb128 0x3
 7499 021a 0E       		.uleb128 0xe
 7500 021b 3A       		.uleb128 0x3a
 7501 021c 0B       		.uleb128 0xb
 7502 021d 3B       		.uleb128 0x3b
 7503 021e 05       		.uleb128 0x5
 7504 021f 39       		.uleb128 0x39
 7505 0220 0B       		.uleb128 0xb
 7506 0221 27       		.uleb128 0x27
 7507 0222 0C       		.uleb128 0xc
 7508 0223 49       		.uleb128 0x49
 7509 0224 13       		.uleb128 0x13
 7510 0225 11       		.uleb128 0x11
 7511 0226 01       		.uleb128 0x1
 7512 0227 12       		.uleb128 0x12
 7513 0228 01       		.uleb128 0x1
 7514 0229 40       		.uleb128 0x40
 7515 022a 06       		.uleb128 0x6
 7516 022b 9742     		.uleb128 0x2117
 7517 022d 0C       		.uleb128 0xc
 7518 022e 01       		.uleb128 0x1
 7519 022f 13       		.uleb128 0x13
 7520 0230 00       		.byte	0
 7521 0231 00       		.byte	0
 7522 0232 24       		.uleb128 0x24
 7523 0233 2E       		.uleb128 0x2e
ARM GAS  /tmp/ccMyq1Ea.s 			page 202


 7524 0234 01       		.byte	0x1
 7525 0235 03       		.uleb128 0x3
 7526 0236 0E       		.uleb128 0xe
 7527 0237 3A       		.uleb128 0x3a
 7528 0238 0B       		.uleb128 0xb
 7529 0239 3B       		.uleb128 0x3b
 7530 023a 05       		.uleb128 0x5
 7531 023b 39       		.uleb128 0x39
 7532 023c 0B       		.uleb128 0xb
 7533 023d 27       		.uleb128 0x27
 7534 023e 0C       		.uleb128 0xc
 7535 023f 11       		.uleb128 0x11
 7536 0240 01       		.uleb128 0x1
 7537 0241 12       		.uleb128 0x12
 7538 0242 01       		.uleb128 0x1
 7539 0243 40       		.uleb128 0x40
 7540 0244 06       		.uleb128 0x6
 7541 0245 9742     		.uleb128 0x2117
 7542 0247 0C       		.uleb128 0xc
 7543 0248 01       		.uleb128 0x1
 7544 0249 13       		.uleb128 0x13
 7545 024a 00       		.byte	0
 7546 024b 00       		.byte	0
 7547 024c 25       		.uleb128 0x25
 7548 024d 0B       		.uleb128 0xb
 7549 024e 01       		.byte	0x1
 7550 024f 55       		.uleb128 0x55
 7551 0250 06       		.uleb128 0x6
 7552 0251 01       		.uleb128 0x1
 7553 0252 13       		.uleb128 0x13
 7554 0253 00       		.byte	0
 7555 0254 00       		.byte	0
 7556 0255 26       		.uleb128 0x26
 7557 0256 898201   		.uleb128 0x4109
 7558 0259 00       		.byte	0
 7559 025a 11       		.uleb128 0x11
 7560 025b 01       		.uleb128 0x1
 7561 025c 9542     		.uleb128 0x2115
 7562 025e 0C       		.uleb128 0xc
 7563 025f 31       		.uleb128 0x31
 7564 0260 13       		.uleb128 0x13
 7565 0261 00       		.byte	0
 7566 0262 00       		.byte	0
 7567 0263 27       		.uleb128 0x27
 7568 0264 2E       		.uleb128 0x2e
 7569 0265 01       		.byte	0x1
 7570 0266 3F       		.uleb128 0x3f
 7571 0267 0C       		.uleb128 0xc
 7572 0268 03       		.uleb128 0x3
 7573 0269 0E       		.uleb128 0xe
 7574 026a 3A       		.uleb128 0x3a
 7575 026b 0B       		.uleb128 0xb
 7576 026c 3B       		.uleb128 0x3b
 7577 026d 05       		.uleb128 0x5
 7578 026e 39       		.uleb128 0x39
 7579 026f 0B       		.uleb128 0xb
 7580 0270 27       		.uleb128 0x27
ARM GAS  /tmp/ccMyq1Ea.s 			page 203


 7581 0271 0C       		.uleb128 0xc
 7582 0272 11       		.uleb128 0x11
 7583 0273 01       		.uleb128 0x1
 7584 0274 12       		.uleb128 0x12
 7585 0275 01       		.uleb128 0x1
 7586 0276 40       		.uleb128 0x40
 7587 0277 0A       		.uleb128 0xa
 7588 0278 9742     		.uleb128 0x2117
 7589 027a 0C       		.uleb128 0xc
 7590 027b 01       		.uleb128 0x1
 7591 027c 13       		.uleb128 0x13
 7592 027d 00       		.byte	0
 7593 027e 00       		.byte	0
 7594 027f 28       		.uleb128 0x28
 7595 0280 05       		.uleb128 0x5
 7596 0281 00       		.byte	0
 7597 0282 03       		.uleb128 0x3
 7598 0283 0E       		.uleb128 0xe
 7599 0284 3A       		.uleb128 0x3a
 7600 0285 0B       		.uleb128 0xb
 7601 0286 3B       		.uleb128 0x3b
 7602 0287 05       		.uleb128 0x5
 7603 0288 39       		.uleb128 0x39
 7604 0289 0B       		.uleb128 0xb
 7605 028a 49       		.uleb128 0x49
 7606 028b 13       		.uleb128 0x13
 7607 028c 02       		.uleb128 0x2
 7608 028d 0A       		.uleb128 0xa
 7609 028e 00       		.byte	0
 7610 028f 00       		.byte	0
 7611 0290 29       		.uleb128 0x29
 7612 0291 2E       		.uleb128 0x2e
 7613 0292 01       		.byte	0x1
 7614 0293 3F       		.uleb128 0x3f
 7615 0294 0C       		.uleb128 0xc
 7616 0295 03       		.uleb128 0x3
 7617 0296 0E       		.uleb128 0xe
 7618 0297 3A       		.uleb128 0x3a
 7619 0298 0B       		.uleb128 0xb
 7620 0299 3B       		.uleb128 0x3b
 7621 029a 05       		.uleb128 0x5
 7622 029b 39       		.uleb128 0x39
 7623 029c 0B       		.uleb128 0xb
 7624 029d 27       		.uleb128 0x27
 7625 029e 0C       		.uleb128 0xc
 7626 029f 49       		.uleb128 0x49
 7627 02a0 13       		.uleb128 0x13
 7628 02a1 11       		.uleb128 0x11
 7629 02a2 01       		.uleb128 0x1
 7630 02a3 12       		.uleb128 0x12
 7631 02a4 01       		.uleb128 0x1
 7632 02a5 40       		.uleb128 0x40
 7633 02a6 06       		.uleb128 0x6
 7634 02a7 9742     		.uleb128 0x2117
 7635 02a9 0C       		.uleb128 0xc
 7636 02aa 01       		.uleb128 0x1
 7637 02ab 13       		.uleb128 0x13
ARM GAS  /tmp/ccMyq1Ea.s 			page 204


 7638 02ac 00       		.byte	0
 7639 02ad 00       		.byte	0
 7640 02ae 2A       		.uleb128 0x2a
 7641 02af 1D       		.uleb128 0x1d
 7642 02b0 01       		.byte	0x1
 7643 02b1 31       		.uleb128 0x31
 7644 02b2 13       		.uleb128 0x13
 7645 02b3 52       		.uleb128 0x52
 7646 02b4 01       		.uleb128 0x1
 7647 02b5 B842     		.uleb128 0x2138
 7648 02b7 0B       		.uleb128 0xb
 7649 02b8 55       		.uleb128 0x55
 7650 02b9 06       		.uleb128 0x6
 7651 02ba 58       		.uleb128 0x58
 7652 02bb 0B       		.uleb128 0xb
 7653 02bc 59       		.uleb128 0x59
 7654 02bd 05       		.uleb128 0x5
 7655 02be 57       		.uleb128 0x57
 7656 02bf 0B       		.uleb128 0xb
 7657 02c0 01       		.uleb128 0x1
 7658 02c1 13       		.uleb128 0x13
 7659 02c2 00       		.byte	0
 7660 02c3 00       		.byte	0
 7661 02c4 2B       		.uleb128 0x2b
 7662 02c5 0B       		.uleb128 0xb
 7663 02c6 01       		.byte	0x1
 7664 02c7 55       		.uleb128 0x55
 7665 02c8 06       		.uleb128 0x6
 7666 02c9 00       		.byte	0
 7667 02ca 00       		.byte	0
 7668 02cb 2C       		.uleb128 0x2c
 7669 02cc 34       		.uleb128 0x34
 7670 02cd 00       		.byte	0
 7671 02ce 31       		.uleb128 0x31
 7672 02cf 13       		.uleb128 0x13
 7673 02d0 00       		.byte	0
 7674 02d1 00       		.byte	0
 7675 02d2 2D       		.uleb128 0x2d
 7676 02d3 1D       		.uleb128 0x1d
 7677 02d4 01       		.byte	0x1
 7678 02d5 31       		.uleb128 0x31
 7679 02d6 13       		.uleb128 0x13
 7680 02d7 52       		.uleb128 0x52
 7681 02d8 01       		.uleb128 0x1
 7682 02d9 B842     		.uleb128 0x2138
 7683 02db 0B       		.uleb128 0xb
 7684 02dc 11       		.uleb128 0x11
 7685 02dd 01       		.uleb128 0x1
 7686 02de 12       		.uleb128 0x12
 7687 02df 01       		.uleb128 0x1
 7688 02e0 58       		.uleb128 0x58
 7689 02e1 0B       		.uleb128 0xb
 7690 02e2 59       		.uleb128 0x59
 7691 02e3 05       		.uleb128 0x5
 7692 02e4 57       		.uleb128 0x57
 7693 02e5 0B       		.uleb128 0xb
 7694 02e6 01       		.uleb128 0x1
ARM GAS  /tmp/ccMyq1Ea.s 			page 205


 7695 02e7 13       		.uleb128 0x13
 7696 02e8 00       		.byte	0
 7697 02e9 00       		.byte	0
 7698 02ea 2E       		.uleb128 0x2e
 7699 02eb 05       		.uleb128 0x5
 7700 02ec 00       		.byte	0
 7701 02ed 31       		.uleb128 0x31
 7702 02ee 13       		.uleb128 0x13
 7703 02ef 00       		.byte	0
 7704 02f0 00       		.byte	0
 7705 02f1 2F       		.uleb128 0x2f
 7706 02f2 898201   		.uleb128 0x4109
 7707 02f5 01       		.byte	0x1
 7708 02f6 11       		.uleb128 0x11
 7709 02f7 01       		.uleb128 0x1
 7710 02f8 31       		.uleb128 0x31
 7711 02f9 13       		.uleb128 0x13
 7712 02fa 00       		.byte	0
 7713 02fb 00       		.byte	0
 7714 02fc 30       		.uleb128 0x30
 7715 02fd 1D       		.uleb128 0x1d
 7716 02fe 01       		.byte	0x1
 7717 02ff 31       		.uleb128 0x31
 7718 0300 13       		.uleb128 0x13
 7719 0301 52       		.uleb128 0x52
 7720 0302 01       		.uleb128 0x1
 7721 0303 B842     		.uleb128 0x2138
 7722 0305 0B       		.uleb128 0xb
 7723 0306 11       		.uleb128 0x11
 7724 0307 01       		.uleb128 0x1
 7725 0308 12       		.uleb128 0x12
 7726 0309 01       		.uleb128 0x1
 7727 030a 58       		.uleb128 0x58
 7728 030b 0B       		.uleb128 0xb
 7729 030c 59       		.uleb128 0x59
 7730 030d 05       		.uleb128 0x5
 7731 030e 57       		.uleb128 0x57
 7732 030f 0B       		.uleb128 0xb
 7733 0310 00       		.byte	0
 7734 0311 00       		.byte	0
 7735 0312 31       		.uleb128 0x31
 7736 0313 34       		.uleb128 0x34
 7737 0314 00       		.byte	0
 7738 0315 03       		.uleb128 0x3
 7739 0316 0E       		.uleb128 0xe
 7740 0317 3A       		.uleb128 0x3a
 7741 0318 0B       		.uleb128 0xb
 7742 0319 3B       		.uleb128 0x3b
 7743 031a 05       		.uleb128 0x5
 7744 031b 39       		.uleb128 0x39
 7745 031c 0B       		.uleb128 0xb
 7746 031d 49       		.uleb128 0x49
 7747 031e 13       		.uleb128 0x13
 7748 031f 02       		.uleb128 0x2
 7749 0320 0A       		.uleb128 0xa
 7750 0321 00       		.byte	0
 7751 0322 00       		.byte	0
ARM GAS  /tmp/ccMyq1Ea.s 			page 206


 7752 0323 32       		.uleb128 0x32
 7753 0324 0B       		.uleb128 0xb
 7754 0325 01       		.byte	0x1
 7755 0326 11       		.uleb128 0x11
 7756 0327 01       		.uleb128 0x1
 7757 0328 12       		.uleb128 0x12
 7758 0329 01       		.uleb128 0x1
 7759 032a 01       		.uleb128 0x1
 7760 032b 13       		.uleb128 0x13
 7761 032c 00       		.byte	0
 7762 032d 00       		.byte	0
 7763 032e 33       		.uleb128 0x33
 7764 032f 05       		.uleb128 0x5
 7765 0330 00       		.byte	0
 7766 0331 31       		.uleb128 0x31
 7767 0332 13       		.uleb128 0x13
 7768 0333 02       		.uleb128 0x2
 7769 0334 06       		.uleb128 0x6
 7770 0335 B742     		.uleb128 0x2137
 7771 0337 06       		.uleb128 0x6
 7772 0338 00       		.byte	0
 7773 0339 00       		.byte	0
 7774 033a 34       		.uleb128 0x34
 7775 033b 34       		.uleb128 0x34
 7776 033c 00       		.byte	0
 7777 033d 31       		.uleb128 0x31
 7778 033e 13       		.uleb128 0x13
 7779 033f 02       		.uleb128 0x2
 7780 0340 06       		.uleb128 0x6
 7781 0341 B742     		.uleb128 0x2137
 7782 0343 06       		.uleb128 0x6
 7783 0344 00       		.byte	0
 7784 0345 00       		.byte	0
 7785 0346 35       		.uleb128 0x35
 7786 0347 34       		.uleb128 0x34
 7787 0348 00       		.byte	0
 7788 0349 03       		.uleb128 0x3
 7789 034a 0E       		.uleb128 0xe
 7790 034b 3A       		.uleb128 0x3a
 7791 034c 0B       		.uleb128 0xb
 7792 034d 3B       		.uleb128 0x3b
 7793 034e 05       		.uleb128 0x5
 7794 034f 39       		.uleb128 0x39
 7795 0350 0B       		.uleb128 0xb
 7796 0351 49       		.uleb128 0x49
 7797 0352 13       		.uleb128 0x13
 7798 0353 1C       		.uleb128 0x1c
 7799 0354 0B       		.uleb128 0xb
 7800 0355 00       		.byte	0
 7801 0356 00       		.byte	0
 7802 0357 36       		.uleb128 0x36
 7803 0358 2E       		.uleb128 0x2e
 7804 0359 01       		.byte	0x1
 7805 035a 03       		.uleb128 0x3
 7806 035b 0E       		.uleb128 0xe
 7807 035c 3A       		.uleb128 0x3a
 7808 035d 0B       		.uleb128 0xb
ARM GAS  /tmp/ccMyq1Ea.s 			page 207


 7809 035e 3B       		.uleb128 0x3b
 7810 035f 05       		.uleb128 0x5
 7811 0360 39       		.uleb128 0x39
 7812 0361 0B       		.uleb128 0xb
 7813 0362 27       		.uleb128 0x27
 7814 0363 0C       		.uleb128 0xc
 7815 0364 20       		.uleb128 0x20
 7816 0365 0B       		.uleb128 0xb
 7817 0366 01       		.uleb128 0x1
 7818 0367 13       		.uleb128 0x13
 7819 0368 00       		.byte	0
 7820 0369 00       		.byte	0
 7821 036a 37       		.uleb128 0x37
 7822 036b 2E       		.uleb128 0x2e
 7823 036c 01       		.byte	0x1
 7824 036d 3F       		.uleb128 0x3f
 7825 036e 0C       		.uleb128 0xc
 7826 036f 03       		.uleb128 0x3
 7827 0370 0E       		.uleb128 0xe
 7828 0371 3A       		.uleb128 0x3a
 7829 0372 0B       		.uleb128 0xb
 7830 0373 3B       		.uleb128 0x3b
 7831 0374 0B       		.uleb128 0xb
 7832 0375 39       		.uleb128 0x39
 7833 0376 0B       		.uleb128 0xb
 7834 0377 27       		.uleb128 0x27
 7835 0378 0C       		.uleb128 0xc
 7836 0379 49       		.uleb128 0x49
 7837 037a 13       		.uleb128 0x13
 7838 037b 11       		.uleb128 0x11
 7839 037c 01       		.uleb128 0x1
 7840 037d 12       		.uleb128 0x12
 7841 037e 01       		.uleb128 0x1
 7842 037f 40       		.uleb128 0x40
 7843 0380 06       		.uleb128 0x6
 7844 0381 9742     		.uleb128 0x2117
 7845 0383 0C       		.uleb128 0xc
 7846 0384 01       		.uleb128 0x1
 7847 0385 13       		.uleb128 0x13
 7848 0386 00       		.byte	0
 7849 0387 00       		.byte	0
 7850 0388 38       		.uleb128 0x38
 7851 0389 05       		.uleb128 0x5
 7852 038a 00       		.byte	0
 7853 038b 03       		.uleb128 0x3
 7854 038c 0E       		.uleb128 0xe
 7855 038d 3A       		.uleb128 0x3a
 7856 038e 0B       		.uleb128 0xb
 7857 038f 3B       		.uleb128 0x3b
 7858 0390 0B       		.uleb128 0xb
 7859 0391 39       		.uleb128 0x39
 7860 0392 0B       		.uleb128 0xb
 7861 0393 49       		.uleb128 0x49
 7862 0394 13       		.uleb128 0x13
 7863 0395 02       		.uleb128 0x2
 7864 0396 06       		.uleb128 0x6
 7865 0397 B742     		.uleb128 0x2137
ARM GAS  /tmp/ccMyq1Ea.s 			page 208


 7866 0399 06       		.uleb128 0x6
 7867 039a 00       		.byte	0
 7868 039b 00       		.byte	0
 7869 039c 39       		.uleb128 0x39
 7870 039d 2E       		.uleb128 0x2e
 7871 039e 01       		.byte	0x1
 7872 039f 03       		.uleb128 0x3
 7873 03a0 0E       		.uleb128 0xe
 7874 03a1 3A       		.uleb128 0x3a
 7875 03a2 0B       		.uleb128 0xb
 7876 03a3 3B       		.uleb128 0x3b
 7877 03a4 0B       		.uleb128 0xb
 7878 03a5 39       		.uleb128 0x39
 7879 03a6 0B       		.uleb128 0xb
 7880 03a7 27       		.uleb128 0x27
 7881 03a8 0C       		.uleb128 0xc
 7882 03a9 20       		.uleb128 0x20
 7883 03aa 0B       		.uleb128 0xb
 7884 03ab 01       		.uleb128 0x1
 7885 03ac 13       		.uleb128 0x13
 7886 03ad 00       		.byte	0
 7887 03ae 00       		.byte	0
 7888 03af 3A       		.uleb128 0x3a
 7889 03b0 05       		.uleb128 0x5
 7890 03b1 00       		.byte	0
 7891 03b2 03       		.uleb128 0x3
 7892 03b3 0E       		.uleb128 0xe
 7893 03b4 3A       		.uleb128 0x3a
 7894 03b5 0B       		.uleb128 0xb
 7895 03b6 3B       		.uleb128 0x3b
 7896 03b7 0B       		.uleb128 0xb
 7897 03b8 39       		.uleb128 0x39
 7898 03b9 0B       		.uleb128 0xb
 7899 03ba 49       		.uleb128 0x49
 7900 03bb 13       		.uleb128 0x13
 7901 03bc 00       		.byte	0
 7902 03bd 00       		.byte	0
 7903 03be 3B       		.uleb128 0x3b
 7904 03bf 2E       		.uleb128 0x2e
 7905 03c0 01       		.byte	0x1
 7906 03c1 03       		.uleb128 0x3
 7907 03c2 0E       		.uleb128 0xe
 7908 03c3 3A       		.uleb128 0x3a
 7909 03c4 0B       		.uleb128 0xb
 7910 03c5 3B       		.uleb128 0x3b
 7911 03c6 0B       		.uleb128 0xb
 7912 03c7 39       		.uleb128 0x39
 7913 03c8 0B       		.uleb128 0xb
 7914 03c9 27       		.uleb128 0x27
 7915 03ca 0C       		.uleb128 0xc
 7916 03cb 49       		.uleb128 0x49
 7917 03cc 13       		.uleb128 0x13
 7918 03cd 20       		.uleb128 0x20
 7919 03ce 0B       		.uleb128 0xb
 7920 03cf 01       		.uleb128 0x1
 7921 03d0 13       		.uleb128 0x13
 7922 03d1 00       		.byte	0
ARM GAS  /tmp/ccMyq1Ea.s 			page 209


 7923 03d2 00       		.byte	0
 7924 03d3 3C       		.uleb128 0x3c
 7925 03d4 34       		.uleb128 0x34
 7926 03d5 00       		.byte	0
 7927 03d6 03       		.uleb128 0x3
 7928 03d7 0E       		.uleb128 0xe
 7929 03d8 3A       		.uleb128 0x3a
 7930 03d9 0B       		.uleb128 0xb
 7931 03da 3B       		.uleb128 0x3b
 7932 03db 0B       		.uleb128 0xb
 7933 03dc 39       		.uleb128 0x39
 7934 03dd 0B       		.uleb128 0xb
 7935 03de 49       		.uleb128 0x49
 7936 03df 13       		.uleb128 0x13
 7937 03e0 00       		.byte	0
 7938 03e1 00       		.byte	0
 7939 03e2 3D       		.uleb128 0x3d
 7940 03e3 2E       		.uleb128 0x2e
 7941 03e4 00       		.byte	0
 7942 03e5 3F       		.uleb128 0x3f
 7943 03e6 0C       		.uleb128 0xc
 7944 03e7 3C       		.uleb128 0x3c
 7945 03e8 0C       		.uleb128 0xc
 7946 03e9 8740     		.uleb128 0x2007
 7947 03eb 0E       		.uleb128 0xe
 7948 03ec 03       		.uleb128 0x3
 7949 03ed 0E       		.uleb128 0xe
 7950 03ee 3A       		.uleb128 0x3a
 7951 03ef 0B       		.uleb128 0xb
 7952 03f0 3B       		.uleb128 0x3b
 7953 03f1 0B       		.uleb128 0xb
 7954 03f2 00       		.byte	0
 7955 03f3 00       		.byte	0
 7956 03f4 00       		.byte	0
 7957              		.section	.debug_loc,"",%progbits
 7958              	.Ldebug_loc0:
 7959              	.LLST132:
 7960 0000 CC070000 		.4byte	.LFB36-.Ltext0
 7961 0004 CE070000 		.4byte	.LCFI35-.Ltext0
 7962 0008 0200     		.2byte	0x2
 7963 000a 7D       		.byte	0x7d
 7964 000b 00       		.sleb128 0
 7965 000c CE070000 		.4byte	.LCFI35-.Ltext0
 7966 0010 0E080000 		.4byte	.LCFI36-.Ltext0
 7967 0014 0200     		.2byte	0x2
 7968 0016 7D       		.byte	0x7d
 7969 0017 10       		.sleb128 16
 7970 0018 0E080000 		.4byte	.LCFI36-.Ltext0
 7971 001c 10080000 		.4byte	.LFE36-.Ltext0
 7972 0020 0200     		.2byte	0x2
 7973 0022 7D       		.byte	0x7d
 7974 0023 00       		.sleb128 0
 7975 0024 00000000 		.4byte	0
 7976 0028 00000000 		.4byte	0
 7977              	.LVUS133:
 7978 002c 00       		.uleb128 0
 7979 002d 00       		.uleb128 .LVU991
ARM GAS  /tmp/ccMyq1Ea.s 			page 210


 7980 002e 00       		.uleb128 .LVU991
 7981 002f 00       		.uleb128 .LVU1003
 7982 0030 00       		.uleb128 .LVU1003
 7983 0031 00       		.uleb128 .LVU1004
 7984 0032 00       		.uleb128 .LVU1004
 7985 0033 00       		.uleb128 0
 7986              	.LLST133:
 7987 0034 CC070000 		.4byte	.LVL282-.Ltext0
 7988 0038 D7070000 		.4byte	.LVL284-1-.Ltext0
 7989 003c 0100     		.2byte	0x1
 7990 003e 50       		.byte	0x50
 7991 003f D7070000 		.4byte	.LVL284-1-.Ltext0
 7992 0043 0E080000 		.4byte	.LVL287-.Ltext0
 7993 0047 0100     		.2byte	0x1
 7994 0049 54       		.byte	0x54
 7995 004a 0E080000 		.4byte	.LVL287-.Ltext0
 7996 004e 0F080000 		.4byte	.LVL288-1-.Ltext0
 7997 0052 0100     		.2byte	0x1
 7998 0054 50       		.byte	0x50
 7999 0055 0F080000 		.4byte	.LVL288-1-.Ltext0
 8000 0059 10080000 		.4byte	.LFE36-.Ltext0
 8001 005d 0A00     		.2byte	0xa
 8002 005f F3       		.byte	0xf3
 8003 0060 03       		.uleb128 0x3
 8004 0061 F5       		.byte	0xf5
 8005 0062 00       		.uleb128 0
 8006 0063 25       		.uleb128 0x25
 8007 0064 F7       		.byte	0xf7
 8008 0065 2C       		.uleb128 0x2c
 8009 0066 F7       		.byte	0xf7
 8010 0067 00       		.uleb128 0
 8011 0068 9F       		.byte	0x9f
 8012 0069 00000000 		.4byte	0
 8013 006d 00000000 		.4byte	0
 8014              	.LVUS134:
 8015 0071 00       		.uleb128 0
 8016 0072 00       		.uleb128 .LVU991
 8017 0073 00       		.uleb128 .LVU991
 8018 0074 00       		.uleb128 .LVU1003
 8019 0075 00       		.uleb128 .LVU1003
 8020 0076 00       		.uleb128 0
 8021              	.LLST134:
 8022 0077 CC070000 		.4byte	.LVL282-.Ltext0
 8023 007b D7070000 		.4byte	.LVL284-1-.Ltext0
 8024 007f 0100     		.2byte	0x1
 8025 0081 51       		.byte	0x51
 8026 0082 D7070000 		.4byte	.LVL284-1-.Ltext0
 8027 0086 0E080000 		.4byte	.LVL287-.Ltext0
 8028 008a 0100     		.2byte	0x1
 8029 008c 55       		.byte	0x55
 8030 008d 0E080000 		.4byte	.LVL287-.Ltext0
 8031 0091 10080000 		.4byte	.LFE36-.Ltext0
 8032 0095 0A00     		.2byte	0xa
 8033 0097 F3       		.byte	0xf3
 8034 0098 03       		.uleb128 0x3
 8035 0099 F5       		.byte	0xf5
 8036 009a 01       		.uleb128 0x1
ARM GAS  /tmp/ccMyq1Ea.s 			page 211


 8037 009b 25       		.uleb128 0x25
 8038 009c F7       		.byte	0xf7
 8039 009d 2C       		.uleb128 0x2c
 8040 009e F7       		.byte	0xf7
 8041 009f 00       		.uleb128 0
 8042 00a0 9F       		.byte	0x9f
 8043 00a1 00000000 		.4byte	0
 8044 00a5 00000000 		.4byte	0
 8045              	.LVUS135:
 8046 00a9 00       		.uleb128 0
 8047 00aa 00       		.uleb128 .LVU991
 8048 00ab 00       		.uleb128 .LVU991
 8049 00ac 00       		.uleb128 .LVU1003
 8050 00ad 00       		.uleb128 .LVU1003
 8051 00ae 00       		.uleb128 0
 8052              	.LLST135:
 8053 00af CC070000 		.4byte	.LVL282-.Ltext0
 8054 00b3 D7070000 		.4byte	.LVL284-1-.Ltext0
 8055 00b7 0100     		.2byte	0x1
 8056 00b9 52       		.byte	0x52
 8057 00ba D7070000 		.4byte	.LVL284-1-.Ltext0
 8058 00be 0E080000 		.4byte	.LVL287-.Ltext0
 8059 00c2 0100     		.2byte	0x1
 8060 00c4 56       		.byte	0x56
 8061 00c5 0E080000 		.4byte	.LVL287-.Ltext0
 8062 00c9 10080000 		.4byte	.LFE36-.Ltext0
 8063 00cd 0A00     		.2byte	0xa
 8064 00cf F3       		.byte	0xf3
 8065 00d0 03       		.uleb128 0x3
 8066 00d1 F5       		.byte	0xf5
 8067 00d2 02       		.uleb128 0x2
 8068 00d3 25       		.uleb128 0x25
 8069 00d4 F7       		.byte	0xf7
 8070 00d5 2C       		.uleb128 0x2c
 8071 00d6 F7       		.byte	0xf7
 8072 00d7 00       		.uleb128 0
 8073 00d8 9F       		.byte	0x9f
 8074 00d9 00000000 		.4byte	0
 8075 00dd 00000000 		.4byte	0
 8076              	.LVUS136:
 8077 00e1 00       		.uleb128 .LVU988
 8078 00e2 00       		.uleb128 .LVU991
 8079 00e3 00       		.uleb128 .LVU991
 8080 00e4 00       		.uleb128 .LVU1003
 8081 00e5 00       		.uleb128 .LVU1003
 8082 00e6 00       		.uleb128 .LVU1004
 8083 00e7 00       		.uleb128 .LVU1004
 8084 00e8 00       		.uleb128 0
 8085              	.LLST136:
 8086 00e9 D0070000 		.4byte	.LVL283-.Ltext0
 8087 00ed D7070000 		.4byte	.LVL284-1-.Ltext0
 8088 00f1 0100     		.2byte	0x1
 8089 00f3 50       		.byte	0x50
 8090 00f4 D7070000 		.4byte	.LVL284-1-.Ltext0
 8091 00f8 0E080000 		.4byte	.LVL287-.Ltext0
 8092 00fc 0100     		.2byte	0x1
 8093 00fe 54       		.byte	0x54
ARM GAS  /tmp/ccMyq1Ea.s 			page 212


 8094 00ff 0E080000 		.4byte	.LVL287-.Ltext0
 8095 0103 0F080000 		.4byte	.LVL288-1-.Ltext0
 8096 0107 0100     		.2byte	0x1
 8097 0109 50       		.byte	0x50
 8098 010a 0F080000 		.4byte	.LVL288-1-.Ltext0
 8099 010e 10080000 		.4byte	.LFE36-.Ltext0
 8100 0112 0A00     		.2byte	0xa
 8101 0114 F3       		.byte	0xf3
 8102 0115 03       		.uleb128 0x3
 8103 0116 F5       		.byte	0xf5
 8104 0117 00       		.uleb128 0
 8105 0118 25       		.uleb128 0x25
 8106 0119 F7       		.byte	0xf7
 8107 011a 2C       		.uleb128 0x2c
 8108 011b F7       		.byte	0xf7
 8109 011c 00       		.uleb128 0
 8110 011d 9F       		.byte	0x9f
 8111 011e 00000000 		.4byte	0
 8112 0122 00000000 		.4byte	0
 8113              	.LVUS129:
 8114 0126 00       		.uleb128 0
 8115 0127 00       		.uleb128 .LVU981
 8116 0128 00       		.uleb128 .LVU981
 8117 0129 00       		.uleb128 0
 8118              	.LLST129:
 8119 012a C0070000 		.4byte	.LVL278-.Ltext0
 8120 012e C4070000 		.4byte	.LVL280-.Ltext0
 8121 0132 0100     		.2byte	0x1
 8122 0134 50       		.byte	0x50
 8123 0135 C4070000 		.4byte	.LVL280-.Ltext0
 8124 0139 CC070000 		.4byte	.LFE35-.Ltext0
 8125 013d 0A00     		.2byte	0xa
 8126 013f F3       		.byte	0xf3
 8127 0140 03       		.uleb128 0x3
 8128 0141 F5       		.byte	0xf5
 8129 0142 00       		.uleb128 0
 8130 0143 25       		.uleb128 0x25
 8131 0144 F7       		.byte	0xf7
 8132 0145 2C       		.uleb128 0x2c
 8133 0146 F7       		.byte	0xf7
 8134 0147 00       		.uleb128 0
 8135 0148 9F       		.byte	0x9f
 8136 0149 00000000 		.4byte	0
 8137 014d 00000000 		.4byte	0
 8138              	.LVUS130:
 8139 0151 00       		.uleb128 .LVU979
 8140 0152 00       		.uleb128 .LVU981
 8141 0153 00       		.uleb128 .LVU981
 8142 0154 00       		.uleb128 .LVU982
 8143              	.LLST130:
 8144 0155 C2070000 		.4byte	.LVL279-.Ltext0
 8145 0159 C4070000 		.4byte	.LVL280-.Ltext0
 8146 015d 0A00     		.2byte	0xa
 8147 015f 70       		.byte	0x70
 8148 0160 3C       		.sleb128 60
 8149 0161 06       		.byte	0x6
 8150 0162 73       		.byte	0x73
ARM GAS  /tmp/ccMyq1Ea.s 			page 213


 8151 0163 00       		.sleb128 0
 8152 0164 29       		.byte	0x29
 8153 0165 08       		.byte	0x8
 8154 0166 FF       		.byte	0xff
 8155 0167 1A       		.byte	0x1a
 8156 0168 9F       		.byte	0x9f
 8157 0169 C4070000 		.4byte	.LVL280-.Ltext0
 8158 016d C6070000 		.4byte	.LVL281-.Ltext0
 8159 0171 0900     		.2byte	0x9
 8160 0173 70       		.byte	0x70
 8161 0174 00       		.sleb128 0
 8162 0175 73       		.byte	0x73
 8163 0176 00       		.sleb128 0
 8164 0177 29       		.byte	0x29
 8165 0178 08       		.byte	0x8
 8166 0179 FF       		.byte	0xff
 8167 017a 1A       		.byte	0x1a
 8168 017b 9F       		.byte	0x9f
 8169 017c 00000000 		.4byte	0
 8170 0180 00000000 		.4byte	0
 8171              	.LVUS131:
 8172 0184 03       		.uleb128 .LVU976
 8173 0185 00       		.uleb128 .LVU981
 8174 0186 00       		.uleb128 .LVU981
 8175 0187 00       		.uleb128 0
 8176              	.LLST131:
 8177 0188 C0070000 		.4byte	.LVL278-.Ltext0
 8178 018c C4070000 		.4byte	.LVL280-.Ltext0
 8179 0190 0100     		.2byte	0x1
 8180 0192 50       		.byte	0x50
 8181 0193 C4070000 		.4byte	.LVL280-.Ltext0
 8182 0197 CC070000 		.4byte	.LFE35-.Ltext0
 8183 019b 0A00     		.2byte	0xa
 8184 019d F3       		.byte	0xf3
 8185 019e 03       		.uleb128 0x3
 8186 019f F5       		.byte	0xf5
 8187 01a0 00       		.uleb128 0
 8188 01a1 25       		.uleb128 0x25
 8189 01a2 F7       		.byte	0xf7
 8190 01a3 2C       		.uleb128 0x2c
 8191 01a4 F7       		.byte	0xf7
 8192 01a5 00       		.uleb128 0
 8193 01a6 9F       		.byte	0x9f
 8194 01a7 00000000 		.4byte	0
 8195 01ab 00000000 		.4byte	0
 8196              	.LVUS126:
 8197 01af 00       		.uleb128 0
 8198 01b0 00       		.uleb128 .LVU970
 8199 01b1 00       		.uleb128 .LVU970
 8200 01b2 00       		.uleb128 0
 8201              	.LLST126:
 8202 01b3 B6070000 		.4byte	.LVL275-.Ltext0
 8203 01b7 B8070000 		.4byte	.LVL276-.Ltext0
 8204 01bb 0100     		.2byte	0x1
 8205 01bd 50       		.byte	0x50
 8206 01be B8070000 		.4byte	.LVL276-.Ltext0
 8207 01c2 C0070000 		.4byte	.LFE33-.Ltext0
ARM GAS  /tmp/ccMyq1Ea.s 			page 214


 8208 01c6 0A00     		.2byte	0xa
 8209 01c8 F3       		.byte	0xf3
 8210 01c9 03       		.uleb128 0x3
 8211 01ca F5       		.byte	0xf5
 8212 01cb 00       		.uleb128 0
 8213 01cc 25       		.uleb128 0x25
 8214 01cd F7       		.byte	0xf7
 8215 01ce 2C       		.uleb128 0x2c
 8216 01cf F7       		.byte	0xf7
 8217 01d0 00       		.uleb128 0
 8218 01d1 9F       		.byte	0x9f
 8219 01d2 00000000 		.4byte	0
 8220 01d6 00000000 		.4byte	0
 8221              	.LVUS127:
 8222 01da 00       		.uleb128 .LVU970
 8223 01db 00       		.uleb128 .LVU972
 8224              	.LLST127:
 8225 01dc B8070000 		.4byte	.LVL276-.Ltext0
 8226 01e0 BC070000 		.4byte	.LVL277-.Ltext0
 8227 01e4 0800     		.2byte	0x8
 8228 01e6 70       		.byte	0x70
 8229 01e7 00       		.sleb128 0
 8230 01e8 30       		.byte	0x30
 8231 01e9 29       		.byte	0x29
 8232 01ea 08       		.byte	0x8
 8233 01eb FF       		.byte	0xff
 8234 01ec 1A       		.byte	0x1a
 8235 01ed 9F       		.byte	0x9f
 8236 01ee 00000000 		.4byte	0
 8237 01f2 00000000 		.4byte	0
 8238              	.LVUS128:
 8239 01f6 03       		.uleb128 .LVU967
 8240 01f7 00       		.uleb128 .LVU970
 8241 01f8 00       		.uleb128 .LVU970
 8242 01f9 00       		.uleb128 0
 8243              	.LLST128:
 8244 01fa B6070000 		.4byte	.LVL275-.Ltext0
 8245 01fe B8070000 		.4byte	.LVL276-.Ltext0
 8246 0202 0100     		.2byte	0x1
 8247 0204 50       		.byte	0x50
 8248 0205 B8070000 		.4byte	.LVL276-.Ltext0
 8249 0209 C0070000 		.4byte	.LFE33-.Ltext0
 8250 020d 0A00     		.2byte	0xa
 8251 020f F3       		.byte	0xf3
 8252 0210 03       		.uleb128 0x3
 8253 0211 F5       		.byte	0xf5
 8254 0212 00       		.uleb128 0
 8255 0213 25       		.uleb128 0x25
 8256 0214 F7       		.byte	0xf7
 8257 0215 2C       		.uleb128 0x2c
 8258 0216 F7       		.byte	0xf7
 8259 0217 00       		.uleb128 0
 8260 0218 9F       		.byte	0x9f
 8261 0219 00000000 		.4byte	0
 8262 021d 00000000 		.4byte	0
 8263              	.LLST0:
 8264 0221 00000000 		.4byte	.LFB32-.Ltext0
ARM GAS  /tmp/ccMyq1Ea.s 			page 215


 8265 0225 02000000 		.4byte	.LCFI0-.Ltext0
 8266 0229 0200     		.2byte	0x2
 8267 022b 7D       		.byte	0x7d
 8268 022c 00       		.sleb128 0
 8269 022d 02000000 		.4byte	.LCFI0-.Ltext0
 8270 0231 16000000 		.4byte	.LFE32-.Ltext0
 8271 0235 0200     		.2byte	0x2
 8272 0237 7D       		.byte	0x7d
 8273 0238 08       		.sleb128 8
 8274 0239 00000000 		.4byte	0
 8275 023d 00000000 		.4byte	0
 8276              	.LVUS1:
 8277 0241 00       		.uleb128 0
 8278 0242 00       		.uleb128 .LVU6
 8279 0243 00       		.uleb128 .LVU6
 8280 0244 00       		.uleb128 .LVU8
 8281 0245 00       		.uleb128 .LVU8
 8282 0246 00       		.uleb128 0
 8283              	.LLST1:
 8284 0247 00000000 		.4byte	.LVL0-.Ltext0
 8285 024b 07000000 		.4byte	.LVL1-1-.Ltext0
 8286 024f 0100     		.2byte	0x1
 8287 0251 50       		.byte	0x50
 8288 0252 07000000 		.4byte	.LVL1-1-.Ltext0
 8289 0256 0A000000 		.4byte	.LVL2-.Ltext0
 8290 025a 0100     		.2byte	0x1
 8291 025c 54       		.byte	0x54
 8292 025d 0A000000 		.4byte	.LVL2-.Ltext0
 8293 0261 16000000 		.4byte	.LFE32-.Ltext0
 8294 0265 0A00     		.2byte	0xa
 8295 0267 F3       		.byte	0xf3
 8296 0268 03       		.uleb128 0x3
 8297 0269 F5       		.byte	0xf5
 8298 026a 00       		.uleb128 0
 8299 026b 25       		.uleb128 0x25
 8300 026c F7       		.byte	0xf7
 8301 026d 2C       		.uleb128 0x2c
 8302 026e F7       		.byte	0xf7
 8303 026f 00       		.uleb128 0
 8304 0270 9F       		.byte	0x9f
 8305 0271 00000000 		.4byte	0
 8306 0275 00000000 		.4byte	0
 8307              	.LVUS2:
 8308 0279 00       		.uleb128 .LVU8
 8309 027a 00       		.uleb128 0
 8310              	.LLST2:
 8311 027b 0A000000 		.4byte	.LVL2-.Ltext0
 8312 027f 16000000 		.4byte	.LFE32-.Ltext0
 8313 0283 0800     		.2byte	0x8
 8314 0285 74       		.byte	0x74
 8315 0286 00       		.sleb128 0
 8316 0287 30       		.byte	0x30
 8317 0288 29       		.byte	0x29
 8318 0289 08       		.byte	0x8
 8319 028a FF       		.byte	0xff
 8320 028b 1A       		.byte	0x1a
 8321 028c 9F       		.byte	0x9f
ARM GAS  /tmp/ccMyq1Ea.s 			page 216


 8322 028d 00000000 		.4byte	0
 8323 0291 00000000 		.4byte	0
 8324              	.LLST12:
 8325 0295 A4000000 		.4byte	.LFB31-.Ltext0
 8326 0299 A6000000 		.4byte	.LCFI6-.Ltext0
 8327 029d 0200     		.2byte	0x2
 8328 029f 7D       		.byte	0x7d
 8329 02a0 00       		.sleb128 0
 8330 02a1 A6000000 		.4byte	.LCFI6-.Ltext0
 8331 02a5 E8000000 		.4byte	.LCFI7-.Ltext0
 8332 02a9 0200     		.2byte	0x2
 8333 02ab 7D       		.byte	0x7d
 8334 02ac 10       		.sleb128 16
 8335 02ad E8000000 		.4byte	.LCFI7-.Ltext0
 8336 02b1 EC000000 		.4byte	.LCFI8-.Ltext0
 8337 02b5 0200     		.2byte	0x2
 8338 02b7 7D       		.byte	0x7d
 8339 02b8 00       		.sleb128 0
 8340 02b9 EC000000 		.4byte	.LCFI8-.Ltext0
 8341 02bd 10010000 		.4byte	.LFE31-.Ltext0
 8342 02c1 0200     		.2byte	0x2
 8343 02c3 7D       		.byte	0x7d
 8344 02c4 10       		.sleb128 16
 8345 02c5 00000000 		.4byte	0
 8346 02c9 00000000 		.4byte	0
 8347              	.LVUS13:
 8348 02cd 00       		.uleb128 0
 8349 02ce 00       		.uleb128 .LVU99
 8350 02cf 00       		.uleb128 .LVU99
 8351 02d0 00       		.uleb128 .LVU125
 8352 02d1 00       		.uleb128 .LVU125
 8353 02d2 00       		.uleb128 .LVU126
 8354 02d3 00       		.uleb128 .LVU126
 8355 02d4 00       		.uleb128 0
 8356              	.LLST13:
 8357 02d5 A4000000 		.4byte	.LVL24-.Ltext0
 8358 02d9 AB000000 		.4byte	.LVL25-1-.Ltext0
 8359 02dd 0100     		.2byte	0x1
 8360 02df 50       		.byte	0x50
 8361 02e0 AB000000 		.4byte	.LVL25-1-.Ltext0
 8362 02e4 E8000000 		.4byte	.LVL31-.Ltext0
 8363 02e8 0100     		.2byte	0x1
 8364 02ea 54       		.byte	0x54
 8365 02eb E8000000 		.4byte	.LVL31-.Ltext0
 8366 02ef EC000000 		.4byte	.LVL32-.Ltext0
 8367 02f3 0A00     		.2byte	0xa
 8368 02f5 F3       		.byte	0xf3
 8369 02f6 03       		.uleb128 0x3
 8370 02f7 F5       		.byte	0xf5
 8371 02f8 00       		.uleb128 0
 8372 02f9 25       		.uleb128 0x25
 8373 02fa F7       		.byte	0xf7
 8374 02fb 2C       		.uleb128 0x2c
 8375 02fc F7       		.byte	0xf7
 8376 02fd 00       		.uleb128 0
 8377 02fe 9F       		.byte	0x9f
 8378 02ff EC000000 		.4byte	.LVL32-.Ltext0
ARM GAS  /tmp/ccMyq1Ea.s 			page 217


 8379 0303 10010000 		.4byte	.LFE31-.Ltext0
 8380 0307 0100     		.2byte	0x1
 8381 0309 54       		.byte	0x54
 8382 030a 00000000 		.4byte	0
 8383 030e 00000000 		.4byte	0
 8384              	.LVUS14:
 8385 0312 00       		.uleb128 .LVU103
 8386 0313 00       		.uleb128 .LVU114
 8387 0314 00       		.uleb128 .LVU126
 8388 0315 00       		.uleb128 .LVU132
 8389 0316 00       		.uleb128 .LVU132
 8390 0317 00       		.uleb128 .LVU133
 8391 0318 00       		.uleb128 .LVU133
 8392 0319 00       		.uleb128 .LVU134
 8393              	.LLST14:
 8394 031a B6000000 		.4byte	.LVL26-.Ltext0
 8395 031e D0000000 		.4byte	.LVL29-.Ltext0
 8396 0322 0100     		.2byte	0x1
 8397 0324 55       		.byte	0x55
 8398 0325 EC000000 		.4byte	.LVL32-.Ltext0
 8399 0329 FA000000 		.4byte	.LVL35-.Ltext0
 8400 032d 0100     		.2byte	0x1
 8401 032f 55       		.byte	0x55
 8402 0330 FA000000 		.4byte	.LVL35-.Ltext0
 8403 0334 FC000000 		.4byte	.LVL36-.Ltext0
 8404 0338 0300     		.2byte	0x3
 8405 033a 75       		.byte	0x75
 8406 033b 01       		.sleb128 1
 8407 033c 9F       		.byte	0x9f
 8408 033d FC000000 		.4byte	.LVL36-.Ltext0
 8409 0341 FE000000 		.4byte	.LVL37-.Ltext0
 8410 0345 0100     		.2byte	0x1
 8411 0347 55       		.byte	0x55
 8412 0348 00000000 		.4byte	0
 8413 034c 00000000 		.4byte	0
 8414              	.LVUS15:
 8415 0350 00       		.uleb128 .LVU116
 8416 0351 00       		.uleb128 .LVU125
 8417 0352 00       		.uleb128 .LVU134
 8418 0353 00       		.uleb128 .LVU141
 8419 0354 00       		.uleb128 .LVU141
 8420 0355 00       		.uleb128 .LVU142
 8421 0356 00       		.uleb128 .LVU142
 8422 0357 00       		.uleb128 0
 8423              	.LLST15:
 8424 0358 D6000000 		.4byte	.LVL30-.Ltext0
 8425 035c E8000000 		.4byte	.LVL31-.Ltext0
 8426 0360 0100     		.2byte	0x1
 8427 0362 55       		.byte	0x55
 8428 0363 FE000000 		.4byte	.LVL37-.Ltext0
 8429 0367 0C010000 		.4byte	.LVL40-.Ltext0
 8430 036b 0100     		.2byte	0x1
 8431 036d 55       		.byte	0x55
 8432 036e 0C010000 		.4byte	.LVL40-.Ltext0
 8433 0372 0E010000 		.4byte	.LVL41-.Ltext0
 8434 0376 0300     		.2byte	0x3
 8435 0378 75       		.byte	0x75
ARM GAS  /tmp/ccMyq1Ea.s 			page 218


 8436 0379 01       		.sleb128 1
 8437 037a 9F       		.byte	0x9f
 8438 037b 0E010000 		.4byte	.LVL41-.Ltext0
 8439 037f 10010000 		.4byte	.LFE31-.Ltext0
 8440 0383 0100     		.2byte	0x1
 8441 0385 55       		.byte	0x55
 8442 0386 00000000 		.4byte	0
 8443 038a 00000000 		.4byte	0
 8444              	.LLST9:
 8445 038e 7C000000 		.4byte	.LFB30-.Ltext0
 8446 0392 84000000 		.4byte	.LCFI2-.Ltext0
 8447 0396 0200     		.2byte	0x2
 8448 0398 7D       		.byte	0x7d
 8449 0399 00       		.sleb128 0
 8450 039a 84000000 		.4byte	.LCFI2-.Ltext0
 8451 039e 9C000000 		.4byte	.LCFI3-.Ltext0
 8452 03a2 0200     		.2byte	0x2
 8453 03a4 7D       		.byte	0x7d
 8454 03a5 04       		.sleb128 4
 8455 03a6 9C000000 		.4byte	.LCFI3-.Ltext0
 8456 03aa A0000000 		.4byte	.LCFI4-.Ltext0
 8457 03ae 0200     		.2byte	0x2
 8458 03b0 7D       		.byte	0x7d
 8459 03b1 00       		.sleb128 0
 8460 03b2 A0000000 		.4byte	.LCFI4-.Ltext0
 8461 03b6 A2000000 		.4byte	.LCFI5-.Ltext0
 8462 03ba 0200     		.2byte	0x2
 8463 03bc 7D       		.byte	0x7d
 8464 03bd 04       		.sleb128 4
 8465 03be A2000000 		.4byte	.LCFI5-.Ltext0
 8466 03c2 A4000000 		.4byte	.LFE30-.Ltext0
 8467 03c6 0200     		.2byte	0x2
 8468 03c8 7D       		.byte	0x7d
 8469 03c9 00       		.sleb128 0
 8470 03ca 00000000 		.4byte	0
 8471 03ce 00000000 		.4byte	0
 8472              	.LVUS10:
 8473 03d2 00       		.uleb128 0
 8474 03d3 00       		.uleb128 .LVU76
 8475 03d4 00       		.uleb128 .LVU76
 8476 03d5 00       		.uleb128 .LVU93
 8477 03d6 00       		.uleb128 .LVU93
 8478 03d7 00       		.uleb128 .LVU93
 8479 03d8 00       		.uleb128 .LVU93
 8480 03d9 00       		.uleb128 0
 8481              	.LLST10:
 8482 03da 7C000000 		.4byte	.LVL20-.Ltext0
 8483 03de 82000000 		.4byte	.LVL21-.Ltext0
 8484 03e2 0100     		.2byte	0x1
 8485 03e4 50       		.byte	0x50
 8486 03e5 82000000 		.4byte	.LVL21-.Ltext0
 8487 03e9 9F000000 		.4byte	.LVL23-1-.Ltext0
 8488 03ed 0100     		.2byte	0x1
 8489 03ef 53       		.byte	0x53
 8490 03f0 9F000000 		.4byte	.LVL23-1-.Ltext0
 8491 03f4 A0000000 		.4byte	.LVL23-.Ltext0
 8492 03f8 0A00     		.2byte	0xa
ARM GAS  /tmp/ccMyq1Ea.s 			page 219


 8493 03fa F3       		.byte	0xf3
 8494 03fb 03       		.uleb128 0x3
 8495 03fc F5       		.byte	0xf5
 8496 03fd 00       		.uleb128 0
 8497 03fe 25       		.uleb128 0x25
 8498 03ff F7       		.byte	0xf7
 8499 0400 2C       		.uleb128 0x2c
 8500 0401 F7       		.byte	0xf7
 8501 0402 00       		.uleb128 0
 8502 0403 9F       		.byte	0x9f
 8503 0404 A0000000 		.4byte	.LVL23-.Ltext0
 8504 0408 A4000000 		.4byte	.LFE30-.Ltext0
 8505 040c 0100     		.2byte	0x1
 8506 040e 53       		.byte	0x53
 8507 040f 00000000 		.4byte	0
 8508 0413 00000000 		.4byte	0
 8509              	.LVUS11:
 8510 0417 00       		.uleb128 0
 8511 0418 00       		.uleb128 .LVU81
 8512 0419 00       		.uleb128 .LVU81
 8513 041a 00       		.uleb128 .LVU93
 8514 041b 00       		.uleb128 .LVU93
 8515 041c 00       		.uleb128 .LVU93
 8516 041d 00       		.uleb128 .LVU93
 8517 041e 00       		.uleb128 0
 8518              	.LLST11:
 8519 041f 7C000000 		.4byte	.LVL20-.Ltext0
 8520 0423 8A000000 		.4byte	.LVL22-.Ltext0
 8521 0427 0100     		.2byte	0x1
 8522 0429 51       		.byte	0x51
 8523 042a 8A000000 		.4byte	.LVL22-.Ltext0
 8524 042e 9F000000 		.4byte	.LVL23-1-.Ltext0
 8525 0432 0100     		.2byte	0x1
 8526 0434 50       		.byte	0x50
 8527 0435 9F000000 		.4byte	.LVL23-1-.Ltext0
 8528 0439 A0000000 		.4byte	.LVL23-.Ltext0
 8529 043d 0A00     		.2byte	0xa
 8530 043f F3       		.byte	0xf3
 8531 0440 03       		.uleb128 0x3
 8532 0441 F5       		.byte	0xf5
 8533 0442 01       		.uleb128 0x1
 8534 0443 25       		.uleb128 0x25
 8535 0444 F7       		.byte	0xf7
 8536 0445 2C       		.uleb128 0x2c
 8537 0446 F7       		.byte	0xf7
 8538 0447 00       		.uleb128 0
 8539 0448 9F       		.byte	0x9f
 8540 0449 A0000000 		.4byte	.LVL23-.Ltext0
 8541 044d A4000000 		.4byte	.LFE30-.Ltext0
 8542 0451 0100     		.2byte	0x1
 8543 0453 50       		.byte	0x50
 8544 0454 00000000 		.4byte	0
 8545 0458 00000000 		.4byte	0
 8546              	.LLST3:
 8547 045c 16000000 		.4byte	.LFB29-.Ltext0
 8548 0460 18000000 		.4byte	.LCFI1-.Ltext0
 8549 0464 0200     		.2byte	0x2
ARM GAS  /tmp/ccMyq1Ea.s 			page 220


 8550 0466 7D       		.byte	0x7d
 8551 0467 00       		.sleb128 0
 8552 0468 18000000 		.4byte	.LCFI1-.Ltext0
 8553 046c 7C000000 		.4byte	.LFE29-.Ltext0
 8554 0470 0200     		.2byte	0x2
 8555 0472 7D       		.byte	0x7d
 8556 0473 10       		.sleb128 16
 8557 0474 00000000 		.4byte	0
 8558 0478 00000000 		.4byte	0
 8559              	.LVUS4:
 8560 047c 00       		.uleb128 0
 8561 047d 00       		.uleb128 .LVU28
 8562 047e 00       		.uleb128 .LVU28
 8563 047f 00       		.uleb128 .LVU37
 8564 0480 00       		.uleb128 .LVU37
 8565 0481 00       		.uleb128 .LVU41
 8566 0482 00       		.uleb128 .LVU41
 8567 0483 00       		.uleb128 .LVU51
 8568 0484 00       		.uleb128 .LVU51
 8569 0485 00       		.uleb128 .LVU53
 8570 0486 00       		.uleb128 .LVU53
 8571 0487 00       		.uleb128 0
 8572              	.LLST4:
 8573 0488 16000000 		.4byte	.LVL4-.Ltext0
 8574 048c 28000000 		.4byte	.LVL8-.Ltext0
 8575 0490 0100     		.2byte	0x1
 8576 0492 50       		.byte	0x50
 8577 0493 28000000 		.4byte	.LVL8-.Ltext0
 8578 0497 34000000 		.4byte	.LVL12-.Ltext0
 8579 049b 0100     		.2byte	0x1
 8580 049d 54       		.byte	0x54
 8581 049e 34000000 		.4byte	.LVL12-.Ltext0
 8582 04a2 38000000 		.4byte	.LVL13-.Ltext0
 8583 04a6 0100     		.2byte	0x1
 8584 04a8 50       		.byte	0x50
 8585 04a9 38000000 		.4byte	.LVL13-.Ltext0
 8586 04ad 52000000 		.4byte	.LVL16-.Ltext0
 8587 04b1 0100     		.2byte	0x1
 8588 04b3 54       		.byte	0x54
 8589 04b4 52000000 		.4byte	.LVL16-.Ltext0
 8590 04b8 54000000 		.4byte	.LVL17-.Ltext0
 8591 04bc 0100     		.2byte	0x1
 8592 04be 50       		.byte	0x50
 8593 04bf 54000000 		.4byte	.LVL17-.Ltext0
 8594 04c3 7C000000 		.4byte	.LFE29-.Ltext0
 8595 04c7 0100     		.2byte	0x1
 8596 04c9 54       		.byte	0x54
 8597 04ca 00000000 		.4byte	0
 8598 04ce 00000000 		.4byte	0
 8599              	.LVUS5:
 8600 04d2 00       		.uleb128 0
 8601 04d3 00       		.uleb128 .LVU29
 8602 04d4 00       		.uleb128 .LVU29
 8603 04d5 00       		.uleb128 .LVU37
 8604 04d6 00       		.uleb128 .LVU37
 8605 04d7 00       		.uleb128 .LVU42
 8606 04d8 00       		.uleb128 .LVU42
ARM GAS  /tmp/ccMyq1Ea.s 			page 221


 8607 04d9 00       		.uleb128 .LVU51
 8608 04da 00       		.uleb128 .LVU51
 8609 04db 00       		.uleb128 .LVU54
 8610 04dc 00       		.uleb128 .LVU54
 8611 04dd 00       		.uleb128 0
 8612              	.LLST5:
 8613 04de 16000000 		.4byte	.LVL4-.Ltext0
 8614 04e2 2B000000 		.4byte	.LVL9-1-.Ltext0
 8615 04e6 0100     		.2byte	0x1
 8616 04e8 51       		.byte	0x51
 8617 04e9 2B000000 		.4byte	.LVL9-1-.Ltext0
 8618 04ed 34000000 		.4byte	.LVL12-.Ltext0
 8619 04f1 0A00     		.2byte	0xa
 8620 04f3 F3       		.byte	0xf3
 8621 04f4 03       		.uleb128 0x3
 8622 04f5 F5       		.byte	0xf5
 8623 04f6 01       		.uleb128 0x1
 8624 04f7 25       		.uleb128 0x25
 8625 04f8 F7       		.byte	0xf7
 8626 04f9 2C       		.uleb128 0x2c
 8627 04fa F7       		.byte	0xf7
 8628 04fb 00       		.uleb128 0
 8629 04fc 9F       		.byte	0x9f
 8630 04fd 34000000 		.4byte	.LVL12-.Ltext0
 8631 0501 3B000000 		.4byte	.LVL14-1-.Ltext0
 8632 0505 0100     		.2byte	0x1
 8633 0507 51       		.byte	0x51
 8634 0508 3B000000 		.4byte	.LVL14-1-.Ltext0
 8635 050c 52000000 		.4byte	.LVL16-.Ltext0
 8636 0510 0A00     		.2byte	0xa
 8637 0512 F3       		.byte	0xf3
 8638 0513 03       		.uleb128 0x3
 8639 0514 F5       		.byte	0xf5
 8640 0515 01       		.uleb128 0x1
 8641 0516 25       		.uleb128 0x25
 8642 0517 F7       		.byte	0xf7
 8643 0518 2C       		.uleb128 0x2c
 8644 0519 F7       		.byte	0xf7
 8645 051a 00       		.uleb128 0
 8646 051b 9F       		.byte	0x9f
 8647 051c 52000000 		.4byte	.LVL16-.Ltext0
 8648 0520 57000000 		.4byte	.LVL18-1-.Ltext0
 8649 0524 0100     		.2byte	0x1
 8650 0526 51       		.byte	0x51
 8651 0527 57000000 		.4byte	.LVL18-1-.Ltext0
 8652 052b 7C000000 		.4byte	.LFE29-.Ltext0
 8653 052f 0A00     		.2byte	0xa
 8654 0531 F3       		.byte	0xf3
 8655 0532 03       		.uleb128 0x3
 8656 0533 F5       		.byte	0xf5
 8657 0534 01       		.uleb128 0x1
 8658 0535 25       		.uleb128 0x25
 8659 0536 F7       		.byte	0xf7
 8660 0537 2C       		.uleb128 0x2c
 8661 0538 F7       		.byte	0xf7
 8662 0539 00       		.uleb128 0
 8663 053a 9F       		.byte	0x9f
ARM GAS  /tmp/ccMyq1Ea.s 			page 222


 8664 053b 00000000 		.4byte	0
 8665 053f 00000000 		.4byte	0
 8666              	.LVUS6:
 8667 0543 00       		.uleb128 0
 8668 0544 00       		.uleb128 .LVU19
 8669 0545 00       		.uleb128 .LVU19
 8670 0546 00       		.uleb128 .LVU25
 8671 0547 00       		.uleb128 .LVU25
 8672 0548 00       		.uleb128 .LVU37
 8673 0549 00       		.uleb128 .LVU37
 8674 054a 00       		.uleb128 .LVU50
 8675 054b 00       		.uleb128 .LVU50
 8676 054c 00       		.uleb128 .LVU51
 8677 054d 00       		.uleb128 .LVU51
 8678 054e 00       		.uleb128 0
 8679              	.LLST6:
 8680 054f 16000000 		.4byte	.LVL4-.Ltext0
 8681 0553 1C000000 		.4byte	.LVL5-.Ltext0
 8682 0557 0100     		.2byte	0x1
 8683 0559 52       		.byte	0x52
 8684 055a 1C000000 		.4byte	.LVL5-.Ltext0
 8685 055e 24000000 		.4byte	.LVL7-.Ltext0
 8686 0562 0100     		.2byte	0x1
 8687 0564 56       		.byte	0x56
 8688 0565 24000000 		.4byte	.LVL7-.Ltext0
 8689 0569 34000000 		.4byte	.LVL12-.Ltext0
 8690 056d 0A00     		.2byte	0xa
 8691 056f F3       		.byte	0xf3
 8692 0570 03       		.uleb128 0x3
 8693 0571 F5       		.byte	0xf5
 8694 0572 02       		.uleb128 0x2
 8695 0573 25       		.uleb128 0x25
 8696 0574 F7       		.byte	0xf7
 8697 0575 2C       		.uleb128 0x2c
 8698 0576 F7       		.byte	0xf7
 8699 0577 00       		.uleb128 0
 8700 0578 9F       		.byte	0x9f
 8701 0579 34000000 		.4byte	.LVL12-.Ltext0
 8702 057d 4E000000 		.4byte	.LVL15-.Ltext0
 8703 0581 0100     		.2byte	0x1
 8704 0583 56       		.byte	0x56
 8705 0584 4E000000 		.4byte	.LVL15-.Ltext0
 8706 0588 52000000 		.4byte	.LVL16-.Ltext0
 8707 058c 0A00     		.2byte	0xa
 8708 058e F3       		.byte	0xf3
 8709 058f 03       		.uleb128 0x3
 8710 0590 F5       		.byte	0xf5
 8711 0591 02       		.uleb128 0x2
 8712 0592 25       		.uleb128 0x25
 8713 0593 F7       		.byte	0xf7
 8714 0594 2C       		.uleb128 0x2c
 8715 0595 F7       		.byte	0xf7
 8716 0596 00       		.uleb128 0
 8717 0597 9F       		.byte	0x9f
 8718 0598 52000000 		.4byte	.LVL16-.Ltext0
 8719 059c 7C000000 		.4byte	.LFE29-.Ltext0
 8720 05a0 0100     		.2byte	0x1
ARM GAS  /tmp/ccMyq1Ea.s 			page 223


 8721 05a2 56       		.byte	0x56
 8722 05a3 00000000 		.4byte	0
 8723 05a7 00000000 		.4byte	0
 8724              	.LVUS7:
 8725 05ab 02       		.uleb128 .LVU14
 8726 05ac 00       		.uleb128 .LVU29
 8727 05ad 00       		.uleb128 .LVU29
 8728 05ae 00       		.uleb128 .LVU37
 8729 05af 00       		.uleb128 .LVU37
 8730 05b0 00       		.uleb128 0
 8731              	.LLST7:
 8732 05b1 16000000 		.4byte	.LVL4-.Ltext0
 8733 05b5 2C000000 		.4byte	.LVL9-.Ltext0
 8734 05b9 0200     		.2byte	0x2
 8735 05bb 30       		.byte	0x30
 8736 05bc 9F       		.byte	0x9f
 8737 05bd 2C000000 		.4byte	.LVL9-.Ltext0
 8738 05c1 34000000 		.4byte	.LVL12-.Ltext0
 8739 05c5 0100     		.2byte	0x1
 8740 05c7 50       		.byte	0x50
 8741 05c8 34000000 		.4byte	.LVL12-.Ltext0
 8742 05cc 7C000000 		.4byte	.LFE29-.Ltext0
 8743 05d0 0200     		.2byte	0x2
 8744 05d2 30       		.byte	0x30
 8745 05d3 9F       		.byte	0x9f
 8746 05d4 00000000 		.4byte	0
 8747 05d8 00000000 		.4byte	0
 8748              	.LVUS8:
 8749 05dc 00       		.uleb128 .LVU21
 8750 05dd 00       		.uleb128 .LVU34
 8751 05de 00       		.uleb128 .LVU34
 8752 05df 00       		.uleb128 .LVU37
 8753 05e0 00       		.uleb128 .LVU37
 8754 05e1 00       		.uleb128 0
 8755              	.LLST8:
 8756 05e2 20000000 		.4byte	.LVL6-.Ltext0
 8757 05e6 30000000 		.4byte	.LVL11-.Ltext0
 8758 05ea 0100     		.2byte	0x1
 8759 05ec 55       		.byte	0x55
 8760 05ed 30000000 		.4byte	.LVL11-.Ltext0
 8761 05f1 34000000 		.4byte	.LVL12-.Ltext0
 8762 05f5 0300     		.2byte	0x3
 8763 05f7 75       		.byte	0x75
 8764 05f8 7F       		.sleb128 -1
 8765 05f9 9F       		.byte	0x9f
 8766 05fa 34000000 		.4byte	.LVL12-.Ltext0
 8767 05fe 7C000000 		.4byte	.LFE29-.Ltext0
 8768 0602 0100     		.2byte	0x1
 8769 0604 55       		.byte	0x55
 8770 0605 00000000 		.4byte	0
 8771 0609 00000000 		.4byte	0
 8772              	.LVUS125:
 8773 060d 00       		.uleb128 0
 8774 060e 00       		.uleb128 .LVU963
 8775 060f 00       		.uleb128 .LVU963
 8776 0610 00       		.uleb128 0
 8777              	.LLST125:
ARM GAS  /tmp/ccMyq1Ea.s 			page 224


 8778 0611 B0070000 		.4byte	.LVL273-.Ltext0
 8779 0615 B4070000 		.4byte	.LVL274-.Ltext0
 8780 0619 0100     		.2byte	0x1
 8781 061b 50       		.byte	0x50
 8782 061c B4070000 		.4byte	.LVL274-.Ltext0
 8783 0620 B6070000 		.4byte	.LFE27-.Ltext0
 8784 0624 0A00     		.2byte	0xa
 8785 0626 F3       		.byte	0xf3
 8786 0627 03       		.uleb128 0x3
 8787 0628 F5       		.byte	0xf5
 8788 0629 00       		.uleb128 0
 8789 062a 25       		.uleb128 0x25
 8790 062b F7       		.byte	0xf7
 8791 062c 2C       		.uleb128 0x2c
 8792 062d F7       		.byte	0xf7
 8793 062e 00       		.uleb128 0
 8794 062f 9F       		.byte	0x9f
 8795 0630 00000000 		.4byte	0
 8796 0634 00000000 		.4byte	0
 8797              	.LVUS124:
 8798 0638 00       		.uleb128 0
 8799 0639 00       		.uleb128 .LVU955
 8800 063a 00       		.uleb128 .LVU955
 8801 063b 00       		.uleb128 0
 8802              	.LLST124:
 8803 063c A8070000 		.4byte	.LVL270-.Ltext0
 8804 0640 AA070000 		.4byte	.LVL271-.Ltext0
 8805 0644 0100     		.2byte	0x1
 8806 0646 50       		.byte	0x50
 8807 0647 AA070000 		.4byte	.LVL271-.Ltext0
 8808 064b AC070000 		.4byte	.LFE25-.Ltext0
 8809 064f 0A00     		.2byte	0xa
 8810 0651 F3       		.byte	0xf3
 8811 0652 03       		.uleb128 0x3
 8812 0653 F5       		.byte	0xf5
 8813 0654 00       		.uleb128 0
 8814 0655 25       		.uleb128 0x25
 8815 0656 F7       		.byte	0xf7
 8816 0657 2C       		.uleb128 0x2c
 8817 0658 F7       		.byte	0xf7
 8818 0659 00       		.uleb128 0
 8819 065a 9F       		.byte	0x9f
 8820 065b 00000000 		.4byte	0
 8821 065f 00000000 		.4byte	0
 8822              	.LVUS122:
 8823 0663 00       		.uleb128 0
 8824 0664 00       		.uleb128 .LVU951
 8825 0665 00       		.uleb128 .LVU951
 8826 0666 00       		.uleb128 0
 8827              	.LLST122:
 8828 0667 A4070000 		.4byte	.LVL268-.Ltext0
 8829 066b A7070000 		.4byte	.LVL269-1-.Ltext0
 8830 066f 0100     		.2byte	0x1
 8831 0671 50       		.byte	0x50
 8832 0672 A7070000 		.4byte	.LVL269-1-.Ltext0
 8833 0676 A8070000 		.4byte	.LFE24-.Ltext0
 8834 067a 0A00     		.2byte	0xa
ARM GAS  /tmp/ccMyq1Ea.s 			page 225


 8835 067c F3       		.byte	0xf3
 8836 067d 03       		.uleb128 0x3
 8837 067e F5       		.byte	0xf5
 8838 067f 00       		.uleb128 0
 8839 0680 25       		.uleb128 0x25
 8840 0681 F7       		.byte	0xf7
 8841 0682 2C       		.uleb128 0x2c
 8842 0683 F7       		.byte	0xf7
 8843 0684 00       		.uleb128 0
 8844 0685 9F       		.byte	0x9f
 8845 0686 00000000 		.4byte	0
 8846 068a 00000000 		.4byte	0
 8847              	.LVUS123:
 8848 068e 02       		.uleb128 .LVU948
 8849 068f 00       		.uleb128 .LVU951
 8850 0690 00       		.uleb128 .LVU951
 8851 0691 00       		.uleb128 0
 8852              	.LLST123:
 8853 0692 A4070000 		.4byte	.LVL268-.Ltext0
 8854 0696 A7070000 		.4byte	.LVL269-1-.Ltext0
 8855 069a 0100     		.2byte	0x1
 8856 069c 50       		.byte	0x50
 8857 069d A7070000 		.4byte	.LVL269-1-.Ltext0
 8858 06a1 A8070000 		.4byte	.LFE24-.Ltext0
 8859 06a5 0A00     		.2byte	0xa
 8860 06a7 F3       		.byte	0xf3
 8861 06a8 03       		.uleb128 0x3
 8862 06a9 F5       		.byte	0xf5
 8863 06aa 00       		.uleb128 0
 8864 06ab 25       		.uleb128 0x25
 8865 06ac F7       		.byte	0xf7
 8866 06ad 2C       		.uleb128 0x2c
 8867 06ae F7       		.byte	0xf7
 8868 06af 00       		.uleb128 0
 8869 06b0 9F       		.byte	0x9f
 8870 06b1 00000000 		.4byte	0
 8871 06b5 00000000 		.4byte	0
 8872              	.LVUS119:
 8873 06b9 00       		.uleb128 0
 8874 06ba 00       		.uleb128 .LVU944
 8875 06bb 00       		.uleb128 .LVU944
 8876 06bc 00       		.uleb128 0
 8877              	.LLST119:
 8878 06bd A0070000 		.4byte	.LVL266-.Ltext0
 8879 06c1 A2070000 		.4byte	.LVL267-.Ltext0
 8880 06c5 0100     		.2byte	0x1
 8881 06c7 50       		.byte	0x50
 8882 06c8 A2070000 		.4byte	.LVL267-.Ltext0
 8883 06cc A4070000 		.4byte	.LFE23-.Ltext0
 8884 06d0 0A00     		.2byte	0xa
 8885 06d2 F3       		.byte	0xf3
 8886 06d3 03       		.uleb128 0x3
 8887 06d4 F5       		.byte	0xf5
 8888 06d5 00       		.uleb128 0
 8889 06d6 25       		.uleb128 0x25
 8890 06d7 F7       		.byte	0xf7
 8891 06d8 2C       		.uleb128 0x2c
ARM GAS  /tmp/ccMyq1Ea.s 			page 226


 8892 06d9 F7       		.byte	0xf7
 8893 06da 00       		.uleb128 0
 8894 06db 9F       		.byte	0x9f
 8895 06dc 00000000 		.4byte	0
 8896 06e0 00000000 		.4byte	0
 8897              	.LVUS120:
 8898 06e4 00       		.uleb128 .LVU944
 8899 06e5 00       		.uleb128 0
 8900              	.LLST120:
 8901 06e6 A2070000 		.4byte	.LVL267-.Ltext0
 8902 06ea A4070000 		.4byte	.LFE23-.Ltext0
 8903 06ee 0100     		.2byte	0x1
 8904 06f0 50       		.byte	0x50
 8905 06f1 00000000 		.4byte	0
 8906 06f5 00000000 		.4byte	0
 8907              	.LVUS121:
 8908 06f9 03       		.uleb128 .LVU941
 8909 06fa 00       		.uleb128 .LVU944
 8910 06fb 00       		.uleb128 .LVU944
 8911 06fc 00       		.uleb128 0
 8912              	.LLST121:
 8913 06fd A0070000 		.4byte	.LVL266-.Ltext0
 8914 0701 A2070000 		.4byte	.LVL267-.Ltext0
 8915 0705 0100     		.2byte	0x1
 8916 0707 50       		.byte	0x50
 8917 0708 A2070000 		.4byte	.LVL267-.Ltext0
 8918 070c A4070000 		.4byte	.LFE23-.Ltext0
 8919 0710 0A00     		.2byte	0xa
 8920 0712 F3       		.byte	0xf3
 8921 0713 03       		.uleb128 0x3
 8922 0714 F5       		.byte	0xf5
 8923 0715 00       		.uleb128 0
 8924 0716 25       		.uleb128 0x25
 8925 0717 F7       		.byte	0xf7
 8926 0718 2C       		.uleb128 0x2c
 8927 0719 F7       		.byte	0xf7
 8928 071a 00       		.uleb128 0
 8929 071b 9F       		.byte	0x9f
 8930 071c 00000000 		.4byte	0
 8931 0720 00000000 		.4byte	0
 8932              	.LLST115:
 8933 0724 8A070000 		.4byte	.LFB22-.Ltext0
 8934 0728 8C070000 		.4byte	.LCFI34-.Ltext0
 8935 072c 0200     		.2byte	0x2
 8936 072e 7D       		.byte	0x7d
 8937 072f 00       		.sleb128 0
 8938 0730 8C070000 		.4byte	.LCFI34-.Ltext0
 8939 0734 A0070000 		.4byte	.LFE22-.Ltext0
 8940 0738 0200     		.2byte	0x2
 8941 073a 7D       		.byte	0x7d
 8942 073b 08       		.sleb128 8
 8943 073c 00000000 		.4byte	0
 8944 0740 00000000 		.4byte	0
 8945              	.LVUS116:
 8946 0744 00       		.uleb128 0
 8947 0745 00       		.uleb128 .LVU930
 8948 0746 00       		.uleb128 .LVU930
ARM GAS  /tmp/ccMyq1Ea.s 			page 227


 8949 0747 00       		.uleb128 .LVU933
 8950 0748 00       		.uleb128 .LVU933
 8951 0749 00       		.uleb128 0
 8952              	.LLST116:
 8953 074a 8A070000 		.4byte	.LVL260-.Ltext0
 8954 074e 91070000 		.4byte	.LVL262-1-.Ltext0
 8955 0752 0100     		.2byte	0x1
 8956 0754 50       		.byte	0x50
 8957 0755 91070000 		.4byte	.LVL262-1-.Ltext0
 8958 0759 96070000 		.4byte	.LVL263-.Ltext0
 8959 075d 0100     		.2byte	0x1
 8960 075f 54       		.byte	0x54
 8961 0760 96070000 		.4byte	.LVL263-.Ltext0
 8962 0764 A0070000 		.4byte	.LFE22-.Ltext0
 8963 0768 0A00     		.2byte	0xa
 8964 076a F3       		.byte	0xf3
 8965 076b 03       		.uleb128 0x3
 8966 076c F5       		.byte	0xf5
 8967 076d 00       		.uleb128 0
 8968 076e 25       		.uleb128 0x25
 8969 076f F7       		.byte	0xf7
 8970 0770 2C       		.uleb128 0x2c
 8971 0771 F7       		.byte	0xf7
 8972 0772 00       		.uleb128 0
 8973 0773 9F       		.byte	0x9f
 8974 0774 00000000 		.4byte	0
 8975 0778 00000000 		.4byte	0
 8976              	.LVUS117:
 8977 077c 00       		.uleb128 .LVU934
 8978 077d 00       		.uleb128 0
 8979              	.LLST117:
 8980 077e 98070000 		.4byte	.LVL264-.Ltext0
 8981 0782 A0070000 		.4byte	.LFE22-.Ltext0
 8982 0786 0100     		.2byte	0x1
 8983 0788 54       		.byte	0x54
 8984 0789 00000000 		.4byte	0
 8985 078d 00000000 		.4byte	0
 8986              	.LVUS118:
 8987 0791 00       		.uleb128 .LVU928
 8988 0792 00       		.uleb128 .LVU930
 8989 0793 00       		.uleb128 .LVU930
 8990 0794 00       		.uleb128 .LVU933
 8991 0795 00       		.uleb128 .LVU933
 8992 0796 00       		.uleb128 0
 8993              	.LLST118:
 8994 0797 8E070000 		.4byte	.LVL261-.Ltext0
 8995 079b 91070000 		.4byte	.LVL262-1-.Ltext0
 8996 079f 0100     		.2byte	0x1
 8997 07a1 50       		.byte	0x50
 8998 07a2 91070000 		.4byte	.LVL262-1-.Ltext0
 8999 07a6 96070000 		.4byte	.LVL263-.Ltext0
 9000 07aa 0100     		.2byte	0x1
 9001 07ac 54       		.byte	0x54
 9002 07ad 96070000 		.4byte	.LVL263-.Ltext0
 9003 07b1 A0070000 		.4byte	.LFE22-.Ltext0
 9004 07b5 0A00     		.2byte	0xa
 9005 07b7 F3       		.byte	0xf3
ARM GAS  /tmp/ccMyq1Ea.s 			page 228


 9006 07b8 03       		.uleb128 0x3
 9007 07b9 F5       		.byte	0xf5
 9008 07ba 00       		.uleb128 0
 9009 07bb 25       		.uleb128 0x25
 9010 07bc F7       		.byte	0xf7
 9011 07bd 2C       		.uleb128 0x2c
 9012 07be F7       		.byte	0xf7
 9013 07bf 00       		.uleb128 0
 9014 07c0 9F       		.byte	0x9f
 9015 07c1 00000000 		.4byte	0
 9016 07c5 00000000 		.4byte	0
 9017              	.LLST112:
 9018 07c9 78070000 		.4byte	.LFB21-.Ltext0
 9019 07cd 7A070000 		.4byte	.LCFI33-.Ltext0
 9020 07d1 0200     		.2byte	0x2
 9021 07d3 7D       		.byte	0x7d
 9022 07d4 00       		.sleb128 0
 9023 07d5 7A070000 		.4byte	.LCFI33-.Ltext0
 9024 07d9 8A070000 		.4byte	.LFE21-.Ltext0
 9025 07dd 0200     		.2byte	0x2
 9026 07df 7D       		.byte	0x7d
 9027 07e0 08       		.sleb128 8
 9028 07e1 00000000 		.4byte	0
 9029 07e5 00000000 		.4byte	0
 9030              	.LVUS113:
 9031 07e9 00       		.uleb128 0
 9032 07ea 00       		.uleb128 .LVU917
 9033 07eb 00       		.uleb128 .LVU917
 9034 07ec 00       		.uleb128 .LVU919
 9035 07ed 00       		.uleb128 .LVU919
 9036 07ee 00       		.uleb128 0
 9037              	.LLST113:
 9038 07ef 78070000 		.4byte	.LVL256-.Ltext0
 9039 07f3 7F070000 		.4byte	.LVL257-1-.Ltext0
 9040 07f7 0100     		.2byte	0x1
 9041 07f9 50       		.byte	0x50
 9042 07fa 7F070000 		.4byte	.LVL257-1-.Ltext0
 9043 07fe 82070000 		.4byte	.LVL258-.Ltext0
 9044 0802 0100     		.2byte	0x1
 9045 0804 54       		.byte	0x54
 9046 0805 82070000 		.4byte	.LVL258-.Ltext0
 9047 0809 8A070000 		.4byte	.LFE21-.Ltext0
 9048 080d 0A00     		.2byte	0xa
 9049 080f F3       		.byte	0xf3
 9050 0810 03       		.uleb128 0x3
 9051 0811 F5       		.byte	0xf5
 9052 0812 00       		.uleb128 0
 9053 0813 25       		.uleb128 0x25
 9054 0814 F7       		.byte	0xf7
 9055 0815 2C       		.uleb128 0x2c
 9056 0816 F7       		.byte	0xf7
 9057 0817 00       		.uleb128 0
 9058 0818 9F       		.byte	0x9f
 9059 0819 00000000 		.4byte	0
 9060 081d 00000000 		.4byte	0
 9061              	.LVUS114:
 9062 0821 00       		.uleb128 .LVU919
ARM GAS  /tmp/ccMyq1Ea.s 			page 229


 9063 0822 00       		.uleb128 0
 9064              	.LLST114:
 9065 0823 82070000 		.4byte	.LVL258-.Ltext0
 9066 0827 8A070000 		.4byte	.LFE21-.Ltext0
 9067 082b 0100     		.2byte	0x1
 9068 082d 54       		.byte	0x54
 9069 082e 00000000 		.4byte	0
 9070 0832 00000000 		.4byte	0
 9071              	.LLST106:
 9072 0836 48070000 		.4byte	.LFB20-.Ltext0
 9073 083a 4A070000 		.4byte	.LCFI32-.Ltext0
 9074 083e 0200     		.2byte	0x2
 9075 0840 7D       		.byte	0x7d
 9076 0841 00       		.sleb128 0
 9077 0842 4A070000 		.4byte	.LCFI32-.Ltext0
 9078 0846 78070000 		.4byte	.LFE20-.Ltext0
 9079 084a 0200     		.2byte	0x2
 9080 084c 7D       		.byte	0x7d
 9081 084d 10       		.sleb128 16
 9082 084e 00000000 		.4byte	0
 9083 0852 00000000 		.4byte	0
 9084              	.LVUS107:
 9085 0856 00       		.uleb128 0
 9086 0857 00       		.uleb128 .LVU897
 9087 0858 00       		.uleb128 .LVU897
 9088 0859 00       		.uleb128 .LVU908
 9089 085a 00       		.uleb128 .LVU908
 9090 085b 00       		.uleb128 .LVU909
 9091 085c 00       		.uleb128 .LVU909
 9092 085d 00       		.uleb128 0
 9093              	.LLST107:
 9094 085e 48070000 		.4byte	.LVL248-.Ltext0
 9095 0862 69070000 		.4byte	.LVL251-1-.Ltext0
 9096 0866 0100     		.2byte	0x1
 9097 0868 50       		.byte	0x50
 9098 0869 69070000 		.4byte	.LVL251-1-.Ltext0
 9099 086d 74070000 		.4byte	.LVL254-.Ltext0
 9100 0871 0100     		.2byte	0x1
 9101 0873 54       		.byte	0x54
 9102 0874 74070000 		.4byte	.LVL254-.Ltext0
 9103 0878 76070000 		.4byte	.LVL255-.Ltext0
 9104 087c 0100     		.2byte	0x1
 9105 087e 50       		.byte	0x50
 9106 087f 76070000 		.4byte	.LVL255-.Ltext0
 9107 0883 78070000 		.4byte	.LFE20-.Ltext0
 9108 0887 0100     		.2byte	0x1
 9109 0889 54       		.byte	0x54
 9110 088a 00000000 		.4byte	0
 9111 088e 00000000 		.4byte	0
 9112              	.LVUS108:
 9113 0892 00       		.uleb128 0
 9114 0893 00       		.uleb128 .LVU897
 9115 0894 00       		.uleb128 .LVU897
 9116 0895 00       		.uleb128 .LVU908
 9117 0896 00       		.uleb128 .LVU908
 9118 0897 00       		.uleb128 0
 9119              	.LLST108:
ARM GAS  /tmp/ccMyq1Ea.s 			page 230


 9120 0898 48070000 		.4byte	.LVL248-.Ltext0
 9121 089c 69070000 		.4byte	.LVL251-1-.Ltext0
 9122 08a0 0100     		.2byte	0x1
 9123 08a2 51       		.byte	0x51
 9124 08a3 69070000 		.4byte	.LVL251-1-.Ltext0
 9125 08a7 74070000 		.4byte	.LVL254-.Ltext0
 9126 08ab 0A00     		.2byte	0xa
 9127 08ad F3       		.byte	0xf3
 9128 08ae 03       		.uleb128 0x3
 9129 08af F5       		.byte	0xf5
 9130 08b0 01       		.uleb128 0x1
 9131 08b1 25       		.uleb128 0x25
 9132 08b2 F7       		.byte	0xf7
 9133 08b3 2C       		.uleb128 0x2c
 9134 08b4 F7       		.byte	0xf7
 9135 08b5 00       		.uleb128 0
 9136 08b6 9F       		.byte	0x9f
 9137 08b7 74070000 		.4byte	.LVL254-.Ltext0
 9138 08bb 78070000 		.4byte	.LFE20-.Ltext0
 9139 08bf 0100     		.2byte	0x1
 9140 08c1 51       		.byte	0x51
 9141 08c2 00000000 		.4byte	0
 9142 08c6 00000000 		.4byte	0
 9143              	.LVUS109:
 9144 08ca 01       		.uleb128 .LVU901
 9145 08cb 00       		.uleb128 .LVU908
 9146              	.LLST109:
 9147 08cc 6E070000 		.4byte	.LVL252-.Ltext0
 9148 08d0 74070000 		.4byte	.LVL254-.Ltext0
 9149 08d4 0100     		.2byte	0x1
 9150 08d6 50       		.byte	0x50
 9151 08d7 00000000 		.4byte	0
 9152 08db 00000000 		.4byte	0
 9153              	.LVUS110:
 9154 08df 00       		.uleb128 .LVU896
 9155 08e0 01       		.uleb128 .LVU901
 9156              	.LLST110:
 9157 08e1 66070000 		.4byte	.LVL250-.Ltext0
 9158 08e5 6E070000 		.4byte	.LVL252-.Ltext0
 9159 08e9 0100     		.2byte	0x1
 9160 08eb 56       		.byte	0x56
 9161 08ec 00000000 		.4byte	0
 9162 08f0 00000000 		.4byte	0
 9163              	.LVUS111:
 9164 08f4 05       		.uleb128 .LVU877
 9165 08f5 00       		.uleb128 .LVU897
 9166 08f6 00       		.uleb128 .LVU897
 9167 08f7 00       		.uleb128 .LVU908
 9168 08f8 00       		.uleb128 .LVU908
 9169 08f9 00       		.uleb128 .LVU909
 9170 08fa 00       		.uleb128 .LVU909
 9171 08fb 00       		.uleb128 0
 9172              	.LLST111:
 9173 08fc 48070000 		.4byte	.LVL248-.Ltext0
 9174 0900 69070000 		.4byte	.LVL251-1-.Ltext0
 9175 0904 0100     		.2byte	0x1
 9176 0906 50       		.byte	0x50
ARM GAS  /tmp/ccMyq1Ea.s 			page 231


 9177 0907 69070000 		.4byte	.LVL251-1-.Ltext0
 9178 090b 74070000 		.4byte	.LVL254-.Ltext0
 9179 090f 0100     		.2byte	0x1
 9180 0911 54       		.byte	0x54
 9181 0912 74070000 		.4byte	.LVL254-.Ltext0
 9182 0916 76070000 		.4byte	.LVL255-.Ltext0
 9183 091a 0100     		.2byte	0x1
 9184 091c 50       		.byte	0x50
 9185 091d 76070000 		.4byte	.LVL255-.Ltext0
 9186 0921 78070000 		.4byte	.LFE20-.Ltext0
 9187 0925 0100     		.2byte	0x1
 9188 0927 54       		.byte	0x54
 9189 0928 00000000 		.4byte	0
 9190 092c 00000000 		.4byte	0
 9191              	.LLST98:
 9192 0930 E4060000 		.4byte	.LFB19-.Ltext0
 9193 0934 E8060000 		.4byte	.LCFI31-.Ltext0
 9194 0938 0200     		.2byte	0x2
 9195 093a 7D       		.byte	0x7d
 9196 093b 00       		.sleb128 0
 9197 093c E8060000 		.4byte	.LCFI31-.Ltext0
 9198 0940 48070000 		.4byte	.LFE19-.Ltext0
 9199 0944 0200     		.2byte	0x2
 9200 0946 7D       		.byte	0x7d
 9201 0947 18       		.sleb128 24
 9202 0948 00000000 		.4byte	0
 9203 094c 00000000 		.4byte	0
 9204              	.LVUS99:
 9205 0950 00       		.uleb128 0
 9206 0951 00       		.uleb128 .LVU841
 9207 0952 00       		.uleb128 .LVU841
 9208 0953 00       		.uleb128 .LVU869
 9209 0954 00       		.uleb128 .LVU869
 9210 0955 00       		.uleb128 .LVU871
 9211 0956 00       		.uleb128 .LVU871
 9212 0957 00       		.uleb128 0
 9213              	.LLST99:
 9214 0958 E4060000 		.4byte	.LVL233-.Ltext0
 9215 095c 0F070000 		.4byte	.LVL238-1-.Ltext0
 9216 0960 0100     		.2byte	0x1
 9217 0962 50       		.byte	0x50
 9218 0963 0F070000 		.4byte	.LVL238-1-.Ltext0
 9219 0967 44070000 		.4byte	.LVL246-.Ltext0
 9220 096b 0100     		.2byte	0x1
 9221 096d 55       		.byte	0x55
 9222 096e 44070000 		.4byte	.LVL246-.Ltext0
 9223 0972 46070000 		.4byte	.LVL247-.Ltext0
 9224 0976 0100     		.2byte	0x1
 9225 0978 50       		.byte	0x50
 9226 0979 46070000 		.4byte	.LVL247-.Ltext0
 9227 097d 48070000 		.4byte	.LFE19-.Ltext0
 9228 0981 0100     		.2byte	0x1
 9229 0983 55       		.byte	0x55
 9230 0984 00000000 		.4byte	0
 9231 0988 00000000 		.4byte	0
 9232              	.LVUS100:
 9233 098c 00       		.uleb128 0
ARM GAS  /tmp/ccMyq1Ea.s 			page 232


 9234 098d 00       		.uleb128 .LVU841
 9235 098e 00       		.uleb128 .LVU841
 9236 098f 00       		.uleb128 .LVU869
 9237 0990 00       		.uleb128 .LVU869
 9238 0991 00       		.uleb128 0
 9239              	.LLST100:
 9240 0992 E4060000 		.4byte	.LVL233-.Ltext0
 9241 0996 0F070000 		.4byte	.LVL238-1-.Ltext0
 9242 099a 0100     		.2byte	0x1
 9243 099c 51       		.byte	0x51
 9244 099d 0F070000 		.4byte	.LVL238-1-.Ltext0
 9245 09a1 44070000 		.4byte	.LVL246-.Ltext0
 9246 09a5 0A00     		.2byte	0xa
 9247 09a7 F3       		.byte	0xf3
 9248 09a8 03       		.uleb128 0x3
 9249 09a9 F5       		.byte	0xf5
 9250 09aa 01       		.uleb128 0x1
 9251 09ab 25       		.uleb128 0x25
 9252 09ac F7       		.byte	0xf7
 9253 09ad 2C       		.uleb128 0x2c
 9254 09ae F7       		.byte	0xf7
 9255 09af 00       		.uleb128 0
 9256 09b0 9F       		.byte	0x9f
 9257 09b1 44070000 		.4byte	.LVL246-.Ltext0
 9258 09b5 48070000 		.4byte	.LFE19-.Ltext0
 9259 09b9 0100     		.2byte	0x1
 9260 09bb 51       		.byte	0x51
 9261 09bc 00000000 		.4byte	0
 9262 09c0 00000000 		.4byte	0
 9263              	.LVUS101:
 9264 09c4 00       		.uleb128 0
 9265 09c5 00       		.uleb128 .LVU841
 9266 09c6 00       		.uleb128 .LVU841
 9267 09c7 00       		.uleb128 .LVU869
 9268 09c8 00       		.uleb128 .LVU869
 9269 09c9 00       		.uleb128 0
 9270              	.LLST101:
 9271 09ca E4060000 		.4byte	.LVL233-.Ltext0
 9272 09ce 0F070000 		.4byte	.LVL238-1-.Ltext0
 9273 09d2 0100     		.2byte	0x1
 9274 09d4 52       		.byte	0x52
 9275 09d5 0F070000 		.4byte	.LVL238-1-.Ltext0
 9276 09d9 44070000 		.4byte	.LVL246-.Ltext0
 9277 09dd 0100     		.2byte	0x1
 9278 09df 58       		.byte	0x58
 9279 09e0 44070000 		.4byte	.LVL246-.Ltext0
 9280 09e4 48070000 		.4byte	.LFE19-.Ltext0
 9281 09e8 0100     		.2byte	0x1
 9282 09ea 52       		.byte	0x52
 9283 09eb 00000000 		.4byte	0
 9284 09ef 00000000 		.4byte	0
 9285              	.LVUS102:
 9286 09f3 00       		.uleb128 .LVU857
 9287 09f4 00       		.uleb128 .LVU865
 9288              	.LLST102:
 9289 09f5 32070000 		.4byte	.LVL241-.Ltext0
 9290 09f9 3A070000 		.4byte	.LVL243-.Ltext0
ARM GAS  /tmp/ccMyq1Ea.s 			page 233


 9291 09fd 0100     		.2byte	0x1
 9292 09ff 50       		.byte	0x50
 9293 0a00 00000000 		.4byte	0
 9294 0a04 00000000 		.4byte	0
 9295              	.LVUS103:
 9296 0a08 04       		.uleb128 .LVU819
 9297 0a09 00       		.uleb128 .LVU841
 9298 0a0a 00       		.uleb128 .LVU841
 9299 0a0b 00       		.uleb128 .LVU869
 9300 0a0c 00       		.uleb128 .LVU869
 9301 0a0d 00       		.uleb128 .LVU871
 9302 0a0e 00       		.uleb128 .LVU871
 9303 0a0f 00       		.uleb128 0
 9304              	.LLST103:
 9305 0a10 E4060000 		.4byte	.LVL233-.Ltext0
 9306 0a14 0F070000 		.4byte	.LVL238-1-.Ltext0
 9307 0a18 0100     		.2byte	0x1
 9308 0a1a 50       		.byte	0x50
 9309 0a1b 0F070000 		.4byte	.LVL238-1-.Ltext0
 9310 0a1f 44070000 		.4byte	.LVL246-.Ltext0
 9311 0a23 0100     		.2byte	0x1
 9312 0a25 55       		.byte	0x55
 9313 0a26 44070000 		.4byte	.LVL246-.Ltext0
 9314 0a2a 46070000 		.4byte	.LVL247-.Ltext0
 9315 0a2e 0100     		.2byte	0x1
 9316 0a30 50       		.byte	0x50
 9317 0a31 46070000 		.4byte	.LVL247-.Ltext0
 9318 0a35 48070000 		.4byte	.LFE19-.Ltext0
 9319 0a39 0100     		.2byte	0x1
 9320 0a3b 55       		.byte	0x55
 9321 0a3c 00000000 		.4byte	0
 9322 0a40 00000000 		.4byte	0
 9323              	.LVUS104:
 9324 0a44 00       		.uleb128 .LVU833
 9325 0a45 00       		.uleb128 .LVU838
 9326 0a46 00       		.uleb128 .LVU838
 9327 0a47 00       		.uleb128 .LVU857
 9328 0a48 00       		.uleb128 .LVU865
 9329 0a49 00       		.uleb128 .LVU869
 9330 0a4a 00       		.uleb128 .LVU869
 9331 0a4b 00       		.uleb128 0
 9332              	.LLST104:
 9333 0a4c 02070000 		.4byte	.LVL235-.Ltext0
 9334 0a50 0A070000 		.4byte	.LVL236-.Ltext0
 9335 0a54 0100     		.2byte	0x1
 9336 0a56 54       		.byte	0x54
 9337 0a57 0A070000 		.4byte	.LVL236-.Ltext0
 9338 0a5b 32070000 		.4byte	.LVL241-.Ltext0
 9339 0a5f 0300     		.2byte	0x3
 9340 0a61 74       		.byte	0x74
 9341 0a62 01       		.sleb128 1
 9342 0a63 9F       		.byte	0x9f
 9343 0a64 3A070000 		.4byte	.LVL243-.Ltext0
 9344 0a68 44070000 		.4byte	.LVL246-.Ltext0
 9345 0a6c 0300     		.2byte	0x3
 9346 0a6e 74       		.byte	0x74
 9347 0a6f 01       		.sleb128 1
ARM GAS  /tmp/ccMyq1Ea.s 			page 234


 9348 0a70 9F       		.byte	0x9f
 9349 0a71 44070000 		.4byte	.LVL246-.Ltext0
 9350 0a75 48070000 		.4byte	.LFE19-.Ltext0
 9351 0a79 0100     		.2byte	0x1
 9352 0a7b 54       		.byte	0x54
 9353 0a7c 00000000 		.4byte	0
 9354 0a80 00000000 		.4byte	0
 9355              	.LVUS105:
 9356 0a84 00       		.uleb128 .LVU839
 9357 0a85 00       		.uleb128 .LVU856
 9358 0a86 00       		.uleb128 .LVU865
 9359 0a87 00       		.uleb128 .LVU867
 9360 0a88 00       		.uleb128 .LVU867
 9361 0a89 00       		.uleb128 .LVU868
 9362 0a8a 00       		.uleb128 .LVU868
 9363 0a8b 00       		.uleb128 .LVU869
 9364              	.LLST105:
 9365 0a8c 0C070000 		.4byte	.LVL237-.Ltext0
 9366 0a90 30070000 		.4byte	.LVL240-.Ltext0
 9367 0a94 0100     		.2byte	0x1
 9368 0a96 56       		.byte	0x56
 9369 0a97 3A070000 		.4byte	.LVL243-.Ltext0
 9370 0a9b 3C070000 		.4byte	.LVL244-.Ltext0
 9371 0a9f 0100     		.2byte	0x1
 9372 0aa1 56       		.byte	0x56
 9373 0aa2 3C070000 		.4byte	.LVL244-.Ltext0
 9374 0aa6 3E070000 		.4byte	.LVL245-.Ltext0
 9375 0aaa 0300     		.2byte	0x3
 9376 0aac 76       		.byte	0x76
 9377 0aad 7F       		.sleb128 -1
 9378 0aae 9F       		.byte	0x9f
 9379 0aaf 3E070000 		.4byte	.LVL245-.Ltext0
 9380 0ab3 44070000 		.4byte	.LVL246-.Ltext0
 9381 0ab7 0300     		.2byte	0x3
 9382 0ab9 73       		.byte	0x73
 9383 0aba 7F       		.sleb128 -1
 9384 0abb 9F       		.byte	0x9f
 9385 0abc 00000000 		.4byte	0
 9386 0ac0 00000000 		.4byte	0
 9387              	.LLST90:
 9388 0ac4 F8050000 		.4byte	.LFB18-.Ltext0
 9389 0ac8 FA050000 		.4byte	.LCFI27-.Ltext0
 9390 0acc 0200     		.2byte	0x2
 9391 0ace 7D       		.byte	0x7d
 9392 0acf 00       		.sleb128 0
 9393 0ad0 FA050000 		.4byte	.LCFI27-.Ltext0
 9394 0ad4 04060000 		.4byte	.LCFI28-.Ltext0
 9395 0ad8 0200     		.2byte	0x2
 9396 0ada 7D       		.byte	0x7d
 9397 0adb 14       		.sleb128 20
 9398 0adc 04060000 		.4byte	.LCFI28-.Ltext0
 9399 0ae0 44060000 		.4byte	.LCFI29-.Ltext0
 9400 0ae4 0200     		.2byte	0x2
 9401 0ae6 7D       		.byte	0x7d
 9402 0ae7 28       		.sleb128 40
 9403 0ae8 44060000 		.4byte	.LCFI29-.Ltext0
 9404 0aec 46060000 		.4byte	.LCFI30-.Ltext0
ARM GAS  /tmp/ccMyq1Ea.s 			page 235


 9405 0af0 0200     		.2byte	0x2
 9406 0af2 7D       		.byte	0x7d
 9407 0af3 14       		.sleb128 20
 9408 0af4 46060000 		.4byte	.LCFI30-.Ltext0
 9409 0af8 E4060000 		.4byte	.LFE18-.Ltext0
 9410 0afc 0200     		.2byte	0x2
 9411 0afe 7D       		.byte	0x7d
 9412 0aff 28       		.sleb128 40
 9413 0b00 00000000 		.4byte	0
 9414 0b04 00000000 		.4byte	0
 9415              	.LVUS91:
 9416 0b08 00       		.uleb128 0
 9417 0b09 00       		.uleb128 .LVU737
 9418 0b0a 00       		.uleb128 .LVU737
 9419 0b0b 00       		.uleb128 0
 9420              	.LLST91:
 9421 0b0c F8050000 		.4byte	.LVL204-.Ltext0
 9422 0b10 06060000 		.4byte	.LVL206-.Ltext0
 9423 0b14 0100     		.2byte	0x1
 9424 0b16 50       		.byte	0x50
 9425 0b17 06060000 		.4byte	.LVL206-.Ltext0
 9426 0b1b E4060000 		.4byte	.LFE18-.Ltext0
 9427 0b1f 0100     		.2byte	0x1
 9428 0b21 54       		.byte	0x54
 9429 0b22 00000000 		.4byte	0
 9430 0b26 00000000 		.4byte	0
 9431              	.LVUS92:
 9432 0b2a 00       		.uleb128 0
 9433 0b2b 00       		.uleb128 .LVU737
 9434 0b2c 00       		.uleb128 .LVU737
 9435 0b2d 00       		.uleb128 0
 9436              	.LLST92:
 9437 0b2e F8050000 		.4byte	.LVL204-.Ltext0
 9438 0b32 06060000 		.4byte	.LVL206-.Ltext0
 9439 0b36 0100     		.2byte	0x1
 9440 0b38 51       		.byte	0x51
 9441 0b39 06060000 		.4byte	.LVL206-.Ltext0
 9442 0b3d E4060000 		.4byte	.LFE18-.Ltext0
 9443 0b41 0100     		.2byte	0x1
 9444 0b43 55       		.byte	0x55
 9445 0b44 00000000 		.4byte	0
 9446 0b48 00000000 		.4byte	0
 9447              	.LVUS93:
 9448 0b4c 00       		.uleb128 0
 9449 0b4d 00       		.uleb128 .LVU737
 9450              	.LLST93:
 9451 0b4e F8050000 		.4byte	.LVL204-.Ltext0
 9452 0b52 06060000 		.4byte	.LVL206-.Ltext0
 9453 0b56 0100     		.2byte	0x1
 9454 0b58 52       		.byte	0x52
 9455 0b59 00000000 		.4byte	0
 9456 0b5d 00000000 		.4byte	0
 9457              	.LVUS94:
 9458 0b61 02       		.uleb128 .LVU727
 9459 0b62 00       		.uleb128 .LVU737
 9460 0b63 00       		.uleb128 .LVU737
 9461 0b64 00       		.uleb128 .LVU749
ARM GAS  /tmp/ccMyq1Ea.s 			page 236


 9462 0b65 00       		.uleb128 .LVU769
 9463 0b66 02       		.uleb128 .LVU775
 9464 0b67 00       		.uleb128 .LVU776
 9465 0b68 01       		.uleb128 .LVU780
 9466 0b69 01       		.uleb128 .LVU780
 9467 0b6a 00       		.uleb128 0
 9468              	.LLST94:
 9469 0b6b F8050000 		.4byte	.LVL204-.Ltext0
 9470 0b6f 06060000 		.4byte	.LVL206-.Ltext0
 9471 0b73 0200     		.2byte	0x2
 9472 0b75 30       		.byte	0x30
 9473 0b76 9F       		.byte	0x9f
 9474 0b77 06060000 		.4byte	.LVL206-.Ltext0
 9475 0b7b 14060000 		.4byte	.LVL209-.Ltext0
 9476 0b7f 0100     		.2byte	0x1
 9477 0b81 56       		.byte	0x56
 9478 0b82 46060000 		.4byte	.LVL214-.Ltext0
 9479 0b86 4E060000 		.4byte	.LVL216-.Ltext0
 9480 0b8a 0100     		.2byte	0x1
 9481 0b8c 56       		.byte	0x56
 9482 0b8d 52060000 		.4byte	.LVL217-.Ltext0
 9483 0b91 5A060000 		.4byte	.LVL218-.Ltext0
 9484 0b95 0100     		.2byte	0x1
 9485 0b97 56       		.byte	0x56
 9486 0b98 5A060000 		.4byte	.LVL218-.Ltext0
 9487 0b9c E4060000 		.4byte	.LFE18-.Ltext0
 9488 0ba0 0200     		.2byte	0x2
 9489 0ba2 31       		.byte	0x31
 9490 0ba3 9F       		.byte	0x9f
 9491 0ba4 00000000 		.4byte	0
 9492 0ba8 00000000 		.4byte	0
 9493              	.LVUS95:
 9494 0bac 00       		.uleb128 .LVU749
 9495 0bad 00       		.uleb128 .LVU767
 9496              	.LLST95:
 9497 0bae 14060000 		.4byte	.LVL209-.Ltext0
 9498 0bb2 42060000 		.4byte	.LVL213-.Ltext0
 9499 0bb6 0100     		.2byte	0x1
 9500 0bb8 56       		.byte	0x56
 9501 0bb9 00000000 		.4byte	0
 9502 0bbd 00000000 		.4byte	0
 9503              	.LVUS96:
 9504 0bc1 00       		.uleb128 .LVU733
 9505 0bc2 00       		.uleb128 .LVU737
 9506 0bc3 00       		.uleb128 .LVU737
 9507 0bc4 00       		.uleb128 0
 9508              	.LLST96:
 9509 0bc5 FE050000 		.4byte	.LVL205-.Ltext0
 9510 0bc9 06060000 		.4byte	.LVL206-.Ltext0
 9511 0bcd 0100     		.2byte	0x1
 9512 0bcf 50       		.byte	0x50
 9513 0bd0 06060000 		.4byte	.LVL206-.Ltext0
 9514 0bd4 E4060000 		.4byte	.LFE18-.Ltext0
 9515 0bd8 0100     		.2byte	0x1
 9516 0bda 54       		.byte	0x54
 9517 0bdb 00000000 		.4byte	0
 9518 0bdf 00000000 		.4byte	0
ARM GAS  /tmp/ccMyq1Ea.s 			page 237


 9519              	.LVUS97:
 9520 0be3 00       		.uleb128 .LVU744
 9521 0be4 00       		.uleb128 .LVU750
 9522 0be5 00       		.uleb128 .LVU769
 9523 0be6 00       		.uleb128 .LVU771
 9524              	.LLST97:
 9525 0be7 0C060000 		.4byte	.LVL208-.Ltext0
 9526 0beb 17060000 		.4byte	.LVL210-1-.Ltext0
 9527 0bef 0100     		.2byte	0x1
 9528 0bf1 53       		.byte	0x53
 9529 0bf2 46060000 		.4byte	.LVL214-.Ltext0
 9530 0bf6 48060000 		.4byte	.LVL215-.Ltext0
 9531 0bfa 0100     		.2byte	0x1
 9532 0bfc 53       		.byte	0x53
 9533 0bfd 00000000 		.4byte	0
 9534 0c01 00000000 		.4byte	0
 9535              	.LLST75:
 9536 0c05 AE040000 		.4byte	.LFB17-.Ltext0
 9537 0c09 B0040000 		.4byte	.LCFI22-.Ltext0
 9538 0c0d 0200     		.2byte	0x2
 9539 0c0f 7D       		.byte	0x7d
 9540 0c10 00       		.sleb128 0
 9541 0c11 B0040000 		.4byte	.LCFI22-.Ltext0
 9542 0c15 BA040000 		.4byte	.LCFI23-.Ltext0
 9543 0c19 0200     		.2byte	0x2
 9544 0c1b 7D       		.byte	0x7d
 9545 0c1c 14       		.sleb128 20
 9546 0c1d BA040000 		.4byte	.LCFI23-.Ltext0
 9547 0c21 FC040000 		.4byte	.LCFI24-.Ltext0
 9548 0c25 0200     		.2byte	0x2
 9549 0c27 7D       		.byte	0x7d
 9550 0c28 28       		.sleb128 40
 9551 0c29 FC040000 		.4byte	.LCFI24-.Ltext0
 9552 0c2d FE040000 		.4byte	.LCFI25-.Ltext0
 9553 0c31 0200     		.2byte	0x2
 9554 0c33 7D       		.byte	0x7d
 9555 0c34 14       		.sleb128 20
 9556 0c35 FE040000 		.4byte	.LCFI25-.Ltext0
 9557 0c39 CA050000 		.4byte	.LFE17-.Ltext0
 9558 0c3d 0200     		.2byte	0x2
 9559 0c3f 7D       		.byte	0x7d
 9560 0c40 28       		.sleb128 40
 9561 0c41 00000000 		.4byte	0
 9562 0c45 00000000 		.4byte	0
 9563              	.LVUS76:
 9564 0c49 00       		.uleb128 0
 9565 0c4a 00       		.uleb128 .LVU598
 9566 0c4b 00       		.uleb128 .LVU598
 9567 0c4c 00       		.uleb128 0
 9568              	.LLST76:
 9569 0c4d AE040000 		.4byte	.LVL161-.Ltext0
 9570 0c51 BC040000 		.4byte	.LVL163-.Ltext0
 9571 0c55 0100     		.2byte	0x1
 9572 0c57 50       		.byte	0x50
 9573 0c58 BC040000 		.4byte	.LVL163-.Ltext0
 9574 0c5c CA050000 		.4byte	.LFE17-.Ltext0
 9575 0c60 0100     		.2byte	0x1
ARM GAS  /tmp/ccMyq1Ea.s 			page 238


 9576 0c62 54       		.byte	0x54
 9577 0c63 00000000 		.4byte	0
 9578 0c67 00000000 		.4byte	0
 9579              	.LVUS77:
 9580 0c6b 00       		.uleb128 0
 9581 0c6c 00       		.uleb128 .LVU598
 9582              	.LLST77:
 9583 0c6d AE040000 		.4byte	.LVL161-.Ltext0
 9584 0c71 BC040000 		.4byte	.LVL163-.Ltext0
 9585 0c75 0100     		.2byte	0x1
 9586 0c77 51       		.byte	0x51
 9587 0c78 00000000 		.4byte	0
 9588 0c7c 00000000 		.4byte	0
 9589              	.LVUS78:
 9590 0c80 02       		.uleb128 .LVU588
 9591 0c81 00       		.uleb128 .LVU598
 9592 0c82 00       		.uleb128 .LVU598
 9593 0c83 00       		.uleb128 .LVU632
 9594 0c84 00       		.uleb128 .LVU634
 9595 0c85 00       		.uleb128 .LVU637
 9596 0c86 00       		.uleb128 .LVU640
 9597 0c87 01       		.uleb128 .LVU644
 9598 0c88 01       		.uleb128 .LVU644
 9599 0c89 00       		.uleb128 0
 9600              	.LLST78:
 9601 0c8a AE040000 		.4byte	.LVL161-.Ltext0
 9602 0c8e BC040000 		.4byte	.LVL163-.Ltext0
 9603 0c92 0200     		.2byte	0x2
 9604 0c94 30       		.byte	0x30
 9605 0c95 9F       		.byte	0x9f
 9606 0c96 BC040000 		.4byte	.LVL163-.Ltext0
 9607 0c9a FA040000 		.4byte	.LVL171-.Ltext0
 9608 0c9e 0100     		.2byte	0x1
 9609 0ca0 57       		.byte	0x57
 9610 0ca1 FE040000 		.4byte	.LVL172-.Ltext0
 9611 0ca5 02050000 		.4byte	.LVL174-.Ltext0
 9612 0ca9 0100     		.2byte	0x1
 9613 0cab 57       		.byte	0x57
 9614 0cac 0A050000 		.4byte	.LVL176-.Ltext0
 9615 0cb0 12050000 		.4byte	.LVL177-.Ltext0
 9616 0cb4 0100     		.2byte	0x1
 9617 0cb6 57       		.byte	0x57
 9618 0cb7 12050000 		.4byte	.LVL177-.Ltext0
 9619 0cbb CA050000 		.4byte	.LFE17-.Ltext0
 9620 0cbf 0200     		.2byte	0x2
 9621 0cc1 31       		.byte	0x31
 9622 0cc2 9F       		.byte	0x9f
 9623 0cc3 00000000 		.4byte	0
 9624 0cc7 00000000 		.4byte	0
 9625              	.LVUS79:
 9626 0ccb 00       		.uleb128 .LVU593
 9627 0ccc 00       		.uleb128 .LVU598
 9628 0ccd 00       		.uleb128 .LVU598
 9629 0cce 00       		.uleb128 0
 9630              	.LLST79:
 9631 0ccf B4040000 		.4byte	.LVL162-.Ltext0
 9632 0cd3 BC040000 		.4byte	.LVL163-.Ltext0
ARM GAS  /tmp/ccMyq1Ea.s 			page 239


 9633 0cd7 0100     		.2byte	0x1
 9634 0cd9 50       		.byte	0x50
 9635 0cda BC040000 		.4byte	.LVL163-.Ltext0
 9636 0cde CA050000 		.4byte	.LFE17-.Ltext0
 9637 0ce2 0100     		.2byte	0x1
 9638 0ce4 54       		.byte	0x54
 9639 0ce5 00000000 		.4byte	0
 9640 0ce9 00000000 		.4byte	0
 9641              	.LVUS80:
 9642 0ced 01       		.uleb128 .LVU594
 9643 0cee 00       		.uleb128 .LVU598
 9644 0cef 00       		.uleb128 .LVU665
 9645 0cf0 00       		.uleb128 .LVU666
 9646 0cf1 00       		.uleb128 .LVU666
 9647 0cf2 00       		.uleb128 .LVU666
 9648              	.LLST80:
 9649 0cf3 B4040000 		.4byte	.LVL162-.Ltext0
 9650 0cf7 BC040000 		.4byte	.LVL163-.Ltext0
 9651 0cfb 0200     		.2byte	0x2
 9652 0cfd 30       		.byte	0x30
 9653 0cfe 9F       		.byte	0x9f
 9654 0cff 5C050000 		.4byte	.LVL186-.Ltext0
 9655 0d03 5F050000 		.4byte	.LVL187-1-.Ltext0
 9656 0d07 0100     		.2byte	0x1
 9657 0d09 50       		.byte	0x50
 9658 0d0a 5F050000 		.4byte	.LVL187-1-.Ltext0
 9659 0d0e 60050000 		.4byte	.LVL187-.Ltext0
 9660 0d12 0100     		.2byte	0x1
 9661 0d14 55       		.byte	0x55
 9662 0d15 00000000 		.4byte	0
 9663 0d19 00000000 		.4byte	0
 9664              	.LVUS81:
 9665 0d1d 00       		.uleb128 .LVU605
 9666 0d1e 00       		.uleb128 .LVU610
 9667 0d1f 00       		.uleb128 .LVU610
 9668 0d20 00       		.uleb128 .LVU613
 9669 0d21 00       		.uleb128 .LVU613
 9670 0d22 00       		.uleb128 .LVU616
 9671 0d23 00       		.uleb128 .LVU634
 9672 0d24 00       		.uleb128 .LVU636
 9673              	.LLST81:
 9674 0d25 C2040000 		.4byte	.LVL165-.Ltext0
 9675 0d29 C6040000 		.4byte	.LVL166-.Ltext0
 9676 0d2d 0100     		.2byte	0x1
 9677 0d2f 53       		.byte	0x53
 9678 0d30 C6040000 		.4byte	.LVL166-.Ltext0
 9679 0d34 CA040000 		.4byte	.LVL167-.Ltext0
 9680 0d38 0300     		.2byte	0x3
 9681 0d3a 73       		.byte	0x73
 9682 0d3b 01       		.sleb128 1
 9683 0d3c 9F       		.byte	0x9f
 9684 0d3d CA040000 		.4byte	.LVL167-.Ltext0
 9685 0d41 CF040000 		.4byte	.LVL168-1-.Ltext0
 9686 0d45 0600     		.2byte	0x6
 9687 0d47 74       		.byte	0x74
 9688 0d48 38       		.sleb128 56
 9689 0d49 06       		.byte	0x6
ARM GAS  /tmp/ccMyq1Ea.s 			page 240


 9690 0d4a 23       		.byte	0x23
 9691 0d4b 01       		.uleb128 0x1
 9692 0d4c 9F       		.byte	0x9f
 9693 0d4d FE040000 		.4byte	.LVL172-.Ltext0
 9694 0d51 00050000 		.4byte	.LVL173-.Ltext0
 9695 0d55 0100     		.2byte	0x1
 9696 0d57 53       		.byte	0x53
 9697 0d58 00000000 		.4byte	0
 9698 0d5c 00000000 		.4byte	0
 9699              	.LVUS82:
 9700 0d60 01       		.uleb128 .LVU700
 9701 0d61 00       		.uleb128 .LVU702
 9702              	.LLST82:
 9703 0d62 C2050000 		.4byte	.LVL197-.Ltext0
 9704 0d66 C7050000 		.4byte	.LVL198-1-.Ltext0
 9705 0d6a 0100     		.2byte	0x1
 9706 0d6c 51       		.byte	0x51
 9707 0d6d 00000000 		.4byte	0
 9708 0d71 00000000 		.4byte	0
 9709              	.LVUS83:
 9710 0d75 02       		.uleb128 .LVU691
 9711 0d76 01       		.uleb128 .LVU700
 9712              	.LLST83:
 9713 0d77 B6050000 		.4byte	.LVL196-.Ltext0
 9714 0d7b C2050000 		.4byte	.LVL197-.Ltext0
 9715 0d7f 0100     		.2byte	0x1
 9716 0d81 54       		.byte	0x54
 9717 0d82 00000000 		.4byte	0
 9718 0d86 00000000 		.4byte	0
 9719              	.LVUS84:
 9720 0d8a 00       		.uleb128 .LVU699
 9721 0d8b 01       		.uleb128 .LVU700
 9722              	.LLST84:
 9723 0d8c C2050000 		.4byte	.LVL197-.Ltext0
 9724 0d90 C2050000 		.4byte	.LVL197-.Ltext0
 9725 0d94 0100     		.2byte	0x1
 9726 0d96 51       		.byte	0x51
 9727 0d97 00000000 		.4byte	0
 9728 0d9b 00000000 		.4byte	0
 9729              	.LLST68:
 9730 0d9f C0030000 		.4byte	.LFB16-.Ltext0
 9731 0da3 C4030000 		.4byte	.LCFI19-.Ltext0
 9732 0da7 0200     		.2byte	0x2
 9733 0da9 7D       		.byte	0x7d
 9734 0daa 00       		.sleb128 0
 9735 0dab C4030000 		.4byte	.LCFI19-.Ltext0
 9736 0daf 0C040000 		.4byte	.LCFI20-.Ltext0
 9737 0db3 0200     		.2byte	0x2
 9738 0db5 7D       		.byte	0x7d
 9739 0db6 28       		.sleb128 40
 9740 0db7 0C040000 		.4byte	.LCFI20-.Ltext0
 9741 0dbb 10040000 		.4byte	.LCFI21-.Ltext0
 9742 0dbf 0200     		.2byte	0x2
 9743 0dc1 7D       		.byte	0x7d
 9744 0dc2 18       		.sleb128 24
 9745 0dc3 10040000 		.4byte	.LCFI21-.Ltext0
 9746 0dc7 AE040000 		.4byte	.LFE16-.Ltext0
ARM GAS  /tmp/ccMyq1Ea.s 			page 241


 9747 0dcb 0200     		.2byte	0x2
 9748 0dcd 7D       		.byte	0x7d
 9749 0dce 28       		.sleb128 40
 9750 0dcf 00000000 		.4byte	0
 9751 0dd3 00000000 		.4byte	0
 9752              	.LVUS69:
 9753 0dd7 00       		.uleb128 0
 9754 0dd8 00       		.uleb128 .LVU510
 9755 0dd9 00       		.uleb128 .LVU510
 9756 0dda 00       		.uleb128 0
 9757              	.LLST69:
 9758 0ddb C0030000 		.4byte	.LVL133-.Ltext0
 9759 0ddf CE030000 		.4byte	.LVL135-.Ltext0
 9760 0de3 0100     		.2byte	0x1
 9761 0de5 50       		.byte	0x50
 9762 0de6 CE030000 		.4byte	.LVL135-.Ltext0
 9763 0dea AE040000 		.4byte	.LFE16-.Ltext0
 9764 0dee 0100     		.2byte	0x1
 9765 0df0 54       		.byte	0x54
 9766 0df1 00000000 		.4byte	0
 9767 0df5 00000000 		.4byte	0
 9768              	.LVUS70:
 9769 0df9 00       		.uleb128 0
 9770 0dfa 00       		.uleb128 .LVU510
 9771 0dfb 00       		.uleb128 .LVU510
 9772 0dfc 00       		.uleb128 0
 9773              	.LLST70:
 9774 0dfd C0030000 		.4byte	.LVL133-.Ltext0
 9775 0e01 CE030000 		.4byte	.LVL135-.Ltext0
 9776 0e05 0100     		.2byte	0x1
 9777 0e07 51       		.byte	0x51
 9778 0e08 CE030000 		.4byte	.LVL135-.Ltext0
 9779 0e0c AE040000 		.4byte	.LFE16-.Ltext0
 9780 0e10 0100     		.2byte	0x1
 9781 0e12 56       		.byte	0x56
 9782 0e13 00000000 		.4byte	0
 9783 0e17 00000000 		.4byte	0
 9784              	.LVUS71:
 9785 0e1b 00       		.uleb128 0
 9786 0e1c 00       		.uleb128 .LVU510
 9787              	.LLST71:
 9788 0e1d C0030000 		.4byte	.LVL133-.Ltext0
 9789 0e21 CE030000 		.4byte	.LVL135-.Ltext0
 9790 0e25 0100     		.2byte	0x1
 9791 0e27 52       		.byte	0x52
 9792 0e28 00000000 		.4byte	0
 9793 0e2c 00000000 		.4byte	0
 9794              	.LVUS72:
 9795 0e30 02       		.uleb128 .LVU502
 9796 0e31 00       		.uleb128 .LVU510
 9797 0e32 00       		.uleb128 .LVU510
 9798 0e33 00       		.uleb128 .LVU539
 9799 0e34 00       		.uleb128 .LVU541
 9800 0e35 02       		.uleb128 .LVU546
 9801 0e36 00       		.uleb128 .LVU547
 9802 0e37 01       		.uleb128 .LVU551
 9803 0e38 01       		.uleb128 .LVU551
ARM GAS  /tmp/ccMyq1Ea.s 			page 242


 9804 0e39 00       		.uleb128 0
 9805              	.LLST72:
 9806 0e3a C0030000 		.4byte	.LVL133-.Ltext0
 9807 0e3e CE030000 		.4byte	.LVL135-.Ltext0
 9808 0e42 0200     		.2byte	0x2
 9809 0e44 30       		.byte	0x30
 9810 0e45 9F       		.byte	0x9f
 9811 0e46 CE030000 		.4byte	.LVL135-.Ltext0
 9812 0e4a 0A040000 		.4byte	.LVL142-.Ltext0
 9813 0e4e 0100     		.2byte	0x1
 9814 0e50 57       		.byte	0x57
 9815 0e51 10040000 		.4byte	.LVL143-.Ltext0
 9816 0e55 18040000 		.4byte	.LVL144-.Ltext0
 9817 0e59 0100     		.2byte	0x1
 9818 0e5b 57       		.byte	0x57
 9819 0e5c 1C040000 		.4byte	.LVL145-.Ltext0
 9820 0e60 24040000 		.4byte	.LVL146-.Ltext0
 9821 0e64 0100     		.2byte	0x1
 9822 0e66 57       		.byte	0x57
 9823 0e67 24040000 		.4byte	.LVL146-.Ltext0
 9824 0e6b AE040000 		.4byte	.LFE16-.Ltext0
 9825 0e6f 0200     		.2byte	0x2
 9826 0e71 31       		.byte	0x31
 9827 0e72 9F       		.byte	0x9f
 9828 0e73 00000000 		.4byte	0
 9829 0e77 00000000 		.4byte	0
 9830              	.LVUS73:
 9831 0e7b 00       		.uleb128 .LVU507
 9832 0e7c 00       		.uleb128 .LVU510
 9833 0e7d 00       		.uleb128 .LVU510
 9834 0e7e 00       		.uleb128 0
 9835              	.LLST73:
 9836 0e7f C8030000 		.4byte	.LVL134-.Ltext0
 9837 0e83 CE030000 		.4byte	.LVL135-.Ltext0
 9838 0e87 0100     		.2byte	0x1
 9839 0e89 50       		.byte	0x50
 9840 0e8a CE030000 		.4byte	.LVL135-.Ltext0
 9841 0e8e AE040000 		.4byte	.LFE16-.Ltext0
 9842 0e92 0100     		.2byte	0x1
 9843 0e94 54       		.byte	0x54
 9844 0e95 00000000 		.4byte	0
 9845 0e99 00000000 		.4byte	0
 9846              	.LVUS74:
 9847 0e9d 00       		.uleb128 .LVU517
 9848 0e9e 00       		.uleb128 .LVU521
 9849 0e9f 00       		.uleb128 .LVU521
 9850 0ea0 00       		.uleb128 .LVU539
 9851 0ea1 00       		.uleb128 .LVU541
 9852 0ea2 00       		.uleb128 0
 9853              	.LLST74:
 9854 0ea3 D4030000 		.4byte	.LVL137-.Ltext0
 9855 0ea7 DC030000 		.4byte	.LVL138-.Ltext0
 9856 0eab 0100     		.2byte	0x1
 9857 0ead 55       		.byte	0x55
 9858 0eae DC030000 		.4byte	.LVL138-.Ltext0
 9859 0eb2 0A040000 		.4byte	.LVL142-.Ltext0
 9860 0eb6 0300     		.2byte	0x3
ARM GAS  /tmp/ccMyq1Ea.s 			page 243


 9861 0eb8 75       		.byte	0x75
 9862 0eb9 01       		.sleb128 1
 9863 0eba 9F       		.byte	0x9f
 9864 0ebb 10040000 		.4byte	.LVL143-.Ltext0
 9865 0ebf AE040000 		.4byte	.LFE16-.Ltext0
 9866 0ec3 0100     		.2byte	0x1
 9867 0ec5 55       		.byte	0x55
 9868 0ec6 00000000 		.4byte	0
 9869 0eca 00000000 		.4byte	0
 9870              	.LLST61:
 9871 0ece 6A030000 		.4byte	.LFB15-.Ltext0
 9872 0ed2 6C030000 		.4byte	.LCFI18-.Ltext0
 9873 0ed6 0200     		.2byte	0x2
 9874 0ed8 7D       		.byte	0x7d
 9875 0ed9 00       		.sleb128 0
 9876 0eda 6C030000 		.4byte	.LCFI18-.Ltext0
 9877 0ede C0030000 		.4byte	.LFE15-.Ltext0
 9878 0ee2 0200     		.2byte	0x2
 9879 0ee4 7D       		.byte	0x7d
 9880 0ee5 10       		.sleb128 16
 9881 0ee6 00000000 		.4byte	0
 9882 0eea 00000000 		.4byte	0
 9883              	.LVUS62:
 9884 0eee 00       		.uleb128 0
 9885 0eef 00       		.uleb128 .LVU479
 9886 0ef0 00       		.uleb128 .LVU479
 9887 0ef1 00       		.uleb128 .LVU480
 9888 0ef2 00       		.uleb128 .LVU480
 9889 0ef3 00       		.uleb128 .LVU493
 9890 0ef4 00       		.uleb128 .LVU493
 9891 0ef5 00       		.uleb128 .LVU499
 9892 0ef6 00       		.uleb128 .LVU499
 9893 0ef7 00       		.uleb128 0
 9894              	.LLST62:
 9895 0ef8 6A030000 		.4byte	.LVL117-.Ltext0
 9896 0efc 9E030000 		.4byte	.LVL124-.Ltext0
 9897 0f00 0100     		.2byte	0x1
 9898 0f02 50       		.byte	0x50
 9899 0f03 9E030000 		.4byte	.LVL124-.Ltext0
 9900 0f07 A1030000 		.4byte	.LVL125-1-.Ltext0
 9901 0f0b 0300     		.2byte	0x3
 9902 0f0d 70       		.byte	0x70
 9903 0f0e 5C       		.sleb128 -36
 9904 0f0f 9F       		.byte	0x9f
 9905 0f10 A1030000 		.4byte	.LVL125-1-.Ltext0
 9906 0f14 B2030000 		.4byte	.LVL128-.Ltext0
 9907 0f18 0A00     		.2byte	0xa
 9908 0f1a F3       		.byte	0xf3
 9909 0f1b 03       		.uleb128 0x3
 9910 0f1c F5       		.byte	0xf5
 9911 0f1d 00       		.uleb128 0
 9912 0f1e 25       		.uleb128 0x25
 9913 0f1f F7       		.byte	0xf7
 9914 0f20 2C       		.uleb128 0x2c
 9915 0f21 F7       		.byte	0xf7
 9916 0f22 00       		.uleb128 0
 9917 0f23 9F       		.byte	0x9f
ARM GAS  /tmp/ccMyq1Ea.s 			page 244


 9918 0f24 B2030000 		.4byte	.LVL128-.Ltext0
 9919 0f28 BE030000 		.4byte	.LVL132-.Ltext0
 9920 0f2c 0100     		.2byte	0x1
 9921 0f2e 50       		.byte	0x50
 9922 0f2f BE030000 		.4byte	.LVL132-.Ltext0
 9923 0f33 C0030000 		.4byte	.LFE15-.Ltext0
 9924 0f37 0A00     		.2byte	0xa
 9925 0f39 F3       		.byte	0xf3
 9926 0f3a 03       		.uleb128 0x3
 9927 0f3b F5       		.byte	0xf5
 9928 0f3c 00       		.uleb128 0
 9929 0f3d 25       		.uleb128 0x25
 9930 0f3e F7       		.byte	0xf7
 9931 0f3f 2C       		.uleb128 0x2c
 9932 0f40 F7       		.byte	0xf7
 9933 0f41 00       		.uleb128 0
 9934 0f42 9F       		.byte	0x9f
 9935 0f43 00000000 		.4byte	0
 9936 0f47 00000000 		.4byte	0
 9937              	.LVUS63:
 9938 0f4b 00       		.uleb128 0
 9939 0f4c 00       		.uleb128 .LVU466
 9940 0f4d 00       		.uleb128 .LVU466
 9941 0f4e 00       		.uleb128 .LVU497
 9942 0f4f 00       		.uleb128 .LVU497
 9943 0f50 00       		.uleb128 0
 9944              	.LLST63:
 9945 0f51 6A030000 		.4byte	.LVL117-.Ltext0
 9946 0f55 8E030000 		.4byte	.LVL120-.Ltext0
 9947 0f59 0100     		.2byte	0x1
 9948 0f5b 51       		.byte	0x51
 9949 0f5c 8E030000 		.4byte	.LVL120-.Ltext0
 9950 0f60 BC030000 		.4byte	.LVL131-.Ltext0
 9951 0f64 0100     		.2byte	0x1
 9952 0f66 54       		.byte	0x54
 9953 0f67 BC030000 		.4byte	.LVL131-.Ltext0
 9954 0f6b C0030000 		.4byte	.LFE15-.Ltext0
 9955 0f6f 0100     		.2byte	0x1
 9956 0f71 51       		.byte	0x51
 9957 0f72 00000000 		.4byte	0
 9958 0f76 00000000 		.4byte	0
 9959              	.LVUS64:
 9960 0f7a 00       		.uleb128 .LVU486
 9961 0f7b 00       		.uleb128 .LVU493
 9962              	.LLST64:
 9963 0f7c AC030000 		.4byte	.LVL126-.Ltext0
 9964 0f80 B2030000 		.4byte	.LVL128-.Ltext0
 9965 0f84 0100     		.2byte	0x1
 9966 0f86 50       		.byte	0x50
 9967 0f87 00000000 		.4byte	0
 9968 0f8b 00000000 		.4byte	0
 9969              	.LVUS65:
 9970 0f8f 04       		.uleb128 .LVU447
 9971 0f90 00       		.uleb128 .LVU479
 9972 0f91 00       		.uleb128 .LVU479
 9973 0f92 00       		.uleb128 .LVU480
 9974 0f93 00       		.uleb128 .LVU480
ARM GAS  /tmp/ccMyq1Ea.s 			page 245


 9975 0f94 00       		.uleb128 .LVU493
 9976 0f95 00       		.uleb128 .LVU493
 9977 0f96 00       		.uleb128 .LVU499
 9978 0f97 00       		.uleb128 .LVU499
 9979 0f98 00       		.uleb128 0
 9980              	.LLST65:
 9981 0f99 6A030000 		.4byte	.LVL117-.Ltext0
 9982 0f9d 9E030000 		.4byte	.LVL124-.Ltext0
 9983 0fa1 0100     		.2byte	0x1
 9984 0fa3 50       		.byte	0x50
 9985 0fa4 9E030000 		.4byte	.LVL124-.Ltext0
 9986 0fa8 A1030000 		.4byte	.LVL125-1-.Ltext0
 9987 0fac 0300     		.2byte	0x3
 9988 0fae 70       		.byte	0x70
 9989 0faf 5C       		.sleb128 -36
 9990 0fb0 9F       		.byte	0x9f
 9991 0fb1 A1030000 		.4byte	.LVL125-1-.Ltext0
 9992 0fb5 B2030000 		.4byte	.LVL128-.Ltext0
 9993 0fb9 0A00     		.2byte	0xa
 9994 0fbb F3       		.byte	0xf3
 9995 0fbc 03       		.uleb128 0x3
 9996 0fbd F5       		.byte	0xf5
 9997 0fbe 00       		.uleb128 0
 9998 0fbf 25       		.uleb128 0x25
 9999 0fc0 F7       		.byte	0xf7
 10000 0fc1 2C       		.uleb128 0x2c
 10001 0fc2 F7       		.byte	0xf7
 10002 0fc3 00       		.uleb128 0
 10003 0fc4 9F       		.byte	0x9f
 10004 0fc5 B2030000 		.4byte	.LVL128-.Ltext0
 10005 0fc9 BE030000 		.4byte	.LVL132-.Ltext0
 10006 0fcd 0100     		.2byte	0x1
 10007 0fcf 50       		.byte	0x50
 10008 0fd0 BE030000 		.4byte	.LVL132-.Ltext0
 10009 0fd4 C0030000 		.4byte	.LFE15-.Ltext0
 10010 0fd8 0A00     		.2byte	0xa
 10011 0fda F3       		.byte	0xf3
 10012 0fdb 03       		.uleb128 0x3
 10013 0fdc F5       		.byte	0xf5
 10014 0fdd 00       		.uleb128 0
 10015 0fde 25       		.uleb128 0x25
 10016 0fdf F7       		.byte	0xf7
 10017 0fe0 2C       		.uleb128 0x2c
 10018 0fe1 F7       		.byte	0xf7
 10019 0fe2 00       		.uleb128 0
 10020 0fe3 9F       		.byte	0x9f
 10021 0fe4 00000000 		.4byte	0
 10022 0fe8 00000000 		.4byte	0
 10023              	.LVUS66:
 10024 0fec 00       		.uleb128 .LVU462
 10025 0fed 00       		.uleb128 .LVU467
 10026 0fee 00       		.uleb128 .LVU467
 10027 0fef 00       		.uleb128 .LVU480
 10028 0ff0 00       		.uleb128 .LVU493
 10029 0ff1 00       		.uleb128 .LVU497
 10030 0ff2 00       		.uleb128 .LVU497
 10031 0ff3 00       		.uleb128 0
ARM GAS  /tmp/ccMyq1Ea.s 			page 246


 10032              	.LLST66:
 10033 0ff4 84030000 		.4byte	.LVL119-.Ltext0
 10034 0ff8 90030000 		.4byte	.LVL121-.Ltext0
 10035 0ffc 0100     		.2byte	0x1
 10036 0ffe 52       		.byte	0x52
 10037 0fff 90030000 		.4byte	.LVL121-.Ltext0
 10038 1003 A1030000 		.4byte	.LVL125-1-.Ltext0
 10039 1007 0300     		.2byte	0x3
 10040 1009 72       		.byte	0x72
 10041 100a 7F       		.sleb128 -1
 10042 100b 9F       		.byte	0x9f
 10043 100c B2030000 		.4byte	.LVL128-.Ltext0
 10044 1010 BC030000 		.4byte	.LVL131-.Ltext0
 10045 1014 0300     		.2byte	0x3
 10046 1016 72       		.byte	0x72
 10047 1017 7F       		.sleb128 -1
 10048 1018 9F       		.byte	0x9f
 10049 1019 BC030000 		.4byte	.LVL131-.Ltext0
 10050 101d C0030000 		.4byte	.LFE15-.Ltext0
 10051 1021 0100     		.2byte	0x1
 10052 1023 52       		.byte	0x52
 10053 1024 00000000 		.4byte	0
 10054 1028 00000000 		.4byte	0
 10055              	.LVUS67:
 10056 102c 00       		.uleb128 .LVU469
 10057 102d 00       		.uleb128 .LVU476
 10058 102e 00       		.uleb128 .LVU476
 10059 102f 00       		.uleb128 .LVU480
 10060 1030 00       		.uleb128 .LVU493
 10061 1031 00       		.uleb128 .LVU495
 10062 1032 00       		.uleb128 .LVU495
 10063 1033 00       		.uleb128 .LVU496
 10064 1034 00       		.uleb128 .LVU496
 10065 1035 00       		.uleb128 .LVU497
 10066              	.LLST67:
 10067 1036 94030000 		.4byte	.LVL122-.Ltext0
 10068 103a 9A030000 		.4byte	.LVL123-.Ltext0
 10069 103e 0100     		.2byte	0x1
 10070 1040 53       		.byte	0x53
 10071 1041 9A030000 		.4byte	.LVL123-.Ltext0
 10072 1045 A1030000 		.4byte	.LVL125-1-.Ltext0
 10073 1049 0100     		.2byte	0x1
 10074 104b 51       		.byte	0x51
 10075 104c B2030000 		.4byte	.LVL128-.Ltext0
 10076 1050 B4030000 		.4byte	.LVL129-.Ltext0
 10077 1054 0100     		.2byte	0x1
 10078 1056 53       		.byte	0x53
 10079 1057 B4030000 		.4byte	.LVL129-.Ltext0
 10080 105b B6030000 		.4byte	.LVL130-.Ltext0
 10081 105f 0300     		.2byte	0x3
 10082 1061 73       		.byte	0x73
 10083 1062 7F       		.sleb128 -1
 10084 1063 9F       		.byte	0x9f
 10085 1064 B6030000 		.4byte	.LVL130-.Ltext0
 10086 1068 BC030000 		.4byte	.LVL131-.Ltext0
 10087 106c 0100     		.2byte	0x1
 10088 106e 51       		.byte	0x51
ARM GAS  /tmp/ccMyq1Ea.s 			page 247


 10089 106f 00000000 		.4byte	0
 10090 1073 00000000 		.4byte	0
 10091              	.LLST53:
 10092 1077 08030000 		.4byte	.LFB14-.Ltext0
 10093 107b 0A030000 		.4byte	.LCFI17-.Ltext0
 10094 107f 0200     		.2byte	0x2
 10095 1081 7D       		.byte	0x7d
 10096 1082 00       		.sleb128 0
 10097 1083 0A030000 		.4byte	.LCFI17-.Ltext0
 10098 1087 6A030000 		.4byte	.LFE14-.Ltext0
 10099 108b 0200     		.2byte	0x2
 10100 108d 7D       		.byte	0x7d
 10101 108e 18       		.sleb128 24
 10102 108f 00000000 		.4byte	0
 10103 1093 00000000 		.4byte	0
 10104              	.LVUS54:
 10105 1097 00       		.uleb128 0
 10106 1098 00       		.uleb128 .LVU408
 10107 1099 00       		.uleb128 .LVU408
 10108 109a 00       		.uleb128 0
 10109              	.LLST54:
 10110 109b 08030000 		.4byte	.LVL103-.Ltext0
 10111 109f 26030000 		.4byte	.LVL106-.Ltext0
 10112 10a3 0100     		.2byte	0x1
 10113 10a5 50       		.byte	0x50
 10114 10a6 26030000 		.4byte	.LVL106-.Ltext0
 10115 10aa 6A030000 		.4byte	.LFE14-.Ltext0
 10116 10ae 0100     		.2byte	0x1
 10117 10b0 54       		.byte	0x54
 10118 10b1 00000000 		.4byte	0
 10119 10b5 00000000 		.4byte	0
 10120              	.LVUS55:
 10121 10b9 00       		.uleb128 0
 10122 10ba 00       		.uleb128 .LVU417
 10123 10bb 00       		.uleb128 .LVU417
 10124 10bc 00       		.uleb128 .LVU441
 10125 10bd 00       		.uleb128 .LVU441
 10126 10be 00       		.uleb128 0
 10127              	.LLST55:
 10128 10bf 08030000 		.4byte	.LVL103-.Ltext0
 10129 10c3 3B030000 		.4byte	.LVL108-1-.Ltext0
 10130 10c7 0100     		.2byte	0x1
 10131 10c9 51       		.byte	0x51
 10132 10ca 3B030000 		.4byte	.LVL108-1-.Ltext0
 10133 10ce 66030000 		.4byte	.LVL116-.Ltext0
 10134 10d2 0A00     		.2byte	0xa
 10135 10d4 F3       		.byte	0xf3
 10136 10d5 03       		.uleb128 0x3
 10137 10d6 F5       		.byte	0xf5
 10138 10d7 01       		.uleb128 0x1
 10139 10d8 25       		.uleb128 0x25
 10140 10d9 F7       		.byte	0xf7
 10141 10da 2C       		.uleb128 0x2c
 10142 10db F7       		.byte	0xf7
 10143 10dc 00       		.uleb128 0
 10144 10dd 9F       		.byte	0x9f
 10145 10de 66030000 		.4byte	.LVL116-.Ltext0
ARM GAS  /tmp/ccMyq1Ea.s 			page 248


 10146 10e2 6A030000 		.4byte	.LFE14-.Ltext0
 10147 10e6 0100     		.2byte	0x1
 10148 10e8 51       		.byte	0x51
 10149 10e9 00000000 		.4byte	0
 10150 10ed 00000000 		.4byte	0
 10151              	.LVUS56:
 10152 10f1 00       		.uleb128 0
 10153 10f2 00       		.uleb128 .LVU403
 10154 10f3 00       		.uleb128 .LVU403
 10155 10f4 00       		.uleb128 0
 10156              	.LLST56:
 10157 10f5 08030000 		.4byte	.LVL103-.Ltext0
 10158 10f9 10030000 		.4byte	.LVL104-.Ltext0
 10159 10fd 0100     		.2byte	0x1
 10160 10ff 52       		.byte	0x52
 10161 1100 10030000 		.4byte	.LVL104-.Ltext0
 10162 1104 6A030000 		.4byte	.LFE14-.Ltext0
 10163 1108 0100     		.2byte	0x1
 10164 110a 56       		.byte	0x56
 10165 110b 00000000 		.4byte	0
 10166 110f 00000000 		.4byte	0
 10167              	.LVUS57:
 10168 1113 00       		.uleb128 0
 10169 1114 00       		.uleb128 .LVU404
 10170 1115 00       		.uleb128 .LVU404
 10171 1116 00       		.uleb128 .LVU417
 10172 1117 00       		.uleb128 .LVU417
 10173 1118 00       		.uleb128 .LVU441
 10174 1119 00       		.uleb128 .LVU441
 10175 111a 00       		.uleb128 0
 10176              	.LLST57:
 10177 111b 08030000 		.4byte	.LVL103-.Ltext0
 10178 111f 24030000 		.4byte	.LVL105-.Ltext0
 10179 1123 0100     		.2byte	0x1
 10180 1125 53       		.byte	0x53
 10181 1126 24030000 		.4byte	.LVL105-.Ltext0
 10182 112a 3B030000 		.4byte	.LVL108-1-.Ltext0
 10183 112e 0100     		.2byte	0x1
 10184 1130 52       		.byte	0x52
 10185 1131 3B030000 		.4byte	.LVL108-1-.Ltext0
 10186 1135 66030000 		.4byte	.LVL116-.Ltext0
 10187 1139 0A00     		.2byte	0xa
 10188 113b F3       		.byte	0xf3
 10189 113c 03       		.uleb128 0x3
 10190 113d F5       		.byte	0xf5
 10191 113e 03       		.uleb128 0x3
 10192 113f 25       		.uleb128 0x25
 10193 1140 F7       		.byte	0xf7
 10194 1141 2C       		.uleb128 0x2c
 10195 1142 F7       		.byte	0xf7
 10196 1143 00       		.uleb128 0
 10197 1144 9F       		.byte	0x9f
 10198 1145 66030000 		.4byte	.LVL116-.Ltext0
 10199 1149 6A030000 		.4byte	.LFE14-.Ltext0
 10200 114d 0100     		.2byte	0x1
 10201 114f 52       		.byte	0x52
 10202 1150 00000000 		.4byte	0
ARM GAS  /tmp/ccMyq1Ea.s 			page 249


 10203 1154 00000000 		.4byte	0
 10204              	.LVUS58:
 10205 1158 00       		.uleb128 .LVU430
 10206 1159 00       		.uleb128 .LVU437
 10207              	.LLST58:
 10208 115a 56030000 		.4byte	.LVL111-.Ltext0
 10209 115e 5C030000 		.4byte	.LVL113-.Ltext0
 10210 1162 0100     		.2byte	0x1
 10211 1164 50       		.byte	0x50
 10212 1165 00000000 		.4byte	0
 10213 1169 00000000 		.4byte	0
 10214              	.LVUS59:
 10215 116d 04       		.uleb128 .LVU393
 10216 116e 00       		.uleb128 .LVU408
 10217 116f 00       		.uleb128 .LVU408
 10218 1170 00       		.uleb128 0
 10219              	.LLST59:
 10220 1171 08030000 		.4byte	.LVL103-.Ltext0
 10221 1175 26030000 		.4byte	.LVL106-.Ltext0
 10222 1179 0100     		.2byte	0x1
 10223 117b 50       		.byte	0x50
 10224 117c 26030000 		.4byte	.LVL106-.Ltext0
 10225 1180 6A030000 		.4byte	.LFE14-.Ltext0
 10226 1184 0100     		.2byte	0x1
 10227 1186 54       		.byte	0x54
 10228 1187 00000000 		.4byte	0
 10229 118b 00000000 		.4byte	0
 10230              	.LVUS60:
 10231 118f 00       		.uleb128 .LVU414
 10232 1190 00       		.uleb128 .LVU429
 10233 1191 00       		.uleb128 .LVU437
 10234 1192 00       		.uleb128 .LVU439
 10235 1193 00       		.uleb128 .LVU439
 10236 1194 00       		.uleb128 .LVU440
 10237 1195 00       		.uleb128 .LVU440
 10238 1196 00       		.uleb128 .LVU441
 10239              	.LLST60:
 10240 1197 38030000 		.4byte	.LVL107-.Ltext0
 10241 119b 54030000 		.4byte	.LVL110-.Ltext0
 10242 119f 0100     		.2byte	0x1
 10243 11a1 55       		.byte	0x55
 10244 11a2 5C030000 		.4byte	.LVL113-.Ltext0
 10245 11a6 5E030000 		.4byte	.LVL114-.Ltext0
 10246 11aa 0100     		.2byte	0x1
 10247 11ac 55       		.byte	0x55
 10248 11ad 5E030000 		.4byte	.LVL114-.Ltext0
 10249 11b1 60030000 		.4byte	.LVL115-.Ltext0
 10250 11b5 0300     		.2byte	0x3
 10251 11b7 75       		.byte	0x75
 10252 11b8 7F       		.sleb128 -1
 10253 11b9 9F       		.byte	0x9f
 10254 11ba 60030000 		.4byte	.LVL115-.Ltext0
 10255 11be 66030000 		.4byte	.LVL116-.Ltext0
 10256 11c2 0300     		.2byte	0x3
 10257 11c4 73       		.byte	0x73
 10258 11c5 7F       		.sleb128 -1
 10259 11c6 9F       		.byte	0x9f
ARM GAS  /tmp/ccMyq1Ea.s 			page 250


 10260 11c7 00000000 		.4byte	0
 10261 11cb 00000000 		.4byte	0
 10262              	.LLST36:
 10263 11cf C0010000 		.4byte	.LFB13-.Ltext0
 10264 11d3 C4010000 		.4byte	.LCFI12-.Ltext0
 10265 11d7 0200     		.2byte	0x2
 10266 11d9 7D       		.byte	0x7d
 10267 11da 00       		.sleb128 0
 10268 11db C4010000 		.4byte	.LCFI12-.Ltext0
 10269 11df 10020000 		.4byte	.LCFI13-.Ltext0
 10270 11e3 0200     		.2byte	0x2
 10271 11e5 7D       		.byte	0x7d
 10272 11e6 28       		.sleb128 40
 10273 11e7 10020000 		.4byte	.LCFI13-.Ltext0
 10274 11eb 14020000 		.4byte	.LCFI14-.Ltext0
 10275 11ef 0200     		.2byte	0x2
 10276 11f1 7D       		.byte	0x7d
 10277 11f2 18       		.sleb128 24
 10278 11f3 14020000 		.4byte	.LCFI14-.Ltext0
 10279 11f7 BA020000 		.4byte	.LFE13-.Ltext0
 10280 11fb 0200     		.2byte	0x2
 10281 11fd 7D       		.byte	0x7d
 10282 11fe 28       		.sleb128 40
 10283 11ff 00000000 		.4byte	0
 10284 1203 00000000 		.4byte	0
 10285              	.LVUS37:
 10286 1207 00       		.uleb128 0
 10287 1208 00       		.uleb128 .LVU254
 10288 1209 00       		.uleb128 .LVU254
 10289 120a 00       		.uleb128 0
 10290              	.LLST37:
 10291 120b C0010000 		.4byte	.LVL63-.Ltext0
 10292 120f D0010000 		.4byte	.LVL65-.Ltext0
 10293 1213 0100     		.2byte	0x1
 10294 1215 50       		.byte	0x50
 10295 1216 D0010000 		.4byte	.LVL65-.Ltext0
 10296 121a BA020000 		.4byte	.LFE13-.Ltext0
 10297 121e 0100     		.2byte	0x1
 10298 1220 54       		.byte	0x54
 10299 1221 00000000 		.4byte	0
 10300 1225 00000000 		.4byte	0
 10301              	.LVUS38:
 10302 1229 00       		.uleb128 0
 10303 122a 00       		.uleb128 .LVU254
 10304 122b 00       		.uleb128 .LVU254
 10305 122c 00       		.uleb128 0
 10306              	.LLST38:
 10307 122d C0010000 		.4byte	.LVL63-.Ltext0
 10308 1231 D0010000 		.4byte	.LVL65-.Ltext0
 10309 1235 0100     		.2byte	0x1
 10310 1237 51       		.byte	0x51
 10311 1238 D0010000 		.4byte	.LVL65-.Ltext0
 10312 123c BA020000 		.4byte	.LFE13-.Ltext0
 10313 1240 0100     		.2byte	0x1
 10314 1242 56       		.byte	0x56
 10315 1243 00000000 		.4byte	0
 10316 1247 00000000 		.4byte	0
ARM GAS  /tmp/ccMyq1Ea.s 			page 251


 10317              	.LVUS39:
 10318 124b 00       		.uleb128 0
 10319 124c 00       		.uleb128 .LVU254
 10320              	.LLST39:
 10321 124d C0010000 		.4byte	.LVL63-.Ltext0
 10322 1251 D0010000 		.4byte	.LVL65-.Ltext0
 10323 1255 0100     		.2byte	0x1
 10324 1257 52       		.byte	0x52
 10325 1258 00000000 		.4byte	0
 10326 125c 00000000 		.4byte	0
 10327              	.LVUS40:
 10328 1260 00       		.uleb128 0
 10329 1261 00       		.uleb128 .LVU254
 10330 1262 00       		.uleb128 .LVU254
 10331 1263 00       		.uleb128 0
 10332              	.LLST40:
 10333 1264 C0010000 		.4byte	.LVL63-.Ltext0
 10334 1268 D0010000 		.4byte	.LVL65-.Ltext0
 10335 126c 0100     		.2byte	0x1
 10336 126e 53       		.byte	0x53
 10337 126f D0010000 		.4byte	.LVL65-.Ltext0
 10338 1273 BA020000 		.4byte	.LFE13-.Ltext0
 10339 1277 0100     		.2byte	0x1
 10340 1279 55       		.byte	0x55
 10341 127a 00000000 		.4byte	0
 10342 127e 00000000 		.4byte	0
 10343              	.LVUS41:
 10344 1282 02       		.uleb128 .LVU246
 10345 1283 00       		.uleb128 .LVU254
 10346 1284 00       		.uleb128 .LVU254
 10347 1285 00       		.uleb128 .LVU282
 10348 1286 00       		.uleb128 .LVU283
 10349 1287 02       		.uleb128 .LVU289
 10350 1288 00       		.uleb128 .LVU290
 10351 1289 01       		.uleb128 .LVU294
 10352 128a 01       		.uleb128 .LVU294
 10353 128b 00       		.uleb128 0
 10354              	.LLST41:
 10355 128c C0010000 		.4byte	.LVL63-.Ltext0
 10356 1290 D0010000 		.4byte	.LVL65-.Ltext0
 10357 1294 0200     		.2byte	0x2
 10358 1296 30       		.byte	0x30
 10359 1297 9F       		.byte	0x9f
 10360 1298 D0010000 		.4byte	.LVL65-.Ltext0
 10361 129c 0E020000 		.4byte	.LVL71-.Ltext0
 10362 12a0 0100     		.2byte	0x1
 10363 12a2 57       		.byte	0x57
 10364 12a3 14020000 		.4byte	.LVL72-.Ltext0
 10365 12a7 20020000 		.4byte	.LVL73-.Ltext0
 10366 12ab 0100     		.2byte	0x1
 10367 12ad 57       		.byte	0x57
 10368 12ae 24020000 		.4byte	.LVL74-.Ltext0
 10369 12b2 2C020000 		.4byte	.LVL75-.Ltext0
 10370 12b6 0100     		.2byte	0x1
 10371 12b8 57       		.byte	0x57
 10372 12b9 2C020000 		.4byte	.LVL75-.Ltext0
 10373 12bd BA020000 		.4byte	.LFE13-.Ltext0
ARM GAS  /tmp/ccMyq1Ea.s 			page 252


 10374 12c1 0200     		.2byte	0x2
 10375 12c3 31       		.byte	0x31
 10376 12c4 9F       		.byte	0x9f
 10377 12c5 00000000 		.4byte	0
 10378 12c9 00000000 		.4byte	0
 10379              	.LVUS42:
 10380 12cd 00       		.uleb128 .LVU266
 10381 12ce 00       		.uleb128 .LVU271
 10382              	.LLST42:
 10383 12cf E6010000 		.4byte	.LVL67-.Ltext0
 10384 12d3 EE010000 		.4byte	.LVL68-.Ltext0
 10385 12d7 0100     		.2byte	0x1
 10386 12d9 50       		.byte	0x50
 10387 12da 00000000 		.4byte	0
 10388 12de 00000000 		.4byte	0
 10389              	.LVUS43:
 10390 12e2 00       		.uleb128 .LVU251
 10391 12e3 00       		.uleb128 .LVU254
 10392 12e4 00       		.uleb128 .LVU254
 10393 12e5 00       		.uleb128 0
 10394              	.LLST43:
 10395 12e6 C8010000 		.4byte	.LVL64-.Ltext0
 10396 12ea D0010000 		.4byte	.LVL65-.Ltext0
 10397 12ee 0100     		.2byte	0x1
 10398 12f0 50       		.byte	0x50
 10399 12f1 D0010000 		.4byte	.LVL65-.Ltext0
 10400 12f5 BA020000 		.4byte	.LFE13-.Ltext0
 10401 12f9 0100     		.2byte	0x1
 10402 12fb 54       		.byte	0x54
 10403 12fc 00000000 		.4byte	0
 10404 1300 00000000 		.4byte	0
 10405              	.LVUS44:
 10406 1304 01       		.uleb128 .LVU307
 10407 1305 01       		.uleb128 .LVU315
 10408 1306 00       		.uleb128 .LVU323
 10409 1307 01       		.uleb128 .LVU326
 10410              	.LLST44:
 10411 1308 5E020000 		.4byte	.LVL81-.Ltext0
 10412 130c 6E020000 		.4byte	.LVL84-.Ltext0
 10413 1310 0100     		.2byte	0x1
 10414 1312 54       		.byte	0x54
 10415 1313 88020000 		.4byte	.LVL88-.Ltext0
 10416 1317 8C020000 		.4byte	.LVL89-.Ltext0
 10417 131b 0100     		.2byte	0x1
 10418 131d 54       		.byte	0x54
 10419 131e 00000000 		.4byte	0
 10420 1322 00000000 		.4byte	0
 10421              	.LVUS45:
 10422 1326 00       		.uleb128 .LVU313
 10423 1327 01       		.uleb128 .LVU315
 10424 1328 01       		.uleb128 .LVU324
 10425 1329 01       		.uleb128 .LVU326
 10426              	.LLST45:
 10427 132a 6A020000 		.4byte	.LVL83-.Ltext0
 10428 132e 6E020000 		.4byte	.LVL84-.Ltext0
 10429 1332 0200     		.2byte	0x2
 10430 1334 31       		.byte	0x31
ARM GAS  /tmp/ccMyq1Ea.s 			page 253


 10431 1335 9F       		.byte	0x9f
 10432 1336 88020000 		.4byte	.LVL88-.Ltext0
 10433 133a 8C020000 		.4byte	.LVL89-.Ltext0
 10434 133e 0200     		.2byte	0x2
 10435 1340 30       		.byte	0x30
 10436 1341 9F       		.byte	0x9f
 10437 1342 00000000 		.4byte	0
 10438 1346 00000000 		.4byte	0
 10439              	.LLST32:
 10440 134a AE010000 		.4byte	.LFB12-.Ltext0
 10441 134e B0010000 		.4byte	.LCFI11-.Ltext0
 10442 1352 0200     		.2byte	0x2
 10443 1354 7D       		.byte	0x7d
 10444 1355 00       		.sleb128 0
 10445 1356 B0010000 		.4byte	.LCFI11-.Ltext0
 10446 135a C0010000 		.4byte	.LFE12-.Ltext0
 10447 135e 0200     		.2byte	0x2
 10448 1360 7D       		.byte	0x7d
 10449 1361 08       		.sleb128 8
 10450 1362 00000000 		.4byte	0
 10451 1366 00000000 		.4byte	0
 10452              	.LVUS33:
 10453 136a 00       		.uleb128 0
 10454 136b 00       		.uleb128 .LVU235
 10455 136c 00       		.uleb128 .LVU235
 10456 136d 00       		.uleb128 0
 10457              	.LLST33:
 10458 136e AE010000 		.4byte	.LVL60-.Ltext0
 10459 1372 B9010000 		.4byte	.LVL62-1-.Ltext0
 10460 1376 0100     		.2byte	0x1
 10461 1378 50       		.byte	0x50
 10462 1379 B9010000 		.4byte	.LVL62-1-.Ltext0
 10463 137d C0010000 		.4byte	.LFE12-.Ltext0
 10464 1381 0A00     		.2byte	0xa
 10465 1383 F3       		.byte	0xf3
 10466 1384 03       		.uleb128 0x3
 10467 1385 F5       		.byte	0xf5
 10468 1386 00       		.uleb128 0
 10469 1387 25       		.uleb128 0x25
 10470 1388 F7       		.byte	0xf7
 10471 1389 2C       		.uleb128 0x2c
 10472 138a F7       		.byte	0xf7
 10473 138b 00       		.uleb128 0
 10474 138c 9F       		.byte	0x9f
 10475 138d 00000000 		.4byte	0
 10476 1391 00000000 		.4byte	0
 10477              	.LVUS34:
 10478 1395 00       		.uleb128 0
 10479 1396 00       		.uleb128 .LVU234
 10480 1397 00       		.uleb128 .LVU234
 10481 1398 00       		.uleb128 0
 10482              	.LLST34:
 10483 1399 AE010000 		.4byte	.LVL60-.Ltext0
 10484 139d B6010000 		.4byte	.LVL61-.Ltext0
 10485 13a1 0100     		.2byte	0x1
 10486 13a3 51       		.byte	0x51
 10487 13a4 B6010000 		.4byte	.LVL61-.Ltext0
ARM GAS  /tmp/ccMyq1Ea.s 			page 254


 10488 13a8 C0010000 		.4byte	.LFE12-.Ltext0
 10489 13ac 0100     		.2byte	0x1
 10490 13ae 54       		.byte	0x54
 10491 13af 00000000 		.4byte	0
 10492 13b3 00000000 		.4byte	0
 10493              	.LVUS35:
 10494 13b7 00       		.uleb128 .LVU235
 10495 13b8 00       		.uleb128 0
 10496              	.LLST35:
 10497 13b9 BA010000 		.4byte	.LVL62-.Ltext0
 10498 13bd C0010000 		.4byte	.LFE12-.Ltext0
 10499 13c1 0100     		.2byte	0x1
 10500 13c3 50       		.byte	0x50
 10501 13c4 00000000 		.4byte	0
 10502 13c8 00000000 		.4byte	0
 10503              	.LLST85:
 10504 13cc CA050000 		.4byte	.LFB11-.Ltext0
 10505 13d0 CC050000 		.4byte	.LCFI26-.Ltext0
 10506 13d4 0200     		.2byte	0x2
 10507 13d6 7D       		.byte	0x7d
 10508 13d7 00       		.sleb128 0
 10509 13d8 CC050000 		.4byte	.LCFI26-.Ltext0
 10510 13dc F8050000 		.4byte	.LFE11-.Ltext0
 10511 13e0 0200     		.2byte	0x2
 10512 13e2 7D       		.byte	0x7d
 10513 13e3 10       		.sleb128 16
 10514 13e4 00000000 		.4byte	0
 10515 13e8 00000000 		.4byte	0
 10516              	.LVUS86:
 10517 13ec 00       		.uleb128 0
 10518 13ed 00       		.uleb128 .LVU713
 10519 13ee 00       		.uleb128 .LVU713
 10520 13ef 00       		.uleb128 0
 10521              	.LLST86:
 10522 13f0 CA050000 		.4byte	.LVL199-.Ltext0
 10523 13f4 D5050000 		.4byte	.LVL200-1-.Ltext0
 10524 13f8 0100     		.2byte	0x1
 10525 13fa 50       		.byte	0x50
 10526 13fb D5050000 		.4byte	.LVL200-1-.Ltext0
 10527 13ff F8050000 		.4byte	.LFE11-.Ltext0
 10528 1403 0100     		.2byte	0x1
 10529 1405 54       		.byte	0x54
 10530 1406 00000000 		.4byte	0
 10531 140a 00000000 		.4byte	0
 10532              	.LVUS87:
 10533 140e 00       		.uleb128 0
 10534 140f 00       		.uleb128 .LVU713
 10535 1410 00       		.uleb128 .LVU713
 10536 1411 00       		.uleb128 0
 10537              	.LLST87:
 10538 1412 CA050000 		.4byte	.LVL199-.Ltext0
 10539 1416 D5050000 		.4byte	.LVL200-1-.Ltext0
 10540 141a 0100     		.2byte	0x1
 10541 141c 51       		.byte	0x51
 10542 141d D5050000 		.4byte	.LVL200-1-.Ltext0
 10543 1421 F8050000 		.4byte	.LFE11-.Ltext0
 10544 1425 0100     		.2byte	0x1
ARM GAS  /tmp/ccMyq1Ea.s 			page 255


 10545 1427 55       		.byte	0x55
 10546 1428 00000000 		.4byte	0
 10547 142c 00000000 		.4byte	0
 10548              	.LVUS88:
 10549 1430 00       		.uleb128 .LVU721
 10550 1431 00       		.uleb128 0
 10551              	.LLST88:
 10552 1432 EC050000 		.4byte	.LVL203-.Ltext0
 10553 1436 F8050000 		.4byte	.LFE11-.Ltext0
 10554 143a 0100     		.2byte	0x1
 10555 143c 50       		.byte	0x50
 10556 143d 00000000 		.4byte	0
 10557 1441 00000000 		.4byte	0
 10558              	.LVUS89:
 10559 1445 03       		.uleb128 .LVU706
 10560 1446 00       		.uleb128 .LVU713
 10561 1447 00       		.uleb128 .LVU713
 10562 1448 00       		.uleb128 0
 10563              	.LLST89:
 10564 1449 CA050000 		.4byte	.LVL199-.Ltext0
 10565 144d D5050000 		.4byte	.LVL200-1-.Ltext0
 10566 1451 0100     		.2byte	0x1
 10567 1453 50       		.byte	0x50
 10568 1454 D5050000 		.4byte	.LVL200-1-.Ltext0
 10569 1458 F8050000 		.4byte	.LFE11-.Ltext0
 10570 145c 0100     		.2byte	0x1
 10571 145e 54       		.byte	0x54
 10572 145f 00000000 		.4byte	0
 10573 1463 00000000 		.4byte	0
 10574              	.LLST50:
 10575 1467 DE020000 		.4byte	.LFB10-.Ltext0
 10576 146b E0020000 		.4byte	.LCFI16-.Ltext0
 10577 146f 0200     		.2byte	0x2
 10578 1471 7D       		.byte	0x7d
 10579 1472 00       		.sleb128 0
 10580 1473 E0020000 		.4byte	.LCFI16-.Ltext0
 10581 1477 08030000 		.4byte	.LFE10-.Ltext0
 10582 147b 0200     		.2byte	0x2
 10583 147d 7D       		.byte	0x7d
 10584 147e 10       		.sleb128 16
 10585 147f 00000000 		.4byte	0
 10586 1483 00000000 		.4byte	0
 10587              	.LVUS51:
 10588 1487 00       		.uleb128 0
 10589 1488 00       		.uleb128 .LVU375
 10590 1489 00       		.uleb128 .LVU375
 10591 148a 00       		.uleb128 0
 10592              	.LLST51:
 10593 148b DE020000 		.4byte	.LVL98-.Ltext0
 10594 148f E7020000 		.4byte	.LVL99-1-.Ltext0
 10595 1493 0100     		.2byte	0x1
 10596 1495 50       		.byte	0x50
 10597 1496 E7020000 		.4byte	.LVL99-1-.Ltext0
 10598 149a 08030000 		.4byte	.LFE10-.Ltext0
 10599 149e 0100     		.2byte	0x1
 10600 14a0 54       		.byte	0x54
 10601 14a1 00000000 		.4byte	0
ARM GAS  /tmp/ccMyq1Ea.s 			page 256


 10602 14a5 00000000 		.4byte	0
 10603              	.LVUS52:
 10604 14a9 03       		.uleb128 .LVU369
 10605 14aa 00       		.uleb128 .LVU375
 10606 14ab 00       		.uleb128 .LVU375
 10607 14ac 00       		.uleb128 0
 10608              	.LLST52:
 10609 14ad DE020000 		.4byte	.LVL98-.Ltext0
 10610 14b1 E7020000 		.4byte	.LVL99-1-.Ltext0
 10611 14b5 0100     		.2byte	0x1
 10612 14b7 50       		.byte	0x50
 10613 14b8 E7020000 		.4byte	.LVL99-1-.Ltext0
 10614 14bc 08030000 		.4byte	.LFE10-.Ltext0
 10615 14c0 0100     		.2byte	0x1
 10616 14c2 54       		.byte	0x54
 10617 14c3 00000000 		.4byte	0
 10618 14c7 00000000 		.4byte	0
 10619              	.LLST46:
 10620 14cb BA020000 		.4byte	.LFB9-.Ltext0
 10621 14cf BE020000 		.4byte	.LCFI15-.Ltext0
 10622 14d3 0200     		.2byte	0x2
 10623 14d5 7D       		.byte	0x7d
 10624 14d6 00       		.sleb128 0
 10625 14d7 BE020000 		.4byte	.LCFI15-.Ltext0
 10626 14db DE020000 		.4byte	.LFE9-.Ltext0
 10627 14df 0200     		.2byte	0x2
 10628 14e1 7D       		.byte	0x7d
 10629 14e2 08       		.sleb128 8
 10630 14e3 00000000 		.4byte	0
 10631 14e7 00000000 		.4byte	0
 10632              	.LVUS47:
 10633 14eb 00       		.uleb128 0
 10634 14ec 00       		.uleb128 .LVU345
 10635 14ed 00       		.uleb128 .LVU345
 10636 14ee 00       		.uleb128 .LVU346
 10637 14ef 00       		.uleb128 .LVU346
 10638 14f0 00       		.uleb128 0
 10639              	.LLST47:
 10640 14f1 BA020000 		.4byte	.LVL94-.Ltext0
 10641 14f5 C2020000 		.4byte	.LVL95-.Ltext0
 10642 14f9 0100     		.2byte	0x1
 10643 14fb 50       		.byte	0x50
 10644 14fc C2020000 		.4byte	.LVL95-.Ltext0
 10645 1500 C5020000 		.4byte	.LVL96-1-.Ltext0
 10646 1504 0100     		.2byte	0x1
 10647 1506 52       		.byte	0x52
 10648 1507 C5020000 		.4byte	.LVL96-1-.Ltext0
 10649 150b DE020000 		.4byte	.LFE9-.Ltext0
 10650 150f 0A00     		.2byte	0xa
 10651 1511 F3       		.byte	0xf3
 10652 1512 03       		.uleb128 0x3
 10653 1513 F5       		.byte	0xf5
 10654 1514 00       		.uleb128 0
 10655 1515 25       		.uleb128 0x25
 10656 1516 F7       		.byte	0xf7
 10657 1517 33       		.uleb128 0x33
 10658 1518 F7       		.byte	0xf7
ARM GAS  /tmp/ccMyq1Ea.s 			page 257


 10659 1519 00       		.uleb128 0
 10660 151a 9F       		.byte	0x9f
 10661 151b 00000000 		.4byte	0
 10662 151f 00000000 		.4byte	0
 10663              	.LVUS48:
 10664 1523 00       		.uleb128 .LVU346
 10665 1524 00       		.uleb128 .LVU361
 10666 1525 00       		.uleb128 .LVU361
 10667 1526 00       		.uleb128 0
 10668              	.LLST48:
 10669 1527 C6020000 		.4byte	.LVL96-.Ltext0
 10670 152b D9020000 		.4byte	.LVL97-1-.Ltext0
 10671 152f 0100     		.2byte	0x1
 10672 1531 50       		.byte	0x50
 10673 1532 D9020000 		.4byte	.LVL97-1-.Ltext0
 10674 1536 DE020000 		.4byte	.LFE9-.Ltext0
 10675 153a 0100     		.2byte	0x1
 10676 153c 54       		.byte	0x54
 10677 153d 00000000 		.4byte	0
 10678 1541 00000000 		.4byte	0
 10679              	.LVUS49:
 10680 1545 01       		.uleb128 .LVU347
 10681 1546 00       		.uleb128 .LVU361
 10682 1547 00       		.uleb128 .LVU361
 10683 1548 01       		.uleb128 .LVU362
 10684              	.LLST49:
 10685 1549 C6020000 		.4byte	.LVL96-.Ltext0
 10686 154d D9020000 		.4byte	.LVL97-1-.Ltext0
 10687 1551 0100     		.2byte	0x1
 10688 1553 50       		.byte	0x50
 10689 1554 D9020000 		.4byte	.LVL97-1-.Ltext0
 10690 1558 DA020000 		.4byte	.LVL97-.Ltext0
 10691 155c 0100     		.2byte	0x1
 10692 155e 54       		.byte	0x54
 10693 155f 00000000 		.4byte	0
 10694 1563 00000000 		.4byte	0
 10695              	.LLST20:
 10696 1567 7A010000 		.4byte	.LFB6-.Ltext0
 10697 156b 7C010000 		.4byte	.LCFI10-.Ltext0
 10698 156f 0200     		.2byte	0x2
 10699 1571 7D       		.byte	0x7d
 10700 1572 00       		.sleb128 0
 10701 1573 7C010000 		.4byte	.LCFI10-.Ltext0
 10702 1577 AE010000 		.4byte	.LFE6-.Ltext0
 10703 157b 0200     		.2byte	0x2
 10704 157d 7D       		.byte	0x7d
 10705 157e 18       		.sleb128 24
 10706 157f 00000000 		.4byte	0
 10707 1583 00000000 		.4byte	0
 10708              	.LVUS21:
 10709 1587 00       		.uleb128 0
 10710 1588 00       		.uleb128 .LVU197
 10711 1589 00       		.uleb128 .LVU197
 10712 158a 00       		.uleb128 0
 10713              	.LLST21:
 10714 158b 7A010000 		.4byte	.LVL50-.Ltext0
 10715 158f 80010000 		.4byte	.LVL51-.Ltext0
ARM GAS  /tmp/ccMyq1Ea.s 			page 258


 10716 1593 0100     		.2byte	0x1
 10717 1595 50       		.byte	0x50
 10718 1596 80010000 		.4byte	.LVL51-.Ltext0
 10719 159a AE010000 		.4byte	.LFE6-.Ltext0
 10720 159e 0100     		.2byte	0x1
 10721 15a0 56       		.byte	0x56
 10722 15a1 00000000 		.4byte	0
 10723 15a5 00000000 		.4byte	0
 10724              	.LVUS22:
 10725 15a9 00       		.uleb128 0
 10726 15aa 00       		.uleb128 .LVU200
 10727 15ab 00       		.uleb128 .LVU200
 10728 15ac 00       		.uleb128 0
 10729              	.LLST22:
 10730 15ad 7A010000 		.4byte	.LVL50-.Ltext0
 10731 15b1 89010000 		.4byte	.LVL53-1-.Ltext0
 10732 15b5 0100     		.2byte	0x1
 10733 15b7 51       		.byte	0x51
 10734 15b8 89010000 		.4byte	.LVL53-1-.Ltext0
 10735 15bc AE010000 		.4byte	.LFE6-.Ltext0
 10736 15c0 0100     		.2byte	0x1
 10737 15c2 55       		.byte	0x55
 10738 15c3 00000000 		.4byte	0
 10739 15c7 00000000 		.4byte	0
 10740              	.LVUS23:
 10741 15cb 00       		.uleb128 0
 10742 15cc 00       		.uleb128 .LVU200
 10743 15cd 00       		.uleb128 .LVU200
 10744 15ce 00       		.uleb128 .LVU224
 10745 15cf 00       		.uleb128 .LVU224
 10746 15d0 00       		.uleb128 0
 10747              	.LLST23:
 10748 15d1 7A010000 		.4byte	.LVL50-.Ltext0
 10749 15d5 89010000 		.4byte	.LVL53-1-.Ltext0
 10750 15d9 0100     		.2byte	0x1
 10751 15db 52       		.byte	0x52
 10752 15dc 89010000 		.4byte	.LVL53-1-.Ltext0
 10753 15e0 AA010000 		.4byte	.LVL59-.Ltext0
 10754 15e4 0100     		.2byte	0x1
 10755 15e6 57       		.byte	0x57
 10756 15e7 AA010000 		.4byte	.LVL59-.Ltext0
 10757 15eb AE010000 		.4byte	.LFE6-.Ltext0
 10758 15ef 0A00     		.2byte	0xa
 10759 15f1 F3       		.byte	0xf3
 10760 15f2 03       		.uleb128 0x3
 10761 15f3 F5       		.byte	0xf5
 10762 15f4 02       		.uleb128 0x2
 10763 15f5 25       		.uleb128 0x25
 10764 15f6 F7       		.byte	0xf7
 10765 15f7 33       		.uleb128 0x33
 10766 15f8 F7       		.byte	0xf7
 10767 15f9 00       		.uleb128 0
 10768 15fa 9F       		.byte	0x9f
 10769 15fb 00000000 		.4byte	0
 10770 15ff 00000000 		.4byte	0
 10771              	.LVUS24:
 10772 1603 00       		.uleb128 .LVU200
ARM GAS  /tmp/ccMyq1Ea.s 			page 259


 10773 1604 00       		.uleb128 .LVU212
 10774 1605 00       		.uleb128 .LVU212
 10775 1606 00       		.uleb128 .LVU224
 10776 1607 00       		.uleb128 .LVU224
 10777 1608 00       		.uleb128 0
 10778              	.LLST24:
 10779 1609 8A010000 		.4byte	.LVL53-.Ltext0
 10780 160d 98010000 		.4byte	.LVL56-.Ltext0
 10781 1611 0100     		.2byte	0x1
 10782 1613 50       		.byte	0x50
 10783 1614 98010000 		.4byte	.LVL56-.Ltext0
 10784 1618 AA010000 		.4byte	.LVL59-.Ltext0
 10785 161c 0100     		.2byte	0x1
 10786 161e 54       		.byte	0x54
 10787 161f AA010000 		.4byte	.LVL59-.Ltext0
 10788 1623 AE010000 		.4byte	.LFE6-.Ltext0
 10789 1627 0100     		.2byte	0x1
 10790 1629 50       		.byte	0x50
 10791 162a 00000000 		.4byte	0
 10792 162e 00000000 		.4byte	0
 10793              	.LVUS25:
 10794 1632 06       		.uleb128 .LVU193
 10795 1633 00       		.uleb128 .LVU197
 10796 1634 00       		.uleb128 .LVU197
 10797 1635 00       		.uleb128 .LVU198
 10798 1636 00       		.uleb128 .LVU198
 10799 1637 00       		.uleb128 .LVU200
 10800 1638 00       		.uleb128 .LVU200
 10801 1639 00       		.uleb128 0
 10802              	.LLST25:
 10803 163a 7A010000 		.4byte	.LVL50-.Ltext0
 10804 163e 80010000 		.4byte	.LVL51-.Ltext0
 10805 1642 0600     		.2byte	0x6
 10806 1644 71       		.byte	0x71
 10807 1645 00       		.sleb128 0
 10808 1646 70       		.byte	0x70
 10809 1647 00       		.sleb128 0
 10810 1648 1E       		.byte	0x1e
 10811 1649 9F       		.byte	0x9f
 10812 164a 80010000 		.4byte	.LVL51-.Ltext0
 10813 164e 82010000 		.4byte	.LVL52-.Ltext0
 10814 1652 0100     		.2byte	0x1
 10815 1654 50       		.byte	0x50
 10816 1655 82010000 		.4byte	.LVL52-.Ltext0
 10817 1659 89010000 		.4byte	.LVL53-1-.Ltext0
 10818 165d 0400     		.2byte	0x4
 10819 165f 70       		.byte	0x70
 10820 1660 B07F     		.sleb128 -80
 10821 1662 9F       		.byte	0x9f
 10822 1663 89010000 		.4byte	.LVL53-1-.Ltext0
 10823 1667 AE010000 		.4byte	.LFE6-.Ltext0
 10824 166b 0600     		.2byte	0x6
 10825 166d 75       		.byte	0x75
 10826 166e 00       		.sleb128 0
 10827 166f 76       		.byte	0x76
 10828 1670 00       		.sleb128 0
 10829 1671 1E       		.byte	0x1e
ARM GAS  /tmp/ccMyq1Ea.s 			page 260


 10830 1672 9F       		.byte	0x9f
 10831 1673 00000000 		.4byte	0
 10832 1677 00000000 		.4byte	0
 10833              	.LVUS26:
 10834 167b 01       		.uleb128 .LVU203
 10835 167c 02       		.uleb128 .LVU204
 10836 167d 02       		.uleb128 .LVU204
 10837 167e 00       		.uleb128 .LVU210
 10838 167f 00       		.uleb128 .LVU210
 10839 1680 01       		.uleb128 .LVU211
 10840 1681 01       		.uleb128 .LVU211
 10841 1682 00       		.uleb128 .LVU212
 10842 1683 00       		.uleb128 .LVU212
 10843 1684 05       		.uleb128 .LVU223
 10844 1685 00       		.uleb128 .LVU224
 10845 1686 00       		.uleb128 0
 10846              	.LLST26:
 10847 1687 8E010000 		.4byte	.LVL54-.Ltext0
 10848 168b 8E010000 		.4byte	.LVL54-.Ltext0
 10849 168f 0100     		.2byte	0x1
 10850 1691 50       		.byte	0x50
 10851 1692 8E010000 		.4byte	.LVL54-.Ltext0
 10852 1696 94010000 		.4byte	.LVL55-.Ltext0
 10853 169a 0400     		.2byte	0x4
 10854 169c 70       		.byte	0x70
 10855 169d D000     		.sleb128 80
 10856 169f 9F       		.byte	0x9f
 10857 16a0 94010000 		.4byte	.LVL55-.Ltext0
 10858 16a4 94010000 		.4byte	.LVL55-.Ltext0
 10859 16a8 0100     		.2byte	0x1
 10860 16aa 53       		.byte	0x53
 10861 16ab 94010000 		.4byte	.LVL55-.Ltext0
 10862 16af 98010000 		.4byte	.LVL56-.Ltext0
 10863 16b3 0400     		.2byte	0x4
 10864 16b5 70       		.byte	0x70
 10865 16b6 D000     		.sleb128 80
 10866 16b8 9F       		.byte	0x9f
 10867 16b9 98010000 		.4byte	.LVL56-.Ltext0
 10868 16bd A6010000 		.4byte	.LVL58-.Ltext0
 10869 16c1 0400     		.2byte	0x4
 10870 16c3 74       		.byte	0x74
 10871 16c4 D000     		.sleb128 80
 10872 16c6 9F       		.byte	0x9f
 10873 16c7 AA010000 		.4byte	.LVL59-.Ltext0
 10874 16cb AE010000 		.4byte	.LFE6-.Ltext0
 10875 16cf 0400     		.2byte	0x4
 10876 16d1 70       		.byte	0x70
 10877 16d2 D000     		.sleb128 80
 10878 16d4 9F       		.byte	0x9f
 10879 16d5 00000000 		.4byte	0
 10880 16d9 00000000 		.4byte	0
 10881              	.LVUS27:
 10882 16dd 03       		.uleb128 .LVU205
 10883 16de 00       		.uleb128 .LVU212
 10884 16df 00       		.uleb128 .LVU212
 10885 16e0 01       		.uleb128 .LVU219
 10886 16e1 00       		.uleb128 .LVU224
ARM GAS  /tmp/ccMyq1Ea.s 			page 261


 10887 16e2 00       		.uleb128 0
 10888              	.LLST27:
 10889 16e3 8E010000 		.4byte	.LVL54-.Ltext0
 10890 16e7 98010000 		.4byte	.LVL56-.Ltext0
 10891 16eb 0100     		.2byte	0x1
 10892 16ed 50       		.byte	0x50
 10893 16ee 98010000 		.4byte	.LVL56-.Ltext0
 10894 16f2 A6010000 		.4byte	.LVL58-.Ltext0
 10895 16f6 0100     		.2byte	0x1
 10896 16f8 54       		.byte	0x54
 10897 16f9 AA010000 		.4byte	.LVL59-.Ltext0
 10898 16fd AE010000 		.4byte	.LFE6-.Ltext0
 10899 1701 0100     		.2byte	0x1
 10900 1703 50       		.byte	0x50
 10901 1704 00000000 		.4byte	0
 10902 1708 00000000 		.4byte	0
 10903              	.LVUS28:
 10904 170c 03       		.uleb128 .LVU205
 10905 170d 01       		.uleb128 .LVU219
 10906 170e 00       		.uleb128 .LVU224
 10907 170f 00       		.uleb128 0
 10908              	.LLST28:
 10909 1710 8E010000 		.4byte	.LVL54-.Ltext0
 10910 1714 A6010000 		.4byte	.LVL58-.Ltext0
 10911 1718 0100     		.2byte	0x1
 10912 171a 57       		.byte	0x57
 10913 171b AA010000 		.4byte	.LVL59-.Ltext0
 10914 171f AE010000 		.4byte	.LFE6-.Ltext0
 10915 1723 0100     		.2byte	0x1
 10916 1725 57       		.byte	0x57
 10917 1726 00000000 		.4byte	0
 10918 172a 00000000 		.4byte	0
 10919              	.LVUS29:
 10920 172e 03       		.uleb128 .LVU205
 10921 172f 00       		.uleb128 .LVU210
 10922 1730 00       		.uleb128 .LVU210
 10923 1731 01       		.uleb128 .LVU211
 10924 1732 01       		.uleb128 .LVU211
 10925 1733 00       		.uleb128 .LVU212
 10926 1734 00       		.uleb128 .LVU212
 10927 1735 01       		.uleb128 .LVU219
 10928 1736 00       		.uleb128 .LVU224
 10929 1737 00       		.uleb128 0
 10930              	.LLST29:
 10931 1738 8E010000 		.4byte	.LVL54-.Ltext0
 10932 173c 94010000 		.4byte	.LVL55-.Ltext0
 10933 1740 0400     		.2byte	0x4
 10934 1742 70       		.byte	0x70
 10935 1743 D000     		.sleb128 80
 10936 1745 9F       		.byte	0x9f
 10937 1746 94010000 		.4byte	.LVL55-.Ltext0
 10938 174a 94010000 		.4byte	.LVL55-.Ltext0
 10939 174e 0100     		.2byte	0x1
 10940 1750 53       		.byte	0x53
 10941 1751 94010000 		.4byte	.LVL55-.Ltext0
 10942 1755 98010000 		.4byte	.LVL56-.Ltext0
 10943 1759 0400     		.2byte	0x4
ARM GAS  /tmp/ccMyq1Ea.s 			page 262


 10944 175b 70       		.byte	0x70
 10945 175c D000     		.sleb128 80
 10946 175e 9F       		.byte	0x9f
 10947 175f 98010000 		.4byte	.LVL56-.Ltext0
 10948 1763 A6010000 		.4byte	.LVL58-.Ltext0
 10949 1767 0400     		.2byte	0x4
 10950 1769 74       		.byte	0x74
 10951 176a D000     		.sleb128 80
 10952 176c 9F       		.byte	0x9f
 10953 176d AA010000 		.4byte	.LVL59-.Ltext0
 10954 1771 AE010000 		.4byte	.LFE6-.Ltext0
 10955 1775 0400     		.2byte	0x4
 10956 1777 70       		.byte	0x70
 10957 1778 D000     		.sleb128 80
 10958 177a 9F       		.byte	0x9f
 10959 177b 00000000 		.4byte	0
 10960 177f 00000000 		.4byte	0
 10961              	.LVUS30:
 10962 1783 03       		.uleb128 .LVU205
 10963 1784 01       		.uleb128 .LVU219
 10964 1785 00       		.uleb128 .LVU224
 10965 1786 00       		.uleb128 0
 10966              	.LLST30:
 10967 1787 8E010000 		.4byte	.LVL54-.Ltext0
 10968 178b A6010000 		.4byte	.LVL58-.Ltext0
 10969 178f 0100     		.2byte	0x1
 10970 1791 55       		.byte	0x55
 10971 1792 AA010000 		.4byte	.LVL59-.Ltext0
 10972 1796 AE010000 		.4byte	.LFE6-.Ltext0
 10973 179a 0100     		.2byte	0x1
 10974 179c 55       		.byte	0x55
 10975 179d 00000000 		.4byte	0
 10976 17a1 00000000 		.4byte	0
 10977              	.LVUS31:
 10978 17a5 03       		.uleb128 .LVU205
 10979 17a6 01       		.uleb128 .LVU219
 10980 17a7 00       		.uleb128 .LVU224
 10981 17a8 00       		.uleb128 0
 10982              	.LLST31:
 10983 17a9 8E010000 		.4byte	.LVL54-.Ltext0
 10984 17ad A6010000 		.4byte	.LVL58-.Ltext0
 10985 17b1 0100     		.2byte	0x1
 10986 17b3 56       		.byte	0x56
 10987 17b4 AA010000 		.4byte	.LVL59-.Ltext0
 10988 17b8 AE010000 		.4byte	.LFE6-.Ltext0
 10989 17bc 0100     		.2byte	0x1
 10990 17be 56       		.byte	0x56
 10991 17bf 00000000 		.4byte	0
 10992 17c3 00000000 		.4byte	0
 10993              	.LLST16:
 10994 17c7 10010000 		.4byte	.LFB5-.Ltext0
 10995 17cb 12010000 		.4byte	.LCFI9-.Ltext0
 10996 17cf 0200     		.2byte	0x2
 10997 17d1 7D       		.byte	0x7d
 10998 17d2 00       		.sleb128 0
 10999 17d3 12010000 		.4byte	.LCFI9-.Ltext0
 11000 17d7 7A010000 		.4byte	.LFE5-.Ltext0
ARM GAS  /tmp/ccMyq1Ea.s 			page 263


 11001 17db 0200     		.2byte	0x2
 11002 17dd 7D       		.byte	0x7d
 11003 17de 10       		.sleb128 16
 11004 17df 00000000 		.4byte	0
 11005 17e3 00000000 		.4byte	0
 11006              	.LVUS17:
 11007 17e7 00       		.uleb128 0
 11008 17e8 00       		.uleb128 .LVU151
 11009 17e9 00       		.uleb128 .LVU151
 11010 17ea 00       		.uleb128 0
 11011              	.LLST17:
 11012 17eb 10010000 		.4byte	.LVL42-.Ltext0
 11013 17ef 19010000 		.4byte	.LVL44-1-.Ltext0
 11014 17f3 0100     		.2byte	0x1
 11015 17f5 50       		.byte	0x50
 11016 17f6 19010000 		.4byte	.LVL44-1-.Ltext0
 11017 17fa 7A010000 		.4byte	.LFE5-.Ltext0
 11018 17fe 0100     		.2byte	0x1
 11019 1800 54       		.byte	0x54
 11020 1801 00000000 		.4byte	0
 11021 1805 00000000 		.4byte	0
 11022              	.LVUS18:
 11023 1809 00       		.uleb128 0
 11024 180a 00       		.uleb128 .LVU151
 11025 180b 00       		.uleb128 .LVU151
 11026 180c 00       		.uleb128 0
 11027              	.LLST18:
 11028 180d 10010000 		.4byte	.LVL42-.Ltext0
 11029 1811 19010000 		.4byte	.LVL44-1-.Ltext0
 11030 1815 0100     		.2byte	0x1
 11031 1817 51       		.byte	0x51
 11032 1818 19010000 		.4byte	.LVL44-1-.Ltext0
 11033 181c 7A010000 		.4byte	.LFE5-.Ltext0
 11034 1820 0100     		.2byte	0x1
 11035 1822 55       		.byte	0x55
 11036 1823 00000000 		.4byte	0
 11037 1827 00000000 		.4byte	0
 11038              	.LVUS19:
 11039 182b 00       		.uleb128 .LVU147
 11040 182c 00       		.uleb128 .LVU151
 11041 182d 00       		.uleb128 .LVU151
 11042 182e 00       		.uleb128 0
 11043              	.LLST19:
 11044 182f 14010000 		.4byte	.LVL43-.Ltext0
 11045 1833 19010000 		.4byte	.LVL44-1-.Ltext0
 11046 1837 0100     		.2byte	0x1
 11047 1839 50       		.byte	0x50
 11048 183a 19010000 		.4byte	.LVL44-1-.Ltext0
 11049 183e 7A010000 		.4byte	.LFE5-.Ltext0
 11050 1842 0100     		.2byte	0x1
 11051 1844 54       		.byte	0x54
 11052 1845 00000000 		.4byte	0
 11053 1849 00000000 		.4byte	0
 11054              		.section	.debug_aranges,"",%progbits
 11055 0000 1C000000 		.4byte	0x1c
 11056 0004 0200     		.2byte	0x2
 11057 0006 00000000 		.4byte	.Ldebug_info0
ARM GAS  /tmp/ccMyq1Ea.s 			page 264


 11058 000a 04       		.byte	0x4
 11059 000b 00       		.byte	0
 11060 000c 0000     		.2byte	0
 11061 000e 0000     		.2byte	0
 11062 0010 00000000 		.4byte	.Ltext0
 11063 0014 10080000 		.4byte	.Letext0-.Ltext0
 11064 0018 00000000 		.4byte	0
 11065 001c 00000000 		.4byte	0
 11066              		.section	.debug_ranges,"",%progbits
 11067              	.Ldebug_ranges0:
 11068 0000 AC000000 		.4byte	.LBB23-.Ltext0
 11069 0004 C4000000 		.4byte	.LBE23-.Ltext0
 11070 0008 EC000000 		.4byte	.LBB25-.Ltext0
 11071 000c FE000000 		.4byte	.LBE25-.Ltext0
 11072 0010 00000000 		.4byte	0
 11073 0014 00000000 		.4byte	0
 11074 0018 CC000000 		.4byte	.LBB24-.Ltext0
 11075 001c E4000000 		.4byte	.LBE24-.Ltext0
 11076 0020 FE000000 		.4byte	.LBB26-.Ltext0
 11077 0024 10010000 		.4byte	.LBE26-.Ltext0
 11078 0028 00000000 		.4byte	0
 11079 002c 00000000 		.4byte	0
 11080 0030 8E010000 		.4byte	.LBB29-.Ltext0
 11081 0034 90010000 		.4byte	.LBE29-.Ltext0
 11082 0038 94010000 		.4byte	.LBB33-.Ltext0
 11083 003c A6010000 		.4byte	.LBE33-.Ltext0
 11084 0040 AA010000 		.4byte	.LBB34-.Ltext0
 11085 0044 AE010000 		.4byte	.LBE34-.Ltext0
 11086 0048 00000000 		.4byte	0
 11087 004c 00000000 		.4byte	0
 11088 0050 5E020000 		.4byte	.LBB37-.Ltext0
 11089 0054 6E020000 		.4byte	.LBE37-.Ltext0
 11090 0058 88020000 		.4byte	.LBB40-.Ltext0
 11091 005c 8C020000 		.4byte	.LBE40-.Ltext0
 11092 0060 00000000 		.4byte	0
 11093 0064 00000000 		.4byte	0
 11094 0068 08030000 		.4byte	.LBB45-.Ltext0
 11095 006c 08030000 		.4byte	.LBE45-.Ltext0
 11096 0070 10030000 		.4byte	.LBB48-.Ltext0
 11097 0074 24030000 		.4byte	.LBE48-.Ltext0
 11098 0078 00000000 		.4byte	0
 11099 007c 00000000 		.4byte	0
 11100 0080 30030000 		.4byte	.LBB49-.Ltext0
 11101 0084 56030000 		.4byte	.LBE49-.Ltext0
 11102 0088 5C030000 		.4byte	.LBB52-.Ltext0
 11103 008c 66030000 		.4byte	.LBE52-.Ltext0
 11104 0090 00000000 		.4byte	0
 11105 0094 00000000 		.4byte	0
 11106 0098 6A030000 		.4byte	.LBB53-.Ltext0
 11107 009c 6A030000 		.4byte	.LBE53-.Ltext0
 11108 00a0 6E030000 		.4byte	.LBB56-.Ltext0
 11109 00a4 82030000 		.4byte	.LBE56-.Ltext0
 11110 00a8 00000000 		.4byte	0
 11111 00ac 00000000 		.4byte	0
 11112 00b0 82030000 		.4byte	.LBB57-.Ltext0
 11113 00b4 AC030000 		.4byte	.LBE57-.Ltext0
 11114 00b8 B2030000 		.4byte	.LBB62-.Ltext0
ARM GAS  /tmp/ccMyq1Ea.s 			page 265


 11115 00bc C0030000 		.4byte	.LBE62-.Ltext0
 11116 00c0 00000000 		.4byte	0
 11117 00c4 00000000 		.4byte	0
 11118 00c8 8A030000 		.4byte	.LBB58-.Ltext0
 11119 00cc AC030000 		.4byte	.LBE58-.Ltext0
 11120 00d0 B2030000 		.4byte	.LBB59-.Ltext0
 11121 00d4 BC030000 		.4byte	.LBE59-.Ltext0
 11122 00d8 00000000 		.4byte	0
 11123 00dc 00000000 		.4byte	0
 11124 00e0 D2030000 		.4byte	.LBB63-.Ltext0
 11125 00e4 0A040000 		.4byte	.LBE63-.Ltext0
 11126 00e8 10040000 		.4byte	.LBB64-.Ltext0
 11127 00ec 24040000 		.4byte	.LBE64-.Ltext0
 11128 00f0 00000000 		.4byte	0
 11129 00f4 00000000 		.4byte	0
 11130 00f8 C0040000 		.4byte	.LBB69-.Ltext0
 11131 00fc FA040000 		.4byte	.LBE69-.Ltext0
 11132 0100 FE040000 		.4byte	.LBB70-.Ltext0
 11133 0104 02050000 		.4byte	.LBE70-.Ltext0
 11134 0108 06050000 		.4byte	.LBB71-.Ltext0
 11135 010c 12050000 		.4byte	.LBE71-.Ltext0
 11136 0110 00000000 		.4byte	0
 11137 0114 00000000 		.4byte	0
 11138 0118 0A060000 		.4byte	.LBB75-.Ltext0
 11139 011c 42060000 		.4byte	.LBE75-.Ltext0
 11140 0120 46060000 		.4byte	.LBB76-.Ltext0
 11141 0124 5A060000 		.4byte	.LBE76-.Ltext0
 11142 0128 00000000 		.4byte	0
 11143 012c 00000000 		.4byte	0
 11144 0130 E4060000 		.4byte	.LBB77-.Ltext0
 11145 0134 E4060000 		.4byte	.LBE77-.Ltext0
 11146 0138 EC060000 		.4byte	.LBB80-.Ltext0
 11147 013c 00070000 		.4byte	.LBE80-.Ltext0
 11148 0140 00000000 		.4byte	0
 11149 0144 00000000 		.4byte	0
 11150 0148 00070000 		.4byte	.LBB81-.Ltext0
 11151 014c 32070000 		.4byte	.LBE81-.Ltext0
 11152 0150 3A070000 		.4byte	.LBB86-.Ltext0
 11153 0154 48070000 		.4byte	.LBE86-.Ltext0
 11154 0158 00000000 		.4byte	0
 11155 015c 00000000 		.4byte	0
 11156 0160 04070000 		.4byte	.LBB82-.Ltext0
 11157 0164 32070000 		.4byte	.LBE82-.Ltext0
 11158 0168 3A070000 		.4byte	.LBB83-.Ltext0
 11159 016c 44070000 		.4byte	.LBE83-.Ltext0
 11160 0170 00000000 		.4byte	0
 11161 0174 00000000 		.4byte	0
 11162 0178 48070000 		.4byte	.LBB87-.Ltext0
 11163 017c 48070000 		.4byte	.LBE87-.Ltext0
 11164 0180 4C070000 		.4byte	.LBB90-.Ltext0
 11165 0184 60070000 		.4byte	.LBE90-.Ltext0
 11166 0188 00000000 		.4byte	0
 11167 018c 00000000 		.4byte	0
 11168              		.section	.debug_line,"",%progbits
 11169              	.Ldebug_line0:
 11170 0000 78100000 		.section	.debug_str,"MS",%progbits,1
 11170      03006901 
ARM GAS  /tmp/ccMyq1Ea.s 			page 266


 11170      00000201 
 11170      FB0E0D00 
 11170      01010101 
 11171              	.LASF28:
 11172 0000 75784E75 		.ascii	"uxNumberOfItems\000"
 11172      6D626572 
 11172      4F664974 
 11172      656D7300 
 11173              	.LASF80:
 11174 0010 76506F72 		.ascii	"vPortExitCritical\000"
 11174      74457869 
 11174      74437269 
 11174      74696361 
 11174      6C00
 11175              	.LASF57:
 11176 0022 53656D61 		.ascii	"SemaphoreData\000"
 11176      70686F72 
 11176      65446174 
 11176      6100
 11177              	.LASF155:
 11178 0030 74736B54 		.ascii	"tskTaskControlBlock\000"
 11178      61736B43 
 11178      6F6E7472 
 11178      6F6C426C 
 11178      6F636B00 
 11179              	.LASF60:
 11180 0044 53656D61 		.ascii	"SemaphoreData_t\000"
 11180      70686F72 
 11180      65446174 
 11180      615F7400 
 11181              	.LASF67:
 11182 0054 76546173 		.ascii	"vTaskPriorityDisinheritAfterTimeout\000"
 11182      6B507269 
 11182      6F726974 
 11182      79446973 
 11182      696E6865 
 11183              	.LASF115:
 11184 0078 78517565 		.ascii	"xQueueReceiveFromISR\000"
 11184      75655265 
 11184      63656976 
 11184      6546726F 
 11184      6D495352 
 11185              	.LASF45:
 11186 008d 78546173 		.ascii	"xTasksWaitingToReceive\000"
 11186      6B735761 
 11186      6974696E 
 11186      67546F52 
 11186      65636569 
 11187              	.LASF116:
 11188 00a4 70784869 		.ascii	"pxHigherPriorityTaskWoken\000"
 11188      67686572 
 11188      5072696F 
 11188      72697479 
 11188      5461736B 
 11189              	.LASF136:
 11190 00be 70784D75 		.ascii	"pxMutex\000"
 11190      74657800 
ARM GAS  /tmp/ccMyq1Ea.s 			page 267


 11191              	.LASF1:
 11192 00c6 756E7369 		.ascii	"unsigned int\000"
 11192      676E6564 
 11192      20696E74 
 11192      00
 11193              	.LASF29:
 11194 00d3 7078496E 		.ascii	"pxIndex\000"
 11194      64657800 
 11195              	.LASF36:
 11196 00db 7854494D 		.ascii	"xTIME_OUT\000"
 11196      455F4F55 
 11196      5400
 11197              	.LASF107:
 11198 00e5 76517565 		.ascii	"vQueueDelete\000"
 11198      75654465 
 11198      6C657465 
 11198      00
 11199              	.LASF26:
 11200 00f2 784C4953 		.ascii	"xLIST_ITEM\000"
 11200      545F4954 
 11200      454D00
 11201              	.LASF126:
 11202 00fd 78517565 		.ascii	"xQueueGenericSendFromISR\000"
 11202      75654765 
 11202      6E657269 
 11202      6353656E 
 11202      6446726F 
 11203              	.LASF105:
 11204 0116 76517565 		.ascii	"vQueueSetQueueNumber\000"
 11204      75655365 
 11204      74517565 
 11204      75654E75 
 11204      6D626572 
 11205              	.LASF85:
 11206 012b 78576169 		.ascii	"xWaitIndefinitely\000"
 11206      74496E64 
 11206      6566696E 
 11206      6974656C 
 11206      7900
 11207              	.LASF44:
 11208 013d 78546173 		.ascii	"xTasksWaitingToSend\000"
 11208      6B735761 
 11208      6974696E 
 11208      67546F53 
 11208      656E6400 
 11209              	.LASF110:
 11210 0151 75785175 		.ascii	"uxQueueSpacesAvailable\000"
 11210      65756553 
 11210      70616365 
 11210      73417661 
 11210      696C6162 
 11211              	.LASF50:
 11212 0168 6354784C 		.ascii	"cTxLock\000"
 11212      6F636B00 
 11213              	.LASF37:
 11214 0170 784F7665 		.ascii	"xOverflowCount\000"
 11214      72666C6F 
ARM GAS  /tmp/ccMyq1Ea.s 			page 268


 11214      77436F75 
 11214      6E7400
 11215              	.LASF83:
 11216 017f 76506F72 		.ascii	"vPortEnterCritical\000"
 11216      74456E74 
 11216      65724372 
 11216      69746963 
 11216      616C00
 11217              	.LASF156:
 11218 0192 5F5F6275 		.ascii	"__builtin_memcpy\000"
 11218      696C7469 
 11218      6E5F6D65 
 11218      6D637079 
 11218      00
 11219              	.LASF64:
 11220 01a3 51756575 		.ascii	"Queue_t\000"
 11220      655F7400 
 11221              	.LASF140:
 11222 01ab 75784D75 		.ascii	"uxMutexLength\000"
 11222      7465784C 
 11222      656E6774 
 11222      6800
 11223              	.LASF127:
 11224 01b9 78436F70 		.ascii	"xCopyPosition\000"
 11224      79506F73 
 11224      6974696F 
 11224      6E00
 11225              	.LASF109:
 11226 01c7 75785265 		.ascii	"uxReturn\000"
 11226      7475726E 
 11226      00
 11227              	.LASF55:
 11228 01d0 70635265 		.ascii	"pcReadFrom\000"
 11228      61644672 
 11228      6F6D00
 11229              	.LASF113:
 11230 01db 75785361 		.ascii	"uxSavedInterruptStatus\000"
 11230      76656449 
 11230      6E746572 
 11230      72757074 
 11230      53746174 
 11231              	.LASF144:
 11232 01f2 70727649 		.ascii	"prvInitialiseNewQueue\000"
 11232      6E697469 
 11232      616C6973 
 11232      654E6577 
 11232      51756575 
 11233              	.LASF17:
 11234 0208 75696E74 		.ascii	"uint32_t\000"
 11234      33325F74 
 11234      00
 11235              	.LASF15:
 11236 0211 696E7438 		.ascii	"int8_t\000"
 11236      5F7400
 11237              	.LASF141:
 11238 0218 75784D75 		.ascii	"uxMutexSize\000"
 11238      74657853 
ARM GAS  /tmp/ccMyq1Ea.s 			page 269


 11238      697A6500 
 11239              	.LASF129:
 11240 0224 78596965 		.ascii	"xYieldRequired\000"
 11240      6C645265 
 11240      71756972 
 11240      656400
 11241              	.LASF153:
 11242 0233 756C4F72 		.ascii	"ulOriginalBASEPRI\000"
 11242      6967696E 
 11242      616C4241 
 11242      53455052 
 11242      4900
 11243              	.LASF61:
 11244 0245 78517565 		.ascii	"xQueue\000"
 11244      756500
 11245              	.LASF142:
 11246 024c 70784E65 		.ascii	"pxNewQueue\000"
 11246      77517565 
 11246      756500
 11247              	.LASF124:
 11248 0257 78517565 		.ascii	"xQueueReceive\000"
 11248      75655265 
 11248      63656976 
 11248      6500
 11249              	.LASF41:
 11250 0265 51756575 		.ascii	"QueueDefinition\000"
 11250      65446566 
 11250      696E6974 
 11250      696F6E00 
 11251              	.LASF0:
 11252 0275 6C6F6E67 		.ascii	"long long unsigned int\000"
 11252      206C6F6E 
 11252      6720756E 
 11252      7369676E 
 11252      65642069 
 11253              	.LASF86:
 11254 028c 474E5520 		.ascii	"GNU C17 13.2.0 -mcpu=cortex-m3 -mthumb -mfloat-abi="
 11254      43313720 
 11254      31332E32 
 11254      2E30202D 
 11254      6D637075 
 11255 02bf 736F6674 		.ascii	"soft -march=armv7-m -g -gdwarf-2 -Os -fomit-frame-p"
 11255      202D6D61 
 11255      7263683D 
 11255      61726D76 
 11255      372D6D20 
 11256 02f2 6F696E74 		.ascii	"ointer\000"
 11256      657200
 11257              	.LASF96:
 11258 02f9 70727649 		.ascii	"prvIsQueueEmpty\000"
 11258      73517565 
 11258      7565456D 
 11258      70747900 
 11259              	.LASF95:
 11260 0309 70764275 		.ascii	"pvBuffer\000"
 11260      66666572 
 11260      00
ARM GAS  /tmp/ccMyq1Ea.s 			page 270


 11261              	.LASF101:
 11262 0312 70727647 		.ascii	"prvGetDisinheritPriorityAfterTimeout\000"
 11262      65744469 
 11262      73696E68 
 11262      65726974 
 11262      5072696F 
 11263              	.LASF23:
 11264 0337 70785072 		.ascii	"pxPrevious\000"
 11264      6576696F 
 11264      757300
 11265              	.LASF46:
 11266 0342 75784D65 		.ascii	"uxMessagesWaiting\000"
 11266      73736167 
 11266      65735761 
 11266      6974696E 
 11266      6700
 11267              	.LASF62:
 11268 0354 7853656D 		.ascii	"xSemaphore\000"
 11268      6170686F 
 11268      726500
 11269              	.LASF79:
 11270 035f 7076506F 		.ascii	"pvPortMalloc\000"
 11270      72744D61 
 11270      6C6C6F63 
 11270      00
 11271              	.LASF76:
 11272 036c 76546173 		.ascii	"vTaskSuspendAll\000"
 11272      6B537573 
 11272      70656E64 
 11272      416C6C00 
 11273              	.LASF117:
 11274 037c 78517565 		.ascii	"xQueuePeek\000"
 11274      75655065 
 11274      656B00
 11275              	.LASF88:
 11276 0387 2F686F6D 		.ascii	"/home/me/Codigos/6-Stm32_GCC_FreeRTOS10.2.1/5-PWM_L"
 11276      652F6D65 
 11276      2F436F64 
 11276      69676F73 
 11276      2F362D53 
 11277 03ba 43445F53 		.ascii	"CD_SERIAL\000"
 11277      45524941 
 11277      4C00
 11278              	.LASF118:
 11279 03c4 78456E74 		.ascii	"xEntryTimeSet\000"
 11279      72795469 
 11279      6D655365 
 11279      7400
 11280              	.LASF5:
 11281 03d2 73697A65 		.ascii	"size_t\000"
 11281      5F7400
 11282              	.LASF120:
 11283 03d9 7854696D 		.ascii	"xTimeOut\000"
 11283      654F7574 
 11283      00
 11284              	.LASF133:
 11285 03e2 7848616E 		.ascii	"xHandle\000"
ARM GAS  /tmp/ccMyq1Ea.s 			page 271


 11285      646C6500 
 11286              	.LASF32:
 11287 03ea 784D494E 		.ascii	"xMINI_LIST_ITEM\000"
 11287      495F4C49 
 11287      53545F49 
 11287      54454D00 
 11288              	.LASF27:
 11289 03fa 784C4953 		.ascii	"xLIST\000"
 11289      5400
 11290              	.LASF119:
 11291 0400 78517565 		.ascii	"xQueueSemaphoreTake\000"
 11291      75655365 
 11291      6D617068 
 11291      6F726554 
 11291      616B6500 
 11292              	.LASF150:
 11293 0414 76506F72 		.ascii	"vPortSetBASEPRI\000"
 11293      74536574 
 11293      42415345 
 11293      50524900 
 11294              	.LASF97:
 11295 0424 70727643 		.ascii	"prvCopyDataToQueue\000"
 11295      6F707944 
 11295      61746154 
 11295      6F517565 
 11295      756500
 11296              	.LASF128:
 11297 0437 78517565 		.ascii	"xQueueGenericSend\000"
 11297      75654765 
 11297      6E657269 
 11297      6353656E 
 11297      6400
 11298              	.LASF73:
 11299 0449 76546173 		.ascii	"vTaskPlaceOnEventList\000"
 11299      6B506C61 
 11299      63654F6E 
 11299      4576656E 
 11299      744C6973 
 11300              	.LASF71:
 11301 045f 70765461 		.ascii	"pvTaskIncrementMutexHeldCount\000"
 11301      736B496E 
 11301      6372656D 
 11301      656E744D 
 11301      75746578 
 11302              	.LASF48:
 11303 047d 75784974 		.ascii	"uxItemSize\000"
 11303      656D5369 
 11303      7A6500
 11304              	.LASF132:
 11305 0488 7578496E 		.ascii	"uxInitialCount\000"
 11305      69746961 
 11305      6C436F75 
 11305      6E7400
 11306              	.LASF70:
 11307 0497 78546173 		.ascii	"xTaskPriorityDisinherit\000"
 11307      6B507269 
 11307      6F726974 
ARM GAS  /tmp/ccMyq1Ea.s 			page 272


 11307      79446973 
 11307      696E6865 
 11308              	.LASF82:
 11309 04af 78546173 		.ascii	"xTaskRemoveFromEventList\000"
 11309      6B52656D 
 11309      6F766546 
 11309      726F6D45 
 11309      76656E74 
 11310              	.LASF14:
 11311 04c8 63686172 		.ascii	"char\000"
 11311      00
 11312              	.LASF31:
 11313 04cd 4C697374 		.ascii	"ListItem_t\000"
 11313      4974656D 
 11313      5F7400
 11314              	.LASF100:
 11315 04d8 70727649 		.ascii	"prvIsQueueFull\000"
 11315      73517565 
 11315      75654675 
 11315      6C6C00
 11316              	.LASF53:
 11317 04e7 51756575 		.ascii	"QueuePointers\000"
 11317      65506F69 
 11317      6E746572 
 11317      7300
 11318              	.LASF154:
 11319 04f5 756C4E65 		.ascii	"ulNewBASEPRI\000"
 11319      77424153 
 11319      45505249 
 11319      00
 11320              	.LASF19:
 11321 0502 55426173 		.ascii	"UBaseType_t\000"
 11321      65547970 
 11321      655F7400 
 11322              	.LASF125:
 11323 050e 78517565 		.ascii	"xQueueGiveFromISR\000"
 11323      75654769 
 11323      76654672 
 11323      6F6D4953 
 11323      5200
 11324              	.LASF40:
 11325 0520 51756575 		.ascii	"QueueHandle_t\000"
 11325      6548616E 
 11325      646C655F 
 11325      7400
 11326              	.LASF30:
 11327 052e 784C6973 		.ascii	"xListEnd\000"
 11327      74456E64 
 11327      00
 11328              	.LASF108:
 11329 0537 75785175 		.ascii	"uxQueueMessagesWaitingFromISR\000"
 11329      6575654D 
 11329      65737361 
 11329      67657357 
 11329      61697469 
 11330              	.LASF33:
 11331 0555 4D696E69 		.ascii	"MiniListItem_t\000"
ARM GAS  /tmp/ccMyq1Ea.s 			page 273


 11331      4C697374 
 11331      4974656D 
 11331      5F7400
 11332              	.LASF65:
 11333 0564 76546173 		.ascii	"vTaskPlaceOnEventListRestricted\000"
 11333      6B506C61 
 11333      63654F6E 
 11333      4576656E 
 11333      744C6973 
 11334              	.LASF16:
 11335 0584 75696E74 		.ascii	"uint8_t\000"
 11335      385F7400 
 11336              	.LASF147:
 11337 058c 78517565 		.ascii	"xQueueGenericCreate\000"
 11337      75654765 
 11337      6E657269 
 11337      63437265 
 11337      61746500 
 11338              	.LASF138:
 11339 05a0 78517565 		.ascii	"xQueueCreateMutex\000"
 11339      75654372 
 11339      65617465 
 11339      4D757465 
 11339      7800
 11340              	.LASF152:
 11341 05b2 756C506F 		.ascii	"ulPortRaiseBASEPRI\000"
 11341      72745261 
 11341      69736542 
 11341      41534550 
 11341      524900
 11342              	.LASF3:
 11343 05c5 6C6F6E67 		.ascii	"long long int\000"
 11343      206C6F6E 
 11343      6720696E 
 11343      7400
 11344              	.LASF143:
 11345 05d3 70727649 		.ascii	"prvInitialiseMutex\000"
 11345      6E697469 
 11345      616C6973 
 11345      654D7574 
 11345      657800
 11346              	.LASF18:
 11347 05e6 42617365 		.ascii	"BaseType_t\000"
 11347      54797065 
 11347      5F7400
 11348              	.LASF146:
 11349 05f1 70756351 		.ascii	"pucQueueStorage\000"
 11349      75657565 
 11349      53746F72 
 11349      61676500 
 11350              	.LASF135:
 11351 0601 784D7574 		.ascii	"xMutex\000"
 11351      657800
 11352              	.LASF38:
 11353 0608 7854696D 		.ascii	"xTimeOnEntering\000"
 11353      654F6E45 
 11353      6E746572 
ARM GAS  /tmp/ccMyq1Ea.s 			page 274


 11353      696E6700 
 11354              	.LASF103:
 11355 0618 75635175 		.ascii	"ucQueueGetQueueType\000"
 11355      65756547 
 11355      65745175 
 11355      65756554 
 11355      79706500 
 11356              	.LASF22:
 11357 062c 70784E65 		.ascii	"pxNext\000"
 11357      787400
 11358              	.LASF139:
 11359 0633 784E6577 		.ascii	"xNewQueue\000"
 11359      51756575 
 11359      6500
 11360              	.LASF131:
 11361 063d 75784D61 		.ascii	"uxMaxCount\000"
 11361      78436F75 
 11361      6E7400
 11362              	.LASF39:
 11363 0648 54696D65 		.ascii	"TimeOut_t\000"
 11363      4F75745F 
 11363      7400
 11364              	.LASF77:
 11365 0652 76546173 		.ascii	"vTaskInternalSetTimeOutState\000"
 11365      6B496E74 
 11365      65726E61 
 11365      6C536574 
 11365      54696D65 
 11366              	.LASF114:
 11367 066f 70634F72 		.ascii	"pcOriginalReadPosition\000"
 11367      6967696E 
 11367      616C5265 
 11367      6164506F 
 11367      73697469 
 11368              	.LASF35:
 11369 0686 5461736B 		.ascii	"TaskHandle_t\000"
 11369      48616E64 
 11369      6C655F74 
 11369      00
 11370              	.LASF151:
 11371 0693 756C4E65 		.ascii	"ulNewMaskValue\000"
 11371      774D6173 
 11371      6B56616C 
 11371      756500
 11372              	.LASF102:
 11373 06a2 75784869 		.ascii	"uxHighestPriorityOfWaitingTasks\000"
 11373      67686573 
 11373      74507269 
 11373      6F726974 
 11373      794F6657 
 11374              	.LASF52:
 11375 06c2 75635175 		.ascii	"ucQueueType\000"
 11375      65756554 
 11375      79706500 
 11376              	.LASF34:
 11377 06ce 4C697374 		.ascii	"List_t\000"
 11377      5F7400
ARM GAS  /tmp/ccMyq1Ea.s 			page 275


 11378              	.LASF122:
 11379 06d5 75785365 		.ascii	"uxSemaphoreCount\000"
 11379      6D617068 
 11379      6F726543 
 11379      6F756E74 
 11379      00
 11380              	.LASF43:
 11381 06e6 70635772 		.ascii	"pcWriteTo\000"
 11381      69746554 
 11381      6F00
 11382              	.LASF20:
 11383 06f0 5469636B 		.ascii	"TickType_t\000"
 11383      54797065 
 11383      5F7400
 11384              	.LASF6:
 11385 06fb 5F5F696E 		.ascii	"__int8_t\000"
 11385      74385F74 
 11385      00
 11386              	.LASF106:
 11387 0704 75785175 		.ascii	"uxQueueGetQueueNumber\000"
 11387      65756547 
 11387      65745175 
 11387      6575654E 
 11387      756D6265 
 11388              	.LASF145:
 11389 071a 75785175 		.ascii	"uxQueueLength\000"
 11389      6575654C 
 11389      656E6774 
 11389      6800
 11390              	.LASF4:
 11391 0728 6C6F6E67 		.ascii	"long double\000"
 11391      20646F75 
 11391      626C6500 
 11392              	.LASF121:
 11393 0734 78496E68 		.ascii	"xInheritanceOccurred\000"
 11393      65726974 
 11393      616E6365 
 11393      4F636375 
 11393      72726564 
 11394              	.LASF134:
 11395 0749 78517565 		.ascii	"xQueueTakeMutexRecursive\000"
 11395      75655461 
 11395      6B654D75 
 11395      74657852 
 11395      65637572 
 11396              	.LASF25:
 11397 0762 7076436F 		.ascii	"pvContainer\000"
 11397      6E746169 
 11397      6E657200 
 11398              	.LASF87:
 11399 076e 2E2E2F66 		.ascii	"../freertos/queue.c\000"
 11399      72656572 
 11399      746F732F 
 11399      71756575 
 11399      652E6300 
 11400              	.LASF56:
 11401 0782 51756575 		.ascii	"QueuePointers_t\000"
ARM GAS  /tmp/ccMyq1Ea.s 			page 276


 11401      65506F69 
 11401      6E746572 
 11401      735F7400 
 11402              	.LASF47:
 11403 0792 75784C65 		.ascii	"uxLength\000"
 11403      6E677468 
 11403      00
 11404              	.LASF104:
 11405 079b 76517565 		.ascii	"vQueueWaitForMessageRestricted\000"
 11405      75655761 
 11405      6974466F 
 11405      724D6573 
 11405      73616765 
 11406              	.LASF51:
 11407 07ba 75785175 		.ascii	"uxQueueNumber\000"
 11407      6575654E 
 11407      756D6265 
 11407      7200
 11408              	.LASF9:
 11409 07c8 73686F72 		.ascii	"short int\000"
 11409      7420696E 
 11409      7400
 11410              	.LASF21:
 11411 07d2 78497465 		.ascii	"xItemValue\000"
 11411      6D56616C 
 11411      756500
 11412              	.LASF11:
 11413 07dd 6C6F6E67 		.ascii	"long int\000"
 11413      20696E74 
 11413      00
 11414              	.LASF148:
 11415 07e6 78517565 		.ascii	"xQueueSizeInBytes\000"
 11415      75655369 
 11415      7A65496E 
 11415      42797465 
 11415      7300
 11416              	.LASF72:
 11417 07f8 78546173 		.ascii	"xTaskResumeAll\000"
 11417      6B526573 
 11417      756D6541 
 11417      6C6C00
 11418              	.LASF98:
 11419 0807 70764974 		.ascii	"pvItemToQueue\000"
 11419      656D546F 
 11419      51756575 
 11419      6500
 11420              	.LASF74:
 11421 0815 78546173 		.ascii	"xTaskCheckForTimeOut\000"
 11421      6B436865 
 11421      636B466F 
 11421      7254696D 
 11421      654F7574 
 11422              	.LASF66:
 11423 082a 76506F72 		.ascii	"vPortFree\000"
 11423      74467265 
 11423      6500
 11424              	.LASF91:
ARM GAS  /tmp/ccMyq1Ea.s 			page 277


 11425 0834 78517565 		.ascii	"xQueueIsQueueFullFromISR\000"
 11425      75654973 
 11425      51756575 
 11425      6546756C 
 11425      6C46726F 
 11426              	.LASF111:
 11427 084d 75785175 		.ascii	"uxQueueMessagesWaiting\000"
 11427      6575654D 
 11427      65737361 
 11427      67657357 
 11427      61697469 
 11428              	.LASF54:
 11429 0864 70635461 		.ascii	"pcTail\000"
 11429      696C00
 11430              	.LASF8:
 11431 086b 5F5F7569 		.ascii	"__uint8_t\000"
 11431      6E74385F 
 11431      7400
 11432              	.LASF89:
 11433 0875 70785175 		.ascii	"pxQueue\000"
 11433      65756500 
 11434              	.LASF90:
 11435 087d 78526574 		.ascii	"xReturn\000"
 11435      75726E00 
 11436              	.LASF75:
 11437 0885 76546173 		.ascii	"vTaskMissedYield\000"
 11437      6B4D6973 
 11437      73656459 
 11437      69656C64 
 11437      00
 11438              	.LASF13:
 11439 0896 6C6F6E67 		.ascii	"long unsigned int\000"
 11439      20756E73 
 11439      69676E65 
 11439      6420696E 
 11439      7400
 11440              	.LASF68:
 11441 08a8 78546173 		.ascii	"xTaskPriorityInherit\000"
 11441      6B507269 
 11441      6F726974 
 11441      79496E68 
 11441      65726974 
 11442              	.LASF59:
 11443 08bd 75785265 		.ascii	"uxRecursiveCallCount\000"
 11443      63757273 
 11443      69766543 
 11443      616C6C43 
 11443      6F756E74 
 11444              	.LASF112:
 11445 08d2 78517565 		.ascii	"xQueuePeekFromISR\000"
 11445      75655065 
 11445      656B4672 
 11445      6F6D4953 
 11445      5200
 11446              	.LASF123:
 11447 08e4 75784869 		.ascii	"uxHighestWaitingPriority\000"
 11447      67686573 
ARM GAS  /tmp/ccMyq1Ea.s 			page 278


 11447      74576169 
 11447      74696E67 
 11447      5072696F 
 11448              	.LASF2:
 11449 08fd 756E7369 		.ascii	"unsigned char\000"
 11449      676E6564 
 11449      20636861 
 11449      7200
 11450              	.LASF12:
 11451 090b 5F5F7569 		.ascii	"__uint32_t\000"
 11451      6E743332 
 11451      5F7400
 11452              	.LASF81:
 11453 0916 764C6973 		.ascii	"vListInitialise\000"
 11453      74496E69 
 11453      7469616C 
 11453      69736500 
 11454              	.LASF94:
 11455 0926 70727643 		.ascii	"prvCopyDataFromQueue\000"
 11455      6F707944 
 11455      61746146 
 11455      726F6D51 
 11455      75657565 
 11456              	.LASF84:
 11457 093b 78546963 		.ascii	"xTicksToWait\000"
 11457      6B73546F 
 11457      57616974 
 11457      00
 11458              	.LASF24:
 11459 0948 70764F77 		.ascii	"pvOwner\000"
 11459      6E657200 
 11460              	.LASF78:
 11461 0950 78546173 		.ascii	"xTaskGetCurrentTaskHandle\000"
 11461      6B476574 
 11461      43757272 
 11461      656E7454 
 11461      61736B48 
 11462              	.LASF42:
 11463 096a 70634865 		.ascii	"pcHead\000"
 11463      616400
 11464              	.LASF137:
 11465 0971 78517565 		.ascii	"xQueueGiveMutexRecursive\000"
 11465      75654769 
 11465      76654D75 
 11465      74657852 
 11465      65637572 
 11466              	.LASF93:
 11467 098a 70727655 		.ascii	"prvUnlockQueue\000"
 11467      6E6C6F63 
 11467      6B517565 
 11467      756500
 11468              	.LASF149:
 11469 0999 78517565 		.ascii	"xQueueGenericReset\000"
 11469      75654765 
 11469      6E657269 
 11469      63526573 
 11469      657400
ARM GAS  /tmp/ccMyq1Ea.s 			page 279


 11470              	.LASF92:
 11471 09ac 78517565 		.ascii	"xQueueIsQueueEmptyFromISR\000"
 11471      75654973 
 11471      51756575 
 11471      65456D70 
 11471      74794672 
 11472              	.LASF7:
 11473 09c6 7369676E 		.ascii	"signed char\000"
 11473      65642063 
 11473      68617200 
 11474              	.LASF10:
 11475 09d2 73686F72 		.ascii	"short unsigned int\000"
 11475      7420756E 
 11475      7369676E 
 11475      65642069 
 11475      6E7400
 11476              	.LASF69:
 11477 09e5 6D656D63 		.ascii	"memcpy\000"
 11477      707900
 11478              	.LASF63:
 11479 09ec 78515545 		.ascii	"xQUEUE\000"
 11479      554500
 11480              	.LASF58:
 11481 09f3 784D7574 		.ascii	"xMutexHolder\000"
 11481      6578486F 
 11481      6C646572 
 11481      00
 11482              	.LASF99:
 11483 0a00 78506F73 		.ascii	"xPosition\000"
 11483      6974696F 
 11483      6E00
 11484              	.LASF49:
 11485 0a0a 6352784C 		.ascii	"cRxLock\000"
 11485      6F636B00 
 11486              	.LASF130:
 11487 0a12 78517565 		.ascii	"xQueueCreateCountingSemaphore\000"
 11487      75654372 
 11487      65617465 
 11487      436F756E 
 11487      74696E67 
 11488              		.ident	"GCC: (Arch Repository) 13.2.0"
ARM GAS  /tmp/ccMyq1Ea.s 			page 280


DEFINED SYMBOLS
                            *ABS*:00000000 queue.c
     /tmp/ccMyq1Ea.s:24     .text:00000000 $t
     /tmp/ccMyq1Ea.s:29     .text:00000000 prvIsQueueEmpty
     /tmp/ccMyq1Ea.s:75     .text:00000016 prvCopyDataToQueue
     /tmp/ccMyq1Ea.s:252    .text:0000007c prvCopyDataFromQueue
     /tmp/ccMyq1Ea.s:340    .text:000000a4 prvUnlockQueue
     /tmp/ccMyq1Ea.s:512    .text:00000110 xQueueGenericReset
     /tmp/ccMyq1Ea.s:653    .text:0000017a xQueueGenericCreate
     /tmp/ccMyq1Ea.s:775    .text:000001ae xQueueCreateCountingSemaphore
     /tmp/ccMyq1Ea.s:831    .text:000001c0 xQueueGenericSend
     /tmp/ccMyq1Ea.s:1135   .text:000002ba xQueueCreateMutex
     /tmp/ccMyq1Ea.s:1216   .text:000002de xQueueGiveMutexRecursive
     /tmp/ccMyq1Ea.s:1299   .text:00000308 xQueueGenericSendFromISR
     /tmp/ccMyq1Ea.s:1485   .text:0000036a xQueueGiveFromISR
     /tmp/ccMyq1Ea.s:1672   .text:000003c0 xQueueReceive
     /tmp/ccMyq1Ea.s:1953   .text:000004ae xQueueSemaphoreTake
     /tmp/ccMyq1Ea.s:2319   .text:000005ca xQueueTakeMutexRecursive
     /tmp/ccMyq1Ea.s:2400   .text:000005f8 xQueuePeek
     /tmp/ccMyq1Ea.s:2689   .text:000006e4 xQueueReceiveFromISR
     /tmp/ccMyq1Ea.s:2878   .text:00000748 xQueuePeekFromISR
     /tmp/ccMyq1Ea.s:2998   .text:00000778 uxQueueMessagesWaiting
     /tmp/ccMyq1Ea.s:3045   .text:0000078a uxQueueSpacesAvailable
     /tmp/ccMyq1Ea.s:3098   .text:000007a0 uxQueueMessagesWaitingFromISR
     /tmp/ccMyq1Ea.s:3127   .text:000007a4 vQueueDelete
     /tmp/ccMyq1Ea.s:3151   .text:000007a8 uxQueueGetQueueNumber
     /tmp/ccMyq1Ea.s:3175   .text:000007ac vQueueSetQueueNumber
     /tmp/ccMyq1Ea.s:3199   .text:000007b0 ucQueueGetQueueType
     /tmp/ccMyq1Ea.s:3223   .text:000007b6 xQueueIsQueueEmptyFromISR
     /tmp/ccMyq1Ea.s:3256   .text:000007c0 xQueueIsQueueFullFromISR
     /tmp/ccMyq1Ea.s:3295   .text:000007cc vQueueWaitForMessageRestricted

UNDEFINED SYMBOLS
vPortEnterCritical
vPortExitCritical
xTaskPriorityDisinherit
memcpy
xTaskRemoveFromEventList
vTaskMissedYield
vListInitialise
pvPortMalloc
vTaskInternalSetTimeOutState
vTaskSuspendAll
xTaskCheckForTimeOut
vTaskPlaceOnEventList
xTaskResumeAll
xTaskGetCurrentTaskHandle
pvTaskIncrementMutexHeldCount
xTaskPriorityInherit
vTaskPriorityDisinheritAfterTimeout
vPortFree
vTaskPlaceOnEventListRestricted
