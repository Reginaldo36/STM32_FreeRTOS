ARM GAS  /tmp/ccjtHtwZ.s 			page 1


   1              		.cpu cortex-m3
   2              		.arch armv7-m
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1	@ Tag_ABI_FP_denormal
   5              		.eabi_attribute 21, 1	@ Tag_ABI_FP_exceptions
   6              		.eabi_attribute 23, 3	@ Tag_ABI_FP_number_model
   7              		.eabi_attribute 24, 1	@ Tag_ABI_align8_needed
   8              		.eabi_attribute 25, 1	@ Tag_ABI_align8_preserved
   9              		.eabi_attribute 26, 1	@ Tag_ABI_enum_size
  10              		.eabi_attribute 30, 4	@ Tag_ABI_optimization_goals
  11              		.eabi_attribute 34, 1	@ Tag_CPU_unaligned_access
  12              		.eabi_attribute 18, 4	@ Tag_ABI_PCS_wchar_t
  13              		.file	"queue.c"
  14              	@ GNU C17 (GNU Arm Embedded Toolchain 10.3-2021.10) version 10.3.1 20210824 (release) (arm-none-eab
  15              	@	compiled by GNU C version 4.8.4, GMP version 6.1.0, MPFR version 3.1.4, MPC version 1.0.3, isl ve
  16              	
  17              	@ GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
  18              	@ options passed:  -I . -I ../5-PWM_LCD_SERIAL
  19              	@ -I ../stm32f10x_lib/CMSIS/CM3/CoreSupport
  20              	@ -I ../stm32f10x_lib/CMSIS/CM3/DeviceSupport/ST/STM32F10x
  21              	@ -I ../stm32f10x_lib/STM32F10x_StdPeriph_Driver/inc
  22              	@ -I ../stm32f10x_lib/STM32F10x_StdPeriph_Driver -I ../freertos/include
  23              	@ -I ../freertos/portable/GCC/ARM_CM3 -imultilib thumb/v7-m/nofp
  24              	@ -iprefix /usr/bin/../lib/gcc/arm-none-eabi/10.3.1/
  25              	@ -isysroot /usr/bin/../arm-none-eabi -D__USES_INITFINI__ -D STM32F10X_MD
  26              	@ -D USE_STDPERIPH_DRIVER -D HSE_VALUE=8000000 -D RUN_FROM_FLASH=1
  27              	@ ../freertos/queue.c -mcpu=cortex-m3 -mthumb -mfloat-abi=soft
  28              	@ -mlibarch=armv7-m -march=armv7-m -auxbase-strip ../freertos/queue.o -g
  29              	@ -gdwarf-2 -Os -Wall -fomit-frame-pointer -fverbose-asm
  30              	@ options enabled:  -faggressive-loop-optimizations -fallocation-dce
  31              	@ -fauto-inc-dec -fbranch-count-reg -fcaller-saves -fcode-hoisting
  32              	@ -fcombine-stack-adjustments -fcompare-elim -fcprop-registers
  33              	@ -fcrossjumping -fcse-follow-jumps -fdefer-pop
  34              	@ -fdelete-null-pointer-checks -fdevirtualize -fdevirtualize-speculatively
  35              	@ -fdwarf2-cfi-asm -fearly-inlining -feliminate-unused-debug-symbols
  36              	@ -feliminate-unused-debug-types -fexpensive-optimizations
  37              	@ -fforward-propagate -ffp-int-builtin-inexact -ffunction-cse -fgcse
  38              	@ -fgcse-lm -fgnu-unique -fguess-branch-probability -fhoist-adjacent-loads
  39              	@ -fident -fif-conversion -fif-conversion2 -findirect-inlining -finline
  40              	@ -finline-atomics -finline-functions -finline-functions-called-once
  41              	@ -finline-small-functions -fipa-bit-cp -fipa-cp -fipa-icf
  42              	@ -fipa-icf-functions -fipa-icf-variables -fipa-profile -fipa-pure-const
  43              	@ -fipa-ra -fipa-reference -fipa-reference-addressable -fipa-sra
  44              	@ -fipa-stack-alignment -fipa-vrp -fira-hoist-pressure
  45              	@ -fira-share-save-slots -fira-share-spill-slots
  46              	@ -fisolate-erroneous-paths-dereference -fivopts -fkeep-static-consts
  47              	@ -fleading-underscore -flifetime-dse -flra-remat -fmath-errno
  48              	@ -fmerge-constants -fmerge-debug-strings -fmove-loop-invariants
  49              	@ -fomit-frame-pointer -foptimize-sibling-calls -fpartial-inlining
  50              	@ -fpeephole -fpeephole2 -fplt -fprefetch-loop-arrays -freg-struct-return
  51              	@ -freorder-blocks -freorder-functions -frerun-cse-after-loop
  52              	@ -fsched-critical-path-heuristic -fsched-dep-count-heuristic
  53              	@ -fsched-group-heuristic -fsched-interblock -fsched-last-insn-heuristic
  54              	@ -fsched-pressure -fsched-rank-heuristic -fsched-spec
  55              	@ -fsched-spec-insn-heuristic -fsched-stalled-insns-dep -fschedule-insns2
  56              	@ -fsection-anchors -fsemantic-interposition -fshow-column
  57              	@ -fshrink-wrap-separate -fsigned-zeros -fsplit-ivs-in-unroller
ARM GAS  /tmp/ccjtHtwZ.s 			page 2


  58              	@ -fsplit-wide-types -fssa-backprop -fssa-phiopt -fstdarg-opt
  59              	@ -fstore-merging -fstrict-aliasing -fstrict-volatile-bitfields
  60              	@ -fsync-libcalls -fthread-jumps -ftoplevel-reorder -ftrapping-math
  61              	@ -ftree-bit-ccp -ftree-builtin-call-dce -ftree-ccp -ftree-ch
  62              	@ -ftree-coalesce-vars -ftree-copy-prop -ftree-cselim -ftree-dce
  63              	@ -ftree-dominator-opts -ftree-dse -ftree-forwprop -ftree-fre
  64              	@ -ftree-loop-distribute-patterns -ftree-loop-if-convert -ftree-loop-im
  65              	@ -ftree-loop-ivcanon -ftree-loop-optimize -ftree-parallelize-loops=
  66              	@ -ftree-phiprop -ftree-pre -ftree-pta -ftree-reassoc -ftree-scev-cprop
  67              	@ -ftree-sink -ftree-slsr -ftree-sra -ftree-switch-conversion
  68              	@ -ftree-tail-merge -ftree-ter -ftree-vrp -funit-at-a-time -fvar-tracking
  69              	@ -fvar-tracking-assignments -fverbose-asm -fzero-initialized-in-bss
  70              	@ -masm-syntax-unified -mbe32 -mfix-cortex-m3-ldrd -mlittle-endian
  71              	@ -mpic-data-is-text-relative -msched-prolog -mthumb -munaligned-access
  72              	@ -mvectorize-with-neon-quad
  73              	
  74              		.text
  75              	.Ltext0:
  76              		.cfi_sections	.debug_frame
  77              		.align	1
  78              		.syntax unified
  79              		.thumb
  80              		.thumb_func
  81              		.type	prvIsQueueEmpty, %function
  82              	prvIsQueueEmpty:
  83              	.LVL0:
  84              	.LFB32:
  85              		.file 1 "../freertos/queue.c"
   1:../freertos/queue.c **** /*
   2:../freertos/queue.c ****  * FreeRTOS Kernel V10.2.1
   3:../freertos/queue.c ****  * Copyright (C) 2019 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:../freertos/queue.c ****  *
   5:../freertos/queue.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:../freertos/queue.c ****  * this software and associated documentation files (the "Software"), to deal in
   7:../freertos/queue.c ****  * the Software without restriction, including without limitation the rights to
   8:../freertos/queue.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:../freertos/queue.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:../freertos/queue.c ****  * subject to the following conditions:
  11:../freertos/queue.c ****  *
  12:../freertos/queue.c ****  * The above copyright notice and this permission notice shall be included in all
  13:../freertos/queue.c ****  * copies or substantial portions of the Software.
  14:../freertos/queue.c ****  *
  15:../freertos/queue.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:../freertos/queue.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:../freertos/queue.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:../freertos/queue.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:../freertos/queue.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:../freertos/queue.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:../freertos/queue.c ****  *
  22:../freertos/queue.c ****  * http://www.FreeRTOS.org
  23:../freertos/queue.c ****  * http://aws.amazon.com/freertos
  24:../freertos/queue.c ****  *
  25:../freertos/queue.c ****  * 1 tab == 4 spaces!
  26:../freertos/queue.c ****  */
  27:../freertos/queue.c **** 
  28:../freertos/queue.c **** #include <stdlib.h>
  29:../freertos/queue.c **** #include <string.h>
ARM GAS  /tmp/ccjtHtwZ.s 			page 3


  30:../freertos/queue.c **** 
  31:../freertos/queue.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  32:../freertos/queue.c **** all the API functions to use the MPU wrappers.  That should only be done when
  33:../freertos/queue.c **** task.h is included from an application file. */
  34:../freertos/queue.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  35:../freertos/queue.c **** 
  36:../freertos/queue.c **** #include "FreeRTOS.h"
  37:../freertos/queue.c **** #include "task.h"
  38:../freertos/queue.c **** #include "queue.h"
  39:../freertos/queue.c **** 
  40:../freertos/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
  41:../freertos/queue.c **** 	#include "croutine.h"
  42:../freertos/queue.c **** #endif
  43:../freertos/queue.c **** 
  44:../freertos/queue.c **** /* Lint e9021, e961 and e750 are suppressed as a MISRA exception justified
  45:../freertos/queue.c **** because the MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined
  46:../freertos/queue.c **** for the header files above, but not in this file, in order to generate the
  47:../freertos/queue.c **** correct privileged Vs unprivileged linkage and placement. */
  48:../freertos/queue.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750 !e9021. */
  49:../freertos/queue.c **** 
  50:../freertos/queue.c **** 
  51:../freertos/queue.c **** /* Constants used with the cRxLock and cTxLock structure members. */
  52:../freertos/queue.c **** #define queueUNLOCKED					( ( int8_t ) -1 )
  53:../freertos/queue.c **** #define queueLOCKED_UNMODIFIED			( ( int8_t ) 0 )
  54:../freertos/queue.c **** 
  55:../freertos/queue.c **** /* When the Queue_t structure is used to represent a base queue its pcHead and
  56:../freertos/queue.c **** pcTail members are used as pointers into the queue storage area.  When the
  57:../freertos/queue.c **** Queue_t structure is used to represent a mutex pcHead and pcTail pointers are
  58:../freertos/queue.c **** not necessary, and the pcHead pointer is set to NULL to indicate that the
  59:../freertos/queue.c **** structure instead holds a pointer to the mutex holder (if any).  Map alternative
  60:../freertos/queue.c **** names to the pcHead and structure member to ensure the readability of the code
  61:../freertos/queue.c **** is maintained.  The QueuePointers_t and SemaphoreData_t types are used to form
  62:../freertos/queue.c **** a union as their usage is mutually exclusive dependent on what the queue is
  63:../freertos/queue.c **** being used for. */
  64:../freertos/queue.c **** #define uxQueueType						pcHead
  65:../freertos/queue.c **** #define queueQUEUE_IS_MUTEX				NULL
  66:../freertos/queue.c **** 
  67:../freertos/queue.c **** typedef struct QueuePointers
  68:../freertos/queue.c **** {
  69:../freertos/queue.c **** 	int8_t *pcTail;					/*< Points to the byte at the end of the queue storage area.  Once more byte i
  70:../freertos/queue.c **** 	int8_t *pcReadFrom;				/*< Points to the last place that a queued item was read from when the stru
  71:../freertos/queue.c **** } QueuePointers_t;
  72:../freertos/queue.c **** 
  73:../freertos/queue.c **** typedef struct SemaphoreData
  74:../freertos/queue.c **** {
  75:../freertos/queue.c **** 	TaskHandle_t xMutexHolder;		 /*< The handle of the task that holds the mutex. */
  76:../freertos/queue.c **** 	UBaseType_t uxRecursiveCallCount;/*< Maintains a count of the number of times a recursive mutex ha
  77:../freertos/queue.c **** } SemaphoreData_t;
  78:../freertos/queue.c **** 
  79:../freertos/queue.c **** /* Semaphores do not actually store or copy data, so have an item size of
  80:../freertos/queue.c **** zero. */
  81:../freertos/queue.c **** #define queueSEMAPHORE_QUEUE_ITEM_LENGTH ( ( UBaseType_t ) 0 )
  82:../freertos/queue.c **** #define queueMUTEX_GIVE_BLOCK_TIME		 ( ( TickType_t ) 0U )
  83:../freertos/queue.c **** 
  84:../freertos/queue.c **** #if( configUSE_PREEMPTION == 0 )
  85:../freertos/queue.c **** 	/* If the cooperative scheduler is being used then a yield should not be
  86:../freertos/queue.c **** 	performed just because a higher priority task has been woken. */
ARM GAS  /tmp/ccjtHtwZ.s 			page 4


  87:../freertos/queue.c **** 	#define queueYIELD_IF_USING_PREEMPTION()
  88:../freertos/queue.c **** #else
  89:../freertos/queue.c **** 	#define queueYIELD_IF_USING_PREEMPTION() portYIELD_WITHIN_API()
  90:../freertos/queue.c **** #endif
  91:../freertos/queue.c **** 
  92:../freertos/queue.c **** /*
  93:../freertos/queue.c ****  * Definition of the queue used by the scheduler.
  94:../freertos/queue.c ****  * Items are queued by copy, not reference.  See the following link for the
  95:../freertos/queue.c ****  * rationale: https://www.freertos.org/Embedded-RTOS-Queues.html
  96:../freertos/queue.c ****  */
  97:../freertos/queue.c **** typedef struct QueueDefinition 		/* The old naming convention is used to prevent breaking kernel aw
  98:../freertos/queue.c **** {
  99:../freertos/queue.c **** 	int8_t *pcHead;					/*< Points to the beginning of the queue storage area. */
 100:../freertos/queue.c **** 	int8_t *pcWriteTo;				/*< Points to the free next place in the storage area. */
 101:../freertos/queue.c **** 
 102:../freertos/queue.c **** 	union
 103:../freertos/queue.c **** 	{
 104:../freertos/queue.c **** 		QueuePointers_t xQueue;		/*< Data required exclusively when this structure is used as a queue. */
 105:../freertos/queue.c **** 		SemaphoreData_t xSemaphore; /*< Data required exclusively when this structure is used as a semaph
 106:../freertos/queue.c **** 	} u;
 107:../freertos/queue.c **** 
 108:../freertos/queue.c **** 	List_t xTasksWaitingToSend;		/*< List of tasks that are blocked waiting to post onto this queue.  
 109:../freertos/queue.c **** 	List_t xTasksWaitingToReceive;	/*< List of tasks that are blocked waiting to read from this queue.
 110:../freertos/queue.c **** 
 111:../freertos/queue.c **** 	volatile UBaseType_t uxMessagesWaiting;/*< The number of items currently in the queue. */
 112:../freertos/queue.c **** 	UBaseType_t uxLength;			/*< The length of the queue defined as the number of items it will hold, n
 113:../freertos/queue.c **** 	UBaseType_t uxItemSize;			/*< The size of each items that the queue will hold. */
 114:../freertos/queue.c **** 
 115:../freertos/queue.c **** 	volatile int8_t cRxLock;		/*< Stores the number of items received from the queue (removed from the
 116:../freertos/queue.c **** 	volatile int8_t cTxLock;		/*< Stores the number of items transmitted to the queue (added to the qu
 117:../freertos/queue.c **** 
 118:../freertos/queue.c **** 	#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 119:../freertos/queue.c **** 		uint8_t ucStaticallyAllocated;	/*< Set to pdTRUE if the memory used by the queue was statically a
 120:../freertos/queue.c **** 	#endif
 121:../freertos/queue.c **** 
 122:../freertos/queue.c **** 	#if ( configUSE_QUEUE_SETS == 1 )
 123:../freertos/queue.c **** 		struct QueueDefinition *pxQueueSetContainer;
 124:../freertos/queue.c **** 	#endif
 125:../freertos/queue.c **** 
 126:../freertos/queue.c **** 	#if ( configUSE_TRACE_FACILITY == 1 )
 127:../freertos/queue.c **** 		UBaseType_t uxQueueNumber;
 128:../freertos/queue.c **** 		uint8_t ucQueueType;
 129:../freertos/queue.c **** 	#endif
 130:../freertos/queue.c **** 
 131:../freertos/queue.c **** } xQUEUE;
 132:../freertos/queue.c **** 
 133:../freertos/queue.c **** /* The old xQUEUE name is maintained above then typedefed to the new Queue_t
 134:../freertos/queue.c **** name below to enable the use of older kernel aware debuggers. */
 135:../freertos/queue.c **** typedef xQUEUE Queue_t;
 136:../freertos/queue.c **** 
 137:../freertos/queue.c **** /*-----------------------------------------------------------*/
 138:../freertos/queue.c **** 
 139:../freertos/queue.c **** /*
 140:../freertos/queue.c ****  * The queue registry is just a means for kernel aware debuggers to locate
 141:../freertos/queue.c ****  * queue structures.  It has no other purpose so is an optional component.
 142:../freertos/queue.c ****  */
 143:../freertos/queue.c **** #if ( configQUEUE_REGISTRY_SIZE > 0 )
ARM GAS  /tmp/ccjtHtwZ.s 			page 5


 144:../freertos/queue.c **** 
 145:../freertos/queue.c **** 	/* The type stored within the queue registry array.  This allows a name
 146:../freertos/queue.c **** 	to be assigned to each queue making kernel aware debugging a little
 147:../freertos/queue.c **** 	more user friendly. */
 148:../freertos/queue.c **** 	typedef struct QUEUE_REGISTRY_ITEM
 149:../freertos/queue.c **** 	{
 150:../freertos/queue.c **** 		const char *pcQueueName; /*lint !e971 Unqualified char types are allowed for strings and single c
 151:../freertos/queue.c **** 		QueueHandle_t xHandle;
 152:../freertos/queue.c **** 	} xQueueRegistryItem;
 153:../freertos/queue.c **** 
 154:../freertos/queue.c **** 	/* The old xQueueRegistryItem name is maintained above then typedefed to the
 155:../freertos/queue.c **** 	new xQueueRegistryItem name below to enable the use of older kernel aware
 156:../freertos/queue.c **** 	debuggers. */
 157:../freertos/queue.c **** 	typedef xQueueRegistryItem QueueRegistryItem_t;
 158:../freertos/queue.c **** 
 159:../freertos/queue.c **** 	/* The queue registry is simply an array of QueueRegistryItem_t structures.
 160:../freertos/queue.c **** 	The pcQueueName member of a structure being NULL is indicative of the
 161:../freertos/queue.c **** 	array position being vacant. */
 162:../freertos/queue.c **** 	PRIVILEGED_DATA QueueRegistryItem_t xQueueRegistry[ configQUEUE_REGISTRY_SIZE ];
 163:../freertos/queue.c **** 
 164:../freertos/queue.c **** #endif /* configQUEUE_REGISTRY_SIZE */
 165:../freertos/queue.c **** 
 166:../freertos/queue.c **** /*
 167:../freertos/queue.c ****  * Unlocks a queue locked by a call to prvLockQueue.  Locking a queue does not
 168:../freertos/queue.c ****  * prevent an ISR from adding or removing items to the queue, but does prevent
 169:../freertos/queue.c ****  * an ISR from removing tasks from the queue event lists.  If an ISR finds a
 170:../freertos/queue.c ****  * queue is locked it will instead increment the appropriate queue lock count
 171:../freertos/queue.c ****  * to indicate that a task may require unblocking.  When the queue in unlocked
 172:../freertos/queue.c ****  * these lock counts are inspected, and the appropriate action taken.
 173:../freertos/queue.c ****  */
 174:../freertos/queue.c **** static void prvUnlockQueue( Queue_t * const pxQueue ) PRIVILEGED_FUNCTION;
 175:../freertos/queue.c **** 
 176:../freertos/queue.c **** /*
 177:../freertos/queue.c ****  * Uses a critical section to determine if there is any data in a queue.
 178:../freertos/queue.c ****  *
 179:../freertos/queue.c ****  * @return pdTRUE if the queue contains no items, otherwise pdFALSE.
 180:../freertos/queue.c ****  */
 181:../freertos/queue.c **** static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue ) PRIVILEGED_FUNCTION;
 182:../freertos/queue.c **** 
 183:../freertos/queue.c **** /*
 184:../freertos/queue.c ****  * Uses a critical section to determine if there is any space in a queue.
 185:../freertos/queue.c ****  *
 186:../freertos/queue.c ****  * @return pdTRUE if there is no space, otherwise pdFALSE;
 187:../freertos/queue.c ****  */
 188:../freertos/queue.c **** static BaseType_t prvIsQueueFull( const Queue_t *pxQueue ) PRIVILEGED_FUNCTION;
 189:../freertos/queue.c **** 
 190:../freertos/queue.c **** /*
 191:../freertos/queue.c ****  * Copies an item into the queue, either at the front of the queue or the
 192:../freertos/queue.c ****  * back of the queue.
 193:../freertos/queue.c ****  */
 194:../freertos/queue.c **** static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const Bas
 195:../freertos/queue.c **** 
 196:../freertos/queue.c **** /*
 197:../freertos/queue.c ****  * Copies an item out of a queue.
 198:../freertos/queue.c ****  */
 199:../freertos/queue.c **** static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer ) PRIVILEGED_FUNCT
 200:../freertos/queue.c **** 
ARM GAS  /tmp/ccjtHtwZ.s 			page 6


 201:../freertos/queue.c **** #if ( configUSE_QUEUE_SETS == 1 )
 202:../freertos/queue.c **** 	/*
 203:../freertos/queue.c **** 	 * Checks to see if a queue is a member of a queue set, and if so, notifies
 204:../freertos/queue.c **** 	 * the queue set that the queue contains data.
 205:../freertos/queue.c **** 	 */
 206:../freertos/queue.c **** 	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCop
 207:../freertos/queue.c **** #endif
 208:../freertos/queue.c **** 
 209:../freertos/queue.c **** /*
 210:../freertos/queue.c ****  * Called after a Queue_t structure has been allocated either statically or
 211:../freertos/queue.c ****  * dynamically to fill in the structure's members.
 212:../freertos/queue.c ****  */
 213:../freertos/queue.c **** static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, u
 214:../freertos/queue.c **** 
 215:../freertos/queue.c **** /*
 216:../freertos/queue.c ****  * Mutexes are a special type of queue.  When a mutex is created, first the
 217:../freertos/queue.c ****  * queue is created, then prvInitialiseMutex() is called to configure the queue
 218:../freertos/queue.c ****  * as a mutex.
 219:../freertos/queue.c ****  */
 220:../freertos/queue.c **** #if( configUSE_MUTEXES == 1 )
 221:../freertos/queue.c **** 	static void prvInitialiseMutex( Queue_t *pxNewQueue ) PRIVILEGED_FUNCTION;
 222:../freertos/queue.c **** #endif
 223:../freertos/queue.c **** 
 224:../freertos/queue.c **** #if( configUSE_MUTEXES == 1 )
 225:../freertos/queue.c **** 	/*
 226:../freertos/queue.c **** 	 * If a task waiting for a mutex causes the mutex holder to inherit a
 227:../freertos/queue.c **** 	 * priority, but the waiting task times out, then the holder should
 228:../freertos/queue.c **** 	 * disinherit the priority - but only down to the highest priority of any
 229:../freertos/queue.c **** 	 * other tasks that are waiting for the same mutex.  This function returns
 230:../freertos/queue.c **** 	 * that priority.
 231:../freertos/queue.c **** 	 */
 232:../freertos/queue.c **** 	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue ) PRIVILEGE
 233:../freertos/queue.c **** #endif
 234:../freertos/queue.c **** /*-----------------------------------------------------------*/
 235:../freertos/queue.c **** 
 236:../freertos/queue.c **** /*
 237:../freertos/queue.c ****  * Macro to mark a queue as locked.  Locking a queue prevents an ISR from
 238:../freertos/queue.c ****  * accessing the queue event lists.
 239:../freertos/queue.c ****  */
 240:../freertos/queue.c **** #define prvLockQueue( pxQueue )								\
 241:../freertos/queue.c **** 	taskENTER_CRITICAL();									\
 242:../freertos/queue.c **** 	{														\
 243:../freertos/queue.c **** 		if( ( pxQueue )->cRxLock == queueUNLOCKED )			\
 244:../freertos/queue.c **** 		{													\
 245:../freertos/queue.c **** 			( pxQueue )->cRxLock = queueLOCKED_UNMODIFIED;	\
 246:../freertos/queue.c **** 		}													\
 247:../freertos/queue.c **** 		if( ( pxQueue )->cTxLock == queueUNLOCKED )			\
 248:../freertos/queue.c **** 		{													\
 249:../freertos/queue.c **** 			( pxQueue )->cTxLock = queueLOCKED_UNMODIFIED;	\
 250:../freertos/queue.c **** 		}													\
 251:../freertos/queue.c **** 	}														\
 252:../freertos/queue.c **** 	taskEXIT_CRITICAL()
 253:../freertos/queue.c **** /*-----------------------------------------------------------*/
 254:../freertos/queue.c **** 
 255:../freertos/queue.c **** BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
 256:../freertos/queue.c **** {
 257:../freertos/queue.c **** Queue_t * const pxQueue = xQueue;
ARM GAS  /tmp/ccjtHtwZ.s 			page 7


 258:../freertos/queue.c **** 
 259:../freertos/queue.c **** 	configASSERT( pxQueue );
 260:../freertos/queue.c **** 
 261:../freertos/queue.c **** 	taskENTER_CRITICAL();
 262:../freertos/queue.c **** 	{
 263:../freertos/queue.c **** 		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint 
 264:../freertos/queue.c **** 		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 265:../freertos/queue.c **** 		pxQueue->pcWriteTo = pxQueue->pcHead;
 266:../freertos/queue.c **** 		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSi
 267:../freertos/queue.c **** 		pxQueue->cRxLock = queueUNLOCKED;
 268:../freertos/queue.c **** 		pxQueue->cTxLock = queueUNLOCKED;
 269:../freertos/queue.c **** 
 270:../freertos/queue.c **** 		if( xNewQueue == pdFALSE )
 271:../freertos/queue.c **** 		{
 272:../freertos/queue.c **** 			/* If there are tasks blocked waiting to read from the queue, then
 273:../freertos/queue.c **** 			the tasks will remain blocked as after this function exits the queue
 274:../freertos/queue.c **** 			will still be empty.  If there are tasks blocked waiting to write to
 275:../freertos/queue.c **** 			the queue, then one should be unblocked as after this function exits
 276:../freertos/queue.c **** 			it will be possible to write to it. */
 277:../freertos/queue.c **** 			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 278:../freertos/queue.c **** 			{
 279:../freertos/queue.c **** 				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 280:../freertos/queue.c **** 				{
 281:../freertos/queue.c **** 					queueYIELD_IF_USING_PREEMPTION();
 282:../freertos/queue.c **** 				}
 283:../freertos/queue.c **** 				else
 284:../freertos/queue.c **** 				{
 285:../freertos/queue.c **** 					mtCOVERAGE_TEST_MARKER();
 286:../freertos/queue.c **** 				}
 287:../freertos/queue.c **** 			}
 288:../freertos/queue.c **** 			else
 289:../freertos/queue.c **** 			{
 290:../freertos/queue.c **** 				mtCOVERAGE_TEST_MARKER();
 291:../freertos/queue.c **** 			}
 292:../freertos/queue.c **** 		}
 293:../freertos/queue.c **** 		else
 294:../freertos/queue.c **** 		{
 295:../freertos/queue.c **** 			/* Ensure the event queues start in the correct state. */
 296:../freertos/queue.c **** 			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 297:../freertos/queue.c **** 			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 298:../freertos/queue.c **** 		}
 299:../freertos/queue.c **** 	}
 300:../freertos/queue.c **** 	taskEXIT_CRITICAL();
 301:../freertos/queue.c **** 
 302:../freertos/queue.c **** 	/* A value is returned for calling semantic consistency with previous
 303:../freertos/queue.c **** 	versions. */
 304:../freertos/queue.c **** 	return pdPASS;
 305:../freertos/queue.c **** }
 306:../freertos/queue.c **** /*-----------------------------------------------------------*/
 307:../freertos/queue.c **** 
 308:../freertos/queue.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 309:../freertos/queue.c **** 
 310:../freertos/queue.c **** 	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItem
 311:../freertos/queue.c **** 	{
 312:../freertos/queue.c **** 	Queue_t *pxNewQueue;
 313:../freertos/queue.c **** 
 314:../freertos/queue.c **** 		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
ARM GAS  /tmp/ccjtHtwZ.s 			page 8


 315:../freertos/queue.c **** 
 316:../freertos/queue.c **** 		/* The StaticQueue_t structure and the queue storage area must be
 317:../freertos/queue.c **** 		supplied. */
 318:../freertos/queue.c **** 		configASSERT( pxStaticQueue != NULL );
 319:../freertos/queue.c **** 
 320:../freertos/queue.c **** 		/* A queue storage area should be provided if the item size is not 0, and
 321:../freertos/queue.c **** 		should not be provided if the item size is 0. */
 322:../freertos/queue.c **** 		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 323:../freertos/queue.c **** 		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 324:../freertos/queue.c **** 
 325:../freertos/queue.c **** 		#if( configASSERT_DEFINED == 1 )
 326:../freertos/queue.c **** 		{
 327:../freertos/queue.c **** 			/* Sanity check that the size of the structure used to declare a
 328:../freertos/queue.c **** 			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
 329:../freertos/queue.c **** 			the real queue and semaphore structures. */
 330:../freertos/queue.c **** 			volatile size_t xSize = sizeof( StaticQueue_t );
 331:../freertos/queue.c **** 			configASSERT( xSize == sizeof( Queue_t ) );
 332:../freertos/queue.c **** 			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 333:../freertos/queue.c **** 		}
 334:../freertos/queue.c **** 		#endif /* configASSERT_DEFINED */
 335:../freertos/queue.c **** 
 336:../freertos/queue.c **** 		/* The address of a statically allocated queue was passed in, use it.
 337:../freertos/queue.c **** 		The address of a statically allocated storage area was also passed in
 338:../freertos/queue.c **** 		but is already set. */
 339:../freertos/queue.c **** 		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structure
 340:../freertos/queue.c **** 
 341:../freertos/queue.c **** 		if( pxNewQueue != NULL )
 342:../freertos/queue.c **** 		{
 343:../freertos/queue.c **** 			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 344:../freertos/queue.c **** 			{
 345:../freertos/queue.c **** 				/* Queues can be allocated wither statically or dynamically, so
 346:../freertos/queue.c **** 				note this queue was allocated statically in case the queue is
 347:../freertos/queue.c **** 				later deleted. */
 348:../freertos/queue.c **** 				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 349:../freertos/queue.c **** 			}
 350:../freertos/queue.c **** 			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 351:../freertos/queue.c **** 
 352:../freertos/queue.c **** 			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 353:../freertos/queue.c **** 		}
 354:../freertos/queue.c **** 		else
 355:../freertos/queue.c **** 		{
 356:../freertos/queue.c **** 			traceQUEUE_CREATE_FAILED( ucQueueType );
 357:../freertos/queue.c **** 			mtCOVERAGE_TEST_MARKER();
 358:../freertos/queue.c **** 		}
 359:../freertos/queue.c **** 
 360:../freertos/queue.c **** 		return pxNewQueue;
 361:../freertos/queue.c **** 	}
 362:../freertos/queue.c **** 
 363:../freertos/queue.c **** #endif /* configSUPPORT_STATIC_ALLOCATION */
 364:../freertos/queue.c **** /*-----------------------------------------------------------*/
 365:../freertos/queue.c **** 
 366:../freertos/queue.c **** #if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 367:../freertos/queue.c **** 
 368:../freertos/queue.c **** 	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, 
 369:../freertos/queue.c **** 	{
 370:../freertos/queue.c **** 	Queue_t *pxNewQueue;
 371:../freertos/queue.c **** 	size_t xQueueSizeInBytes;
ARM GAS  /tmp/ccjtHtwZ.s 			page 9


 372:../freertos/queue.c **** 	uint8_t *pucQueueStorage;
 373:../freertos/queue.c **** 
 374:../freertos/queue.c **** 		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 375:../freertos/queue.c **** 
 376:../freertos/queue.c **** 		if( uxItemSize == ( UBaseType_t ) 0 )
 377:../freertos/queue.c **** 		{
 378:../freertos/queue.c **** 			/* There is not going to be a queue storage area. */
 379:../freertos/queue.c **** 			xQueueSizeInBytes = ( size_t ) 0;
 380:../freertos/queue.c **** 		}
 381:../freertos/queue.c **** 		else
 382:../freertos/queue.c **** 		{
 383:../freertos/queue.c **** 			/* Allocate enough space to hold the maximum number of items that
 384:../freertos/queue.c **** 			can be in the queue at any time. */
 385:../freertos/queue.c **** 			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as t
 386:../freertos/queue.c **** 		}
 387:../freertos/queue.c **** 
 388:../freertos/queue.c **** 		/* Allocate the queue and storage area.  Justification for MISRA
 389:../freertos/queue.c **** 		deviation as follows:  pvPortMalloc() always ensures returned memory
 390:../freertos/queue.c **** 		blocks are aligned per the requirements of the MCU stack.  In this case
 391:../freertos/queue.c **** 		pvPortMalloc() must return a pointer that is guaranteed to meet the
 392:../freertos/queue.c **** 		alignment requirements of the Queue_t structure - which in this case
 393:../freertos/queue.c **** 		is an int8_t *.  Therefore, whenever the stack alignment requirements
 394:../freertos/queue.c **** 		are greater than or equal to the pointer to char requirements the cast
 395:../freertos/queue.c **** 		is safe.  In other cases alignment requirements are not strict (one or
 396:../freertos/queue.c **** 		two bytes). */
 397:../freertos/queue.c **** 		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !
 398:../freertos/queue.c **** 
 399:../freertos/queue.c **** 		if( pxNewQueue != NULL )
 400:../freertos/queue.c **** 		{
 401:../freertos/queue.c **** 			/* Jump past the queue structure to find the location of the queue
 402:../freertos/queue.c **** 			storage area. */
 403:../freertos/queue.c **** 			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 404:../freertos/queue.c **** 			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, es
 405:../freertos/queue.c **** 
 406:../freertos/queue.c **** 			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
 407:../freertos/queue.c **** 			{
 408:../freertos/queue.c **** 				/* Queues can be created either statically or dynamically, so
 409:../freertos/queue.c **** 				note this task was created dynamically in case it is later
 410:../freertos/queue.c **** 				deleted. */
 411:../freertos/queue.c **** 				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 412:../freertos/queue.c **** 			}
 413:../freertos/queue.c **** 			#endif /* configSUPPORT_STATIC_ALLOCATION */
 414:../freertos/queue.c **** 
 415:../freertos/queue.c **** 			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 416:../freertos/queue.c **** 		}
 417:../freertos/queue.c **** 		else
 418:../freertos/queue.c **** 		{
 419:../freertos/queue.c **** 			traceQUEUE_CREATE_FAILED( ucQueueType );
 420:../freertos/queue.c **** 			mtCOVERAGE_TEST_MARKER();
 421:../freertos/queue.c **** 		}
 422:../freertos/queue.c **** 
 423:../freertos/queue.c **** 		return pxNewQueue;
 424:../freertos/queue.c **** 	}
 425:../freertos/queue.c **** 
 426:../freertos/queue.c **** #endif /* configSUPPORT_STATIC_ALLOCATION */
 427:../freertos/queue.c **** /*-----------------------------------------------------------*/
 428:../freertos/queue.c **** 
ARM GAS  /tmp/ccjtHtwZ.s 			page 10


 429:../freertos/queue.c **** static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, u
 430:../freertos/queue.c **** {
 431:../freertos/queue.c **** 	/* Remove compiler warnings about unused parameters should
 432:../freertos/queue.c **** 	configUSE_TRACE_FACILITY not be set to 1. */
 433:../freertos/queue.c **** 	( void ) ucQueueType;
 434:../freertos/queue.c **** 
 435:../freertos/queue.c **** 	if( uxItemSize == ( UBaseType_t ) 0 )
 436:../freertos/queue.c **** 	{
 437:../freertos/queue.c **** 		/* No RAM was allocated for the queue storage area, but PC head cannot
 438:../freertos/queue.c **** 		be set to NULL because NULL is used as a key to say the queue is used as
 439:../freertos/queue.c **** 		a mutex.  Therefore just set pcHead to point to the queue as a benign
 440:../freertos/queue.c **** 		value that is known to be within the memory map. */
 441:../freertos/queue.c **** 		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 442:../freertos/queue.c **** 	}
 443:../freertos/queue.c **** 	else
 444:../freertos/queue.c **** 	{
 445:../freertos/queue.c **** 		/* Set the head to the start of the queue storage area. */
 446:../freertos/queue.c **** 		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 447:../freertos/queue.c **** 	}
 448:../freertos/queue.c **** 
 449:../freertos/queue.c **** 	/* Initialise the queue members as described where the queue type is
 450:../freertos/queue.c **** 	defined. */
 451:../freertos/queue.c **** 	pxNewQueue->uxLength = uxQueueLength;
 452:../freertos/queue.c **** 	pxNewQueue->uxItemSize = uxItemSize;
 453:../freertos/queue.c **** 	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 454:../freertos/queue.c **** 
 455:../freertos/queue.c **** 	#if ( configUSE_TRACE_FACILITY == 1 )
 456:../freertos/queue.c **** 	{
 457:../freertos/queue.c **** 		pxNewQueue->ucQueueType = ucQueueType;
 458:../freertos/queue.c **** 	}
 459:../freertos/queue.c **** 	#endif /* configUSE_TRACE_FACILITY */
 460:../freertos/queue.c **** 
 461:../freertos/queue.c **** 	#if( configUSE_QUEUE_SETS == 1 )
 462:../freertos/queue.c **** 	{
 463:../freertos/queue.c **** 		pxNewQueue->pxQueueSetContainer = NULL;
 464:../freertos/queue.c **** 	}
 465:../freertos/queue.c **** 	#endif /* configUSE_QUEUE_SETS */
 466:../freertos/queue.c **** 
 467:../freertos/queue.c **** 	traceQUEUE_CREATE( pxNewQueue );
 468:../freertos/queue.c **** }
 469:../freertos/queue.c **** /*-----------------------------------------------------------*/
 470:../freertos/queue.c **** 
 471:../freertos/queue.c **** #if( configUSE_MUTEXES == 1 )
 472:../freertos/queue.c **** 
 473:../freertos/queue.c **** 	static void prvInitialiseMutex( Queue_t *pxNewQueue )
 474:../freertos/queue.c **** 	{
 475:../freertos/queue.c **** 		if( pxNewQueue != NULL )
 476:../freertos/queue.c **** 		{
 477:../freertos/queue.c **** 			/* The queue create function will set all the queue structure members
 478:../freertos/queue.c **** 			correctly for a generic queue, but this function is creating a
 479:../freertos/queue.c **** 			mutex.  Overwrite those members that need to be set differently -
 480:../freertos/queue.c **** 			in particular the information required for priority inheritance. */
 481:../freertos/queue.c **** 			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 482:../freertos/queue.c **** 			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 483:../freertos/queue.c **** 
 484:../freertos/queue.c **** 			/* In case this is a recursive mutex. */
 485:../freertos/queue.c **** 			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
ARM GAS  /tmp/ccjtHtwZ.s 			page 11


 486:../freertos/queue.c **** 
 487:../freertos/queue.c **** 			traceCREATE_MUTEX( pxNewQueue );
 488:../freertos/queue.c **** 
 489:../freertos/queue.c **** 			/* Start with the semaphore in the expected state. */
 490:../freertos/queue.c **** 			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 491:../freertos/queue.c **** 		}
 492:../freertos/queue.c **** 		else
 493:../freertos/queue.c **** 		{
 494:../freertos/queue.c **** 			traceCREATE_MUTEX_FAILED();
 495:../freertos/queue.c **** 		}
 496:../freertos/queue.c **** 	}
 497:../freertos/queue.c **** 
 498:../freertos/queue.c **** #endif /* configUSE_MUTEXES */
 499:../freertos/queue.c **** /*-----------------------------------------------------------*/
 500:../freertos/queue.c **** 
 501:../freertos/queue.c **** #if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 502:../freertos/queue.c **** 
 503:../freertos/queue.c **** 	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
 504:../freertos/queue.c **** 	{
 505:../freertos/queue.c **** 	QueueHandle_t xNewQueue;
 506:../freertos/queue.c **** 	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 507:../freertos/queue.c **** 
 508:../freertos/queue.c **** 		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 509:../freertos/queue.c **** 		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 510:../freertos/queue.c **** 
 511:../freertos/queue.c **** 		return xNewQueue;
 512:../freertos/queue.c **** 	}
 513:../freertos/queue.c **** 
 514:../freertos/queue.c **** #endif /* configUSE_MUTEXES */
 515:../freertos/queue.c **** /*-----------------------------------------------------------*/
 516:../freertos/queue.c **** 
 517:../freertos/queue.c **** #if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 518:../freertos/queue.c **** 
 519:../freertos/queue.c **** 	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
 520:../freertos/queue.c **** 	{
 521:../freertos/queue.c **** 	QueueHandle_t xNewQueue;
 522:../freertos/queue.c **** 	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 523:../freertos/queue.c **** 
 524:../freertos/queue.c **** 		/* Prevent compiler warnings about unused parameters if
 525:../freertos/queue.c **** 		configUSE_TRACE_FACILITY does not equal 1. */
 526:../freertos/queue.c **** 		( void ) ucQueueType;
 527:../freertos/queue.c **** 
 528:../freertos/queue.c **** 		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueTy
 529:../freertos/queue.c **** 		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 530:../freertos/queue.c **** 
 531:../freertos/queue.c **** 		return xNewQueue;
 532:../freertos/queue.c **** 	}
 533:../freertos/queue.c **** 
 534:../freertos/queue.c **** #endif /* configUSE_MUTEXES */
 535:../freertos/queue.c **** /*-----------------------------------------------------------*/
 536:../freertos/queue.c **** 
 537:../freertos/queue.c **** #if ( ( configUSE_MUTEXES == 1 ) && ( INCLUDE_xSemaphoreGetMutexHolder == 1 ) )
 538:../freertos/queue.c **** 
 539:../freertos/queue.c **** 	TaskHandle_t xQueueGetMutexHolder( QueueHandle_t xSemaphore )
 540:../freertos/queue.c **** 	{
 541:../freertos/queue.c **** 	TaskHandle_t pxReturn;
 542:../freertos/queue.c **** 	Queue_t * const pxSemaphore = ( Queue_t * ) xSemaphore;
ARM GAS  /tmp/ccjtHtwZ.s 			page 12


 543:../freertos/queue.c **** 
 544:../freertos/queue.c **** 		/* This function is called by xSemaphoreGetMutexHolder(), and should not
 545:../freertos/queue.c **** 		be called directly.  Note:  This is a good way of determining if the
 546:../freertos/queue.c **** 		calling task is the mutex holder, but not a good way of determining the
 547:../freertos/queue.c **** 		identity of the mutex holder, as the holder may change between the
 548:../freertos/queue.c **** 		following critical section exiting and the function returning. */
 549:../freertos/queue.c **** 		taskENTER_CRITICAL();
 550:../freertos/queue.c **** 		{
 551:../freertos/queue.c **** 			if( pxSemaphore->uxQueueType == queueQUEUE_IS_MUTEX )
 552:../freertos/queue.c **** 			{
 553:../freertos/queue.c **** 				pxReturn = pxSemaphore->u.xSemaphore.xMutexHolder;
 554:../freertos/queue.c **** 			}
 555:../freertos/queue.c **** 			else
 556:../freertos/queue.c **** 			{
 557:../freertos/queue.c **** 				pxReturn = NULL;
 558:../freertos/queue.c **** 			}
 559:../freertos/queue.c **** 		}
 560:../freertos/queue.c **** 		taskEXIT_CRITICAL();
 561:../freertos/queue.c **** 
 562:../freertos/queue.c **** 		return pxReturn;
 563:../freertos/queue.c **** 	} /*lint !e818 xSemaphore cannot be a pointer to const because it is a typedef. */
 564:../freertos/queue.c **** 
 565:../freertos/queue.c **** #endif
 566:../freertos/queue.c **** /*-----------------------------------------------------------*/
 567:../freertos/queue.c **** 
 568:../freertos/queue.c **** #if ( ( configUSE_MUTEXES == 1 ) && ( INCLUDE_xSemaphoreGetMutexHolder == 1 ) )
 569:../freertos/queue.c **** 
 570:../freertos/queue.c **** 	TaskHandle_t xQueueGetMutexHolderFromISR( QueueHandle_t xSemaphore )
 571:../freertos/queue.c **** 	{
 572:../freertos/queue.c **** 	TaskHandle_t pxReturn;
 573:../freertos/queue.c **** 
 574:../freertos/queue.c **** 		configASSERT( xSemaphore );
 575:../freertos/queue.c **** 
 576:../freertos/queue.c **** 		/* Mutexes cannot be used in interrupt service routines, so the mutex
 577:../freertos/queue.c **** 		holder should not change in an ISR, and therefore a critical section is
 578:../freertos/queue.c **** 		not required here. */
 579:../freertos/queue.c **** 		if( ( ( Queue_t * ) xSemaphore )->uxQueueType == queueQUEUE_IS_MUTEX )
 580:../freertos/queue.c **** 		{
 581:../freertos/queue.c **** 			pxReturn = ( ( Queue_t * ) xSemaphore )->u.xSemaphore.xMutexHolder;
 582:../freertos/queue.c **** 		}
 583:../freertos/queue.c **** 		else
 584:../freertos/queue.c **** 		{
 585:../freertos/queue.c **** 			pxReturn = NULL;
 586:../freertos/queue.c **** 		}
 587:../freertos/queue.c **** 
 588:../freertos/queue.c **** 		return pxReturn;
 589:../freertos/queue.c **** 	} /*lint !e818 xSemaphore cannot be a pointer to const because it is a typedef. */
 590:../freertos/queue.c **** 
 591:../freertos/queue.c **** #endif
 592:../freertos/queue.c **** /*-----------------------------------------------------------*/
 593:../freertos/queue.c **** 
 594:../freertos/queue.c **** #if ( configUSE_RECURSIVE_MUTEXES == 1 )
 595:../freertos/queue.c **** 
 596:../freertos/queue.c **** 	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
 597:../freertos/queue.c **** 	{
 598:../freertos/queue.c **** 	BaseType_t xReturn;
 599:../freertos/queue.c **** 	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
ARM GAS  /tmp/ccjtHtwZ.s 			page 13


 600:../freertos/queue.c **** 
 601:../freertos/queue.c **** 		configASSERT( pxMutex );
 602:../freertos/queue.c **** 
 603:../freertos/queue.c **** 		/* If this is the task that holds the mutex then xMutexHolder will not
 604:../freertos/queue.c **** 		change outside of this task.  If this task does not hold the mutex then
 605:../freertos/queue.c **** 		pxMutexHolder can never coincidentally equal the tasks handle, and as
 606:../freertos/queue.c **** 		this is the only condition we are interested in it does not matter if
 607:../freertos/queue.c **** 		pxMutexHolder is accessed simultaneously by another task.  Therefore no
 608:../freertos/queue.c **** 		mutual exclusion is required to test the pxMutexHolder variable. */
 609:../freertos/queue.c **** 		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 610:../freertos/queue.c **** 		{
 611:../freertos/queue.c **** 			traceGIVE_MUTEX_RECURSIVE( pxMutex );
 612:../freertos/queue.c **** 
 613:../freertos/queue.c **** 			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
 614:../freertos/queue.c **** 			the task handle, therefore no underflow check is required.  Also,
 615:../freertos/queue.c **** 			uxRecursiveCallCount is only modified by the mutex holder, and as
 616:../freertos/queue.c **** 			there can only be one, no mutual exclusion is required to modify the
 617:../freertos/queue.c **** 			uxRecursiveCallCount member. */
 618:../freertos/queue.c **** 			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 619:../freertos/queue.c **** 
 620:../freertos/queue.c **** 			/* Has the recursive call count unwound to 0? */
 621:../freertos/queue.c **** 			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 622:../freertos/queue.c **** 			{
 623:../freertos/queue.c **** 				/* Return the mutex.  This will automatically unblock any other
 624:../freertos/queue.c **** 				task that might be waiting to access the mutex. */
 625:../freertos/queue.c **** 				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 626:../freertos/queue.c **** 			}
 627:../freertos/queue.c **** 			else
 628:../freertos/queue.c **** 			{
 629:../freertos/queue.c **** 				mtCOVERAGE_TEST_MARKER();
 630:../freertos/queue.c **** 			}
 631:../freertos/queue.c **** 
 632:../freertos/queue.c **** 			xReturn = pdPASS;
 633:../freertos/queue.c **** 		}
 634:../freertos/queue.c **** 		else
 635:../freertos/queue.c **** 		{
 636:../freertos/queue.c **** 			/* The mutex cannot be given because the calling task is not the
 637:../freertos/queue.c **** 			holder. */
 638:../freertos/queue.c **** 			xReturn = pdFAIL;
 639:../freertos/queue.c **** 
 640:../freertos/queue.c **** 			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
 641:../freertos/queue.c **** 		}
 642:../freertos/queue.c **** 
 643:../freertos/queue.c **** 		return xReturn;
 644:../freertos/queue.c **** 	}
 645:../freertos/queue.c **** 
 646:../freertos/queue.c **** #endif /* configUSE_RECURSIVE_MUTEXES */
 647:../freertos/queue.c **** /*-----------------------------------------------------------*/
 648:../freertos/queue.c **** 
 649:../freertos/queue.c **** #if ( configUSE_RECURSIVE_MUTEXES == 1 )
 650:../freertos/queue.c **** 
 651:../freertos/queue.c **** 	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
 652:../freertos/queue.c **** 	{
 653:../freertos/queue.c **** 	BaseType_t xReturn;
 654:../freertos/queue.c **** 	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 655:../freertos/queue.c **** 
 656:../freertos/queue.c **** 		configASSERT( pxMutex );
ARM GAS  /tmp/ccjtHtwZ.s 			page 14


 657:../freertos/queue.c **** 
 658:../freertos/queue.c **** 		/* Comments regarding mutual exclusion as per those within
 659:../freertos/queue.c **** 		xQueueGiveMutexRecursive(). */
 660:../freertos/queue.c **** 
 661:../freertos/queue.c **** 		traceTAKE_MUTEX_RECURSIVE( pxMutex );
 662:../freertos/queue.c **** 
 663:../freertos/queue.c **** 		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 664:../freertos/queue.c **** 		{
 665:../freertos/queue.c **** 			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 666:../freertos/queue.c **** 			xReturn = pdPASS;
 667:../freertos/queue.c **** 		}
 668:../freertos/queue.c **** 		else
 669:../freertos/queue.c **** 		{
 670:../freertos/queue.c **** 			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 671:../freertos/queue.c **** 
 672:../freertos/queue.c **** 			/* pdPASS will only be returned if the mutex was successfully
 673:../freertos/queue.c **** 			obtained.  The calling task may have entered the Blocked state
 674:../freertos/queue.c **** 			before reaching here. */
 675:../freertos/queue.c **** 			if( xReturn != pdFAIL )
 676:../freertos/queue.c **** 			{
 677:../freertos/queue.c **** 				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 678:../freertos/queue.c **** 			}
 679:../freertos/queue.c **** 			else
 680:../freertos/queue.c **** 			{
 681:../freertos/queue.c **** 				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
 682:../freertos/queue.c **** 			}
 683:../freertos/queue.c **** 		}
 684:../freertos/queue.c **** 
 685:../freertos/queue.c **** 		return xReturn;
 686:../freertos/queue.c **** 	}
 687:../freertos/queue.c **** 
 688:../freertos/queue.c **** #endif /* configUSE_RECURSIVE_MUTEXES */
 689:../freertos/queue.c **** /*-----------------------------------------------------------*/
 690:../freertos/queue.c **** 
 691:../freertos/queue.c **** #if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 692:../freertos/queue.c **** 
 693:../freertos/queue.c **** 	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t
 694:../freertos/queue.c **** 	{
 695:../freertos/queue.c **** 	QueueHandle_t xHandle;
 696:../freertos/queue.c **** 
 697:../freertos/queue.c **** 		configASSERT( uxMaxCount != 0 );
 698:../freertos/queue.c **** 		configASSERT( uxInitialCount <= uxMaxCount );
 699:../freertos/queue.c **** 
 700:../freertos/queue.c **** 		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStatic
 701:../freertos/queue.c **** 
 702:../freertos/queue.c **** 		if( xHandle != NULL )
 703:../freertos/queue.c **** 		{
 704:../freertos/queue.c **** 			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 705:../freertos/queue.c **** 
 706:../freertos/queue.c **** 			traceCREATE_COUNTING_SEMAPHORE();
 707:../freertos/queue.c **** 		}
 708:../freertos/queue.c **** 		else
 709:../freertos/queue.c **** 		{
 710:../freertos/queue.c **** 			traceCREATE_COUNTING_SEMAPHORE_FAILED();
 711:../freertos/queue.c **** 		}
 712:../freertos/queue.c **** 
 713:../freertos/queue.c **** 		return xHandle;
ARM GAS  /tmp/ccjtHtwZ.s 			page 15


 714:../freertos/queue.c **** 	}
 715:../freertos/queue.c **** 
 716:../freertos/queue.c **** #endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) *
 717:../freertos/queue.c **** /*-----------------------------------------------------------*/
 718:../freertos/queue.c **** 
 719:../freertos/queue.c **** #if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 720:../freertos/queue.c **** 
 721:../freertos/queue.c **** 	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxIni
 722:../freertos/queue.c **** 	{
 723:../freertos/queue.c **** 	QueueHandle_t xHandle;
 724:../freertos/queue.c **** 
 725:../freertos/queue.c **** 		configASSERT( uxMaxCount != 0 );
 726:../freertos/queue.c **** 		configASSERT( uxInitialCount <= uxMaxCount );
 727:../freertos/queue.c **** 
 728:../freertos/queue.c **** 		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUN
 729:../freertos/queue.c **** 
 730:../freertos/queue.c **** 		if( xHandle != NULL )
 731:../freertos/queue.c **** 		{
 732:../freertos/queue.c **** 			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 733:../freertos/queue.c **** 
 734:../freertos/queue.c **** 			traceCREATE_COUNTING_SEMAPHORE();
 735:../freertos/queue.c **** 		}
 736:../freertos/queue.c **** 		else
 737:../freertos/queue.c **** 		{
 738:../freertos/queue.c **** 			traceCREATE_COUNTING_SEMAPHORE_FAILED();
 739:../freertos/queue.c **** 		}
 740:../freertos/queue.c **** 
 741:../freertos/queue.c **** 		return xHandle;
 742:../freertos/queue.c **** 	}
 743:../freertos/queue.c **** 
 744:../freertos/queue.c **** #endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) *
 745:../freertos/queue.c **** /*-----------------------------------------------------------*/
 746:../freertos/queue.c **** 
 747:../freertos/queue.c **** BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xT
 748:../freertos/queue.c **** {
 749:../freertos/queue.c **** BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 750:../freertos/queue.c **** TimeOut_t xTimeOut;
 751:../freertos/queue.c **** Queue_t * const pxQueue = xQueue;
 752:../freertos/queue.c **** 
 753:../freertos/queue.c **** 	configASSERT( pxQueue );
 754:../freertos/queue.c **** 	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 755:../freertos/queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 756:../freertos/queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 757:../freertos/queue.c **** 	{
 758:../freertos/queue.c **** 		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 )
 759:../freertos/queue.c **** 	}
 760:../freertos/queue.c **** 	#endif
 761:../freertos/queue.c **** 
 762:../freertos/queue.c **** 
 763:../freertos/queue.c **** 	/*lint -save -e904 This function relaxes the coding standard somewhat to
 764:../freertos/queue.c **** 	allow return statements within the function itself.  This is done in the
 765:../freertos/queue.c **** 	interest of execution time efficiency. */
 766:../freertos/queue.c **** 	for( ;; )
 767:../freertos/queue.c **** 	{
 768:../freertos/queue.c **** 		taskENTER_CRITICAL();
 769:../freertos/queue.c **** 		{
 770:../freertos/queue.c **** 			/* Is there room on the queue now?  The running task must be the
ARM GAS  /tmp/ccjtHtwZ.s 			page 16


 771:../freertos/queue.c **** 			highest priority task wanting to access the queue.  If the head item
 772:../freertos/queue.c **** 			in the queue is to be overwritten then it does not matter if the
 773:../freertos/queue.c **** 			queue is full. */
 774:../freertos/queue.c **** 			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 775:../freertos/queue.c **** 			{
 776:../freertos/queue.c **** 				traceQUEUE_SEND( pxQueue );
 777:../freertos/queue.c **** 
 778:../freertos/queue.c **** 				#if ( configUSE_QUEUE_SETS == 1 )
 779:../freertos/queue.c **** 				{
 780:../freertos/queue.c **** 				UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 781:../freertos/queue.c **** 
 782:../freertos/queue.c **** 					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 783:../freertos/queue.c **** 
 784:../freertos/queue.c **** 					if( pxQueue->pxQueueSetContainer != NULL )
 785:../freertos/queue.c **** 					{
 786:../freertos/queue.c **** 						if( ( xCopyPosition == queueOVERWRITE ) && ( uxPreviousMessagesWaiting != ( UBaseType_t ) 0 )
 787:../freertos/queue.c **** 						{
 788:../freertos/queue.c **** 							/* Do not notify the queue set as an existing item
 789:../freertos/queue.c **** 							was overwritten in the queue so the number of items
 790:../freertos/queue.c **** 							in the queue has not changed. */
 791:../freertos/queue.c **** 							mtCOVERAGE_TEST_MARKER();
 792:../freertos/queue.c **** 						}
 793:../freertos/queue.c **** 						else if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
 794:../freertos/queue.c **** 						{
 795:../freertos/queue.c **** 							/* The queue is a member of a queue set, and posting
 796:../freertos/queue.c **** 							to the queue set caused a higher priority task to
 797:../freertos/queue.c **** 							unblock. A context switch is required. */
 798:../freertos/queue.c **** 							queueYIELD_IF_USING_PREEMPTION();
 799:../freertos/queue.c **** 						}
 800:../freertos/queue.c **** 						else
 801:../freertos/queue.c **** 						{
 802:../freertos/queue.c **** 							mtCOVERAGE_TEST_MARKER();
 803:../freertos/queue.c **** 						}
 804:../freertos/queue.c **** 					}
 805:../freertos/queue.c **** 					else
 806:../freertos/queue.c **** 					{
 807:../freertos/queue.c **** 						/* If there was a task waiting for data to arrive on the
 808:../freertos/queue.c **** 						queue then unblock it now. */
 809:../freertos/queue.c **** 						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 810:../freertos/queue.c **** 						{
 811:../freertos/queue.c **** 							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 812:../freertos/queue.c **** 							{
 813:../freertos/queue.c **** 								/* The unblocked task has a priority higher than
 814:../freertos/queue.c **** 								our own so yield immediately.  Yes it is ok to
 815:../freertos/queue.c **** 								do this from within the critical section - the
 816:../freertos/queue.c **** 								kernel takes care of that. */
 817:../freertos/queue.c **** 								queueYIELD_IF_USING_PREEMPTION();
 818:../freertos/queue.c **** 							}
 819:../freertos/queue.c **** 							else
 820:../freertos/queue.c **** 							{
 821:../freertos/queue.c **** 								mtCOVERAGE_TEST_MARKER();
 822:../freertos/queue.c **** 							}
 823:../freertos/queue.c **** 						}
 824:../freertos/queue.c **** 						else if( xYieldRequired != pdFALSE )
 825:../freertos/queue.c **** 						{
 826:../freertos/queue.c **** 							/* This path is a special case that will only get
 827:../freertos/queue.c **** 							executed if the task was holding multiple mutexes
ARM GAS  /tmp/ccjtHtwZ.s 			page 17


 828:../freertos/queue.c **** 							and the mutexes were given back in an order that is
 829:../freertos/queue.c **** 							different to that in which they were taken. */
 830:../freertos/queue.c **** 							queueYIELD_IF_USING_PREEMPTION();
 831:../freertos/queue.c **** 						}
 832:../freertos/queue.c **** 						else
 833:../freertos/queue.c **** 						{
 834:../freertos/queue.c **** 							mtCOVERAGE_TEST_MARKER();
 835:../freertos/queue.c **** 						}
 836:../freertos/queue.c **** 					}
 837:../freertos/queue.c **** 				}
 838:../freertos/queue.c **** 				#else /* configUSE_QUEUE_SETS */
 839:../freertos/queue.c **** 				{
 840:../freertos/queue.c **** 					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 841:../freertos/queue.c **** 
 842:../freertos/queue.c **** 					/* If there was a task waiting for data to arrive on the
 843:../freertos/queue.c **** 					queue then unblock it now. */
 844:../freertos/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 845:../freertos/queue.c **** 					{
 846:../freertos/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 847:../freertos/queue.c **** 						{
 848:../freertos/queue.c **** 							/* The unblocked task has a priority higher than
 849:../freertos/queue.c **** 							our own so yield immediately.  Yes it is ok to do
 850:../freertos/queue.c **** 							this from within the critical section - the kernel
 851:../freertos/queue.c **** 							takes care of that. */
 852:../freertos/queue.c **** 							queueYIELD_IF_USING_PREEMPTION();
 853:../freertos/queue.c **** 						}
 854:../freertos/queue.c **** 						else
 855:../freertos/queue.c **** 						{
 856:../freertos/queue.c **** 							mtCOVERAGE_TEST_MARKER();
 857:../freertos/queue.c **** 						}
 858:../freertos/queue.c **** 					}
 859:../freertos/queue.c **** 					else if( xYieldRequired != pdFALSE )
 860:../freertos/queue.c **** 					{
 861:../freertos/queue.c **** 						/* This path is a special case that will only get
 862:../freertos/queue.c **** 						executed if the task was holding multiple mutexes and
 863:../freertos/queue.c **** 						the mutexes were given back in an order that is
 864:../freertos/queue.c **** 						different to that in which they were taken. */
 865:../freertos/queue.c **** 						queueYIELD_IF_USING_PREEMPTION();
 866:../freertos/queue.c **** 					}
 867:../freertos/queue.c **** 					else
 868:../freertos/queue.c **** 					{
 869:../freertos/queue.c **** 						mtCOVERAGE_TEST_MARKER();
 870:../freertos/queue.c **** 					}
 871:../freertos/queue.c **** 				}
 872:../freertos/queue.c **** 				#endif /* configUSE_QUEUE_SETS */
 873:../freertos/queue.c **** 
 874:../freertos/queue.c **** 				taskEXIT_CRITICAL();
 875:../freertos/queue.c **** 				return pdPASS;
 876:../freertos/queue.c **** 			}
 877:../freertos/queue.c **** 			else
 878:../freertos/queue.c **** 			{
 879:../freertos/queue.c **** 				if( xTicksToWait == ( TickType_t ) 0 )
 880:../freertos/queue.c **** 				{
 881:../freertos/queue.c **** 					/* The queue was full and no block time is specified (or
 882:../freertos/queue.c **** 					the block time has expired) so leave now. */
 883:../freertos/queue.c **** 					taskEXIT_CRITICAL();
 884:../freertos/queue.c **** 
ARM GAS  /tmp/ccjtHtwZ.s 			page 18


 885:../freertos/queue.c **** 					/* Return to the original privilege level before exiting
 886:../freertos/queue.c **** 					the function. */
 887:../freertos/queue.c **** 					traceQUEUE_SEND_FAILED( pxQueue );
 888:../freertos/queue.c **** 					return errQUEUE_FULL;
 889:../freertos/queue.c **** 				}
 890:../freertos/queue.c **** 				else if( xEntryTimeSet == pdFALSE )
 891:../freertos/queue.c **** 				{
 892:../freertos/queue.c **** 					/* The queue was full and a block time was specified so
 893:../freertos/queue.c **** 					configure the timeout structure. */
 894:../freertos/queue.c **** 					vTaskInternalSetTimeOutState( &xTimeOut );
 895:../freertos/queue.c **** 					xEntryTimeSet = pdTRUE;
 896:../freertos/queue.c **** 				}
 897:../freertos/queue.c **** 				else
 898:../freertos/queue.c **** 				{
 899:../freertos/queue.c **** 					/* Entry time was already set. */
 900:../freertos/queue.c **** 					mtCOVERAGE_TEST_MARKER();
 901:../freertos/queue.c **** 				}
 902:../freertos/queue.c **** 			}
 903:../freertos/queue.c **** 		}
 904:../freertos/queue.c **** 		taskEXIT_CRITICAL();
 905:../freertos/queue.c **** 
 906:../freertos/queue.c **** 		/* Interrupts and other tasks can send to and receive from the queue
 907:../freertos/queue.c **** 		now the critical section has been exited. */
 908:../freertos/queue.c **** 
 909:../freertos/queue.c **** 		vTaskSuspendAll();
 910:../freertos/queue.c **** 		prvLockQueue( pxQueue );
 911:../freertos/queue.c **** 
 912:../freertos/queue.c **** 		/* Update the timeout state to see if it has expired yet. */
 913:../freertos/queue.c **** 		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 914:../freertos/queue.c **** 		{
 915:../freertos/queue.c **** 			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 916:../freertos/queue.c **** 			{
 917:../freertos/queue.c **** 				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
 918:../freertos/queue.c **** 				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 919:../freertos/queue.c **** 
 920:../freertos/queue.c **** 				/* Unlocking the queue means queue events can effect the
 921:../freertos/queue.c **** 				event list.  It is possible that interrupts occurring now
 922:../freertos/queue.c **** 				remove this task from the event list again - but as the
 923:../freertos/queue.c **** 				scheduler is suspended the task will go onto the pending
 924:../freertos/queue.c **** 				ready last instead of the actual ready list. */
 925:../freertos/queue.c **** 				prvUnlockQueue( pxQueue );
 926:../freertos/queue.c **** 
 927:../freertos/queue.c **** 				/* Resuming the scheduler will move tasks from the pending
 928:../freertos/queue.c **** 				ready list into the ready list - so it is feasible that this
 929:../freertos/queue.c **** 				task is already in a ready list before it yields - in which
 930:../freertos/queue.c **** 				case the yield will not cause a context switch unless there
 931:../freertos/queue.c **** 				is also a higher priority task in the pending ready list. */
 932:../freertos/queue.c **** 				if( xTaskResumeAll() == pdFALSE )
 933:../freertos/queue.c **** 				{
 934:../freertos/queue.c **** 					portYIELD_WITHIN_API();
 935:../freertos/queue.c **** 				}
 936:../freertos/queue.c **** 			}
 937:../freertos/queue.c **** 			else
 938:../freertos/queue.c **** 			{
 939:../freertos/queue.c **** 				/* Try again. */
 940:../freertos/queue.c **** 				prvUnlockQueue( pxQueue );
 941:../freertos/queue.c **** 				( void ) xTaskResumeAll();
ARM GAS  /tmp/ccjtHtwZ.s 			page 19


 942:../freertos/queue.c **** 			}
 943:../freertos/queue.c **** 		}
 944:../freertos/queue.c **** 		else
 945:../freertos/queue.c **** 		{
 946:../freertos/queue.c **** 			/* The timeout has expired. */
 947:../freertos/queue.c **** 			prvUnlockQueue( pxQueue );
 948:../freertos/queue.c **** 			( void ) xTaskResumeAll();
 949:../freertos/queue.c **** 
 950:../freertos/queue.c **** 			traceQUEUE_SEND_FAILED( pxQueue );
 951:../freertos/queue.c **** 			return errQUEUE_FULL;
 952:../freertos/queue.c **** 		}
 953:../freertos/queue.c **** 	} /*lint -restore */
 954:../freertos/queue.c **** }
 955:../freertos/queue.c **** /*-----------------------------------------------------------*/
 956:../freertos/queue.c **** 
 957:../freertos/queue.c **** BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseTy
 958:../freertos/queue.c **** {
 959:../freertos/queue.c **** BaseType_t xReturn;
 960:../freertos/queue.c **** UBaseType_t uxSavedInterruptStatus;
 961:../freertos/queue.c **** Queue_t * const pxQueue = xQueue;
 962:../freertos/queue.c **** 
 963:../freertos/queue.c **** 	configASSERT( pxQueue );
 964:../freertos/queue.c **** 	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 965:../freertos/queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 966:../freertos/queue.c **** 
 967:../freertos/queue.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
 968:../freertos/queue.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
 969:../freertos/queue.c **** 	above the maximum system call priority are kept permanently enabled, even
 970:../freertos/queue.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
 971:../freertos/queue.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
 972:../freertos/queue.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
 973:../freertos/queue.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
 974:../freertos/queue.c **** 	assigned a priority above the configured maximum system call priority.
 975:../freertos/queue.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
 976:../freertos/queue.c **** 	that have been assigned a priority at or (logically) below the maximum
 977:../freertos/queue.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
 978:../freertos/queue.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
 979:../freertos/queue.c **** 	More information (albeit Cortex-M specific) is provided on the following
 980:../freertos/queue.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
 981:../freertos/queue.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 982:../freertos/queue.c **** 
 983:../freertos/queue.c **** 	/* Similar to xQueueGenericSend, except without blocking if there is no room
 984:../freertos/queue.c **** 	in the queue.  Also don't directly wake a task that was blocked on a queue
 985:../freertos/queue.c **** 	read, instead return a flag to say whether a context switch is required or
 986:../freertos/queue.c **** 	not (i.e. has a task with a higher priority than us been woken by this
 987:../freertos/queue.c **** 	post). */
 988:../freertos/queue.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 989:../freertos/queue.c **** 	{
 990:../freertos/queue.c **** 		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 991:../freertos/queue.c **** 		{
 992:../freertos/queue.c **** 			const int8_t cTxLock = pxQueue->cTxLock;
 993:../freertos/queue.c **** 
 994:../freertos/queue.c **** 			traceQUEUE_SEND_FROM_ISR( pxQueue );
 995:../freertos/queue.c **** 
 996:../freertos/queue.c **** 			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
 997:../freertos/queue.c **** 			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
 998:../freertos/queue.c **** 			in a task disinheriting a priority and prvCopyDataToQueue() can be
ARM GAS  /tmp/ccjtHtwZ.s 			page 20


 999:../freertos/queue.c **** 			called here even though the disinherit function does not check if
1000:../freertos/queue.c **** 			the scheduler is suspended before accessing the ready lists. */
1001:../freertos/queue.c **** 			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
1002:../freertos/queue.c **** 
1003:../freertos/queue.c **** 			/* The event list is not altered if the queue is locked.  This will
1004:../freertos/queue.c **** 			be done when the queue is unlocked later. */
1005:../freertos/queue.c **** 			if( cTxLock == queueUNLOCKED )
1006:../freertos/queue.c **** 			{
1007:../freertos/queue.c **** 				#if ( configUSE_QUEUE_SETS == 1 )
1008:../freertos/queue.c **** 				{
1009:../freertos/queue.c **** 					if( pxQueue->pxQueueSetContainer != NULL )
1010:../freertos/queue.c **** 					{
1011:../freertos/queue.c **** 						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
1012:../freertos/queue.c **** 						{
1013:../freertos/queue.c **** 							/* The queue is a member of a queue set, and posting
1014:../freertos/queue.c **** 							to the queue set caused a higher priority task to
1015:../freertos/queue.c **** 							unblock.  A context switch is required. */
1016:../freertos/queue.c **** 							if( pxHigherPriorityTaskWoken != NULL )
1017:../freertos/queue.c **** 							{
1018:../freertos/queue.c **** 								*pxHigherPriorityTaskWoken = pdTRUE;
1019:../freertos/queue.c **** 							}
1020:../freertos/queue.c **** 							else
1021:../freertos/queue.c **** 							{
1022:../freertos/queue.c **** 								mtCOVERAGE_TEST_MARKER();
1023:../freertos/queue.c **** 							}
1024:../freertos/queue.c **** 						}
1025:../freertos/queue.c **** 						else
1026:../freertos/queue.c **** 						{
1027:../freertos/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1028:../freertos/queue.c **** 						}
1029:../freertos/queue.c **** 					}
1030:../freertos/queue.c **** 					else
1031:../freertos/queue.c **** 					{
1032:../freertos/queue.c **** 						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1033:../freertos/queue.c **** 						{
1034:../freertos/queue.c **** 							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1035:../freertos/queue.c **** 							{
1036:../freertos/queue.c **** 								/* The task waiting has a higher priority so
1037:../freertos/queue.c **** 								record that a context switch is required. */
1038:../freertos/queue.c **** 								if( pxHigherPriorityTaskWoken != NULL )
1039:../freertos/queue.c **** 								{
1040:../freertos/queue.c **** 									*pxHigherPriorityTaskWoken = pdTRUE;
1041:../freertos/queue.c **** 								}
1042:../freertos/queue.c **** 								else
1043:../freertos/queue.c **** 								{
1044:../freertos/queue.c **** 									mtCOVERAGE_TEST_MARKER();
1045:../freertos/queue.c **** 								}
1046:../freertos/queue.c **** 							}
1047:../freertos/queue.c **** 							else
1048:../freertos/queue.c **** 							{
1049:../freertos/queue.c **** 								mtCOVERAGE_TEST_MARKER();
1050:../freertos/queue.c **** 							}
1051:../freertos/queue.c **** 						}
1052:../freertos/queue.c **** 						else
1053:../freertos/queue.c **** 						{
1054:../freertos/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1055:../freertos/queue.c **** 						}
ARM GAS  /tmp/ccjtHtwZ.s 			page 21


1056:../freertos/queue.c **** 					}
1057:../freertos/queue.c **** 				}
1058:../freertos/queue.c **** 				#else /* configUSE_QUEUE_SETS */
1059:../freertos/queue.c **** 				{
1060:../freertos/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1061:../freertos/queue.c **** 					{
1062:../freertos/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1063:../freertos/queue.c **** 						{
1064:../freertos/queue.c **** 							/* The task waiting has a higher priority so record that a
1065:../freertos/queue.c **** 							context	switch is required. */
1066:../freertos/queue.c **** 							if( pxHigherPriorityTaskWoken != NULL )
1067:../freertos/queue.c **** 							{
1068:../freertos/queue.c **** 								*pxHigherPriorityTaskWoken = pdTRUE;
1069:../freertos/queue.c **** 							}
1070:../freertos/queue.c **** 							else
1071:../freertos/queue.c **** 							{
1072:../freertos/queue.c **** 								mtCOVERAGE_TEST_MARKER();
1073:../freertos/queue.c **** 							}
1074:../freertos/queue.c **** 						}
1075:../freertos/queue.c **** 						else
1076:../freertos/queue.c **** 						{
1077:../freertos/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1078:../freertos/queue.c **** 						}
1079:../freertos/queue.c **** 					}
1080:../freertos/queue.c **** 					else
1081:../freertos/queue.c **** 					{
1082:../freertos/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1083:../freertos/queue.c **** 					}
1084:../freertos/queue.c **** 				}
1085:../freertos/queue.c **** 				#endif /* configUSE_QUEUE_SETS */
1086:../freertos/queue.c **** 			}
1087:../freertos/queue.c **** 			else
1088:../freertos/queue.c **** 			{
1089:../freertos/queue.c **** 				/* Increment the lock count so the task that unlocks the queue
1090:../freertos/queue.c **** 				knows that data was posted while it was locked. */
1091:../freertos/queue.c **** 				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
1092:../freertos/queue.c **** 			}
1093:../freertos/queue.c **** 
1094:../freertos/queue.c **** 			xReturn = pdPASS;
1095:../freertos/queue.c **** 		}
1096:../freertos/queue.c **** 		else
1097:../freertos/queue.c **** 		{
1098:../freertos/queue.c **** 			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
1099:../freertos/queue.c **** 			xReturn = errQUEUE_FULL;
1100:../freertos/queue.c **** 		}
1101:../freertos/queue.c **** 	}
1102:../freertos/queue.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1103:../freertos/queue.c **** 
1104:../freertos/queue.c **** 	return xReturn;
1105:../freertos/queue.c **** }
1106:../freertos/queue.c **** /*-----------------------------------------------------------*/
1107:../freertos/queue.c **** 
1108:../freertos/queue.c **** BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
1109:../freertos/queue.c **** {
1110:../freertos/queue.c **** BaseType_t xReturn;
1111:../freertos/queue.c **** UBaseType_t uxSavedInterruptStatus;
1112:../freertos/queue.c **** Queue_t * const pxQueue = xQueue;
ARM GAS  /tmp/ccjtHtwZ.s 			page 22


1113:../freertos/queue.c **** 
1114:../freertos/queue.c **** 	/* Similar to xQueueGenericSendFromISR() but used with semaphores where the
1115:../freertos/queue.c **** 	item size is 0.  Don't directly wake a task that was blocked on a queue
1116:../freertos/queue.c **** 	read, instead return a flag to say whether a context switch is required or
1117:../freertos/queue.c **** 	not (i.e. has a task with a higher priority than us been woken by this
1118:../freertos/queue.c **** 	post). */
1119:../freertos/queue.c **** 
1120:../freertos/queue.c **** 	configASSERT( pxQueue );
1121:../freertos/queue.c **** 
1122:../freertos/queue.c **** 	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
1123:../freertos/queue.c **** 	if the item size is not 0. */
1124:../freertos/queue.c **** 	configASSERT( pxQueue->uxItemSize == 0 );
1125:../freertos/queue.c **** 
1126:../freertos/queue.c **** 	/* Normally a mutex would not be given from an interrupt, especially if
1127:../freertos/queue.c **** 	there is a mutex holder, as priority inheritance makes no sense for an
1128:../freertos/queue.c **** 	interrupts, only tasks. */
1129:../freertos/queue.c **** 	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutex
1130:../freertos/queue.c **** 
1131:../freertos/queue.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
1132:../freertos/queue.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
1133:../freertos/queue.c **** 	above the maximum system call priority are kept permanently enabled, even
1134:../freertos/queue.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
1135:../freertos/queue.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
1136:../freertos/queue.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1137:../freertos/queue.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
1138:../freertos/queue.c **** 	assigned a priority above the configured maximum system call priority.
1139:../freertos/queue.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
1140:../freertos/queue.c **** 	that have been assigned a priority at or (logically) below the maximum
1141:../freertos/queue.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
1142:../freertos/queue.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
1143:../freertos/queue.c **** 	More information (albeit Cortex-M specific) is provided on the following
1144:../freertos/queue.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1145:../freertos/queue.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1146:../freertos/queue.c **** 
1147:../freertos/queue.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
1148:../freertos/queue.c **** 	{
1149:../freertos/queue.c **** 		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1150:../freertos/queue.c **** 
1151:../freertos/queue.c **** 		/* When the queue is used to implement a semaphore no data is ever
1152:../freertos/queue.c **** 		moved through the queue but it is still valid to see if the queue 'has
1153:../freertos/queue.c **** 		space'. */
1154:../freertos/queue.c **** 		if( uxMessagesWaiting < pxQueue->uxLength )
1155:../freertos/queue.c **** 		{
1156:../freertos/queue.c **** 			const int8_t cTxLock = pxQueue->cTxLock;
1157:../freertos/queue.c **** 
1158:../freertos/queue.c **** 			traceQUEUE_SEND_FROM_ISR( pxQueue );
1159:../freertos/queue.c **** 
1160:../freertos/queue.c **** 			/* A task can only have an inherited priority if it is a mutex
1161:../freertos/queue.c **** 			holder - and if there is a mutex holder then the mutex cannot be
1162:../freertos/queue.c **** 			given from an ISR.  As this is the ISR version of the function it
1163:../freertos/queue.c **** 			can be assumed there is no mutex holder and no need to determine if
1164:../freertos/queue.c **** 			priority disinheritance is needed.  Simply increase the count of
1165:../freertos/queue.c **** 			messages (semaphores) available. */
1166:../freertos/queue.c **** 			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
1167:../freertos/queue.c **** 
1168:../freertos/queue.c **** 			/* The event list is not altered if the queue is locked.  This will
1169:../freertos/queue.c **** 			be done when the queue is unlocked later. */
ARM GAS  /tmp/ccjtHtwZ.s 			page 23


1170:../freertos/queue.c **** 			if( cTxLock == queueUNLOCKED )
1171:../freertos/queue.c **** 			{
1172:../freertos/queue.c **** 				#if ( configUSE_QUEUE_SETS == 1 )
1173:../freertos/queue.c **** 				{
1174:../freertos/queue.c **** 					if( pxQueue->pxQueueSetContainer != NULL )
1175:../freertos/queue.c **** 					{
1176:../freertos/queue.c **** 						if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
1177:../freertos/queue.c **** 						{
1178:../freertos/queue.c **** 							/* The semaphore is a member of a queue set, and
1179:../freertos/queue.c **** 							posting	to the queue set caused a higher priority
1180:../freertos/queue.c **** 							task to	unblock.  A context switch is required. */
1181:../freertos/queue.c **** 							if( pxHigherPriorityTaskWoken != NULL )
1182:../freertos/queue.c **** 							{
1183:../freertos/queue.c **** 								*pxHigherPriorityTaskWoken = pdTRUE;
1184:../freertos/queue.c **** 							}
1185:../freertos/queue.c **** 							else
1186:../freertos/queue.c **** 							{
1187:../freertos/queue.c **** 								mtCOVERAGE_TEST_MARKER();
1188:../freertos/queue.c **** 							}
1189:../freertos/queue.c **** 						}
1190:../freertos/queue.c **** 						else
1191:../freertos/queue.c **** 						{
1192:../freertos/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1193:../freertos/queue.c **** 						}
1194:../freertos/queue.c **** 					}
1195:../freertos/queue.c **** 					else
1196:../freertos/queue.c **** 					{
1197:../freertos/queue.c **** 						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1198:../freertos/queue.c **** 						{
1199:../freertos/queue.c **** 							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1200:../freertos/queue.c **** 							{
1201:../freertos/queue.c **** 								/* The task waiting has a higher priority so
1202:../freertos/queue.c **** 								record that a context switch is required. */
1203:../freertos/queue.c **** 								if( pxHigherPriorityTaskWoken != NULL )
1204:../freertos/queue.c **** 								{
1205:../freertos/queue.c **** 									*pxHigherPriorityTaskWoken = pdTRUE;
1206:../freertos/queue.c **** 								}
1207:../freertos/queue.c **** 								else
1208:../freertos/queue.c **** 								{
1209:../freertos/queue.c **** 									mtCOVERAGE_TEST_MARKER();
1210:../freertos/queue.c **** 								}
1211:../freertos/queue.c **** 							}
1212:../freertos/queue.c **** 							else
1213:../freertos/queue.c **** 							{
1214:../freertos/queue.c **** 								mtCOVERAGE_TEST_MARKER();
1215:../freertos/queue.c **** 							}
1216:../freertos/queue.c **** 						}
1217:../freertos/queue.c **** 						else
1218:../freertos/queue.c **** 						{
1219:../freertos/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1220:../freertos/queue.c **** 						}
1221:../freertos/queue.c **** 					}
1222:../freertos/queue.c **** 				}
1223:../freertos/queue.c **** 				#else /* configUSE_QUEUE_SETS */
1224:../freertos/queue.c **** 				{
1225:../freertos/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1226:../freertos/queue.c **** 					{
ARM GAS  /tmp/ccjtHtwZ.s 			page 24


1227:../freertos/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1228:../freertos/queue.c **** 						{
1229:../freertos/queue.c **** 							/* The task waiting has a higher priority so record that a
1230:../freertos/queue.c **** 							context	switch is required. */
1231:../freertos/queue.c **** 							if( pxHigherPriorityTaskWoken != NULL )
1232:../freertos/queue.c **** 							{
1233:../freertos/queue.c **** 								*pxHigherPriorityTaskWoken = pdTRUE;
1234:../freertos/queue.c **** 							}
1235:../freertos/queue.c **** 							else
1236:../freertos/queue.c **** 							{
1237:../freertos/queue.c **** 								mtCOVERAGE_TEST_MARKER();
1238:../freertos/queue.c **** 							}
1239:../freertos/queue.c **** 						}
1240:../freertos/queue.c **** 						else
1241:../freertos/queue.c **** 						{
1242:../freertos/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1243:../freertos/queue.c **** 						}
1244:../freertos/queue.c **** 					}
1245:../freertos/queue.c **** 					else
1246:../freertos/queue.c **** 					{
1247:../freertos/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1248:../freertos/queue.c **** 					}
1249:../freertos/queue.c **** 				}
1250:../freertos/queue.c **** 				#endif /* configUSE_QUEUE_SETS */
1251:../freertos/queue.c **** 			}
1252:../freertos/queue.c **** 			else
1253:../freertos/queue.c **** 			{
1254:../freertos/queue.c **** 				/* Increment the lock count so the task that unlocks the queue
1255:../freertos/queue.c **** 				knows that data was posted while it was locked. */
1256:../freertos/queue.c **** 				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
1257:../freertos/queue.c **** 			}
1258:../freertos/queue.c **** 
1259:../freertos/queue.c **** 			xReturn = pdPASS;
1260:../freertos/queue.c **** 		}
1261:../freertos/queue.c **** 		else
1262:../freertos/queue.c **** 		{
1263:../freertos/queue.c **** 			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
1264:../freertos/queue.c **** 			xReturn = errQUEUE_FULL;
1265:../freertos/queue.c **** 		}
1266:../freertos/queue.c **** 	}
1267:../freertos/queue.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1268:../freertos/queue.c **** 
1269:../freertos/queue.c **** 	return xReturn;
1270:../freertos/queue.c **** }
1271:../freertos/queue.c **** /*-----------------------------------------------------------*/
1272:../freertos/queue.c **** 
1273:../freertos/queue.c **** BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
1274:../freertos/queue.c **** {
1275:../freertos/queue.c **** BaseType_t xEntryTimeSet = pdFALSE;
1276:../freertos/queue.c **** TimeOut_t xTimeOut;
1277:../freertos/queue.c **** Queue_t * const pxQueue = xQueue;
1278:../freertos/queue.c **** 
1279:../freertos/queue.c **** 	/* Check the pointer is not NULL. */
1280:../freertos/queue.c **** 	configASSERT( ( pxQueue ) );
1281:../freertos/queue.c **** 
1282:../freertos/queue.c **** 	/* The buffer into which data is received can only be NULL if the data size
1283:../freertos/queue.c **** 	is zero (so no data is copied into the buffer. */
ARM GAS  /tmp/ccjtHtwZ.s 			page 25


1284:../freertos/queue.c **** 	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) )
1285:../freertos/queue.c **** 
1286:../freertos/queue.c **** 	/* Cannot block if the scheduler is suspended. */
1287:../freertos/queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
1288:../freertos/queue.c **** 	{
1289:../freertos/queue.c **** 		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 )
1290:../freertos/queue.c **** 	}
1291:../freertos/queue.c **** 	#endif
1292:../freertos/queue.c **** 
1293:../freertos/queue.c **** 
1294:../freertos/queue.c **** 	/*lint -save -e904  This function relaxes the coding standard somewhat to
1295:../freertos/queue.c **** 	allow return statements within the function itself.  This is done in the
1296:../freertos/queue.c **** 	interest of execution time efficiency. */
1297:../freertos/queue.c **** 	for( ;; )
1298:../freertos/queue.c **** 	{
1299:../freertos/queue.c **** 		taskENTER_CRITICAL();
1300:../freertos/queue.c **** 		{
1301:../freertos/queue.c **** 			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1302:../freertos/queue.c **** 
1303:../freertos/queue.c **** 			/* Is there data in the queue now?  To be running the calling task
1304:../freertos/queue.c **** 			must be the highest priority task wanting to access the queue. */
1305:../freertos/queue.c **** 			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1306:../freertos/queue.c **** 			{
1307:../freertos/queue.c **** 				/* Data available, remove one item. */
1308:../freertos/queue.c **** 				prvCopyDataFromQueue( pxQueue, pvBuffer );
1309:../freertos/queue.c **** 				traceQUEUE_RECEIVE( pxQueue );
1310:../freertos/queue.c **** 				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
1311:../freertos/queue.c **** 
1312:../freertos/queue.c **** 				/* There is now space in the queue, were any tasks waiting to
1313:../freertos/queue.c **** 				post to the queue?  If so, unblock the highest priority waiting
1314:../freertos/queue.c **** 				task. */
1315:../freertos/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1316:../freertos/queue.c **** 				{
1317:../freertos/queue.c **** 					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1318:../freertos/queue.c **** 					{
1319:../freertos/queue.c **** 						queueYIELD_IF_USING_PREEMPTION();
1320:../freertos/queue.c **** 					}
1321:../freertos/queue.c **** 					else
1322:../freertos/queue.c **** 					{
1323:../freertos/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1324:../freertos/queue.c **** 					}
1325:../freertos/queue.c **** 				}
1326:../freertos/queue.c **** 				else
1327:../freertos/queue.c **** 				{
1328:../freertos/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1329:../freertos/queue.c **** 				}
1330:../freertos/queue.c **** 
1331:../freertos/queue.c **** 				taskEXIT_CRITICAL();
1332:../freertos/queue.c **** 				return pdPASS;
1333:../freertos/queue.c **** 			}
1334:../freertos/queue.c **** 			else
1335:../freertos/queue.c **** 			{
1336:../freertos/queue.c **** 				if( xTicksToWait == ( TickType_t ) 0 )
1337:../freertos/queue.c **** 				{
1338:../freertos/queue.c **** 					/* The queue was empty and no block time is specified (or
1339:../freertos/queue.c **** 					the block time has expired) so leave now. */
1340:../freertos/queue.c **** 					taskEXIT_CRITICAL();
ARM GAS  /tmp/ccjtHtwZ.s 			page 26


1341:../freertos/queue.c **** 					traceQUEUE_RECEIVE_FAILED( pxQueue );
1342:../freertos/queue.c **** 					return errQUEUE_EMPTY;
1343:../freertos/queue.c **** 				}
1344:../freertos/queue.c **** 				else if( xEntryTimeSet == pdFALSE )
1345:../freertos/queue.c **** 				{
1346:../freertos/queue.c **** 					/* The queue was empty and a block time was specified so
1347:../freertos/queue.c **** 					configure the timeout structure. */
1348:../freertos/queue.c **** 					vTaskInternalSetTimeOutState( &xTimeOut );
1349:../freertos/queue.c **** 					xEntryTimeSet = pdTRUE;
1350:../freertos/queue.c **** 				}
1351:../freertos/queue.c **** 				else
1352:../freertos/queue.c **** 				{
1353:../freertos/queue.c **** 					/* Entry time was already set. */
1354:../freertos/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1355:../freertos/queue.c **** 				}
1356:../freertos/queue.c **** 			}
1357:../freertos/queue.c **** 		}
1358:../freertos/queue.c **** 		taskEXIT_CRITICAL();
1359:../freertos/queue.c **** 
1360:../freertos/queue.c **** 		/* Interrupts and other tasks can send to and receive from the queue
1361:../freertos/queue.c **** 		now the critical section has been exited. */
1362:../freertos/queue.c **** 
1363:../freertos/queue.c **** 		vTaskSuspendAll();
1364:../freertos/queue.c **** 		prvLockQueue( pxQueue );
1365:../freertos/queue.c **** 
1366:../freertos/queue.c **** 		/* Update the timeout state to see if it has expired yet. */
1367:../freertos/queue.c **** 		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1368:../freertos/queue.c **** 		{
1369:../freertos/queue.c **** 			/* The timeout has not expired.  If the queue is still empty place
1370:../freertos/queue.c **** 			the task on the list of tasks waiting to receive from the queue. */
1371:../freertos/queue.c **** 			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1372:../freertos/queue.c **** 			{
1373:../freertos/queue.c **** 				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
1374:../freertos/queue.c **** 				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
1375:../freertos/queue.c **** 				prvUnlockQueue( pxQueue );
1376:../freertos/queue.c **** 				if( xTaskResumeAll() == pdFALSE )
1377:../freertos/queue.c **** 				{
1378:../freertos/queue.c **** 					portYIELD_WITHIN_API();
1379:../freertos/queue.c **** 				}
1380:../freertos/queue.c **** 				else
1381:../freertos/queue.c **** 				{
1382:../freertos/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1383:../freertos/queue.c **** 				}
1384:../freertos/queue.c **** 			}
1385:../freertos/queue.c **** 			else
1386:../freertos/queue.c **** 			{
1387:../freertos/queue.c **** 				/* The queue contains data again.  Loop back to try and read the
1388:../freertos/queue.c **** 				data. */
1389:../freertos/queue.c **** 				prvUnlockQueue( pxQueue );
1390:../freertos/queue.c **** 				( void ) xTaskResumeAll();
1391:../freertos/queue.c **** 			}
1392:../freertos/queue.c **** 		}
1393:../freertos/queue.c **** 		else
1394:../freertos/queue.c **** 		{
1395:../freertos/queue.c **** 			/* Timed out.  If there is no data in the queue exit, otherwise loop
1396:../freertos/queue.c **** 			back and attempt to read the data. */
1397:../freertos/queue.c **** 			prvUnlockQueue( pxQueue );
ARM GAS  /tmp/ccjtHtwZ.s 			page 27


1398:../freertos/queue.c **** 			( void ) xTaskResumeAll();
1399:../freertos/queue.c **** 
1400:../freertos/queue.c **** 			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1401:../freertos/queue.c **** 			{
1402:../freertos/queue.c **** 				traceQUEUE_RECEIVE_FAILED( pxQueue );
1403:../freertos/queue.c **** 				return errQUEUE_EMPTY;
1404:../freertos/queue.c **** 			}
1405:../freertos/queue.c **** 			else
1406:../freertos/queue.c **** 			{
1407:../freertos/queue.c **** 				mtCOVERAGE_TEST_MARKER();
1408:../freertos/queue.c **** 			}
1409:../freertos/queue.c **** 		}
1410:../freertos/queue.c **** 	} /*lint -restore */
1411:../freertos/queue.c **** }
1412:../freertos/queue.c **** /*-----------------------------------------------------------*/
1413:../freertos/queue.c **** 
1414:../freertos/queue.c **** BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
1415:../freertos/queue.c **** {
1416:../freertos/queue.c **** BaseType_t xEntryTimeSet = pdFALSE;
1417:../freertos/queue.c **** TimeOut_t xTimeOut;
1418:../freertos/queue.c **** Queue_t * const pxQueue = xQueue;
1419:../freertos/queue.c **** 
1420:../freertos/queue.c **** #if( configUSE_MUTEXES == 1 )
1421:../freertos/queue.c **** 	BaseType_t xInheritanceOccurred = pdFALSE;
1422:../freertos/queue.c **** #endif
1423:../freertos/queue.c **** 
1424:../freertos/queue.c **** 	/* Check the queue pointer is not NULL. */
1425:../freertos/queue.c **** 	configASSERT( ( pxQueue ) );
1426:../freertos/queue.c **** 
1427:../freertos/queue.c **** 	/* Check this really is a semaphore, in which case the item size will be
1428:../freertos/queue.c **** 	0. */
1429:../freertos/queue.c **** 	configASSERT( pxQueue->uxItemSize == 0 );
1430:../freertos/queue.c **** 
1431:../freertos/queue.c **** 	/* Cannot block if the scheduler is suspended. */
1432:../freertos/queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
1433:../freertos/queue.c **** 	{
1434:../freertos/queue.c **** 		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 )
1435:../freertos/queue.c **** 	}
1436:../freertos/queue.c **** 	#endif
1437:../freertos/queue.c **** 
1438:../freertos/queue.c **** 
1439:../freertos/queue.c **** 	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
1440:../freertos/queue.c **** 	statements within the function itself.  This is done in the interest
1441:../freertos/queue.c **** 	of execution time efficiency. */
1442:../freertos/queue.c **** 	for( ;; )
1443:../freertos/queue.c **** 	{
1444:../freertos/queue.c **** 		taskENTER_CRITICAL();
1445:../freertos/queue.c **** 		{
1446:../freertos/queue.c **** 			/* Semaphores are queues with an item size of 0, and where the
1447:../freertos/queue.c **** 			number of messages in the queue is the semaphore's count value. */
1448:../freertos/queue.c **** 			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
1449:../freertos/queue.c **** 
1450:../freertos/queue.c **** 			/* Is there data in the queue now?  To be running the calling task
1451:../freertos/queue.c **** 			must be the highest priority task wanting to access the queue. */
1452:../freertos/queue.c **** 			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
1453:../freertos/queue.c **** 			{
1454:../freertos/queue.c **** 				traceQUEUE_RECEIVE( pxQueue );
ARM GAS  /tmp/ccjtHtwZ.s 			page 28


1455:../freertos/queue.c **** 
1456:../freertos/queue.c **** 				/* Semaphores are queues with a data size of zero and where the
1457:../freertos/queue.c **** 				messages waiting is the semaphore's count.  Reduce the count. */
1458:../freertos/queue.c **** 				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
1459:../freertos/queue.c **** 
1460:../freertos/queue.c **** 				#if ( configUSE_MUTEXES == 1 )
1461:../freertos/queue.c **** 				{
1462:../freertos/queue.c **** 					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1463:../freertos/queue.c **** 					{
1464:../freertos/queue.c **** 						/* Record the information required to implement
1465:../freertos/queue.c **** 						priority inheritance should it become necessary. */
1466:../freertos/queue.c **** 						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
1467:../freertos/queue.c **** 					}
1468:../freertos/queue.c **** 					else
1469:../freertos/queue.c **** 					{
1470:../freertos/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1471:../freertos/queue.c **** 					}
1472:../freertos/queue.c **** 				}
1473:../freertos/queue.c **** 				#endif /* configUSE_MUTEXES */
1474:../freertos/queue.c **** 
1475:../freertos/queue.c **** 				/* Check to see if other tasks are blocked waiting to give the
1476:../freertos/queue.c **** 				semaphore, and if so, unblock the highest priority such task. */
1477:../freertos/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1478:../freertos/queue.c **** 				{
1479:../freertos/queue.c **** 					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1480:../freertos/queue.c **** 					{
1481:../freertos/queue.c **** 						queueYIELD_IF_USING_PREEMPTION();
1482:../freertos/queue.c **** 					}
1483:../freertos/queue.c **** 					else
1484:../freertos/queue.c **** 					{
1485:../freertos/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1486:../freertos/queue.c **** 					}
1487:../freertos/queue.c **** 				}
1488:../freertos/queue.c **** 				else
1489:../freertos/queue.c **** 				{
1490:../freertos/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1491:../freertos/queue.c **** 				}
1492:../freertos/queue.c **** 
1493:../freertos/queue.c **** 				taskEXIT_CRITICAL();
1494:../freertos/queue.c **** 				return pdPASS;
1495:../freertos/queue.c **** 			}
1496:../freertos/queue.c **** 			else
1497:../freertos/queue.c **** 			{
1498:../freertos/queue.c **** 				if( xTicksToWait == ( TickType_t ) 0 )
1499:../freertos/queue.c **** 				{
1500:../freertos/queue.c **** 					/* For inheritance to have occurred there must have been an
1501:../freertos/queue.c **** 					initial timeout, and an adjusted timeout cannot become 0, as
1502:../freertos/queue.c **** 					if it were 0 the function would have exited. */
1503:../freertos/queue.c **** 					#if( configUSE_MUTEXES == 1 )
1504:../freertos/queue.c **** 					{
1505:../freertos/queue.c **** 						configASSERT( xInheritanceOccurred == pdFALSE );
1506:../freertos/queue.c **** 					}
1507:../freertos/queue.c **** 					#endif /* configUSE_MUTEXES */
1508:../freertos/queue.c **** 
1509:../freertos/queue.c **** 					/* The semaphore count was 0 and no block time is specified
1510:../freertos/queue.c **** 					(or the block time has expired) so exit now. */
1511:../freertos/queue.c **** 					taskEXIT_CRITICAL();
ARM GAS  /tmp/ccjtHtwZ.s 			page 29


1512:../freertos/queue.c **** 					traceQUEUE_RECEIVE_FAILED( pxQueue );
1513:../freertos/queue.c **** 					return errQUEUE_EMPTY;
1514:../freertos/queue.c **** 				}
1515:../freertos/queue.c **** 				else if( xEntryTimeSet == pdFALSE )
1516:../freertos/queue.c **** 				{
1517:../freertos/queue.c **** 					/* The semaphore count was 0 and a block time was specified
1518:../freertos/queue.c **** 					so configure the timeout structure ready to block. */
1519:../freertos/queue.c **** 					vTaskInternalSetTimeOutState( &xTimeOut );
1520:../freertos/queue.c **** 					xEntryTimeSet = pdTRUE;
1521:../freertos/queue.c **** 				}
1522:../freertos/queue.c **** 				else
1523:../freertos/queue.c **** 				{
1524:../freertos/queue.c **** 					/* Entry time was already set. */
1525:../freertos/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1526:../freertos/queue.c **** 				}
1527:../freertos/queue.c **** 			}
1528:../freertos/queue.c **** 		}
1529:../freertos/queue.c **** 		taskEXIT_CRITICAL();
1530:../freertos/queue.c **** 
1531:../freertos/queue.c **** 		/* Interrupts and other tasks can give to and take from the semaphore
1532:../freertos/queue.c **** 		now the critical section has been exited. */
1533:../freertos/queue.c **** 
1534:../freertos/queue.c **** 		vTaskSuspendAll();
1535:../freertos/queue.c **** 		prvLockQueue( pxQueue );
1536:../freertos/queue.c **** 
1537:../freertos/queue.c **** 		/* Update the timeout state to see if it has expired yet. */
1538:../freertos/queue.c **** 		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1539:../freertos/queue.c **** 		{
1540:../freertos/queue.c **** 			/* A block time is specified and not expired.  If the semaphore
1541:../freertos/queue.c **** 			count is 0 then enter the Blocked state to wait for a semaphore to
1542:../freertos/queue.c **** 			become available.  As semaphores are implemented with queues the
1543:../freertos/queue.c **** 			queue being empty is equivalent to the semaphore count being 0. */
1544:../freertos/queue.c **** 			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1545:../freertos/queue.c **** 			{
1546:../freertos/queue.c **** 				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
1547:../freertos/queue.c **** 
1548:../freertos/queue.c **** 				#if ( configUSE_MUTEXES == 1 )
1549:../freertos/queue.c **** 				{
1550:../freertos/queue.c **** 					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1551:../freertos/queue.c **** 					{
1552:../freertos/queue.c **** 						taskENTER_CRITICAL();
1553:../freertos/queue.c **** 						{
1554:../freertos/queue.c **** 							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
1555:../freertos/queue.c **** 						}
1556:../freertos/queue.c **** 						taskEXIT_CRITICAL();
1557:../freertos/queue.c **** 					}
1558:../freertos/queue.c **** 					else
1559:../freertos/queue.c **** 					{
1560:../freertos/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1561:../freertos/queue.c **** 					}
1562:../freertos/queue.c **** 				}
1563:../freertos/queue.c **** 				#endif
1564:../freertos/queue.c **** 
1565:../freertos/queue.c **** 				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
1566:../freertos/queue.c **** 				prvUnlockQueue( pxQueue );
1567:../freertos/queue.c **** 				if( xTaskResumeAll() == pdFALSE )
1568:../freertos/queue.c **** 				{
ARM GAS  /tmp/ccjtHtwZ.s 			page 30


1569:../freertos/queue.c **** 					portYIELD_WITHIN_API();
1570:../freertos/queue.c **** 				}
1571:../freertos/queue.c **** 				else
1572:../freertos/queue.c **** 				{
1573:../freertos/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1574:../freertos/queue.c **** 				}
1575:../freertos/queue.c **** 			}
1576:../freertos/queue.c **** 			else
1577:../freertos/queue.c **** 			{
1578:../freertos/queue.c **** 				/* There was no timeout and the semaphore count was not 0, so
1579:../freertos/queue.c **** 				attempt to take the semaphore again. */
1580:../freertos/queue.c **** 				prvUnlockQueue( pxQueue );
1581:../freertos/queue.c **** 				( void ) xTaskResumeAll();
1582:../freertos/queue.c **** 			}
1583:../freertos/queue.c **** 		}
1584:../freertos/queue.c **** 		else
1585:../freertos/queue.c **** 		{
1586:../freertos/queue.c **** 			/* Timed out. */
1587:../freertos/queue.c **** 			prvUnlockQueue( pxQueue );
1588:../freertos/queue.c **** 			( void ) xTaskResumeAll();
1589:../freertos/queue.c **** 
1590:../freertos/queue.c **** 			/* If the semaphore count is 0 exit now as the timeout has
1591:../freertos/queue.c **** 			expired.  Otherwise return to attempt to take the semaphore that is
1592:../freertos/queue.c **** 			known to be available.  As semaphores are implemented by queues the
1593:../freertos/queue.c **** 			queue being empty is equivalent to the semaphore count being 0. */
1594:../freertos/queue.c **** 			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1595:../freertos/queue.c **** 			{
1596:../freertos/queue.c **** 				#if ( configUSE_MUTEXES == 1 )
1597:../freertos/queue.c **** 				{
1598:../freertos/queue.c **** 					/* xInheritanceOccurred could only have be set if
1599:../freertos/queue.c **** 					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
1600:../freertos/queue.c **** 					test the mutex type again to check it is actually a mutex. */
1601:../freertos/queue.c **** 					if( xInheritanceOccurred != pdFALSE )
1602:../freertos/queue.c **** 					{
1603:../freertos/queue.c **** 						taskENTER_CRITICAL();
1604:../freertos/queue.c **** 						{
1605:../freertos/queue.c **** 							UBaseType_t uxHighestWaitingPriority;
1606:../freertos/queue.c **** 
1607:../freertos/queue.c **** 							/* This task blocking on the mutex caused another
1608:../freertos/queue.c **** 							task to inherit this task's priority.  Now this task
1609:../freertos/queue.c **** 							has timed out the priority should be disinherited
1610:../freertos/queue.c **** 							again, but only as low as the next highest priority
1611:../freertos/queue.c **** 							task that is waiting for the same mutex. */
1612:../freertos/queue.c **** 							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
1613:../freertos/queue.c **** 							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPri
1614:../freertos/queue.c **** 						}
1615:../freertos/queue.c **** 						taskEXIT_CRITICAL();
1616:../freertos/queue.c **** 					}
1617:../freertos/queue.c **** 				}
1618:../freertos/queue.c **** 				#endif /* configUSE_MUTEXES */
1619:../freertos/queue.c **** 
1620:../freertos/queue.c **** 				traceQUEUE_RECEIVE_FAILED( pxQueue );
1621:../freertos/queue.c **** 				return errQUEUE_EMPTY;
1622:../freertos/queue.c **** 			}
1623:../freertos/queue.c **** 			else
1624:../freertos/queue.c **** 			{
1625:../freertos/queue.c **** 				mtCOVERAGE_TEST_MARKER();
ARM GAS  /tmp/ccjtHtwZ.s 			page 31


1626:../freertos/queue.c **** 			}
1627:../freertos/queue.c **** 		}
1628:../freertos/queue.c **** 	} /*lint -restore */
1629:../freertos/queue.c **** }
1630:../freertos/queue.c **** /*-----------------------------------------------------------*/
1631:../freertos/queue.c **** 
1632:../freertos/queue.c **** BaseType_t xQueuePeek( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
1633:../freertos/queue.c **** {
1634:../freertos/queue.c **** BaseType_t xEntryTimeSet = pdFALSE;
1635:../freertos/queue.c **** TimeOut_t xTimeOut;
1636:../freertos/queue.c **** int8_t *pcOriginalReadPosition;
1637:../freertos/queue.c **** Queue_t * const pxQueue = xQueue;
1638:../freertos/queue.c **** 
1639:../freertos/queue.c **** 	/* Check the pointer is not NULL. */
1640:../freertos/queue.c **** 	configASSERT( ( pxQueue ) );
1641:../freertos/queue.c **** 
1642:../freertos/queue.c **** 	/* The buffer into which data is received can only be NULL if the data size
1643:../freertos/queue.c **** 	is zero (so no data is copied into the buffer. */
1644:../freertos/queue.c **** 	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) )
1645:../freertos/queue.c **** 
1646:../freertos/queue.c **** 	/* Cannot block if the scheduler is suspended. */
1647:../freertos/queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
1648:../freertos/queue.c **** 	{
1649:../freertos/queue.c **** 		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 )
1650:../freertos/queue.c **** 	}
1651:../freertos/queue.c **** 	#endif
1652:../freertos/queue.c **** 
1653:../freertos/queue.c **** 
1654:../freertos/queue.c **** 	/*lint -save -e904  This function relaxes the coding standard somewhat to
1655:../freertos/queue.c **** 	allow return statements within the function itself.  This is done in the
1656:../freertos/queue.c **** 	interest of execution time efficiency. */
1657:../freertos/queue.c **** 	for( ;; )
1658:../freertos/queue.c **** 	{
1659:../freertos/queue.c **** 		taskENTER_CRITICAL();
1660:../freertos/queue.c **** 		{
1661:../freertos/queue.c **** 			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1662:../freertos/queue.c **** 
1663:../freertos/queue.c **** 			/* Is there data in the queue now?  To be running the calling task
1664:../freertos/queue.c **** 			must be the highest priority task wanting to access the queue. */
1665:../freertos/queue.c **** 			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1666:../freertos/queue.c **** 			{
1667:../freertos/queue.c **** 				/* Remember the read position so it can be reset after the data
1668:../freertos/queue.c **** 				is read from the queue as this function is only peeking the
1669:../freertos/queue.c **** 				data, not removing it. */
1670:../freertos/queue.c **** 				pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
1671:../freertos/queue.c **** 
1672:../freertos/queue.c **** 				prvCopyDataFromQueue( pxQueue, pvBuffer );
1673:../freertos/queue.c **** 				traceQUEUE_PEEK( pxQueue );
1674:../freertos/queue.c **** 
1675:../freertos/queue.c **** 				/* The data is not being removed, so reset the read pointer. */
1676:../freertos/queue.c **** 				pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
1677:../freertos/queue.c **** 
1678:../freertos/queue.c **** 				/* The data is being left in the queue, so see if there are
1679:../freertos/queue.c **** 				any other tasks waiting for the data. */
1680:../freertos/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1681:../freertos/queue.c **** 				{
1682:../freertos/queue.c **** 					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
ARM GAS  /tmp/ccjtHtwZ.s 			page 32


1683:../freertos/queue.c **** 					{
1684:../freertos/queue.c **** 						/* The task waiting has a higher priority than this task. */
1685:../freertos/queue.c **** 						queueYIELD_IF_USING_PREEMPTION();
1686:../freertos/queue.c **** 					}
1687:../freertos/queue.c **** 					else
1688:../freertos/queue.c **** 					{
1689:../freertos/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1690:../freertos/queue.c **** 					}
1691:../freertos/queue.c **** 				}
1692:../freertos/queue.c **** 				else
1693:../freertos/queue.c **** 				{
1694:../freertos/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1695:../freertos/queue.c **** 				}
1696:../freertos/queue.c **** 
1697:../freertos/queue.c **** 				taskEXIT_CRITICAL();
1698:../freertos/queue.c **** 				return pdPASS;
1699:../freertos/queue.c **** 			}
1700:../freertos/queue.c **** 			else
1701:../freertos/queue.c **** 			{
1702:../freertos/queue.c **** 				if( xTicksToWait == ( TickType_t ) 0 )
1703:../freertos/queue.c **** 				{
1704:../freertos/queue.c **** 					/* The queue was empty and no block time is specified (or
1705:../freertos/queue.c **** 					the block time has expired) so leave now. */
1706:../freertos/queue.c **** 					taskEXIT_CRITICAL();
1707:../freertos/queue.c **** 					traceQUEUE_PEEK_FAILED( pxQueue );
1708:../freertos/queue.c **** 					return errQUEUE_EMPTY;
1709:../freertos/queue.c **** 				}
1710:../freertos/queue.c **** 				else if( xEntryTimeSet == pdFALSE )
1711:../freertos/queue.c **** 				{
1712:../freertos/queue.c **** 					/* The queue was empty and a block time was specified so
1713:../freertos/queue.c **** 					configure the timeout structure ready to enter the blocked
1714:../freertos/queue.c **** 					state. */
1715:../freertos/queue.c **** 					vTaskInternalSetTimeOutState( &xTimeOut );
1716:../freertos/queue.c **** 					xEntryTimeSet = pdTRUE;
1717:../freertos/queue.c **** 				}
1718:../freertos/queue.c **** 				else
1719:../freertos/queue.c **** 				{
1720:../freertos/queue.c **** 					/* Entry time was already set. */
1721:../freertos/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1722:../freertos/queue.c **** 				}
1723:../freertos/queue.c **** 			}
1724:../freertos/queue.c **** 		}
1725:../freertos/queue.c **** 		taskEXIT_CRITICAL();
1726:../freertos/queue.c **** 
1727:../freertos/queue.c **** 		/* Interrupts and other tasks can send to and receive from the queue
1728:../freertos/queue.c **** 		now the critical section has been exited. */
1729:../freertos/queue.c **** 
1730:../freertos/queue.c **** 		vTaskSuspendAll();
1731:../freertos/queue.c **** 		prvLockQueue( pxQueue );
1732:../freertos/queue.c **** 
1733:../freertos/queue.c **** 		/* Update the timeout state to see if it has expired yet. */
1734:../freertos/queue.c **** 		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1735:../freertos/queue.c **** 		{
1736:../freertos/queue.c **** 			/* Timeout has not expired yet, check to see if there is data in the
1737:../freertos/queue.c **** 			queue now, and if not enter the Blocked state to wait for data. */
1738:../freertos/queue.c **** 			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1739:../freertos/queue.c **** 			{
ARM GAS  /tmp/ccjtHtwZ.s 			page 33


1740:../freertos/queue.c **** 				traceBLOCKING_ON_QUEUE_PEEK( pxQueue );
1741:../freertos/queue.c **** 				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
1742:../freertos/queue.c **** 				prvUnlockQueue( pxQueue );
1743:../freertos/queue.c **** 				if( xTaskResumeAll() == pdFALSE )
1744:../freertos/queue.c **** 				{
1745:../freertos/queue.c **** 					portYIELD_WITHIN_API();
1746:../freertos/queue.c **** 				}
1747:../freertos/queue.c **** 				else
1748:../freertos/queue.c **** 				{
1749:../freertos/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1750:../freertos/queue.c **** 				}
1751:../freertos/queue.c **** 			}
1752:../freertos/queue.c **** 			else
1753:../freertos/queue.c **** 			{
1754:../freertos/queue.c **** 				/* There is data in the queue now, so don't enter the blocked
1755:../freertos/queue.c **** 				state, instead return to try and obtain the data. */
1756:../freertos/queue.c **** 				prvUnlockQueue( pxQueue );
1757:../freertos/queue.c **** 				( void ) xTaskResumeAll();
1758:../freertos/queue.c **** 			}
1759:../freertos/queue.c **** 		}
1760:../freertos/queue.c **** 		else
1761:../freertos/queue.c **** 		{
1762:../freertos/queue.c **** 			/* The timeout has expired.  If there is still no data in the queue
1763:../freertos/queue.c **** 			exit, otherwise go back and try to read the data again. */
1764:../freertos/queue.c **** 			prvUnlockQueue( pxQueue );
1765:../freertos/queue.c **** 			( void ) xTaskResumeAll();
1766:../freertos/queue.c **** 
1767:../freertos/queue.c **** 			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1768:../freertos/queue.c **** 			{
1769:../freertos/queue.c **** 				traceQUEUE_PEEK_FAILED( pxQueue );
1770:../freertos/queue.c **** 				return errQUEUE_EMPTY;
1771:../freertos/queue.c **** 			}
1772:../freertos/queue.c **** 			else
1773:../freertos/queue.c **** 			{
1774:../freertos/queue.c **** 				mtCOVERAGE_TEST_MARKER();
1775:../freertos/queue.c **** 			}
1776:../freertos/queue.c **** 		}
1777:../freertos/queue.c **** 	} /*lint -restore */
1778:../freertos/queue.c **** }
1779:../freertos/queue.c **** /*-----------------------------------------------------------*/
1780:../freertos/queue.c **** 
1781:../freertos/queue.c **** BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const px
1782:../freertos/queue.c **** {
1783:../freertos/queue.c **** BaseType_t xReturn;
1784:../freertos/queue.c **** UBaseType_t uxSavedInterruptStatus;
1785:../freertos/queue.c **** Queue_t * const pxQueue = xQueue;
1786:../freertos/queue.c **** 
1787:../freertos/queue.c **** 	configASSERT( pxQueue );
1788:../freertos/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1789:../freertos/queue.c **** 
1790:../freertos/queue.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
1791:../freertos/queue.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
1792:../freertos/queue.c **** 	above the maximum system call priority are kept permanently enabled, even
1793:../freertos/queue.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
1794:../freertos/queue.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
1795:../freertos/queue.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1796:../freertos/queue.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
ARM GAS  /tmp/ccjtHtwZ.s 			page 34


1797:../freertos/queue.c **** 	assigned a priority above the configured maximum system call priority.
1798:../freertos/queue.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
1799:../freertos/queue.c **** 	that have been assigned a priority at or (logically) below the maximum
1800:../freertos/queue.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
1801:../freertos/queue.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
1802:../freertos/queue.c **** 	More information (albeit Cortex-M specific) is provided on the following
1803:../freertos/queue.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1804:../freertos/queue.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1805:../freertos/queue.c **** 
1806:../freertos/queue.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
1807:../freertos/queue.c **** 	{
1808:../freertos/queue.c **** 		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1809:../freertos/queue.c **** 
1810:../freertos/queue.c **** 		/* Cannot block in an ISR, so check there is data available. */
1811:../freertos/queue.c **** 		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1812:../freertos/queue.c **** 		{
1813:../freertos/queue.c **** 			const int8_t cRxLock = pxQueue->cRxLock;
1814:../freertos/queue.c **** 
1815:../freertos/queue.c **** 			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );
1816:../freertos/queue.c **** 
1817:../freertos/queue.c **** 			prvCopyDataFromQueue( pxQueue, pvBuffer );
1818:../freertos/queue.c **** 			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
1819:../freertos/queue.c **** 
1820:../freertos/queue.c **** 			/* If the queue is locked the event list will not be modified.
1821:../freertos/queue.c **** 			Instead update the lock count so the task that unlocks the queue
1822:../freertos/queue.c **** 			will know that an ISR has removed data while the queue was
1823:../freertos/queue.c **** 			locked. */
1824:../freertos/queue.c **** 			if( cRxLock == queueUNLOCKED )
1825:../freertos/queue.c **** 			{
1826:../freertos/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1827:../freertos/queue.c **** 				{
1828:../freertos/queue.c **** 					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1829:../freertos/queue.c **** 					{
1830:../freertos/queue.c **** 						/* The task waiting has a higher priority than us so
1831:../freertos/queue.c **** 						force a context switch. */
1832:../freertos/queue.c **** 						if( pxHigherPriorityTaskWoken != NULL )
1833:../freertos/queue.c **** 						{
1834:../freertos/queue.c **** 							*pxHigherPriorityTaskWoken = pdTRUE;
1835:../freertos/queue.c **** 						}
1836:../freertos/queue.c **** 						else
1837:../freertos/queue.c **** 						{
1838:../freertos/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1839:../freertos/queue.c **** 						}
1840:../freertos/queue.c **** 					}
1841:../freertos/queue.c **** 					else
1842:../freertos/queue.c **** 					{
1843:../freertos/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1844:../freertos/queue.c **** 					}
1845:../freertos/queue.c **** 				}
1846:../freertos/queue.c **** 				else
1847:../freertos/queue.c **** 				{
1848:../freertos/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1849:../freertos/queue.c **** 				}
1850:../freertos/queue.c **** 			}
1851:../freertos/queue.c **** 			else
1852:../freertos/queue.c **** 			{
1853:../freertos/queue.c **** 				/* Increment the lock count so the task that unlocks the queue
ARM GAS  /tmp/ccjtHtwZ.s 			page 35


1854:../freertos/queue.c **** 				knows that data was removed while it was locked. */
1855:../freertos/queue.c **** 				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
1856:../freertos/queue.c **** 			}
1857:../freertos/queue.c **** 
1858:../freertos/queue.c **** 			xReturn = pdPASS;
1859:../freertos/queue.c **** 		}
1860:../freertos/queue.c **** 		else
1861:../freertos/queue.c **** 		{
1862:../freertos/queue.c **** 			xReturn = pdFAIL;
1863:../freertos/queue.c **** 			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
1864:../freertos/queue.c **** 		}
1865:../freertos/queue.c **** 	}
1866:../freertos/queue.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1867:../freertos/queue.c **** 
1868:../freertos/queue.c **** 	return xReturn;
1869:../freertos/queue.c **** }
1870:../freertos/queue.c **** /*-----------------------------------------------------------*/
1871:../freertos/queue.c **** 
1872:../freertos/queue.c **** BaseType_t xQueuePeekFromISR( QueueHandle_t xQueue,  void * const pvBuffer )
1873:../freertos/queue.c **** {
1874:../freertos/queue.c **** BaseType_t xReturn;
1875:../freertos/queue.c **** UBaseType_t uxSavedInterruptStatus;
1876:../freertos/queue.c **** int8_t *pcOriginalReadPosition;
1877:../freertos/queue.c **** Queue_t * const pxQueue = xQueue;
1878:../freertos/queue.c **** 
1879:../freertos/queue.c **** 	configASSERT( pxQueue );
1880:../freertos/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1881:../freertos/queue.c **** 	configASSERT( pxQueue->uxItemSize != 0 ); /* Can't peek a semaphore. */
1882:../freertos/queue.c **** 
1883:../freertos/queue.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
1884:../freertos/queue.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
1885:../freertos/queue.c **** 	above the maximum system call priority are kept permanently enabled, even
1886:../freertos/queue.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
1887:../freertos/queue.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
1888:../freertos/queue.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1889:../freertos/queue.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
1890:../freertos/queue.c **** 	assigned a priority above the configured maximum system call priority.
1891:../freertos/queue.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
1892:../freertos/queue.c **** 	that have been assigned a priority at or (logically) below the maximum
1893:../freertos/queue.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
1894:../freertos/queue.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
1895:../freertos/queue.c **** 	More information (albeit Cortex-M specific) is provided on the following
1896:../freertos/queue.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1897:../freertos/queue.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1898:../freertos/queue.c **** 
1899:../freertos/queue.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
1900:../freertos/queue.c **** 	{
1901:../freertos/queue.c **** 		/* Cannot block in an ISR, so check there is data available. */
1902:../freertos/queue.c **** 		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
1903:../freertos/queue.c **** 		{
1904:../freertos/queue.c **** 			traceQUEUE_PEEK_FROM_ISR( pxQueue );
1905:../freertos/queue.c **** 
1906:../freertos/queue.c **** 			/* Remember the read position so it can be reset as nothing is
1907:../freertos/queue.c **** 			actually being removed from the queue. */
1908:../freertos/queue.c **** 			pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
1909:../freertos/queue.c **** 			prvCopyDataFromQueue( pxQueue, pvBuffer );
1910:../freertos/queue.c **** 			pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
ARM GAS  /tmp/ccjtHtwZ.s 			page 36


1911:../freertos/queue.c **** 
1912:../freertos/queue.c **** 			xReturn = pdPASS;
1913:../freertos/queue.c **** 		}
1914:../freertos/queue.c **** 		else
1915:../freertos/queue.c **** 		{
1916:../freertos/queue.c **** 			xReturn = pdFAIL;
1917:../freertos/queue.c **** 			traceQUEUE_PEEK_FROM_ISR_FAILED( pxQueue );
1918:../freertos/queue.c **** 		}
1919:../freertos/queue.c **** 	}
1920:../freertos/queue.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1921:../freertos/queue.c **** 
1922:../freertos/queue.c **** 	return xReturn;
1923:../freertos/queue.c **** }
1924:../freertos/queue.c **** /*-----------------------------------------------------------*/
1925:../freertos/queue.c **** 
1926:../freertos/queue.c **** UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
1927:../freertos/queue.c **** {
1928:../freertos/queue.c **** UBaseType_t uxReturn;
1929:../freertos/queue.c **** 
1930:../freertos/queue.c **** 	configASSERT( xQueue );
1931:../freertos/queue.c **** 
1932:../freertos/queue.c **** 	taskENTER_CRITICAL();
1933:../freertos/queue.c **** 	{
1934:../freertos/queue.c **** 		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
1935:../freertos/queue.c **** 	}
1936:../freertos/queue.c **** 	taskEXIT_CRITICAL();
1937:../freertos/queue.c **** 
1938:../freertos/queue.c **** 	return uxReturn;
1939:../freertos/queue.c **** } /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
1940:../freertos/queue.c **** /*-----------------------------------------------------------*/
1941:../freertos/queue.c **** 
1942:../freertos/queue.c **** UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
1943:../freertos/queue.c **** {
1944:../freertos/queue.c **** UBaseType_t uxReturn;
1945:../freertos/queue.c **** Queue_t * const pxQueue = xQueue;
1946:../freertos/queue.c **** 
1947:../freertos/queue.c **** 	configASSERT( pxQueue );
1948:../freertos/queue.c **** 
1949:../freertos/queue.c **** 	taskENTER_CRITICAL();
1950:../freertos/queue.c **** 	{
1951:../freertos/queue.c **** 		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
1952:../freertos/queue.c **** 	}
1953:../freertos/queue.c **** 	taskEXIT_CRITICAL();
1954:../freertos/queue.c **** 
1955:../freertos/queue.c **** 	return uxReturn;
1956:../freertos/queue.c **** } /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
1957:../freertos/queue.c **** /*-----------------------------------------------------------*/
1958:../freertos/queue.c **** 
1959:../freertos/queue.c **** UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
1960:../freertos/queue.c **** {
1961:../freertos/queue.c **** UBaseType_t uxReturn;
1962:../freertos/queue.c **** Queue_t * const pxQueue = xQueue;
1963:../freertos/queue.c **** 
1964:../freertos/queue.c **** 	configASSERT( pxQueue );
1965:../freertos/queue.c **** 	uxReturn = pxQueue->uxMessagesWaiting;
1966:../freertos/queue.c **** 
1967:../freertos/queue.c **** 	return uxReturn;
ARM GAS  /tmp/ccjtHtwZ.s 			page 37


1968:../freertos/queue.c **** } /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
1969:../freertos/queue.c **** /*-----------------------------------------------------------*/
1970:../freertos/queue.c **** 
1971:../freertos/queue.c **** void vQueueDelete( QueueHandle_t xQueue )
1972:../freertos/queue.c **** {
1973:../freertos/queue.c **** Queue_t * const pxQueue = xQueue;
1974:../freertos/queue.c **** 
1975:../freertos/queue.c **** 	configASSERT( pxQueue );
1976:../freertos/queue.c **** 	traceQUEUE_DELETE( pxQueue );
1977:../freertos/queue.c **** 
1978:../freertos/queue.c **** 	#if ( configQUEUE_REGISTRY_SIZE > 0 )
1979:../freertos/queue.c **** 	{
1980:../freertos/queue.c **** 		vQueueUnregisterQueue( pxQueue );
1981:../freertos/queue.c **** 	}
1982:../freertos/queue.c **** 	#endif
1983:../freertos/queue.c **** 
1984:../freertos/queue.c **** 	#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
1985:../freertos/queue.c **** 	{
1986:../freertos/queue.c **** 		/* The queue can only have been allocated dynamically - free it
1987:../freertos/queue.c **** 		again. */
1988:../freertos/queue.c **** 		vPortFree( pxQueue );
1989:../freertos/queue.c **** 	}
1990:../freertos/queue.c **** 	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
1991:../freertos/queue.c **** 	{
1992:../freertos/queue.c **** 		/* The queue could have been allocated statically or dynamically, so
1993:../freertos/queue.c **** 		check before attempting to free the memory. */
1994:../freertos/queue.c **** 		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
1995:../freertos/queue.c **** 		{
1996:../freertos/queue.c **** 			vPortFree( pxQueue );
1997:../freertos/queue.c **** 		}
1998:../freertos/queue.c **** 		else
1999:../freertos/queue.c **** 		{
2000:../freertos/queue.c **** 			mtCOVERAGE_TEST_MARKER();
2001:../freertos/queue.c **** 		}
2002:../freertos/queue.c **** 	}
2003:../freertos/queue.c **** 	#else
2004:../freertos/queue.c **** 	{
2005:../freertos/queue.c **** 		/* The queue must have been statically allocated, so is not going to be
2006:../freertos/queue.c **** 		deleted.  Avoid compiler warnings about the unused parameter. */
2007:../freertos/queue.c **** 		( void ) pxQueue;
2008:../freertos/queue.c **** 	}
2009:../freertos/queue.c **** 	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
2010:../freertos/queue.c **** }
2011:../freertos/queue.c **** /*-----------------------------------------------------------*/
2012:../freertos/queue.c **** 
2013:../freertos/queue.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2014:../freertos/queue.c **** 
2015:../freertos/queue.c **** 	UBaseType_t uxQueueGetQueueNumber( QueueHandle_t xQueue )
2016:../freertos/queue.c **** 	{
2017:../freertos/queue.c **** 		return ( ( Queue_t * ) xQueue )->uxQueueNumber;
2018:../freertos/queue.c **** 	}
2019:../freertos/queue.c **** 
2020:../freertos/queue.c **** #endif /* configUSE_TRACE_FACILITY */
2021:../freertos/queue.c **** /*-----------------------------------------------------------*/
2022:../freertos/queue.c **** 
2023:../freertos/queue.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2024:../freertos/queue.c **** 
ARM GAS  /tmp/ccjtHtwZ.s 			page 38


2025:../freertos/queue.c **** 	void vQueueSetQueueNumber( QueueHandle_t xQueue, UBaseType_t uxQueueNumber )
2026:../freertos/queue.c **** 	{
2027:../freertos/queue.c **** 		( ( Queue_t * ) xQueue )->uxQueueNumber = uxQueueNumber;
2028:../freertos/queue.c **** 	}
2029:../freertos/queue.c **** 
2030:../freertos/queue.c **** #endif /* configUSE_TRACE_FACILITY */
2031:../freertos/queue.c **** /*-----------------------------------------------------------*/
2032:../freertos/queue.c **** 
2033:../freertos/queue.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2034:../freertos/queue.c **** 
2035:../freertos/queue.c **** 	uint8_t ucQueueGetQueueType( QueueHandle_t xQueue )
2036:../freertos/queue.c **** 	{
2037:../freertos/queue.c **** 		return ( ( Queue_t * ) xQueue )->ucQueueType;
2038:../freertos/queue.c **** 	}
2039:../freertos/queue.c **** 
2040:../freertos/queue.c **** #endif /* configUSE_TRACE_FACILITY */
2041:../freertos/queue.c **** /*-----------------------------------------------------------*/
2042:../freertos/queue.c **** 
2043:../freertos/queue.c **** #if( configUSE_MUTEXES == 1 )
2044:../freertos/queue.c **** 
2045:../freertos/queue.c **** 	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
2046:../freertos/queue.c **** 	{
2047:../freertos/queue.c **** 	UBaseType_t uxHighestPriorityOfWaitingTasks;
2048:../freertos/queue.c **** 
2049:../freertos/queue.c **** 		/* If a task waiting for a mutex causes the mutex holder to inherit a
2050:../freertos/queue.c **** 		priority, but the waiting task times out, then the holder should
2051:../freertos/queue.c **** 		disinherit the priority - but only down to the highest priority of any
2052:../freertos/queue.c **** 		other tasks that are waiting for the same mutex.  For this purpose,
2053:../freertos/queue.c **** 		return the priority of the highest priority task that is waiting for the
2054:../freertos/queue.c **** 		mutex. */
2055:../freertos/queue.c **** 		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
2056:../freertos/queue.c **** 		{
2057:../freertos/queue.c **** 			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET
2058:../freertos/queue.c **** 		}
2059:../freertos/queue.c **** 		else
2060:../freertos/queue.c **** 		{
2061:../freertos/queue.c **** 			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
2062:../freertos/queue.c **** 		}
2063:../freertos/queue.c **** 
2064:../freertos/queue.c **** 		return uxHighestPriorityOfWaitingTasks;
2065:../freertos/queue.c **** 	}
2066:../freertos/queue.c **** 
2067:../freertos/queue.c **** #endif /* configUSE_MUTEXES */
2068:../freertos/queue.c **** /*-----------------------------------------------------------*/
2069:../freertos/queue.c **** 
2070:../freertos/queue.c **** static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const Bas
2071:../freertos/queue.c **** {
2072:../freertos/queue.c **** BaseType_t xReturn = pdFALSE;
2073:../freertos/queue.c **** UBaseType_t uxMessagesWaiting;
2074:../freertos/queue.c **** 
2075:../freertos/queue.c **** 	/* This function is called from a critical section. */
2076:../freertos/queue.c **** 
2077:../freertos/queue.c **** 	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
2078:../freertos/queue.c **** 
2079:../freertos/queue.c **** 	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
2080:../freertos/queue.c **** 	{
2081:../freertos/queue.c **** 		#if ( configUSE_MUTEXES == 1 )
ARM GAS  /tmp/ccjtHtwZ.s 			page 39


2082:../freertos/queue.c **** 		{
2083:../freertos/queue.c **** 			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
2084:../freertos/queue.c **** 			{
2085:../freertos/queue.c **** 				/* The mutex is no longer being held. */
2086:../freertos/queue.c **** 				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
2087:../freertos/queue.c **** 				pxQueue->u.xSemaphore.xMutexHolder = NULL;
2088:../freertos/queue.c **** 			}
2089:../freertos/queue.c **** 			else
2090:../freertos/queue.c **** 			{
2091:../freertos/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2092:../freertos/queue.c **** 			}
2093:../freertos/queue.c **** 		}
2094:../freertos/queue.c **** 		#endif /* configUSE_MUTEXES */
2095:../freertos/queue.c **** 	}
2096:../freertos/queue.c **** 	else if( xPosition == queueSEND_TO_BACK )
2097:../freertos/queue.c **** 	{
2098:../freertos/queue.c **** 		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); 
2099:../freertos/queue.c **** 		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, esp
2100:../freertos/queue.c **** 		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as co
2101:../freertos/queue.c **** 		{
2102:../freertos/queue.c **** 			pxQueue->pcWriteTo = pxQueue->pcHead;
2103:../freertos/queue.c **** 		}
2104:../freertos/queue.c **** 		else
2105:../freertos/queue.c **** 		{
2106:../freertos/queue.c **** 			mtCOVERAGE_TEST_MARKER();
2107:../freertos/queue.c **** 		}
2108:../freertos/queue.c **** 	}
2109:../freertos/queue.c **** 	else
2110:../freertos/queue.c **** 	{
2111:../freertos/queue.c **** 		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxIt
2112:../freertos/queue.c **** 		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
2113:../freertos/queue.c **** 		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as co
2114:../freertos/queue.c **** 		{
2115:../freertos/queue.c **** 			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
2116:../freertos/queue.c **** 		}
2117:../freertos/queue.c **** 		else
2118:../freertos/queue.c **** 		{
2119:../freertos/queue.c **** 			mtCOVERAGE_TEST_MARKER();
2120:../freertos/queue.c **** 		}
2121:../freertos/queue.c **** 
2122:../freertos/queue.c **** 		if( xPosition == queueOVERWRITE )
2123:../freertos/queue.c **** 		{
2124:../freertos/queue.c **** 			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
2125:../freertos/queue.c **** 			{
2126:../freertos/queue.c **** 				/* An item is not being added but overwritten, so subtract
2127:../freertos/queue.c **** 				one from the recorded number of items in the queue so when
2128:../freertos/queue.c **** 				one is added again below the number of recorded items remains
2129:../freertos/queue.c **** 				correct. */
2130:../freertos/queue.c **** 				--uxMessagesWaiting;
2131:../freertos/queue.c **** 			}
2132:../freertos/queue.c **** 			else
2133:../freertos/queue.c **** 			{
2134:../freertos/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2135:../freertos/queue.c **** 			}
2136:../freertos/queue.c **** 		}
2137:../freertos/queue.c **** 		else
2138:../freertos/queue.c **** 		{
ARM GAS  /tmp/ccjtHtwZ.s 			page 40


2139:../freertos/queue.c **** 			mtCOVERAGE_TEST_MARKER();
2140:../freertos/queue.c **** 		}
2141:../freertos/queue.c **** 	}
2142:../freertos/queue.c **** 
2143:../freertos/queue.c **** 	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
2144:../freertos/queue.c **** 
2145:../freertos/queue.c **** 	return xReturn;
2146:../freertos/queue.c **** }
2147:../freertos/queue.c **** /*-----------------------------------------------------------*/
2148:../freertos/queue.c **** 
2149:../freertos/queue.c **** static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
2150:../freertos/queue.c **** {
2151:../freertos/queue.c **** 	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
2152:../freertos/queue.c **** 	{
2153:../freertos/queue.c **** 		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char typ
2154:../freertos/queue.c **** 		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justi
2155:../freertos/queue.c **** 		{
2156:../freertos/queue.c **** 			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
2157:../freertos/queue.c **** 		}
2158:../freertos/queue.c **** 		else
2159:../freertos/queue.c **** 		{
2160:../freertos/queue.c **** 			mtCOVERAGE_TEST_MARKER();
2161:../freertos/queue.c **** 		}
2162:../freertos/queue.c **** 		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue
2163:../freertos/queue.c **** 	}
2164:../freertos/queue.c **** }
2165:../freertos/queue.c **** /*-----------------------------------------------------------*/
2166:../freertos/queue.c **** 
2167:../freertos/queue.c **** static void prvUnlockQueue( Queue_t * const pxQueue )
2168:../freertos/queue.c **** {
2169:../freertos/queue.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED. */
2170:../freertos/queue.c **** 
2171:../freertos/queue.c **** 	/* The lock counts contains the number of extra data items placed or
2172:../freertos/queue.c **** 	removed from the queue while the queue was locked.  When a queue is
2173:../freertos/queue.c **** 	locked items can be added or removed, but the event lists cannot be
2174:../freertos/queue.c **** 	updated. */
2175:../freertos/queue.c **** 	taskENTER_CRITICAL();
2176:../freertos/queue.c **** 	{
2177:../freertos/queue.c **** 		int8_t cTxLock = pxQueue->cTxLock;
2178:../freertos/queue.c **** 
2179:../freertos/queue.c **** 		/* See if data was added to the queue while it was locked. */
2180:../freertos/queue.c **** 		while( cTxLock > queueLOCKED_UNMODIFIED )
2181:../freertos/queue.c **** 		{
2182:../freertos/queue.c **** 			/* Data was posted while the queue was locked.  Are any tasks
2183:../freertos/queue.c **** 			blocked waiting for data to become available? */
2184:../freertos/queue.c **** 			#if ( configUSE_QUEUE_SETS == 1 )
2185:../freertos/queue.c **** 			{
2186:../freertos/queue.c **** 				if( pxQueue->pxQueueSetContainer != NULL )
2187:../freertos/queue.c **** 				{
2188:../freertos/queue.c **** 					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
2189:../freertos/queue.c **** 					{
2190:../freertos/queue.c **** 						/* The queue is a member of a queue set, and posting to
2191:../freertos/queue.c **** 						the queue set caused a higher priority task to unblock.
2192:../freertos/queue.c **** 						A context switch is required. */
2193:../freertos/queue.c **** 						vTaskMissedYield();
2194:../freertos/queue.c **** 					}
2195:../freertos/queue.c **** 					else
ARM GAS  /tmp/ccjtHtwZ.s 			page 41


2196:../freertos/queue.c **** 					{
2197:../freertos/queue.c **** 						mtCOVERAGE_TEST_MARKER();
2198:../freertos/queue.c **** 					}
2199:../freertos/queue.c **** 				}
2200:../freertos/queue.c **** 				else
2201:../freertos/queue.c **** 				{
2202:../freertos/queue.c **** 					/* Tasks that are removed from the event list will get
2203:../freertos/queue.c **** 					added to the pending ready list as the scheduler is still
2204:../freertos/queue.c **** 					suspended. */
2205:../freertos/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
2206:../freertos/queue.c **** 					{
2207:../freertos/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
2208:../freertos/queue.c **** 						{
2209:../freertos/queue.c **** 							/* The task waiting has a higher priority so record that a
2210:../freertos/queue.c **** 							context	switch is required. */
2211:../freertos/queue.c **** 							vTaskMissedYield();
2212:../freertos/queue.c **** 						}
2213:../freertos/queue.c **** 						else
2214:../freertos/queue.c **** 						{
2215:../freertos/queue.c **** 							mtCOVERAGE_TEST_MARKER();
2216:../freertos/queue.c **** 						}
2217:../freertos/queue.c **** 					}
2218:../freertos/queue.c **** 					else
2219:../freertos/queue.c **** 					{
2220:../freertos/queue.c **** 						break;
2221:../freertos/queue.c **** 					}
2222:../freertos/queue.c **** 				}
2223:../freertos/queue.c **** 			}
2224:../freertos/queue.c **** 			#else /* configUSE_QUEUE_SETS */
2225:../freertos/queue.c **** 			{
2226:../freertos/queue.c **** 				/* Tasks that are removed from the event list will get added to
2227:../freertos/queue.c **** 				the pending ready list as the scheduler is still suspended. */
2228:../freertos/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
2229:../freertos/queue.c **** 				{
2230:../freertos/queue.c **** 					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
2231:../freertos/queue.c **** 					{
2232:../freertos/queue.c **** 						/* The task waiting has a higher priority so record that
2233:../freertos/queue.c **** 						a context switch is required. */
2234:../freertos/queue.c **** 						vTaskMissedYield();
2235:../freertos/queue.c **** 					}
2236:../freertos/queue.c **** 					else
2237:../freertos/queue.c **** 					{
2238:../freertos/queue.c **** 						mtCOVERAGE_TEST_MARKER();
2239:../freertos/queue.c **** 					}
2240:../freertos/queue.c **** 				}
2241:../freertos/queue.c **** 				else
2242:../freertos/queue.c **** 				{
2243:../freertos/queue.c **** 					break;
2244:../freertos/queue.c **** 				}
2245:../freertos/queue.c **** 			}
2246:../freertos/queue.c **** 			#endif /* configUSE_QUEUE_SETS */
2247:../freertos/queue.c **** 
2248:../freertos/queue.c **** 			--cTxLock;
2249:../freertos/queue.c **** 		}
2250:../freertos/queue.c **** 
2251:../freertos/queue.c **** 		pxQueue->cTxLock = queueUNLOCKED;
2252:../freertos/queue.c **** 	}
ARM GAS  /tmp/ccjtHtwZ.s 			page 42


2253:../freertos/queue.c **** 	taskEXIT_CRITICAL();
2254:../freertos/queue.c **** 
2255:../freertos/queue.c **** 	/* Do the same for the Rx lock. */
2256:../freertos/queue.c **** 	taskENTER_CRITICAL();
2257:../freertos/queue.c **** 	{
2258:../freertos/queue.c **** 		int8_t cRxLock = pxQueue->cRxLock;
2259:../freertos/queue.c **** 
2260:../freertos/queue.c **** 		while( cRxLock > queueLOCKED_UNMODIFIED )
2261:../freertos/queue.c **** 		{
2262:../freertos/queue.c **** 			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
2263:../freertos/queue.c **** 			{
2264:../freertos/queue.c **** 				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
2265:../freertos/queue.c **** 				{
2266:../freertos/queue.c **** 					vTaskMissedYield();
2267:../freertos/queue.c **** 				}
2268:../freertos/queue.c **** 				else
2269:../freertos/queue.c **** 				{
2270:../freertos/queue.c **** 					mtCOVERAGE_TEST_MARKER();
2271:../freertos/queue.c **** 				}
2272:../freertos/queue.c **** 
2273:../freertos/queue.c **** 				--cRxLock;
2274:../freertos/queue.c **** 			}
2275:../freertos/queue.c **** 			else
2276:../freertos/queue.c **** 			{
2277:../freertos/queue.c **** 				break;
2278:../freertos/queue.c **** 			}
2279:../freertos/queue.c **** 		}
2280:../freertos/queue.c **** 
2281:../freertos/queue.c **** 		pxQueue->cRxLock = queueUNLOCKED;
2282:../freertos/queue.c **** 	}
2283:../freertos/queue.c **** 	taskEXIT_CRITICAL();
2284:../freertos/queue.c **** }
2285:../freertos/queue.c **** /*-----------------------------------------------------------*/
2286:../freertos/queue.c **** 
2287:../freertos/queue.c **** static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
2288:../freertos/queue.c **** {
  86              		.loc 1 2288 1 view -0
  87              		.cfi_startproc
  88              		@ args = 0, pretend = 0, frame = 0
  89              		@ frame_needed = 0, uses_anonymous_args = 0
2289:../freertos/queue.c **** BaseType_t xReturn;
  90              		.loc 1 2289 1 view .LVU1
2290:../freertos/queue.c **** 
2291:../freertos/queue.c **** 	taskENTER_CRITICAL();
  91              		.loc 1 2291 2 view .LVU2
  92              	@ ../freertos/queue.c:2288: {
2288:../freertos/queue.c **** BaseType_t xReturn;
  93              		.loc 1 2288 1 is_stmt 0 view .LVU3
  94 0000 10B5     		push	{r4, lr}	@
  95              	.LCFI0:
  96              		.cfi_def_cfa_offset 8
  97              		.cfi_offset 4, -8
  98              		.cfi_offset 14, -4
  99              	@ ../freertos/queue.c:2288: {
2288:../freertos/queue.c **** BaseType_t xReturn;
 100              		.loc 1 2288 1 view .LVU4
 101 0002 0446     		mov	r4, r0	@ pxQueue, tmp120
ARM GAS  /tmp/ccjtHtwZ.s 			page 43


 102              	@ ../freertos/queue.c:2291: 	taskENTER_CRITICAL();
 103              		.loc 1 2291 2 view .LVU5
 104 0004 FFF7FEFF 		bl	vPortEnterCritical		@
 105              	.LVL1:
2292:../freertos/queue.c **** 	{
2293:../freertos/queue.c **** 		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 106              		.loc 1 2293 3 is_stmt 1 view .LVU6
 107              	@ ../freertos/queue.c:2293: 		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 108              		.loc 1 2293 14 is_stmt 0 view .LVU7
 109 0008 A46B     		ldr	r4, [r4, #56]	@ _1, pxQueue_5(D)->uxMessagesWaiting
 110              	.LVL2:
2294:../freertos/queue.c **** 		{
2295:../freertos/queue.c **** 			xReturn = pdTRUE;
2296:../freertos/queue.c **** 		}
2297:../freertos/queue.c **** 		else
2298:../freertos/queue.c **** 		{
2299:../freertos/queue.c **** 			xReturn = pdFALSE;
2300:../freertos/queue.c **** 		}
2301:../freertos/queue.c **** 	}
2302:../freertos/queue.c **** 	taskEXIT_CRITICAL();
 111              		.loc 1 2302 2 is_stmt 1 view .LVU8
 112 000a FFF7FEFF 		bl	vPortExitCritical		@
 113              	.LVL3:
2303:../freertos/queue.c **** 
2304:../freertos/queue.c **** 	return xReturn;
 114              		.loc 1 2304 2 view .LVU9
 115              	@ ../freertos/queue.c:2305: }
2305:../freertos/queue.c **** }
 116              		.loc 1 2305 1 is_stmt 0 view .LVU10
 117 000e B4FA84F0 		clz	r0, r4	@, _1
 118 0012 4009     		lsrs	r0, r0, #5	@,,
 119 0014 10BD     		pop	{r4, pc}	@
 120              		.loc 1 2305 1 view .LVU11
 121              		.cfi_endproc
 122              	.LFE32:
 123              		.size	prvIsQueueEmpty, .-prvIsQueueEmpty
 124              		.align	1
 125              		.syntax unified
 126              		.thumb
 127              		.thumb_func
 128              		.type	prvCopyDataToQueue, %function
 129              	prvCopyDataToQueue:
 130              	.LVL4:
 131              	.LFB29:
2071:../freertos/queue.c **** BaseType_t xReturn = pdFALSE;
 132              		.loc 1 2071 1 is_stmt 1 view -0
 133              		.cfi_startproc
 134              		@ args = 0, pretend = 0, frame = 0
 135              		@ frame_needed = 0, uses_anonymous_args = 0
2072:../freertos/queue.c **** UBaseType_t uxMessagesWaiting;
 136              		.loc 1 2072 1 view .LVU13
2073:../freertos/queue.c **** 
 137              		.loc 1 2073 1 view .LVU14
2077:../freertos/queue.c **** 
 138              		.loc 1 2077 2 view .LVU15
 139              	@ ../freertos/queue.c:2071: {
2071:../freertos/queue.c **** BaseType_t xReturn = pdFALSE;
ARM GAS  /tmp/ccjtHtwZ.s 			page 44


 140              		.loc 1 2071 1 is_stmt 0 view .LVU16
 141 0016 F8B5     		push	{r3, r4, r5, r6, r7, lr}	@
 142              	.LCFI1:
 143              		.cfi_def_cfa_offset 24
 144              		.cfi_offset 3, -24
 145              		.cfi_offset 4, -20
 146              		.cfi_offset 5, -16
 147              		.cfi_offset 6, -12
 148              		.cfi_offset 7, -8
 149              		.cfi_offset 14, -4
 150              	@ ../freertos/queue.c:2071: {
2071:../freertos/queue.c **** BaseType_t xReturn = pdFALSE;
 151              		.loc 1 2071 1 view .LVU17
 152 0018 1546     		mov	r5, r2	@ xPosition, tmp160
 153              	@ ../freertos/queue.c:2079: 	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
2079:../freertos/queue.c **** 	{
 154              		.loc 1 2079 13 view .LVU18
 155 001a 026C     		ldr	r2, [r0, #64]	@ _1, pxQueue_24(D)->uxItemSize
 156              	.LVL5:
 157              	@ ../freertos/queue.c:2071: {
2071:../freertos/queue.c **** BaseType_t xReturn = pdFALSE;
 158              		.loc 1 2071 1 view .LVU19
 159 001c 0446     		mov	r4, r0	@ pxQueue, tmp159
 160              	@ ../freertos/queue.c:2077: 	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
2077:../freertos/queue.c **** 
 161              		.loc 1 2077 20 view .LVU20
 162 001e 866B     		ldr	r6, [r0, #56]	@ uxMessagesWaiting, pxQueue_24(D)->uxMessagesWaiting
 163              	.LVL6:
2079:../freertos/queue.c **** 	{
 164              		.loc 1 2079 2 is_stmt 1 view .LVU21
 165              	@ ../freertos/queue.c:2079: 	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
2079:../freertos/queue.c **** 	{
 166              		.loc 1 2079 4 is_stmt 0 view .LVU22
 167 0020 52B9     		cbnz	r2, .L3	@ _1,
2083:../freertos/queue.c **** 			{
 168              		.loc 1 2083 4 is_stmt 1 view .LVU23
 169              	@ ../freertos/queue.c:2083: 			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
2083:../freertos/queue.c **** 			{
 170              		.loc 1 2083 6 is_stmt 0 view .LVU24
 171 0022 0768     		ldr	r7, [r0]	@ pxQueue_24(D)->pcHead, pxQueue_24(D)->pcHead
 172 0024 47BB     		cbnz	r7, .L8	@ pxQueue_24(D)->pcHead,
2086:../freertos/queue.c **** 				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 173              		.loc 1 2086 5 is_stmt 1 view .LVU25
 174              	@ ../freertos/queue.c:2086: 				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHold
2086:../freertos/queue.c **** 				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 175              		.loc 1 2086 15 is_stmt 0 view .LVU26
 176 0026 8068     		ldr	r0, [r0, #8]	@, pxQueue_24(D)->u.xSemaphore.xMutexHolder
 177              	.LVL7:
2086:../freertos/queue.c **** 				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 178              		.loc 1 2086 15 view .LVU27
 179 0028 FFF7FEFF 		bl	xTaskPriorityDisinherit		@
 180              	.LVL8:
2086:../freertos/queue.c **** 				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 181              		.loc 1 2086 15 view .LVU28
 182 002c 0546     		mov	r5, r0	@ xPosition, tmp161
 183              	.LVL9:
2087:../freertos/queue.c **** 			}
ARM GAS  /tmp/ccjtHtwZ.s 			page 45


 184              		.loc 1 2087 5 is_stmt 1 view .LVU29
 185              	@ ../freertos/queue.c:2087: 				pxQueue->u.xSemaphore.xMutexHolder = NULL;
2087:../freertos/queue.c **** 			}
 186              		.loc 1 2087 40 is_stmt 0 view .LVU30
 187 002e A760     		str	r7, [r4, #8]	@ pxQueue_24(D)->pcHead, pxQueue_24(D)->u.xSemaphore.xMutexHolder
 188              	.LVL10:
 189              	.L4:
2139:../freertos/queue.c **** 		}
 190              		.loc 1 2139 28 is_stmt 1 view .LVU31
2143:../freertos/queue.c **** 
 191              		.loc 1 2143 2 view .LVU32
 192              	@ ../freertos/queue.c:2143: 	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
2143:../freertos/queue.c **** 
 193              		.loc 1 2143 49 is_stmt 0 view .LVU33
 194 0030 0136     		adds	r6, r6, #1	@ _18, uxMessagesWaiting,
 195              	.LVL11:
 196              	@ ../freertos/queue.c:2146: }
2146:../freertos/queue.c **** /*-----------------------------------------------------------*/
 197              		.loc 1 2146 1 view .LVU34
 198 0032 2846     		mov	r0, r5	@, xPosition
 199              	@ ../freertos/queue.c:2143: 	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
2143:../freertos/queue.c **** 
 200              		.loc 1 2143 29 view .LVU35
 201 0034 A663     		str	r6, [r4, #56]	@ _18, pxQueue_24(D)->uxMessagesWaiting
2145:../freertos/queue.c **** }
 202              		.loc 1 2145 2 is_stmt 1 view .LVU36
 203              	@ ../freertos/queue.c:2146: }
2146:../freertos/queue.c **** /*-----------------------------------------------------------*/
 204              		.loc 1 2146 1 is_stmt 0 view .LVU37
 205 0036 F8BD     		pop	{r3, r4, r5, r6, r7, pc}	@
 206              	.LVL12:
 207              	.L3:
2096:../freertos/queue.c **** 	{
 208              		.loc 1 2096 7 is_stmt 1 view .LVU38
 209              	@ ../freertos/queue.c:2096: 	else if( xPosition == queueSEND_TO_BACK )
2096:../freertos/queue.c **** 	{
 210              		.loc 1 2096 9 is_stmt 0 view .LVU39
 211 0038 65B9     		cbnz	r5, .L5	@ xPosition,
2098:../freertos/queue.c **** 		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, esp
 212              		.loc 1 2098 3 is_stmt 1 view .LVU40
 213              	@ ../freertos/queue.c:2098: 		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size
2098:../freertos/queue.c **** 		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, esp
 214              		.loc 1 2098 12 is_stmt 0 view .LVU41
 215 003a 4068     		ldr	r0, [r0, #4]	@, pxQueue_24(D)->pcWriteTo
 216              	.LVL13:
2098:../freertos/queue.c **** 		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, esp
 217              		.loc 1 2098 12 view .LVU42
 218 003c FFF7FEFF 		bl	memcpy		@
 219              	.LVL14:
2099:../freertos/queue.c **** 		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as co
 220              		.loc 1 2099 3 is_stmt 1 view .LVU43
 221              	@ ../freertos/queue.c:2099: 		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arit
2099:../freertos/queue.c **** 		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as co
 222              		.loc 1 2099 22 is_stmt 0 view .LVU44
 223 0040 6368     		ldr	r3, [r4, #4]	@ pxQueue_24(D)->pcWriteTo, pxQueue_24(D)->pcWriteTo
 224 0042 226C     		ldr	r2, [r4, #64]	@ pxQueue_24(D)->uxItemSize, pxQueue_24(D)->uxItemSize
 225 0044 1344     		add	r3, r3, r2	@ _7, pxQueue_24(D)->uxItemSize
ARM GAS  /tmp/ccjtHtwZ.s 			page 46


 226              	@ ../freertos/queue.c:2100: 		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MIS
2100:../freertos/queue.c **** 		{
 227              		.loc 1 2100 5 view .LVU45
 228 0046 A268     		ldr	r2, [r4, #8]	@ pxQueue_24(D)->u.xQueue.pcTail, pxQueue_24(D)->u.xQueue.pcTail
 229              	@ ../freertos/queue.c:2099: 		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arit
2099:../freertos/queue.c **** 		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as co
 230              		.loc 1 2099 22 view .LVU46
 231 0048 6360     		str	r3, [r4, #4]	@ _7, pxQueue_24(D)->pcWriteTo
2100:../freertos/queue.c **** 		{
 232              		.loc 1 2100 3 is_stmt 1 view .LVU47
 233              	@ ../freertos/queue.c:2100: 		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MIS
2100:../freertos/queue.c **** 		{
 234              		.loc 1 2100 5 is_stmt 0 view .LVU48
 235 004a 9342     		cmp	r3, r2	@ _7, pxQueue_24(D)->u.xQueue.pcTail
 236 004c F0D3     		bcc	.L4		@,
2102:../freertos/queue.c **** 		}
 237              		.loc 1 2102 4 is_stmt 1 view .LVU49
 238              	@ ../freertos/queue.c:2102: 			pxQueue->pcWriteTo = pxQueue->pcHead;
2102:../freertos/queue.c **** 		}
 239              		.loc 1 2102 23 is_stmt 0 view .LVU50
 240 004e 2368     		ldr	r3, [r4]	@ pxQueue_24(D)->pcHead, pxQueue_24(D)->pcHead
 241 0050 6360     		str	r3, [r4, #4]	@ pxQueue_24(D)->pcHead, pxQueue_24(D)->pcWriteTo
 242 0052 EDE7     		b	.L4		@
 243              	.LVL15:
 244              	.L5:
2111:../freertos/queue.c **** 		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 245              		.loc 1 2111 3 is_stmt 1 view .LVU51
 246              	@ ../freertos/queue.c:2111: 		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQue
2111:../freertos/queue.c **** 		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 247              		.loc 1 2111 12 is_stmt 0 view .LVU52
 248 0054 C068     		ldr	r0, [r0, #12]	@, pxQueue_24(D)->u.xQueue.pcReadFrom
 249              	.LVL16:
2111:../freertos/queue.c **** 		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 250              		.loc 1 2111 12 view .LVU53
 251 0056 FFF7FEFF 		bl	memcpy		@
 252              	.LVL17:
2112:../freertos/queue.c **** 		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as co
 253              		.loc 1 2112 3 is_stmt 1 view .LVU54
 254              	@ ../freertos/queue.c:2112: 		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
2112:../freertos/queue.c **** 		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as co
 255              		.loc 1 2112 32 is_stmt 0 view .LVU55
 256 005a 226C     		ldr	r2, [r4, #64]	@ pxQueue_24(D)->uxItemSize, pxQueue_24(D)->uxItemSize
 257 005c E368     		ldr	r3, [r4, #12]	@ pxQueue_24(D)->u.xQueue.pcReadFrom, pxQueue_24(D)->u.xQueue.pcReadFrom
 258 005e 5142     		rsbs	r1, r2, #0	@ _13, pxQueue_24(D)->uxItemSize
 259 0060 9B1A     		subs	r3, r3, r2	@ _14, pxQueue_24(D)->u.xQueue.pcReadFrom, pxQueue_24(D)->uxItemSize
 260              	@ ../freertos/queue.c:2113: 		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MIS
2113:../freertos/queue.c **** 		{
 261              		.loc 1 2113 5 view .LVU56
 262 0062 2268     		ldr	r2, [r4]	@ pxQueue_24(D)->pcHead, pxQueue_24(D)->pcHead
 263              	@ ../freertos/queue.c:2112: 		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
2112:../freertos/queue.c **** 		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as co
 264              		.loc 1 2112 32 view .LVU57
 265 0064 E360     		str	r3, [r4, #12]	@ _14, pxQueue_24(D)->u.xQueue.pcReadFrom
2113:../freertos/queue.c **** 		{
 266              		.loc 1 2113 3 is_stmt 1 view .LVU58
 267              	@ ../freertos/queue.c:2113: 		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MIS
2113:../freertos/queue.c **** 		{
ARM GAS  /tmp/ccjtHtwZ.s 			page 47


 268              		.loc 1 2113 5 is_stmt 0 view .LVU59
 269 0066 9342     		cmp	r3, r2	@ _14, pxQueue_24(D)->pcHead
2115:../freertos/queue.c **** 		}
 270              		.loc 1 2115 4 is_stmt 1 view .LVU60
 271              	@ ../freertos/queue.c:2115: 			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue-
2115:../freertos/queue.c **** 		}
 272              		.loc 1 2115 62 is_stmt 0 view .LVU61
 273 0068 3EBF     		ittt	cc
 274 006a A368     		ldrcc	r3, [r4, #8]	@ pxQueue_24(D)->u.xQueue.pcTail, pxQueue_24(D)->u.xQueue.pcTail
 275 006c 5B18     		addcc	r3, r3, r1	@ tmp155, _13
 276              	@ ../freertos/queue.c:2115: 			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue-
2115:../freertos/queue.c **** 		}
 277              		.loc 1 2115 33 view .LVU62
 278 006e E360     		strcc	r3, [r4, #12]	@ tmp155, pxQueue_24(D)->u.xQueue.pcReadFrom
2119:../freertos/queue.c **** 		}
 279              		.loc 1 2119 28 is_stmt 1 view .LVU63
2122:../freertos/queue.c **** 		{
 280              		.loc 1 2122 3 view .LVU64
 281              	@ ../freertos/queue.c:2122: 		if( xPosition == queueOVERWRITE )
2122:../freertos/queue.c **** 		{
 282              		.loc 1 2122 5 is_stmt 0 view .LVU65
 283 0070 022D     		cmp	r5, #2	@ xPosition,
 284 0072 01D1     		bne	.L8		@,
2124:../freertos/queue.c **** 			{
 285              		.loc 1 2124 4 is_stmt 1 view .LVU66
 286              	@ ../freertos/queue.c:2124: 			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
2124:../freertos/queue.c **** 			{
 287              		.loc 1 2124 6 is_stmt 0 view .LVU67
 288 0074 16B1     		cbz	r6, .L9	@ uxMessagesWaiting,
2130:../freertos/queue.c **** 			}
 289              		.loc 1 2130 5 is_stmt 1 view .LVU68
 290 0076 013E     		subs	r6, r6, #1	@ uxMessagesWaiting, uxMessagesWaiting,
 291              	.LVL18:
 292              	.L8:
 293              	@ ../freertos/queue.c:2072: BaseType_t xReturn = pdFALSE;
2072:../freertos/queue.c **** UBaseType_t uxMessagesWaiting;
 294              		.loc 1 2072 12 is_stmt 0 view .LVU69
 295 0078 0025     		movs	r5, #0	@ xPosition,
 296              	.LVL19:
2072:../freertos/queue.c **** UBaseType_t uxMessagesWaiting;
 297              		.loc 1 2072 12 view .LVU70
 298 007a D9E7     		b	.L4		@
 299              	.LVL20:
 300              	.L9:
2072:../freertos/queue.c **** UBaseType_t uxMessagesWaiting;
 301              		.loc 1 2072 12 view .LVU71
 302 007c 3546     		mov	r5, r6	@ xPosition, uxMessagesWaiting
 303              	.LVL21:
2072:../freertos/queue.c **** UBaseType_t uxMessagesWaiting;
 304              		.loc 1 2072 12 view .LVU72
 305 007e D7E7     		b	.L4		@
 306              		.cfi_endproc
 307              	.LFE29:
 308              		.size	prvCopyDataToQueue, .-prvCopyDataToQueue
 309              		.align	1
 310              		.syntax unified
 311              		.thumb
ARM GAS  /tmp/ccjtHtwZ.s 			page 48


 312              		.thumb_func
 313              		.type	prvCopyDataFromQueue, %function
 314              	prvCopyDataFromQueue:
 315              	.LVL22:
 316              	.LFB30:
2150:../freertos/queue.c **** 	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 317              		.loc 1 2150 1 is_stmt 1 view -0
 318              		.cfi_startproc
 319              		@ args = 0, pretend = 0, frame = 0
 320              		@ frame_needed = 0, uses_anonymous_args = 0
 321              		@ link register save eliminated.
2151:../freertos/queue.c **** 	{
 322              		.loc 1 2151 2 view .LVU74
 323              	@ ../freertos/queue.c:2150: {
2150:../freertos/queue.c **** 	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 324              		.loc 1 2150 1 is_stmt 0 view .LVU75
 325 0080 0346     		mov	r3, r0	@ pxQueue, tmp129
 326              	@ ../freertos/queue.c:2151: 	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
2151:../freertos/queue.c **** 	{
 327              		.loc 1 2151 13 view .LVU76
 328 0082 1A6C     		ldr	r2, [r3, #64]	@ _1, pxQueue_10(D)->uxItemSize
 329              	@ ../freertos/queue.c:2150: {
2150:../freertos/queue.c **** 	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 330              		.loc 1 2150 1 view .LVU77
 331 0084 0846     		mov	r0, r1	@ pvBuffer, tmp130
 332              	.LVL23:
2150:../freertos/queue.c **** 	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 333              		.loc 1 2150 1 view .LVU78
 334 0086 10B4     		push	{r4}	@
 335              	.LCFI2:
 336              		.cfi_def_cfa_offset 4
 337              		.cfi_offset 4, -4
 338              	@ ../freertos/queue.c:2151: 	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
2151:../freertos/queue.c **** 	{
 339              		.loc 1 2151 4 view .LVU79
 340 0088 62B1     		cbz	r2, .L10	@ _1,
2153:../freertos/queue.c **** 		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justi
 341              		.loc 1 2153 3 is_stmt 1 view .LVU80
 342              	@ ../freertos/queue.c:2153: 		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Po
2153:../freertos/queue.c **** 		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justi
 343              		.loc 1 2153 32 is_stmt 0 view .LVU81
 344 008a DC68     		ldr	r4, [r3, #12]	@ pxQueue_10(D)->u.xQueue.pcReadFrom, pxQueue_10(D)->u.xQueue.pcReadFrom
 345              	@ ../freertos/queue.c:2154: 		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint
2154:../freertos/queue.c **** 		{
 346              		.loc 1 2154 5 view .LVU82
 347 008c 9968     		ldr	r1, [r3, #8]	@ pxQueue_10(D)->u.xQueue.pcTail, pxQueue_10(D)->u.xQueue.pcTail
 348              	.LVL24:
 349              	@ ../freertos/queue.c:2153: 		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Po
2153:../freertos/queue.c **** 		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justi
 350              		.loc 1 2153 32 view .LVU83
 351 008e 1444     		add	r4, r4, r2	@ _3, _1
 352              	@ ../freertos/queue.c:2154: 		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint
2154:../freertos/queue.c **** 		{
 353              		.loc 1 2154 5 view .LVU84
 354 0090 8C42     		cmp	r4, r1	@ _3, pxQueue_10(D)->u.xQueue.pcTail
 355              	@ ../freertos/queue.c:2156: 			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
2156:../freertos/queue.c **** 		}
ARM GAS  /tmp/ccjtHtwZ.s 			page 49


 356              		.loc 1 2156 33 view .LVU85
 357 0092 28BF     		it	cs
 358 0094 1968     		ldrcs	r1, [r3]	@ pxQueue_10(D)->pcHead, pxQueue_10(D)->pcHead
 359              	@ ../freertos/queue.c:2153: 		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Po
2153:../freertos/queue.c **** 		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justi
 360              		.loc 1 2153 32 view .LVU86
 361 0096 DC60     		str	r4, [r3, #12]	@ _3, pxQueue_10(D)->u.xQueue.pcReadFrom
2154:../freertos/queue.c **** 		{
 362              		.loc 1 2154 3 is_stmt 1 view .LVU87
2156:../freertos/queue.c **** 		}
 363              		.loc 1 2156 4 view .LVU88
 364              	@ ../freertos/queue.c:2156: 			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
2156:../freertos/queue.c **** 		}
 365              		.loc 1 2156 33 is_stmt 0 view .LVU89
 366 0098 28BF     		it	cs
 367 009a D960     		strcs	r1, [r3, #12]	@ pxQueue_10(D)->pcHead, pxQueue_10(D)->u.xQueue.pcReadFrom
2160:../freertos/queue.c **** 		}
 368              		.loc 1 2160 28 is_stmt 1 view .LVU90
2162:../freertos/queue.c **** 	}
 369              		.loc 1 2162 3 view .LVU91
 370              	@ ../freertos/queue.c:2162: 		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pc
2162:../freertos/queue.c **** 	}
 371              		.loc 1 2162 12 is_stmt 0 view .LVU92
 372 009c D968     		ldr	r1, [r3, #12]	@, pxQueue_10(D)->u.xQueue.pcReadFrom
 373              	@ ../freertos/queue.c:2164: }
2164:../freertos/queue.c **** /*-----------------------------------------------------------*/
 374              		.loc 1 2164 1 view .LVU93
 375 009e 10BC     		pop	{r4}		@
 376              	.LCFI3:
 377              		.cfi_remember_state
 378              		.cfi_restore 4
 379              		.cfi_def_cfa_offset 0
 380              	@ ../freertos/queue.c:2162: 		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pc
2162:../freertos/queue.c **** 	}
 381              		.loc 1 2162 12 view .LVU94
 382 00a0 FFF7FEBF 		b	memcpy		@
 383              	.LVL25:
 384              	.L10:
 385              	.LCFI4:
 386              		.cfi_restore_state
 387              	@ ../freertos/queue.c:2164: }
2164:../freertos/queue.c **** /*-----------------------------------------------------------*/
 388              		.loc 1 2164 1 view .LVU95
 389 00a4 10BC     		pop	{r4}		@
 390              	.LCFI5:
 391              		.cfi_restore 4
 392              		.cfi_def_cfa_offset 0
 393 00a6 7047     		bx	lr	@
 394              		.cfi_endproc
 395              	.LFE30:
 396              		.size	prvCopyDataFromQueue, .-prvCopyDataFromQueue
 397              		.align	1
 398              		.syntax unified
 399              		.thumb
 400              		.thumb_func
 401              		.type	prvUnlockQueue, %function
 402              	prvUnlockQueue:
ARM GAS  /tmp/ccjtHtwZ.s 			page 50


 403              	.LVL26:
 404              	.LFB31:
2168:../freertos/queue.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED. */
 405              		.loc 1 2168 1 is_stmt 1 view -0
 406              		.cfi_startproc
 407              		@ args = 0, pretend = 0, frame = 0
 408              		@ frame_needed = 0, uses_anonymous_args = 0
2175:../freertos/queue.c **** 	{
 409              		.loc 1 2175 2 view .LVU97
 410              	@ ../freertos/queue.c:2168: {
2168:../freertos/queue.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED. */
 411              		.loc 1 2168 1 is_stmt 0 view .LVU98
 412 00a8 70B5     		push	{r4, r5, r6, lr}	@
 413              	.LCFI6:
 414              		.cfi_def_cfa_offset 16
 415              		.cfi_offset 4, -16
 416              		.cfi_offset 5, -12
 417              		.cfi_offset 6, -8
 418              		.cfi_offset 14, -4
 419              	@ ../freertos/queue.c:2168: {
2168:../freertos/queue.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED. */
 420              		.loc 1 2168 1 view .LVU99
 421 00aa 0446     		mov	r4, r0	@ pxQueue, tmp148
 422              	@ ../freertos/queue.c:2175: 	taskENTER_CRITICAL();
2175:../freertos/queue.c **** 	{
 423              		.loc 1 2175 2 view .LVU100
 424 00ac FFF7FEFF 		bl	vPortEnterCritical		@
 425              	.LVL27:
 426              	.LBB23:
2177:../freertos/queue.c **** 
 427              		.loc 1 2177 3 is_stmt 1 view .LVU101
 428              	@ ../freertos/queue.c:2177: 		int8_t cTxLock = pxQueue->cTxLock;
2177:../freertos/queue.c **** 
 429              		.loc 1 2177 10 is_stmt 0 view .LVU102
 430 00b0 94F84550 		ldrb	r5, [r4, #69]	@ zero_extendqisi2	@ pxQueue_19(D)->cTxLock, pxQueue_19(D)->cTxLock
 431              	@ ../freertos/queue.c:2230: 					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive )
2230:../freertos/queue.c **** 					{
 432              		.loc 1 2230 36 view .LVU103
 433 00b4 04F12406 		add	r6, r4, #36	@ tmp147, pxQueue,
 434              	@ ../freertos/queue.c:2177: 		int8_t cTxLock = pxQueue->cTxLock;
2177:../freertos/queue.c **** 
 435              		.loc 1 2177 10 view .LVU104
 436 00b8 6DB2     		sxtb	r5, r5	@ cTxLock, pxQueue_19(D)->cTxLock
 437              	.LVL28:
2180:../freertos/queue.c **** 		{
 438              		.loc 1 2180 3 is_stmt 1 view .LVU105
 439              	.L14:
2180:../freertos/queue.c **** 		{
 440              		.loc 1 2180 8 view .LVU106
 441 00ba 002D     		cmp	r5, #0	@ cTxLock,
 442 00bc 14DC     		bgt	.L17		@,
 443              	.L15:
2251:../freertos/queue.c **** 	}
 444              		.loc 1 2251 3 view .LVU107
 445              	@ ../freertos/queue.c:2251: 		pxQueue->cTxLock = queueUNLOCKED;
2251:../freertos/queue.c **** 	}
 446              		.loc 1 2251 20 is_stmt 0 view .LVU108
ARM GAS  /tmp/ccjtHtwZ.s 			page 51


 447 00be FF23     		movs	r3, #255	@ tmp134,
 448 00c0 84F84530 		strb	r3, [r4, #69]	@ tmp134, pxQueue_19(D)->cTxLock
 449              	.LBE23:
2253:../freertos/queue.c **** 
 450              		.loc 1 2253 2 is_stmt 1 view .LVU109
 451 00c4 FFF7FEFF 		bl	vPortExitCritical		@
 452              	.LVL29:
2256:../freertos/queue.c **** 	{
 453              		.loc 1 2256 2 view .LVU110
 454 00c8 FFF7FEFF 		bl	vPortEnterCritical		@
 455              	.LVL30:
 456              	.LBB24:
2258:../freertos/queue.c **** 
 457              		.loc 1 2258 3 view .LVU111
 458              	@ ../freertos/queue.c:2258: 		int8_t cRxLock = pxQueue->cRxLock;
2258:../freertos/queue.c **** 
 459              		.loc 1 2258 10 is_stmt 0 view .LVU112
 460 00cc 94F84450 		ldrb	r5, [r4, #68]	@ zero_extendqisi2	@ pxQueue_19(D)->cRxLock, pxQueue_19(D)->cRxLock
 461              	.LVL31:
 462              	@ ../freertos/queue.c:2264: 				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) !
2264:../freertos/queue.c **** 				{
 463              		.loc 1 2264 35 view .LVU113
 464 00d0 04F11006 		add	r6, r4, #16	@ tmp146, pxQueue,
 465              	@ ../freertos/queue.c:2258: 		int8_t cRxLock = pxQueue->cRxLock;
2258:../freertos/queue.c **** 
 466              		.loc 1 2258 10 view .LVU114
 467 00d4 6DB2     		sxtb	r5, r5	@ cRxLock, pxQueue_19(D)->cRxLock
 468              	.LVL32:
2260:../freertos/queue.c **** 		{
 469              		.loc 1 2260 3 is_stmt 1 view .LVU115
 470              	.L18:
2260:../freertos/queue.c **** 		{
 471              		.loc 1 2260 8 view .LVU116
 472 00d6 002D     		cmp	r5, #0	@ cRxLock,
 473 00d8 12DC     		bgt	.L21		@,
 474              	.L19:
2281:../freertos/queue.c **** 	}
 475              		.loc 1 2281 3 view .LVU117
 476              	@ ../freertos/queue.c:2281: 		pxQueue->cRxLock = queueUNLOCKED;
2281:../freertos/queue.c **** 	}
 477              		.loc 1 2281 20 is_stmt 0 view .LVU118
 478 00da FF23     		movs	r3, #255	@ tmp144,
 479 00dc 84F84430 		strb	r3, [r4, #68]	@ tmp144, pxQueue_19(D)->cRxLock
 480              	.LBE24:
2283:../freertos/queue.c **** }
 481              		.loc 1 2283 2 is_stmt 1 view .LVU119
 482              	@ ../freertos/queue.c:2284: }
2284:../freertos/queue.c **** /*-----------------------------------------------------------*/
 483              		.loc 1 2284 1 is_stmt 0 view .LVU120
 484 00e0 BDE87040 		pop	{r4, r5, r6, lr}	@
 485              	.LCFI7:
 486              		.cfi_remember_state
 487              		.cfi_restore 14
 488              		.cfi_restore 6
 489              		.cfi_restore 5
 490              		.cfi_restore 4
 491              		.cfi_def_cfa_offset 0
ARM GAS  /tmp/ccjtHtwZ.s 			page 52


 492              	.LVL33:
 493              	@ ../freertos/queue.c:2283: 	taskEXIT_CRITICAL();
2283:../freertos/queue.c **** }
 494              		.loc 1 2283 2 view .LVU121
 495 00e4 FFF7FEBF 		b	vPortExitCritical		@
 496              	.LVL34:
 497              	.L17:
 498              	.LCFI8:
 499              		.cfi_restore_state
 500              	.LBB25:
2228:../freertos/queue.c **** 				{
 501              		.loc 1 2228 5 is_stmt 1 view .LVU122
 502              	@ ../freertos/queue.c:2228: 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pd
2228:../freertos/queue.c **** 				{
 503              		.loc 1 2228 9 is_stmt 0 view .LVU123
 504 00e8 636A     		ldr	r3, [r4, #36]	@ _1, pxQueue_19(D)->xTasksWaitingToReceive.uxNumberOfItems
 505              	@ ../freertos/queue.c:2228: 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pd
2228:../freertos/queue.c **** 				{
 506              		.loc 1 2228 7 view .LVU124
 507 00ea 002B     		cmp	r3, #0	@ _1
 508 00ec E7D0     		beq	.L15	@
2230:../freertos/queue.c **** 					{
 509              		.loc 1 2230 6 is_stmt 1 view .LVU125
 510              	@ ../freertos/queue.c:2230: 					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive )
2230:../freertos/queue.c **** 					{
 511              		.loc 1 2230 10 is_stmt 0 view .LVU126
 512 00ee 3046     		mov	r0, r6	@, tmp147
 513 00f0 FFF7FEFF 		bl	xTaskRemoveFromEventList		@
 514              	.LVL35:
 515              	@ ../freertos/queue.c:2230: 					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive )
2230:../freertos/queue.c **** 					{
 516              		.loc 1 2230 8 view .LVU127
 517 00f4 08B1     		cbz	r0, .L16	@ tmp149,
2234:../freertos/queue.c **** 					}
 518              		.loc 1 2234 7 is_stmt 1 view .LVU128
 519 00f6 FFF7FEFF 		bl	vTaskMissedYield		@
 520              	.LVL36:
 521              	.L16:
2238:../freertos/queue.c **** 					}
 522              		.loc 1 2238 31 view .LVU129
2248:../freertos/queue.c **** 		}
 523              		.loc 1 2248 4 view .LVU130
 524 00fa 013D     		subs	r5, r5, #1	@ tmp131, cTxLock,
 525              	.LVL37:
2248:../freertos/queue.c **** 		}
 526              		.loc 1 2248 4 is_stmt 0 view .LVU131
 527 00fc 6DB2     		sxtb	r5, r5	@ cTxLock, tmp131
 528              	.LVL38:
2248:../freertos/queue.c **** 		}
 529              		.loc 1 2248 4 view .LVU132
 530 00fe DCE7     		b	.L14		@
 531              	.LVL39:
 532              	.L21:
2248:../freertos/queue.c **** 		}
 533              		.loc 1 2248 4 view .LVU133
 534              	.LBE25:
 535              	.LBB26:
ARM GAS  /tmp/ccjtHtwZ.s 			page 53


2262:../freertos/queue.c **** 			{
 536              		.loc 1 2262 4 is_stmt 1 view .LVU134
 537              	@ ../freertos/queue.c:2262: 			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALS
2262:../freertos/queue.c **** 			{
 538              		.loc 1 2262 8 is_stmt 0 view .LVU135
 539 0100 2369     		ldr	r3, [r4, #16]	@ _6, pxQueue_19(D)->xTasksWaitingToSend.uxNumberOfItems
 540              	@ ../freertos/queue.c:2262: 			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALS
2262:../freertos/queue.c **** 			{
 541              		.loc 1 2262 6 view .LVU136
 542 0102 002B     		cmp	r3, #0	@ _6
 543 0104 E9D0     		beq	.L19	@
2264:../freertos/queue.c **** 				{
 544              		.loc 1 2264 5 is_stmt 1 view .LVU137
 545              	@ ../freertos/queue.c:2264: 				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) !
2264:../freertos/queue.c **** 				{
 546              		.loc 1 2264 9 is_stmt 0 view .LVU138
 547 0106 3046     		mov	r0, r6	@, tmp146
 548 0108 FFF7FEFF 		bl	xTaskRemoveFromEventList		@
 549              	.LVL40:
 550              	@ ../freertos/queue.c:2264: 				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) !
2264:../freertos/queue.c **** 				{
 551              		.loc 1 2264 7 view .LVU139
 552 010c 08B1     		cbz	r0, .L20	@ tmp150,
2266:../freertos/queue.c **** 				}
 553              		.loc 1 2266 6 is_stmt 1 view .LVU140
 554 010e FFF7FEFF 		bl	vTaskMissedYield		@
 555              	.LVL41:
 556              	.L20:
2270:../freertos/queue.c **** 				}
 557              		.loc 1 2270 30 view .LVU141
2273:../freertos/queue.c **** 			}
 558              		.loc 1 2273 5 view .LVU142
 559 0112 013D     		subs	r5, r5, #1	@ tmp141, cRxLock,
 560              	.LVL42:
2273:../freertos/queue.c **** 			}
 561              		.loc 1 2273 5 is_stmt 0 view .LVU143
 562 0114 6DB2     		sxtb	r5, r5	@ cRxLock, tmp141
 563              	.LVL43:
2273:../freertos/queue.c **** 			}
 564              		.loc 1 2273 5 view .LVU144
 565 0116 DEE7     		b	.L18		@
 566              	.LBE26:
 567              		.cfi_endproc
 568              	.LFE31:
 569              		.size	prvUnlockQueue, .-prvUnlockQueue
 570              		.align	1
 571              		.global	xQueueGenericReset
 572              		.syntax unified
 573              		.thumb
 574              		.thumb_func
 575              		.type	xQueueGenericReset, %function
 576              	xQueueGenericReset:
 577              	.LVL44:
 578              	.LFB5:
 256:../freertos/queue.c **** Queue_t * const pxQueue = xQueue;
 579              		.loc 1 256 1 is_stmt 1 view -0
 580              		.cfi_startproc
ARM GAS  /tmp/ccjtHtwZ.s 			page 54


 581              		@ args = 0, pretend = 0, frame = 0
 582              		@ frame_needed = 0, uses_anonymous_args = 0
 257:../freertos/queue.c **** 
 583              		.loc 1 257 1 view .LVU146
 584              	@ ../freertos/queue.c:256: {
 256:../freertos/queue.c **** Queue_t * const pxQueue = xQueue;
 585              		.loc 1 256 1 is_stmt 0 view .LVU147
 586 0118 38B5     		push	{r3, r4, r5, lr}	@
 587              	.LCFI9:
 588              		.cfi_def_cfa_offset 16
 589              		.cfi_offset 3, -16
 590              		.cfi_offset 4, -12
 591              		.cfi_offset 5, -8
 592              		.cfi_offset 14, -4
 593              	@ ../freertos/queue.c:256: {
 256:../freertos/queue.c **** Queue_t * const pxQueue = xQueue;
 594              		.loc 1 256 1 view .LVU148
 595 011a 0446     		mov	r4, r0	@ xQueue, tmp143
 596              	.LVL45:
 259:../freertos/queue.c **** 
 597              		.loc 1 259 25 is_stmt 1 view .LVU149
 261:../freertos/queue.c **** 	{
 598              		.loc 1 261 2 view .LVU150
 599              	@ ../freertos/queue.c:256: {
 256:../freertos/queue.c **** Queue_t * const pxQueue = xQueue;
 600              		.loc 1 256 1 is_stmt 0 view .LVU151
 601 011c 0D46     		mov	r5, r1	@ xNewQueue, tmp144
 602              	@ ../freertos/queue.c:261: 	taskENTER_CRITICAL();
 261:../freertos/queue.c **** 	{
 603              		.loc 1 261 2 view .LVU152
 604 011e FFF7FEFF 		bl	vPortEnterCritical		@
 605              	.LVL46:
 263:../freertos/queue.c **** 		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 606              		.loc 1 263 3 is_stmt 1 view .LVU153
 607              	@ ../freertos/queue.c:263: 		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQ
 263:../freertos/queue.c **** 		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 608              		.loc 1 263 68 is_stmt 0 view .LVU154
 609 0122 D4E90F31 		ldrd	r3, r1, [r4, #60]	@ MEM[(struct Queue_t *)xQueue_15(D)].uxLength, _3, xQueue,
 610 0126 4B43     		muls	r3, r1, r3	@ _4, _3
 611              	@ ../freertos/queue.c:263: 		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQ
 263:../freertos/queue.c **** 		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 612              		.loc 1 263 37 view .LVU155
 613 0128 2268     		ldr	r2, [r4]	@ _1, MEM[(struct Queue_t *)xQueue_15(D)].pcHead
 614              	@ ../freertos/queue.c:263: 		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQ
 263:../freertos/queue.c **** 		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 615              		.loc 1 263 46 view .LVU156
 616 012a D018     		adds	r0, r2, r3	@ tmp129, _1, _4
 617              	@ ../freertos/queue.c:266: 		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength
 266:../freertos/queue.c **** 		pxQueue->cRxLock = queueUNLOCKED;
 618              		.loc 1 266 50 view .LVU157
 619 012c 5B1A     		subs	r3, r3, r1	@ tmp131, _4, _3
 620 012e 1344     		add	r3, r3, r2	@ tmp132, _1
 621              	@ ../freertos/queue.c:263: 		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQ
 263:../freertos/queue.c **** 		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 622              		.loc 1 263 28 view .LVU158
 623 0130 A060     		str	r0, [r4, #8]	@ tmp129, MEM[(struct Queue_t *)xQueue_15(D)].u.xQueue.pcTail
 264:../freertos/queue.c **** 		pxQueue->pcWriteTo = pxQueue->pcHead;
ARM GAS  /tmp/ccjtHtwZ.s 			page 55


 624              		.loc 1 264 3 is_stmt 1 view .LVU159
 625              	@ ../freertos/queue.c:266: 		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength
 266:../freertos/queue.c **** 		pxQueue->cRxLock = queueUNLOCKED;
 626              		.loc 1 266 32 is_stmt 0 view .LVU160
 627 0132 E360     		str	r3, [r4, #12]	@ tmp132, MEM[(struct Queue_t *)xQueue_15(D)].u.xQueue.pcReadFrom
 628              	@ ../freertos/queue.c:264: 		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 264:../freertos/queue.c **** 		pxQueue->pcWriteTo = pxQueue->pcHead;
 629              		.loc 1 264 30 view .LVU161
 630 0134 0020     		movs	r0, #0	@ tmp130,
 631              	@ ../freertos/queue.c:267: 		pxQueue->cRxLock = queueUNLOCKED;
 267:../freertos/queue.c **** 		pxQueue->cTxLock = queueUNLOCKED;
 632              		.loc 1 267 20 view .LVU162
 633 0136 FF23     		movs	r3, #255	@ tmp133,
 634              	@ ../freertos/queue.c:264: 		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 264:../freertos/queue.c **** 		pxQueue->pcWriteTo = pxQueue->pcHead;
 635              		.loc 1 264 30 view .LVU163
 636 0138 A063     		str	r0, [r4, #56]	@ tmp130, MEM[(struct Queue_t *)xQueue_15(D)].uxMessagesWaiting
 265:../freertos/queue.c **** 		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSi
 637              		.loc 1 265 3 is_stmt 1 view .LVU164
 638              	@ ../freertos/queue.c:265: 		pxQueue->pcWriteTo = pxQueue->pcHead;
 265:../freertos/queue.c **** 		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSi
 639              		.loc 1 265 22 is_stmt 0 view .LVU165
 640 013a 6260     		str	r2, [r4, #4]	@ _1, MEM[(struct Queue_t *)xQueue_15(D)].pcWriteTo
 266:../freertos/queue.c **** 		pxQueue->cRxLock = queueUNLOCKED;
 641              		.loc 1 266 3 is_stmt 1 view .LVU166
 267:../freertos/queue.c **** 		pxQueue->cTxLock = queueUNLOCKED;
 642              		.loc 1 267 3 view .LVU167
 643              	@ ../freertos/queue.c:267: 		pxQueue->cRxLock = queueUNLOCKED;
 267:../freertos/queue.c **** 		pxQueue->cTxLock = queueUNLOCKED;
 644              		.loc 1 267 20 is_stmt 0 view .LVU168
 645 013c 84F84430 		strb	r3, [r4, #68]	@ tmp133, MEM[(struct Queue_t *)xQueue_15(D)].cRxLock
 268:../freertos/queue.c **** 
 646              		.loc 1 268 3 is_stmt 1 view .LVU169
 647              	@ ../freertos/queue.c:268: 		pxQueue->cTxLock = queueUNLOCKED;
 268:../freertos/queue.c **** 
 648              		.loc 1 268 20 is_stmt 0 view .LVU170
 649 0140 84F84530 		strb	r3, [r4, #69]	@ tmp133, MEM[(struct Queue_t *)xQueue_15(D)].cTxLock
 270:../freertos/queue.c **** 		{
 650              		.loc 1 270 3 is_stmt 1 view .LVU171
 651              	@ ../freertos/queue.c:270: 		if( xNewQueue == pdFALSE )
 270:../freertos/queue.c **** 		{
 652              		.loc 1 270 5 is_stmt 0 view .LVU172
 653 0144 A5B9     		cbnz	r5, .L35	@ xNewQueue,
 277:../freertos/queue.c **** 			{
 654              		.loc 1 277 4 is_stmt 1 view .LVU173
 655              	@ ../freertos/queue.c:277: 			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE
 277:../freertos/queue.c **** 			{
 656              		.loc 1 277 8 is_stmt 0 view .LVU174
 657 0146 2369     		ldr	r3, [r4, #16]	@ _9, MEM[(struct Queue_t *)xQueue_15(D)].xTasksWaitingToSend.uxNumberOfItems
 658              	@ ../freertos/queue.c:277: 			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE
 277:../freertos/queue.c **** 			{
 659              		.loc 1 277 6 view .LVU175
 660 0148 73B1     		cbz	r3, .L37	@ _9,
 279:../freertos/queue.c **** 				{
 661              		.loc 1 279 5 is_stmt 1 view .LVU176
 662              	@ ../freertos/queue.c:279: 				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) !=
 279:../freertos/queue.c **** 				{
ARM GAS  /tmp/ccjtHtwZ.s 			page 56


 663              		.loc 1 279 9 is_stmt 0 view .LVU177
 664 014a 04F11000 		add	r0, r4, #16	@, xQueue,
 665 014e FFF7FEFF 		bl	xTaskRemoveFromEventList		@
 666              	.LVL47:
 667              	@ ../freertos/queue.c:279: 				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) !=
 279:../freertos/queue.c **** 				{
 668              		.loc 1 279 7 view .LVU178
 669 0152 48B1     		cbz	r0, .L37	@ tmp145,
 281:../freertos/queue.c **** 				}
 670              		.loc 1 281 6 is_stmt 1 view .LVU179
 671 0154 4FF0E023 		mov	r3, #-536813568	@ tmp138,
 672 0158 4FF08052 		mov	r2, #268435456	@ tmp139,
 673 015c C3F8042D 		str	r2, [r3, #3332]	@ tmp139, MEM[(volatile uint32_t *)3758157060B]
 281:../freertos/queue.c **** 				}
 674              		.loc 1 281 6 view .LVU180
 675              		.syntax unified
 676              	@ 281 "../freertos/queue.c" 1
 677 0160 BFF34F8F 		dsb	
 678              	@ 0 "" 2
 281:../freertos/queue.c **** 				}
 679              		.loc 1 281 6 view .LVU181
 680              	@ 281 "../freertos/queue.c" 1
 681 0164 BFF36F8F 		isb
 682              	@ 0 "" 2
 281:../freertos/queue.c **** 				}
 683              		.loc 1 281 38 view .LVU182
 684              		.thumb
 685              		.syntax unified
 686              	.L37:
 300:../freertos/queue.c **** 
 687              		.loc 1 300 2 view .LVU183
 688 0168 FFF7FEFF 		bl	vPortExitCritical		@
 689              	.LVL48:
 304:../freertos/queue.c **** }
 690              		.loc 1 304 2 view .LVU184
 691              	@ ../freertos/queue.c:305: }
 305:../freertos/queue.c **** /*-----------------------------------------------------------*/
 692              		.loc 1 305 1 is_stmt 0 view .LVU185
 693 016c 0120     		movs	r0, #1	@,
 694 016e 38BD     		pop	{r3, r4, r5, pc}	@
 695              	.LVL49:
 696              	.L35:
 296:../freertos/queue.c **** 			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 697              		.loc 1 296 4 is_stmt 1 view .LVU186
 698 0170 04F11000 		add	r0, r4, #16	@, xQueue,
 699 0174 FFF7FEFF 		bl	vListInitialise		@
 700              	.LVL50:
 297:../freertos/queue.c **** 		}
 701              		.loc 1 297 4 view .LVU187
 702 0178 04F12400 		add	r0, r4, #36	@, xQueue,
 703 017c FFF7FEFF 		bl	vListInitialise		@
 704              	.LVL51:
 705 0180 F2E7     		b	.L37		@
 706              		.cfi_endproc
 707              	.LFE5:
 708              		.size	xQueueGenericReset, .-xQueueGenericReset
 709              		.align	1
ARM GAS  /tmp/ccjtHtwZ.s 			page 57


 710              		.global	xQueueGenericCreate
 711              		.syntax unified
 712              		.thumb
 713              		.thumb_func
 714              		.type	xQueueGenericCreate, %function
 715              	xQueueGenericCreate:
 716              	.LVL52:
 717              	.LFB6:
 369:../freertos/queue.c **** 	Queue_t *pxNewQueue;
 718              		.loc 1 369 2 view -0
 719              		.cfi_startproc
 720              		@ args = 0, pretend = 0, frame = 0
 721              		@ frame_needed = 0, uses_anonymous_args = 0
 370:../freertos/queue.c **** 	size_t xQueueSizeInBytes;
 722              		.loc 1 370 2 view .LVU189
 371:../freertos/queue.c **** 	uint8_t *pucQueueStorage;
 723              		.loc 1 371 2 view .LVU190
 372:../freertos/queue.c **** 
 724              		.loc 1 372 2 view .LVU191
 374:../freertos/queue.c **** 
 725              		.loc 1 374 52 view .LVU192
 376:../freertos/queue.c **** 		{
 726              		.loc 1 376 3 view .LVU193
 397:../freertos/queue.c **** 
 727              		.loc 1 397 3 view .LVU194
 728              	@ ../freertos/queue.c:369: 	{
 369:../freertos/queue.c **** 	Queue_t *pxNewQueue;
 729              		.loc 1 369 2 is_stmt 0 view .LVU195
 730 0182 F8B5     		push	{r3, r4, r5, r6, r7, lr}	@
 731              	.LCFI10:
 732              		.cfi_def_cfa_offset 24
 733              		.cfi_offset 3, -24
 734              		.cfi_offset 4, -20
 735              		.cfi_offset 5, -16
 736              		.cfi_offset 6, -12
 737              		.cfi_offset 7, -8
 738              		.cfi_offset 14, -4
 739              	@ ../freertos/queue.c:369: 	{
 369:../freertos/queue.c **** 	Queue_t *pxNewQueue;
 740              		.loc 1 369 2 view .LVU196
 741 0184 0646     		mov	r6, r0	@ uxQueueLength, tmp124
 742              	@ ../freertos/queue.c:385: 			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint
 385:../freertos/queue.c **** 		}
 743              		.loc 1 385 22 view .LVU197
 744 0186 4843     		muls	r0, r1, r0	@ xQueueSizeInBytes, uxItemSize
 745              	.LVL53:
 746              	@ ../freertos/queue.c:397: 		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSiz
 397:../freertos/queue.c **** 
 747              		.loc 1 397 30 view .LVU198
 748 0188 5030     		adds	r0, r0, #80	@, xQueueSizeInBytes,
 749              	.LVL54:
 750              	@ ../freertos/queue.c:369: 	{
 369:../freertos/queue.c **** 	Queue_t *pxNewQueue;
 751              		.loc 1 369 2 view .LVU199
 752 018a 0D46     		mov	r5, r1	@ uxItemSize, tmp125
 753 018c 1746     		mov	r7, r2	@ ucQueueType, tmp126
 754              	@ ../freertos/queue.c:397: 		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSiz
ARM GAS  /tmp/ccjtHtwZ.s 			page 58


 397:../freertos/queue.c **** 
 755              		.loc 1 397 30 view .LVU200
 756 018e FFF7FEFF 		bl	pvPortMalloc		@
 757              	.LVL55:
 399:../freertos/queue.c **** 		{
 758              		.loc 1 399 3 is_stmt 1 view .LVU201
 759              	@ ../freertos/queue.c:399: 		if( pxNewQueue != NULL )
 399:../freertos/queue.c **** 		{
 760              		.loc 1 399 5 is_stmt 0 view .LVU202
 761 0192 0446     		mov	r4, r0	@ <retval>, tmp127
 762 0194 58B1     		cbz	r0, .L42	@ <retval>,
 403:../freertos/queue.c **** 			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, es
 763              		.loc 1 403 4 is_stmt 1 view .LVU203
 764              	.LVL56:
 404:../freertos/queue.c **** 
 765              		.loc 1 404 4 view .LVU204
 415:../freertos/queue.c **** 		}
 766              		.loc 1 415 4 view .LVU205
 767              	.LBB29:
 768              	.LBI29:
 429:../freertos/queue.c **** {
 769              		.loc 1 429 13 view .LVU206
 770              	.LBB30:
 433:../freertos/queue.c **** 
 771              		.loc 1 433 2 view .LVU207
 435:../freertos/queue.c **** 	{
 772              		.loc 1 435 2 view .LVU208
 773              	@ ../freertos/queue.c:435: 	if( uxItemSize == ( UBaseType_t ) 0 )
 435:../freertos/queue.c **** 	{
 774              		.loc 1 435 4 is_stmt 0 view .LVU209
 775 0196 65B1     		cbz	r5, .L45	@ uxItemSize,
 776              	.LBE30:
 777              	.LBE29:
 778              	@ ../freertos/queue.c:404: 			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmeti
 404:../freertos/queue.c **** 
 779              		.loc 1 404 20 view .LVU210
 780 0198 00F15003 		add	r3, r0, #80	@ pucQueueStorage, <retval>,
 781              	.LVL57:
 782              	.LBB33:
 783              	.LBB31:
 446:../freertos/queue.c **** 	}
 784              		.loc 1 446 3 is_stmt 1 view .LVU211
 785              	.L44:
 786              	@ ../freertos/queue.c:453: 	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 453:../freertos/queue.c **** 
 787              		.loc 1 453 11 is_stmt 0 view .LVU212
 788 019c 0121     		movs	r1, #1	@,
 789 019e 2046     		mov	r0, r4	@, <retval>
 790              	.LVL58:
 791              	@ ../freertos/queue.c:452: 	pxNewQueue->uxItemSize = uxItemSize;
 452:../freertos/queue.c **** 	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 792              		.loc 1 452 25 view .LVU213
 793 01a0 C4E90F65 		strd	r6, r5, [r4, #60]	@ uxQueueLength, uxItemSize, <retval>,
 794 01a4 2360     		str	r3, [r4]	@ pucQueueStorage, pxNewQueue_9->pcHead
 451:../freertos/queue.c **** 	pxNewQueue->uxItemSize = uxItemSize;
 795              		.loc 1 451 2 is_stmt 1 view .LVU214
 453:../freertos/queue.c **** 
ARM GAS  /tmp/ccjtHtwZ.s 			page 59


 796              		.loc 1 453 2 view .LVU215
 797              	@ ../freertos/queue.c:453: 	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 453:../freertos/queue.c **** 
 798              		.loc 1 453 11 is_stmt 0 view .LVU216
 799 01a6 FFF7FEFF 		bl	xQueueGenericReset		@
 800              	.LVL59:
 457:../freertos/queue.c **** 	}
 801              		.loc 1 457 3 is_stmt 1 view .LVU217
 802              	@ ../freertos/queue.c:457: 		pxNewQueue->ucQueueType = ucQueueType;
 457:../freertos/queue.c **** 	}
 803              		.loc 1 457 27 is_stmt 0 view .LVU218
 804 01aa 84F84C70 		strb	r7, [r4, #76]	@ ucQueueType, pxNewQueue_9->ucQueueType
 467:../freertos/queue.c **** }
 805              		.loc 1 467 33 is_stmt 1 view .LVU219
 806              	.LBE31:
 807              	.LBE33:
 419:../freertos/queue.c **** 			mtCOVERAGE_TEST_MARKER();
 808              		.loc 1 419 43 view .LVU220
 420:../freertos/queue.c **** 		}
 809              		.loc 1 420 28 view .LVU221
 423:../freertos/queue.c **** 	}
 810              		.loc 1 423 3 view .LVU222
 811              	.L42:
 812              	@ ../freertos/queue.c:424: 	}
 424:../freertos/queue.c **** 
 813              		.loc 1 424 2 is_stmt 0 view .LVU223
 814 01ae 2046     		mov	r0, r4	@, <retval>
 815 01b0 F8BD     		pop	{r3, r4, r5, r6, r7, pc}	@
 816              	.LVL60:
 817              	.L45:
 818              	.LBB34:
 819              	.LBB32:
 424:../freertos/queue.c **** 
 820              		.loc 1 424 2 view .LVU224
 821 01b2 0346     		mov	r3, r0	@ pucQueueStorage, <retval>
 822 01b4 F2E7     		b	.L44		@
 823              	.LBE32:
 824              	.LBE34:
 825              		.cfi_endproc
 826              	.LFE6:
 827              		.size	xQueueGenericCreate, .-xQueueGenericCreate
 828              		.align	1
 829              		.global	xQueueCreateCountingSemaphore
 830              		.syntax unified
 831              		.thumb
 832              		.thumb_func
 833              		.type	xQueueCreateCountingSemaphore, %function
 834              	xQueueCreateCountingSemaphore:
 835              	.LVL61:
 836              	.LFB12:
 722:../freertos/queue.c **** 	QueueHandle_t xHandle;
 837              		.loc 1 722 2 is_stmt 1 view -0
 838              		.cfi_startproc
 839              		@ args = 0, pretend = 0, frame = 0
 840              		@ frame_needed = 0, uses_anonymous_args = 0
 723:../freertos/queue.c **** 
 841              		.loc 1 723 2 view .LVU226
ARM GAS  /tmp/ccjtHtwZ.s 			page 60


 725:../freertos/queue.c **** 		configASSERT( uxInitialCount <= uxMaxCount );
 842              		.loc 1 725 34 view .LVU227
 726:../freertos/queue.c **** 
 843              		.loc 1 726 47 view .LVU228
 728:../freertos/queue.c **** 
 844              		.loc 1 728 3 view .LVU229
 845              	@ ../freertos/queue.c:722: 	{
 722:../freertos/queue.c **** 	QueueHandle_t xHandle;
 846              		.loc 1 722 2 is_stmt 0 view .LVU230
 847 01b6 10B5     		push	{r4, lr}	@
 848              	.LCFI11:
 849              		.cfi_def_cfa_offset 8
 850              		.cfi_offset 4, -8
 851              		.cfi_offset 14, -4
 852              	@ ../freertos/queue.c:728: 		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_L
 728:../freertos/queue.c **** 
 853              		.loc 1 728 13 view .LVU231
 854 01b8 0222     		movs	r2, #2	@,
 855              	@ ../freertos/queue.c:722: 	{
 722:../freertos/queue.c **** 	QueueHandle_t xHandle;
 856              		.loc 1 722 2 view .LVU232
 857 01ba 0C46     		mov	r4, r1	@ uxInitialCount, tmp117
 858              	@ ../freertos/queue.c:728: 		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_L
 728:../freertos/queue.c **** 
 859              		.loc 1 728 13 view .LVU233
 860 01bc 0021     		movs	r1, #0	@,
 861              	.LVL62:
 728:../freertos/queue.c **** 
 862              		.loc 1 728 13 view .LVU234
 863 01be FFF7FEFF 		bl	xQueueGenericCreate		@
 864              	.LVL63:
 730:../freertos/queue.c **** 		{
 865              		.loc 1 730 3 is_stmt 1 view .LVU235
 866              	@ ../freertos/queue.c:730: 		if( xHandle != NULL )
 730:../freertos/queue.c **** 		{
 867              		.loc 1 730 5 is_stmt 0 view .LVU236
 868 01c2 00B1     		cbz	r0, .L49	@ <retval>,
 732:../freertos/queue.c **** 
 869              		.loc 1 732 4 is_stmt 1 view .LVU237
 870              	@ ../freertos/queue.c:732: 			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 732:../freertos/queue.c **** 
 871              		.loc 1 732 49 is_stmt 0 view .LVU238
 872 01c4 8463     		str	r4, [r0, #56]	@ uxInitialCount, MEM[(struct Queue_t *)xHandle_5].uxMessagesWaiting
 734:../freertos/queue.c **** 		}
 873              		.loc 1 734 36 is_stmt 1 view .LVU239
 738:../freertos/queue.c **** 		}
 874              		.loc 1 738 43 view .LVU240
 741:../freertos/queue.c **** 	}
 875              		.loc 1 741 3 view .LVU241
 876              	.L49:
 877              	@ ../freertos/queue.c:742: 	}
 742:../freertos/queue.c **** 
 878              		.loc 1 742 2 is_stmt 0 view .LVU242
 879 01c6 10BD     		pop	{r4, pc}	@
 742:../freertos/queue.c **** 
 880              		.loc 1 742 2 view .LVU243
 881              		.cfi_endproc
ARM GAS  /tmp/ccjtHtwZ.s 			page 61


 882              	.LFE12:
 883              		.size	xQueueCreateCountingSemaphore, .-xQueueCreateCountingSemaphore
 884              		.align	1
 885              		.global	xQueueGenericSend
 886              		.syntax unified
 887              		.thumb
 888              		.thumb_func
 889              		.type	xQueueGenericSend, %function
 890              	xQueueGenericSend:
 891              	.LVL64:
 892              	.LFB13:
 748:../freertos/queue.c **** BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 893              		.loc 1 748 1 is_stmt 1 view -0
 894              		.cfi_startproc
 895              		@ args = 0, pretend = 0, frame = 16
 896              		@ frame_needed = 0, uses_anonymous_args = 0
 749:../freertos/queue.c **** TimeOut_t xTimeOut;
 897              		.loc 1 749 1 view .LVU245
 750:../freertos/queue.c **** Queue_t * const pxQueue = xQueue;
 898              		.loc 1 750 1 view .LVU246
 751:../freertos/queue.c **** 
 899              		.loc 1 751 1 view .LVU247
 900              	@ ../freertos/queue.c:748: {
 748:../freertos/queue.c **** BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 901              		.loc 1 748 1 is_stmt 0 view .LVU248
 902 01c8 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}	@
 903              	.LCFI12:
 904              		.cfi_def_cfa_offset 28
 905              		.cfi_offset 4, -28
 906              		.cfi_offset 5, -24
 907              		.cfi_offset 6, -20
 908              		.cfi_offset 7, -16
 909              		.cfi_offset 8, -12
 910              		.cfi_offset 9, -8
 911              		.cfi_offset 14, -4
 912              	@ ../freertos/queue.c:749: BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 749:../freertos/queue.c **** TimeOut_t xTimeOut;
 913              		.loc 1 749 12 view .LVU249
 914 01cc 4FF00008 		mov	r8, #0	@ xEntryTimeSet,
 915              	@ ../freertos/queue.c:748: {
 748:../freertos/queue.c **** BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 916              		.loc 1 748 1 view .LVU250
 917 01d0 0446     		mov	r4, r0	@ xQueue, tmp162
 918              	.LVL65:
 748:../freertos/queue.c **** BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 919              		.loc 1 748 1 view .LVU251
 920 01d2 0F46     		mov	r7, r1	@ pvItemToQueue, tmp163
 921 01d4 1E46     		mov	r6, r3	@ xCopyPosition, tmp164
 922              	@ ../freertos/queue.c:910: 		prvLockQueue( pxQueue );
 910:../freertos/queue.c **** 
 923              		.loc 1 910 3 view .LVU252
 924 01d6 C146     		mov	r9, r8	@ tmp160, xEntryTimeSet
 925              	@ ../freertos/queue.c:748: {
 748:../freertos/queue.c **** BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 926              		.loc 1 748 1 view .LVU253
 927 01d8 85B0     		sub	sp, sp, #20	@,,
 928              	.LCFI13:
ARM GAS  /tmp/ccjtHtwZ.s 			page 62


 929              		.cfi_def_cfa_offset 48
 930              	@ ../freertos/queue.c:748: {
 748:../freertos/queue.c **** BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 931              		.loc 1 748 1 view .LVU254
 932 01da 0192     		str	r2, [sp, #4]	@ xTicksToWait, xTicksToWait
 933              	.LVL66:
 934              	.L55:
 753:../freertos/queue.c **** 	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 935              		.loc 1 753 25 is_stmt 1 view .LVU255
 754:../freertos/queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 936              		.loc 1 754 97 view .LVU256
 755:../freertos/queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 937              		.loc 1 755 88 view .LVU257
 758:../freertos/queue.c **** 	}
 938              		.loc 1 758 104 view .LVU258
 766:../freertos/queue.c **** 	{
 939              		.loc 1 766 2 view .LVU259
 768:../freertos/queue.c **** 		{
 940              		.loc 1 768 3 view .LVU260
 941 01dc FFF7FEFF 		bl	vPortEnterCritical		@
 942              	.LVL67:
 774:../freertos/queue.c **** 			{
 943              		.loc 1 774 4 view .LVU261
 944              	@ ../freertos/queue.c:774: 			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosi
 774:../freertos/queue.c **** 			{
 945              		.loc 1 774 17 is_stmt 0 view .LVU262
 946 01e0 A26B     		ldr	r2, [r4, #56]	@ _1, MEM[(struct Queue_t *)xQueue_24(D)].uxMessagesWaiting
 947              	@ ../freertos/queue.c:774: 			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosi
 774:../freertos/queue.c **** 			{
 948              		.loc 1 774 6 view .LVU263
 949 01e2 E36B     		ldr	r3, [r4, #60]	@ MEM[(struct Queue_t *)xQueue_24(D)].uxLength, MEM[(struct Queue_t *)xQueue_24(
 950 01e4 9A42     		cmp	r2, r3	@ _1, MEM[(struct Queue_t *)xQueue_24(D)].uxLength
 951 01e6 01D3     		bcc	.L56		@,
 952              	@ ../freertos/queue.c:774: 			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosi
 774:../freertos/queue.c **** 			{
 953              		.loc 1 774 59 discriminator 1 view .LVU264
 954 01e8 022E     		cmp	r6, #2	@ xCopyPosition,
 955 01ea 1BD1     		bne	.L57		@,
 956              	.L56:
 776:../freertos/queue.c **** 
 957              		.loc 1 776 31 is_stmt 1 view .LVU265
 840:../freertos/queue.c **** 
 958              		.loc 1 840 6 view .LVU266
 959              	@ ../freertos/queue.c:840: 					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyP
 840:../freertos/queue.c **** 
 960              		.loc 1 840 23 is_stmt 0 view .LVU267
 961 01ec 3246     		mov	r2, r6	@, xCopyPosition
 962 01ee 3946     		mov	r1, r7	@, pvItemToQueue
 963 01f0 2046     		mov	r0, r4	@, xQueue
 964 01f2 FFF710FF 		bl	prvCopyDataToQueue		@
 965              	.LVL68:
 844:../freertos/queue.c **** 					{
 966              		.loc 1 844 6 is_stmt 1 view .LVU268
 967              	@ ../freertos/queue.c:844: 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pd
 844:../freertos/queue.c **** 					{
 968              		.loc 1 844 10 is_stmt 0 view .LVU269
 969 01f6 636A     		ldr	r3, [r4, #36]	@ _3, MEM[(struct Queue_t *)xQueue_24(D)].xTasksWaitingToReceive.uxNumberOfItems
ARM GAS  /tmp/ccjtHtwZ.s 			page 63


 970              	@ ../freertos/queue.c:844: 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pd
 844:../freertos/queue.c **** 					{
 971              		.loc 1 844 8 view .LVU270
 972 01f8 1BB1     		cbz	r3, .L58	@ _3,
 846:../freertos/queue.c **** 						{
 973              		.loc 1 846 7 is_stmt 1 view .LVU271
 974              	@ ../freertos/queue.c:846: 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive )
 846:../freertos/queue.c **** 						{
 975              		.loc 1 846 11 is_stmt 0 view .LVU272
 976 01fa 04F12400 		add	r0, r4, #36	@, xQueue,
 977              	.LVL69:
 846:../freertos/queue.c **** 						{
 978              		.loc 1 846 11 view .LVU273
 979 01fe FFF7FEFF 		bl	xTaskRemoveFromEventList		@
 980              	.LVL70:
 981              	.L58:
 859:../freertos/queue.c **** 					{
 982              		.loc 1 859 11 is_stmt 1 view .LVU274
 983              	@ ../freertos/queue.c:859: 					else if( xYieldRequired != pdFALSE )
 859:../freertos/queue.c **** 					{
 984              		.loc 1 859 13 is_stmt 0 view .LVU275
 985 0202 48B1     		cbz	r0, .L60	@ xYieldRequired,
 865:../freertos/queue.c **** 					}
 986              		.loc 1 865 7 is_stmt 1 view .LVU276
 987 0204 4FF0E023 		mov	r3, #-536813568	@ tmp137,
 988 0208 4FF08052 		mov	r2, #268435456	@ tmp138,
 989 020c C3F8042D 		str	r2, [r3, #3332]	@ tmp138,
 865:../freertos/queue.c **** 					}
 990              		.loc 1 865 7 view .LVU277
 991              		.syntax unified
 992              	@ 865 "../freertos/queue.c" 1
 993 0210 BFF34F8F 		dsb	
 994              	@ 0 "" 2
 865:../freertos/queue.c **** 					}
 995              		.loc 1 865 7 view .LVU278
 996              	@ 865 "../freertos/queue.c" 1
 997 0214 BFF36F8F 		isb
 998              	@ 0 "" 2
 865:../freertos/queue.c **** 					}
 999              		.loc 1 865 39 view .LVU279
 1000              		.thumb
 1001              		.syntax unified
 1002              	.L60:
 869:../freertos/queue.c **** 					}
 1003              		.loc 1 869 31 view .LVU280
 874:../freertos/queue.c **** 				return pdPASS;
 1004              		.loc 1 874 5 view .LVU281
 1005 0218 FFF7FEFF 		bl	vPortExitCritical		@
 1006              	.LVL71:
 875:../freertos/queue.c **** 			}
 1007              		.loc 1 875 5 view .LVU282
 1008              	@ ../freertos/queue.c:875: 				return pdPASS;
 875:../freertos/queue.c **** 			}
 1009              		.loc 1 875 12 is_stmt 0 view .LVU283
 1010 021c 0120     		movs	r0, #1	@ <retval>,
 1011              	.LVL72:
 1012              	.L54:
ARM GAS  /tmp/ccjtHtwZ.s 			page 64


 1013              	@ ../freertos/queue.c:954: }
 954:../freertos/queue.c **** /*-----------------------------------------------------------*/
 1014              		.loc 1 954 1 view .LVU284
 1015 021e 05B0     		add	sp, sp, #20	@,,
 1016              	.LCFI14:
 1017              		.cfi_remember_state
 1018              		.cfi_def_cfa_offset 28
 1019              		@ sp needed	@
 1020 0220 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}	@
 1021              	.LVL73:
 1022              	.L57:
 1023              	.LCFI15:
 1024              		.cfi_restore_state
 879:../freertos/queue.c **** 				{
 1025              		.loc 1 879 5 is_stmt 1 view .LVU285
 1026              	@ ../freertos/queue.c:879: 				if( xTicksToWait == ( TickType_t ) 0 )
 879:../freertos/queue.c **** 				{
 1027              		.loc 1 879 7 is_stmt 0 view .LVU286
 1028 0224 019D     		ldr	r5, [sp, #4]	@ xTicksToWait, xTicksToWait
 1029 0226 1DB9     		cbnz	r5, .L63	@ xTicksToWait,
 883:../freertos/queue.c **** 
 1030              		.loc 1 883 6 is_stmt 1 view .LVU287
 1031 0228 FFF7FEFF 		bl	vPortExitCritical		@
 1032              	.LVL74:
 887:../freertos/queue.c **** 					return errQUEUE_FULL;
 1033              		.loc 1 887 39 view .LVU288
 888:../freertos/queue.c **** 				}
 1034              		.loc 1 888 6 view .LVU289
 1035              	.L75:
 950:../freertos/queue.c **** 			return errQUEUE_FULL;
 1036              		.loc 1 950 37 view .LVU290
 951:../freertos/queue.c **** 		}
 1037              		.loc 1 951 4 view .LVU291
 1038              	@ ../freertos/queue.c:951: 			return errQUEUE_FULL;
 951:../freertos/queue.c **** 		}
 1039              		.loc 1 951 11 is_stmt 0 view .LVU292
 1040 022c 0020     		movs	r0, #0	@ <retval>,
 1041 022e F6E7     		b	.L54		@
 1042              	.LVL75:
 1043              	.L63:
 890:../freertos/queue.c **** 				{
 1044              		.loc 1 890 10 is_stmt 1 view .LVU293
 1045              	@ ../freertos/queue.c:890: 				else if( xEntryTimeSet == pdFALSE )
 890:../freertos/queue.c **** 				{
 1046              		.loc 1 890 12 is_stmt 0 view .LVU294
 1047 0230 B8F1000F 		cmp	r8, #0	@ xEntryTimeSet
 1048 0234 02D1     		bne	.L64	@
 894:../freertos/queue.c **** 					xEntryTimeSet = pdTRUE;
 1049              		.loc 1 894 6 is_stmt 1 view .LVU295
 1050 0236 02A8     		add	r0, sp, #8	@ tmp170,,
 1051 0238 FFF7FEFF 		bl	vTaskInternalSetTimeOutState		@
 1052              	.LVL76:
 895:../freertos/queue.c **** 				}
 1053              		.loc 1 895 6 view .LVU296
 1054              	.L64:
 900:../freertos/queue.c **** 				}
 1055              		.loc 1 900 30 view .LVU297
ARM GAS  /tmp/ccjtHtwZ.s 			page 65


 904:../freertos/queue.c **** 
 1056              		.loc 1 904 3 view .LVU298
 1057 023c FFF7FEFF 		bl	vPortExitCritical		@
 1058              	.LVL77:
 909:../freertos/queue.c **** 		prvLockQueue( pxQueue );
 1059              		.loc 1 909 3 view .LVU299
 1060 0240 FFF7FEFF 		bl	vTaskSuspendAll		@
 1061              	.LVL78:
 910:../freertos/queue.c **** 
 1062              		.loc 1 910 3 view .LVU300
 1063 0244 FFF7FEFF 		bl	vPortEnterCritical		@
 1064              	.LVL79:
 910:../freertos/queue.c **** 
 1065              		.loc 1 910 3 view .LVU301
 1066 0248 94F84430 		ldrb	r3, [r4, #68]	@ zero_extendqisi2	@ MEM[(struct Queue_t *)xQueue_24(D)].cRxLock, MEM[(struct Q
 1067 024c FF2B     		cmp	r3, #255	@ MEM[(struct Queue_t *)xQueue_24(D)].cRxLock,
 910:../freertos/queue.c **** 
 1068              		.loc 1 910 3 view .LVU302
 1069 024e 08BF     		it	eq
 1070 0250 84F84490 		strbeq	r9, [r4, #68]	@ tmp160, MEM[(struct Queue_t *)xQueue_24(D)].cRxLock
 910:../freertos/queue.c **** 
 1071              		.loc 1 910 3 view .LVU303
 1072 0254 94F84530 		ldrb	r3, [r4, #69]	@ zero_extendqisi2	@ MEM[(struct Queue_t *)xQueue_24(D)].cTxLock, MEM[(struct Q
 1073 0258 FF2B     		cmp	r3, #255	@ MEM[(struct Queue_t *)xQueue_24(D)].cTxLock,
 910:../freertos/queue.c **** 
 1074              		.loc 1 910 3 view .LVU304
 1075 025a 08BF     		it	eq
 1076 025c 84F84590 		strbeq	r9, [r4, #69]	@ tmp160, MEM[(struct Queue_t *)xQueue_24(D)].cTxLock
 910:../freertos/queue.c **** 
 1077              		.loc 1 910 3 view .LVU305
 1078 0260 FFF7FEFF 		bl	vPortExitCritical		@
 1079              	.LVL80:
 913:../freertos/queue.c **** 		{
 1080              		.loc 1 913 3 view .LVU306
 1081              	@ ../freertos/queue.c:913: 		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 913:../freertos/queue.c **** 		{
 1082              		.loc 1 913 7 is_stmt 0 view .LVU307
 1083 0264 01A9     		add	r1, sp, #4	@ tmp171,,
 1084 0266 02A8     		add	r0, sp, #8	@ tmp172,,
 1085 0268 FFF7FEFF 		bl	xTaskCheckForTimeOut		@
 1086              	.LVL81:
 1087              	@ ../freertos/queue.c:913: 		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 913:../freertos/queue.c **** 		{
 1088              		.loc 1 913 5 view .LVU308
 1089 026c 40BB     		cbnz	r0, .L67	@ tmp167,
 915:../freertos/queue.c **** 			{
 1090              		.loc 1 915 4 is_stmt 1 view .LVU309
 1091              	.LVL82:
 1092              	.LBB37:
 1093              	.LBI37:
2306:../freertos/queue.c **** /*-----------------------------------------------------------*/
2307:../freertos/queue.c **** 
2308:../freertos/queue.c **** BaseType_t xQueueIsQueueEmptyFromISR( const QueueHandle_t xQueue )
2309:../freertos/queue.c **** {
2310:../freertos/queue.c **** BaseType_t xReturn;
2311:../freertos/queue.c **** Queue_t * const pxQueue = xQueue;
2312:../freertos/queue.c **** 
ARM GAS  /tmp/ccjtHtwZ.s 			page 66


2313:../freertos/queue.c **** 	configASSERT( pxQueue );
2314:../freertos/queue.c **** 	if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
2315:../freertos/queue.c **** 	{
2316:../freertos/queue.c **** 		xReturn = pdTRUE;
2317:../freertos/queue.c **** 	}
2318:../freertos/queue.c **** 	else
2319:../freertos/queue.c **** 	{
2320:../freertos/queue.c **** 		xReturn = pdFALSE;
2321:../freertos/queue.c **** 	}
2322:../freertos/queue.c **** 
2323:../freertos/queue.c **** 	return xReturn;
2324:../freertos/queue.c **** } /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
2325:../freertos/queue.c **** /*-----------------------------------------------------------*/
2326:../freertos/queue.c **** 
2327:../freertos/queue.c **** static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
 1094              		.loc 1 2327 19 view .LVU310
 1095              	.LBB38:
2328:../freertos/queue.c **** {
2329:../freertos/queue.c **** BaseType_t xReturn;
 1096              		.loc 1 2329 1 view .LVU311
2330:../freertos/queue.c **** 
2331:../freertos/queue.c **** 	taskENTER_CRITICAL();
 1097              		.loc 1 2331 2 view .LVU312
 1098 026e FFF7FEFF 		bl	vPortEnterCritical		@
 1099              	.LVL83:
2332:../freertos/queue.c **** 	{
2333:../freertos/queue.c **** 		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 1100              		.loc 1 2333 3 view .LVU313
 1101              	@ ../freertos/queue.c:2333: 		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 1102              		.loc 1 2333 14 is_stmt 0 view .LVU314
 1103 0272 A26B     		ldr	r2, [r4, #56]	@ _61, MEM[(const struct Queue_t *)xQueue_24(D)].uxMessagesWaiting
 1104              	@ ../freertos/queue.c:2333: 		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 1105              		.loc 1 2333 5 view .LVU315
 1106 0274 E36B     		ldr	r3, [r4, #60]	@ MEM[(const struct Queue_t *)xQueue_24(D)].uxLength, MEM[(const struct Queue_t 
 1107 0276 9A42     		cmp	r2, r3	@ _61, MEM[(const struct Queue_t *)xQueue_24(D)].uxLength
 1108 0278 0FD1     		bne	.L68		@,
 1109              	.LVL84:
2334:../freertos/queue.c **** 		{
2335:../freertos/queue.c **** 			xReturn = pdTRUE;
2336:../freertos/queue.c **** 		}
2337:../freertos/queue.c **** 		else
2338:../freertos/queue.c **** 		{
2339:../freertos/queue.c **** 			xReturn = pdFALSE;
2340:../freertos/queue.c **** 		}
2341:../freertos/queue.c **** 	}
2342:../freertos/queue.c **** 	taskEXIT_CRITICAL();
 1110              		.loc 1 2342 2 is_stmt 1 view .LVU316
 1111 027a FFF7FEFF 		bl	vPortExitCritical		@
 1112              	.LVL85:
2343:../freertos/queue.c **** 
2344:../freertos/queue.c **** 	return xReturn;
 1113              		.loc 1 2344 2 view .LVU317
 1114              		.loc 1 2344 2 is_stmt 0 view .LVU318
 1115              	.LBE38:
 1116              	.LBE37:
 917:../freertos/queue.c **** 				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 1117              		.loc 1 917 43 is_stmt 1 view .LVU319
ARM GAS  /tmp/ccjtHtwZ.s 			page 67


 918:../freertos/queue.c **** 
 1118              		.loc 1 918 5 view .LVU320
 1119 027e 0199     		ldr	r1, [sp, #4]	@, xTicksToWait
 1120 0280 04F11000 		add	r0, r4, #16	@, xQueue,
 1121 0284 FFF7FEFF 		bl	vTaskPlaceOnEventList		@
 1122              	.LVL86:
 925:../freertos/queue.c **** 
 1123              		.loc 1 925 5 view .LVU321
 1124 0288 2046     		mov	r0, r4	@, xQueue
 1125 028a FFF70DFF 		bl	prvUnlockQueue		@
 1126              	.LVL87:
 932:../freertos/queue.c **** 				{
 1127              		.loc 1 932 5 view .LVU322
 1128              	@ ../freertos/queue.c:932: 				if( xTaskResumeAll() == pdFALSE )
 932:../freertos/queue.c **** 				{
 1129              		.loc 1 932 9 is_stmt 0 view .LVU323
 1130 028e FFF7FEFF 		bl	xTaskResumeAll		@
 1131              	.LVL88:
 1132              	@ ../freertos/queue.c:932: 				if( xTaskResumeAll() == pdFALSE )
 932:../freertos/queue.c **** 				{
 1133              		.loc 1 932 7 view .LVU324
 1134 0292 50B1     		cbz	r0, .L69	@ tmp168,
 1135              	.L70:
 1136              	@ ../freertos/queue.c:748: {
 748:../freertos/queue.c **** BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 1137              		.loc 1 748 1 view .LVU325
 1138 0294 4FF00108 		mov	r8, #1	@ xEntryTimeSet,
 1139 0298 A0E7     		b	.L55		@
 1140              	.LVL89:
 1141              	.L68:
 1142              	.LBB40:
 1143              	.LBB39:
2339:../freertos/queue.c **** 		}
 1144              		.loc 1 2339 4 is_stmt 1 view .LVU326
2342:../freertos/queue.c **** 
 1145              		.loc 1 2342 2 view .LVU327
 1146 029a FFF7FEFF 		bl	vPortExitCritical		@
 1147              	.LVL90:
 1148              		.loc 1 2344 2 view .LVU328
 1149              		.loc 1 2344 2 is_stmt 0 view .LVU329
 1150              	.LBE39:
 1151              	.LBE40:
 940:../freertos/queue.c **** 				( void ) xTaskResumeAll();
 1152              		.loc 1 940 5 is_stmt 1 view .LVU330
 1153 029e 2046     		mov	r0, r4	@, xQueue
 1154 02a0 FFF702FF 		bl	prvUnlockQueue		@
 1155              	.LVL91:
 941:../freertos/queue.c **** 			}
 1156              		.loc 1 941 5 view .LVU331
 1157              	@ ../freertos/queue.c:941: 				( void ) xTaskResumeAll();
 941:../freertos/queue.c **** 			}
 1158              		.loc 1 941 14 is_stmt 0 view .LVU332
 1159 02a4 FFF7FEFF 		bl	xTaskResumeAll		@
 1160              	.LVL92:
 1161 02a8 F4E7     		b	.L70		@
 1162              	.L69:
 934:../freertos/queue.c **** 				}
ARM GAS  /tmp/ccjtHtwZ.s 			page 68


 1163              		.loc 1 934 6 is_stmt 1 view .LVU333
 1164 02aa 4FF0E023 		mov	r3, #-536813568	@ tmp155,
 1165 02ae 4FF08052 		mov	r2, #268435456	@ tmp156,
 1166 02b2 C3F8042D 		str	r2, [r3, #3332]	@ tmp156, MEM[(volatile uint32_t *)3758157060B]
 934:../freertos/queue.c **** 				}
 1167              		.loc 1 934 6 view .LVU334
 1168              		.syntax unified
 1169              	@ 934 "../freertos/queue.c" 1
 1170 02b6 BFF34F8F 		dsb	
 1171              	@ 0 "" 2
 934:../freertos/queue.c **** 				}
 1172              		.loc 1 934 6 view .LVU335
 1173              	@ 934 "../freertos/queue.c" 1
 1174 02ba BFF36F8F 		isb
 1175              	@ 0 "" 2
 1176              		.thumb
 1177              		.syntax unified
 1178 02be E9E7     		b	.L70		@
 1179              	.L67:
 947:../freertos/queue.c **** 			( void ) xTaskResumeAll();
 1180              		.loc 1 947 4 view .LVU336
 1181 02c0 2046     		mov	r0, r4	@, xQueue
 1182 02c2 FFF7F1FE 		bl	prvUnlockQueue		@
 1183              	.LVL93:
 948:../freertos/queue.c **** 
 1184              		.loc 1 948 4 view .LVU337
 1185              	@ ../freertos/queue.c:948: 			( void ) xTaskResumeAll();
 948:../freertos/queue.c **** 
 1186              		.loc 1 948 13 is_stmt 0 view .LVU338
 1187 02c6 FFF7FEFF 		bl	xTaskResumeAll		@
 1188              	.LVL94:
 1189 02ca AFE7     		b	.L75		@
 1190              		.cfi_endproc
 1191              	.LFE13:
 1192              		.size	xQueueGenericSend, .-xQueueGenericSend
 1193              		.align	1
 1194              		.global	xQueueCreateMutex
 1195              		.syntax unified
 1196              		.thumb
 1197              		.thumb_func
 1198              		.type	xQueueCreateMutex, %function
 1199              	xQueueCreateMutex:
 1200              	.LVL95:
 1201              	.LFB9:
 504:../freertos/queue.c **** 	QueueHandle_t xNewQueue;
 1202              		.loc 1 504 2 is_stmt 1 view -0
 1203              		.cfi_startproc
 1204              		@ args = 0, pretend = 0, frame = 0
 1205              		@ frame_needed = 0, uses_anonymous_args = 0
 505:../freertos/queue.c **** 	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 1206              		.loc 1 505 2 view .LVU340
 506:../freertos/queue.c **** 
 1207              		.loc 1 506 2 view .LVU341
 508:../freertos/queue.c **** 		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 1208              		.loc 1 508 3 view .LVU342
 1209              	@ ../freertos/queue.c:504: 	{
 504:../freertos/queue.c **** 	QueueHandle_t xNewQueue;
ARM GAS  /tmp/ccjtHtwZ.s 			page 69


 1210              		.loc 1 504 2 is_stmt 0 view .LVU343
 1211 02cc 0246     		mov	r2, r0	@ tmp119, ucQueueType
 1212 02ce 10B5     		push	{r4, lr}	@
 1213              	.LCFI16:
 1214              		.cfi_def_cfa_offset 8
 1215              		.cfi_offset 4, -8
 1216              		.cfi_offset 14, -4
 1217              	@ ../freertos/queue.c:508: 		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueTy
 508:../freertos/queue.c **** 		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 1218              		.loc 1 508 15 view .LVU344
 1219 02d0 0021     		movs	r1, #0	@,
 1220 02d2 0120     		movs	r0, #1	@,
 1221              	.LVL96:
 508:../freertos/queue.c **** 		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 1222              		.loc 1 508 15 view .LVU345
 1223 02d4 FFF7FEFF 		bl	xQueueGenericCreate		@
 1224              	.LVL97:
 509:../freertos/queue.c **** 
 1225              		.loc 1 509 3 is_stmt 1 view .LVU346
 1226              	.LBB43:
 1227              	.LBI43:
 473:../freertos/queue.c **** 	{
 1228              		.loc 1 473 14 view .LVU347
 1229              	.LBB44:
 475:../freertos/queue.c **** 		{
 1230              		.loc 1 475 3 view .LVU348
 1231              	@ ../freertos/queue.c:475: 		if( pxNewQueue != NULL )
 475:../freertos/queue.c **** 		{
 1232              		.loc 1 475 5 is_stmt 0 view .LVU349
 1233 02d8 0446     		mov	r4, r0	@ <retval>, tmp120
 1234 02da 38B1     		cbz	r0, .L77	@ <retval>,
 481:../freertos/queue.c **** 			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 1235              		.loc 1 481 4 is_stmt 1 view .LVU350
 1236              	@ ../freertos/queue.c:481: 			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 481:../freertos/queue.c **** 			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 1237              		.loc 1 481 42 is_stmt 0 view .LVU351
 1238 02dc 0023     		movs	r3, #0	@ tmp115,
 1239              	@ ../freertos/queue.c:490: 			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queu
 490:../freertos/queue.c **** 		}
 1240              		.loc 1 490 13 view .LVU352
 1241 02de 1A46     		mov	r2, r3	@,
 1242 02e0 1946     		mov	r1, r3	@,
 1243              	@ ../freertos/queue.c:481: 			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 481:../freertos/queue.c **** 			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 1244              		.loc 1 481 42 view .LVU353
 1245 02e2 8360     		str	r3, [r0, #8]	@ tmp115, MEM[(struct Queue_t *)xNewQueue_4].u.xSemaphore.xMutexHolder
 482:../freertos/queue.c **** 
 1246              		.loc 1 482 4 is_stmt 1 view .LVU354
 1247              	@ ../freertos/queue.c:482: 			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 482:../freertos/queue.c **** 
 1248              		.loc 1 482 28 is_stmt 0 view .LVU355
 1249 02e4 0360     		str	r3, [r0]	@ tmp115, MEM[(struct Queue_t *)xNewQueue_4].pcHead
 485:../freertos/queue.c **** 
 1250              		.loc 1 485 4 is_stmt 1 view .LVU356
 1251              	@ ../freertos/queue.c:485: 			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 485:../freertos/queue.c **** 
 1252              		.loc 1 485 50 is_stmt 0 view .LVU357
ARM GAS  /tmp/ccjtHtwZ.s 			page 70


 1253 02e6 C360     		str	r3, [r0, #12]	@ tmp115, MEM[(struct Queue_t *)xNewQueue_4].u.xSemaphore.uxRecursiveCallCount
 487:../freertos/queue.c **** 
 1254              		.loc 1 487 35 is_stmt 1 view .LVU358
 490:../freertos/queue.c **** 		}
 1255              		.loc 1 490 4 view .LVU359
 1256              	@ ../freertos/queue.c:490: 			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queu
 490:../freertos/queue.c **** 		}
 1257              		.loc 1 490 13 is_stmt 0 view .LVU360
 1258 02e8 FFF7FEFF 		bl	xQueueGenericSend		@
 1259              	.LVL98:
 494:../freertos/queue.c **** 		}
 1260              		.loc 1 494 30 is_stmt 1 view .LVU361
 494:../freertos/queue.c **** 		}
 1261              		.loc 1 494 30 is_stmt 0 view .LVU362
 1262              	.LBE44:
 1263              	.LBE43:
 511:../freertos/queue.c **** 	}
 1264              		.loc 1 511 3 is_stmt 1 view .LVU363
 1265              	.L77:
 1266              	@ ../freertos/queue.c:512: 	}
 512:../freertos/queue.c **** 
 1267              		.loc 1 512 2 is_stmt 0 view .LVU364
 1268 02ec 2046     		mov	r0, r4	@, <retval>
 1269 02ee 10BD     		pop	{r4, pc}	@
 512:../freertos/queue.c **** 
 1270              		.loc 1 512 2 view .LVU365
 1271              		.cfi_endproc
 1272              	.LFE9:
 1273              		.size	xQueueCreateMutex, .-xQueueCreateMutex
 1274              		.align	1
 1275              		.global	xQueueGiveMutexRecursive
 1276              		.syntax unified
 1277              		.thumb
 1278              		.thumb_func
 1279              		.type	xQueueGiveMutexRecursive, %function
 1280              	xQueueGiveMutexRecursive:
 1281              	.LVL99:
 1282              	.LFB10:
 597:../freertos/queue.c **** 	BaseType_t xReturn;
 1283              		.loc 1 597 2 is_stmt 1 view -0
 1284              		.cfi_startproc
 1285              		@ args = 0, pretend = 0, frame = 0
 1286              		@ frame_needed = 0, uses_anonymous_args = 0
 598:../freertos/queue.c **** 	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 1287              		.loc 1 598 2 view .LVU367
 599:../freertos/queue.c **** 
 1288              		.loc 1 599 2 view .LVU368
 601:../freertos/queue.c **** 
 1289              		.loc 1 601 26 view .LVU369
 609:../freertos/queue.c **** 		{
 1290              		.loc 1 609 3 view .LVU370
 1291              	@ ../freertos/queue.c:597: 	{
 597:../freertos/queue.c **** 	BaseType_t xReturn;
 1292              		.loc 1 597 2 is_stmt 0 view .LVU371
 1293 02f0 38B5     		push	{r3, r4, r5, lr}	@
 1294              	.LCFI17:
 1295              		.cfi_def_cfa_offset 16
ARM GAS  /tmp/ccjtHtwZ.s 			page 71


 1296              		.cfi_offset 3, -16
 1297              		.cfi_offset 4, -12
 1298              		.cfi_offset 5, -8
 1299              		.cfi_offset 14, -4
 1300              	@ ../freertos/queue.c:609: 		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() 
 609:../freertos/queue.c **** 		{
 1301              		.loc 1 609 28 view .LVU372
 1302 02f2 8568     		ldr	r5, [r0, #8]	@ _1, MEM[(struct Queue_t *)xMutex_7(D)].u.xSemaphore.xMutexHolder
 1303              	@ ../freertos/queue.c:597: 	{
 597:../freertos/queue.c **** 	BaseType_t xReturn;
 1304              		.loc 1 597 2 view .LVU373
 1305 02f4 0446     		mov	r4, r0	@ xMutex, tmp121
 1306              	@ ../freertos/queue.c:609: 		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() 
 609:../freertos/queue.c **** 		{
 1307              		.loc 1 609 45 view .LVU374
 1308 02f6 FFF7FEFF 		bl	xTaskGetCurrentTaskHandle		@
 1309              	.LVL100:
 1310              	@ ../freertos/queue.c:609: 		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() 
 609:../freertos/queue.c **** 		{
 1311              		.loc 1 609 5 view .LVU375
 1312 02fa 8542     		cmp	r5, r0	@ _1, tmp122
 1313 02fc 0AD1     		bne	.L84		@,
 611:../freertos/queue.c **** 
 1314              		.loc 1 611 40 is_stmt 1 view .LVU376
 618:../freertos/queue.c **** 
 1315              		.loc 1 618 4 view .LVU377
 1316              	@ ../freertos/queue.c:618: 			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 618:../freertos/queue.c **** 
 1317              		.loc 1 618 50 is_stmt 0 view .LVU378
 1318 02fe E368     		ldr	r3, [r4, #12]	@ MEM[(struct Queue_t *)xMutex_7(D)].u.xSemaphore.uxRecursiveCallCount, MEM[(str
 1319 0300 013B     		subs	r3, r3, #1	@ _4, MEM[(struct Queue_t *)xMutex_7(D)].u.xSemaphore.uxRecursiveCallCount,
 1320 0302 E360     		str	r3, [r4, #12]	@ _4, MEM[(struct Queue_t *)xMutex_7(D)].u.xSemaphore.uxRecursiveCallCount
 621:../freertos/queue.c **** 			{
 1321              		.loc 1 621 4 is_stmt 1 view .LVU379
 1322              	@ ../freertos/queue.c:621: 			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 621:../freertos/queue.c **** 			{
 1323              		.loc 1 621 6 is_stmt 0 view .LVU380
 1324 0304 23B9     		cbnz	r3, .L85	@ _4,
 625:../freertos/queue.c **** 			}
 1325              		.loc 1 625 5 is_stmt 1 view .LVU381
 1326              	@ ../freertos/queue.c:625: 				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIM
 625:../freertos/queue.c **** 			}
 1327              		.loc 1 625 14 is_stmt 0 view .LVU382
 1328 0306 1A46     		mov	r2, r3	@,
 1329 0308 1946     		mov	r1, r3	@,
 1330 030a 2046     		mov	r0, r4	@, xMutex
 1331 030c FFF7FEFF 		bl	xQueueGenericSend		@
 1332              	.LVL101:
 1333              	.L85:
 1334              	@ ../freertos/queue.c:632: 			xReturn = pdPASS;
 632:../freertos/queue.c **** 		}
 1335              		.loc 1 632 12 view .LVU383
 1336 0310 0120     		movs	r0, #1	@ <retval>,
 1337              	.LVL102:
 640:../freertos/queue.c **** 		}
 1338              		.loc 1 640 47 is_stmt 1 view .LVU384
 643:../freertos/queue.c **** 	}
ARM GAS  /tmp/ccjtHtwZ.s 			page 72


 1339              		.loc 1 643 3 view .LVU385
 1340              	@ ../freertos/queue.c:643: 		return xReturn;
 643:../freertos/queue.c **** 	}
 1341              		.loc 1 643 10 is_stmt 0 view .LVU386
 1342 0312 00E0     		b	.L82		@
 1343              	.LVL103:
 1344              	.L84:
 1345              	@ ../freertos/queue.c:638: 			xReturn = pdFAIL;
 638:../freertos/queue.c **** 
 1346              		.loc 1 638 12 view .LVU387
 1347 0314 0020     		movs	r0, #0	@ <retval>,
 1348              	.L82:
 1349              	@ ../freertos/queue.c:644: 	}
 644:../freertos/queue.c **** 
 1350              		.loc 1 644 2 view .LVU388
 1351 0316 38BD     		pop	{r3, r4, r5, pc}	@
 644:../freertos/queue.c **** 
 1352              		.loc 1 644 2 view .LVU389
 1353              		.cfi_endproc
 1354              	.LFE10:
 1355              		.size	xQueueGiveMutexRecursive, .-xQueueGiveMutexRecursive
 1356              		.align	1
 1357              		.global	xQueueGenericSendFromISR
 1358              		.syntax unified
 1359              		.thumb
 1360              		.thumb_func
 1361              		.type	xQueueGenericSendFromISR, %function
 1362              	xQueueGenericSendFromISR:
 1363              	.LVL104:
 1364              	.LFB14:
 958:../freertos/queue.c **** BaseType_t xReturn;
 1365              		.loc 1 958 1 is_stmt 1 view -0
 1366              		.cfi_startproc
 1367              		@ args = 0, pretend = 0, frame = 0
 1368              		@ frame_needed = 0, uses_anonymous_args = 0
 959:../freertos/queue.c **** UBaseType_t uxSavedInterruptStatus;
 1369              		.loc 1 959 1 view .LVU391
 960:../freertos/queue.c **** Queue_t * const pxQueue = xQueue;
 1370              		.loc 1 960 1 view .LVU392
 961:../freertos/queue.c **** 
 1371              		.loc 1 961 1 view .LVU393
 963:../freertos/queue.c **** 	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 1372              		.loc 1 963 25 view .LVU394
 964:../freertos/queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 1373              		.loc 1 964 97 view .LVU395
 965:../freertos/queue.c **** 
 1374              		.loc 1 965 88 view .LVU396
 981:../freertos/queue.c **** 
 1375              		.loc 1 981 44 view .LVU397
 988:../freertos/queue.c **** 	{
 1376              		.loc 1 988 2 view .LVU398
 1377              	.LBB45:
 1378              	.LBI45:
 1379              		.file 2 "../freertos/portable/GCC/ARM_CM3/portmacro.h"
   1:../freertos/portable/GCC/ARM_CM3/portmacro.h **** /*
   2:../freertos/portable/GCC/ARM_CM3/portmacro.h ****  * FreeRTOS Kernel V10.2.1
   3:../freertos/portable/GCC/ARM_CM3/portmacro.h ****  * Copyright (C) 2019 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
ARM GAS  /tmp/ccjtHtwZ.s 			page 73


   4:../freertos/portable/GCC/ARM_CM3/portmacro.h ****  *
   5:../freertos/portable/GCC/ARM_CM3/portmacro.h ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:../freertos/portable/GCC/ARM_CM3/portmacro.h ****  * this software and associated documentation files (the "Software"), to deal in
   7:../freertos/portable/GCC/ARM_CM3/portmacro.h ****  * the Software without restriction, including without limitation the rights to
   8:../freertos/portable/GCC/ARM_CM3/portmacro.h ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:../freertos/portable/GCC/ARM_CM3/portmacro.h ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:../freertos/portable/GCC/ARM_CM3/portmacro.h ****  * subject to the following conditions:
  11:../freertos/portable/GCC/ARM_CM3/portmacro.h ****  *
  12:../freertos/portable/GCC/ARM_CM3/portmacro.h ****  * The above copyright notice and this permission notice shall be included in all
  13:../freertos/portable/GCC/ARM_CM3/portmacro.h ****  * copies or substantial portions of the Software.
  14:../freertos/portable/GCC/ARM_CM3/portmacro.h ****  *
  15:../freertos/portable/GCC/ARM_CM3/portmacro.h ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:../freertos/portable/GCC/ARM_CM3/portmacro.h ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:../freertos/portable/GCC/ARM_CM3/portmacro.h ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:../freertos/portable/GCC/ARM_CM3/portmacro.h ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:../freertos/portable/GCC/ARM_CM3/portmacro.h ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:../freertos/portable/GCC/ARM_CM3/portmacro.h ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:../freertos/portable/GCC/ARM_CM3/portmacro.h ****  *
  22:../freertos/portable/GCC/ARM_CM3/portmacro.h ****  * http://www.FreeRTOS.org
  23:../freertos/portable/GCC/ARM_CM3/portmacro.h ****  * http://aws.amazon.com/freertos
  24:../freertos/portable/GCC/ARM_CM3/portmacro.h ****  *
  25:../freertos/portable/GCC/ARM_CM3/portmacro.h ****  * 1 tab == 4 spaces!
  26:../freertos/portable/GCC/ARM_CM3/portmacro.h ****  */
  27:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 
  28:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 
  29:../freertos/portable/GCC/ARM_CM3/portmacro.h **** #ifndef PORTMACRO_H
  30:../freertos/portable/GCC/ARM_CM3/portmacro.h **** #define PORTMACRO_H
  31:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 
  32:../freertos/portable/GCC/ARM_CM3/portmacro.h **** #ifdef __cplusplus
  33:../freertos/portable/GCC/ARM_CM3/portmacro.h **** extern "C" {
  34:../freertos/portable/GCC/ARM_CM3/portmacro.h **** #endif
  35:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 
  36:../freertos/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------
  37:../freertos/portable/GCC/ARM_CM3/portmacro.h ****  * Port specific definitions.
  38:../freertos/portable/GCC/ARM_CM3/portmacro.h ****  *
  39:../freertos/portable/GCC/ARM_CM3/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  40:../freertos/portable/GCC/ARM_CM3/portmacro.h ****  * given hardware and compiler.
  41:../freertos/portable/GCC/ARM_CM3/portmacro.h ****  *
  42:../freertos/portable/GCC/ARM_CM3/portmacro.h ****  * These settings should not be altered.
  43:../freertos/portable/GCC/ARM_CM3/portmacro.h ****  *-----------------------------------------------------------
  44:../freertos/portable/GCC/ARM_CM3/portmacro.h ****  */
  45:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 
  46:../freertos/portable/GCC/ARM_CM3/portmacro.h **** /* Type definitions. */
  47:../freertos/portable/GCC/ARM_CM3/portmacro.h **** #define portCHAR		char
  48:../freertos/portable/GCC/ARM_CM3/portmacro.h **** #define portFLOAT		float
  49:../freertos/portable/GCC/ARM_CM3/portmacro.h **** #define portDOUBLE		double
  50:../freertos/portable/GCC/ARM_CM3/portmacro.h **** #define portLONG		long
  51:../freertos/portable/GCC/ARM_CM3/portmacro.h **** #define portSHORT		short
  52:../freertos/portable/GCC/ARM_CM3/portmacro.h **** #define portSTACK_TYPE	uint32_t
  53:../freertos/portable/GCC/ARM_CM3/portmacro.h **** #define portBASE_TYPE	long
  54:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 
  55:../freertos/portable/GCC/ARM_CM3/portmacro.h **** typedef portSTACK_TYPE StackType_t;
  56:../freertos/portable/GCC/ARM_CM3/portmacro.h **** typedef long BaseType_t;
  57:../freertos/portable/GCC/ARM_CM3/portmacro.h **** typedef unsigned long UBaseType_t;
  58:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 
  59:../freertos/portable/GCC/ARM_CM3/portmacro.h **** #if( configUSE_16_BIT_TICKS == 1 )
  60:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	typedef uint16_t TickType_t;
ARM GAS  /tmp/ccjtHtwZ.s 			page 74


  61:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffff
  62:../freertos/portable/GCC/ARM_CM3/portmacro.h **** #else
  63:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	typedef uint32_t TickType_t;
  64:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffffffffUL
  65:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 
  66:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	/* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
  67:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	not need to be guarded with a critical section. */
  68:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	#define portTICK_TYPE_IS_ATOMIC 1
  69:../freertos/portable/GCC/ARM_CM3/portmacro.h **** #endif
  70:../freertos/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
  71:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 
  72:../freertos/portable/GCC/ARM_CM3/portmacro.h **** /* Architecture specifics. */
  73:../freertos/portable/GCC/ARM_CM3/portmacro.h **** #define portSTACK_GROWTH			( -1 )
  74:../freertos/portable/GCC/ARM_CM3/portmacro.h **** #define portTICK_PERIOD_MS			( ( TickType_t ) 1000 / configTICK_RATE_HZ )
  75:../freertos/portable/GCC/ARM_CM3/portmacro.h **** #define portBYTE_ALIGNMENT			8
  76:../freertos/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
  77:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 
  78:../freertos/portable/GCC/ARM_CM3/portmacro.h **** /* Scheduler utilities. */
  79:../freertos/portable/GCC/ARM_CM3/portmacro.h **** #define portYIELD() 															\
  80:../freertos/portable/GCC/ARM_CM3/portmacro.h **** {																				\
  81:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	/* Set a PendSV to request a context switch. */								\
  82:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;								\
  83:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 																				\
  84:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	/* Barriers are normally not required but do ensure the code is completely	\
  85:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	within the specified behaviour for the architecture. */						\
  86:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	__asm volatile( "dsb" ::: "memory" );										\
  87:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	__asm volatile( "isb" );													\
  88:../freertos/portable/GCC/ARM_CM3/portmacro.h **** }
  89:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 
  90:../freertos/portable/GCC/ARM_CM3/portmacro.h **** #define portNVIC_INT_CTRL_REG		( * ( ( volatile uint32_t * ) 0xe000ed04 ) )
  91:../freertos/portable/GCC/ARM_CM3/portmacro.h **** #define portNVIC_PENDSVSET_BIT		( 1UL << 28UL )
  92:../freertos/portable/GCC/ARM_CM3/portmacro.h **** #define portEND_SWITCHING_ISR( xSwitchRequired ) if( xSwitchRequired != pdFALSE ) portYIELD()
  93:../freertos/portable/GCC/ARM_CM3/portmacro.h **** #define portYIELD_FROM_ISR( x ) portEND_SWITCHING_ISR( x )
  94:../freertos/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
  95:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 
  96:../freertos/portable/GCC/ARM_CM3/portmacro.h **** /* Critical section management. */
  97:../freertos/portable/GCC/ARM_CM3/portmacro.h **** extern void vPortEnterCritical( void );
  98:../freertos/portable/GCC/ARM_CM3/portmacro.h **** extern void vPortExitCritical( void );
  99:../freertos/portable/GCC/ARM_CM3/portmacro.h **** #define portSET_INTERRUPT_MASK_FROM_ISR()		ulPortRaiseBASEPRI()
 100:../freertos/portable/GCC/ARM_CM3/portmacro.h **** #define portCLEAR_INTERRUPT_MASK_FROM_ISR(x)	vPortSetBASEPRI(x)
 101:../freertos/portable/GCC/ARM_CM3/portmacro.h **** #define portDISABLE_INTERRUPTS()				vPortRaiseBASEPRI()
 102:../freertos/portable/GCC/ARM_CM3/portmacro.h **** #define portENABLE_INTERRUPTS()					vPortSetBASEPRI(0)
 103:../freertos/portable/GCC/ARM_CM3/portmacro.h **** #define portENTER_CRITICAL()					vPortEnterCritical()
 104:../freertos/portable/GCC/ARM_CM3/portmacro.h **** #define portEXIT_CRITICAL()						vPortExitCritical()
 105:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 
 106:../freertos/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 107:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 
 108:../freertos/portable/GCC/ARM_CM3/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 109:../freertos/portable/GCC/ARM_CM3/portmacro.h **** not necessary for to use this port.  They are defined so the common demo files
 110:../freertos/portable/GCC/ARM_CM3/portmacro.h **** (which build with all the ports) will build. */
 111:../freertos/portable/GCC/ARM_CM3/portmacro.h **** #define portTASK_FUNCTION_PROTO( vFunction, pvParameters ) void vFunction( void *pvParameters )
 112:../freertos/portable/GCC/ARM_CM3/portmacro.h **** #define portTASK_FUNCTION( vFunction, pvParameters ) void vFunction( void *pvParameters )
 113:../freertos/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 114:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 
 115:../freertos/portable/GCC/ARM_CM3/portmacro.h **** /* Tickless idle/low power functionality. */
 116:../freertos/portable/GCC/ARM_CM3/portmacro.h **** #ifndef portSUPPRESS_TICKS_AND_SLEEP
 117:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
ARM GAS  /tmp/ccjtHtwZ.s 			page 75


 118:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	#define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime ) vPortSuppressTicksAndSleep( xExpectedIdl
 119:../freertos/portable/GCC/ARM_CM3/portmacro.h **** #endif
 120:../freertos/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 121:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 
 122:../freertos/portable/GCC/ARM_CM3/portmacro.h **** /* Architecture specific optimisations. */
 123:../freertos/portable/GCC/ARM_CM3/portmacro.h **** #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 124:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	#define configUSE_PORT_OPTIMISED_TASK_SELECTION 1
 125:../freertos/portable/GCC/ARM_CM3/portmacro.h **** #endif
 126:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 
 127:../freertos/portable/GCC/ARM_CM3/portmacro.h **** #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 128:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 
 129:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	/* Generic helper function. */
 130:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitma
 131:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	{
 132:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	uint8_t ucReturn;
 133:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 
 134:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 135:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 		return ucReturn;
 136:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	}
 137:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 
 138:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	/* Check the configuration. */
 139:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	#if( configMAX_PRIORITIES > 32 )
 140:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 		#error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIORITIES is 
 141:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	#endif
 142:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 
 143:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	/* Store/clear the ready priorities in a bit map. */
 144:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	#define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) |= ( 1UL 
 145:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	#define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) &= ~( 1UL 
 146:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 
 147:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	/*-----------------------------------------------------------*/
 148:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 
 149:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	#define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities ) uxTopPriority = ( 31UL - ( ui
 150:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 
 151:../freertos/portable/GCC/ARM_CM3/portmacro.h **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 152:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 
 153:../freertos/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 154:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 
 155:../freertos/portable/GCC/ARM_CM3/portmacro.h **** #ifdef configASSERT
 156:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	void vPortValidateInterruptPriority( void );
 157:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	#define portASSERT_IF_INTERRUPT_PRIORITY_INVALID() 	vPortValidateInterruptPriority()
 158:../freertos/portable/GCC/ARM_CM3/portmacro.h **** #endif
 159:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 
 160:../freertos/portable/GCC/ARM_CM3/portmacro.h **** /* portNOP() is not required by this port. */
 161:../freertos/portable/GCC/ARM_CM3/portmacro.h **** #define portNOP()
 162:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 
 163:../freertos/portable/GCC/ARM_CM3/portmacro.h **** #define portINLINE	__inline
 164:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 
 165:../freertos/portable/GCC/ARM_CM3/portmacro.h **** #ifndef portFORCE_INLINE
 166:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	#define portFORCE_INLINE inline __attribute__(( always_inline))
 167:../freertos/portable/GCC/ARM_CM3/portmacro.h **** #endif
 168:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 
 169:../freertos/portable/GCC/ARM_CM3/portmacro.h **** portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 170:../freertos/portable/GCC/ARM_CM3/portmacro.h **** {
 171:../freertos/portable/GCC/ARM_CM3/portmacro.h **** uint32_t ulCurrentInterrupt;
 172:../freertos/portable/GCC/ARM_CM3/portmacro.h **** BaseType_t xReturn;
 173:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 
 174:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	/* Obtain the number of the currently executing interrupt. */
ARM GAS  /tmp/ccjtHtwZ.s 			page 76


 175:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 176:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 
 177:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	if( ulCurrentInterrupt == 0 )
 178:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	{
 179:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 		xReturn = pdFALSE;
 180:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	}
 181:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	else
 182:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	{
 183:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 		xReturn = pdTRUE;
 184:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	}
 185:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 
 186:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	return xReturn;
 187:../freertos/portable/GCC/ARM_CM3/portmacro.h **** }
 188:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 
 189:../freertos/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 190:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 
 191:../freertos/portable/GCC/ARM_CM3/portmacro.h **** portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 192:../freertos/portable/GCC/ARM_CM3/portmacro.h **** {
 193:../freertos/portable/GCC/ARM_CM3/portmacro.h **** uint32_t ulNewBASEPRI;
 194:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 
 195:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	__asm volatile
 196:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	(
 197:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 		"	mov %0, %1												\n" \
 198:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 		"	msr basepri, %0											\n" \
 199:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 		"	isb														\n" \
 200:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 		"	dsb														\n" \
 201:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
 202:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	);
 203:../freertos/portable/GCC/ARM_CM3/portmacro.h **** }
 204:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 
 205:../freertos/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 206:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 
 207:../freertos/portable/GCC/ARM_CM3/portmacro.h **** portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
 1380              		.loc 2 207 34 view .LVU399
 1381              	.LBB46:
 208:../freertos/portable/GCC/ARM_CM3/portmacro.h **** {
 209:../freertos/portable/GCC/ARM_CM3/portmacro.h **** uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
 1382              		.loc 2 209 1 view .LVU400
 210:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 
 211:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	__asm volatile
 1383              		.loc 2 211 2 view .LVU401
 1384              	.LBE46:
 1385              	.LBE45:
 1386              	@ ../freertos/queue.c:958: {
 958:../freertos/queue.c **** BaseType_t xReturn;
 1387              		.loc 1 958 1 is_stmt 0 view .LVU402
 1388 0318 F8B5     		push	{r3, r4, r5, r6, r7, lr}	@
 1389              	.LCFI18:
 1390              		.cfi_def_cfa_offset 24
 1391              		.cfi_offset 3, -24
 1392              		.cfi_offset 4, -20
 1393              		.cfi_offset 5, -16
 1394              		.cfi_offset 6, -12
 1395              		.cfi_offset 7, -8
 1396              		.cfi_offset 14, -4
 1397              	@ ../freertos/queue.c:958: {
 958:../freertos/queue.c **** BaseType_t xReturn;
ARM GAS  /tmp/ccjtHtwZ.s 			page 77


 1398              		.loc 1 958 1 view .LVU403
 1399 031a 1746     		mov	r7, r2	@ pxHigherPriorityTaskWoken, tmp143
 1400 031c 0446     		mov	r4, r0	@ xQueue, tmp141
 1401 031e 1A46     		mov	r2, r3	@ xCopyPosition, tmp144
 1402              	.LVL105:
 1403              	.LBB48:
 1404              	.LBB47:
 1405              	@ ../freertos/portable/GCC/ARM_CM3/portmacro.h:211: 	__asm volatile
 1406              		.loc 2 211 2 view .LVU404
 1407              		.syntax unified
 1408              	@ 211 "../freertos/portable/GCC/ARM_CM3/portmacro.h" 1
 1409 0320 EFF31186 			mrs r6, basepri												@ ulOriginalBASEPRI
 1410 0324 4FF01003 		mov r3, #16													@ ulNewBASEPRI,
 1411 0328 83F31188 		msr basepri, r3												@ ulNewBASEPRI
 1412 032c BFF36F8F 		isb														
 1413 0330 BFF34F8F 		dsb														
 1414              	
 1415              	@ 0 "" 2
 1416              	.LVL106:
 212:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	(
 213:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 		"	mrs %0, basepri											\n" \
 214:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 		"	mov %1, %2												\n" \
 215:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 		"	msr basepri, %1											\n" \
 216:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 		"	isb														\n" \
 217:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 		"	dsb														\n" \
 218:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "
 219:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	);
 220:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 
 221:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	/* This return will not be reached but is necessary to prevent compiler
 222:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	warnings. */
 223:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	return ulOriginalBASEPRI;
 1417              		.loc 2 223 2 is_stmt 1 view .LVU405
 1418              		.loc 2 223 2 is_stmt 0 view .LVU406
 1419              		.thumb
 1420              		.syntax unified
 1421              	.LBE47:
 1422              	.LBE48:
 990:../freertos/queue.c **** 		{
 1423              		.loc 1 990 3 is_stmt 1 view .LVU407
 1424              	@ ../freertos/queue.c:990: 		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosit
 990:../freertos/queue.c **** 		{
 1425              		.loc 1 990 16 is_stmt 0 view .LVU408
 1426 0334 806B     		ldr	r0, [r0, #56]	@ _1, MEM[(struct Queue_t *)xQueue_11(D)].uxMessagesWaiting
 1427              	.LVL107:
 1428              	@ ../freertos/queue.c:990: 		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosit
 990:../freertos/queue.c **** 		{
 1429              		.loc 1 990 5 view .LVU409
 1430 0336 E36B     		ldr	r3, [r4, #60]	@ MEM[(struct Queue_t *)xQueue_11(D)].uxLength, MEM[(struct Queue_t *)xQueue_11(
 1431 0338 9842     		cmp	r0, r3	@ _1, MEM[(struct Queue_t *)xQueue_11(D)].uxLength
 1432 033a 01D3     		bcc	.L87		@,
 1433              	@ ../freertos/queue.c:990: 		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosit
 990:../freertos/queue.c **** 		{
 1434              		.loc 1 990 58 discriminator 1 view .LVU410
 1435 033c 022A     		cmp	r2, #2	@ xCopyPosition,
 1436 033e 1DD1     		bne	.L92		@,
 1437              	.L87:
 1438              	.LBB49:
ARM GAS  /tmp/ccjtHtwZ.s 			page 78


 992:../freertos/queue.c **** 
 1439              		.loc 1 992 4 is_stmt 1 view .LVU411
 1440              	@ ../freertos/queue.c:992: 			const int8_t cTxLock = pxQueue->cTxLock;
 992:../freertos/queue.c **** 
 1441              		.loc 1 992 17 is_stmt 0 view .LVU412
 1442 0340 94F84550 		ldrb	r5, [r4, #69]	@ zero_extendqisi2	@ MEM[(struct Queue_t *)xQueue_11(D)].cTxLock, MEM[(struct Q
 1443              	@ ../freertos/queue.c:1001: 			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition )
1001:../freertos/queue.c **** 
 1444              		.loc 1 1001 13 view .LVU413
 1445 0344 2046     		mov	r0, r4	@, xQueue
 1446              	@ ../freertos/queue.c:992: 			const int8_t cTxLock = pxQueue->cTxLock;
 992:../freertos/queue.c **** 
 1447              		.loc 1 992 17 view .LVU414
 1448 0346 6DB2     		sxtb	r5, r5	@ cTxLock, MEM[(struct Queue_t *)xQueue_11(D)].cTxLock
 1449              	.LVL108:
 994:../freertos/queue.c **** 
 1450              		.loc 1 994 39 is_stmt 1 view .LVU415
1001:../freertos/queue.c **** 
 1451              		.loc 1 1001 4 view .LVU416
 1452              	@ ../freertos/queue.c:1001: 			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition )
1001:../freertos/queue.c **** 
 1453              		.loc 1 1001 13 is_stmt 0 view .LVU417
 1454 0348 FFF765FE 		bl	prvCopyDataToQueue		@
 1455              	.LVL109:
1005:../freertos/queue.c **** 			{
 1456              		.loc 1 1005 4 is_stmt 1 view .LVU418
 1457              	@ ../freertos/queue.c:1005: 			if( cTxLock == queueUNLOCKED )
1005:../freertos/queue.c **** 			{
 1458              		.loc 1 1005 6 is_stmt 0 view .LVU419
 1459 034c 6B1C     		adds	r3, r5, #1	@, cTxLock,
 1460 034e 10D1     		bne	.L89		@,
1060:../freertos/queue.c **** 					{
 1461              		.loc 1 1060 6 is_stmt 1 view .LVU420
 1462              	@ ../freertos/queue.c:1060: 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == p
1060:../freertos/queue.c **** 					{
 1463              		.loc 1 1060 10 is_stmt 0 view .LVU421
 1464 0350 636A     		ldr	r3, [r4, #36]	@ _3, MEM[(struct Queue_t *)xQueue_11(D)].xTasksWaitingToReceive.uxNumberOfItems
 1465              	@ ../freertos/queue.c:1060: 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == p
1060:../freertos/queue.c **** 					{
 1466              		.loc 1 1060 8 view .LVU422
 1467 0352 0BB9     		cbnz	r3, .L90	@ _3,
 1468              	.LVL110:
 1469              	.L99:
 1470              	@ ../freertos/queue.c:1094: 			xReturn = pdPASS;
1094:../freertos/queue.c **** 		}
 1471              		.loc 1 1094 12 view .LVU423
 1472 0354 0120     		movs	r0, #1	@ <retval>,
 1473 0356 09E0     		b	.L88		@
 1474              	.LVL111:
 1475              	.L90:
1062:../freertos/queue.c **** 						{
 1476              		.loc 1 1062 7 is_stmt 1 view .LVU424
 1477              	@ ../freertos/queue.c:1062: 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive 
1062:../freertos/queue.c **** 						{
 1478              		.loc 1 1062 11 is_stmt 0 view .LVU425
 1479 0358 04F12400 		add	r0, r4, #36	@, xQueue,
 1480 035c FFF7FEFF 		bl	xTaskRemoveFromEventList		@
ARM GAS  /tmp/ccjtHtwZ.s 			page 79


 1481              	.LVL112:
 1482              	@ ../freertos/queue.c:1062: 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive 
1062:../freertos/queue.c **** 						{
 1483              		.loc 1 1062 9 view .LVU426
 1484 0360 0028     		cmp	r0, #0	@ tmp145
 1485 0362 F7D0     		beq	.L99	@
1066:../freertos/queue.c **** 							{
 1486              		.loc 1 1066 8 is_stmt 1 view .LVU427
 1487              	@ ../freertos/queue.c:1066: 							if( pxHigherPriorityTaskWoken != NULL )
1066:../freertos/queue.c **** 							{
 1488              		.loc 1 1066 10 is_stmt 0 view .LVU428
 1489 0364 002F     		cmp	r7, #0	@ pxHigherPriorityTaskWoken
 1490 0366 F5D0     		beq	.L99	@
1068:../freertos/queue.c **** 							}
 1491              		.loc 1 1068 9 is_stmt 1 view .LVU429
 1492              	@ ../freertos/queue.c:1068: 								*pxHigherPriorityTaskWoken = pdTRUE;
1068:../freertos/queue.c **** 							}
 1493              		.loc 1 1068 36 is_stmt 0 view .LVU430
 1494 0368 0120     		movs	r0, #1	@ tmp136,
 1495 036a 3860     		str	r0, [r7]	@ tmp136, *pxHigherPriorityTaskWoken_19(D)
 1496              	.LVL113:
 1497              	.L88:
1068:../freertos/queue.c **** 							}
 1498              		.loc 1 1068 36 view .LVU431
 1499              	.LBE49:
1102:../freertos/queue.c **** 
 1500              		.loc 1 1102 2 is_stmt 1 view .LVU432
 1501              	.LBB50:
 1502              	.LBI50:
 224:../freertos/portable/GCC/ARM_CM3/portmacro.h **** }
 225:../freertos/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 226:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 
 227:../freertos/portable/GCC/ARM_CM3/portmacro.h **** portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
 1503              		.loc 2 227 30 view .LVU433
 1504              	.LBB51:
 228:../freertos/portable/GCC/ARM_CM3/portmacro.h **** {
 229:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	__asm volatile
 1505              		.loc 2 229 2 view .LVU434
 1506              		.syntax unified
 1507              	@ 229 "../freertos/portable/GCC/ARM_CM3/portmacro.h" 1
 1508 036c 86F31188 			msr basepri, r6		@ ulOriginalBASEPRI
 1509              	@ 0 "" 2
 1510              	.LVL114:
 1511              		.loc 2 229 2 is_stmt 0 view .LVU435
 1512              		.thumb
 1513              		.syntax unified
 1514              	.LBE51:
 1515              	.LBE50:
1104:../freertos/queue.c **** }
 1516              		.loc 1 1104 2 is_stmt 1 view .LVU436
 1517              	@ ../freertos/queue.c:1105: }
1105:../freertos/queue.c **** /*-----------------------------------------------------------*/
 1518              		.loc 1 1105 1 is_stmt 0 view .LVU437
 1519 0370 F8BD     		pop	{r3, r4, r5, r6, r7, pc}	@
 1520              	.LVL115:
 1521              	.L89:
 1522              	.LBB52:
ARM GAS  /tmp/ccjtHtwZ.s 			page 80


1091:../freertos/queue.c **** 			}
 1523              		.loc 1 1091 5 is_stmt 1 view .LVU438
 1524              	@ ../freertos/queue.c:1091: 				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
1091:../freertos/queue.c **** 			}
 1525              		.loc 1 1091 45 is_stmt 0 view .LVU439
 1526 0372 0135     		adds	r5, r5, #1	@ tmp138, cTxLock,
 1527              	.LVL116:
 1528              	@ ../freertos/queue.c:1091: 				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
1091:../freertos/queue.c **** 			}
 1529              		.loc 1 1091 24 view .LVU440
 1530 0374 6DB2     		sxtb	r5, r5	@ _8, tmp138
 1531              	.LVL117:
 1532              	@ ../freertos/queue.c:1091: 				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
1091:../freertos/queue.c **** 			}
 1533              		.loc 1 1091 22 view .LVU441
 1534 0376 84F84550 		strb	r5, [r4, #69]	@ _8, MEM[(struct Queue_t *)xQueue_11(D)].cTxLock
 1535 037a EBE7     		b	.L99		@
 1536              	.LVL118:
 1537              	.L92:
1091:../freertos/queue.c **** 			}
 1538              		.loc 1 1091 22 view .LVU442
 1539              	.LBE52:
 1540              	@ ../freertos/queue.c:1099: 			xReturn = errQUEUE_FULL;
1099:../freertos/queue.c **** 		}
 1541              		.loc 1 1099 12 view .LVU443
 1542 037c 0020     		movs	r0, #0	@ <retval>,
 1543 037e F5E7     		b	.L88		@
 1544              		.cfi_endproc
 1545              	.LFE14:
 1546              		.size	xQueueGenericSendFromISR, .-xQueueGenericSendFromISR
 1547              		.align	1
 1548              		.global	xQueueGiveFromISR
 1549              		.syntax unified
 1550              		.thumb
 1551              		.thumb_func
 1552              		.type	xQueueGiveFromISR, %function
 1553              	xQueueGiveFromISR:
 1554              	.LVL119:
 1555              	.LFB15:
1109:../freertos/queue.c **** BaseType_t xReturn;
 1556              		.loc 1 1109 1 is_stmt 1 view -0
 1557              		.cfi_startproc
 1558              		@ args = 0, pretend = 0, frame = 0
 1559              		@ frame_needed = 0, uses_anonymous_args = 0
1110:../freertos/queue.c **** UBaseType_t uxSavedInterruptStatus;
 1560              		.loc 1 1110 1 view .LVU445
1111:../freertos/queue.c **** Queue_t * const pxQueue = xQueue;
 1561              		.loc 1 1111 1 view .LVU446
1112:../freertos/queue.c **** 
 1562              		.loc 1 1112 1 view .LVU447
1120:../freertos/queue.c **** 
 1563              		.loc 1 1120 25 view .LVU448
1124:../freertos/queue.c **** 
 1564              		.loc 1 1124 42 view .LVU449
1129:../freertos/queue.c **** 
 1565              		.loc 1 1129 120 view .LVU450
1145:../freertos/queue.c **** 
ARM GAS  /tmp/ccjtHtwZ.s 			page 81


 1566              		.loc 1 1145 44 view .LVU451
1147:../freertos/queue.c **** 	{
 1567              		.loc 1 1147 2 view .LVU452
 1568              	.LBB53:
 1569              	.LBI53:
 207:../freertos/portable/GCC/ARM_CM3/portmacro.h **** {
 1570              		.loc 2 207 34 view .LVU453
 1571              	.LBB54:
 209:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 
 1572              		.loc 2 209 1 view .LVU454
 211:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	(
 1573              		.loc 2 211 2 view .LVU455
 1574              	.LBE54:
 1575              	.LBE53:
 1576              	@ ../freertos/queue.c:1109: {
1109:../freertos/queue.c **** BaseType_t xReturn;
 1577              		.loc 1 1109 1 is_stmt 0 view .LVU456
 1578 0380 38B5     		push	{r3, r4, r5, lr}	@
 1579              	.LCFI19:
 1580              		.cfi_def_cfa_offset 16
 1581              		.cfi_offset 3, -16
 1582              		.cfi_offset 4, -12
 1583              		.cfi_offset 5, -8
 1584              		.cfi_offset 14, -4
 1585              	@ ../freertos/queue.c:1109: {
1109:../freertos/queue.c **** BaseType_t xReturn;
 1586              		.loc 1 1109 1 view .LVU457
 1587 0382 0C46     		mov	r4, r1	@ pxHigherPriorityTaskWoken, tmp141
 1588              	.LBB56:
 1589              	.LBB55:
 1590              	@ ../freertos/portable/GCC/ARM_CM3/portmacro.h:211: 	__asm volatile
 211:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	(
 1591              		.loc 2 211 2 view .LVU458
 1592              		.syntax unified
 1593              	@ 211 "../freertos/portable/GCC/ARM_CM3/portmacro.h" 1
 1594 0384 EFF31185 			mrs r5, basepri												@ ulOriginalBASEPRI
 1595 0388 4FF01003 		mov r3, #16													@ ulNewBASEPRI,
 1596 038c 83F31188 		msr basepri, r3												@ ulNewBASEPRI
 1597 0390 BFF36F8F 		isb														
 1598 0394 BFF34F8F 		dsb														
 1599              	
 1600              	@ 0 "" 2
 1601              	.LVL120:
 223:../freertos/portable/GCC/ARM_CM3/portmacro.h **** }
 1602              		.loc 2 223 2 is_stmt 1 view .LVU459
 223:../freertos/portable/GCC/ARM_CM3/portmacro.h **** }
 1603              		.loc 2 223 2 is_stmt 0 view .LVU460
 1604              		.thumb
 1605              		.syntax unified
 1606              	.LBE55:
 1607              	.LBE56:
 1608              	.LBB57:
1149:../freertos/queue.c **** 
 1609              		.loc 1 1149 3 is_stmt 1 view .LVU461
 1610              	@ ../freertos/queue.c:1149: 		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1149:../freertos/queue.c **** 
 1611              		.loc 1 1149 21 is_stmt 0 view .LVU462
ARM GAS  /tmp/ccjtHtwZ.s 			page 82


 1612 0398 826B     		ldr	r2, [r0, #56]	@ uxMessagesWaiting, MEM[(struct Queue_t *)xQueue_11(D)].uxMessagesWaiting
 1613              	.LVL121:
1154:../freertos/queue.c **** 		{
 1614              		.loc 1 1154 3 is_stmt 1 view .LVU463
 1615              	@ ../freertos/queue.c:1154: 		if( uxMessagesWaiting < pxQueue->uxLength )
1154:../freertos/queue.c **** 		{
 1616              		.loc 1 1154 5 is_stmt 0 view .LVU464
 1617 039a C36B     		ldr	r3, [r0, #60]	@ MEM[(struct Queue_t *)xQueue_11(D)].uxLength, MEM[(struct Queue_t *)xQueue_11(
 1618 039c 9342     		cmp	r3, r2	@ MEM[(struct Queue_t *)xQueue_11(D)].uxLength, uxMessagesWaiting
 1619 039e 1BD9     		bls	.L105		@,
 1620              	.LBB58:
1156:../freertos/queue.c **** 
 1621              		.loc 1 1156 4 is_stmt 1 view .LVU465
 1622              	@ ../freertos/queue.c:1156: 			const int8_t cTxLock = pxQueue->cTxLock;
1156:../freertos/queue.c **** 
 1623              		.loc 1 1156 17 is_stmt 0 view .LVU466
 1624 03a0 90F84510 		ldrb	r1, [r0, #69]	@ zero_extendqisi2	@ MEM[(struct Queue_t *)xQueue_11(D)].cTxLock, MEM[(struct Q
 1625              	.LVL122:
 1626              	@ ../freertos/queue.c:1166: 			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
1166:../freertos/queue.c **** 
 1627              		.loc 1 1166 51 view .LVU467
 1628 03a4 0132     		adds	r2, r2, #1	@ _2, uxMessagesWaiting,
 1629              	.LVL123:
 1630              	@ ../freertos/queue.c:1170: 			if( cTxLock == queueUNLOCKED )
1170:../freertos/queue.c **** 			{
 1631              		.loc 1 1170 6 view .LVU468
 1632 03a6 FF29     		cmp	r1, #255	@ MEM[(struct Queue_t *)xQueue_11(D)].cTxLock,
 1633              	@ ../freertos/queue.c:1156: 			const int8_t cTxLock = pxQueue->cTxLock;
1156:../freertos/queue.c **** 
 1634              		.loc 1 1156 17 view .LVU469
 1635 03a8 4BB2     		sxtb	r3, r1	@ cTxLock, MEM[(struct Queue_t *)xQueue_11(D)].cTxLock
 1636              	.LVL124:
1158:../freertos/queue.c **** 
 1637              		.loc 1 1158 39 is_stmt 1 view .LVU470
1166:../freertos/queue.c **** 
 1638              		.loc 1 1166 4 view .LVU471
 1639              	@ ../freertos/queue.c:1166: 			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
1166:../freertos/queue.c **** 
 1640              		.loc 1 1166 31 is_stmt 0 view .LVU472
 1641 03aa 8263     		str	r2, [r0, #56]	@ _2, MEM[(struct Queue_t *)xQueue_11(D)].uxMessagesWaiting
1170:../freertos/queue.c **** 			{
 1642              		.loc 1 1170 4 is_stmt 1 view .LVU473
 1643              	@ ../freertos/queue.c:1170: 			if( cTxLock == queueUNLOCKED )
1170:../freertos/queue.c **** 			{
 1644              		.loc 1 1170 6 is_stmt 0 view .LVU474
 1645 03ac 0FD1     		bne	.L102		@,
1225:../freertos/queue.c **** 					{
 1646              		.loc 1 1225 6 is_stmt 1 view .LVU475
 1647              	@ ../freertos/queue.c:1225: 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == p
1225:../freertos/queue.c **** 					{
 1648              		.loc 1 1225 10 is_stmt 0 view .LVU476
 1649 03ae 436A     		ldr	r3, [r0, #36]	@ _3, MEM[(struct Queue_t *)xQueue_11(D)].xTasksWaitingToReceive.uxNumberOfItems
 1650              	.LVL125:
 1651              	@ ../freertos/queue.c:1225: 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == p
1225:../freertos/queue.c **** 					{
 1652              		.loc 1 1225 8 view .LVU477
 1653 03b0 0BB9     		cbnz	r3, .L103	@ _3,
ARM GAS  /tmp/ccjtHtwZ.s 			page 83


 1654              	.LVL126:
 1655              	.L112:
 1656              	@ ../freertos/queue.c:1259: 			xReturn = pdPASS;
1259:../freertos/queue.c **** 		}
 1657              		.loc 1 1259 12 view .LVU478
 1658 03b2 0120     		movs	r0, #1	@ <retval>,
 1659 03b4 08E0     		b	.L101		@
 1660              	.LVL127:
 1661              	.L103:
1227:../freertos/queue.c **** 						{
 1662              		.loc 1 1227 7 is_stmt 1 view .LVU479
 1663              	@ ../freertos/queue.c:1227: 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive 
1227:../freertos/queue.c **** 						{
 1664              		.loc 1 1227 11 is_stmt 0 view .LVU480
 1665 03b6 2430     		adds	r0, r0, #36	@, xQueue,
 1666              	.LVL128:
1227:../freertos/queue.c **** 						{
 1667              		.loc 1 1227 11 view .LVU481
 1668 03b8 FFF7FEFF 		bl	xTaskRemoveFromEventList		@
 1669              	.LVL129:
 1670              	@ ../freertos/queue.c:1227: 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive 
1227:../freertos/queue.c **** 						{
 1671              		.loc 1 1227 9 view .LVU482
 1672 03bc 0028     		cmp	r0, #0	@ tmp142
 1673 03be F8D0     		beq	.L112	@
1231:../freertos/queue.c **** 							{
 1674              		.loc 1 1231 8 is_stmt 1 view .LVU483
 1675              	@ ../freertos/queue.c:1231: 							if( pxHigherPriorityTaskWoken != NULL )
1231:../freertos/queue.c **** 							{
 1676              		.loc 1 1231 10 is_stmt 0 view .LVU484
 1677 03c0 002C     		cmp	r4, #0	@ pxHigherPriorityTaskWoken
 1678 03c2 F6D0     		beq	.L112	@
1233:../freertos/queue.c **** 							}
 1679              		.loc 1 1233 9 is_stmt 1 view .LVU485
 1680              	@ ../freertos/queue.c:1233: 								*pxHigherPriorityTaskWoken = pdTRUE;
1233:../freertos/queue.c **** 							}
 1681              		.loc 1 1233 36 is_stmt 0 view .LVU486
 1682 03c4 0120     		movs	r0, #1	@ tmp135,
 1683 03c6 2060     		str	r0, [r4]	@ tmp135, *pxHigherPriorityTaskWoken_18(D)
 1684              	.L101:
 1685              	.LVL130:
1233:../freertos/queue.c **** 							}
 1686              		.loc 1 1233 36 view .LVU487
 1687              	.LBE58:
 1688              	.LBE57:
1267:../freertos/queue.c **** 
 1689              		.loc 1 1267 2 is_stmt 1 view .LVU488
 1690              	.LBB60:
 1691              	.LBI60:
 227:../freertos/portable/GCC/ARM_CM3/portmacro.h **** {
 1692              		.loc 2 227 30 view .LVU489
 1693              	.LBB61:
 1694              		.loc 2 229 2 view .LVU490
 1695              		.syntax unified
 1696              	@ 229 "../freertos/portable/GCC/ARM_CM3/portmacro.h" 1
 1697 03c8 85F31188 			msr basepri, r5		@ ulOriginalBASEPRI
 1698              	@ 0 "" 2
ARM GAS  /tmp/ccjtHtwZ.s 			page 84


 1699              	.LVL131:
 1700              		.loc 2 229 2 is_stmt 0 view .LVU491
 1701              		.thumb
 1702              		.syntax unified
 1703              	.LBE61:
 1704              	.LBE60:
1269:../freertos/queue.c **** }
 1705              		.loc 1 1269 2 is_stmt 1 view .LVU492
 1706              	@ ../freertos/queue.c:1270: }
1270:../freertos/queue.c **** /*-----------------------------------------------------------*/
 1707              		.loc 1 1270 1 is_stmt 0 view .LVU493
 1708 03cc 38BD     		pop	{r3, r4, r5, pc}	@
 1709              	.LVL132:
 1710              	.L102:
 1711              	.LBB62:
 1712              	.LBB59:
1256:../freertos/queue.c **** 			}
 1713              		.loc 1 1256 5 is_stmt 1 view .LVU494
 1714              	@ ../freertos/queue.c:1256: 				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
1256:../freertos/queue.c **** 			}
 1715              		.loc 1 1256 45 is_stmt 0 view .LVU495
 1716 03ce 0133     		adds	r3, r3, #1	@ tmp137, cTxLock,
 1717              	.LVL133:
 1718              	@ ../freertos/queue.c:1256: 				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
1256:../freertos/queue.c **** 			}
 1719              		.loc 1 1256 24 view .LVU496
 1720 03d0 5BB2     		sxtb	r3, r3	@ _8, tmp137
 1721              	.LVL134:
 1722              	@ ../freertos/queue.c:1256: 				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
1256:../freertos/queue.c **** 			}
 1723              		.loc 1 1256 22 view .LVU497
 1724 03d2 80F84530 		strb	r3, [r0, #69]	@ _8, MEM[(struct Queue_t *)xQueue_11(D)].cTxLock
 1725 03d6 ECE7     		b	.L112		@
 1726              	.LVL135:
 1727              	.L105:
1256:../freertos/queue.c **** 			}
 1728              		.loc 1 1256 22 view .LVU498
 1729              	.LBE59:
 1730              	@ ../freertos/queue.c:1264: 			xReturn = errQUEUE_FULL;
1264:../freertos/queue.c **** 		}
 1731              		.loc 1 1264 12 view .LVU499
 1732 03d8 0020     		movs	r0, #0	@ <retval>,
 1733              	.LVL136:
1264:../freertos/queue.c **** 		}
 1734              		.loc 1 1264 12 view .LVU500
 1735 03da F5E7     		b	.L101		@
 1736              	.LBE62:
 1737              		.cfi_endproc
 1738              	.LFE15:
 1739              		.size	xQueueGiveFromISR, .-xQueueGiveFromISR
 1740              		.align	1
 1741              		.global	xQueueReceive
 1742              		.syntax unified
 1743              		.thumb
 1744              		.thumb_func
 1745              		.type	xQueueReceive, %function
 1746              	xQueueReceive:
ARM GAS  /tmp/ccjtHtwZ.s 			page 85


 1747              	.LVL137:
 1748              	.LFB16:
1274:../freertos/queue.c **** BaseType_t xEntryTimeSet = pdFALSE;
 1749              		.loc 1 1274 1 is_stmt 1 view -0
 1750              		.cfi_startproc
 1751              		@ args = 0, pretend = 0, frame = 16
 1752              		@ frame_needed = 0, uses_anonymous_args = 0
1275:../freertos/queue.c **** TimeOut_t xTimeOut;
 1753              		.loc 1 1275 1 view .LVU502
1276:../freertos/queue.c **** Queue_t * const pxQueue = xQueue;
 1754              		.loc 1 1276 1 view .LVU503
1277:../freertos/queue.c **** 
 1755              		.loc 1 1277 1 view .LVU504
 1756              	@ ../freertos/queue.c:1274: {
1274:../freertos/queue.c **** BaseType_t xEntryTimeSet = pdFALSE;
 1757              		.loc 1 1274 1 is_stmt 0 view .LVU505
 1758 03dc 2DE9FF41 		push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}	@
 1759              	.LCFI20:
 1760              		.cfi_def_cfa_offset 40
 1761              		.cfi_offset 4, -24
 1762              		.cfi_offset 5, -20
 1763              		.cfi_offset 6, -16
 1764              		.cfi_offset 7, -12
 1765              		.cfi_offset 8, -8
 1766              		.cfi_offset 14, -4
 1767              	@ ../freertos/queue.c:1275: BaseType_t xEntryTimeSet = pdFALSE;
1275:../freertos/queue.c **** TimeOut_t xTimeOut;
 1768              		.loc 1 1275 12 view .LVU506
 1769 03e0 0027     		movs	r7, #0	@ xEntryTimeSet,
 1770              	@ ../freertos/queue.c:1274: {
1274:../freertos/queue.c **** BaseType_t xEntryTimeSet = pdFALSE;
 1771              		.loc 1 1274 1 view .LVU507
 1772 03e2 0446     		mov	r4, r0	@ xQueue, tmp156
 1773              	.LVL138:
1274:../freertos/queue.c **** BaseType_t xEntryTimeSet = pdFALSE;
 1774              		.loc 1 1274 1 view .LVU508
 1775 03e4 0E46     		mov	r6, r1	@ pvBuffer, tmp157
 1776              	@ ../freertos/queue.c:1364: 		prvLockQueue( pxQueue );
1364:../freertos/queue.c **** 
 1777              		.loc 1 1364 3 view .LVU509
 1778 03e6 B846     		mov	r8, r7	@ tmp154, xEntryTimeSet
 1779              	@ ../freertos/queue.c:1274: {
1274:../freertos/queue.c **** BaseType_t xEntryTimeSet = pdFALSE;
 1780              		.loc 1 1274 1 view .LVU510
 1781 03e8 0192     		str	r2, [sp, #4]	@ xTicksToWait, xTicksToWait
 1782              	.LVL139:
 1783              	.L114:
1280:../freertos/queue.c **** 
 1784              		.loc 1 1280 29 is_stmt 1 view .LVU511
1284:../freertos/queue.c **** 
 1785              		.loc 1 1284 100 view .LVU512
1289:../freertos/queue.c **** 	}
 1786              		.loc 1 1289 104 view .LVU513
1297:../freertos/queue.c **** 	{
 1787              		.loc 1 1297 2 view .LVU514
1299:../freertos/queue.c **** 		{
 1788              		.loc 1 1299 3 view .LVU515
ARM GAS  /tmp/ccjtHtwZ.s 			page 86


 1789 03ea FFF7FEFF 		bl	vPortEnterCritical		@
 1790              	.LVL140:
 1791              	.LBB63:
1301:../freertos/queue.c **** 
 1792              		.loc 1 1301 4 view .LVU516
 1793              	@ ../freertos/queue.c:1301: 			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1301:../freertos/queue.c **** 
 1794              		.loc 1 1301 22 is_stmt 0 view .LVU517
 1795 03ee A56B     		ldr	r5, [r4, #56]	@ uxMessagesWaiting, MEM[(struct Queue_t *)xQueue_24(D)].uxMessagesWaiting
 1796              	.LVL141:
1305:../freertos/queue.c **** 			{
 1797              		.loc 1 1305 4 is_stmt 1 view .LVU518
 1798              	@ ../freertos/queue.c:1305: 			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1305:../freertos/queue.c **** 			{
 1799              		.loc 1 1305 6 is_stmt 0 view .LVU519
 1800 03f0 E5B1     		cbz	r5, .L115	@ uxMessagesWaiting,
1308:../freertos/queue.c **** 				traceQUEUE_RECEIVE( pxQueue );
 1801              		.loc 1 1308 5 is_stmt 1 view .LVU520
 1802 03f2 3146     		mov	r1, r6	@, pvBuffer
 1803 03f4 2046     		mov	r0, r4	@, xQueue
 1804              	@ ../freertos/queue.c:1310: 				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
1310:../freertos/queue.c **** 
 1805              		.loc 1 1310 52 is_stmt 0 view .LVU521
 1806 03f6 013D     		subs	r5, r5, #1	@ _1, uxMessagesWaiting,
 1807              	.LVL142:
 1808              	@ ../freertos/queue.c:1308: 				prvCopyDataFromQueue( pxQueue, pvBuffer );
1308:../freertos/queue.c **** 				traceQUEUE_RECEIVE( pxQueue );
 1809              		.loc 1 1308 5 view .LVU522
 1810 03f8 FFF742FE 		bl	prvCopyDataFromQueue		@
 1811              	.LVL143:
1309:../freertos/queue.c **** 				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 1812              		.loc 1 1309 34 is_stmt 1 view .LVU523
1310:../freertos/queue.c **** 
 1813              		.loc 1 1310 5 view .LVU524
 1814              	@ ../freertos/queue.c:1310: 				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
1310:../freertos/queue.c **** 
 1815              		.loc 1 1310 32 is_stmt 0 view .LVU525
 1816 03fc A563     		str	r5, [r4, #56]	@ _1, MEM[(struct Queue_t *)xQueue_24(D)].uxMessagesWaiting
1315:../freertos/queue.c **** 				{
 1817              		.loc 1 1315 5 is_stmt 1 view .LVU526
 1818              	@ ../freertos/queue.c:1315: 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFAL
1315:../freertos/queue.c **** 				{
 1819              		.loc 1 1315 9 is_stmt 0 view .LVU527
 1820 03fe 2369     		ldr	r3, [r4, #16]	@ _2, MEM[(struct Queue_t *)xQueue_24(D)].xTasksWaitingToSend.uxNumberOfItems
 1821              	@ ../freertos/queue.c:1315: 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFAL
1315:../freertos/queue.c **** 				{
 1822              		.loc 1 1315 7 view .LVU528
 1823 0400 73B1     		cbz	r3, .L117	@ _2,
1317:../freertos/queue.c **** 					{
 1824              		.loc 1 1317 6 is_stmt 1 view .LVU529
 1825              	@ ../freertos/queue.c:1317: 					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) 
1317:../freertos/queue.c **** 					{
 1826              		.loc 1 1317 10 is_stmt 0 view .LVU530
 1827 0402 04F11000 		add	r0, r4, #16	@, xQueue,
 1828 0406 FFF7FEFF 		bl	xTaskRemoveFromEventList		@
 1829              	.LVL144:
 1830              	@ ../freertos/queue.c:1317: 					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) 
ARM GAS  /tmp/ccjtHtwZ.s 			page 87


1317:../freertos/queue.c **** 					{
 1831              		.loc 1 1317 8 view .LVU531
 1832 040a 48B1     		cbz	r0, .L117	@ tmp158,
1319:../freertos/queue.c **** 					}
 1833              		.loc 1 1319 7 is_stmt 1 view .LVU532
 1834 040c 4FF0E023 		mov	r3, #-536813568	@ tmp132,
 1835 0410 4FF08052 		mov	r2, #268435456	@ tmp133,
 1836 0414 C3F8042D 		str	r2, [r3, #3332]	@ tmp133, MEM[(volatile uint32_t *)3758157060B]
1319:../freertos/queue.c **** 					}
 1837              		.loc 1 1319 7 view .LVU533
 1838              		.syntax unified
 1839              	@ 1319 "../freertos/queue.c" 1
 1840 0418 BFF34F8F 		dsb	
 1841              	@ 0 "" 2
1319:../freertos/queue.c **** 					}
 1842              		.loc 1 1319 7 view .LVU534
 1843              	@ 1319 "../freertos/queue.c" 1
 1844 041c BFF36F8F 		isb
 1845              	@ 0 "" 2
1319:../freertos/queue.c **** 					}
 1846              		.loc 1 1319 39 view .LVU535
 1847              		.thumb
 1848              		.syntax unified
 1849              	.L117:
1328:../freertos/queue.c **** 				}
 1850              		.loc 1 1328 30 view .LVU536
1331:../freertos/queue.c **** 				return pdPASS;
 1851              		.loc 1 1331 5 view .LVU537
 1852 0420 FFF7FEFF 		bl	vPortExitCritical		@
 1853              	.LVL145:
1332:../freertos/queue.c **** 			}
 1854              		.loc 1 1332 5 view .LVU538
 1855              	@ ../freertos/queue.c:1332: 				return pdPASS;
1332:../freertos/queue.c **** 			}
 1856              		.loc 1 1332 12 is_stmt 0 view .LVU539
 1857 0424 0120     		movs	r0, #1	@ <retval>,
 1858              	.LVL146:
 1859              	.L113:
1332:../freertos/queue.c **** 			}
 1860              		.loc 1 1332 12 view .LVU540
 1861              	.LBE63:
 1862              	@ ../freertos/queue.c:1411: }
1411:../freertos/queue.c **** /*-----------------------------------------------------------*/
 1863              		.loc 1 1411 1 view .LVU541
 1864 0426 04B0     		add	sp, sp, #16	@,,
 1865              	.LCFI21:
 1866              		.cfi_remember_state
 1867              		.cfi_def_cfa_offset 24
 1868              		@ sp needed	@
 1869 0428 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}	@
 1870              	.LVL147:
 1871              	.L115:
 1872              	.LCFI22:
 1873              		.cfi_restore_state
 1874              	.LBB64:
1336:../freertos/queue.c **** 				{
 1875              		.loc 1 1336 5 is_stmt 1 view .LVU542
ARM GAS  /tmp/ccjtHtwZ.s 			page 88


 1876              	@ ../freertos/queue.c:1336: 				if( xTicksToWait == ( TickType_t ) 0 )
1336:../freertos/queue.c **** 				{
 1877              		.loc 1 1336 7 is_stmt 0 view .LVU543
 1878 042c 019D     		ldr	r5, [sp, #4]	@ xTicksToWait, xTicksToWait
 1879              	.LVL148:
1336:../freertos/queue.c **** 				{
 1880              		.loc 1 1336 7 view .LVU544
 1881 042e 1DB9     		cbnz	r5, .L120	@ xTicksToWait,
1340:../freertos/queue.c **** 					traceQUEUE_RECEIVE_FAILED( pxQueue );
 1882              		.loc 1 1340 6 is_stmt 1 view .LVU545
 1883 0430 FFF7FEFF 		bl	vPortExitCritical		@
 1884              	.LVL149:
1341:../freertos/queue.c **** 					return errQUEUE_EMPTY;
 1885              		.loc 1 1341 42 view .LVU546
1342:../freertos/queue.c **** 				}
 1886              		.loc 1 1342 6 view .LVU547
 1887              	.L134:
1342:../freertos/queue.c **** 				}
 1888              		.loc 1 1342 6 is_stmt 0 view .LVU548
 1889              	.LBE64:
 1890              	@ ../freertos/queue.c:1403: 				return errQUEUE_EMPTY;
1403:../freertos/queue.c **** 			}
 1891              		.loc 1 1403 12 view .LVU549
 1892 0434 0020     		movs	r0, #0	@ <retval>,
 1893 0436 F6E7     		b	.L113		@
 1894              	.LVL150:
 1895              	.L120:
 1896              	.LBB65:
1344:../freertos/queue.c **** 				{
 1897              		.loc 1 1344 10 is_stmt 1 view .LVU550
 1898              	@ ../freertos/queue.c:1344: 				else if( xEntryTimeSet == pdFALSE )
1344:../freertos/queue.c **** 				{
 1899              		.loc 1 1344 12 is_stmt 0 view .LVU551
 1900 0438 17B9     		cbnz	r7, .L121	@ xEntryTimeSet,
1348:../freertos/queue.c **** 					xEntryTimeSet = pdTRUE;
 1901              		.loc 1 1348 6 is_stmt 1 view .LVU552
 1902 043a 02A8     		add	r0, sp, #8	@ tmp164,,
 1903 043c FFF7FEFF 		bl	vTaskInternalSetTimeOutState		@
 1904              	.LVL151:
1349:../freertos/queue.c **** 				}
 1905              		.loc 1 1349 6 view .LVU553
 1906              	.L121:
1354:../freertos/queue.c **** 				}
 1907              		.loc 1 1354 30 view .LVU554
 1908              	.LBE65:
1358:../freertos/queue.c **** 
 1909              		.loc 1 1358 3 view .LVU555
 1910 0440 FFF7FEFF 		bl	vPortExitCritical		@
 1911              	.LVL152:
1363:../freertos/queue.c **** 		prvLockQueue( pxQueue );
 1912              		.loc 1 1363 3 view .LVU556
 1913 0444 FFF7FEFF 		bl	vTaskSuspendAll		@
 1914              	.LVL153:
1364:../freertos/queue.c **** 
 1915              		.loc 1 1364 3 view .LVU557
 1916 0448 FFF7FEFF 		bl	vPortEnterCritical		@
 1917              	.LVL154:
ARM GAS  /tmp/ccjtHtwZ.s 			page 89


1364:../freertos/queue.c **** 
 1918              		.loc 1 1364 3 view .LVU558
 1919 044c 94F84430 		ldrb	r3, [r4, #68]	@ zero_extendqisi2	@ MEM[(struct Queue_t *)xQueue_24(D)].cRxLock, MEM[(struct Q
 1920 0450 FF2B     		cmp	r3, #255	@ MEM[(struct Queue_t *)xQueue_24(D)].cRxLock,
1364:../freertos/queue.c **** 
 1921              		.loc 1 1364 3 view .LVU559
 1922 0452 08BF     		it	eq
 1923 0454 84F84480 		strbeq	r8, [r4, #68]	@ tmp154, MEM[(struct Queue_t *)xQueue_24(D)].cRxLock
1364:../freertos/queue.c **** 
 1924              		.loc 1 1364 3 view .LVU560
 1925 0458 94F84530 		ldrb	r3, [r4, #69]	@ zero_extendqisi2	@ MEM[(struct Queue_t *)xQueue_24(D)].cTxLock, MEM[(struct Q
 1926 045c FF2B     		cmp	r3, #255	@ MEM[(struct Queue_t *)xQueue_24(D)].cTxLock,
1364:../freertos/queue.c **** 
 1927              		.loc 1 1364 3 view .LVU561
 1928 045e 08BF     		it	eq
 1929 0460 84F84580 		strbeq	r8, [r4, #69]	@ tmp154, MEM[(struct Queue_t *)xQueue_24(D)].cTxLock
1364:../freertos/queue.c **** 
 1930              		.loc 1 1364 3 view .LVU562
 1931 0464 FFF7FEFF 		bl	vPortExitCritical		@
 1932              	.LVL155:
1367:../freertos/queue.c **** 		{
 1933              		.loc 1 1367 3 view .LVU563
 1934              	@ ../freertos/queue.c:1367: 		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1367:../freertos/queue.c **** 		{
 1935              		.loc 1 1367 7 is_stmt 0 view .LVU564
 1936 0468 01A9     		add	r1, sp, #4	@ tmp165,,
 1937 046a 02A8     		add	r0, sp, #8	@ tmp166,,
 1938 046c FFF7FEFF 		bl	xTaskCheckForTimeOut		@
 1939              	.LVL156:
 1940              	@ ../freertos/queue.c:1367: 		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1367:../freertos/queue.c **** 		{
 1941              		.loc 1 1367 5 view .LVU565
 1942 0470 00BB     		cbnz	r0, .L124	@ tmp159,
1371:../freertos/queue.c **** 			{
 1943              		.loc 1 1371 4 is_stmt 1 view .LVU566
 1944              	@ ../freertos/queue.c:1371: 			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1371:../freertos/queue.c **** 			{
 1945              		.loc 1 1371 8 is_stmt 0 view .LVU567
 1946 0472 2046     		mov	r0, r4	@, xQueue
 1947 0474 FFF7C4FD 		bl	prvIsQueueEmpty		@
 1948              	.LVL157:
 1949              	@ ../freertos/queue.c:1371: 			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1371:../freertos/queue.c **** 			{
 1950              		.loc 1 1371 6 view .LVU568
 1951 0478 B0B1     		cbz	r0, .L125	@ tmp160,
1373:../freertos/queue.c **** 				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 1952              		.loc 1 1373 46 is_stmt 1 view .LVU569
1374:../freertos/queue.c **** 				prvUnlockQueue( pxQueue );
 1953              		.loc 1 1374 5 view .LVU570
 1954 047a 0199     		ldr	r1, [sp, #4]	@, xTicksToWait
 1955 047c 04F12400 		add	r0, r4, #36	@, xQueue,
 1956 0480 FFF7FEFF 		bl	vTaskPlaceOnEventList		@
 1957              	.LVL158:
1375:../freertos/queue.c **** 				if( xTaskResumeAll() == pdFALSE )
 1958              		.loc 1 1375 5 view .LVU571
 1959 0484 2046     		mov	r0, r4	@, xQueue
 1960 0486 FFF70FFE 		bl	prvUnlockQueue		@
ARM GAS  /tmp/ccjtHtwZ.s 			page 90


 1961              	.LVL159:
1376:../freertos/queue.c **** 				{
 1962              		.loc 1 1376 5 view .LVU572
 1963              	@ ../freertos/queue.c:1376: 				if( xTaskResumeAll() == pdFALSE )
1376:../freertos/queue.c **** 				{
 1964              		.loc 1 1376 9 is_stmt 0 view .LVU573
 1965 048a FFF7FEFF 		bl	xTaskResumeAll		@
 1966              	.LVL160:
 1967              	@ ../freertos/queue.c:1376: 				if( xTaskResumeAll() == pdFALSE )
1376:../freertos/queue.c **** 				{
 1968              		.loc 1 1376 7 view .LVU574
 1969 048e 48B9     		cbnz	r0, .L127	@ tmp161,
1378:../freertos/queue.c **** 				}
 1970              		.loc 1 1378 6 is_stmt 1 view .LVU575
 1971 0490 4FF0E023 		mov	r3, #-536813568	@ tmp149,
 1972 0494 4FF08052 		mov	r2, #268435456	@ tmp150,
 1973 0498 C3F8042D 		str	r2, [r3, #3332]	@ tmp150, MEM[(volatile uint32_t *)3758157060B]
1378:../freertos/queue.c **** 				}
 1974              		.loc 1 1378 6 view .LVU576
 1975              		.syntax unified
 1976              	@ 1378 "../freertos/queue.c" 1
 1977 049c BFF34F8F 		dsb	
 1978              	@ 0 "" 2
1378:../freertos/queue.c **** 				}
 1979              		.loc 1 1378 6 view .LVU577
 1980              	@ 1378 "../freertos/queue.c" 1
 1981 04a0 BFF36F8F 		isb
 1982              	@ 0 "" 2
1378:../freertos/queue.c **** 				}
 1983              		.loc 1 1378 28 view .LVU578
 1984              		.thumb
 1985              		.syntax unified
 1986              	.L127:
 1987              	@ ../freertos/queue.c:1274: {
1274:../freertos/queue.c **** BaseType_t xEntryTimeSet = pdFALSE;
 1988              		.loc 1 1274 1 is_stmt 0 view .LVU579
 1989 04a4 0127     		movs	r7, #1	@ xEntryTimeSet,
 1990 04a6 A0E7     		b	.L114		@
 1991              	.L125:
1389:../freertos/queue.c **** 				( void ) xTaskResumeAll();
 1992              		.loc 1 1389 5 is_stmt 1 view .LVU580
 1993 04a8 2046     		mov	r0, r4	@, xQueue
 1994 04aa FFF7FDFD 		bl	prvUnlockQueue		@
 1995              	.LVL161:
1390:../freertos/queue.c **** 			}
 1996              		.loc 1 1390 5 view .LVU581
 1997              	@ ../freertos/queue.c:1390: 				( void ) xTaskResumeAll();
1390:../freertos/queue.c **** 			}
 1998              		.loc 1 1390 14 is_stmt 0 view .LVU582
 1999 04ae FFF7FEFF 		bl	xTaskResumeAll		@
 2000              	.LVL162:
 2001 04b2 F7E7     		b	.L127		@
 2002              	.L124:
1397:../freertos/queue.c **** 			( void ) xTaskResumeAll();
 2003              		.loc 1 1397 4 is_stmt 1 view .LVU583
 2004 04b4 2046     		mov	r0, r4	@, xQueue
 2005 04b6 FFF7F7FD 		bl	prvUnlockQueue		@
ARM GAS  /tmp/ccjtHtwZ.s 			page 91


 2006              	.LVL163:
1398:../freertos/queue.c **** 
 2007              		.loc 1 1398 4 view .LVU584
 2008              	@ ../freertos/queue.c:1398: 			( void ) xTaskResumeAll();
1398:../freertos/queue.c **** 
 2009              		.loc 1 1398 13 is_stmt 0 view .LVU585
 2010 04ba FFF7FEFF 		bl	xTaskResumeAll		@
 2011              	.LVL164:
1400:../freertos/queue.c **** 			{
 2012              		.loc 1 1400 4 is_stmt 1 view .LVU586
 2013              	@ ../freertos/queue.c:1400: 			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1400:../freertos/queue.c **** 			{
 2014              		.loc 1 1400 8 is_stmt 0 view .LVU587
 2015 04be 2046     		mov	r0, r4	@, xQueue
 2016 04c0 FFF79EFD 		bl	prvIsQueueEmpty		@
 2017              	.LVL165:
 2018              	@ ../freertos/queue.c:1400: 			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1400:../freertos/queue.c **** 			{
 2019              		.loc 1 1400 6 view .LVU588
 2020 04c4 0028     		cmp	r0, #0	@ tmp162
 2021 04c6 EDD0     		beq	.L127	@
 2022 04c8 B4E7     		b	.L134		@
 2023              		.cfi_endproc
 2024              	.LFE16:
 2025              		.size	xQueueReceive, .-xQueueReceive
 2026              		.align	1
 2027              		.global	xQueueSemaphoreTake
 2028              		.syntax unified
 2029              		.thumb
 2030              		.thumb_func
 2031              		.type	xQueueSemaphoreTake, %function
 2032              	xQueueSemaphoreTake:
 2033              	.LVL166:
 2034              	.LFB17:
1415:../freertos/queue.c **** BaseType_t xEntryTimeSet = pdFALSE;
 2035              		.loc 1 1415 1 is_stmt 1 view -0
 2036              		.cfi_startproc
 2037              		@ args = 0, pretend = 0, frame = 16
 2038              		@ frame_needed = 0, uses_anonymous_args = 0
1416:../freertos/queue.c **** TimeOut_t xTimeOut;
 2039              		.loc 1 1416 1 view .LVU590
1417:../freertos/queue.c **** Queue_t * const pxQueue = xQueue;
 2040              		.loc 1 1417 1 view .LVU591
1418:../freertos/queue.c **** 
 2041              		.loc 1 1418 1 view .LVU592
 2042              	@ ../freertos/queue.c:1415: {
1415:../freertos/queue.c **** BaseType_t xEntryTimeSet = pdFALSE;
 2043              		.loc 1 1415 1 is_stmt 0 view .LVU593
 2044 04ca 2DE9FF41 		push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}	@
 2045              	.LCFI23:
 2046              		.cfi_def_cfa_offset 40
 2047              		.cfi_offset 4, -24
 2048              		.cfi_offset 5, -20
 2049              		.cfi_offset 6, -16
 2050              		.cfi_offset 7, -12
 2051              		.cfi_offset 8, -8
 2052              		.cfi_offset 14, -4
ARM GAS  /tmp/ccjtHtwZ.s 			page 92


 2053              	@ ../freertos/queue.c:1421: 	BaseType_t xInheritanceOccurred = pdFALSE;
1421:../freertos/queue.c **** #endif
 2054              		.loc 1 1421 13 view .LVU594
 2055 04ce 0025     		movs	r5, #0	@ <retval>,
 2056              	@ ../freertos/queue.c:1415: {
1415:../freertos/queue.c **** BaseType_t xEntryTimeSet = pdFALSE;
 2057              		.loc 1 1415 1 view .LVU595
 2058 04d0 0446     		mov	r4, r0	@ xQueue, tmp167
 2059              	.LVL167:
1421:../freertos/queue.c **** #endif
 2060              		.loc 1 1421 2 is_stmt 1 view .LVU596
 2061              	@ ../freertos/queue.c:1416: BaseType_t xEntryTimeSet = pdFALSE;
1416:../freertos/queue.c **** TimeOut_t xTimeOut;
 2062              		.loc 1 1416 12 is_stmt 0 view .LVU597
 2063 04d2 2F46     		mov	r7, r5	@ xEntryTimeSet, <retval>
 2064              	@ ../freertos/queue.c:1535: 		prvLockQueue( pxQueue );
1535:../freertos/queue.c **** 
 2065              		.loc 1 1535 3 view .LVU598
 2066 04d4 2E46     		mov	r6, r5	@ tmp165, <retval>
 2067              	@ ../freertos/queue.c:1415: {
1415:../freertos/queue.c **** BaseType_t xEntryTimeSet = pdFALSE;
 2068              		.loc 1 1415 1 view .LVU599
 2069 04d6 0191     		str	r1, [sp, #4]	@ xTicksToWait, xTicksToWait
 2070              	.LVL168:
 2071              	.L136:
1425:../freertos/queue.c **** 
 2072              		.loc 1 1425 29 is_stmt 1 view .LVU600
1429:../freertos/queue.c **** 
 2073              		.loc 1 1429 42 view .LVU601
1434:../freertos/queue.c **** 	}
 2074              		.loc 1 1434 104 view .LVU602
1442:../freertos/queue.c **** 	{
 2075              		.loc 1 1442 2 view .LVU603
1444:../freertos/queue.c **** 		{
 2076              		.loc 1 1444 3 view .LVU604
 2077 04d8 FFF7FEFF 		bl	vPortEnterCritical		@
 2078              	.LVL169:
 2079              	.LBB70:
1448:../freertos/queue.c **** 
 2080              		.loc 1 1448 4 view .LVU605
 2081              	@ ../freertos/queue.c:1448: 			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
1448:../freertos/queue.c **** 
 2082              		.loc 1 1448 22 is_stmt 0 view .LVU606
 2083 04dc A36B     		ldr	r3, [r4, #56]	@ uxSemaphoreCount, MEM[(struct Queue_t *)xQueue_34(D)].uxMessagesWaiting
 2084              	.LVL170:
1452:../freertos/queue.c **** 			{
 2085              		.loc 1 1452 4 is_stmt 1 view .LVU607
 2086              	@ ../freertos/queue.c:1452: 			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
1452:../freertos/queue.c **** 			{
 2087              		.loc 1 1452 6 is_stmt 0 view .LVU608
 2088 04de F3B1     		cbz	r3, .L137	@ uxSemaphoreCount,
1454:../freertos/queue.c **** 
 2089              		.loc 1 1454 34 is_stmt 1 view .LVU609
1458:../freertos/queue.c **** 
 2090              		.loc 1 1458 5 view .LVU610
 2091              	@ ../freertos/queue.c:1458: 				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
1458:../freertos/queue.c **** 
ARM GAS  /tmp/ccjtHtwZ.s 			page 93


 2092              		.loc 1 1458 51 is_stmt 0 view .LVU611
 2093 04e0 013B     		subs	r3, r3, #1	@ _1, uxSemaphoreCount,
 2094              	.LVL171:
 2095              	@ ../freertos/queue.c:1458: 				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
1458:../freertos/queue.c **** 
 2096              		.loc 1 1458 32 view .LVU612
 2097 04e2 A363     		str	r3, [r4, #56]	@ _1, MEM[(struct Queue_t *)xQueue_34(D)].uxMessagesWaiting
1462:../freertos/queue.c **** 					{
 2098              		.loc 1 1462 6 is_stmt 1 view .LVU613
 2099              	@ ../freertos/queue.c:1462: 					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1462:../freertos/queue.c **** 					{
 2100              		.loc 1 1462 8 is_stmt 0 view .LVU614
 2101 04e4 2368     		ldr	r3, [r4]	@ MEM[(struct Queue_t *)xQueue_34(D)].pcHead, MEM[(struct Queue_t *)xQueue_34(D)].pcH
 2102              	.LVL172:
1462:../freertos/queue.c **** 					{
 2103              		.loc 1 1462 8 view .LVU615
 2104 04e6 13B9     		cbnz	r3, .L138	@ MEM[(struct Queue_t *)xQueue_34(D)].pcHead,
1466:../freertos/queue.c **** 					}
 2105              		.loc 1 1466 7 is_stmt 1 view .LVU616
 2106              	@ ../freertos/queue.c:1466: 						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCoun
1466:../freertos/queue.c **** 					}
 2107              		.loc 1 1466 44 is_stmt 0 view .LVU617
 2108 04e8 FFF7FEFF 		bl	pvTaskIncrementMutexHeldCount		@
 2109              	.LVL173:
 2110              	@ ../freertos/queue.c:1466: 						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCoun
1466:../freertos/queue.c **** 					}
 2111              		.loc 1 1466 42 view .LVU618
 2112 04ec A060     		str	r0, [r4, #8]	@ tmp168, MEM[(struct Queue_t *)xQueue_34(D)].u.xSemaphore.xMutexHolder
 2113              	.L138:
1470:../freertos/queue.c **** 					}
 2114              		.loc 1 1470 31 is_stmt 1 view .LVU619
1477:../freertos/queue.c **** 				{
 2115              		.loc 1 1477 5 view .LVU620
 2116              	@ ../freertos/queue.c:1477: 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFAL
1477:../freertos/queue.c **** 				{
 2117              		.loc 1 1477 9 is_stmt 0 view .LVU621
 2118 04ee 2369     		ldr	r3, [r4, #16]	@ _4, MEM[(struct Queue_t *)xQueue_34(D)].xTasksWaitingToSend.uxNumberOfItems
 2119              	@ ../freertos/queue.c:1477: 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFAL
1477:../freertos/queue.c **** 				{
 2120              		.loc 1 1477 7 view .LVU622
 2121 04f0 73B1     		cbz	r3, .L140	@ _4,
1479:../freertos/queue.c **** 					{
 2122              		.loc 1 1479 6 is_stmt 1 view .LVU623
 2123              	@ ../freertos/queue.c:1479: 					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) 
1479:../freertos/queue.c **** 					{
 2124              		.loc 1 1479 10 is_stmt 0 view .LVU624
 2125 04f2 04F11000 		add	r0, r4, #16	@, xQueue,
 2126 04f6 FFF7FEFF 		bl	xTaskRemoveFromEventList		@
 2127              	.LVL174:
 2128              	@ ../freertos/queue.c:1479: 					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) 
1479:../freertos/queue.c **** 					{
 2129              		.loc 1 1479 8 view .LVU625
 2130 04fa 48B1     		cbz	r0, .L140	@ tmp169,
1481:../freertos/queue.c **** 					}
 2131              		.loc 1 1481 7 is_stmt 1 view .LVU626
 2132 04fc 4FF0E023 		mov	r3, #-536813568	@ tmp140,
 2133 0500 4FF08052 		mov	r2, #268435456	@ tmp141,
ARM GAS  /tmp/ccjtHtwZ.s 			page 94


 2134 0504 C3F8042D 		str	r2, [r3, #3332]	@ tmp141, MEM[(volatile uint32_t *)3758157060B]
1481:../freertos/queue.c **** 					}
 2135              		.loc 1 1481 7 view .LVU627
 2136              		.syntax unified
 2137              	@ 1481 "../freertos/queue.c" 1
 2138 0508 BFF34F8F 		dsb	
 2139              	@ 0 "" 2
1481:../freertos/queue.c **** 					}
 2140              		.loc 1 1481 7 view .LVU628
 2141              	@ 1481 "../freertos/queue.c" 1
 2142 050c BFF36F8F 		isb
 2143              	@ 0 "" 2
1481:../freertos/queue.c **** 					}
 2144              		.loc 1 1481 39 view .LVU629
 2145              		.thumb
 2146              		.syntax unified
 2147              	.L140:
1490:../freertos/queue.c **** 				}
 2148              		.loc 1 1490 30 view .LVU630
1493:../freertos/queue.c **** 				return pdPASS;
 2149              		.loc 1 1493 5 view .LVU631
 2150 0510 FFF7FEFF 		bl	vPortExitCritical		@
 2151              	.LVL175:
1494:../freertos/queue.c **** 			}
 2152              		.loc 1 1494 5 view .LVU632
 2153              	@ ../freertos/queue.c:1494: 				return pdPASS;
1494:../freertos/queue.c **** 			}
 2154              		.loc 1 1494 12 is_stmt 0 view .LVU633
 2155 0514 0125     		movs	r5, #1	@ <retval>,
 2156              	.LVL176:
 2157              	.L135:
1494:../freertos/queue.c **** 			}
 2158              		.loc 1 1494 12 view .LVU634
 2159              	.LBE70:
 2160              	@ ../freertos/queue.c:1629: }
1629:../freertos/queue.c **** /*-----------------------------------------------------------*/
 2161              		.loc 1 1629 1 view .LVU635
 2162 0516 2846     		mov	r0, r5	@, <retval>
 2163 0518 04B0     		add	sp, sp, #16	@,,
 2164              	.LCFI24:
 2165              		.cfi_remember_state
 2166              		.cfi_def_cfa_offset 24
 2167              		@ sp needed	@
 2168 051a BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}	@
 2169              	.LVL177:
 2170              	.L137:
 2171              	.LCFI25:
 2172              		.cfi_restore_state
 2173              	.LBB71:
1498:../freertos/queue.c **** 				{
 2174              		.loc 1 1498 5 is_stmt 1 view .LVU636
 2175              	@ ../freertos/queue.c:1498: 				if( xTicksToWait == ( TickType_t ) 0 )
1498:../freertos/queue.c **** 				{
 2176              		.loc 1 1498 7 is_stmt 0 view .LVU637
 2177 051e DDF80480 		ldr	r8, [sp, #4]	@ xTicksToWait, xTicksToWait
 2178 0522 B8F1000F 		cmp	r8, #0	@ xTicksToWait
 2179 0526 03D1     		bne	.L143	@
ARM GAS  /tmp/ccjtHtwZ.s 			page 95


 2180              	.LVL178:
 2181              	.L164:
1498:../freertos/queue.c **** 				{
 2182              		.loc 1 1498 7 view .LVU638
 2183              	.LBE71:
1615:../freertos/queue.c **** 					}
 2184              		.loc 1 1615 7 is_stmt 1 view .LVU639
 2185 0528 FFF7FEFF 		bl	vPortExitCritical		@
 2186              	.LVL179:
 2187              	@ ../freertos/queue.c:1621: 				return errQUEUE_EMPTY;
1621:../freertos/queue.c **** 			}
 2188              		.loc 1 1621 12 is_stmt 0 view .LVU640
 2189 052c 0025     		movs	r5, #0	@ <retval>,
 2190 052e F2E7     		b	.L135		@
 2191              	.LVL180:
 2192              	.L143:
 2193              	.LBB72:
1515:../freertos/queue.c **** 				{
 2194              		.loc 1 1515 10 is_stmt 1 view .LVU641
 2195              	@ ../freertos/queue.c:1515: 				else if( xEntryTimeSet == pdFALSE )
1515:../freertos/queue.c **** 				{
 2196              		.loc 1 1515 12 is_stmt 0 view .LVU642
 2197 0530 17B9     		cbnz	r7, .L144	@ xEntryTimeSet,
1519:../freertos/queue.c **** 					xEntryTimeSet = pdTRUE;
 2198              		.loc 1 1519 6 is_stmt 1 view .LVU643
 2199 0532 02A8     		add	r0, sp, #8	@ tmp176,,
 2200 0534 FFF7FEFF 		bl	vTaskInternalSetTimeOutState		@
 2201              	.LVL181:
1520:../freertos/queue.c **** 				}
 2202              		.loc 1 1520 6 view .LVU644
 2203              	.L144:
1525:../freertos/queue.c **** 				}
 2204              		.loc 1 1525 30 view .LVU645
 2205              	.LBE72:
1529:../freertos/queue.c **** 
 2206              		.loc 1 1529 3 view .LVU646
 2207 0538 FFF7FEFF 		bl	vPortExitCritical		@
 2208              	.LVL182:
1534:../freertos/queue.c **** 		prvLockQueue( pxQueue );
 2209              		.loc 1 1534 3 view .LVU647
 2210 053c FFF7FEFF 		bl	vTaskSuspendAll		@
 2211              	.LVL183:
1535:../freertos/queue.c **** 
 2212              		.loc 1 1535 3 view .LVU648
 2213 0540 FFF7FEFF 		bl	vPortEnterCritical		@
 2214              	.LVL184:
1535:../freertos/queue.c **** 
 2215              		.loc 1 1535 3 view .LVU649
 2216 0544 94F84430 		ldrb	r3, [r4, #68]	@ zero_extendqisi2	@ MEM[(struct Queue_t *)xQueue_34(D)].cRxLock, MEM[(struct Q
 2217 0548 FF2B     		cmp	r3, #255	@ MEM[(struct Queue_t *)xQueue_34(D)].cRxLock,
1535:../freertos/queue.c **** 
 2218              		.loc 1 1535 3 view .LVU650
 2219 054a 08BF     		it	eq
 2220 054c 84F84460 		strbeq	r6, [r4, #68]	@ tmp165, MEM[(struct Queue_t *)xQueue_34(D)].cRxLock
1535:../freertos/queue.c **** 
 2221              		.loc 1 1535 3 view .LVU651
 2222 0550 94F84530 		ldrb	r3, [r4, #69]	@ zero_extendqisi2	@ MEM[(struct Queue_t *)xQueue_34(D)].cTxLock, MEM[(struct Q
ARM GAS  /tmp/ccjtHtwZ.s 			page 96


 2223 0554 FF2B     		cmp	r3, #255	@ MEM[(struct Queue_t *)xQueue_34(D)].cTxLock,
1535:../freertos/queue.c **** 
 2224              		.loc 1 1535 3 view .LVU652
 2225 0556 08BF     		it	eq
 2226 0558 84F84560 		strbeq	r6, [r4, #69]	@ tmp165, MEM[(struct Queue_t *)xQueue_34(D)].cTxLock
1535:../freertos/queue.c **** 
 2227              		.loc 1 1535 3 view .LVU653
 2228 055c FFF7FEFF 		bl	vPortExitCritical		@
 2229              	.LVL185:
1538:../freertos/queue.c **** 		{
 2230              		.loc 1 1538 3 view .LVU654
 2231              	@ ../freertos/queue.c:1538: 		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1538:../freertos/queue.c **** 		{
 2232              		.loc 1 1538 7 is_stmt 0 view .LVU655
 2233 0560 01A9     		add	r1, sp, #4	@ tmp177,,
 2234 0562 02A8     		add	r0, sp, #8	@ tmp178,,
 2235 0564 FFF7FEFF 		bl	xTaskCheckForTimeOut		@
 2236              	.LVL186:
 2237              	@ ../freertos/queue.c:1538: 		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1538:../freertos/queue.c **** 		{
 2238              		.loc 1 1538 5 view .LVU656
 2239 0568 50BB     		cbnz	r0, .L147	@ tmp170,
1544:../freertos/queue.c **** 			{
 2240              		.loc 1 1544 4 is_stmt 1 view .LVU657
 2241              	@ ../freertos/queue.c:1544: 			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1544:../freertos/queue.c **** 			{
 2242              		.loc 1 1544 8 is_stmt 0 view .LVU658
 2243 056a 2046     		mov	r0, r4	@, xQueue
 2244 056c FFF748FD 		bl	prvIsQueueEmpty		@
 2245              	.LVL187:
 2246              	@ ../freertos/queue.c:1544: 			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1544:../freertos/queue.c **** 			{
 2247              		.loc 1 1544 6 view .LVU659
 2248 0570 00B3     		cbz	r0, .L148	@ tmp171,
1546:../freertos/queue.c **** 
 2249              		.loc 1 1546 46 is_stmt 1 view .LVU660
1550:../freertos/queue.c **** 					{
 2250              		.loc 1 1550 6 view .LVU661
 2251              	@ ../freertos/queue.c:1550: 					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1550:../freertos/queue.c **** 					{
 2252              		.loc 1 1550 8 is_stmt 0 view .LVU662
 2253 0572 2368     		ldr	r3, [r4]	@ MEM[(struct Queue_t *)xQueue_34(D)].pcHead, MEM[(struct Queue_t *)xQueue_34(D)].pcH
 2254 0574 3BB9     		cbnz	r3, .L149	@ MEM[(struct Queue_t *)xQueue_34(D)].pcHead,
1552:../freertos/queue.c **** 						{
 2255              		.loc 1 1552 7 is_stmt 1 view .LVU663
 2256 0576 FFF7FEFF 		bl	vPortEnterCritical		@
 2257              	.LVL188:
1554:../freertos/queue.c **** 						}
 2258              		.loc 1 1554 8 view .LVU664
 2259              	@ ../freertos/queue.c:1554: 							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemapho
1554:../freertos/queue.c **** 						}
 2260              		.loc 1 1554 31 is_stmt 0 view .LVU665
 2261 057a A068     		ldr	r0, [r4, #8]	@, MEM[(struct Queue_t *)xQueue_34(D)].u.xSemaphore.xMutexHolder
 2262 057c FFF7FEFF 		bl	xTaskPriorityInherit		@
 2263              	.LVL189:
 2264 0580 0546     		mov	r5, r0	@ <retval>, tmp172
 2265              	.LVL190:
ARM GAS  /tmp/ccjtHtwZ.s 			page 97


1556:../freertos/queue.c **** 					}
 2266              		.loc 1 1556 7 is_stmt 1 view .LVU666
 2267 0582 FFF7FEFF 		bl	vPortExitCritical		@
 2268              	.LVL191:
 2269              	.L149:
1560:../freertos/queue.c **** 					}
 2270              		.loc 1 1560 31 view .LVU667
1565:../freertos/queue.c **** 				prvUnlockQueue( pxQueue );
 2271              		.loc 1 1565 5 view .LVU668
 2272 0586 0199     		ldr	r1, [sp, #4]	@, xTicksToWait
 2273 0588 04F12400 		add	r0, r4, #36	@, xQueue,
 2274 058c FFF7FEFF 		bl	vTaskPlaceOnEventList		@
 2275              	.LVL192:
1566:../freertos/queue.c **** 				if( xTaskResumeAll() == pdFALSE )
 2276              		.loc 1 1566 5 view .LVU669
 2277 0590 2046     		mov	r0, r4	@, xQueue
 2278 0592 FFF789FD 		bl	prvUnlockQueue		@
 2279              	.LVL193:
1567:../freertos/queue.c **** 				{
 2280              		.loc 1 1567 5 view .LVU670
 2281              	@ ../freertos/queue.c:1567: 				if( xTaskResumeAll() == pdFALSE )
1567:../freertos/queue.c **** 				{
 2282              		.loc 1 1567 9 is_stmt 0 view .LVU671
 2283 0596 FFF7FEFF 		bl	xTaskResumeAll		@
 2284              	.LVL194:
 2285              	@ ../freertos/queue.c:1567: 				if( xTaskResumeAll() == pdFALSE )
1567:../freertos/queue.c **** 				{
 2286              		.loc 1 1567 7 view .LVU672
 2287 059a 48B9     		cbnz	r0, .L150	@ tmp173,
1569:../freertos/queue.c **** 				}
 2288              		.loc 1 1569 6 is_stmt 1 view .LVU673
 2289 059c 4FF0E023 		mov	r3, #-536813568	@ tmp158,
 2290 05a0 4FF08052 		mov	r2, #268435456	@ tmp159,
 2291 05a4 C3F8042D 		str	r2, [r3, #3332]	@ tmp159, MEM[(volatile uint32_t *)3758157060B]
1569:../freertos/queue.c **** 				}
 2292              		.loc 1 1569 6 view .LVU674
 2293              		.syntax unified
 2294              	@ 1569 "../freertos/queue.c" 1
 2295 05a8 BFF34F8F 		dsb	
 2296              	@ 0 "" 2
1569:../freertos/queue.c **** 				}
 2297              		.loc 1 1569 6 view .LVU675
 2298              	@ 1569 "../freertos/queue.c" 1
 2299 05ac BFF36F8F 		isb
 2300              	@ 0 "" 2
1569:../freertos/queue.c **** 				}
 2301              		.loc 1 1569 28 view .LVU676
 2302              		.thumb
 2303              		.syntax unified
 2304              	.L150:
 2305              	@ ../freertos/queue.c:1415: {
1415:../freertos/queue.c **** BaseType_t xEntryTimeSet = pdFALSE;
 2306              		.loc 1 1415 1 is_stmt 0 view .LVU677
 2307 05b0 0127     		movs	r7, #1	@ xEntryTimeSet,
 2308 05b2 91E7     		b	.L136		@
 2309              	.L148:
1580:../freertos/queue.c **** 				( void ) xTaskResumeAll();
ARM GAS  /tmp/ccjtHtwZ.s 			page 98


 2310              		.loc 1 1580 5 is_stmt 1 view .LVU678
 2311 05b4 2046     		mov	r0, r4	@, xQueue
 2312 05b6 FFF777FD 		bl	prvUnlockQueue		@
 2313              	.LVL195:
1581:../freertos/queue.c **** 			}
 2314              		.loc 1 1581 5 view .LVU679
 2315              	@ ../freertos/queue.c:1581: 				( void ) xTaskResumeAll();
1581:../freertos/queue.c **** 			}
 2316              		.loc 1 1581 14 is_stmt 0 view .LVU680
 2317 05ba FFF7FEFF 		bl	xTaskResumeAll		@
 2318              	.LVL196:
 2319 05be F7E7     		b	.L150		@
 2320              	.L147:
1587:../freertos/queue.c **** 			( void ) xTaskResumeAll();
 2321              		.loc 1 1587 4 is_stmt 1 view .LVU681
 2322 05c0 2046     		mov	r0, r4	@, xQueue
 2323 05c2 FFF771FD 		bl	prvUnlockQueue		@
 2324              	.LVL197:
1588:../freertos/queue.c **** 
 2325              		.loc 1 1588 4 view .LVU682
 2326              	@ ../freertos/queue.c:1588: 			( void ) xTaskResumeAll();
1588:../freertos/queue.c **** 
 2327              		.loc 1 1588 13 is_stmt 0 view .LVU683
 2328 05c6 FFF7FEFF 		bl	xTaskResumeAll		@
 2329              	.LVL198:
1594:../freertos/queue.c **** 			{
 2330              		.loc 1 1594 4 is_stmt 1 view .LVU684
 2331              	@ ../freertos/queue.c:1594: 			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1594:../freertos/queue.c **** 			{
 2332              		.loc 1 1594 8 is_stmt 0 view .LVU685
 2333 05ca 2046     		mov	r0, r4	@, xQueue
 2334 05cc FFF718FD 		bl	prvIsQueueEmpty		@
 2335              	.LVL199:
 2336              	@ ../freertos/queue.c:1594: 			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1594:../freertos/queue.c **** 			{
 2337              		.loc 1 1594 6 view .LVU686
 2338 05d0 0028     		cmp	r0, #0	@ tmp174
 2339 05d2 EDD0     		beq	.L150	@
1601:../freertos/queue.c **** 					{
 2340              		.loc 1 1601 6 is_stmt 1 view .LVU687
 2341              	@ ../freertos/queue.c:1601: 					if( xInheritanceOccurred != pdFALSE )
1601:../freertos/queue.c **** 					{
 2342              		.loc 1 1601 8 is_stmt 0 view .LVU688
 2343 05d4 002D     		cmp	r5, #0	@ <retval>
 2344 05d6 9ED0     		beq	.L135	@
1603:../freertos/queue.c **** 						{
 2345              		.loc 1 1603 7 is_stmt 1 view .LVU689
 2346 05d8 FFF7FEFF 		bl	vPortEnterCritical		@
 2347              	.LVL200:
 2348              	.LBB73:
1605:../freertos/queue.c **** 
 2349              		.loc 1 1605 8 view .LVU690
1612:../freertos/queue.c **** 							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPri
 2350              		.loc 1 1612 8 view .LVU691
 2351              	.LBB74:
 2352              	.LBI74:
2045:../freertos/queue.c **** 	{
ARM GAS  /tmp/ccjtHtwZ.s 			page 99


 2353              		.loc 1 2045 21 view .LVU692
 2354              	.LBB75:
2047:../freertos/queue.c **** 
 2355              		.loc 1 2047 2 view .LVU693
2055:../freertos/queue.c **** 		{
 2356              		.loc 1 2055 3 view .LVU694
 2357              	@ ../freertos/queue.c:2055: 		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) >
2055:../freertos/queue.c **** 		{
 2358              		.loc 1 2055 7 is_stmt 0 view .LVU695
 2359 05dc 616A     		ldr	r1, [r4, #36]	@ uxHighestPriorityOfWaitingTasks, MEM[(const struct Queue_t *)xQueue_34(D)].xTa
 2360              	@ ../freertos/queue.c:2055: 		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) >
2055:../freertos/queue.c **** 		{
 2361              		.loc 1 2055 5 view .LVU696
 2362 05de 19B1     		cbz	r1, .L151	@ uxHighestPriorityOfWaitingTasks,
2057:../freertos/queue.c **** 		}
 2363              		.loc 1 2057 4 is_stmt 1 view .LVU697
 2364              	@ ../freertos/queue.c:2057: 			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITI
2057:../freertos/queue.c **** 		}
 2365              		.loc 1 2057 93 is_stmt 0 view .LVU698
 2366 05e0 236B     		ldr	r3, [r4, #48]	@ MEM[(const struct Queue_t *)xQueue_34(D)].xTasksWaitingToReceive.xListEnd.pxNe
 2367              	@ ../freertos/queue.c:2057: 			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITI
2057:../freertos/queue.c **** 		}
 2368              		.loc 1 2057 36 view .LVU699
 2369 05e2 1968     		ldr	r1, [r3]	@ _82->xItemValue, _82->xItemValue
 2370 05e4 C1F10501 		rsb	r1, r1, #5	@ uxHighestPriorityOfWaitingTasks, _82->xItemValue,
 2371              	.LVL201:
 2372              	.L151:
2064:../freertos/queue.c **** 	}
 2373              		.loc 1 2064 3 is_stmt 1 view .LVU700
2064:../freertos/queue.c **** 	}
 2374              		.loc 1 2064 3 is_stmt 0 view .LVU701
 2375              	.LBE75:
 2376              	.LBE74:
1613:../freertos/queue.c **** 						}
 2377              		.loc 1 1613 8 is_stmt 1 view .LVU702
 2378 05e8 A068     		ldr	r0, [r4, #8]	@, MEM[(struct Queue_t *)xQueue_34(D)].u.xSemaphore.xMutexHolder
 2379 05ea FFF7FEFF 		bl	vTaskPriorityDisinheritAfterTimeout		@
 2380              	.LVL202:
1613:../freertos/queue.c **** 						}
 2381              		.loc 1 1613 8 is_stmt 0 view .LVU703
 2382 05ee 9BE7     		b	.L164		@
 2383              	.LBE73:
 2384              		.cfi_endproc
 2385              	.LFE17:
 2386              		.size	xQueueSemaphoreTake, .-xQueueSemaphoreTake
 2387              		.align	1
 2388              		.global	xQueueTakeMutexRecursive
 2389              		.syntax unified
 2390              		.thumb
 2391              		.thumb_func
 2392              		.type	xQueueTakeMutexRecursive, %function
 2393              	xQueueTakeMutexRecursive:
 2394              	.LVL203:
 2395              	.LFB11:
 652:../freertos/queue.c **** 	BaseType_t xReturn;
 2396              		.loc 1 652 2 is_stmt 1 view -0
 2397              		.cfi_startproc
ARM GAS  /tmp/ccjtHtwZ.s 			page 100


 2398              		@ args = 0, pretend = 0, frame = 0
 2399              		@ frame_needed = 0, uses_anonymous_args = 0
 653:../freertos/queue.c **** 	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 2400              		.loc 1 653 2 view .LVU705
 654:../freertos/queue.c **** 
 2401              		.loc 1 654 2 view .LVU706
 656:../freertos/queue.c **** 
 2402              		.loc 1 656 26 view .LVU707
 661:../freertos/queue.c **** 
 2403              		.loc 1 661 39 view .LVU708
 663:../freertos/queue.c **** 		{
 2404              		.loc 1 663 3 view .LVU709
 2405              	@ ../freertos/queue.c:652: 	{
 652:../freertos/queue.c **** 	BaseType_t xReturn;
 2406              		.loc 1 652 2 is_stmt 0 view .LVU710
 2407 05f0 70B5     		push	{r4, r5, r6, lr}	@
 2408              	.LCFI26:
 2409              		.cfi_def_cfa_offset 16
 2410              		.cfi_offset 4, -16
 2411              		.cfi_offset 5, -12
 2412              		.cfi_offset 6, -8
 2413              		.cfi_offset 14, -4
 2414              	@ ../freertos/queue.c:663: 		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() 
 663:../freertos/queue.c **** 		{
 2415              		.loc 1 663 28 view .LVU711
 2416 05f2 8668     		ldr	r6, [r0, #8]	@ _1, MEM[(struct Queue_t *)xMutex_9(D)].u.xSemaphore.xMutexHolder
 2417              	@ ../freertos/queue.c:652: 	{
 652:../freertos/queue.c **** 	BaseType_t xReturn;
 2418              		.loc 1 652 2 view .LVU712
 2419 05f4 0446     		mov	r4, r0	@ xMutex, tmp127
 2420 05f6 0D46     		mov	r5, r1	@ xTicksToWait, tmp128
 2421              	@ ../freertos/queue.c:663: 		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() 
 663:../freertos/queue.c **** 		{
 2422              		.loc 1 663 45 view .LVU713
 2423 05f8 FFF7FEFF 		bl	xTaskGetCurrentTaskHandle		@
 2424              	.LVL204:
 2425              	@ ../freertos/queue.c:663: 		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() 
 663:../freertos/queue.c **** 		{
 2426              		.loc 1 663 5 view .LVU714
 2427 05fc 8642     		cmp	r6, r0	@ _1, tmp129
 2428 05fe 04D1     		bne	.L166		@,
 665:../freertos/queue.c **** 			xReturn = pdPASS;
 2429              		.loc 1 665 4 is_stmt 1 view .LVU715
 2430              	@ ../freertos/queue.c:666: 			xReturn = pdPASS;
 666:../freertos/queue.c **** 		}
 2431              		.loc 1 666 12 is_stmt 0 view .LVU716
 2432 0600 0120     		movs	r0, #1	@ <retval>,
 2433              	@ ../freertos/queue.c:665: 			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 665:../freertos/queue.c **** 			xReturn = pdPASS;
 2434              		.loc 1 665 50 view .LVU717
 2435 0602 E368     		ldr	r3, [r4, #12]	@ MEM[(struct Queue_t *)xMutex_9(D)].u.xSemaphore.uxRecursiveCallCount, MEM[(str
 2436 0604 0133     		adds	r3, r3, #1	@ tmp122, MEM[(struct Queue_t *)xMutex_9(D)].u.xSemaphore.uxRecursiveCallCount,
 2437 0606 E360     		str	r3, [r4, #12]	@ tmp122, MEM[(struct Queue_t *)xMutex_9(D)].u.xSemaphore.uxRecursiveCallCount
 666:../freertos/queue.c **** 		}
 2438              		.loc 1 666 4 is_stmt 1 view .LVU718
 2439              	.LVL205:
 2440              	.L165:
ARM GAS  /tmp/ccjtHtwZ.s 			page 101


 2441              	@ ../freertos/queue.c:686: 	}
 686:../freertos/queue.c **** 
 2442              		.loc 1 686 2 is_stmt 0 view .LVU719
 2443 0608 70BD     		pop	{r4, r5, r6, pc}	@
 2444              	.LVL206:
 2445              	.L166:
 670:../freertos/queue.c **** 
 2446              		.loc 1 670 4 is_stmt 1 view .LVU720
 2447              	@ ../freertos/queue.c:670: 			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 670:../freertos/queue.c **** 
 2448              		.loc 1 670 14 is_stmt 0 view .LVU721
 2449 060a 2946     		mov	r1, r5	@, xTicksToWait
 2450 060c 2046     		mov	r0, r4	@, xMutex
 2451 060e FFF7FEFF 		bl	xQueueSemaphoreTake		@
 2452              	.LVL207:
 675:../freertos/queue.c **** 			{
 2453              		.loc 1 675 4 is_stmt 1 view .LVU722
 2454              	@ ../freertos/queue.c:675: 			if( xReturn != pdFAIL )
 675:../freertos/queue.c **** 			{
 2455              		.loc 1 675 6 is_stmt 0 view .LVU723
 2456 0612 0028     		cmp	r0, #0	@ <retval>
 2457 0614 F8D0     		beq	.L165	@
 677:../freertos/queue.c **** 			}
 2458              		.loc 1 677 5 is_stmt 1 view .LVU724
 2459              	@ ../freertos/queue.c:677: 				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 677:../freertos/queue.c **** 			}
 2460              		.loc 1 677 51 is_stmt 0 view .LVU725
 2461 0616 E368     		ldr	r3, [r4, #12]	@ MEM[(struct Queue_t *)xMutex_9(D)].u.xSemaphore.uxRecursiveCallCount, MEM[(str
 2462 0618 0133     		adds	r3, r3, #1	@ tmp124, MEM[(struct Queue_t *)xMutex_9(D)].u.xSemaphore.uxRecursiveCallCount,
 2463 061a E360     		str	r3, [r4, #12]	@ tmp124, MEM[(struct Queue_t *)xMutex_9(D)].u.xSemaphore.uxRecursiveCallCount
 681:../freertos/queue.c **** 			}
 2464              		.loc 1 681 48 is_stmt 1 view .LVU726
 685:../freertos/queue.c **** 	}
 2465              		.loc 1 685 3 view .LVU727
 2466              	@ ../freertos/queue.c:685: 		return xReturn;
 685:../freertos/queue.c **** 	}
 2467              		.loc 1 685 10 is_stmt 0 view .LVU728
 2468 061c F4E7     		b	.L165		@
 2469              		.cfi_endproc
 2470              	.LFE11:
 2471              		.size	xQueueTakeMutexRecursive, .-xQueueTakeMutexRecursive
 2472              		.align	1
 2473              		.global	xQueuePeek
 2474              		.syntax unified
 2475              		.thumb
 2476              		.thumb_func
 2477              		.type	xQueuePeek, %function
 2478              	xQueuePeek:
 2479              	.LVL208:
 2480              	.LFB18:
1633:../freertos/queue.c **** BaseType_t xEntryTimeSet = pdFALSE;
 2481              		.loc 1 1633 1 is_stmt 1 view -0
 2482              		.cfi_startproc
 2483              		@ args = 0, pretend = 0, frame = 16
 2484              		@ frame_needed = 0, uses_anonymous_args = 0
1634:../freertos/queue.c **** TimeOut_t xTimeOut;
 2485              		.loc 1 1634 1 view .LVU730
ARM GAS  /tmp/ccjtHtwZ.s 			page 102


1635:../freertos/queue.c **** int8_t *pcOriginalReadPosition;
 2486              		.loc 1 1635 1 view .LVU731
1636:../freertos/queue.c **** Queue_t * const pxQueue = xQueue;
 2487              		.loc 1 1636 1 view .LVU732
1637:../freertos/queue.c **** 
 2488              		.loc 1 1637 1 view .LVU733
 2489              	@ ../freertos/queue.c:1633: {
1633:../freertos/queue.c **** BaseType_t xEntryTimeSet = pdFALSE;
 2490              		.loc 1 1633 1 is_stmt 0 view .LVU734
 2491 061e 2DE9FF41 		push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}	@
 2492              	.LCFI27:
 2493              		.cfi_def_cfa_offset 40
 2494              		.cfi_offset 4, -24
 2495              		.cfi_offset 5, -20
 2496              		.cfi_offset 6, -16
 2497              		.cfi_offset 7, -12
 2498              		.cfi_offset 8, -8
 2499              		.cfi_offset 14, -4
 2500              	@ ../freertos/queue.c:1634: BaseType_t xEntryTimeSet = pdFALSE;
1634:../freertos/queue.c **** TimeOut_t xTimeOut;
 2501              		.loc 1 1634 12 view .LVU735
 2502 0622 0027     		movs	r7, #0	@ xEntryTimeSet,
 2503              	@ ../freertos/queue.c:1633: {
1633:../freertos/queue.c **** BaseType_t xEntryTimeSet = pdFALSE;
 2504              		.loc 1 1633 1 view .LVU736
 2505 0624 0446     		mov	r4, r0	@ xQueue, tmp156
 2506              	.LVL209:
1633:../freertos/queue.c **** BaseType_t xEntryTimeSet = pdFALSE;
 2507              		.loc 1 1633 1 view .LVU737
 2508 0626 0E46     		mov	r6, r1	@ pvBuffer, tmp157
 2509              	@ ../freertos/queue.c:1731: 		prvLockQueue( pxQueue );
1731:../freertos/queue.c **** 
 2510              		.loc 1 1731 3 view .LVU738
 2511 0628 B846     		mov	r8, r7	@ tmp154, xEntryTimeSet
 2512              	@ ../freertos/queue.c:1633: {
1633:../freertos/queue.c **** BaseType_t xEntryTimeSet = pdFALSE;
 2513              		.loc 1 1633 1 view .LVU739
 2514 062a 0192     		str	r2, [sp, #4]	@ xTicksToWait, xTicksToWait
 2515              	.LVL210:
 2516              	.L172:
1640:../freertos/queue.c **** 
 2517              		.loc 1 1640 29 is_stmt 1 view .LVU740
1644:../freertos/queue.c **** 
 2518              		.loc 1 1644 100 view .LVU741
1649:../freertos/queue.c **** 	}
 2519              		.loc 1 1649 104 view .LVU742
1657:../freertos/queue.c **** 	{
 2520              		.loc 1 1657 2 view .LVU743
1659:../freertos/queue.c **** 		{
 2521              		.loc 1 1659 3 view .LVU744
 2522 062c FFF7FEFF 		bl	vPortEnterCritical		@
 2523              	.LVL211:
 2524              	.LBB76:
1661:../freertos/queue.c **** 
 2525              		.loc 1 1661 4 view .LVU745
 2526              	@ ../freertos/queue.c:1661: 			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1661:../freertos/queue.c **** 
ARM GAS  /tmp/ccjtHtwZ.s 			page 103


 2527              		.loc 1 1661 22 is_stmt 0 view .LVU746
 2528 0630 A36B     		ldr	r3, [r4, #56]	@ uxMessagesWaiting, MEM[(struct Queue_t *)xQueue_23(D)].uxMessagesWaiting
 2529              	.LVL212:
1665:../freertos/queue.c **** 			{
 2530              		.loc 1 1665 4 is_stmt 1 view .LVU747
 2531              	@ ../freertos/queue.c:1665: 			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1665:../freertos/queue.c **** 			{
 2532              		.loc 1 1665 6 is_stmt 0 view .LVU748
 2533 0632 E3B1     		cbz	r3, .L173	@ uxMessagesWaiting,
1670:../freertos/queue.c **** 
 2534              		.loc 1 1670 5 is_stmt 1 view .LVU749
 2535              	@ ../freertos/queue.c:1672: 				prvCopyDataFromQueue( pxQueue, pvBuffer );
1672:../freertos/queue.c **** 				traceQUEUE_PEEK( pxQueue );
 2536              		.loc 1 1672 5 is_stmt 0 view .LVU750
 2537 0634 3146     		mov	r1, r6	@, pvBuffer
 2538 0636 2046     		mov	r0, r4	@, xQueue
 2539              	@ ../freertos/queue.c:1670: 				pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
1670:../freertos/queue.c **** 
 2540              		.loc 1 1670 28 view .LVU751
 2541 0638 E568     		ldr	r5, [r4, #12]	@ pcOriginalReadPosition, MEM[(struct Queue_t *)xQueue_23(D)].u.xQueue.pcReadFro
 2542              	.LVL213:
1672:../freertos/queue.c **** 				traceQUEUE_PEEK( pxQueue );
 2543              		.loc 1 1672 5 is_stmt 1 view .LVU752
 2544 063a FFF721FD 		bl	prvCopyDataFromQueue		@
 2545              	.LVL214:
1673:../freertos/queue.c **** 
 2546              		.loc 1 1673 31 view .LVU753
1676:../freertos/queue.c **** 
 2547              		.loc 1 1676 5 view .LVU754
 2548              	@ ../freertos/queue.c:1680: 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pd
1680:../freertos/queue.c **** 				{
 2549              		.loc 1 1680 9 is_stmt 0 view .LVU755
 2550 063e 636A     		ldr	r3, [r4, #36]	@ _1, MEM[(struct Queue_t *)xQueue_23(D)].xTasksWaitingToReceive.uxNumberOfItems
 2551              	@ ../freertos/queue.c:1676: 				pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
1676:../freertos/queue.c **** 
 2552              		.loc 1 1676 34 view .LVU756
 2553 0640 E560     		str	r5, [r4, #12]	@ pcOriginalReadPosition, MEM[(struct Queue_t *)xQueue_23(D)].u.xQueue.pcReadFro
1680:../freertos/queue.c **** 				{
 2554              		.loc 1 1680 5 is_stmt 1 view .LVU757
 2555              	@ ../freertos/queue.c:1680: 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pd
1680:../freertos/queue.c **** 				{
 2556              		.loc 1 1680 7 is_stmt 0 view .LVU758
 2557 0642 73B1     		cbz	r3, .L175	@ _1,
1682:../freertos/queue.c **** 					{
 2558              		.loc 1 1682 6 is_stmt 1 view .LVU759
 2559              	@ ../freertos/queue.c:1682: 					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive )
1682:../freertos/queue.c **** 					{
 2560              		.loc 1 1682 10 is_stmt 0 view .LVU760
 2561 0644 04F12400 		add	r0, r4, #36	@, xQueue,
 2562 0648 FFF7FEFF 		bl	xTaskRemoveFromEventList		@
 2563              	.LVL215:
 2564              	@ ../freertos/queue.c:1682: 					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive )
1682:../freertos/queue.c **** 					{
 2565              		.loc 1 1682 8 view .LVU761
 2566 064c 48B1     		cbz	r0, .L175	@ tmp158,
1685:../freertos/queue.c **** 					}
 2567              		.loc 1 1685 7 is_stmt 1 view .LVU762
ARM GAS  /tmp/ccjtHtwZ.s 			page 104


 2568 064e 4FF0E023 		mov	r3, #-536813568	@ tmp132,
 2569 0652 4FF08052 		mov	r2, #268435456	@ tmp133,
 2570 0656 C3F8042D 		str	r2, [r3, #3332]	@ tmp133, MEM[(volatile uint32_t *)3758157060B]
1685:../freertos/queue.c **** 					}
 2571              		.loc 1 1685 7 view .LVU763
 2572              		.syntax unified
 2573              	@ 1685 "../freertos/queue.c" 1
 2574 065a BFF34F8F 		dsb	
 2575              	@ 0 "" 2
1685:../freertos/queue.c **** 					}
 2576              		.loc 1 1685 7 view .LVU764
 2577              	@ 1685 "../freertos/queue.c" 1
 2578 065e BFF36F8F 		isb
 2579              	@ 0 "" 2
1685:../freertos/queue.c **** 					}
 2580              		.loc 1 1685 39 view .LVU765
 2581              		.thumb
 2582              		.syntax unified
 2583              	.L175:
1694:../freertos/queue.c **** 				}
 2584              		.loc 1 1694 30 view .LVU766
1697:../freertos/queue.c **** 				return pdPASS;
 2585              		.loc 1 1697 5 view .LVU767
 2586 0662 FFF7FEFF 		bl	vPortExitCritical		@
 2587              	.LVL216:
1698:../freertos/queue.c **** 			}
 2588              		.loc 1 1698 5 view .LVU768
 2589              	@ ../freertos/queue.c:1698: 				return pdPASS;
1698:../freertos/queue.c **** 			}
 2590              		.loc 1 1698 12 is_stmt 0 view .LVU769
 2591 0666 0120     		movs	r0, #1	@ <retval>,
 2592              	.LVL217:
 2593              	.L171:
1698:../freertos/queue.c **** 			}
 2594              		.loc 1 1698 12 view .LVU770
 2595              	.LBE76:
 2596              	@ ../freertos/queue.c:1778: }
1778:../freertos/queue.c **** /*-----------------------------------------------------------*/
 2597              		.loc 1 1778 1 view .LVU771
 2598 0668 04B0     		add	sp, sp, #16	@,,
 2599              	.LCFI28:
 2600              		.cfi_remember_state
 2601              		.cfi_def_cfa_offset 24
 2602              		@ sp needed	@
 2603 066a BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}	@
 2604              	.LVL218:
 2605              	.L173:
 2606              	.LCFI29:
 2607              		.cfi_restore_state
 2608              	.LBB77:
1702:../freertos/queue.c **** 				{
 2609              		.loc 1 1702 5 is_stmt 1 view .LVU772
 2610              	@ ../freertos/queue.c:1702: 				if( xTicksToWait == ( TickType_t ) 0 )
1702:../freertos/queue.c **** 				{
 2611              		.loc 1 1702 7 is_stmt 0 view .LVU773
 2612 066e 019D     		ldr	r5, [sp, #4]	@ xTicksToWait, xTicksToWait
 2613 0670 1DB9     		cbnz	r5, .L178	@ xTicksToWait,
ARM GAS  /tmp/ccjtHtwZ.s 			page 105


1706:../freertos/queue.c **** 					traceQUEUE_PEEK_FAILED( pxQueue );
 2614              		.loc 1 1706 6 is_stmt 1 view .LVU774
 2615 0672 FFF7FEFF 		bl	vPortExitCritical		@
 2616              	.LVL219:
1707:../freertos/queue.c **** 					return errQUEUE_EMPTY;
 2617              		.loc 1 1707 39 view .LVU775
1708:../freertos/queue.c **** 				}
 2618              		.loc 1 1708 6 view .LVU776
 2619              	.L192:
1708:../freertos/queue.c **** 				}
 2620              		.loc 1 1708 6 is_stmt 0 view .LVU777
 2621              	.LBE77:
 2622              	@ ../freertos/queue.c:1770: 				return errQUEUE_EMPTY;
1770:../freertos/queue.c **** 			}
 2623              		.loc 1 1770 12 view .LVU778
 2624 0676 0020     		movs	r0, #0	@ <retval>,
 2625 0678 F6E7     		b	.L171		@
 2626              	.LVL220:
 2627              	.L178:
 2628              	.LBB78:
1710:../freertos/queue.c **** 				{
 2629              		.loc 1 1710 10 is_stmt 1 view .LVU779
 2630              	@ ../freertos/queue.c:1710: 				else if( xEntryTimeSet == pdFALSE )
1710:../freertos/queue.c **** 				{
 2631              		.loc 1 1710 12 is_stmt 0 view .LVU780
 2632 067a 17B9     		cbnz	r7, .L179	@ xEntryTimeSet,
1715:../freertos/queue.c **** 					xEntryTimeSet = pdTRUE;
 2633              		.loc 1 1715 6 is_stmt 1 view .LVU781
 2634 067c 02A8     		add	r0, sp, #8	@ tmp164,,
 2635 067e FFF7FEFF 		bl	vTaskInternalSetTimeOutState		@
 2636              	.LVL221:
1716:../freertos/queue.c **** 				}
 2637              		.loc 1 1716 6 view .LVU782
 2638              	.L179:
1721:../freertos/queue.c **** 				}
 2639              		.loc 1 1721 30 view .LVU783
 2640              	.LBE78:
1725:../freertos/queue.c **** 
 2641              		.loc 1 1725 3 view .LVU784
 2642 0682 FFF7FEFF 		bl	vPortExitCritical		@
 2643              	.LVL222:
1730:../freertos/queue.c **** 		prvLockQueue( pxQueue );
 2644              		.loc 1 1730 3 view .LVU785
 2645 0686 FFF7FEFF 		bl	vTaskSuspendAll		@
 2646              	.LVL223:
1731:../freertos/queue.c **** 
 2647              		.loc 1 1731 3 view .LVU786
 2648 068a FFF7FEFF 		bl	vPortEnterCritical		@
 2649              	.LVL224:
1731:../freertos/queue.c **** 
 2650              		.loc 1 1731 3 view .LVU787
 2651 068e 94F84430 		ldrb	r3, [r4, #68]	@ zero_extendqisi2	@ MEM[(struct Queue_t *)xQueue_23(D)].cRxLock, MEM[(struct Q
 2652 0692 FF2B     		cmp	r3, #255	@ MEM[(struct Queue_t *)xQueue_23(D)].cRxLock,
1731:../freertos/queue.c **** 
 2653              		.loc 1 1731 3 view .LVU788
 2654 0694 08BF     		it	eq
 2655 0696 84F84480 		strbeq	r8, [r4, #68]	@ tmp154, MEM[(struct Queue_t *)xQueue_23(D)].cRxLock
ARM GAS  /tmp/ccjtHtwZ.s 			page 106


1731:../freertos/queue.c **** 
 2656              		.loc 1 1731 3 view .LVU789
 2657 069a 94F84530 		ldrb	r3, [r4, #69]	@ zero_extendqisi2	@ MEM[(struct Queue_t *)xQueue_23(D)].cTxLock, MEM[(struct Q
 2658 069e FF2B     		cmp	r3, #255	@ MEM[(struct Queue_t *)xQueue_23(D)].cTxLock,
1731:../freertos/queue.c **** 
 2659              		.loc 1 1731 3 view .LVU790
 2660 06a0 08BF     		it	eq
 2661 06a2 84F84580 		strbeq	r8, [r4, #69]	@ tmp154, MEM[(struct Queue_t *)xQueue_23(D)].cTxLock
1731:../freertos/queue.c **** 
 2662              		.loc 1 1731 3 view .LVU791
 2663 06a6 FFF7FEFF 		bl	vPortExitCritical		@
 2664              	.LVL225:
1734:../freertos/queue.c **** 		{
 2665              		.loc 1 1734 3 view .LVU792
 2666              	@ ../freertos/queue.c:1734: 		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1734:../freertos/queue.c **** 		{
 2667              		.loc 1 1734 7 is_stmt 0 view .LVU793
 2668 06aa 01A9     		add	r1, sp, #4	@ tmp165,,
 2669 06ac 02A8     		add	r0, sp, #8	@ tmp166,,
 2670 06ae FFF7FEFF 		bl	xTaskCheckForTimeOut		@
 2671              	.LVL226:
 2672              	@ ../freertos/queue.c:1734: 		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1734:../freertos/queue.c **** 		{
 2673              		.loc 1 1734 5 view .LVU794
 2674 06b2 00BB     		cbnz	r0, .L182	@ tmp159,
1738:../freertos/queue.c **** 			{
 2675              		.loc 1 1738 4 is_stmt 1 view .LVU795
 2676              	@ ../freertos/queue.c:1738: 			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1738:../freertos/queue.c **** 			{
 2677              		.loc 1 1738 8 is_stmt 0 view .LVU796
 2678 06b4 2046     		mov	r0, r4	@, xQueue
 2679 06b6 FFF7A3FC 		bl	prvIsQueueEmpty		@
 2680              	.LVL227:
 2681              	@ ../freertos/queue.c:1738: 			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1738:../freertos/queue.c **** 			{
 2682              		.loc 1 1738 6 view .LVU797
 2683 06ba B0B1     		cbz	r0, .L183	@ tmp160,
1740:../freertos/queue.c **** 				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 2684              		.loc 1 1740 43 is_stmt 1 view .LVU798
1741:../freertos/queue.c **** 				prvUnlockQueue( pxQueue );
 2685              		.loc 1 1741 5 view .LVU799
 2686 06bc 0199     		ldr	r1, [sp, #4]	@, xTicksToWait
 2687 06be 04F12400 		add	r0, r4, #36	@, xQueue,
 2688 06c2 FFF7FEFF 		bl	vTaskPlaceOnEventList		@
 2689              	.LVL228:
1742:../freertos/queue.c **** 				if( xTaskResumeAll() == pdFALSE )
 2690              		.loc 1 1742 5 view .LVU800
 2691 06c6 2046     		mov	r0, r4	@, xQueue
 2692 06c8 FFF7EEFC 		bl	prvUnlockQueue		@
 2693              	.LVL229:
1743:../freertos/queue.c **** 				{
 2694              		.loc 1 1743 5 view .LVU801
 2695              	@ ../freertos/queue.c:1743: 				if( xTaskResumeAll() == pdFALSE )
1743:../freertos/queue.c **** 				{
 2696              		.loc 1 1743 9 is_stmt 0 view .LVU802
 2697 06cc FFF7FEFF 		bl	xTaskResumeAll		@
 2698              	.LVL230:
ARM GAS  /tmp/ccjtHtwZ.s 			page 107


 2699              	@ ../freertos/queue.c:1743: 				if( xTaskResumeAll() == pdFALSE )
1743:../freertos/queue.c **** 				{
 2700              		.loc 1 1743 7 view .LVU803
 2701 06d0 48B9     		cbnz	r0, .L185	@ tmp161,
1745:../freertos/queue.c **** 				}
 2702              		.loc 1 1745 6 is_stmt 1 view .LVU804
 2703 06d2 4FF0E023 		mov	r3, #-536813568	@ tmp149,
 2704 06d6 4FF08052 		mov	r2, #268435456	@ tmp150,
 2705 06da C3F8042D 		str	r2, [r3, #3332]	@ tmp150, MEM[(volatile uint32_t *)3758157060B]
1745:../freertos/queue.c **** 				}
 2706              		.loc 1 1745 6 view .LVU805
 2707              		.syntax unified
 2708              	@ 1745 "../freertos/queue.c" 1
 2709 06de BFF34F8F 		dsb	
 2710              	@ 0 "" 2
1745:../freertos/queue.c **** 				}
 2711              		.loc 1 1745 6 view .LVU806
 2712              	@ 1745 "../freertos/queue.c" 1
 2713 06e2 BFF36F8F 		isb
 2714              	@ 0 "" 2
1745:../freertos/queue.c **** 				}
 2715              		.loc 1 1745 28 view .LVU807
 2716              		.thumb
 2717              		.syntax unified
 2718              	.L185:
 2719              	@ ../freertos/queue.c:1633: {
1633:../freertos/queue.c **** BaseType_t xEntryTimeSet = pdFALSE;
 2720              		.loc 1 1633 1 is_stmt 0 view .LVU808
 2721 06e6 0127     		movs	r7, #1	@ xEntryTimeSet,
 2722 06e8 A0E7     		b	.L172		@
 2723              	.L183:
1756:../freertos/queue.c **** 				( void ) xTaskResumeAll();
 2724              		.loc 1 1756 5 is_stmt 1 view .LVU809
 2725 06ea 2046     		mov	r0, r4	@, xQueue
 2726 06ec FFF7DCFC 		bl	prvUnlockQueue		@
 2727              	.LVL231:
1757:../freertos/queue.c **** 			}
 2728              		.loc 1 1757 5 view .LVU810
 2729              	@ ../freertos/queue.c:1757: 				( void ) xTaskResumeAll();
1757:../freertos/queue.c **** 			}
 2730              		.loc 1 1757 14 is_stmt 0 view .LVU811
 2731 06f0 FFF7FEFF 		bl	xTaskResumeAll		@
 2732              	.LVL232:
 2733 06f4 F7E7     		b	.L185		@
 2734              	.L182:
1764:../freertos/queue.c **** 			( void ) xTaskResumeAll();
 2735              		.loc 1 1764 4 is_stmt 1 view .LVU812
 2736 06f6 2046     		mov	r0, r4	@, xQueue
 2737 06f8 FFF7D6FC 		bl	prvUnlockQueue		@
 2738              	.LVL233:
1765:../freertos/queue.c **** 
 2739              		.loc 1 1765 4 view .LVU813
 2740              	@ ../freertos/queue.c:1765: 			( void ) xTaskResumeAll();
1765:../freertos/queue.c **** 
 2741              		.loc 1 1765 13 is_stmt 0 view .LVU814
 2742 06fc FFF7FEFF 		bl	xTaskResumeAll		@
 2743              	.LVL234:
ARM GAS  /tmp/ccjtHtwZ.s 			page 108


1767:../freertos/queue.c **** 			{
 2744              		.loc 1 1767 4 is_stmt 1 view .LVU815
 2745              	@ ../freertos/queue.c:1767: 			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1767:../freertos/queue.c **** 			{
 2746              		.loc 1 1767 8 is_stmt 0 view .LVU816
 2747 0700 2046     		mov	r0, r4	@, xQueue
 2748 0702 FFF77DFC 		bl	prvIsQueueEmpty		@
 2749              	.LVL235:
 2750              	@ ../freertos/queue.c:1767: 			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1767:../freertos/queue.c **** 			{
 2751              		.loc 1 1767 6 view .LVU817
 2752 0706 0028     		cmp	r0, #0	@ tmp162
 2753 0708 EDD0     		beq	.L185	@
 2754 070a B4E7     		b	.L192		@
 2755              		.cfi_endproc
 2756              	.LFE18:
 2757              		.size	xQueuePeek, .-xQueuePeek
 2758              		.align	1
 2759              		.global	xQueueReceiveFromISR
 2760              		.syntax unified
 2761              		.thumb
 2762              		.thumb_func
 2763              		.type	xQueueReceiveFromISR, %function
 2764              	xQueueReceiveFromISR:
 2765              	.LVL236:
 2766              	.LFB19:
1782:../freertos/queue.c **** BaseType_t xReturn;
 2767              		.loc 1 1782 1 is_stmt 1 view -0
 2768              		.cfi_startproc
 2769              		@ args = 0, pretend = 0, frame = 0
 2770              		@ frame_needed = 0, uses_anonymous_args = 0
1783:../freertos/queue.c **** UBaseType_t uxSavedInterruptStatus;
 2771              		.loc 1 1783 1 view .LVU819
1784:../freertos/queue.c **** Queue_t * const pxQueue = xQueue;
 2772              		.loc 1 1784 1 view .LVU820
1785:../freertos/queue.c **** 
 2773              		.loc 1 1785 1 view .LVU821
1787:../freertos/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 2774              		.loc 1 1787 25 view .LVU822
1788:../freertos/queue.c **** 
 2775              		.loc 1 1788 92 view .LVU823
1804:../freertos/queue.c **** 
 2776              		.loc 1 1804 44 view .LVU824
1806:../freertos/queue.c **** 	{
 2777              		.loc 1 1806 2 view .LVU825
 2778              	.LBB79:
 2779              	.LBI79:
 207:../freertos/portable/GCC/ARM_CM3/portmacro.h **** {
 2780              		.loc 2 207 34 view .LVU826
 2781              	.LBB80:
 209:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 
 2782              		.loc 2 209 1 view .LVU827
 211:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	(
 2783              		.loc 2 211 2 view .LVU828
 2784              	.LBE80:
 2785              	.LBE79:
 2786              	@ ../freertos/queue.c:1782: {
ARM GAS  /tmp/ccjtHtwZ.s 			page 109


1782:../freertos/queue.c **** BaseType_t xReturn;
 2787              		.loc 1 1782 1 is_stmt 0 view .LVU829
 2788 070c 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}	@
 2789              	.LCFI30:
 2790              		.cfi_def_cfa_offset 24
 2791              		.cfi_offset 4, -24
 2792              		.cfi_offset 5, -20
 2793              		.cfi_offset 6, -16
 2794              		.cfi_offset 7, -12
 2795              		.cfi_offset 8, -8
 2796              		.cfi_offset 14, -4
 2797              	@ ../freertos/queue.c:1782: {
1782:../freertos/queue.c **** BaseType_t xReturn;
 2798              		.loc 1 1782 1 view .LVU830
 2799 0710 0546     		mov	r5, r0	@ xQueue, tmp139
 2800 0712 9046     		mov	r8, r2	@ pxHigherPriorityTaskWoken, tmp140
 2801              	.LBB82:
 2802              	.LBB81:
 2803              	@ ../freertos/portable/GCC/ARM_CM3/portmacro.h:211: 	__asm volatile
 211:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	(
 2804              		.loc 2 211 2 view .LVU831
 2805              		.syntax unified
 2806              	@ 211 "../freertos/portable/GCC/ARM_CM3/portmacro.h" 1
 2807 0714 EFF31187 			mrs r7, basepri												@ ulOriginalBASEPRI
 2808 0718 4FF01003 		mov r3, #16													@ ulNewBASEPRI,
 2809 071c 83F31188 		msr basepri, r3												@ ulNewBASEPRI
 2810 0720 BFF36F8F 		isb														
 2811 0724 BFF34F8F 		dsb														
 2812              	
 2813              	@ 0 "" 2
 2814              	.LVL237:
 223:../freertos/portable/GCC/ARM_CM3/portmacro.h **** }
 2815              		.loc 2 223 2 is_stmt 1 view .LVU832
 223:../freertos/portable/GCC/ARM_CM3/portmacro.h **** }
 2816              		.loc 2 223 2 is_stmt 0 view .LVU833
 2817              		.thumb
 2818              		.syntax unified
 2819              	.LBE81:
 2820              	.LBE82:
 2821              	.LBB83:
1808:../freertos/queue.c **** 
 2822              		.loc 1 1808 3 is_stmt 1 view .LVU834
 2823              	@ ../freertos/queue.c:1808: 		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1808:../freertos/queue.c **** 
 2824              		.loc 1 1808 21 is_stmt 0 view .LVU835
 2825 0728 846B     		ldr	r4, [r0, #56]	@ uxMessagesWaiting, MEM[(struct Queue_t *)xQueue_10(D)].uxMessagesWaiting
 2826              	.LVL238:
1811:../freertos/queue.c **** 		{
 2827              		.loc 1 1811 3 is_stmt 1 view .LVU836
 2828              	@ ../freertos/queue.c:1811: 		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1811:../freertos/queue.c **** 		{
 2829              		.loc 1 1811 5 is_stmt 0 view .LVU837
 2830 072a 0CB3     		cbz	r4, .L198	@ uxMessagesWaiting,
 2831              	.LBB84:
1813:../freertos/queue.c **** 
 2832              		.loc 1 1813 4 is_stmt 1 view .LVU838
 2833              	@ ../freertos/queue.c:1813: 			const int8_t cRxLock = pxQueue->cRxLock;
ARM GAS  /tmp/ccjtHtwZ.s 			page 110


1813:../freertos/queue.c **** 
 2834              		.loc 1 1813 17 is_stmt 0 view .LVU839
 2835 072c 90F84460 		ldrb	r6, [r0, #68]	@ zero_extendqisi2	@ MEM[(struct Queue_t *)xQueue_10(D)].cRxLock, MEM[(struct Q
 2836              	@ ../freertos/queue.c:1818: 			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
1818:../freertos/queue.c **** 
 2837              		.loc 1 1818 51 view .LVU840
 2838 0730 013C     		subs	r4, r4, #1	@ _1, uxMessagesWaiting,
 2839              	.LVL239:
 2840              	@ ../freertos/queue.c:1813: 			const int8_t cRxLock = pxQueue->cRxLock;
1813:../freertos/queue.c **** 
 2841              		.loc 1 1813 17 view .LVU841
 2842 0732 76B2     		sxtb	r6, r6	@ cRxLock, MEM[(struct Queue_t *)xQueue_10(D)].cRxLock
 2843              	.LVL240:
1815:../freertos/queue.c **** 
 2844              		.loc 1 1815 42 is_stmt 1 view .LVU842
1817:../freertos/queue.c **** 			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 2845              		.loc 1 1817 4 view .LVU843
 2846 0734 FFF7A4FC 		bl	prvCopyDataFromQueue		@
 2847              	.LVL241:
1818:../freertos/queue.c **** 
 2848              		.loc 1 1818 4 view .LVU844
 2849              	@ ../freertos/queue.c:1824: 			if( cRxLock == queueUNLOCKED )
1824:../freertos/queue.c **** 			{
 2850              		.loc 1 1824 6 is_stmt 0 view .LVU845
 2851 0738 731C     		adds	r3, r6, #1	@, cRxLock,
 2852              	@ ../freertos/queue.c:1818: 			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
1818:../freertos/queue.c **** 
 2853              		.loc 1 1818 31 view .LVU846
 2854 073a AC63     		str	r4, [r5, #56]	@ _1, MEM[(struct Queue_t *)xQueue_10(D)].uxMessagesWaiting
1824:../freertos/queue.c **** 			{
 2855              		.loc 1 1824 4 is_stmt 1 view .LVU847
 2856              	@ ../freertos/queue.c:1824: 			if( cRxLock == queueUNLOCKED )
1824:../freertos/queue.c **** 			{
 2857              		.loc 1 1824 6 is_stmt 0 view .LVU848
 2858 073c 13D1     		bne	.L195		@,
1826:../freertos/queue.c **** 				{
 2859              		.loc 1 1826 5 is_stmt 1 view .LVU849
 2860              	@ ../freertos/queue.c:1826: 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFAL
1826:../freertos/queue.c **** 				{
 2861              		.loc 1 1826 9 is_stmt 0 view .LVU850
 2862 073e 2B69     		ldr	r3, [r5, #16]	@ _2, MEM[(struct Queue_t *)xQueue_10(D)].xTasksWaitingToSend.uxNumberOfItems
 2863              	@ ../freertos/queue.c:1826: 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFAL
1826:../freertos/queue.c **** 				{
 2864              		.loc 1 1826 7 view .LVU851
 2865 0740 0BB9     		cbnz	r3, .L196	@ _2,
 2866              	.LVL242:
 2867              	.L205:
 2868              	@ ../freertos/queue.c:1858: 			xReturn = pdPASS;
1858:../freertos/queue.c **** 		}
 2869              		.loc 1 1858 12 view .LVU852
 2870 0742 0120     		movs	r0, #1	@ <retval>,
 2871 0744 0BE0     		b	.L194		@
 2872              	.LVL243:
 2873              	.L196:
1828:../freertos/queue.c **** 					{
 2874              		.loc 1 1828 6 is_stmt 1 view .LVU853
 2875              	@ ../freertos/queue.c:1828: 					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) 
ARM GAS  /tmp/ccjtHtwZ.s 			page 111


1828:../freertos/queue.c **** 					{
 2876              		.loc 1 1828 10 is_stmt 0 view .LVU854
 2877 0746 05F11000 		add	r0, r5, #16	@, xQueue,
 2878 074a FFF7FEFF 		bl	xTaskRemoveFromEventList		@
 2879              	.LVL244:
 2880              	@ ../freertos/queue.c:1828: 					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) 
1828:../freertos/queue.c **** 					{
 2881              		.loc 1 1828 8 view .LVU855
 2882 074e 0028     		cmp	r0, #0	@ tmp141
 2883 0750 F7D0     		beq	.L205	@
1832:../freertos/queue.c **** 						{
 2884              		.loc 1 1832 7 is_stmt 1 view .LVU856
 2885              	@ ../freertos/queue.c:1832: 						if( pxHigherPriorityTaskWoken != NULL )
1832:../freertos/queue.c **** 						{
 2886              		.loc 1 1832 9 is_stmt 0 view .LVU857
 2887 0752 B8F1000F 		cmp	r8, #0	@ pxHigherPriorityTaskWoken
 2888 0756 F4D0     		beq	.L205	@
1834:../freertos/queue.c **** 						}
 2889              		.loc 1 1834 8 is_stmt 1 view .LVU858
 2890              	@ ../freertos/queue.c:1834: 							*pxHigherPriorityTaskWoken = pdTRUE;
1834:../freertos/queue.c **** 						}
 2891              		.loc 1 1834 35 is_stmt 0 view .LVU859
 2892 0758 0120     		movs	r0, #1	@ tmp134,
 2893 075a C8F80000 		str	r0, [r8]	@ tmp134, *pxHigherPriorityTaskWoken_19(D)
 2894              	.LVL245:
 2895              	.L194:
1834:../freertos/queue.c **** 						}
 2896              		.loc 1 1834 35 view .LVU860
 2897              	.LBE84:
1863:../freertos/queue.c **** 		}
 2898              		.loc 1 1863 49 is_stmt 1 view .LVU861
 2899              	.LBE83:
1866:../freertos/queue.c **** 
 2900              		.loc 1 1866 2 view .LVU862
 2901              	.LBB86:
 2902              	.LBI86:
 227:../freertos/portable/GCC/ARM_CM3/portmacro.h **** {
 2903              		.loc 2 227 30 view .LVU863
 2904              	.LBB87:
 2905              		.loc 2 229 2 view .LVU864
 2906              		.syntax unified
 2907              	@ 229 "../freertos/portable/GCC/ARM_CM3/portmacro.h" 1
 2908 075e 87F31188 			msr basepri, r7		@ ulOriginalBASEPRI
 2909              	@ 0 "" 2
 2910              	.LVL246:
 2911              		.loc 2 229 2 is_stmt 0 view .LVU865
 2912              		.thumb
 2913              		.syntax unified
 2914              	.LBE87:
 2915              	.LBE86:
1868:../freertos/queue.c **** }
 2916              		.loc 1 1868 2 is_stmt 1 view .LVU866
 2917              	@ ../freertos/queue.c:1869: }
1869:../freertos/queue.c **** /*-----------------------------------------------------------*/
 2918              		.loc 1 1869 1 is_stmt 0 view .LVU867
 2919 0762 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}	@
 2920              	.LVL247:
ARM GAS  /tmp/ccjtHtwZ.s 			page 112


 2921              	.L195:
 2922              	.LBB88:
 2923              	.LBB85:
1855:../freertos/queue.c **** 			}
 2924              		.loc 1 1855 5 is_stmt 1 view .LVU868
 2925              	@ ../freertos/queue.c:1855: 				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
1855:../freertos/queue.c **** 			}
 2926              		.loc 1 1855 45 is_stmt 0 view .LVU869
 2927 0766 0136     		adds	r6, r6, #1	@ tmp136, cRxLock,
 2928              	.LVL248:
 2929              	@ ../freertos/queue.c:1855: 				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
1855:../freertos/queue.c **** 			}
 2930              		.loc 1 1855 24 view .LVU870
 2931 0768 76B2     		sxtb	r6, r6	@ _7, tmp136
 2932              	.LVL249:
 2933              	@ ../freertos/queue.c:1855: 				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
1855:../freertos/queue.c **** 			}
 2934              		.loc 1 1855 22 view .LVU871
 2935 076a 85F84460 		strb	r6, [r5, #68]	@ _7, MEM[(struct Queue_t *)xQueue_10(D)].cRxLock
 2936 076e E8E7     		b	.L205		@
 2937              	.LVL250:
 2938              	.L198:
1855:../freertos/queue.c **** 			}
 2939              		.loc 1 1855 22 view .LVU872
 2940              	.LBE85:
 2941              	@ ../freertos/queue.c:1862: 			xReturn = pdFAIL;
1862:../freertos/queue.c **** 			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
 2942              		.loc 1 1862 12 view .LVU873
 2943 0770 2046     		mov	r0, r4	@ <retval>, uxMessagesWaiting
 2944              	.LVL251:
1862:../freertos/queue.c **** 			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
 2945              		.loc 1 1862 12 view .LVU874
 2946 0772 F4E7     		b	.L194		@
 2947              	.LBE88:
 2948              		.cfi_endproc
 2949              	.LFE19:
 2950              		.size	xQueueReceiveFromISR, .-xQueueReceiveFromISR
 2951              		.align	1
 2952              		.global	xQueuePeekFromISR
 2953              		.syntax unified
 2954              		.thumb
 2955              		.thumb_func
 2956              		.type	xQueuePeekFromISR, %function
 2957              	xQueuePeekFromISR:
 2958              	.LVL252:
 2959              	.LFB20:
1873:../freertos/queue.c **** BaseType_t xReturn;
 2960              		.loc 1 1873 1 is_stmt 1 view -0
 2961              		.cfi_startproc
 2962              		@ args = 0, pretend = 0, frame = 0
 2963              		@ frame_needed = 0, uses_anonymous_args = 0
1874:../freertos/queue.c **** UBaseType_t uxSavedInterruptStatus;
 2964              		.loc 1 1874 1 view .LVU876
1875:../freertos/queue.c **** int8_t *pcOriginalReadPosition;
 2965              		.loc 1 1875 1 view .LVU877
1876:../freertos/queue.c **** Queue_t * const pxQueue = xQueue;
 2966              		.loc 1 1876 1 view .LVU878
ARM GAS  /tmp/ccjtHtwZ.s 			page 113


1877:../freertos/queue.c **** 
 2967              		.loc 1 1877 1 view .LVU879
1879:../freertos/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 2968              		.loc 1 1879 25 view .LVU880
1880:../freertos/queue.c **** 	configASSERT( pxQueue->uxItemSize != 0 ); /* Can't peek a semaphore. */
 2969              		.loc 1 1880 92 view .LVU881
1881:../freertos/queue.c **** 
 2970              		.loc 1 1881 42 view .LVU882
1897:../freertos/queue.c **** 
 2971              		.loc 1 1897 44 view .LVU883
1899:../freertos/queue.c **** 	{
 2972              		.loc 1 1899 2 view .LVU884
 2973              	.LBB89:
 2974              	.LBI89:
 207:../freertos/portable/GCC/ARM_CM3/portmacro.h **** {
 2975              		.loc 2 207 34 view .LVU885
 2976              	.LBB90:
 209:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 
 2977              		.loc 2 209 1 view .LVU886
 211:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	(
 2978              		.loc 2 211 2 view .LVU887
 2979              	.LBE90:
 2980              	.LBE89:
 2981              	@ ../freertos/queue.c:1873: {
1873:../freertos/queue.c **** BaseType_t xReturn;
 2982              		.loc 1 1873 1 is_stmt 0 view .LVU888
 2983 0774 70B5     		push	{r4, r5, r6, lr}	@
 2984              	.LCFI31:
 2985              		.cfi_def_cfa_offset 16
 2986              		.cfi_offset 4, -16
 2987              		.cfi_offset 5, -12
 2988              		.cfi_offset 6, -8
 2989              		.cfi_offset 14, -4
 2990              	@ ../freertos/queue.c:1873: {
1873:../freertos/queue.c **** BaseType_t xReturn;
 2991              		.loc 1 1873 1 view .LVU889
 2992 0776 0446     		mov	r4, r0	@ xQueue, tmp123
 2993              	.LBB92:
 2994              	.LBB91:
 2995              	@ ../freertos/portable/GCC/ARM_CM3/portmacro.h:211: 	__asm volatile
 211:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	(
 2996              		.loc 2 211 2 view .LVU890
 2997              		.syntax unified
 2998              	@ 211 "../freertos/portable/GCC/ARM_CM3/portmacro.h" 1
 2999 0778 EFF31185 			mrs r5, basepri												@ ulOriginalBASEPRI
 3000 077c 4FF01003 		mov r3, #16													@ ulNewBASEPRI,
 3001 0780 83F31188 		msr basepri, r3												@ ulNewBASEPRI
 3002 0784 BFF36F8F 		isb														
 3003 0788 BFF34F8F 		dsb														
 3004              	
 3005              	@ 0 "" 2
 3006              	.LVL253:
 223:../freertos/portable/GCC/ARM_CM3/portmacro.h **** }
 3007              		.loc 2 223 2 is_stmt 1 view .LVU891
 223:../freertos/portable/GCC/ARM_CM3/portmacro.h **** }
 3008              		.loc 2 223 2 is_stmt 0 view .LVU892
 3009              		.thumb
ARM GAS  /tmp/ccjtHtwZ.s 			page 114


 3010              		.syntax unified
 3011              	.LBE91:
 3012              	.LBE92:
1902:../freertos/queue.c **** 		{
 3013              		.loc 1 1902 3 is_stmt 1 view .LVU893
 3014              	@ ../freertos/queue.c:1902: 		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
1902:../freertos/queue.c **** 		{
 3015              		.loc 1 1902 14 is_stmt 0 view .LVU894
 3016 078c 836B     		ldr	r3, [r0, #56]	@ _1, MEM[(struct Queue_t *)xQueue_4(D)].uxMessagesWaiting
 3017              	@ ../freertos/queue.c:1902: 		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
1902:../freertos/queue.c **** 		{
 3018              		.loc 1 1902 5 view .LVU895
 3019 078e 3BB1     		cbz	r3, .L208	@ _1,
1904:../freertos/queue.c **** 
 3020              		.loc 1 1904 39 is_stmt 1 view .LVU896
1908:../freertos/queue.c **** 			prvCopyDataFromQueue( pxQueue, pvBuffer );
 3021              		.loc 1 1908 4 view .LVU897
 3022              	@ ../freertos/queue.c:1908: 			pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
1908:../freertos/queue.c **** 			prvCopyDataFromQueue( pxQueue, pvBuffer );
 3023              		.loc 1 1908 27 is_stmt 0 view .LVU898
 3024 0790 C668     		ldr	r6, [r0, #12]	@ pcOriginalReadPosition, MEM[(struct Queue_t *)xQueue_4(D)].u.xQueue.pcReadFrom
 3025              	.LVL254:
1909:../freertos/queue.c **** 			pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
 3026              		.loc 1 1909 4 is_stmt 1 view .LVU899
 3027 0792 FFF775FC 		bl	prvCopyDataFromQueue		@
 3028              	.LVL255:
1910:../freertos/queue.c **** 
 3029              		.loc 1 1910 4 view .LVU900
 3030              	@ ../freertos/queue.c:1912: 			xReturn = pdPASS;
1912:../freertos/queue.c **** 		}
 3031              		.loc 1 1912 12 is_stmt 0 view .LVU901
 3032 0796 0120     		movs	r0, #1	@ <retval>,
 3033              	@ ../freertos/queue.c:1910: 			pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
1910:../freertos/queue.c **** 
 3034              		.loc 1 1910 33 view .LVU902
 3035 0798 E660     		str	r6, [r4, #12]	@ pcOriginalReadPosition, MEM[(struct Queue_t *)xQueue_4(D)].u.xQueue.pcReadFrom
1912:../freertos/queue.c **** 		}
 3036              		.loc 1 1912 4 is_stmt 1 view .LVU903
 3037              	.LVL256:
 3038              	.L207:
1917:../freertos/queue.c **** 		}
 3039              		.loc 1 1917 46 view .LVU904
1920:../freertos/queue.c **** 
 3040              		.loc 1 1920 2 view .LVU905
 3041              	.LBB93:
 3042              	.LBI93:
 227:../freertos/portable/GCC/ARM_CM3/portmacro.h **** {
 3043              		.loc 2 227 30 view .LVU906
 3044              	.LBB94:
 3045              		.loc 2 229 2 view .LVU907
 3046              		.syntax unified
 3047              	@ 229 "../freertos/portable/GCC/ARM_CM3/portmacro.h" 1
 3048 079a 85F31188 			msr basepri, r5		@ ulOriginalBASEPRI
 3049              	@ 0 "" 2
 3050              	.LVL257:
 3051              		.loc 2 229 2 is_stmt 0 view .LVU908
 3052              		.thumb
ARM GAS  /tmp/ccjtHtwZ.s 			page 115


 3053              		.syntax unified
 3054              	.LBE94:
 3055              	.LBE93:
1922:../freertos/queue.c **** }
 3056              		.loc 1 1922 2 is_stmt 1 view .LVU909
 3057              	@ ../freertos/queue.c:1923: }
1923:../freertos/queue.c **** /*-----------------------------------------------------------*/
 3058              		.loc 1 1923 1 is_stmt 0 view .LVU910
 3059 079e 70BD     		pop	{r4, r5, r6, pc}	@
 3060              	.LVL258:
 3061              	.L208:
 3062              	@ ../freertos/queue.c:1916: 			xReturn = pdFAIL;
1916:../freertos/queue.c **** 			traceQUEUE_PEEK_FROM_ISR_FAILED( pxQueue );
 3063              		.loc 1 1916 12 view .LVU911
 3064 07a0 1846     		mov	r0, r3	@ <retval>, _1
 3065              	.LVL259:
1916:../freertos/queue.c **** 			traceQUEUE_PEEK_FROM_ISR_FAILED( pxQueue );
 3066              		.loc 1 1916 12 view .LVU912
 3067 07a2 FAE7     		b	.L207		@
 3068              		.cfi_endproc
 3069              	.LFE20:
 3070              		.size	xQueuePeekFromISR, .-xQueuePeekFromISR
 3071              		.align	1
 3072              		.global	uxQueueMessagesWaiting
 3073              		.syntax unified
 3074              		.thumb
 3075              		.thumb_func
 3076              		.type	uxQueueMessagesWaiting, %function
 3077              	uxQueueMessagesWaiting:
 3078              	.LVL260:
 3079              	.LFB21:
1927:../freertos/queue.c **** UBaseType_t uxReturn;
 3080              		.loc 1 1927 1 is_stmt 1 view -0
 3081              		.cfi_startproc
 3082              		@ args = 0, pretend = 0, frame = 0
 3083              		@ frame_needed = 0, uses_anonymous_args = 0
1928:../freertos/queue.c **** 
 3084              		.loc 1 1928 1 view .LVU914
1930:../freertos/queue.c **** 
 3085              		.loc 1 1930 24 view .LVU915
1932:../freertos/queue.c **** 	{
 3086              		.loc 1 1932 2 view .LVU916
 3087              	@ ../freertos/queue.c:1927: {
1927:../freertos/queue.c **** UBaseType_t uxReturn;
 3088              		.loc 1 1927 1 is_stmt 0 view .LVU917
 3089 07a4 10B5     		push	{r4, lr}	@
 3090              	.LCFI32:
 3091              		.cfi_def_cfa_offset 8
 3092              		.cfi_offset 4, -8
 3093              		.cfi_offset 14, -4
 3094              	@ ../freertos/queue.c:1927: {
1927:../freertos/queue.c **** UBaseType_t uxReturn;
 3095              		.loc 1 1927 1 view .LVU918
 3096 07a6 0446     		mov	r4, r0	@ xQueue, tmp116
 3097              	@ ../freertos/queue.c:1932: 	taskENTER_CRITICAL();
1932:../freertos/queue.c **** 	{
 3098              		.loc 1 1932 2 view .LVU919
ARM GAS  /tmp/ccjtHtwZ.s 			page 116


 3099 07a8 FFF7FEFF 		bl	vPortEnterCritical		@
 3100              	.LVL261:
1934:../freertos/queue.c **** 	}
 3101              		.loc 1 1934 3 is_stmt 1 view .LVU920
 3102              	@ ../freertos/queue.c:1934: 		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
1934:../freertos/queue.c **** 	}
 3103              		.loc 1 1934 12 is_stmt 0 view .LVU921
 3104 07ac A46B     		ldr	r4, [r4, #56]	@ <retval>, MEM[(struct Queue_t *)xQueue_3(D)].uxMessagesWaiting
 3105              	.LVL262:
1936:../freertos/queue.c **** 
 3106              		.loc 1 1936 2 is_stmt 1 view .LVU922
 3107 07ae FFF7FEFF 		bl	vPortExitCritical		@
 3108              	.LVL263:
1938:../freertos/queue.c **** } /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 3109              		.loc 1 1938 2 view .LVU923
 3110              	@ ../freertos/queue.c:1939: } /*lint !e818 Pointer cannot be declared const as xQueue is a typedef 
1939:../freertos/queue.c **** /*-----------------------------------------------------------*/
 3111              		.loc 1 1939 1 is_stmt 0 view .LVU924
 3112 07b2 2046     		mov	r0, r4	@, <retval>
 3113 07b4 10BD     		pop	{r4, pc}	@
1939:../freertos/queue.c **** /*-----------------------------------------------------------*/
 3114              		.loc 1 1939 1 view .LVU925
 3115              		.cfi_endproc
 3116              	.LFE21:
 3117              		.size	uxQueueMessagesWaiting, .-uxQueueMessagesWaiting
 3118              		.align	1
 3119              		.global	uxQueueSpacesAvailable
 3120              		.syntax unified
 3121              		.thumb
 3122              		.thumb_func
 3123              		.type	uxQueueSpacesAvailable, %function
 3124              	uxQueueSpacesAvailable:
 3125              	.LVL264:
 3126              	.LFB22:
1943:../freertos/queue.c **** UBaseType_t uxReturn;
 3127              		.loc 1 1943 1 is_stmt 1 view -0
 3128              		.cfi_startproc
 3129              		@ args = 0, pretend = 0, frame = 0
 3130              		@ frame_needed = 0, uses_anonymous_args = 0
1944:../freertos/queue.c **** Queue_t * const pxQueue = xQueue;
 3131              		.loc 1 1944 1 view .LVU927
1945:../freertos/queue.c **** 
 3132              		.loc 1 1945 1 view .LVU928
 3133              	@ ../freertos/queue.c:1943: {
1943:../freertos/queue.c **** UBaseType_t uxReturn;
 3134              		.loc 1 1943 1 is_stmt 0 view .LVU929
 3135 07b6 10B5     		push	{r4, lr}	@
 3136              	.LCFI33:
 3137              		.cfi_def_cfa_offset 8
 3138              		.cfi_offset 4, -8
 3139              		.cfi_offset 14, -4
 3140              	@ ../freertos/queue.c:1943: {
1943:../freertos/queue.c **** UBaseType_t uxReturn;
 3141              		.loc 1 1943 1 view .LVU930
 3142 07b8 0446     		mov	r4, r0	@ xQueue, tmp119
 3143              	.LVL265:
1947:../freertos/queue.c **** 
ARM GAS  /tmp/ccjtHtwZ.s 			page 117


 3144              		.loc 1 1947 25 is_stmt 1 view .LVU931
1949:../freertos/queue.c **** 	{
 3145              		.loc 1 1949 2 view .LVU932
 3146 07ba FFF7FEFF 		bl	vPortEnterCritical		@
 3147              	.LVL266:
1951:../freertos/queue.c **** 	}
 3148              		.loc 1 1951 3 view .LVU933
 3149              	@ ../freertos/queue.c:1951: 		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
1951:../freertos/queue.c **** 	}
 3150              		.loc 1 1951 41 is_stmt 0 view .LVU934
 3151 07be A06B     		ldr	r0, [r4, #56]	@ _2, MEM[(struct Queue_t *)xQueue_3(D)].uxMessagesWaiting
 3152              	@ ../freertos/queue.c:1951: 		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
1951:../freertos/queue.c **** 	}
 3153              		.loc 1 1951 12 view .LVU935
 3154 07c0 E46B     		ldr	r4, [r4, #60]	@ MEM[(struct Queue_t *)xQueue_3(D)].uxLength, MEM[(struct Queue_t *)xQueue_3(D)
 3155              	.LVL267:
1951:../freertos/queue.c **** 	}
 3156              		.loc 1 1951 12 view .LVU936
 3157 07c2 241A     		subs	r4, r4, r0	@ <retval>, MEM[(struct Queue_t *)xQueue_3(D)].uxLength, _2
 3158              	.LVL268:
1953:../freertos/queue.c **** 
 3159              		.loc 1 1953 2 is_stmt 1 view .LVU937
 3160 07c4 FFF7FEFF 		bl	vPortExitCritical		@
 3161              	.LVL269:
1955:../freertos/queue.c **** } /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 3162              		.loc 1 1955 2 view .LVU938
 3163              	@ ../freertos/queue.c:1956: } /*lint !e818 Pointer cannot be declared const as xQueue is a typedef 
1956:../freertos/queue.c **** /*-----------------------------------------------------------*/
 3164              		.loc 1 1956 1 is_stmt 0 view .LVU939
 3165 07c8 2046     		mov	r0, r4	@, <retval>
 3166 07ca 10BD     		pop	{r4, pc}	@
1956:../freertos/queue.c **** /*-----------------------------------------------------------*/
 3167              		.loc 1 1956 1 view .LVU940
 3168              		.cfi_endproc
 3169              	.LFE22:
 3170              		.size	uxQueueSpacesAvailable, .-uxQueueSpacesAvailable
 3171              		.align	1
 3172              		.global	uxQueueMessagesWaitingFromISR
 3173              		.syntax unified
 3174              		.thumb
 3175              		.thumb_func
 3176              		.type	uxQueueMessagesWaitingFromISR, %function
 3177              	uxQueueMessagesWaitingFromISR:
 3178              	.LVL270:
 3179              	.LFB23:
1960:../freertos/queue.c **** UBaseType_t uxReturn;
 3180              		.loc 1 1960 1 is_stmt 1 view -0
 3181              		.cfi_startproc
 3182              		@ args = 0, pretend = 0, frame = 0
 3183              		@ frame_needed = 0, uses_anonymous_args = 0
 3184              		@ link register save eliminated.
1961:../freertos/queue.c **** Queue_t * const pxQueue = xQueue;
 3185              		.loc 1 1961 1 view .LVU942
1962:../freertos/queue.c **** 
 3186              		.loc 1 1962 1 view .LVU943
1964:../freertos/queue.c **** 	uxReturn = pxQueue->uxMessagesWaiting;
 3187              		.loc 1 1964 25 view .LVU944
ARM GAS  /tmp/ccjtHtwZ.s 			page 118


1965:../freertos/queue.c **** 
 3188              		.loc 1 1965 2 view .LVU945
 3189              	@ ../freertos/queue.c:1965: 	uxReturn = pxQueue->uxMessagesWaiting;
1965:../freertos/queue.c **** 
 3190              		.loc 1 1965 11 is_stmt 0 view .LVU946
 3191 07cc 806B     		ldr	r0, [r0, #56]	@ <retval>, MEM[(struct Queue_t *)xQueue_1(D)].uxMessagesWaiting
 3192              	.LVL271:
1967:../freertos/queue.c **** } /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 3193              		.loc 1 1967 2 is_stmt 1 view .LVU947
 3194              	@ ../freertos/queue.c:1968: } /*lint !e818 Pointer cannot be declared const as xQueue is a typedef 
1968:../freertos/queue.c **** /*-----------------------------------------------------------*/
 3195              		.loc 1 1968 1 is_stmt 0 view .LVU948
 3196 07ce 7047     		bx	lr	@
 3197              		.cfi_endproc
 3198              	.LFE23:
 3199              		.size	uxQueueMessagesWaitingFromISR, .-uxQueueMessagesWaitingFromISR
 3200              		.align	1
 3201              		.global	vQueueDelete
 3202              		.syntax unified
 3203              		.thumb
 3204              		.thumb_func
 3205              		.type	vQueueDelete, %function
 3206              	vQueueDelete:
 3207              	.LVL272:
 3208              	.LFB24:
1972:../freertos/queue.c **** Queue_t * const pxQueue = xQueue;
 3209              		.loc 1 1972 1 is_stmt 1 view -0
 3210              		.cfi_startproc
 3211              		@ args = 0, pretend = 0, frame = 0
 3212              		@ frame_needed = 0, uses_anonymous_args = 0
 3213              		@ link register save eliminated.
1973:../freertos/queue.c **** 
 3214              		.loc 1 1973 1 view .LVU950
1975:../freertos/queue.c **** 	traceQUEUE_DELETE( pxQueue );
 3215              		.loc 1 1975 25 view .LVU951
1976:../freertos/queue.c **** 
 3216              		.loc 1 1976 30 view .LVU952
1988:../freertos/queue.c **** 	}
 3217              		.loc 1 1988 3 view .LVU953
 3218 07d0 FFF7FEBF 		b	vPortFree		@
 3219              	.LVL273:
1988:../freertos/queue.c **** 	}
 3220              		.loc 1 1988 3 is_stmt 0 view .LVU954
 3221              		.cfi_endproc
 3222              	.LFE24:
 3223              		.size	vQueueDelete, .-vQueueDelete
 3224              		.align	1
 3225              		.global	uxQueueGetQueueNumber
 3226              		.syntax unified
 3227              		.thumb
 3228              		.thumb_func
 3229              		.type	uxQueueGetQueueNumber, %function
 3230              	uxQueueGetQueueNumber:
 3231              	.LVL274:
 3232              	.LFB25:
2016:../freertos/queue.c **** 		return ( ( Queue_t * ) xQueue )->uxQueueNumber;
 3233              		.loc 1 2016 2 is_stmt 1 view -0
ARM GAS  /tmp/ccjtHtwZ.s 			page 119


 3234              		.cfi_startproc
 3235              		@ args = 0, pretend = 0, frame = 0
 3236              		@ frame_needed = 0, uses_anonymous_args = 0
 3237              		@ link register save eliminated.
2017:../freertos/queue.c **** 	}
 3238              		.loc 1 2017 3 view .LVU956
 3239              	@ ../freertos/queue.c:2018: 	}
2018:../freertos/queue.c **** 
 3240              		.loc 1 2018 2 is_stmt 0 view .LVU957
 3241 07d4 806C     		ldr	r0, [r0, #72]	@, MEM[(struct Queue_t *)xQueue_2(D)].uxQueueNumber
 3242              	.LVL275:
2018:../freertos/queue.c **** 
 3243              		.loc 1 2018 2 view .LVU958
 3244 07d6 7047     		bx	lr	@
 3245              		.cfi_endproc
 3246              	.LFE25:
 3247              		.size	uxQueueGetQueueNumber, .-uxQueueGetQueueNumber
 3248              		.align	1
 3249              		.global	vQueueSetQueueNumber
 3250              		.syntax unified
 3251              		.thumb
 3252              		.thumb_func
 3253              		.type	vQueueSetQueueNumber, %function
 3254              	vQueueSetQueueNumber:
 3255              	.LVL276:
 3256              	.LFB26:
2026:../freertos/queue.c **** 		( ( Queue_t * ) xQueue )->uxQueueNumber = uxQueueNumber;
 3257              		.loc 1 2026 2 is_stmt 1 view -0
 3258              		.cfi_startproc
 3259              		@ args = 0, pretend = 0, frame = 0
 3260              		@ frame_needed = 0, uses_anonymous_args = 0
 3261              		@ link register save eliminated.
2027:../freertos/queue.c **** 	}
 3262              		.loc 1 2027 3 view .LVU960
 3263              	@ ../freertos/queue.c:2027: 		( ( Queue_t * ) xQueue )->uxQueueNumber = uxQueueNumber;
2027:../freertos/queue.c **** 	}
 3264              		.loc 1 2027 43 is_stmt 0 view .LVU961
 3265 07d8 8164     		str	r1, [r0, #72]	@ tmp116, MEM[(struct Queue_t *)xQueue_2(D)].uxQueueNumber
 3266              	@ ../freertos/queue.c:2028: 	}
2028:../freertos/queue.c **** 
 3267              		.loc 1 2028 2 view .LVU962
 3268 07da 7047     		bx	lr	@
 3269              		.cfi_endproc
 3270              	.LFE26:
 3271              		.size	vQueueSetQueueNumber, .-vQueueSetQueueNumber
 3272              		.align	1
 3273              		.global	ucQueueGetQueueType
 3274              		.syntax unified
 3275              		.thumb
 3276              		.thumb_func
 3277              		.type	ucQueueGetQueueType, %function
 3278              	ucQueueGetQueueType:
 3279              	.LVL277:
 3280              	.LFB27:
2036:../freertos/queue.c **** 		return ( ( Queue_t * ) xQueue )->ucQueueType;
 3281              		.loc 1 2036 2 is_stmt 1 view -0
 3282              		.cfi_startproc
ARM GAS  /tmp/ccjtHtwZ.s 			page 120


 3283              		@ args = 0, pretend = 0, frame = 0
 3284              		@ frame_needed = 0, uses_anonymous_args = 0
 3285              		@ link register save eliminated.
2037:../freertos/queue.c **** 	}
 3286              		.loc 1 2037 3 view .LVU964
 3287              	@ ../freertos/queue.c:2038: 	}
2038:../freertos/queue.c **** 
 3288              		.loc 1 2038 2 is_stmt 0 view .LVU965
 3289 07dc 90F84C00 		ldrb	r0, [r0, #76]	@ zero_extendqisi2	@, MEM[(struct Queue_t *)xQueue_2(D)].ucQueueType
 3290              	.LVL278:
2038:../freertos/queue.c **** 
 3291              		.loc 1 2038 2 view .LVU966
 3292 07e0 7047     		bx	lr	@
 3293              		.cfi_endproc
 3294              	.LFE27:
 3295              		.size	ucQueueGetQueueType, .-ucQueueGetQueueType
 3296              		.align	1
 3297              		.global	xQueueIsQueueEmptyFromISR
 3298              		.syntax unified
 3299              		.thumb
 3300              		.thumb_func
 3301              		.type	xQueueIsQueueEmptyFromISR, %function
 3302              	xQueueIsQueueEmptyFromISR:
 3303              	.LVL279:
 3304              	.LFB33:
2309:../freertos/queue.c **** BaseType_t xReturn;
 3305              		.loc 1 2309 1 is_stmt 1 view -0
 3306              		.cfi_startproc
 3307              		@ args = 0, pretend = 0, frame = 0
 3308              		@ frame_needed = 0, uses_anonymous_args = 0
 3309              		@ link register save eliminated.
2310:../freertos/queue.c **** Queue_t * const pxQueue = xQueue;
 3310              		.loc 1 2310 1 view .LVU968
2311:../freertos/queue.c **** 
 3311              		.loc 1 2311 1 view .LVU969
2313:../freertos/queue.c **** 	if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 3312              		.loc 1 2313 25 view .LVU970
2314:../freertos/queue.c **** 	{
 3313              		.loc 1 2314 2 view .LVU971
 3314              	@ ../freertos/queue.c:2314: 	if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
2314:../freertos/queue.c **** 	{
 3315              		.loc 1 2314 13 is_stmt 0 view .LVU972
 3316 07e2 806B     		ldr	r0, [r0, #56]	@ _1, MEM[(struct Queue_t *)xQueue_3(D)].uxMessagesWaiting
 3317              	.LVL280:
2323:../freertos/queue.c **** } /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 3318              		.loc 1 2323 2 is_stmt 1 view .LVU973
 3319              	@ ../freertos/queue.c:2324: } /*lint !e818 xQueue could not be pointer to const because it is a typ
2324:../freertos/queue.c **** /*-----------------------------------------------------------*/
 3320              		.loc 1 2324 1 is_stmt 0 view .LVU974
 3321 07e4 B0FA80F0 		clz	r0, r0	@, _1
 3322              	.LVL281:
2324:../freertos/queue.c **** /*-----------------------------------------------------------*/
 3323              		.loc 1 2324 1 view .LVU975
 3324 07e8 4009     		lsrs	r0, r0, #5	@,,
 3325 07ea 7047     		bx	lr	@
 3326              		.cfi_endproc
 3327              	.LFE33:
ARM GAS  /tmp/ccjtHtwZ.s 			page 121


 3328              		.size	xQueueIsQueueEmptyFromISR, .-xQueueIsQueueEmptyFromISR
 3329              		.align	1
 3330              		.global	xQueueIsQueueFullFromISR
 3331              		.syntax unified
 3332              		.thumb
 3333              		.thumb_func
 3334              		.type	xQueueIsQueueFullFromISR, %function
 3335              	xQueueIsQueueFullFromISR:
 3336              	.LVL282:
 3337              	.LFB35:
2345:../freertos/queue.c **** }
2346:../freertos/queue.c **** /*-----------------------------------------------------------*/
2347:../freertos/queue.c **** 
2348:../freertos/queue.c **** BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
2349:../freertos/queue.c **** {
 3338              		.loc 1 2349 1 is_stmt 1 view -0
 3339              		.cfi_startproc
 3340              		@ args = 0, pretend = 0, frame = 0
 3341              		@ frame_needed = 0, uses_anonymous_args = 0
 3342              		@ link register save eliminated.
2350:../freertos/queue.c **** BaseType_t xReturn;
 3343              		.loc 1 2350 1 view .LVU977
2351:../freertos/queue.c **** Queue_t * const pxQueue = xQueue;
 3344              		.loc 1 2351 1 view .LVU978
2352:../freertos/queue.c **** 
2353:../freertos/queue.c **** 	configASSERT( pxQueue );
 3345              		.loc 1 2353 25 view .LVU979
2354:../freertos/queue.c **** 	if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 3346              		.loc 1 2354 2 view .LVU980
 3347              	@ ../freertos/queue.c:2354: 	if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 3348              		.loc 1 2354 13 is_stmt 0 view .LVU981
 3349 07ec 836B     		ldr	r3, [r0, #56]	@ _1, MEM[(struct Queue_t *)xQueue_4(D)].uxMessagesWaiting
 3350              	.LVL283:
2355:../freertos/queue.c **** 	{
2356:../freertos/queue.c **** 		xReturn = pdTRUE;
2357:../freertos/queue.c **** 	}
2358:../freertos/queue.c **** 	else
2359:../freertos/queue.c **** 	{
2360:../freertos/queue.c **** 		xReturn = pdFALSE;
2361:../freertos/queue.c **** 	}
2362:../freertos/queue.c **** 
2363:../freertos/queue.c **** 	return xReturn;
 3351              		.loc 1 2363 2 is_stmt 1 view .LVU982
 3352              	@ ../freertos/queue.c:2354: 	if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
2354:../freertos/queue.c **** 	if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 3353              		.loc 1 2354 4 is_stmt 0 view .LVU983
 3354 07ee C06B     		ldr	r0, [r0, #60]	@ MEM[(struct Queue_t *)xQueue_4(D)].uxLength, MEM[(struct Queue_t *)xQueue_4(D)
 3355              	.LVL284:
 3356              	@ ../freertos/queue.c:2364: } /*lint !e818 xQueue could not be pointer to const because it is a typ
2364:../freertos/queue.c **** } /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 3357              		.loc 1 2364 1 view .LVU984
 3358 07f0 C31A     		subs	r3, r0, r3	@, MEM[(struct Queue_t *)xQueue_4(D)].uxLength, _1
 3359              	.LVL285:
 3360              		.loc 1 2364 1 view .LVU985
 3361 07f2 5842     		rsbs	r0, r3, #0	@,,
 3362              		.loc 1 2364 1 view .LVU986
 3363 07f4 5841     		adcs	r0, r0, r3	@,,
ARM GAS  /tmp/ccjtHtwZ.s 			page 122


 3364 07f6 7047     		bx	lr	@
 3365              		.cfi_endproc
 3366              	.LFE35:
 3367              		.size	xQueueIsQueueFullFromISR, .-xQueueIsQueueFullFromISR
 3368              		.align	1
 3369              		.global	vQueueWaitForMessageRestricted
 3370              		.syntax unified
 3371              		.thumb
 3372              		.thumb_func
 3373              		.type	vQueueWaitForMessageRestricted, %function
 3374              	vQueueWaitForMessageRestricted:
 3375              	.LVL286:
 3376              	.LFB36:
2365:../freertos/queue.c **** /*-----------------------------------------------------------*/
2366:../freertos/queue.c **** 
2367:../freertos/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
2368:../freertos/queue.c **** 
2369:../freertos/queue.c **** 	BaseType_t xQueueCRSend( QueueHandle_t xQueue, const void *pvItemToQueue, TickType_t xTicksToWait 
2370:../freertos/queue.c **** 	{
2371:../freertos/queue.c **** 	BaseType_t xReturn;
2372:../freertos/queue.c **** 	Queue_t * const pxQueue = xQueue;
2373:../freertos/queue.c **** 
2374:../freertos/queue.c **** 		/* If the queue is already full we may have to block.  A critical section
2375:../freertos/queue.c **** 		is required to prevent an interrupt removing something from the queue
2376:../freertos/queue.c **** 		between the check to see if the queue is full and blocking on the queue. */
2377:../freertos/queue.c **** 		portDISABLE_INTERRUPTS();
2378:../freertos/queue.c **** 		{
2379:../freertos/queue.c **** 			if( prvIsQueueFull( pxQueue ) != pdFALSE )
2380:../freertos/queue.c **** 			{
2381:../freertos/queue.c **** 				/* The queue is full - do we want to block or just leave without
2382:../freertos/queue.c **** 				posting? */
2383:../freertos/queue.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
2384:../freertos/queue.c **** 				{
2385:../freertos/queue.c **** 					/* As this is called from a coroutine we cannot block directly, but
2386:../freertos/queue.c **** 					return indicating that we need to block. */
2387:../freertos/queue.c **** 					vCoRoutineAddToDelayedList( xTicksToWait, &( pxQueue->xTasksWaitingToSend ) );
2388:../freertos/queue.c **** 					portENABLE_INTERRUPTS();
2389:../freertos/queue.c **** 					return errQUEUE_BLOCKED;
2390:../freertos/queue.c **** 				}
2391:../freertos/queue.c **** 				else
2392:../freertos/queue.c **** 				{
2393:../freertos/queue.c **** 					portENABLE_INTERRUPTS();
2394:../freertos/queue.c **** 					return errQUEUE_FULL;
2395:../freertos/queue.c **** 				}
2396:../freertos/queue.c **** 			}
2397:../freertos/queue.c **** 		}
2398:../freertos/queue.c **** 		portENABLE_INTERRUPTS();
2399:../freertos/queue.c **** 
2400:../freertos/queue.c **** 		portDISABLE_INTERRUPTS();
2401:../freertos/queue.c **** 		{
2402:../freertos/queue.c **** 			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
2403:../freertos/queue.c **** 			{
2404:../freertos/queue.c **** 				/* There is room in the queue, copy the data into the queue. */
2405:../freertos/queue.c **** 				prvCopyDataToQueue( pxQueue, pvItemToQueue, queueSEND_TO_BACK );
2406:../freertos/queue.c **** 				xReturn = pdPASS;
2407:../freertos/queue.c **** 
2408:../freertos/queue.c **** 				/* Were any co-routines waiting for data to become available? */
ARM GAS  /tmp/ccjtHtwZ.s 			page 123


2409:../freertos/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
2410:../freertos/queue.c **** 				{
2411:../freertos/queue.c **** 					/* In this instance the co-routine could be placed directly
2412:../freertos/queue.c **** 					into the ready list as we are within a critical section.
2413:../freertos/queue.c **** 					Instead the same pending ready list mechanism is used as if
2414:../freertos/queue.c **** 					the event were caused from within an interrupt. */
2415:../freertos/queue.c **** 					if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
2416:../freertos/queue.c **** 					{
2417:../freertos/queue.c **** 						/* The co-routine waiting has a higher priority so record
2418:../freertos/queue.c **** 						that a yield might be appropriate. */
2419:../freertos/queue.c **** 						xReturn = errQUEUE_YIELD;
2420:../freertos/queue.c **** 					}
2421:../freertos/queue.c **** 					else
2422:../freertos/queue.c **** 					{
2423:../freertos/queue.c **** 						mtCOVERAGE_TEST_MARKER();
2424:../freertos/queue.c **** 					}
2425:../freertos/queue.c **** 				}
2426:../freertos/queue.c **** 				else
2427:../freertos/queue.c **** 				{
2428:../freertos/queue.c **** 					mtCOVERAGE_TEST_MARKER();
2429:../freertos/queue.c **** 				}
2430:../freertos/queue.c **** 			}
2431:../freertos/queue.c **** 			else
2432:../freertos/queue.c **** 			{
2433:../freertos/queue.c **** 				xReturn = errQUEUE_FULL;
2434:../freertos/queue.c **** 			}
2435:../freertos/queue.c **** 		}
2436:../freertos/queue.c **** 		portENABLE_INTERRUPTS();
2437:../freertos/queue.c **** 
2438:../freertos/queue.c **** 		return xReturn;
2439:../freertos/queue.c **** 	}
2440:../freertos/queue.c **** 
2441:../freertos/queue.c **** #endif /* configUSE_CO_ROUTINES */
2442:../freertos/queue.c **** /*-----------------------------------------------------------*/
2443:../freertos/queue.c **** 
2444:../freertos/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
2445:../freertos/queue.c **** 
2446:../freertos/queue.c **** 	BaseType_t xQueueCRReceive( QueueHandle_t xQueue, void *pvBuffer, TickType_t xTicksToWait )
2447:../freertos/queue.c **** 	{
2448:../freertos/queue.c **** 	BaseType_t xReturn;
2449:../freertos/queue.c **** 	Queue_t * const pxQueue = xQueue;
2450:../freertos/queue.c **** 
2451:../freertos/queue.c **** 		/* If the queue is already empty we may have to block.  A critical section
2452:../freertos/queue.c **** 		is required to prevent an interrupt adding something to the queue
2453:../freertos/queue.c **** 		between the check to see if the queue is empty and blocking on the queue. */
2454:../freertos/queue.c **** 		portDISABLE_INTERRUPTS();
2455:../freertos/queue.c **** 		{
2456:../freertos/queue.c **** 			if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
2457:../freertos/queue.c **** 			{
2458:../freertos/queue.c **** 				/* There are no messages in the queue, do we want to block or just
2459:../freertos/queue.c **** 				leave with nothing? */
2460:../freertos/queue.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
2461:../freertos/queue.c **** 				{
2462:../freertos/queue.c **** 					/* As this is a co-routine we cannot block directly, but return
2463:../freertos/queue.c **** 					indicating that we need to block. */
2464:../freertos/queue.c **** 					vCoRoutineAddToDelayedList( xTicksToWait, &( pxQueue->xTasksWaitingToReceive ) );
2465:../freertos/queue.c **** 					portENABLE_INTERRUPTS();
ARM GAS  /tmp/ccjtHtwZ.s 			page 124


2466:../freertos/queue.c **** 					return errQUEUE_BLOCKED;
2467:../freertos/queue.c **** 				}
2468:../freertos/queue.c **** 				else
2469:../freertos/queue.c **** 				{
2470:../freertos/queue.c **** 					portENABLE_INTERRUPTS();
2471:../freertos/queue.c **** 					return errQUEUE_FULL;
2472:../freertos/queue.c **** 				}
2473:../freertos/queue.c **** 			}
2474:../freertos/queue.c **** 			else
2475:../freertos/queue.c **** 			{
2476:../freertos/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2477:../freertos/queue.c **** 			}
2478:../freertos/queue.c **** 		}
2479:../freertos/queue.c **** 		portENABLE_INTERRUPTS();
2480:../freertos/queue.c **** 
2481:../freertos/queue.c **** 		portDISABLE_INTERRUPTS();
2482:../freertos/queue.c **** 		{
2483:../freertos/queue.c **** 			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
2484:../freertos/queue.c **** 			{
2485:../freertos/queue.c **** 				/* Data is available from the queue. */
2486:../freertos/queue.c **** 				pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;
2487:../freertos/queue.c **** 				if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail )
2488:../freertos/queue.c **** 				{
2489:../freertos/queue.c **** 					pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
2490:../freertos/queue.c **** 				}
2491:../freertos/queue.c **** 				else
2492:../freertos/queue.c **** 				{
2493:../freertos/queue.c **** 					mtCOVERAGE_TEST_MARKER();
2494:../freertos/queue.c **** 				}
2495:../freertos/queue.c **** 				--( pxQueue->uxMessagesWaiting );
2496:../freertos/queue.c **** 				( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( unsigned ) pxQ
2497:../freertos/queue.c **** 
2498:../freertos/queue.c **** 				xReturn = pdPASS;
2499:../freertos/queue.c **** 
2500:../freertos/queue.c **** 				/* Were any co-routines waiting for space to become available? */
2501:../freertos/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
2502:../freertos/queue.c **** 				{
2503:../freertos/queue.c **** 					/* In this instance the co-routine could be placed directly
2504:../freertos/queue.c **** 					into the ready list as we are within a critical section.
2505:../freertos/queue.c **** 					Instead the same pending ready list mechanism is used as if
2506:../freertos/queue.c **** 					the event were caused from within an interrupt. */
2507:../freertos/queue.c **** 					if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
2508:../freertos/queue.c **** 					{
2509:../freertos/queue.c **** 						xReturn = errQUEUE_YIELD;
2510:../freertos/queue.c **** 					}
2511:../freertos/queue.c **** 					else
2512:../freertos/queue.c **** 					{
2513:../freertos/queue.c **** 						mtCOVERAGE_TEST_MARKER();
2514:../freertos/queue.c **** 					}
2515:../freertos/queue.c **** 				}
2516:../freertos/queue.c **** 				else
2517:../freertos/queue.c **** 				{
2518:../freertos/queue.c **** 					mtCOVERAGE_TEST_MARKER();
2519:../freertos/queue.c **** 				}
2520:../freertos/queue.c **** 			}
2521:../freertos/queue.c **** 			else
2522:../freertos/queue.c **** 			{
ARM GAS  /tmp/ccjtHtwZ.s 			page 125


2523:../freertos/queue.c **** 				xReturn = pdFAIL;
2524:../freertos/queue.c **** 			}
2525:../freertos/queue.c **** 		}
2526:../freertos/queue.c **** 		portENABLE_INTERRUPTS();
2527:../freertos/queue.c **** 
2528:../freertos/queue.c **** 		return xReturn;
2529:../freertos/queue.c **** 	}
2530:../freertos/queue.c **** 
2531:../freertos/queue.c **** #endif /* configUSE_CO_ROUTINES */
2532:../freertos/queue.c **** /*-----------------------------------------------------------*/
2533:../freertos/queue.c **** 
2534:../freertos/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
2535:../freertos/queue.c **** 
2536:../freertos/queue.c **** 	BaseType_t xQueueCRSendFromISR( QueueHandle_t xQueue, const void *pvItemToQueue, BaseType_t xCoRou
2537:../freertos/queue.c **** 	{
2538:../freertos/queue.c **** 	Queue_t * const pxQueue = xQueue;
2539:../freertos/queue.c **** 
2540:../freertos/queue.c **** 		/* Cannot block within an ISR so if there is no space on the queue then
2541:../freertos/queue.c **** 		exit without doing anything. */
2542:../freertos/queue.c **** 		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
2543:../freertos/queue.c **** 		{
2544:../freertos/queue.c **** 			prvCopyDataToQueue( pxQueue, pvItemToQueue, queueSEND_TO_BACK );
2545:../freertos/queue.c **** 
2546:../freertos/queue.c **** 			/* We only want to wake one co-routine per ISR, so check that a
2547:../freertos/queue.c **** 			co-routine has not already been woken. */
2548:../freertos/queue.c **** 			if( xCoRoutinePreviouslyWoken == pdFALSE )
2549:../freertos/queue.c **** 			{
2550:../freertos/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
2551:../freertos/queue.c **** 				{
2552:../freertos/queue.c **** 					if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
2553:../freertos/queue.c **** 					{
2554:../freertos/queue.c **** 						return pdTRUE;
2555:../freertos/queue.c **** 					}
2556:../freertos/queue.c **** 					else
2557:../freertos/queue.c **** 					{
2558:../freertos/queue.c **** 						mtCOVERAGE_TEST_MARKER();
2559:../freertos/queue.c **** 					}
2560:../freertos/queue.c **** 				}
2561:../freertos/queue.c **** 				else
2562:../freertos/queue.c **** 				{
2563:../freertos/queue.c **** 					mtCOVERAGE_TEST_MARKER();
2564:../freertos/queue.c **** 				}
2565:../freertos/queue.c **** 			}
2566:../freertos/queue.c **** 			else
2567:../freertos/queue.c **** 			{
2568:../freertos/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2569:../freertos/queue.c **** 			}
2570:../freertos/queue.c **** 		}
2571:../freertos/queue.c **** 		else
2572:../freertos/queue.c **** 		{
2573:../freertos/queue.c **** 			mtCOVERAGE_TEST_MARKER();
2574:../freertos/queue.c **** 		}
2575:../freertos/queue.c **** 
2576:../freertos/queue.c **** 		return xCoRoutinePreviouslyWoken;
2577:../freertos/queue.c **** 	}
2578:../freertos/queue.c **** 
2579:../freertos/queue.c **** #endif /* configUSE_CO_ROUTINES */
ARM GAS  /tmp/ccjtHtwZ.s 			page 126


2580:../freertos/queue.c **** /*-----------------------------------------------------------*/
2581:../freertos/queue.c **** 
2582:../freertos/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
2583:../freertos/queue.c **** 
2584:../freertos/queue.c **** 	BaseType_t xQueueCRReceiveFromISR( QueueHandle_t xQueue, void *pvBuffer, BaseType_t *pxCoRoutineWo
2585:../freertos/queue.c **** 	{
2586:../freertos/queue.c **** 	BaseType_t xReturn;
2587:../freertos/queue.c **** 	Queue_t * const pxQueue = xQueue;
2588:../freertos/queue.c **** 
2589:../freertos/queue.c **** 		/* We cannot block from an ISR, so check there is data available. If
2590:../freertos/queue.c **** 		not then just leave without doing anything. */
2591:../freertos/queue.c **** 		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
2592:../freertos/queue.c **** 		{
2593:../freertos/queue.c **** 			/* Copy the data from the queue. */
2594:../freertos/queue.c **** 			pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;
2595:../freertos/queue.c **** 			if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail )
2596:../freertos/queue.c **** 			{
2597:../freertos/queue.c **** 				pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
2598:../freertos/queue.c **** 			}
2599:../freertos/queue.c **** 			else
2600:../freertos/queue.c **** 			{
2601:../freertos/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2602:../freertos/queue.c **** 			}
2603:../freertos/queue.c **** 			--( pxQueue->uxMessagesWaiting );
2604:../freertos/queue.c **** 			( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( unsigned ) pxQu
2605:../freertos/queue.c **** 
2606:../freertos/queue.c **** 			if( ( *pxCoRoutineWoken ) == pdFALSE )
2607:../freertos/queue.c **** 			{
2608:../freertos/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
2609:../freertos/queue.c **** 				{
2610:../freertos/queue.c **** 					if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
2611:../freertos/queue.c **** 					{
2612:../freertos/queue.c **** 						*pxCoRoutineWoken = pdTRUE;
2613:../freertos/queue.c **** 					}
2614:../freertos/queue.c **** 					else
2615:../freertos/queue.c **** 					{
2616:../freertos/queue.c **** 						mtCOVERAGE_TEST_MARKER();
2617:../freertos/queue.c **** 					}
2618:../freertos/queue.c **** 				}
2619:../freertos/queue.c **** 				else
2620:../freertos/queue.c **** 				{
2621:../freertos/queue.c **** 					mtCOVERAGE_TEST_MARKER();
2622:../freertos/queue.c **** 				}
2623:../freertos/queue.c **** 			}
2624:../freertos/queue.c **** 			else
2625:../freertos/queue.c **** 			{
2626:../freertos/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2627:../freertos/queue.c **** 			}
2628:../freertos/queue.c **** 
2629:../freertos/queue.c **** 			xReturn = pdPASS;
2630:../freertos/queue.c **** 		}
2631:../freertos/queue.c **** 		else
2632:../freertos/queue.c **** 		{
2633:../freertos/queue.c **** 			xReturn = pdFAIL;
2634:../freertos/queue.c **** 		}
2635:../freertos/queue.c **** 
2636:../freertos/queue.c **** 		return xReturn;
ARM GAS  /tmp/ccjtHtwZ.s 			page 127


2637:../freertos/queue.c **** 	}
2638:../freertos/queue.c **** 
2639:../freertos/queue.c **** #endif /* configUSE_CO_ROUTINES */
2640:../freertos/queue.c **** /*-----------------------------------------------------------*/
2641:../freertos/queue.c **** 
2642:../freertos/queue.c **** #if ( configQUEUE_REGISTRY_SIZE > 0 )
2643:../freertos/queue.c **** 
2644:../freertos/queue.c **** 	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified
2645:../freertos/queue.c **** 	{
2646:../freertos/queue.c **** 	UBaseType_t ux;
2647:../freertos/queue.c **** 
2648:../freertos/queue.c **** 		/* See if there is an empty space in the registry.  A NULL name denotes
2649:../freertos/queue.c **** 		a free slot. */
2650:../freertos/queue.c **** 		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
2651:../freertos/queue.c **** 		{
2652:../freertos/queue.c **** 			if( xQueueRegistry[ ux ].pcQueueName == NULL )
2653:../freertos/queue.c **** 			{
2654:../freertos/queue.c **** 				/* Store the information on this queue. */
2655:../freertos/queue.c **** 				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
2656:../freertos/queue.c **** 				xQueueRegistry[ ux ].xHandle = xQueue;
2657:../freertos/queue.c **** 
2658:../freertos/queue.c **** 				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
2659:../freertos/queue.c **** 				break;
2660:../freertos/queue.c **** 			}
2661:../freertos/queue.c **** 			else
2662:../freertos/queue.c **** 			{
2663:../freertos/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2664:../freertos/queue.c **** 			}
2665:../freertos/queue.c **** 		}
2666:../freertos/queue.c **** 	}
2667:../freertos/queue.c **** 
2668:../freertos/queue.c **** #endif /* configQUEUE_REGISTRY_SIZE */
2669:../freertos/queue.c **** /*-----------------------------------------------------------*/
2670:../freertos/queue.c **** 
2671:../freertos/queue.c **** #if ( configQUEUE_REGISTRY_SIZE > 0 )
2672:../freertos/queue.c **** 
2673:../freertos/queue.c **** 	const char *pcQueueGetName( QueueHandle_t xQueue ) /*lint !e971 Unqualified char types are allowed
2674:../freertos/queue.c **** 	{
2675:../freertos/queue.c **** 	UBaseType_t ux;
2676:../freertos/queue.c **** 	const char *pcReturn = NULL; /*lint !e971 Unqualified char types are allowed for strings and singl
2677:../freertos/queue.c **** 
2678:../freertos/queue.c **** 		/* Note there is nothing here to protect against another task adding or
2679:../freertos/queue.c **** 		removing entries from the registry while it is being searched. */
2680:../freertos/queue.c **** 		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
2681:../freertos/queue.c **** 		{
2682:../freertos/queue.c **** 			if( xQueueRegistry[ ux ].xHandle == xQueue )
2683:../freertos/queue.c **** 			{
2684:../freertos/queue.c **** 				pcReturn = xQueueRegistry[ ux ].pcQueueName;
2685:../freertos/queue.c **** 				break;
2686:../freertos/queue.c **** 			}
2687:../freertos/queue.c **** 			else
2688:../freertos/queue.c **** 			{
2689:../freertos/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2690:../freertos/queue.c **** 			}
2691:../freertos/queue.c **** 		}
2692:../freertos/queue.c **** 
2693:../freertos/queue.c **** 		return pcReturn;
ARM GAS  /tmp/ccjtHtwZ.s 			page 128


2694:../freertos/queue.c **** 	} /*lint !e818 xQueue cannot be a pointer to const because it is a typedef. */
2695:../freertos/queue.c **** 
2696:../freertos/queue.c **** #endif /* configQUEUE_REGISTRY_SIZE */
2697:../freertos/queue.c **** /*-----------------------------------------------------------*/
2698:../freertos/queue.c **** 
2699:../freertos/queue.c **** #if ( configQUEUE_REGISTRY_SIZE > 0 )
2700:../freertos/queue.c **** 
2701:../freertos/queue.c **** 	void vQueueUnregisterQueue( QueueHandle_t xQueue )
2702:../freertos/queue.c **** 	{
2703:../freertos/queue.c **** 	UBaseType_t ux;
2704:../freertos/queue.c **** 
2705:../freertos/queue.c **** 		/* See if the handle of the queue being unregistered in actually in the
2706:../freertos/queue.c **** 		registry. */
2707:../freertos/queue.c **** 		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
2708:../freertos/queue.c **** 		{
2709:../freertos/queue.c **** 			if( xQueueRegistry[ ux ].xHandle == xQueue )
2710:../freertos/queue.c **** 			{
2711:../freertos/queue.c **** 				/* Set the name to NULL to show that this slot if free again. */
2712:../freertos/queue.c **** 				xQueueRegistry[ ux ].pcQueueName = NULL;
2713:../freertos/queue.c **** 
2714:../freertos/queue.c **** 				/* Set the handle to NULL to ensure the same queue handle cannot
2715:../freertos/queue.c **** 				appear in the registry twice if it is added, removed, then
2716:../freertos/queue.c **** 				added again. */
2717:../freertos/queue.c **** 				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
2718:../freertos/queue.c **** 				break;
2719:../freertos/queue.c **** 			}
2720:../freertos/queue.c **** 			else
2721:../freertos/queue.c **** 			{
2722:../freertos/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2723:../freertos/queue.c **** 			}
2724:../freertos/queue.c **** 		}
2725:../freertos/queue.c **** 
2726:../freertos/queue.c **** 	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
2727:../freertos/queue.c **** 
2728:../freertos/queue.c **** #endif /* configQUEUE_REGISTRY_SIZE */
2729:../freertos/queue.c **** /*-----------------------------------------------------------*/
2730:../freertos/queue.c **** 
2731:../freertos/queue.c **** #if ( configUSE_TIMERS == 1 )
2732:../freertos/queue.c **** 
2733:../freertos/queue.c **** 	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType
2734:../freertos/queue.c **** 	{
 3377              		.loc 1 2734 2 is_stmt 1 view -0
 3378              		.cfi_startproc
 3379              		@ args = 0, pretend = 0, frame = 0
 3380              		@ frame_needed = 0, uses_anonymous_args = 0
2735:../freertos/queue.c **** 	Queue_t * const pxQueue = xQueue;
 3381              		.loc 1 2735 2 view .LVU988
 3382              	@ ../freertos/queue.c:2734: 	{
2734:../freertos/queue.c **** 	Queue_t * const pxQueue = xQueue;
 3383              		.loc 1 2734 2 is_stmt 0 view .LVU989
 3384 07f8 70B5     		push	{r4, r5, r6, lr}	@
 3385              	.LCFI34:
 3386              		.cfi_def_cfa_offset 16
 3387              		.cfi_offset 4, -16
 3388              		.cfi_offset 5, -12
 3389              		.cfi_offset 6, -8
 3390              		.cfi_offset 14, -4
ARM GAS  /tmp/ccjtHtwZ.s 			page 129


 3391              	@ ../freertos/queue.c:2734: 	{
2734:../freertos/queue.c **** 	Queue_t * const pxQueue = xQueue;
 3392              		.loc 1 2734 2 view .LVU990
 3393 07fa 0446     		mov	r4, r0	@ xQueue, tmp131
 3394              	.LVL287:
2736:../freertos/queue.c **** 
2737:../freertos/queue.c **** 		/* This function should not be called by application code hence the
2738:../freertos/queue.c **** 		'Restricted' in its name.  It is not part of the public API.  It is
2739:../freertos/queue.c **** 		designed for use by kernel code, and has special calling requirements.
2740:../freertos/queue.c **** 		It can result in vListInsert() being called on a list that can only
2741:../freertos/queue.c **** 		possibly ever have one item in it, so the list will be fast, but even
2742:../freertos/queue.c **** 		so it should be called with the scheduler locked and not from a critical
2743:../freertos/queue.c **** 		section. */
2744:../freertos/queue.c **** 
2745:../freertos/queue.c **** 		/* Only do anything if there are no messages in the queue.  This function
2746:../freertos/queue.c **** 		will not actually cause the task to block, just place it on a blocked
2747:../freertos/queue.c **** 		list.  It will not block until the scheduler is unlocked - at which
2748:../freertos/queue.c **** 		time a yield will be performed.  If an item is added to the queue while
2749:../freertos/queue.c **** 		the queue is locked, and the calling task blocks on the queue, then the
2750:../freertos/queue.c **** 		calling task will be immediately unblocked when the queue is unlocked. */
2751:../freertos/queue.c **** 		prvLockQueue( pxQueue );
 3395              		.loc 1 2751 3 is_stmt 1 view .LVU991
 3396              	@ ../freertos/queue.c:2734: 	{
2734:../freertos/queue.c **** 	Queue_t * const pxQueue = xQueue;
 3397              		.loc 1 2734 2 is_stmt 0 view .LVU992
 3398 07fc 0D46     		mov	r5, r1	@ xTicksToWait, tmp132
 3399 07fe 1646     		mov	r6, r2	@ xWaitIndefinitely, tmp133
 3400              	@ ../freertos/queue.c:2751: 		prvLockQueue( pxQueue );
 3401              		.loc 1 2751 3 view .LVU993
 3402 0800 FFF7FEFF 		bl	vPortEnterCritical		@
 3403              	.LVL288:
 3404              		.loc 1 2751 3 is_stmt 1 view .LVU994
 3405 0804 94F84430 		ldrb	r3, [r4, #68]	@ zero_extendqisi2	@ MEM[(struct Queue_t *)xQueue_8(D)].cRxLock, MEM[(struct Qu
 3406 0808 FF2B     		cmp	r3, #255	@ MEM[(struct Queue_t *)xQueue_8(D)].cRxLock,
 3407              		.loc 1 2751 3 view .LVU995
 3408 080a 04BF     		itt	eq
 3409 080c 0023     		moveq	r3, #0	@ tmp123,
 3410 080e 84F84430 		strbeq	r3, [r4, #68]	@ tmp123, MEM[(struct Queue_t *)xQueue_8(D)].cRxLock
 3411              		.loc 1 2751 3 view .LVU996
 3412 0812 94F84530 		ldrb	r3, [r4, #69]	@ zero_extendqisi2	@ MEM[(struct Queue_t *)xQueue_8(D)].cTxLock, MEM[(struct Qu
 3413 0816 FF2B     		cmp	r3, #255	@ MEM[(struct Queue_t *)xQueue_8(D)].cTxLock,
 3414              		.loc 1 2751 3 view .LVU997
 3415 0818 04BF     		itt	eq
 3416 081a 0023     		moveq	r3, #0	@ tmp128,
 3417 081c 84F84530 		strbeq	r3, [r4, #69]	@ tmp128, MEM[(struct Queue_t *)xQueue_8(D)].cTxLock
 3418              		.loc 1 2751 3 view .LVU998
 3419 0820 FFF7FEFF 		bl	vPortExitCritical		@
 3420              	.LVL289:
2752:../freertos/queue.c **** 		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 3421              		.loc 1 2752 3 view .LVU999
 3422              	@ ../freertos/queue.c:2752: 		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 3423              		.loc 1 2752 14 is_stmt 0 view .LVU1000
 3424 0824 A36B     		ldr	r3, [r4, #56]	@ _3, MEM[(struct Queue_t *)xQueue_8(D)].uxMessagesWaiting
 3425              	@ ../freertos/queue.c:2752: 		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 3426              		.loc 1 2752 5 view .LVU1001
 3427 0826 2BB9     		cbnz	r3, .L221	@ _3,
2753:../freertos/queue.c **** 		{
ARM GAS  /tmp/ccjtHtwZ.s 			page 130


2754:../freertos/queue.c **** 			/* There is nothing in the queue, block for the specified period. */
2755:../freertos/queue.c **** 			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefi
 3428              		.loc 1 2755 4 is_stmt 1 view .LVU1002
 3429 0828 3246     		mov	r2, r6	@, xWaitIndefinitely
 3430 082a 2946     		mov	r1, r5	@, xTicksToWait
 3431 082c 04F12400 		add	r0, r4, #36	@, xQueue,
 3432 0830 FFF7FEFF 		bl	vTaskPlaceOnEventListRestricted		@
 3433              	.LVL290:
 3434              	.L221:
2756:../freertos/queue.c **** 		}
2757:../freertos/queue.c **** 		else
2758:../freertos/queue.c **** 		{
2759:../freertos/queue.c **** 			mtCOVERAGE_TEST_MARKER();
 3435              		.loc 1 2759 28 view .LVU1003
2760:../freertos/queue.c **** 		}
2761:../freertos/queue.c **** 		prvUnlockQueue( pxQueue );
 3436              		.loc 1 2761 3 view .LVU1004
 3437 0834 2046     		mov	r0, r4	@, xQueue
 3438              	@ ../freertos/queue.c:2762: 	}
2762:../freertos/queue.c **** 	}
 3439              		.loc 1 2762 2 is_stmt 0 view .LVU1005
 3440 0836 BDE87040 		pop	{r4, r5, r6, lr}	@
 3441              	.LCFI35:
 3442              		.cfi_restore 14
 3443              		.cfi_restore 6
 3444              		.cfi_restore 5
 3445              		.cfi_restore 4
 3446              		.cfi_def_cfa_offset 0
 3447              	.LVL291:
 3448              	@ ../freertos/queue.c:2761: 		prvUnlockQueue( pxQueue );
2761:../freertos/queue.c **** 	}
 3449              		.loc 1 2761 3 view .LVU1006
 3450 083a 35E4     		b	prvUnlockQueue		@
 3451              	.LVL292:
2761:../freertos/queue.c **** 	}
 3452              		.loc 1 2761 3 view .LVU1007
 3453              		.cfi_endproc
 3454              	.LFE36:
 3455              		.size	vQueueWaitForMessageRestricted, .-vQueueWaitForMessageRestricted
 3456              	.Letext0:
 3457              		.file 3 "/usr/lib/gcc/arm-none-eabi/10.3.1/include/stddef.h"
 3458              		.file 4 "/usr/arm-none-eabi/include/machine/_default_types.h"
 3459              		.file 5 "/usr/arm-none-eabi/include/sys/_stdint.h"
 3460              		.file 6 "../freertos/include/list.h"
 3461              		.file 7 "../freertos/include/task.h"
 3462              		.file 8 "../freertos/include/queue.h"
 3463              		.file 9 "../freertos/include/portable.h"
 3464              		.file 10 "<built-in>"
 3465              		.section	.debug_info,"",%progbits
 3466              	.Ldebug_info0:
 3467 0000 471D0000 		.4byte	0x1d47
 3468 0004 0200     		.2byte	0x2
 3469 0006 00000000 		.4byte	.Ldebug_abbrev0
 3470 000a 04       		.byte	0x4
 3471 000b 01       		.uleb128 0x1
 3472 000c D3060000 		.4byte	.LASF151
 3473 0010 0C       		.byte	0xc
ARM GAS  /tmp/ccjtHtwZ.s 			page 131


 3474 0011 A6060000 		.4byte	.LASF152
 3475 0015 7D080000 		.4byte	.LASF153
 3476 0019 00000000 		.4byte	.Ltext0
 3477 001d 3C080000 		.4byte	.Letext0
 3478 0021 00000000 		.4byte	.Ldebug_line0
 3479 0025 02       		.uleb128 0x2
 3480 0026 15030000 		.4byte	.LASF3
 3481 002a 03       		.byte	0x3
 3482 002b D1       		.byte	0xd1
 3483 002c 17       		.byte	0x17
 3484 002d 31000000 		.4byte	0x31
 3485 0031 03       		.uleb128 0x3
 3486 0032 04       		.byte	0x4
 3487 0033 07       		.byte	0x7
 3488 0034 B0000000 		.4byte	.LASF0
 3489 0038 04       		.uleb128 0x4
 3490 0039 04       		.byte	0x4
 3491 003a 05       		.byte	0x5
 3492 003b 696E7400 		.ascii	"int\000"
 3493 003f 03       		.uleb128 0x3
 3494 0040 08       		.byte	0x8
 3495 0041 05       		.byte	0x5
 3496 0042 FD040000 		.4byte	.LASF1
 3497 0046 03       		.uleb128 0x3
 3498 0047 08       		.byte	0x8
 3499 0048 04       		.byte	0x4
 3500 0049 60060000 		.4byte	.LASF2
 3501 004d 02       		.uleb128 0x2
 3502 004e 33060000 		.4byte	.LASF4
 3503 0052 04       		.byte	0x4
 3504 0053 29       		.byte	0x29
 3505 0054 17       		.byte	0x17
 3506 0055 59000000 		.4byte	0x59
 3507 0059 03       		.uleb128 0x3
 3508 005a 01       		.byte	0x1
 3509 005b 06       		.byte	0x6
 3510 005c C4090000 		.4byte	.LASF5
 3511 0060 02       		.uleb128 0x2
 3512 0061 04080000 		.4byte	.LASF6
 3513 0065 04       		.byte	0x4
 3514 0066 2B       		.byte	0x2b
 3515 0067 18       		.byte	0x18
 3516 0068 6C000000 		.4byte	0x6c
 3517 006c 03       		.uleb128 0x3
 3518 006d 01       		.byte	0x1
 3519 006e 08       		.byte	0x8
 3520 006f D7080000 		.4byte	.LASF7
 3521 0073 03       		.uleb128 0x3
 3522 0074 02       		.byte	0x2
 3523 0075 05       		.byte	0x5
 3524 0076 61070000 		.4byte	.LASF8
 3525 007a 03       		.uleb128 0x3
 3526 007b 02       		.byte	0x2
 3527 007c 07       		.byte	0x7
 3528 007d D0090000 		.4byte	.LASF9
 3529 0081 03       		.uleb128 0x3
 3530 0082 04       		.byte	0x4
ARM GAS  /tmp/ccjtHtwZ.s 			page 132


 3531 0083 05       		.byte	0x5
 3532 0084 76070000 		.4byte	.LASF10
 3533 0088 02       		.uleb128 0x2
 3534 0089 E5080000 		.4byte	.LASF11
 3535 008d 04       		.byte	0x4
 3536 008e 4F       		.byte	0x4f
 3537 008f 19       		.byte	0x19
 3538 0090 94000000 		.4byte	0x94
 3539 0094 03       		.uleb128 0x3
 3540 0095 04       		.byte	0x4
 3541 0096 07       		.byte	0x7
 3542 0097 2F080000 		.4byte	.LASF12
 3543 009b 03       		.uleb128 0x3
 3544 009c 08       		.byte	0x8
 3545 009d 07       		.byte	0x7
 3546 009e 43020000 		.4byte	.LASF13
 3547 00a2 05       		.uleb128 0x5
 3548 00a3 04       		.byte	0x4
 3549 00a4 06       		.uleb128 0x6
 3550 00a5 A2000000 		.4byte	0xa2
 3551 00a9 03       		.uleb128 0x3
 3552 00aa 01       		.byte	0x1
 3553 00ab 08       		.byte	0x8
 3554 00ac 00040000 		.4byte	.LASF14
 3555 00b0 07       		.uleb128 0x7
 3556 00b1 04       		.byte	0x4
 3557 00b2 BB000000 		.4byte	0xbb
 3558 00b6 06       		.uleb128 0x6
 3559 00b7 B0000000 		.4byte	0xb0
 3560 00bb 08       		.uleb128 0x8
 3561 00bc 02       		.uleb128 0x2
 3562 00bd ED010000 		.4byte	.LASF15
 3563 00c1 05       		.byte	0x5
 3564 00c2 14       		.byte	0x14
 3565 00c3 12       		.byte	0x12
 3566 00c4 4D000000 		.4byte	0x4d
 3567 00c8 09       		.uleb128 0x9
 3568 00c9 BC000000 		.4byte	0xbc
 3569 00cd 06       		.uleb128 0x6
 3570 00ce BC000000 		.4byte	0xbc
 3571 00d2 02       		.uleb128 0x2
 3572 00d3 BC040000 		.4byte	.LASF16
 3573 00d7 05       		.byte	0x5
 3574 00d8 18       		.byte	0x18
 3575 00d9 13       		.byte	0x13
 3576 00da 60000000 		.4byte	0x60
 3577 00de 06       		.uleb128 0x6
 3578 00df D2000000 		.4byte	0xd2
 3579 00e3 02       		.uleb128 0x2
 3580 00e4 E4010000 		.4byte	.LASF17
 3581 00e8 05       		.byte	0x5
 3582 00e9 30       		.byte	0x30
 3583 00ea 14       		.byte	0x14
 3584 00eb 88000000 		.4byte	0x88
 3585 00ef 02       		.uleb128 0x2
 3586 00f0 1E050000 		.4byte	.LASF18
 3587 00f4 02       		.byte	0x2
ARM GAS  /tmp/ccjtHtwZ.s 			page 133


 3588 00f5 38       		.byte	0x38
 3589 00f6 0E       		.byte	0xe
 3590 00f7 81000000 		.4byte	0x81
 3591 00fb 06       		.uleb128 0x6
 3592 00fc EF000000 		.4byte	0xef
 3593 0100 02       		.uleb128 0x2
 3594 0101 3A040000 		.4byte	.LASF19
 3595 0105 02       		.byte	0x2
 3596 0106 39       		.byte	0x39
 3597 0107 17       		.byte	0x17
 3598 0108 94000000 		.4byte	0x94
 3599 010c 09       		.uleb128 0x9
 3600 010d 00010000 		.4byte	0x100
 3601 0111 06       		.uleb128 0x6
 3602 0112 00010000 		.4byte	0x100
 3603 0116 02       		.uleb128 0x2
 3604 0117 28060000 		.4byte	.LASF20
 3605 011b 02       		.byte	0x2
 3606 011c 3F       		.byte	0x3f
 3607 011d 13       		.byte	0x13
 3608 011e E3000000 		.4byte	0xe3
 3609 0122 07       		.uleb128 0x7
 3610 0123 04       		.byte	0x4
 3611 0124 D2000000 		.4byte	0xd2
 3612 0128 0A       		.uleb128 0xa
 3613 0129 DC000000 		.4byte	.LASF26
 3614 012d 14       		.byte	0x14
 3615 012e 06       		.byte	0x6
 3616 012f 8C       		.byte	0x8c
 3617 0130 08       		.byte	0x8
 3618 0131 81010000 		.4byte	0x181
 3619 0135 0B       		.uleb128 0xb
 3620 0136 6B070000 		.4byte	.LASF21
 3621 013a 06       		.byte	0x6
 3622 013b 8F       		.byte	0x8f
 3623 013c 21       		.byte	0x21
 3624 013d 16010000 		.4byte	0x116
 3625 0141 02       		.byte	0x2
 3626 0142 23       		.byte	0x23
 3627 0143 00       		.uleb128 0
 3628 0144 0B       		.uleb128 0xb
 3629 0145 64050000 		.4byte	.LASF22
 3630 0149 06       		.byte	0x6
 3631 014a 90       		.byte	0x90
 3632 014b 2A       		.byte	0x2a
 3633 014c 81010000 		.4byte	0x181
 3634 0150 02       		.byte	0x2
 3635 0151 23       		.byte	0x23
 3636 0152 04       		.uleb128 0x4
 3637 0153 0B       		.uleb128 0xb
 3638 0154 98020000 		.4byte	.LASF23
 3639 0158 06       		.byte	0x6
 3640 0159 91       		.byte	0x91
 3641 015a 2A       		.byte	0x2a
 3642 015b 81010000 		.4byte	0x181
 3643 015f 02       		.byte	0x2
 3644 0160 23       		.byte	0x23
ARM GAS  /tmp/ccjtHtwZ.s 			page 134


 3645 0161 08       		.uleb128 0x8
 3646 0162 0B       		.uleb128 0xb
 3647 0163 46090000 		.4byte	.LASF24
 3648 0167 06       		.byte	0x6
 3649 0168 92       		.byte	0x92
 3650 0169 09       		.byte	0x9
 3651 016a A2000000 		.4byte	0xa2
 3652 016e 02       		.byte	0x2
 3653 016f 23       		.byte	0x23
 3654 0170 0C       		.uleb128 0xc
 3655 0171 0B       		.uleb128 0xb
 3656 0172 9A060000 		.4byte	.LASF25
 3657 0176 06       		.byte	0x6
 3658 0177 93       		.byte	0x93
 3659 0178 25       		.byte	0x25
 3660 0179 C2010000 		.4byte	0x1c2
 3661 017d 02       		.byte	0x2
 3662 017e 23       		.byte	0x23
 3663 017f 10       		.uleb128 0x10
 3664 0180 00       		.byte	0
 3665 0181 07       		.uleb128 0x7
 3666 0182 04       		.byte	0x4
 3667 0183 28010000 		.4byte	0x128
 3668 0187 0A       		.uleb128 0xa
 3669 0188 3D030000 		.4byte	.LASF27
 3670 018c 14       		.byte	0x14
 3671 018d 06       		.byte	0x6
 3672 018e A4       		.byte	0xa4
 3673 018f 10       		.byte	0x10
 3674 0190 C2010000 		.4byte	0x1c2
 3675 0194 0B       		.uleb128 0xb
 3676 0195 00000000 		.4byte	.LASF28
 3677 0199 06       		.byte	0x6
 3678 019a A7       		.byte	0xa7
 3679 019b 17       		.byte	0x17
 3680 019c 0C010000 		.4byte	0x10c
 3681 01a0 02       		.byte	0x2
 3682 01a1 23       		.byte	0x23
 3683 01a2 00       		.uleb128 0
 3684 01a3 0B       		.uleb128 0xb
 3685 01a4 BD000000 		.4byte	.LASF29
 3686 01a8 06       		.byte	0x6
 3687 01a9 A8       		.byte	0xa8
 3688 01aa 23       		.byte	0x23
 3689 01ab 1B020000 		.4byte	0x21b
 3690 01af 02       		.byte	0x2
 3691 01b0 23       		.byte	0x23
 3692 01b1 04       		.uleb128 0x4
 3693 01b2 0B       		.uleb128 0xb
 3694 01b3 66040000 		.4byte	.LASF30
 3695 01b7 06       		.byte	0x6
 3696 01b8 A9       		.byte	0xa9
 3697 01b9 11       		.byte	0x11
 3698 01ba 0F020000 		.4byte	0x20f
 3699 01be 02       		.byte	0x2
 3700 01bf 23       		.byte	0x23
 3701 01c0 08       		.uleb128 0x8
ARM GAS  /tmp/ccjtHtwZ.s 			page 135


 3702 01c1 00       		.byte	0
 3703 01c2 07       		.uleb128 0x7
 3704 01c3 04       		.byte	0x4
 3705 01c4 87010000 		.4byte	0x187
 3706 01c8 02       		.uleb128 0x2
 3707 01c9 05040000 		.4byte	.LASF31
 3708 01cd 06       		.byte	0x6
 3709 01ce 96       		.byte	0x96
 3710 01cf 1B       		.byte	0x1b
 3711 01d0 28010000 		.4byte	0x128
 3712 01d4 0A       		.uleb128 0xa
 3713 01d5 2D030000 		.4byte	.LASF32
 3714 01d9 0C       		.byte	0xc
 3715 01da 06       		.byte	0x6
 3716 01db 98       		.byte	0x98
 3717 01dc 08       		.byte	0x8
 3718 01dd 0F020000 		.4byte	0x20f
 3719 01e1 0B       		.uleb128 0xb
 3720 01e2 6B070000 		.4byte	.LASF21
 3721 01e6 06       		.byte	0x6
 3722 01e7 9B       		.byte	0x9b
 3723 01e8 21       		.byte	0x21
 3724 01e9 16010000 		.4byte	0x116
 3725 01ed 02       		.byte	0x2
 3726 01ee 23       		.byte	0x23
 3727 01ef 00       		.uleb128 0
 3728 01f0 0B       		.uleb128 0xb
 3729 01f1 64050000 		.4byte	.LASF22
 3730 01f5 06       		.byte	0x6
 3731 01f6 9C       		.byte	0x9c
 3732 01f7 2A       		.byte	0x2a
 3733 01f8 81010000 		.4byte	0x181
 3734 01fc 02       		.byte	0x2
 3735 01fd 23       		.byte	0x23
 3736 01fe 04       		.uleb128 0x4
 3737 01ff 0B       		.uleb128 0xb
 3738 0200 98020000 		.4byte	.LASF23
 3739 0204 06       		.byte	0x6
 3740 0205 9D       		.byte	0x9d
 3741 0206 2A       		.byte	0x2a
 3742 0207 81010000 		.4byte	0x181
 3743 020b 02       		.byte	0x2
 3744 020c 23       		.byte	0x23
 3745 020d 08       		.uleb128 0x8
 3746 020e 00       		.byte	0
 3747 020f 02       		.uleb128 0x2
 3748 0210 8D040000 		.4byte	.LASF33
 3749 0214 06       		.byte	0x6
 3750 0215 9F       		.byte	0x9f
 3751 0216 20       		.byte	0x20
 3752 0217 D4010000 		.4byte	0x1d4
 3753 021b 07       		.uleb128 0x7
 3754 021c 04       		.byte	0x4
 3755 021d C8010000 		.4byte	0x1c8
 3756 0221 02       		.uleb128 0x2
 3757 0222 06060000 		.4byte	.LASF34
 3758 0226 06       		.byte	0x6
ARM GAS  /tmp/ccjtHtwZ.s 			page 136


 3759 0227 AB       		.byte	0xab
 3760 0228 03       		.byte	0x3
 3761 0229 87010000 		.4byte	0x187
 3762 022d 02       		.uleb128 0x2
 3763 022e BE050000 		.4byte	.LASF35
 3764 0232 07       		.byte	0x7
 3765 0233 46       		.byte	0x46
 3766 0234 25       		.byte	0x25
 3767 0235 39020000 		.4byte	0x239
 3768 0239 07       		.uleb128 0x7
 3769 023a 04       		.byte	0x4
 3770 023b 3F020000 		.4byte	0x23f
 3771 023f 0C       		.uleb128 0xc
 3772 0240 30000000 		.4byte	.LASF154
 3773 0244 01       		.byte	0x1
 3774 0245 0A       		.uleb128 0xa
 3775 0246 C5000000 		.4byte	.LASF36
 3776 024a 08       		.byte	0x8
 3777 024b 07       		.byte	0x7
 3778 024c 66       		.byte	0x66
 3779 024d 10       		.byte	0x10
 3780 024e 71020000 		.4byte	0x271
 3781 0252 0B       		.uleb128 0xb
 3782 0253 5A010000 		.4byte	.LASF37
 3783 0257 07       		.byte	0x7
 3784 0258 68       		.byte	0x68
 3785 0259 0D       		.byte	0xd
 3786 025a EF000000 		.4byte	0xef
 3787 025e 02       		.byte	0x2
 3788 025f 23       		.byte	0x23
 3789 0260 00       		.uleb128 0
 3790 0261 0B       		.uleb128 0xb
 3791 0262 40050000 		.4byte	.LASF38
 3792 0266 07       		.byte	0x7
 3793 0267 69       		.byte	0x69
 3794 0268 0D       		.byte	0xd
 3795 0269 16010000 		.4byte	0x116
 3796 026d 02       		.byte	0x2
 3797 026e 23       		.byte	0x23
 3798 026f 04       		.uleb128 0x4
 3799 0270 00       		.byte	0
 3800 0271 02       		.uleb128 0x2
 3801 0272 80050000 		.4byte	.LASF39
 3802 0276 07       		.byte	0x7
 3803 0277 6A       		.byte	0x6a
 3804 0278 03       		.byte	0x3
 3805 0279 45020000 		.4byte	0x245
 3806 027d 02       		.uleb128 0x2
 3807 027e 58040000 		.4byte	.LASF40
 3808 0282 08       		.byte	0x8
 3809 0283 30       		.byte	0x30
 3810 0284 22       		.byte	0x22
 3811 0285 8E020000 		.4byte	0x28e
 3812 0289 06       		.uleb128 0x6
 3813 028a 7D020000 		.4byte	0x27d
 3814 028e 07       		.uleb128 0x7
 3815 028f 04       		.byte	0x4
ARM GAS  /tmp/ccjtHtwZ.s 			page 137


 3816 0290 94020000 		.4byte	0x294
 3817 0294 0A       		.uleb128 0xa
 3818 0295 33020000 		.4byte	.LASF41
 3819 0299 50       		.byte	0x50
 3820 029a 01       		.byte	0x1
 3821 029b 61       		.byte	0x61
 3822 029c 10       		.byte	0x10
 3823 029d 54030000 		.4byte	0x354
 3824 02a1 0B       		.uleb128 0xb
 3825 02a2 68090000 		.4byte	.LASF42
 3826 02a6 01       		.byte	0x1
 3827 02a7 63       		.byte	0x63
 3828 02a8 0A       		.byte	0xa
 3829 02a9 80030000 		.4byte	0x380
 3830 02ad 02       		.byte	0x2
 3831 02ae 23       		.byte	0x23
 3832 02af 00       		.uleb128 0
 3833 02b0 0B       		.uleb128 0xb
 3834 02b1 1E060000 		.4byte	.LASF43
 3835 02b5 01       		.byte	0x1
 3836 02b6 64       		.byte	0x64
 3837 02b7 0A       		.byte	0xa
 3838 02b8 80030000 		.4byte	0x380
 3839 02bc 02       		.byte	0x2
 3840 02bd 23       		.byte	0x23
 3841 02be 04       		.uleb128 0x4
 3842 02bf 0D       		.uleb128 0xd
 3843 02c0 7500     		.ascii	"u\000"
 3844 02c2 01       		.byte	0x1
 3845 02c3 6A       		.byte	0x6a
 3846 02c4 04       		.byte	0x4
 3847 02c5 CA030000 		.4byte	0x3ca
 3848 02c9 02       		.byte	0x2
 3849 02ca 23       		.byte	0x23
 3850 02cb 08       		.uleb128 0x8
 3851 02cc 0B       		.uleb128 0xb
 3852 02cd 27010000 		.4byte	.LASF44
 3853 02d1 01       		.byte	0x1
 3854 02d2 6C       		.byte	0x6c
 3855 02d3 09       		.byte	0x9
 3856 02d4 21020000 		.4byte	0x221
 3857 02d8 02       		.byte	0x2
 3858 02d9 23       		.byte	0x23
 3859 02da 10       		.uleb128 0x10
 3860 02db 0B       		.uleb128 0xb
 3861 02dc 77000000 		.4byte	.LASF45
 3862 02e0 01       		.byte	0x1
 3863 02e1 6D       		.byte	0x6d
 3864 02e2 09       		.byte	0x9
 3865 02e3 21020000 		.4byte	0x221
 3866 02e7 02       		.byte	0x2
 3867 02e8 23       		.byte	0x23
 3868 02e9 24       		.uleb128 0x24
 3869 02ea 0B       		.uleb128 0xb
 3870 02eb A3020000 		.4byte	.LASF46
 3871 02ef 01       		.byte	0x1
 3872 02f0 6F       		.byte	0x6f
ARM GAS  /tmp/ccjtHtwZ.s 			page 138


 3873 02f1 17       		.byte	0x17
 3874 02f2 0C010000 		.4byte	0x10c
 3875 02f6 02       		.byte	0x2
 3876 02f7 23       		.byte	0x23
 3877 02f8 38       		.uleb128 0x38
 3878 02f9 0B       		.uleb128 0xb
 3879 02fa CA060000 		.4byte	.LASF47
 3880 02fe 01       		.byte	0x1
 3881 02ff 70       		.byte	0x70
 3882 0300 0E       		.byte	0xe
 3883 0301 00010000 		.4byte	0x100
 3884 0305 02       		.byte	0x2
 3885 0306 23       		.byte	0x23
 3886 0307 3C       		.uleb128 0x3c
 3887 0308 0B       		.uleb128 0xb
 3888 0309 C0030000 		.4byte	.LASF48
 3889 030d 01       		.byte	0x1
 3890 030e 71       		.byte	0x71
 3891 030f 0E       		.byte	0xe
 3892 0310 00010000 		.4byte	0x100
 3893 0314 02       		.byte	0x2
 3894 0315 23       		.byte	0x23
 3895 0316 40       		.uleb128 0x40
 3896 0317 0B       		.uleb128 0xb
 3897 0318 080A0000 		.4byte	.LASF49
 3898 031c 01       		.byte	0x1
 3899 031d 73       		.byte	0x73
 3900 031e 12       		.byte	0x12
 3901 031f C8000000 		.4byte	0xc8
 3902 0323 02       		.byte	0x2
 3903 0324 23       		.byte	0x23
 3904 0325 44       		.uleb128 0x44
 3905 0326 0B       		.uleb128 0xb
 3906 0327 52010000 		.4byte	.LASF50
 3907 032b 01       		.byte	0x1
 3908 032c 74       		.byte	0x74
 3909 032d 12       		.byte	0x12
 3910 032e C8000000 		.4byte	0xc8
 3911 0332 02       		.byte	0x2
 3912 0333 23       		.byte	0x23
 3913 0334 45       		.uleb128 0x45
 3914 0335 0B       		.uleb128 0xb
 3915 0336 53070000 		.4byte	.LASF51
 3916 033a 01       		.byte	0x1
 3917 033b 7F       		.byte	0x7f
 3918 033c 0F       		.byte	0xf
 3919 033d 00010000 		.4byte	0x100
 3920 0341 02       		.byte	0x2
 3921 0342 23       		.byte	0x23
 3922 0343 48       		.uleb128 0x48
 3923 0344 0B       		.uleb128 0xb
 3924 0345 FA050000 		.4byte	.LASF52
 3925 0349 01       		.byte	0x1
 3926 034a 80       		.byte	0x80
 3927 034b 0B       		.byte	0xb
 3928 034c D2000000 		.4byte	0xd2
 3929 0350 02       		.byte	0x2
ARM GAS  /tmp/ccjtHtwZ.s 			page 139


 3930 0351 23       		.byte	0x23
 3931 0352 4C       		.uleb128 0x4c
 3932 0353 00       		.byte	0
 3933 0354 0A       		.uleb128 0xa
 3934 0355 1F040000 		.4byte	.LASF53
 3935 0359 08       		.byte	0x8
 3936 035a 01       		.byte	0x1
 3937 035b 43       		.byte	0x43
 3938 035c 10       		.byte	0x10
 3939 035d 80030000 		.4byte	0x380
 3940 0361 0B       		.uleb128 0xb
 3941 0362 FD070000 		.4byte	.LASF54
 3942 0366 01       		.byte	0x1
 3943 0367 45       		.byte	0x45
 3944 0368 0A       		.byte	0xa
 3945 0369 80030000 		.4byte	0x380
 3946 036d 02       		.byte	0x2
 3947 036e 23       		.byte	0x23
 3948 036f 00       		.uleb128 0
 3949 0370 0B       		.uleb128 0xb
 3950 0371 AC010000 		.4byte	.LASF55
 3951 0375 01       		.byte	0x1
 3952 0376 46       		.byte	0x46
 3953 0377 0A       		.byte	0xa
 3954 0378 80030000 		.4byte	0x380
 3955 037c 02       		.byte	0x2
 3956 037d 23       		.byte	0x23
 3957 037e 04       		.uleb128 0x4
 3958 037f 00       		.byte	0
 3959 0380 07       		.uleb128 0x7
 3960 0381 04       		.byte	0x4
 3961 0382 BC000000 		.4byte	0xbc
 3962 0386 02       		.uleb128 0x2
 3963 0387 BA060000 		.4byte	.LASF56
 3964 038b 01       		.byte	0x1
 3965 038c 47       		.byte	0x47
 3966 038d 03       		.byte	0x3
 3967 038e 54030000 		.4byte	0x354
 3968 0392 0A       		.uleb128 0xa
 3969 0393 22000000 		.4byte	.LASF57
 3970 0397 08       		.byte	0x8
 3971 0398 01       		.byte	0x1
 3972 0399 49       		.byte	0x49
 3973 039a 10       		.byte	0x10
 3974 039b BE030000 		.4byte	0x3be
 3975 039f 0B       		.uleb128 0xb
 3976 03a0 F1090000 		.4byte	.LASF58
 3977 03a4 01       		.byte	0x1
 3978 03a5 4B       		.byte	0x4b
 3979 03a6 0F       		.byte	0xf
 3980 03a7 2D020000 		.4byte	0x22d
 3981 03ab 02       		.byte	0x2
 3982 03ac 23       		.byte	0x23
 3983 03ad 00       		.uleb128 0
 3984 03ae 0B       		.uleb128 0xb
 3985 03af 56080000 		.4byte	.LASF59
 3986 03b3 01       		.byte	0x1
ARM GAS  /tmp/ccjtHtwZ.s 			page 140


 3987 03b4 4C       		.byte	0x4c
 3988 03b5 0E       		.byte	0xe
 3989 03b6 00010000 		.4byte	0x100
 3990 03ba 02       		.byte	0x2
 3991 03bb 23       		.byte	0x23
 3992 03bc 04       		.uleb128 0x4
 3993 03bd 00       		.byte	0
 3994 03be 02       		.uleb128 0x2
 3995 03bf 44000000 		.4byte	.LASF60
 3996 03c3 01       		.byte	0x1
 3997 03c4 4D       		.byte	0x4d
 3998 03c5 03       		.byte	0x3
 3999 03c6 92030000 		.4byte	0x392
 4000 03ca 0E       		.uleb128 0xe
 4001 03cb 08       		.byte	0x8
 4002 03cc 01       		.byte	0x1
 4003 03cd 66       		.byte	0x66
 4004 03ce 02       		.byte	0x2
 4005 03cf EC030000 		.4byte	0x3ec
 4006 03d3 0F       		.uleb128 0xf
 4007 03d4 21020000 		.4byte	.LASF61
 4008 03d8 01       		.byte	0x1
 4009 03d9 68       		.byte	0x68
 4010 03da 13       		.byte	0x13
 4011 03db 86030000 		.4byte	0x386
 4012 03df 0F       		.uleb128 0xf
 4013 03e0 B5020000 		.4byte	.LASF62
 4014 03e4 01       		.byte	0x1
 4015 03e5 69       		.byte	0x69
 4016 03e6 13       		.byte	0x13
 4017 03e7 BE030000 		.4byte	0x3be
 4018 03eb 00       		.byte	0
 4019 03ec 02       		.uleb128 0x2
 4020 03ed EA090000 		.4byte	.LASF63
 4021 03f1 01       		.byte	0x1
 4022 03f2 83       		.byte	0x83
 4023 03f3 03       		.byte	0x3
 4024 03f4 94020000 		.4byte	0x294
 4025 03f8 02       		.uleb128 0x2
 4026 03f9 8D010000 		.4byte	.LASF64
 4027 03fd 01       		.byte	0x1
 4028 03fe 87       		.byte	0x87
 4029 03ff 10       		.byte	0x10
 4030 0400 EC030000 		.4byte	0x3ec
 4031 0404 06       		.uleb128 0x6
 4032 0405 F8030000 		.4byte	0x3f8
 4033 0409 10       		.uleb128 0x10
 4034 040a 01       		.byte	0x1
 4035 040b DD020000 		.4byte	.LASF82
 4036 040f 01       		.byte	0x1
 4037 0410 AD0A     		.2byte	0xaad
 4038 0412 07       		.byte	0x7
 4039 0413 01       		.byte	0x1
 4040 0414 F8070000 		.4byte	.LFB36
 4041 0418 3C080000 		.4byte	.LFE36
 4042 041c 00000000 		.4byte	.LLST145
 4043 0420 01       		.byte	0x1
ARM GAS  /tmp/ccjtHtwZ.s 			page 141


 4044 0421 BE040000 		.4byte	0x4be
 4045 0425 11       		.uleb128 0x11
 4046 0426 21020000 		.4byte	.LASF61
 4047 042a 01       		.byte	0x1
 4048 042b AD0A     		.2byte	0xaad
 4049 042d 35       		.byte	0x35
 4050 042e 7D020000 		.4byte	0x27d
 4051 0432 34000000 		.4byte	.LLST146
 4052 0436 2C000000 		.4byte	.LVUS146
 4053 043a 11       		.uleb128 0x11
 4054 043b 39090000 		.4byte	.LASF65
 4055 043f 01       		.byte	0x1
 4056 0440 AD0A     		.2byte	0xaad
 4057 0442 48       		.byte	0x48
 4058 0443 16010000 		.4byte	0x116
 4059 0447 71000000 		.4byte	.LLST147
 4060 044b 6B000000 		.4byte	.LVUS147
 4061 044f 11       		.uleb128 0x11
 4062 0450 15010000 		.4byte	.LASF66
 4063 0454 01       		.byte	0x1
 4064 0455 AD0A     		.2byte	0xaad
 4065 0457 67       		.byte	0x67
 4066 0458 FB000000 		.4byte	0xfb
 4067 045c A3000000 		.4byte	.LLST148
 4068 0460 9D000000 		.4byte	.LVUS148
 4069 0464 12       		.uleb128 0x12
 4070 0465 0E080000 		.4byte	.LASF67
 4071 0469 01       		.byte	0x1
 4072 046a AF0A     		.2byte	0xaaf
 4073 046c 12       		.byte	0x12
 4074 046d C4040000 		.4byte	0x4c4
 4075 0471 D7000000 		.4byte	.LLST149
 4076 0475 CF000000 		.4byte	.LVUS149
 4077 0479 13       		.uleb128 0x13
 4078 047a 04080000 		.4byte	.LVL288
 4079 047e 331C0000 		.4byte	0x1c33
 4080 0482 13       		.uleb128 0x13
 4081 0483 24080000 		.4byte	.LVL289
 4082 0487 411C0000 		.4byte	0x1c41
 4083 048b 14       		.uleb128 0x14
 4084 048c 34080000 		.4byte	.LVL290
 4085 0490 4F1C0000 		.4byte	0x1c4f
 4086 0494 AB040000 		.4byte	0x4ab
 4087 0498 15       		.uleb128 0x15
 4088 0499 01       		.byte	0x1
 4089 049a 50       		.byte	0x50
 4090 049b 02       		.byte	0x2
 4091 049c 74       		.byte	0x74
 4092 049d 24       		.sleb128 36
 4093 049e 15       		.uleb128 0x15
 4094 049f 01       		.byte	0x1
 4095 04a0 51       		.byte	0x51
 4096 04a1 02       		.byte	0x2
 4097 04a2 75       		.byte	0x75
 4098 04a3 00       		.sleb128 0
 4099 04a4 15       		.uleb128 0x15
 4100 04a5 01       		.byte	0x1
ARM GAS  /tmp/ccjtHtwZ.s 			page 142


 4101 04a6 52       		.byte	0x52
 4102 04a7 02       		.byte	0x2
 4103 04a8 76       		.byte	0x76
 4104 04a9 00       		.sleb128 0
 4105 04aa 00       		.byte	0
 4106 04ab 16       		.uleb128 0x16
 4107 04ac 3C080000 		.4byte	.LVL292
 4108 04b0 01       		.byte	0x1
 4109 04b1 1C060000 		.4byte	0x61c
 4110 04b5 15       		.uleb128 0x15
 4111 04b6 01       		.byte	0x1
 4112 04b7 50       		.byte	0x50
 4113 04b8 03       		.byte	0x3
 4114 04b9 F3       		.byte	0xf3
 4115 04ba 01       		.uleb128 0x1
 4116 04bb 50       		.byte	0x50
 4117 04bc 00       		.byte	0
 4118 04bd 00       		.byte	0
 4119 04be 07       		.uleb128 0x7
 4120 04bf 04       		.byte	0x4
 4121 04c0 F8030000 		.4byte	0x3f8
 4122 04c4 06       		.uleb128 0x6
 4123 04c5 BE040000 		.4byte	0x4be
 4124 04c9 17       		.uleb128 0x17
 4125 04ca 01       		.byte	0x1
 4126 04cb CD070000 		.4byte	.LASF69
 4127 04cf 01       		.byte	0x1
 4128 04d0 2C09     		.2byte	0x92c
 4129 04d2 0C       		.byte	0xc
 4130 04d3 01       		.byte	0x1
 4131 04d4 EF000000 		.4byte	0xef
 4132 04d8 EC070000 		.4byte	.LFB35
 4133 04dc F8070000 		.4byte	.LFE35
 4134 04e0 02       		.byte	0x2
 4135 04e1 7D       		.byte	0x7d
 4136 04e2 00       		.sleb128 0
 4137 04e3 01       		.byte	0x1
 4138 04e4 28050000 		.4byte	0x528
 4139 04e8 11       		.uleb128 0x11
 4140 04e9 21020000 		.4byte	.LASF61
 4141 04ed 01       		.byte	0x1
 4142 04ee 2C09     		.2byte	0x92c
 4143 04f0 3A       		.byte	0x3a
 4144 04f1 89020000 		.4byte	0x289
 4145 04f5 12010000 		.4byte	.LLST142
 4146 04f9 0E010000 		.4byte	.LVUS142
 4147 04fd 12       		.uleb128 0x12
 4148 04fe 16080000 		.4byte	.LASF68
 4149 0502 01       		.byte	0x1
 4150 0503 2E09     		.2byte	0x92e
 4151 0505 0C       		.byte	0xc
 4152 0506 EF000000 		.4byte	0xef
 4153 050a 37010000 		.4byte	.LLST143
 4154 050e 33010000 		.4byte	.LVUS143
 4155 0512 12       		.uleb128 0x12
 4156 0513 0E080000 		.4byte	.LASF67
 4157 0517 01       		.byte	0x1
ARM GAS  /tmp/ccjtHtwZ.s 			page 143


 4158 0518 2F09     		.2byte	0x92f
 4159 051a 11       		.byte	0x11
 4160 051b C4040000 		.4byte	0x4c4
 4161 051f 6A010000 		.4byte	.LLST144
 4162 0523 66010000 		.4byte	.LVUS144
 4163 0527 00       		.byte	0
 4164 0528 18       		.uleb128 0x18
 4165 0529 10040000 		.4byte	.LASF78
 4166 052d 01       		.byte	0x1
 4167 052e 1709     		.2byte	0x917
 4168 0530 13       		.byte	0x13
 4169 0531 01       		.byte	0x1
 4170 0532 EF000000 		.4byte	0xef
 4171 0536 01       		.byte	0x1
 4172 0537 56050000 		.4byte	0x556
 4173 053b 19       		.uleb128 0x19
 4174 053c 0E080000 		.4byte	.LASF67
 4175 0540 01       		.byte	0x1
 4176 0541 1709     		.2byte	0x917
 4177 0543 32       		.byte	0x32
 4178 0544 56050000 		.4byte	0x556
 4179 0548 1A       		.uleb128 0x1a
 4180 0549 16080000 		.4byte	.LASF68
 4181 054d 01       		.byte	0x1
 4182 054e 1909     		.2byte	0x919
 4183 0550 0C       		.byte	0xc
 4184 0551 EF000000 		.4byte	0xef
 4185 0555 00       		.byte	0
 4186 0556 07       		.uleb128 0x7
 4187 0557 04       		.byte	0x4
 4188 0558 04040000 		.4byte	0x404
 4189 055c 06       		.uleb128 0x6
 4190 055d 56050000 		.4byte	0x556
 4191 0561 17       		.uleb128 0x17
 4192 0562 01       		.byte	0x1
 4193 0563 AA090000 		.4byte	.LASF70
 4194 0567 01       		.byte	0x1
 4195 0568 0409     		.2byte	0x904
 4196 056a 0C       		.byte	0xc
 4197 056b 01       		.byte	0x1
 4198 056c EF000000 		.4byte	0xef
 4199 0570 E2070000 		.4byte	.LFB33
 4200 0574 EC070000 		.4byte	.LFE33
 4201 0578 02       		.byte	0x2
 4202 0579 7D       		.byte	0x7d
 4203 057a 00       		.sleb128 0
 4204 057b 01       		.byte	0x1
 4205 057c C0050000 		.4byte	0x5c0
 4206 0580 11       		.uleb128 0x11
 4207 0581 21020000 		.4byte	.LASF61
 4208 0585 01       		.byte	0x1
 4209 0586 0409     		.2byte	0x904
 4210 0588 3B       		.byte	0x3b
 4211 0589 89020000 		.4byte	0x289
 4212 058d 8F010000 		.4byte	.LLST139
 4213 0591 8B010000 		.4byte	.LVUS139
 4214 0595 12       		.uleb128 0x12
ARM GAS  /tmp/ccjtHtwZ.s 			page 144


 4215 0596 16080000 		.4byte	.LASF68
 4216 059a 01       		.byte	0x1
 4217 059b 0609     		.2byte	0x906
 4218 059d 0C       		.byte	0xc
 4219 059e EF000000 		.4byte	0xef
 4220 05a2 B2010000 		.4byte	.LLST140
 4221 05a6 B0010000 		.4byte	.LVUS140
 4222 05aa 12       		.uleb128 0x12
 4223 05ab 0E080000 		.4byte	.LASF67
 4224 05af 01       		.byte	0x1
 4225 05b0 0709     		.2byte	0x907
 4226 05b2 11       		.byte	0x11
 4227 05b3 C4040000 		.4byte	0x4c4
 4228 05b7 D0010000 		.4byte	.LLST141
 4229 05bb CC010000 		.4byte	.LVUS141
 4230 05bf 00       		.byte	0
 4231 05c0 1B       		.uleb128 0x1b
 4232 05c1 5A020000 		.4byte	.LASF74
 4233 05c5 01       		.byte	0x1
 4234 05c6 EF08     		.2byte	0x8ef
 4235 05c8 13       		.byte	0x13
 4236 05c9 01       		.byte	0x1
 4237 05ca EF000000 		.4byte	0xef
 4238 05ce 00000000 		.4byte	.LFB32
 4239 05d2 16000000 		.4byte	.LFE32
 4240 05d6 F1010000 		.4byte	.LLST0
 4241 05da 01       		.byte	0x1
 4242 05db 1C060000 		.4byte	0x61c
 4243 05df 11       		.uleb128 0x11
 4244 05e0 0E080000 		.4byte	.LASF67
 4245 05e4 01       		.byte	0x1
 4246 05e5 EF08     		.2byte	0x8ef
 4247 05e7 33       		.byte	0x33
 4248 05e8 56050000 		.4byte	0x556
 4249 05ec 17020000 		.4byte	.LLST1
 4250 05f0 11020000 		.4byte	.LVUS1
 4251 05f4 12       		.uleb128 0x12
 4252 05f5 16080000 		.4byte	.LASF68
 4253 05f9 01       		.byte	0x1
 4254 05fa F108     		.2byte	0x8f1
 4255 05fc 0C       		.byte	0xc
 4256 05fd EF000000 		.4byte	0xef
 4257 0601 45020000 		.4byte	.LLST2
 4258 0605 43020000 		.4byte	.LVUS2
 4259 0609 13       		.uleb128 0x13
 4260 060a 08000000 		.4byte	.LVL1
 4261 060e 331C0000 		.4byte	0x1c33
 4262 0612 13       		.uleb128 0x13
 4263 0613 0E000000 		.4byte	.LVL3
 4264 0617 411C0000 		.4byte	0x1c41
 4265 061b 00       		.byte	0
 4266 061c 1C       		.uleb128 0x1c
 4267 061d 88090000 		.4byte	.LASF71
 4268 0621 01       		.byte	0x1
 4269 0622 7708     		.2byte	0x877
 4270 0624 0D       		.byte	0xd
 4271 0625 01       		.byte	0x1
ARM GAS  /tmp/ccjtHtwZ.s 			page 145


 4272 0626 A8000000 		.4byte	.LFB31
 4273 062a 18010000 		.4byte	.LFE31
 4274 062e 5F020000 		.4byte	.LLST12
 4275 0632 01       		.byte	0x1
 4276 0633 EA060000 		.4byte	0x6ea
 4277 0637 11       		.uleb128 0x11
 4278 0638 0E080000 		.4byte	.LASF67
 4279 063c 01       		.byte	0x1
 4280 063d 7708     		.2byte	0x877
 4281 063f 2D       		.byte	0x2d
 4282 0640 C4040000 		.4byte	0x4c4
 4283 0644 9F020000 		.4byte	.LLST13
 4284 0648 97020000 		.4byte	.LVUS13
 4285 064c 1D       		.uleb128 0x1d
 4286 064d 00000000 		.4byte	.Ldebug_ranges0+0
 4287 0651 88060000 		.4byte	0x688
 4288 0655 12       		.uleb128 0x12
 4289 0656 52010000 		.4byte	.LASF50
 4290 065a 01       		.byte	0x1
 4291 065b 8108     		.2byte	0x881
 4292 065d 0A       		.byte	0xa
 4293 065e BC000000 		.4byte	0xbc
 4294 0662 DC020000 		.4byte	.LLST14
 4295 0666 D6020000 		.4byte	.LVUS14
 4296 066a 14       		.uleb128 0x14
 4297 066b F4000000 		.4byte	.LVL35
 4298 066f 5E1C0000 		.4byte	0x1c5e
 4299 0673 7E060000 		.4byte	0x67e
 4300 0677 15       		.uleb128 0x15
 4301 0678 01       		.byte	0x1
 4302 0679 50       		.byte	0x50
 4303 067a 02       		.byte	0x2
 4304 067b 76       		.byte	0x76
 4305 067c 00       		.sleb128 0
 4306 067d 00       		.byte	0
 4307 067e 13       		.uleb128 0x13
 4308 067f FA000000 		.4byte	.LVL36
 4309 0683 6D1C0000 		.4byte	0x1c6d
 4310 0687 00       		.byte	0
 4311 0688 1D       		.uleb128 0x1d
 4312 0689 18000000 		.4byte	.Ldebug_ranges0+0x18
 4313 068d C4060000 		.4byte	0x6c4
 4314 0691 12       		.uleb128 0x12
 4315 0692 080A0000 		.4byte	.LASF49
 4316 0696 01       		.byte	0x1
 4317 0697 D208     		.2byte	0x8d2
 4318 0699 0A       		.byte	0xa
 4319 069a BC000000 		.4byte	0xbc
 4320 069e 0B030000 		.4byte	.LLST15
 4321 06a2 05030000 		.4byte	.LVUS15
 4322 06a6 14       		.uleb128 0x14
 4323 06a7 0C010000 		.4byte	.LVL40
 4324 06ab 5E1C0000 		.4byte	0x1c5e
 4325 06af BA060000 		.4byte	0x6ba
 4326 06b3 15       		.uleb128 0x15
 4327 06b4 01       		.byte	0x1
 4328 06b5 50       		.byte	0x50
ARM GAS  /tmp/ccjtHtwZ.s 			page 146


 4329 06b6 02       		.byte	0x2
 4330 06b7 76       		.byte	0x76
 4331 06b8 00       		.sleb128 0
 4332 06b9 00       		.byte	0
 4333 06ba 13       		.uleb128 0x13
 4334 06bb 12010000 		.4byte	.LVL41
 4335 06bf 6D1C0000 		.4byte	0x1c6d
 4336 06c3 00       		.byte	0
 4337 06c4 13       		.uleb128 0x13
 4338 06c5 B0000000 		.4byte	.LVL27
 4339 06c9 331C0000 		.4byte	0x1c33
 4340 06cd 13       		.uleb128 0x13
 4341 06ce C8000000 		.4byte	.LVL29
 4342 06d2 411C0000 		.4byte	0x1c41
 4343 06d6 13       		.uleb128 0x13
 4344 06d7 CC000000 		.4byte	.LVL30
 4345 06db 331C0000 		.4byte	0x1c33
 4346 06df 1E       		.uleb128 0x1e
 4347 06e0 E8000000 		.4byte	.LVL34
 4348 06e4 01       		.byte	0x1
 4349 06e5 411C0000 		.4byte	0x1c41
 4350 06e9 00       		.byte	0
 4351 06ea 1C       		.uleb128 0x1c
 4352 06eb 00090000 		.4byte	.LASF72
 4353 06ef 01       		.byte	0x1
 4354 06f0 6508     		.2byte	0x865
 4355 06f2 0D       		.byte	0xd
 4356 06f3 01       		.byte	0x1
 4357 06f4 80000000 		.4byte	.LFB30
 4358 06f8 A8000000 		.4byte	.LFE30
 4359 06fc 34030000 		.4byte	.LLST9
 4360 0700 01       		.byte	0x1
 4361 0701 42070000 		.4byte	0x742
 4362 0705 11       		.uleb128 0x11
 4363 0706 0E080000 		.4byte	.LASF67
 4364 070a 01       		.byte	0x1
 4365 070b 6508     		.2byte	0x865
 4366 070d 33       		.byte	0x33
 4367 070e C4040000 		.4byte	0x4c4
 4368 0712 80030000 		.4byte	.LLST10
 4369 0716 78030000 		.4byte	.LVUS10
 4370 071a 11       		.uleb128 0x11
 4371 071b 6A020000 		.4byte	.LASF73
 4372 071f 01       		.byte	0x1
 4373 0720 6508     		.2byte	0x865
 4374 0722 49       		.byte	0x49
 4375 0723 A4000000 		.4byte	0xa4
 4376 0727 BF030000 		.4byte	.LLST11
 4377 072b B7030000 		.4byte	.LVUS11
 4378 072f 16       		.uleb128 0x16
 4379 0730 A4000000 		.4byte	.LVL25
 4380 0734 01       		.byte	0x1
 4381 0735 7C1C0000 		.4byte	0x1c7c
 4382 0739 15       		.uleb128 0x15
 4383 073a 01       		.byte	0x1
 4384 073b 50       		.byte	0x50
 4385 073c 03       		.byte	0x3
ARM GAS  /tmp/ccjtHtwZ.s 			page 147


 4386 073d F3       		.byte	0xf3
 4387 073e 01       		.uleb128 0x1
 4388 073f 51       		.byte	0x51
 4389 0740 00       		.byte	0
 4390 0741 00       		.byte	0
 4391 0742 1B       		.uleb128 0x1b
 4392 0743 67030000 		.4byte	.LASF75
 4393 0747 01       		.byte	0x1
 4394 0748 1608     		.2byte	0x816
 4395 074a 13       		.byte	0x13
 4396 074b 01       		.byte	0x1
 4397 074c EF000000 		.4byte	0xef
 4398 0750 16000000 		.4byte	.LFB29
 4399 0754 80000000 		.4byte	.LFE29
 4400 0758 F6030000 		.4byte	.LLST3
 4401 075c 01       		.byte	0x1
 4402 075d E6070000 		.4byte	0x7e6
 4403 0761 11       		.uleb128 0x11
 4404 0762 0E080000 		.4byte	.LASF67
 4405 0766 01       		.byte	0x1
 4406 0767 1608     		.2byte	0x816
 4407 0769 37       		.byte	0x37
 4408 076a C4040000 		.4byte	0x4c4
 4409 076e 22040000 		.4byte	.LLST4
 4410 0772 16040000 		.4byte	.LVUS4
 4411 0776 11       		.uleb128 0x11
 4412 0777 A0070000 		.4byte	.LASF76
 4413 077b 01       		.byte	0x1
 4414 077c 1608     		.2byte	0x816
 4415 077e 4C       		.byte	0x4c
 4416 077f B0000000 		.4byte	0xb0
 4417 0783 78040000 		.4byte	.LLST5
 4418 0787 6C040000 		.4byte	.LVUS5
 4419 078b 11       		.uleb128 0x11
 4420 078c FE090000 		.4byte	.LASF77
 4421 0790 01       		.byte	0x1
 4422 0791 1608     		.2byte	0x816
 4423 0793 6C       		.byte	0x6c
 4424 0794 FB000000 		.4byte	0xfb
 4425 0798 D9040000 		.4byte	.LLST6
 4426 079c CB040000 		.4byte	.LVUS6
 4427 07a0 12       		.uleb128 0x12
 4428 07a1 16080000 		.4byte	.LASF68
 4429 07a5 01       		.byte	0x1
 4430 07a6 1808     		.2byte	0x818
 4431 07a8 0C       		.byte	0xc
 4432 07a9 EF000000 		.4byte	0xef
 4433 07ad 3F050000 		.4byte	.LLST7
 4434 07b1 37050000 		.4byte	.LVUS7
 4435 07b5 12       		.uleb128 0x12
 4436 07b6 A3020000 		.4byte	.LASF46
 4437 07ba 01       		.byte	0x1
 4438 07bb 1908     		.2byte	0x819
 4439 07bd 0D       		.byte	0xd
 4440 07be 00010000 		.4byte	0x100
 4441 07c2 7B050000 		.4byte	.LLST8
 4442 07c6 75050000 		.4byte	.LVUS8
ARM GAS  /tmp/ccjtHtwZ.s 			page 148


 4443 07ca 13       		.uleb128 0x13
 4444 07cb 2C000000 		.4byte	.LVL8
 4445 07cf 891C0000 		.4byte	0x1c89
 4446 07d3 13       		.uleb128 0x13
 4447 07d4 40000000 		.4byte	.LVL14
 4448 07d8 7C1C0000 		.4byte	0x1c7c
 4449 07dc 13       		.uleb128 0x13
 4450 07dd 5A000000 		.4byte	.LVL17
 4451 07e1 7C1C0000 		.4byte	0x1c7c
 4452 07e5 00       		.byte	0
 4453 07e6 18       		.uleb128 0x18
 4454 07e7 73020000 		.4byte	.LASF79
 4455 07eb 01       		.byte	0x1
 4456 07ec FD07     		.2byte	0x7fd
 4457 07ee 15       		.byte	0x15
 4458 07ef 01       		.byte	0x1
 4459 07f0 00010000 		.4byte	0x100
 4460 07f4 01       		.byte	0x1
 4461 07f5 14080000 		.4byte	0x814
 4462 07f9 19       		.uleb128 0x19
 4463 07fa 0E080000 		.4byte	.LASF67
 4464 07fe 01       		.byte	0x1
 4465 07ff FD07     		.2byte	0x7fd
 4466 0801 51       		.byte	0x51
 4467 0802 5C050000 		.4byte	0x55c
 4468 0806 1A       		.uleb128 0x1a
 4469 0807 DA050000 		.4byte	.LASF80
 4470 080b 01       		.byte	0x1
 4471 080c FF07     		.2byte	0x7ff
 4472 080e 0E       		.byte	0xe
 4473 080f 00010000 		.4byte	0x100
 4474 0813 00       		.byte	0
 4475 0814 17       		.uleb128 0x17
 4476 0815 01       		.byte	0x1
 4477 0816 50050000 		.4byte	.LASF81
 4478 081a 01       		.byte	0x1
 4479 081b F307     		.2byte	0x7f3
 4480 081d 0A       		.byte	0xa
 4481 081e 01       		.byte	0x1
 4482 081f D2000000 		.4byte	0xd2
 4483 0823 DC070000 		.4byte	.LFB27
 4484 0827 E2070000 		.4byte	.LFE27
 4485 082b 02       		.byte	0x2
 4486 082c 7D       		.byte	0x7d
 4487 082d 00       		.sleb128 0
 4488 082e 01       		.byte	0x1
 4489 082f 49080000 		.4byte	0x849
 4490 0833 11       		.uleb128 0x11
 4491 0834 21020000 		.4byte	.LASF61
 4492 0838 01       		.byte	0x1
 4493 0839 F307     		.2byte	0x7f3
 4494 083b 2D       		.byte	0x2d
 4495 083c 7D020000 		.4byte	0x27d
 4496 0840 AA050000 		.4byte	.LLST138
 4497 0844 A6050000 		.4byte	.LVUS138
 4498 0848 00       		.byte	0
 4499 0849 1F       		.uleb128 0x1f
ARM GAS  /tmp/ccjtHtwZ.s 			page 149


 4500 084a 01       		.byte	0x1
 4501 084b 00010000 		.4byte	.LASF83
 4502 084f 01       		.byte	0x1
 4503 0850 E907     		.2byte	0x7e9
 4504 0852 07       		.byte	0x7
 4505 0853 01       		.byte	0x1
 4506 0854 D8070000 		.4byte	.LFB26
 4507 0858 DC070000 		.4byte	.LFE26
 4508 085c 02       		.byte	0x2
 4509 085d 7D       		.byte	0x7d
 4510 085e 00       		.sleb128 0
 4511 085f 01       		.byte	0x1
 4512 0860 83080000 		.4byte	0x883
 4513 0864 20       		.uleb128 0x20
 4514 0865 21020000 		.4byte	.LASF61
 4515 0869 01       		.byte	0x1
 4516 086a E907     		.2byte	0x7e9
 4517 086c 2B       		.byte	0x2b
 4518 086d 7D020000 		.4byte	0x27d
 4519 0871 01       		.byte	0x1
 4520 0872 50       		.byte	0x50
 4521 0873 20       		.uleb128 0x20
 4522 0874 53070000 		.4byte	.LASF51
 4523 0878 01       		.byte	0x1
 4524 0879 E907     		.2byte	0x7e9
 4525 087b 3F       		.byte	0x3f
 4526 087c 00010000 		.4byte	0x100
 4527 0880 01       		.byte	0x1
 4528 0881 51       		.byte	0x51
 4529 0882 00       		.byte	0
 4530 0883 17       		.uleb128 0x17
 4531 0884 01       		.byte	0x1
 4532 0885 3C060000 		.4byte	.LASF84
 4533 0889 01       		.byte	0x1
 4534 088a DF07     		.2byte	0x7df
 4535 088c 0E       		.byte	0xe
 4536 088d 01       		.byte	0x1
 4537 088e 00010000 		.4byte	0x100
 4538 0892 D4070000 		.4byte	.LFB25
 4539 0896 D8070000 		.4byte	.LFE25
 4540 089a 02       		.byte	0x2
 4541 089b 7D       		.byte	0x7d
 4542 089c 00       		.sleb128 0
 4543 089d 01       		.byte	0x1
 4544 089e B8080000 		.4byte	0x8b8
 4545 08a2 11       		.uleb128 0x11
 4546 08a3 21020000 		.4byte	.LASF61
 4547 08a7 01       		.byte	0x1
 4548 08a8 DF07     		.2byte	0x7df
 4549 08aa 33       		.byte	0x33
 4550 08ab 7D020000 		.4byte	0x27d
 4551 08af CF050000 		.4byte	.LLST137
 4552 08b3 CB050000 		.4byte	.LVUS137
 4553 08b7 00       		.byte	0
 4554 08b8 1F       		.uleb128 0x1f
 4555 08b9 01       		.byte	0x1
 4556 08ba CF000000 		.4byte	.LASF85
ARM GAS  /tmp/ccjtHtwZ.s 			page 150


 4557 08be 01       		.byte	0x1
 4558 08bf B307     		.2byte	0x7b3
 4559 08c1 06       		.byte	0x6
 4560 08c2 01       		.byte	0x1
 4561 08c3 D0070000 		.4byte	.LFB24
 4562 08c7 D4070000 		.4byte	.LFE24
 4563 08cb 02       		.byte	0x2
 4564 08cc 7D       		.byte	0x7d
 4565 08cd 00       		.sleb128 0
 4566 08ce 01       		.byte	0x1
 4567 08cf 10090000 		.4byte	0x910
 4568 08d3 11       		.uleb128 0x11
 4569 08d4 21020000 		.4byte	.LASF61
 4570 08d8 01       		.byte	0x1
 4571 08d9 B307     		.2byte	0x7b3
 4572 08db 22       		.byte	0x22
 4573 08dc 7D020000 		.4byte	0x27d
 4574 08e0 F4050000 		.4byte	.LLST135
 4575 08e4 F0050000 		.4byte	.LVUS135
 4576 08e8 12       		.uleb128 0x12
 4577 08e9 0E080000 		.4byte	.LASF67
 4578 08ed 01       		.byte	0x1
 4579 08ee B507     		.2byte	0x7b5
 4580 08f0 11       		.byte	0x11
 4581 08f1 C4040000 		.4byte	0x4c4
 4582 08f5 19060000 		.4byte	.LLST136
 4583 08f9 15060000 		.4byte	.LVUS136
 4584 08fd 16       		.uleb128 0x16
 4585 08fe D4070000 		.4byte	.LVL273
 4586 0902 01       		.byte	0x1
 4587 0903 981C0000 		.4byte	0x1c98
 4588 0907 15       		.uleb128 0x15
 4589 0908 01       		.byte	0x1
 4590 0909 50       		.byte	0x50
 4591 090a 03       		.byte	0x3
 4592 090b F3       		.byte	0xf3
 4593 090c 01       		.uleb128 0x1
 4594 090d 50       		.byte	0x50
 4595 090e 00       		.byte	0
 4596 090f 00       		.byte	0
 4597 0910 17       		.uleb128 0x17
 4598 0911 01       		.byte	0x1
 4599 0912 6F040000 		.4byte	.LASF86
 4600 0916 01       		.byte	0x1
 4601 0917 A707     		.2byte	0x7a7
 4602 0919 0D       		.byte	0xd
 4603 091a 01       		.byte	0x1
 4604 091b 00010000 		.4byte	0x100
 4605 091f CC070000 		.4byte	.LFB23
 4606 0923 D0070000 		.4byte	.LFE23
 4607 0927 02       		.byte	0x2
 4608 0928 7D       		.byte	0x7d
 4609 0929 00       		.sleb128 0
 4610 092a 01       		.byte	0x1
 4611 092b 6F090000 		.4byte	0x96f
 4612 092f 11       		.uleb128 0x11
 4613 0930 21020000 		.4byte	.LASF61
ARM GAS  /tmp/ccjtHtwZ.s 			page 151


 4614 0934 01       		.byte	0x1
 4615 0935 A707     		.2byte	0x7a7
 4616 0937 40       		.byte	0x40
 4617 0938 89020000 		.4byte	0x289
 4618 093c 3E060000 		.4byte	.LLST132
 4619 0940 3A060000 		.4byte	.LVUS132
 4620 0944 12       		.uleb128 0x12
 4621 0945 A3010000 		.4byte	.LASF87
 4622 0949 01       		.byte	0x1
 4623 094a A907     		.2byte	0x7a9
 4624 094c 0D       		.byte	0xd
 4625 094d 00010000 		.4byte	0x100
 4626 0951 61060000 		.4byte	.LLST133
 4627 0955 5F060000 		.4byte	.LVUS133
 4628 0959 12       		.uleb128 0x12
 4629 095a 0E080000 		.4byte	.LASF67
 4630 095e 01       		.byte	0x1
 4631 095f AA07     		.2byte	0x7aa
 4632 0961 11       		.byte	0x11
 4633 0962 C4040000 		.4byte	0x4c4
 4634 0966 78060000 		.4byte	.LLST134
 4635 096a 74060000 		.4byte	.LVUS134
 4636 096e 00       		.byte	0
 4637 096f 21       		.uleb128 0x21
 4638 0970 01       		.byte	0x1
 4639 0971 3B010000 		.4byte	.LASF88
 4640 0975 01       		.byte	0x1
 4641 0976 9607     		.2byte	0x796
 4642 0978 0D       		.byte	0xd
 4643 0979 01       		.byte	0x1
 4644 097a 00010000 		.4byte	0x100
 4645 097e B6070000 		.4byte	.LFB22
 4646 0982 CC070000 		.4byte	.LFE22
 4647 0986 99060000 		.4byte	.LLST128
 4648 098a 01       		.byte	0x1
 4649 098b E1090000 		.4byte	0x9e1
 4650 098f 11       		.uleb128 0x11
 4651 0990 21020000 		.4byte	.LASF61
 4652 0994 01       		.byte	0x1
 4653 0995 9607     		.2byte	0x796
 4654 0997 39       		.byte	0x39
 4655 0998 89020000 		.4byte	0x289
 4656 099c BF060000 		.4byte	.LLST129
 4657 09a0 B9060000 		.4byte	.LVUS129
 4658 09a4 12       		.uleb128 0x12
 4659 09a5 A3010000 		.4byte	.LASF87
 4660 09a9 01       		.byte	0x1
 4661 09aa 9807     		.2byte	0x798
 4662 09ac 0D       		.byte	0xd
 4663 09ad 00010000 		.4byte	0x100
 4664 09b1 ED060000 		.4byte	.LLST130
 4665 09b5 EB060000 		.4byte	.LVUS130
 4666 09b9 12       		.uleb128 0x12
 4667 09ba 0E080000 		.4byte	.LASF67
 4668 09be 01       		.byte	0x1
 4669 09bf 9907     		.2byte	0x799
 4670 09c1 11       		.byte	0x11
ARM GAS  /tmp/ccjtHtwZ.s 			page 152


 4671 09c2 C4040000 		.4byte	0x4c4
 4672 09c6 06070000 		.4byte	.LLST131
 4673 09ca 00070000 		.4byte	.LVUS131
 4674 09ce 13       		.uleb128 0x13
 4675 09cf BE070000 		.4byte	.LVL266
 4676 09d3 331C0000 		.4byte	0x1c33
 4677 09d7 13       		.uleb128 0x13
 4678 09d8 C8070000 		.4byte	.LVL269
 4679 09dc 411C0000 		.4byte	0x1c41
 4680 09e0 00       		.byte	0
 4681 09e1 21       		.uleb128 0x21
 4682 09e2 01       		.byte	0x1
 4683 09e3 E6070000 		.4byte	.LASF89
 4684 09e7 01       		.byte	0x1
 4685 09e8 8607     		.2byte	0x786
 4686 09ea 0D       		.byte	0xd
 4687 09eb 01       		.byte	0x1
 4688 09ec 00010000 		.4byte	0x100
 4689 09f0 A4070000 		.4byte	.LFB21
 4690 09f4 B6070000 		.4byte	.LFE21
 4691 09f8 32070000 		.4byte	.LLST125
 4692 09fc 01       		.byte	0x1
 4693 09fd 3E0A0000 		.4byte	0xa3e
 4694 0a01 11       		.uleb128 0x11
 4695 0a02 21020000 		.4byte	.LASF61
 4696 0a06 01       		.byte	0x1
 4697 0a07 8607     		.2byte	0x786
 4698 0a09 39       		.byte	0x39
 4699 0a0a 89020000 		.4byte	0x289
 4700 0a0e 58070000 		.4byte	.LLST126
 4701 0a12 52070000 		.4byte	.LVUS126
 4702 0a16 12       		.uleb128 0x12
 4703 0a17 A3010000 		.4byte	.LASF87
 4704 0a1b 01       		.byte	0x1
 4705 0a1c 8807     		.2byte	0x788
 4706 0a1e 0D       		.byte	0xd
 4707 0a1f 00010000 		.4byte	0x100
 4708 0a23 86070000 		.4byte	.LLST127
 4709 0a27 84070000 		.4byte	.LVUS127
 4710 0a2b 13       		.uleb128 0x13
 4711 0a2c AC070000 		.4byte	.LVL261
 4712 0a30 331C0000 		.4byte	0x1c33
 4713 0a34 13       		.uleb128 0x13
 4714 0a35 B2070000 		.4byte	.LVL263
 4715 0a39 411C0000 		.4byte	0x1c41
 4716 0a3d 00       		.byte	0
 4717 0a3e 21       		.uleb128 0x21
 4718 0a3f 01       		.byte	0x1
 4719 0a40 6B080000 		.4byte	.LASF90
 4720 0a44 01       		.byte	0x1
 4721 0a45 5007     		.2byte	0x750
 4722 0a47 0C       		.byte	0xc
 4723 0a48 01       		.byte	0x1
 4724 0a49 EF000000 		.4byte	0xef
 4725 0a4d 74070000 		.4byte	.LFB20
 4726 0a51 A4070000 		.4byte	.LFE20
 4727 0a55 99070000 		.4byte	.LLST116
ARM GAS  /tmp/ccjtHtwZ.s 			page 153


 4728 0a59 01       		.byte	0x1
 4729 0a5a 4B0B0000 		.4byte	0xb4b
 4730 0a5e 11       		.uleb128 0x11
 4731 0a5f 21020000 		.4byte	.LASF61
 4732 0a63 01       		.byte	0x1
 4733 0a64 5007     		.2byte	0x750
 4734 0a66 2D       		.byte	0x2d
 4735 0a67 7D020000 		.4byte	0x27d
 4736 0a6b C1070000 		.4byte	.LLST117
 4737 0a6f B9070000 		.4byte	.LVUS117
 4738 0a73 11       		.uleb128 0x11
 4739 0a74 6A020000 		.4byte	.LASF73
 4740 0a78 01       		.byte	0x1
 4741 0a79 5007     		.2byte	0x750
 4742 0a7b 43       		.byte	0x43
 4743 0a7c A4000000 		.4byte	0xa4
 4744 0a80 FB070000 		.4byte	.LLST118
 4745 0a84 F5070000 		.4byte	.LVUS118
 4746 0a88 12       		.uleb128 0x12
 4747 0a89 16080000 		.4byte	.LASF68
 4748 0a8d 01       		.byte	0x1
 4749 0a8e 5207     		.2byte	0x752
 4750 0a90 0C       		.byte	0xc
 4751 0a91 EF000000 		.4byte	0xef
 4752 0a95 29080000 		.4byte	.LLST119
 4753 0a99 27080000 		.4byte	.LVUS119
 4754 0a9d 12       		.uleb128 0x12
 4755 0a9e B7010000 		.4byte	.LASF91
 4756 0aa2 01       		.byte	0x1
 4757 0aa3 5307     		.2byte	0x753
 4758 0aa5 0D       		.byte	0xd
 4759 0aa6 00010000 		.4byte	0x100
 4760 0aaa 3E080000 		.4byte	.LLST120
 4761 0aae 3C080000 		.4byte	.LVUS120
 4762 0ab2 12       		.uleb128 0x12
 4763 0ab3 A7050000 		.4byte	.LASF92
 4764 0ab7 01       		.byte	0x1
 4765 0ab8 5407     		.2byte	0x754
 4766 0aba 09       		.byte	0x9
 4767 0abb 80030000 		.4byte	0x380
 4768 0abf 53080000 		.4byte	.LLST121
 4769 0ac3 51080000 		.4byte	.LVUS121
 4770 0ac7 12       		.uleb128 0x12
 4771 0ac8 0E080000 		.4byte	.LASF67
 4772 0acc 01       		.byte	0x1
 4773 0acd 5507     		.2byte	0x755
 4774 0acf 11       		.byte	0x11
 4775 0ad0 C4040000 		.4byte	0x4c4
 4776 0ad4 6E080000 		.4byte	.LLST122
 4777 0ad8 66080000 		.4byte	.LVUS122
 4778 0adc 22       		.uleb128 0x22
 4779 0add 081C0000 		.4byte	0x1c08
 4780 0ae1 74070000 		.4byte	.LBI89
 4781 0ae5 0A       		.byte	.LVU885
 4782 0ae6 88010000 		.4byte	.Ldebug_ranges0+0x188
 4783 0aea 01       		.byte	0x1
 4784 0aeb 6B07     		.2byte	0x76b
ARM GAS  /tmp/ccjtHtwZ.s 			page 154


 4785 0aed 1B       		.byte	0x1b
 4786 0aee 0B0B0000 		.4byte	0xb0b
 4787 0af2 23       		.uleb128 0x23
 4788 0af3 88010000 		.4byte	.Ldebug_ranges0+0x188
 4789 0af7 24       		.uleb128 0x24
 4790 0af8 1A1C0000 		.4byte	0x1c1a
 4791 0afc A4080000 		.4byte	.LLST123
 4792 0b00 A2080000 		.4byte	.LVUS123
 4793 0b04 25       		.uleb128 0x25
 4794 0b05 261C0000 		.4byte	0x1c26
 4795 0b09 00       		.byte	0
 4796 0b0a 00       		.byte	0
 4797 0b0b 26       		.uleb128 0x26
 4798 0b0c ED1B0000 		.4byte	0x1bed
 4799 0b10 9A070000 		.4byte	.LBI93
 4800 0b14 03       		.byte	.LVU906
 4801 0b15 9A070000 		.4byte	.LBB93
 4802 0b19 9E070000 		.4byte	.LBE93
 4803 0b1d 01       		.byte	0x1
 4804 0b1e 8007     		.2byte	0x780
 4805 0b20 02       		.byte	0x2
 4806 0b21 330B0000 		.4byte	0xb33
 4807 0b25 27       		.uleb128 0x27
 4808 0b26 FB1B0000 		.4byte	0x1bfb
 4809 0b2a B9080000 		.4byte	.LLST124
 4810 0b2e B7080000 		.4byte	.LVUS124
 4811 0b32 00       		.byte	0
 4812 0b33 28       		.uleb128 0x28
 4813 0b34 96070000 		.4byte	.LVL255
 4814 0b38 EA060000 		.4byte	0x6ea
 4815 0b3c 15       		.uleb128 0x15
 4816 0b3d 01       		.byte	0x1
 4817 0b3e 50       		.byte	0x50
 4818 0b3f 02       		.byte	0x2
 4819 0b40 74       		.byte	0x74
 4820 0b41 00       		.sleb128 0
 4821 0b42 15       		.uleb128 0x15
 4822 0b43 01       		.byte	0x1
 4823 0b44 51       		.byte	0x51
 4824 0b45 03       		.byte	0x3
 4825 0b46 F3       		.byte	0xf3
 4826 0b47 01       		.uleb128 0x1
 4827 0b48 51       		.byte	0x51
 4828 0b49 00       		.byte	0
 4829 0b4a 00       		.byte	0
 4830 0b4b 21       		.uleb128 0x21
 4831 0b4c 01       		.byte	0x1
 4832 0b4d 62000000 		.4byte	.LASF93
 4833 0b51 01       		.byte	0x1
 4834 0b52 F506     		.2byte	0x6f5
 4835 0b54 0C       		.byte	0xc
 4836 0b55 01       		.byte	0x1
 4837 0b56 EF000000 		.4byte	0xef
 4838 0b5a 0C070000 		.4byte	.LFB19
 4839 0b5e 74070000 		.4byte	.LFE19
 4840 0b62 CC080000 		.4byte	.LLST105
 4841 0b66 01       		.byte	0x1
ARM GAS  /tmp/ccjtHtwZ.s 			page 155


 4842 0b67 A20C0000 		.4byte	0xca2
 4843 0b6b 11       		.uleb128 0x11
 4844 0b6c 21020000 		.4byte	.LASF61
 4845 0b70 01       		.byte	0x1
 4846 0b71 F506     		.2byte	0x6f5
 4847 0b73 30       		.byte	0x30
 4848 0b74 7D020000 		.4byte	0x27d
 4849 0b78 F4080000 		.4byte	.LLST106
 4850 0b7c EC080000 		.4byte	.LVUS106
 4851 0b80 11       		.uleb128 0x11
 4852 0b81 6A020000 		.4byte	.LASF73
 4853 0b85 01       		.byte	0x1
 4854 0b86 F506     		.2byte	0x6f5
 4855 0b88 45       		.byte	0x45
 4856 0b89 A4000000 		.4byte	0xa4
 4857 0b8d 2E090000 		.4byte	.LLST107
 4858 0b91 28090000 		.4byte	.LVUS107
 4859 0b95 11       		.uleb128 0x11
 4860 0b96 8E000000 		.4byte	.LASF94
 4861 0b9a 01       		.byte	0x1
 4862 0b9b F506     		.2byte	0x6f5
 4863 0b9d 62       		.byte	0x62
 4864 0b9e A80C0000 		.4byte	0xca8
 4865 0ba2 60090000 		.4byte	.LLST108
 4866 0ba6 5A090000 		.4byte	.LVUS108
 4867 0baa 12       		.uleb128 0x12
 4868 0bab 16080000 		.4byte	.LASF68
 4869 0baf 01       		.byte	0x1
 4870 0bb0 F706     		.2byte	0x6f7
 4871 0bb2 0C       		.byte	0xc
 4872 0bb3 EF000000 		.4byte	0xef
 4873 0bb7 8B090000 		.4byte	.LLST109
 4874 0bbb 89090000 		.4byte	.LVUS109
 4875 0bbf 12       		.uleb128 0x12
 4876 0bc0 B7010000 		.4byte	.LASF91
 4877 0bc4 01       		.byte	0x1
 4878 0bc5 F806     		.2byte	0x6f8
 4879 0bc7 0D       		.byte	0xd
 4880 0bc8 00010000 		.4byte	0x100
 4881 0bcc A0090000 		.4byte	.LLST110
 4882 0bd0 9E090000 		.4byte	.LVUS110
 4883 0bd4 12       		.uleb128 0x12
 4884 0bd5 0E080000 		.4byte	.LASF67
 4885 0bd9 01       		.byte	0x1
 4886 0bda F906     		.2byte	0x6f9
 4887 0bdc 11       		.byte	0x11
 4888 0bdd C4040000 		.4byte	0x4c4
 4889 0be1 BB090000 		.4byte	.LLST111
 4890 0be5 B3090000 		.4byte	.LVUS111
 4891 0be9 1D       		.uleb128 0x1d
 4892 0bea 58010000 		.4byte	.Ldebug_ranges0+0x158
 4893 0bee 4E0C0000 		.4byte	0xc4e
 4894 0bf2 12       		.uleb128 0x12
 4895 0bf3 A3020000 		.4byte	.LASF46
 4896 0bf7 01       		.byte	0x1
 4897 0bf8 1007     		.2byte	0x710
 4898 0bfa 15       		.byte	0x15
ARM GAS  /tmp/ccjtHtwZ.s 			page 156


 4899 0bfb 11010000 		.4byte	0x111
 4900 0bff F7090000 		.4byte	.LLST113
 4901 0c03 EF090000 		.4byte	.LVUS113
 4902 0c07 23       		.uleb128 0x23
 4903 0c08 70010000 		.4byte	.Ldebug_ranges0+0x170
 4904 0c0c 12       		.uleb128 0x12
 4905 0c0d 080A0000 		.4byte	.LASF49
 4906 0c11 01       		.byte	0x1
 4907 0c12 1507     		.2byte	0x715
 4908 0c14 11       		.byte	0x11
 4909 0c15 CD000000 		.4byte	0xcd
 4910 0c19 390A0000 		.4byte	.LLST114
 4911 0c1d 2F0A0000 		.4byte	.LVUS114
 4912 0c21 14       		.uleb128 0x14
 4913 0c22 38070000 		.4byte	.LVL241
 4914 0c26 EA060000 		.4byte	0x6ea
 4915 0c2a 3C0C0000 		.4byte	0xc3c
 4916 0c2e 15       		.uleb128 0x15
 4917 0c2f 01       		.byte	0x1
 4918 0c30 50       		.byte	0x50
 4919 0c31 02       		.byte	0x2
 4920 0c32 75       		.byte	0x75
 4921 0c33 00       		.sleb128 0
 4922 0c34 15       		.uleb128 0x15
 4923 0c35 01       		.byte	0x1
 4924 0c36 51       		.byte	0x51
 4925 0c37 03       		.byte	0x3
 4926 0c38 F3       		.byte	0xf3
 4927 0c39 01       		.uleb128 0x1
 4928 0c3a 51       		.byte	0x51
 4929 0c3b 00       		.byte	0
 4930 0c3c 28       		.uleb128 0x28
 4931 0c3d 4E070000 		.4byte	.LVL244
 4932 0c41 5E1C0000 		.4byte	0x1c5e
 4933 0c45 15       		.uleb128 0x15
 4934 0c46 01       		.byte	0x1
 4935 0c47 50       		.byte	0x50
 4936 0c48 02       		.byte	0x2
 4937 0c49 75       		.byte	0x75
 4938 0c4a 10       		.sleb128 16
 4939 0c4b 00       		.byte	0
 4940 0c4c 00       		.byte	0
 4941 0c4d 00       		.byte	0
 4942 0c4e 22       		.uleb128 0x22
 4943 0c4f 081C0000 		.4byte	0x1c08
 4944 0c53 0C070000 		.4byte	.LBI79
 4945 0c57 08       		.byte	.LVU826
 4946 0c58 40010000 		.4byte	.Ldebug_ranges0+0x140
 4947 0c5c 01       		.byte	0x1
 4948 0c5d 0E07     		.2byte	0x70e
 4949 0c5f 1B       		.byte	0x1b
 4950 0c60 7D0C0000 		.4byte	0xc7d
 4951 0c64 23       		.uleb128 0x23
 4952 0c65 40010000 		.4byte	.Ldebug_ranges0+0x140
 4953 0c69 24       		.uleb128 0x24
 4954 0c6a 1A1C0000 		.4byte	0x1c1a
 4955 0c6e 7E0A0000 		.4byte	.LLST112
ARM GAS  /tmp/ccjtHtwZ.s 			page 157


 4956 0c72 7C0A0000 		.4byte	.LVUS112
 4957 0c76 25       		.uleb128 0x25
 4958 0c77 261C0000 		.4byte	0x1c26
 4959 0c7b 00       		.byte	0
 4960 0c7c 00       		.byte	0
 4961 0c7d 29       		.uleb128 0x29
 4962 0c7e ED1B0000 		.4byte	0x1bed
 4963 0c82 5E070000 		.4byte	.LBI86
 4964 0c86 03       		.byte	.LVU863
 4965 0c87 5E070000 		.4byte	.LBB86
 4966 0c8b 62070000 		.4byte	.LBE86
 4967 0c8f 01       		.byte	0x1
 4968 0c90 4A07     		.2byte	0x74a
 4969 0c92 02       		.byte	0x2
 4970 0c93 27       		.uleb128 0x27
 4971 0c94 FB1B0000 		.4byte	0x1bfb
 4972 0c98 930A0000 		.4byte	.LLST115
 4973 0c9c 910A0000 		.4byte	.LVUS115
 4974 0ca0 00       		.byte	0
 4975 0ca1 00       		.byte	0
 4976 0ca2 07       		.uleb128 0x7
 4977 0ca3 04       		.byte	0x4
 4978 0ca4 EF000000 		.4byte	0xef
 4979 0ca8 06       		.uleb128 0x6
 4980 0ca9 A20C0000 		.4byte	0xca2
 4981 0cad 21       		.uleb128 0x21
 4982 0cae 01       		.byte	0x1
 4983 0caf FC020000 		.4byte	.LASF95
 4984 0cb3 01       		.byte	0x1
 4985 0cb4 6006     		.2byte	0x660
 4986 0cb6 0C       		.byte	0xc
 4987 0cb7 01       		.byte	0x1
 4988 0cb8 EF000000 		.4byte	0xef
 4989 0cbc 1E060000 		.4byte	.LFB18
 4990 0cc0 0C070000 		.4byte	.LFE18
 4991 0cc4 A60A0000 		.4byte	.LLST97
 4992 0cc8 01       		.byte	0x1
 4993 0cc9 A10E0000 		.4byte	0xea1
 4994 0ccd 11       		.uleb128 0x11
 4995 0cce 21020000 		.4byte	.LASF61
 4996 0cd2 01       		.byte	0x1
 4997 0cd3 6006     		.2byte	0x660
 4998 0cd5 26       		.byte	0x26
 4999 0cd6 7D020000 		.4byte	0x27d
 5000 0cda E20A0000 		.4byte	.LLST98
 5001 0cde DE0A0000 		.4byte	.LVUS98
 5002 0ce2 11       		.uleb128 0x11
 5003 0ce3 6A020000 		.4byte	.LASF73
 5004 0ce7 01       		.byte	0x1
 5005 0ce8 6006     		.2byte	0x660
 5006 0cea 3B       		.byte	0x3b
 5007 0ceb A4000000 		.4byte	0xa4
 5008 0cef 040B0000 		.4byte	.LLST99
 5009 0cf3 000B0000 		.4byte	.LVUS99
 5010 0cf7 11       		.uleb128 0x11
 5011 0cf8 39090000 		.4byte	.LASF65
 5012 0cfc 01       		.byte	0x1
ARM GAS  /tmp/ccjtHtwZ.s 			page 158


 5013 0cfd 6006     		.2byte	0x660
 5014 0cff 50       		.byte	0x50
 5015 0d00 16010000 		.4byte	0x116
 5016 0d04 240B0000 		.4byte	.LLST100
 5017 0d08 220B0000 		.4byte	.LVUS100
 5018 0d0c 12       		.uleb128 0x12
 5019 0d0d 07030000 		.4byte	.LASF96
 5020 0d11 01       		.byte	0x1
 5021 0d12 6206     		.2byte	0x662
 5022 0d14 0C       		.byte	0xc
 5023 0d15 EF000000 		.4byte	0xef
 5024 0d19 410B0000 		.4byte	.LLST101
 5025 0d1d 370B0000 		.4byte	.LVUS101
 5026 0d21 2A       		.uleb128 0x2a
 5027 0d22 1C030000 		.4byte	.LASF98
 5028 0d26 01       		.byte	0x1
 5029 0d27 6306     		.2byte	0x663
 5030 0d29 0B       		.byte	0xb
 5031 0d2a 71020000 		.4byte	0x271
 5032 0d2e 02       		.byte	0x2
 5033 0d2f 91       		.byte	0x91
 5034 0d30 60       		.sleb128 -32
 5035 0d31 12       		.uleb128 0x12
 5036 0d32 A7050000 		.4byte	.LASF92
 5037 0d36 01       		.byte	0x1
 5038 0d37 6406     		.2byte	0x664
 5039 0d39 09       		.byte	0x9
 5040 0d3a 80030000 		.4byte	0x380
 5041 0d3e 840B0000 		.4byte	.LLST102
 5042 0d42 820B0000 		.4byte	.LVUS102
 5043 0d46 12       		.uleb128 0x12
 5044 0d47 0E080000 		.4byte	.LASF67
 5045 0d4b 01       		.byte	0x1
 5046 0d4c 6506     		.2byte	0x665
 5047 0d4e 11       		.byte	0x11
 5048 0d4f C4040000 		.4byte	0x4c4
 5049 0d53 9B0B0000 		.4byte	.LLST103
 5050 0d57 970B0000 		.4byte	.LVUS103
 5051 0d5b 1D       		.uleb128 0x1d
 5052 0d5c 20010000 		.4byte	.Ldebug_ranges0+0x120
 5053 0d60 CA0D0000 		.4byte	0xdca
 5054 0d64 12       		.uleb128 0x12
 5055 0d65 A3020000 		.4byte	.LASF46
 5056 0d69 01       		.byte	0x1
 5057 0d6a 7D06     		.2byte	0x67d
 5058 0d6c 16       		.byte	0x16
 5059 0d6d 11010000 		.4byte	0x111
 5060 0d71 BF0B0000 		.4byte	.LLST104
 5061 0d75 B90B0000 		.4byte	.LVUS104
 5062 0d79 14       		.uleb128 0x14
 5063 0d7a 3E060000 		.4byte	.LVL214
 5064 0d7e EA060000 		.4byte	0x6ea
 5065 0d82 930D0000 		.4byte	0xd93
 5066 0d86 15       		.uleb128 0x15
 5067 0d87 01       		.byte	0x1
 5068 0d88 50       		.byte	0x50
 5069 0d89 02       		.byte	0x2
ARM GAS  /tmp/ccjtHtwZ.s 			page 159


 5070 0d8a 74       		.byte	0x74
 5071 0d8b 00       		.sleb128 0
 5072 0d8c 15       		.uleb128 0x15
 5073 0d8d 01       		.byte	0x1
 5074 0d8e 51       		.byte	0x51
 5075 0d8f 02       		.byte	0x2
 5076 0d90 76       		.byte	0x76
 5077 0d91 00       		.sleb128 0
 5078 0d92 00       		.byte	0
 5079 0d93 14       		.uleb128 0x14
 5080 0d94 4C060000 		.4byte	.LVL215
 5081 0d98 5E1C0000 		.4byte	0x1c5e
 5082 0d9c A70D0000 		.4byte	0xda7
 5083 0da0 15       		.uleb128 0x15
 5084 0da1 01       		.byte	0x1
 5085 0da2 50       		.byte	0x50
 5086 0da3 02       		.byte	0x2
 5087 0da4 74       		.byte	0x74
 5088 0da5 24       		.sleb128 36
 5089 0da6 00       		.byte	0
 5090 0da7 13       		.uleb128 0x13
 5091 0da8 66060000 		.4byte	.LVL216
 5092 0dac 411C0000 		.4byte	0x1c41
 5093 0db0 13       		.uleb128 0x13
 5094 0db1 76060000 		.4byte	.LVL219
 5095 0db5 411C0000 		.4byte	0x1c41
 5096 0db9 28       		.uleb128 0x28
 5097 0dba 82060000 		.4byte	.LVL221
 5098 0dbe A61C0000 		.4byte	0x1ca6
 5099 0dc2 15       		.uleb128 0x15
 5100 0dc3 01       		.byte	0x1
 5101 0dc4 50       		.byte	0x50
 5102 0dc5 02       		.byte	0x2
 5103 0dc6 91       		.byte	0x91
 5104 0dc7 60       		.sleb128 -32
 5105 0dc8 00       		.byte	0
 5106 0dc9 00       		.byte	0
 5107 0dca 13       		.uleb128 0x13
 5108 0dcb 30060000 		.4byte	.LVL211
 5109 0dcf 331C0000 		.4byte	0x1c33
 5110 0dd3 13       		.uleb128 0x13
 5111 0dd4 86060000 		.4byte	.LVL222
 5112 0dd8 411C0000 		.4byte	0x1c41
 5113 0ddc 13       		.uleb128 0x13
 5114 0ddd 8A060000 		.4byte	.LVL223
 5115 0de1 B51C0000 		.4byte	0x1cb5
 5116 0de5 13       		.uleb128 0x13
 5117 0de6 8E060000 		.4byte	.LVL224
 5118 0dea 331C0000 		.4byte	0x1c33
 5119 0dee 13       		.uleb128 0x13
 5120 0def AA060000 		.4byte	.LVL225
 5121 0df3 411C0000 		.4byte	0x1c41
 5122 0df7 14       		.uleb128 0x14
 5123 0df8 B2060000 		.4byte	.LVL226
 5124 0dfc C41C0000 		.4byte	0x1cc4
 5125 0e00 110E0000 		.4byte	0xe11
 5126 0e04 15       		.uleb128 0x15
ARM GAS  /tmp/ccjtHtwZ.s 			page 160


 5127 0e05 01       		.byte	0x1
 5128 0e06 50       		.byte	0x50
 5129 0e07 02       		.byte	0x2
 5130 0e08 91       		.byte	0x91
 5131 0e09 60       		.sleb128 -32
 5132 0e0a 15       		.uleb128 0x15
 5133 0e0b 01       		.byte	0x1
 5134 0e0c 51       		.byte	0x51
 5135 0e0d 02       		.byte	0x2
 5136 0e0e 91       		.byte	0x91
 5137 0e0f 5C       		.sleb128 -36
 5138 0e10 00       		.byte	0
 5139 0e11 14       		.uleb128 0x14
 5140 0e12 BA060000 		.4byte	.LVL227
 5141 0e16 C0050000 		.4byte	0x5c0
 5142 0e1a 250E0000 		.4byte	0xe25
 5143 0e1e 15       		.uleb128 0x15
 5144 0e1f 01       		.byte	0x1
 5145 0e20 50       		.byte	0x50
 5146 0e21 02       		.byte	0x2
 5147 0e22 74       		.byte	0x74
 5148 0e23 00       		.sleb128 0
 5149 0e24 00       		.byte	0
 5150 0e25 14       		.uleb128 0x14
 5151 0e26 C6060000 		.4byte	.LVL228
 5152 0e2a D31C0000 		.4byte	0x1cd3
 5153 0e2e 390E0000 		.4byte	0xe39
 5154 0e32 15       		.uleb128 0x15
 5155 0e33 01       		.byte	0x1
 5156 0e34 50       		.byte	0x50
 5157 0e35 02       		.byte	0x2
 5158 0e36 74       		.byte	0x74
 5159 0e37 24       		.sleb128 36
 5160 0e38 00       		.byte	0
 5161 0e39 14       		.uleb128 0x14
 5162 0e3a CC060000 		.4byte	.LVL229
 5163 0e3e 1C060000 		.4byte	0x61c
 5164 0e42 4D0E0000 		.4byte	0xe4d
 5165 0e46 15       		.uleb128 0x15
 5166 0e47 01       		.byte	0x1
 5167 0e48 50       		.byte	0x50
 5168 0e49 02       		.byte	0x2
 5169 0e4a 74       		.byte	0x74
 5170 0e4b 00       		.sleb128 0
 5171 0e4c 00       		.byte	0
 5172 0e4d 13       		.uleb128 0x13
 5173 0e4e D0060000 		.4byte	.LVL230
 5174 0e52 E21C0000 		.4byte	0x1ce2
 5175 0e56 14       		.uleb128 0x14
 5176 0e57 F0060000 		.4byte	.LVL231
 5177 0e5b 1C060000 		.4byte	0x61c
 5178 0e5f 6A0E0000 		.4byte	0xe6a
 5179 0e63 15       		.uleb128 0x15
 5180 0e64 01       		.byte	0x1
 5181 0e65 50       		.byte	0x50
 5182 0e66 02       		.byte	0x2
 5183 0e67 74       		.byte	0x74
ARM GAS  /tmp/ccjtHtwZ.s 			page 161


 5184 0e68 00       		.sleb128 0
 5185 0e69 00       		.byte	0
 5186 0e6a 13       		.uleb128 0x13
 5187 0e6b F4060000 		.4byte	.LVL232
 5188 0e6f E21C0000 		.4byte	0x1ce2
 5189 0e73 14       		.uleb128 0x14
 5190 0e74 FC060000 		.4byte	.LVL233
 5191 0e78 1C060000 		.4byte	0x61c
 5192 0e7c 870E0000 		.4byte	0xe87
 5193 0e80 15       		.uleb128 0x15
 5194 0e81 01       		.byte	0x1
 5195 0e82 50       		.byte	0x50
 5196 0e83 02       		.byte	0x2
 5197 0e84 74       		.byte	0x74
 5198 0e85 00       		.sleb128 0
 5199 0e86 00       		.byte	0
 5200 0e87 13       		.uleb128 0x13
 5201 0e88 00070000 		.4byte	.LVL234
 5202 0e8c E21C0000 		.4byte	0x1ce2
 5203 0e90 28       		.uleb128 0x28
 5204 0e91 06070000 		.4byte	.LVL235
 5205 0e95 C0050000 		.4byte	0x5c0
 5206 0e99 15       		.uleb128 0x15
 5207 0e9a 01       		.byte	0x1
 5208 0e9b 50       		.byte	0x50
 5209 0e9c 02       		.byte	0x2
 5210 0e9d 74       		.byte	0x74
 5211 0e9e 00       		.sleb128 0
 5212 0e9f 00       		.byte	0
 5213 0ea0 00       		.byte	0
 5214 0ea1 21       		.uleb128 0x21
 5215 0ea2 01       		.byte	0x1
 5216 0ea3 43030000 		.4byte	.LASF97
 5217 0ea7 01       		.byte	0x1
 5218 0ea8 8605     		.2byte	0x586
 5219 0eaa 0C       		.byte	0xc
 5220 0eab 01       		.byte	0x1
 5221 0eac EF000000 		.4byte	0xef
 5222 0eb0 CA040000 		.4byte	.LFB17
 5223 0eb4 F0050000 		.4byte	.LFE17
 5224 0eb8 E80B0000 		.4byte	.LLST82
 5225 0ebc 01       		.byte	0x1
 5226 0ebd F8100000 		.4byte	0x10f8
 5227 0ec1 11       		.uleb128 0x11
 5228 0ec2 21020000 		.4byte	.LASF61
 5229 0ec6 01       		.byte	0x1
 5230 0ec7 8605     		.2byte	0x586
 5231 0ec9 2F       		.byte	0x2f
 5232 0eca 7D020000 		.4byte	0x27d
 5233 0ece 240C0000 		.4byte	.LLST83
 5234 0ed2 200C0000 		.4byte	.LVUS83
 5235 0ed6 11       		.uleb128 0x11
 5236 0ed7 39090000 		.4byte	.LASF65
 5237 0edb 01       		.byte	0x1
 5238 0edc 8605     		.2byte	0x586
 5239 0ede 42       		.byte	0x42
 5240 0edf 16010000 		.4byte	0x116
ARM GAS  /tmp/ccjtHtwZ.s 			page 162


 5241 0ee3 440C0000 		.4byte	.LLST84
 5242 0ee7 420C0000 		.4byte	.LVUS84
 5243 0eeb 12       		.uleb128 0x12
 5244 0eec 07030000 		.4byte	.LASF96
 5245 0ef0 01       		.byte	0x1
 5246 0ef1 8805     		.2byte	0x588
 5247 0ef3 0C       		.byte	0xc
 5248 0ef4 EF000000 		.4byte	0xef
 5249 0ef8 610C0000 		.4byte	.LLST85
 5250 0efc 570C0000 		.4byte	.LVUS85
 5251 0f00 2A       		.uleb128 0x2a
 5252 0f01 1C030000 		.4byte	.LASF98
 5253 0f05 01       		.byte	0x1
 5254 0f06 8905     		.2byte	0x589
 5255 0f08 0B       		.byte	0xb
 5256 0f09 71020000 		.4byte	0x271
 5257 0f0d 02       		.byte	0x2
 5258 0f0e 91       		.byte	0x91
 5259 0f0f 60       		.sleb128 -32
 5260 0f10 12       		.uleb128 0x12
 5261 0f11 0E080000 		.4byte	.LASF67
 5262 0f15 01       		.byte	0x1
 5263 0f16 8A05     		.2byte	0x58a
 5264 0f18 11       		.byte	0x11
 5265 0f19 C4040000 		.4byte	0x4c4
 5266 0f1d A60C0000 		.4byte	.LLST86
 5267 0f21 A20C0000 		.4byte	.LVUS86
 5268 0f25 12       		.uleb128 0x12
 5269 0f26 6C060000 		.4byte	.LASF99
 5270 0f2a 01       		.byte	0x1
 5271 0f2b 8D05     		.2byte	0x58d
 5272 0f2d 0D       		.byte	0xd
 5273 0f2e EF000000 		.4byte	0xef
 5274 0f32 CA0C0000 		.4byte	.LLST87
 5275 0f36 C40C0000 		.4byte	.LVUS87
 5276 0f3a 1D       		.uleb128 0x1d
 5277 0f3b 00010000 		.4byte	.Ldebug_ranges0+0x100
 5278 0f3f 8F0F0000 		.4byte	0xf8f
 5279 0f43 12       		.uleb128 0x12
 5280 0f44 0D060000 		.4byte	.LASF100
 5281 0f48 01       		.byte	0x1
 5282 0f49 A805     		.2byte	0x5a8
 5283 0f4b 16       		.byte	0x16
 5284 0f4c 11010000 		.4byte	0x111
 5285 0f50 FE0C0000 		.4byte	.LLST88
 5286 0f54 F40C0000 		.4byte	.LVUS88
 5287 0f58 13       		.uleb128 0x13
 5288 0f59 EC040000 		.4byte	.LVL173
 5289 0f5d F11C0000 		.4byte	0x1cf1
 5290 0f61 14       		.uleb128 0x14
 5291 0f62 FA040000 		.4byte	.LVL174
 5292 0f66 5E1C0000 		.4byte	0x1c5e
 5293 0f6a 750F0000 		.4byte	0xf75
 5294 0f6e 15       		.uleb128 0x15
 5295 0f6f 01       		.byte	0x1
 5296 0f70 50       		.byte	0x50
 5297 0f71 02       		.byte	0x2
ARM GAS  /tmp/ccjtHtwZ.s 			page 163


 5298 0f72 74       		.byte	0x74
 5299 0f73 10       		.sleb128 16
 5300 0f74 00       		.byte	0
 5301 0f75 13       		.uleb128 0x13
 5302 0f76 14050000 		.4byte	.LVL175
 5303 0f7a 411C0000 		.4byte	0x1c41
 5304 0f7e 28       		.uleb128 0x28
 5305 0f7f 38050000 		.4byte	.LVL181
 5306 0f83 A61C0000 		.4byte	0x1ca6
 5307 0f87 15       		.uleb128 0x15
 5308 0f88 01       		.byte	0x1
 5309 0f89 50       		.byte	0x50
 5310 0f8a 02       		.byte	0x2
 5311 0f8b 91       		.byte	0x91
 5312 0f8c 60       		.sleb128 -32
 5313 0f8d 00       		.byte	0
 5314 0f8e 00       		.byte	0
 5315 0f8f 2B       		.uleb128 0x2b
 5316 0f90 DC050000 		.4byte	.LBB73
 5317 0f94 F0050000 		.4byte	.LBE73
 5318 0f98 F00F0000 		.4byte	0xff0
 5319 0f9c 12       		.uleb128 0x12
 5320 0f9d BE080000 		.4byte	.LASF101
 5321 0fa1 01       		.byte	0x1
 5322 0fa2 4506     		.2byte	0x645
 5323 0fa4 14       		.byte	0x14
 5324 0fa5 00010000 		.4byte	0x100
 5325 0fa9 460D0000 		.4byte	.LLST89
 5326 0fad 440D0000 		.4byte	.LVUS89
 5327 0fb1 26       		.uleb128 0x26
 5328 0fb2 E6070000 		.4byte	0x7e6
 5329 0fb6 DC050000 		.4byte	.LBI74
 5330 0fba 02       		.byte	.LVU692
 5331 0fbb DC050000 		.4byte	.LBB74
 5332 0fbf E8050000 		.4byte	.LBE74
 5333 0fc3 01       		.byte	0x1
 5334 0fc4 4C06     		.2byte	0x64c
 5335 0fc6 23       		.byte	0x23
 5336 0fc7 E60F0000 		.4byte	0xfe6
 5337 0fcb 27       		.uleb128 0x27
 5338 0fcc F9070000 		.4byte	0x7f9
 5339 0fd0 5B0D0000 		.4byte	.LLST90
 5340 0fd4 590D0000 		.4byte	.LVUS90
 5341 0fd8 24       		.uleb128 0x24
 5342 0fd9 06080000 		.4byte	0x806
 5343 0fdd 700D0000 		.4byte	.LLST91
 5344 0fe1 6E0D0000 		.4byte	.LVUS91
 5345 0fe5 00       		.byte	0
 5346 0fe6 13       		.uleb128 0x13
 5347 0fe7 EE050000 		.4byte	.LVL202
 5348 0feb 001D0000 		.4byte	0x1d00
 5349 0fef 00       		.byte	0
 5350 0ff0 13       		.uleb128 0x13
 5351 0ff1 DC040000 		.4byte	.LVL169
 5352 0ff5 331C0000 		.4byte	0x1c33
 5353 0ff9 13       		.uleb128 0x13
 5354 0ffa 2C050000 		.4byte	.LVL179
ARM GAS  /tmp/ccjtHtwZ.s 			page 164


 5355 0ffe 411C0000 		.4byte	0x1c41
 5356 1002 13       		.uleb128 0x13
 5357 1003 3C050000 		.4byte	.LVL182
 5358 1007 411C0000 		.4byte	0x1c41
 5359 100b 13       		.uleb128 0x13
 5360 100c 40050000 		.4byte	.LVL183
 5361 1010 B51C0000 		.4byte	0x1cb5
 5362 1014 13       		.uleb128 0x13
 5363 1015 44050000 		.4byte	.LVL184
 5364 1019 331C0000 		.4byte	0x1c33
 5365 101d 13       		.uleb128 0x13
 5366 101e 60050000 		.4byte	.LVL185
 5367 1022 411C0000 		.4byte	0x1c41
 5368 1026 14       		.uleb128 0x14
 5369 1027 68050000 		.4byte	.LVL186
 5370 102b C41C0000 		.4byte	0x1cc4
 5371 102f 40100000 		.4byte	0x1040
 5372 1033 15       		.uleb128 0x15
 5373 1034 01       		.byte	0x1
 5374 1035 50       		.byte	0x50
 5375 1036 02       		.byte	0x2
 5376 1037 91       		.byte	0x91
 5377 1038 60       		.sleb128 -32
 5378 1039 15       		.uleb128 0x15
 5379 103a 01       		.byte	0x1
 5380 103b 51       		.byte	0x51
 5381 103c 02       		.byte	0x2
 5382 103d 91       		.byte	0x91
 5383 103e 5C       		.sleb128 -36
 5384 103f 00       		.byte	0
 5385 1040 14       		.uleb128 0x14
 5386 1041 70050000 		.4byte	.LVL187
 5387 1045 C0050000 		.4byte	0x5c0
 5388 1049 54100000 		.4byte	0x1054
 5389 104d 15       		.uleb128 0x15
 5390 104e 01       		.byte	0x1
 5391 104f 50       		.byte	0x50
 5392 1050 02       		.byte	0x2
 5393 1051 74       		.byte	0x74
 5394 1052 00       		.sleb128 0
 5395 1053 00       		.byte	0
 5396 1054 13       		.uleb128 0x13
 5397 1055 7A050000 		.4byte	.LVL188
 5398 1059 331C0000 		.4byte	0x1c33
 5399 105d 13       		.uleb128 0x13
 5400 105e 80050000 		.4byte	.LVL189
 5401 1062 0F1D0000 		.4byte	0x1d0f
 5402 1066 13       		.uleb128 0x13
 5403 1067 86050000 		.4byte	.LVL191
 5404 106b 411C0000 		.4byte	0x1c41
 5405 106f 14       		.uleb128 0x14
 5406 1070 90050000 		.4byte	.LVL192
 5407 1074 D31C0000 		.4byte	0x1cd3
 5408 1078 83100000 		.4byte	0x1083
 5409 107c 15       		.uleb128 0x15
 5410 107d 01       		.byte	0x1
 5411 107e 50       		.byte	0x50
ARM GAS  /tmp/ccjtHtwZ.s 			page 165


 5412 107f 02       		.byte	0x2
 5413 1080 74       		.byte	0x74
 5414 1081 24       		.sleb128 36
 5415 1082 00       		.byte	0
 5416 1083 14       		.uleb128 0x14
 5417 1084 96050000 		.4byte	.LVL193
 5418 1088 1C060000 		.4byte	0x61c
 5419 108c 97100000 		.4byte	0x1097
 5420 1090 15       		.uleb128 0x15
 5421 1091 01       		.byte	0x1
 5422 1092 50       		.byte	0x50
 5423 1093 02       		.byte	0x2
 5424 1094 74       		.byte	0x74
 5425 1095 00       		.sleb128 0
 5426 1096 00       		.byte	0
 5427 1097 13       		.uleb128 0x13
 5428 1098 9A050000 		.4byte	.LVL194
 5429 109c E21C0000 		.4byte	0x1ce2
 5430 10a0 14       		.uleb128 0x14
 5431 10a1 BA050000 		.4byte	.LVL195
 5432 10a5 1C060000 		.4byte	0x61c
 5433 10a9 B4100000 		.4byte	0x10b4
 5434 10ad 15       		.uleb128 0x15
 5435 10ae 01       		.byte	0x1
 5436 10af 50       		.byte	0x50
 5437 10b0 02       		.byte	0x2
 5438 10b1 74       		.byte	0x74
 5439 10b2 00       		.sleb128 0
 5440 10b3 00       		.byte	0
 5441 10b4 13       		.uleb128 0x13
 5442 10b5 BE050000 		.4byte	.LVL196
 5443 10b9 E21C0000 		.4byte	0x1ce2
 5444 10bd 14       		.uleb128 0x14
 5445 10be C6050000 		.4byte	.LVL197
 5446 10c2 1C060000 		.4byte	0x61c
 5447 10c6 D1100000 		.4byte	0x10d1
 5448 10ca 15       		.uleb128 0x15
 5449 10cb 01       		.byte	0x1
 5450 10cc 50       		.byte	0x50
 5451 10cd 02       		.byte	0x2
 5452 10ce 74       		.byte	0x74
 5453 10cf 00       		.sleb128 0
 5454 10d0 00       		.byte	0
 5455 10d1 13       		.uleb128 0x13
 5456 10d2 CA050000 		.4byte	.LVL198
 5457 10d6 E21C0000 		.4byte	0x1ce2
 5458 10da 14       		.uleb128 0x14
 5459 10db D0050000 		.4byte	.LVL199
 5460 10df C0050000 		.4byte	0x5c0
 5461 10e3 EE100000 		.4byte	0x10ee
 5462 10e7 15       		.uleb128 0x15
 5463 10e8 01       		.byte	0x1
 5464 10e9 50       		.byte	0x50
 5465 10ea 02       		.byte	0x2
 5466 10eb 74       		.byte	0x74
 5467 10ec 00       		.sleb128 0
 5468 10ed 00       		.byte	0
ARM GAS  /tmp/ccjtHtwZ.s 			page 166


 5469 10ee 13       		.uleb128 0x13
 5470 10ef DC050000 		.4byte	.LVL200
 5471 10f3 331C0000 		.4byte	0x1c33
 5472 10f7 00       		.byte	0
 5473 10f8 21       		.uleb128 0x21
 5474 10f9 01       		.byte	0x1
 5475 10fa 54000000 		.4byte	.LASF102
 5476 10fe 01       		.byte	0x1
 5477 10ff F904     		.2byte	0x4f9
 5478 1101 0C       		.byte	0xc
 5479 1102 01       		.byte	0x1
 5480 1103 EF000000 		.4byte	0xef
 5481 1107 DC030000 		.4byte	.LFB16
 5482 110b CA040000 		.4byte	.LFE16
 5483 110f 830D0000 		.4byte	.LLST75
 5484 1113 01       		.byte	0x1
 5485 1114 D7120000 		.4byte	0x12d7
 5486 1118 11       		.uleb128 0x11
 5487 1119 21020000 		.4byte	.LASF61
 5488 111d 01       		.byte	0x1
 5489 111e F904     		.2byte	0x4f9
 5490 1120 29       		.byte	0x29
 5491 1121 7D020000 		.4byte	0x27d
 5492 1125 BF0D0000 		.4byte	.LLST76
 5493 1129 BB0D0000 		.4byte	.LVUS76
 5494 112d 11       		.uleb128 0x11
 5495 112e 6A020000 		.4byte	.LASF73
 5496 1132 01       		.byte	0x1
 5497 1133 F904     		.2byte	0x4f9
 5498 1135 3E       		.byte	0x3e
 5499 1136 A4000000 		.4byte	0xa4
 5500 113a E10D0000 		.4byte	.LLST77
 5501 113e DD0D0000 		.4byte	.LVUS77
 5502 1142 11       		.uleb128 0x11
 5503 1143 39090000 		.4byte	.LASF65
 5504 1147 01       		.byte	0x1
 5505 1148 F904     		.2byte	0x4f9
 5506 114a 53       		.byte	0x53
 5507 114b 16010000 		.4byte	0x116
 5508 114f 010E0000 		.4byte	.LLST78
 5509 1153 FF0D0000 		.4byte	.LVUS78
 5510 1157 12       		.uleb128 0x12
 5511 1158 07030000 		.4byte	.LASF96
 5512 115c 01       		.byte	0x1
 5513 115d FB04     		.2byte	0x4fb
 5514 115f 0C       		.byte	0xc
 5515 1160 EF000000 		.4byte	0xef
 5516 1164 1E0E0000 		.4byte	.LLST79
 5517 1168 140E0000 		.4byte	.LVUS79
 5518 116c 2A       		.uleb128 0x2a
 5519 116d 1C030000 		.4byte	.LASF98
 5520 1171 01       		.byte	0x1
 5521 1172 FC04     		.2byte	0x4fc
 5522 1174 0B       		.byte	0xb
 5523 1175 71020000 		.4byte	0x271
 5524 1179 02       		.byte	0x2
 5525 117a 91       		.byte	0x91
ARM GAS  /tmp/ccjtHtwZ.s 			page 167


 5526 117b 60       		.sleb128 -32
 5527 117c 12       		.uleb128 0x12
 5528 117d 0E080000 		.4byte	.LASF67
 5529 1181 01       		.byte	0x1
 5530 1182 FD04     		.2byte	0x4fd
 5531 1184 11       		.byte	0x11
 5532 1185 C4040000 		.4byte	0x4c4
 5533 1189 630E0000 		.4byte	.LLST80
 5534 118d 5F0E0000 		.4byte	.LVUS80
 5535 1191 1D       		.uleb128 0x1d
 5536 1192 E0000000 		.4byte	.Ldebug_ranges0+0xe0
 5537 1196 00120000 		.4byte	0x1200
 5538 119a 12       		.uleb128 0x12
 5539 119b A3020000 		.4byte	.LASF46
 5540 119f 01       		.byte	0x1
 5541 11a0 1505     		.2byte	0x515
 5542 11a2 16       		.byte	0x16
 5543 11a3 11010000 		.4byte	0x111
 5544 11a7 870E0000 		.4byte	.LLST81
 5545 11ab 810E0000 		.4byte	.LVUS81
 5546 11af 14       		.uleb128 0x14
 5547 11b0 FC030000 		.4byte	.LVL143
 5548 11b4 EA060000 		.4byte	0x6ea
 5549 11b8 C9110000 		.4byte	0x11c9
 5550 11bc 15       		.uleb128 0x15
 5551 11bd 01       		.byte	0x1
 5552 11be 50       		.byte	0x50
 5553 11bf 02       		.byte	0x2
 5554 11c0 74       		.byte	0x74
 5555 11c1 00       		.sleb128 0
 5556 11c2 15       		.uleb128 0x15
 5557 11c3 01       		.byte	0x1
 5558 11c4 51       		.byte	0x51
 5559 11c5 02       		.byte	0x2
 5560 11c6 76       		.byte	0x76
 5561 11c7 00       		.sleb128 0
 5562 11c8 00       		.byte	0
 5563 11c9 14       		.uleb128 0x14
 5564 11ca 0A040000 		.4byte	.LVL144
 5565 11ce 5E1C0000 		.4byte	0x1c5e
 5566 11d2 DD110000 		.4byte	0x11dd
 5567 11d6 15       		.uleb128 0x15
 5568 11d7 01       		.byte	0x1
 5569 11d8 50       		.byte	0x50
 5570 11d9 02       		.byte	0x2
 5571 11da 74       		.byte	0x74
 5572 11db 10       		.sleb128 16
 5573 11dc 00       		.byte	0
 5574 11dd 13       		.uleb128 0x13
 5575 11de 24040000 		.4byte	.LVL145
 5576 11e2 411C0000 		.4byte	0x1c41
 5577 11e6 13       		.uleb128 0x13
 5578 11e7 34040000 		.4byte	.LVL149
 5579 11eb 411C0000 		.4byte	0x1c41
 5580 11ef 28       		.uleb128 0x28
 5581 11f0 40040000 		.4byte	.LVL151
 5582 11f4 A61C0000 		.4byte	0x1ca6
ARM GAS  /tmp/ccjtHtwZ.s 			page 168


 5583 11f8 15       		.uleb128 0x15
 5584 11f9 01       		.byte	0x1
 5585 11fa 50       		.byte	0x50
 5586 11fb 02       		.byte	0x2
 5587 11fc 91       		.byte	0x91
 5588 11fd 60       		.sleb128 -32
 5589 11fe 00       		.byte	0
 5590 11ff 00       		.byte	0
 5591 1200 13       		.uleb128 0x13
 5592 1201 EE030000 		.4byte	.LVL140
 5593 1205 331C0000 		.4byte	0x1c33
 5594 1209 13       		.uleb128 0x13
 5595 120a 44040000 		.4byte	.LVL152
 5596 120e 411C0000 		.4byte	0x1c41
 5597 1212 13       		.uleb128 0x13
 5598 1213 48040000 		.4byte	.LVL153
 5599 1217 B51C0000 		.4byte	0x1cb5
 5600 121b 13       		.uleb128 0x13
 5601 121c 4C040000 		.4byte	.LVL154
 5602 1220 331C0000 		.4byte	0x1c33
 5603 1224 13       		.uleb128 0x13
 5604 1225 68040000 		.4byte	.LVL155
 5605 1229 411C0000 		.4byte	0x1c41
 5606 122d 14       		.uleb128 0x14
 5607 122e 70040000 		.4byte	.LVL156
 5608 1232 C41C0000 		.4byte	0x1cc4
 5609 1236 47120000 		.4byte	0x1247
 5610 123a 15       		.uleb128 0x15
 5611 123b 01       		.byte	0x1
 5612 123c 50       		.byte	0x50
 5613 123d 02       		.byte	0x2
 5614 123e 91       		.byte	0x91
 5615 123f 60       		.sleb128 -32
 5616 1240 15       		.uleb128 0x15
 5617 1241 01       		.byte	0x1
 5618 1242 51       		.byte	0x51
 5619 1243 02       		.byte	0x2
 5620 1244 91       		.byte	0x91
 5621 1245 5C       		.sleb128 -36
 5622 1246 00       		.byte	0
 5623 1247 14       		.uleb128 0x14
 5624 1248 78040000 		.4byte	.LVL157
 5625 124c C0050000 		.4byte	0x5c0
 5626 1250 5B120000 		.4byte	0x125b
 5627 1254 15       		.uleb128 0x15
 5628 1255 01       		.byte	0x1
 5629 1256 50       		.byte	0x50
 5630 1257 02       		.byte	0x2
 5631 1258 74       		.byte	0x74
 5632 1259 00       		.sleb128 0
 5633 125a 00       		.byte	0
 5634 125b 14       		.uleb128 0x14
 5635 125c 84040000 		.4byte	.LVL158
 5636 1260 D31C0000 		.4byte	0x1cd3
 5637 1264 6F120000 		.4byte	0x126f
 5638 1268 15       		.uleb128 0x15
 5639 1269 01       		.byte	0x1
ARM GAS  /tmp/ccjtHtwZ.s 			page 169


 5640 126a 50       		.byte	0x50
 5641 126b 02       		.byte	0x2
 5642 126c 74       		.byte	0x74
 5643 126d 24       		.sleb128 36
 5644 126e 00       		.byte	0
 5645 126f 14       		.uleb128 0x14
 5646 1270 8A040000 		.4byte	.LVL159
 5647 1274 1C060000 		.4byte	0x61c
 5648 1278 83120000 		.4byte	0x1283
 5649 127c 15       		.uleb128 0x15
 5650 127d 01       		.byte	0x1
 5651 127e 50       		.byte	0x50
 5652 127f 02       		.byte	0x2
 5653 1280 74       		.byte	0x74
 5654 1281 00       		.sleb128 0
 5655 1282 00       		.byte	0
 5656 1283 13       		.uleb128 0x13
 5657 1284 8E040000 		.4byte	.LVL160
 5658 1288 E21C0000 		.4byte	0x1ce2
 5659 128c 14       		.uleb128 0x14
 5660 128d AE040000 		.4byte	.LVL161
 5661 1291 1C060000 		.4byte	0x61c
 5662 1295 A0120000 		.4byte	0x12a0
 5663 1299 15       		.uleb128 0x15
 5664 129a 01       		.byte	0x1
 5665 129b 50       		.byte	0x50
 5666 129c 02       		.byte	0x2
 5667 129d 74       		.byte	0x74
 5668 129e 00       		.sleb128 0
 5669 129f 00       		.byte	0
 5670 12a0 13       		.uleb128 0x13
 5671 12a1 B2040000 		.4byte	.LVL162
 5672 12a5 E21C0000 		.4byte	0x1ce2
 5673 12a9 14       		.uleb128 0x14
 5674 12aa BA040000 		.4byte	.LVL163
 5675 12ae 1C060000 		.4byte	0x61c
 5676 12b2 BD120000 		.4byte	0x12bd
 5677 12b6 15       		.uleb128 0x15
 5678 12b7 01       		.byte	0x1
 5679 12b8 50       		.byte	0x50
 5680 12b9 02       		.byte	0x2
 5681 12ba 74       		.byte	0x74
 5682 12bb 00       		.sleb128 0
 5683 12bc 00       		.byte	0
 5684 12bd 13       		.uleb128 0x13
 5685 12be BE040000 		.4byte	.LVL164
 5686 12c2 E21C0000 		.4byte	0x1ce2
 5687 12c6 28       		.uleb128 0x28
 5688 12c7 C4040000 		.4byte	.LVL165
 5689 12cb C0050000 		.4byte	0x5c0
 5690 12cf 15       		.uleb128 0x15
 5691 12d0 01       		.byte	0x1
 5692 12d1 50       		.byte	0x50
 5693 12d2 02       		.byte	0x2
 5694 12d3 74       		.byte	0x74
 5695 12d4 00       		.sleb128 0
 5696 12d5 00       		.byte	0
ARM GAS  /tmp/ccjtHtwZ.s 			page 170


 5697 12d6 00       		.byte	0
 5698 12d7 21       		.uleb128 0x21
 5699 12d8 01       		.byte	0x1
 5700 12d9 46040000 		.4byte	.LASF103
 5701 12dd 01       		.byte	0x1
 5702 12de 5404     		.2byte	0x454
 5703 12e0 0C       		.byte	0xc
 5704 12e1 01       		.byte	0x1
 5705 12e2 EF000000 		.4byte	0xef
 5706 12e6 80030000 		.4byte	.LFB15
 5707 12ea DC030000 		.4byte	.LFE15
 5708 12ee B20E0000 		.4byte	.LLST65
 5709 12f2 01       		.byte	0x1
 5710 12f3 01140000 		.4byte	0x1401
 5711 12f7 11       		.uleb128 0x11
 5712 12f8 21020000 		.4byte	.LASF61
 5713 12fc 01       		.byte	0x1
 5714 12fd 5404     		.2byte	0x454
 5715 12ff 2D       		.byte	0x2d
 5716 1300 7D020000 		.4byte	0x27d
 5717 1304 E00E0000 		.4byte	.LLST66
 5718 1308 D20E0000 		.4byte	.LVUS66
 5719 130c 11       		.uleb128 0x11
 5720 130d 8E000000 		.4byte	.LASF94
 5721 1311 01       		.byte	0x1
 5722 1312 5404     		.2byte	0x454
 5723 1314 48       		.byte	0x48
 5724 1315 A80C0000 		.4byte	0xca8
 5725 1319 460F0000 		.4byte	.LLST67
 5726 131d 400F0000 		.4byte	.LVUS67
 5727 1321 12       		.uleb128 0x12
 5728 1322 16080000 		.4byte	.LASF68
 5729 1326 01       		.byte	0x1
 5730 1327 5604     		.2byte	0x456
 5731 1329 0C       		.byte	0xc
 5732 132a EF000000 		.4byte	0xef
 5733 132e 710F0000 		.4byte	.LLST68
 5734 1332 6F0F0000 		.4byte	.LVUS68
 5735 1336 12       		.uleb128 0x12
 5736 1337 B7010000 		.4byte	.LASF91
 5737 133b 01       		.byte	0x1
 5738 133c 5704     		.2byte	0x457
 5739 133e 0D       		.byte	0xd
 5740 133f 00010000 		.4byte	0x100
 5741 1343 860F0000 		.4byte	.LLST69
 5742 1347 840F0000 		.4byte	.LVUS69
 5743 134b 12       		.uleb128 0x12
 5744 134c 0E080000 		.4byte	.LASF67
 5745 1350 01       		.byte	0x1
 5746 1351 5804     		.2byte	0x458
 5747 1353 11       		.byte	0x11
 5748 1354 C4040000 		.4byte	0x4c4
 5749 1358 A70F0000 		.4byte	.LLST70
 5750 135c 990F0000 		.4byte	.LVUS70
 5751 1360 1D       		.uleb128 0x1d
 5752 1361 B0000000 		.4byte	.Ldebug_ranges0+0xb0
 5753 1365 AD130000 		.4byte	0x13ad
ARM GAS  /tmp/ccjtHtwZ.s 			page 171


 5754 1369 12       		.uleb128 0x12
 5755 136a A3020000 		.4byte	.LASF46
 5756 136e 01       		.byte	0x1
 5757 136f 7D04     		.2byte	0x47d
 5758 1371 15       		.byte	0x15
 5759 1372 11010000 		.4byte	0x111
 5760 1376 11100000 		.4byte	.LLST72
 5761 137a 07100000 		.4byte	.LVUS72
 5762 137e 23       		.uleb128 0x23
 5763 137f C8000000 		.4byte	.Ldebug_ranges0+0xc8
 5764 1383 12       		.uleb128 0x12
 5765 1384 52010000 		.4byte	.LASF50
 5766 1388 01       		.byte	0x1
 5767 1389 8404     		.2byte	0x484
 5768 138b 11       		.byte	0x11
 5769 138c CD000000 		.4byte	0xcd
 5770 1390 62100000 		.4byte	.LLST73
 5771 1394 56100000 		.4byte	.LVUS73
 5772 1398 28       		.uleb128 0x28
 5773 1399 BC030000 		.4byte	.LVL129
 5774 139d 5E1C0000 		.4byte	0x1c5e
 5775 13a1 15       		.uleb128 0x15
 5776 13a2 01       		.byte	0x1
 5777 13a3 50       		.byte	0x50
 5778 13a4 05       		.byte	0x5
 5779 13a5 F3       		.byte	0xf3
 5780 13a6 01       		.uleb128 0x1
 5781 13a7 50       		.byte	0x50
 5782 13a8 23       		.byte	0x23
 5783 13a9 24       		.uleb128 0x24
 5784 13aa 00       		.byte	0
 5785 13ab 00       		.byte	0
 5786 13ac 00       		.byte	0
 5787 13ad 22       		.uleb128 0x22
 5788 13ae 081C0000 		.4byte	0x1c08
 5789 13b2 80030000 		.4byte	.LBI53
 5790 13b6 09       		.byte	.LVU453
 5791 13b7 98000000 		.4byte	.Ldebug_ranges0+0x98
 5792 13bb 01       		.byte	0x1
 5793 13bc 7B04     		.2byte	0x47b
 5794 13be 1B       		.byte	0x1b
 5795 13bf DC130000 		.4byte	0x13dc
 5796 13c3 23       		.uleb128 0x23
 5797 13c4 98000000 		.4byte	.Ldebug_ranges0+0x98
 5798 13c8 24       		.uleb128 0x24
 5799 13c9 1A1C0000 		.4byte	0x1c1a
 5800 13cd B0100000 		.4byte	.LLST71
 5801 13d1 AE100000 		.4byte	.LVUS71
 5802 13d5 25       		.uleb128 0x25
 5803 13d6 261C0000 		.4byte	0x1c26
 5804 13da 00       		.byte	0
 5805 13db 00       		.byte	0
 5806 13dc 29       		.uleb128 0x29
 5807 13dd ED1B0000 		.4byte	0x1bed
 5808 13e1 C8030000 		.4byte	.LBI60
 5809 13e5 02       		.byte	.LVU489
 5810 13e6 C8030000 		.4byte	.LBB60
ARM GAS  /tmp/ccjtHtwZ.s 			page 172


 5811 13ea CC030000 		.4byte	.LBE60
 5812 13ee 01       		.byte	0x1
 5813 13ef F304     		.2byte	0x4f3
 5814 13f1 02       		.byte	0x2
 5815 13f2 27       		.uleb128 0x27
 5816 13f3 FB1B0000 		.4byte	0x1bfb
 5817 13f7 C5100000 		.4byte	.LLST74
 5818 13fb C3100000 		.4byte	.LVUS74
 5819 13ff 00       		.byte	0
 5820 1400 00       		.byte	0
 5821 1401 21       		.uleb128 0x21
 5822 1402 01       		.byte	0x1
 5823 1403 E7000000 		.4byte	.LASF104
 5824 1407 01       		.byte	0x1
 5825 1408 BD03     		.2byte	0x3bd
 5826 140a 0C       		.byte	0xc
 5827 140b 01       		.byte	0x1
 5828 140c EF000000 		.4byte	0xef
 5829 1410 18030000 		.4byte	.LFB14
 5830 1414 80030000 		.4byte	.LFE14
 5831 1418 D8100000 		.4byte	.LLST54
 5832 141c 01       		.byte	0x1
 5833 141d 4B150000 		.4byte	0x154b
 5834 1421 11       		.uleb128 0x11
 5835 1422 21020000 		.4byte	.LASF61
 5836 1426 01       		.byte	0x1
 5837 1427 BD03     		.2byte	0x3bd
 5838 1429 34       		.byte	0x34
 5839 142a 7D020000 		.4byte	0x27d
 5840 142e FC100000 		.4byte	.LLST55
 5841 1432 F8100000 		.4byte	.LVUS55
 5842 1436 11       		.uleb128 0x11
 5843 1437 A0070000 		.4byte	.LASF76
 5844 143b 01       		.byte	0x1
 5845 143c BD03     		.2byte	0x3bd
 5846 143e 4F       		.byte	0x4f
 5847 143f B6000000 		.4byte	0xb6
 5848 1443 20110000 		.4byte	.LLST56
 5849 1447 1A110000 		.4byte	.LVUS56
 5850 144b 11       		.uleb128 0x11
 5851 144c 8E000000 		.4byte	.LASF94
 5852 1450 01       		.byte	0x1
 5853 1451 BD03     		.2byte	0x3bd
 5854 1453 71       		.byte	0x71
 5855 1454 A80C0000 		.4byte	0xca8
 5856 1458 50110000 		.4byte	.LLST57
 5857 145c 4C110000 		.4byte	.LVUS57
 5858 1460 11       		.uleb128 0x11
 5859 1461 95010000 		.4byte	.LASF105
 5860 1465 01       		.byte	0x1
 5861 1466 BD03     		.2byte	0x3bd
 5862 1468 9D       		.byte	0x9d
 5863 1469 FB000000 		.4byte	0xfb
 5864 146d 76110000 		.4byte	.LLST58
 5865 1471 6E110000 		.4byte	.LVUS58
 5866 1475 12       		.uleb128 0x12
 5867 1476 16080000 		.4byte	.LASF68
ARM GAS  /tmp/ccjtHtwZ.s 			page 173


 5868 147a 01       		.byte	0x1
 5869 147b BF03     		.2byte	0x3bf
 5870 147d 0C       		.byte	0xc
 5871 147e EF000000 		.4byte	0xef
 5872 1482 AF110000 		.4byte	.LLST59
 5873 1486 AD110000 		.4byte	.LVUS59
 5874 148a 12       		.uleb128 0x12
 5875 148b B7010000 		.4byte	.LASF91
 5876 148f 01       		.byte	0x1
 5877 1490 C003     		.2byte	0x3c0
 5878 1492 0D       		.byte	0xd
 5879 1493 00010000 		.4byte	0x100
 5880 1497 C4110000 		.4byte	.LLST60
 5881 149b C2110000 		.4byte	.LVUS60
 5882 149f 12       		.uleb128 0x12
 5883 14a0 0E080000 		.4byte	.LASF67
 5884 14a4 01       		.byte	0x1
 5885 14a5 C103     		.2byte	0x3c1
 5886 14a7 11       		.byte	0x11
 5887 14a8 C4040000 		.4byte	0x4c4
 5888 14ac DB110000 		.4byte	.LLST61
 5889 14b0 D7110000 		.4byte	.LVUS61
 5890 14b4 1D       		.uleb128 0x1d
 5891 14b5 80000000 		.4byte	.Ldebug_ranges0+0x80
 5892 14b9 F7140000 		.4byte	0x14f7
 5893 14bd 12       		.uleb128 0x12
 5894 14be 52010000 		.4byte	.LASF50
 5895 14c2 01       		.byte	0x1
 5896 14c3 E003     		.2byte	0x3e0
 5897 14c5 11       		.byte	0x11
 5898 14c6 CD000000 		.4byte	0xcd
 5899 14ca 03120000 		.4byte	.LLST63
 5900 14ce F9110000 		.4byte	.LVUS63
 5901 14d2 14       		.uleb128 0x14
 5902 14d3 4C030000 		.4byte	.LVL109
 5903 14d7 42070000 		.4byte	0x742
 5904 14db E6140000 		.4byte	0x14e6
 5905 14df 15       		.uleb128 0x15
 5906 14e0 01       		.byte	0x1
 5907 14e1 50       		.byte	0x50
 5908 14e2 02       		.byte	0x2
 5909 14e3 74       		.byte	0x74
 5910 14e4 00       		.sleb128 0
 5911 14e5 00       		.byte	0
 5912 14e6 28       		.uleb128 0x28
 5913 14e7 60030000 		.4byte	.LVL112
 5914 14eb 5E1C0000 		.4byte	0x1c5e
 5915 14ef 15       		.uleb128 0x15
 5916 14f0 01       		.byte	0x1
 5917 14f1 50       		.byte	0x50
 5918 14f2 02       		.byte	0x2
 5919 14f3 74       		.byte	0x74
 5920 14f4 24       		.sleb128 36
 5921 14f5 00       		.byte	0
 5922 14f6 00       		.byte	0
 5923 14f7 22       		.uleb128 0x22
 5924 14f8 081C0000 		.4byte	0x1c08
ARM GAS  /tmp/ccjtHtwZ.s 			page 174


 5925 14fc 18030000 		.4byte	.LBI45
 5926 1500 09       		.byte	.LVU399
 5927 1501 68000000 		.4byte	.Ldebug_ranges0+0x68
 5928 1505 01       		.byte	0x1
 5929 1506 DC03     		.2byte	0x3dc
 5930 1508 1B       		.byte	0x1b
 5931 1509 26150000 		.4byte	0x1526
 5932 150d 23       		.uleb128 0x23
 5933 150e 68000000 		.4byte	.Ldebug_ranges0+0x68
 5934 1512 24       		.uleb128 0x24
 5935 1513 1A1C0000 		.4byte	0x1c1a
 5936 1517 48120000 		.4byte	.LLST62
 5937 151b 46120000 		.4byte	.LVUS62
 5938 151f 25       		.uleb128 0x25
 5939 1520 261C0000 		.4byte	0x1c26
 5940 1524 00       		.byte	0
 5941 1525 00       		.byte	0
 5942 1526 29       		.uleb128 0x29
 5943 1527 ED1B0000 		.4byte	0x1bed
 5944 152b 6C030000 		.4byte	.LBI50
 5945 152f 02       		.byte	.LVU433
 5946 1530 6C030000 		.4byte	.LBB50
 5947 1534 70030000 		.4byte	.LBE50
 5948 1538 01       		.byte	0x1
 5949 1539 4E04     		.2byte	0x44e
 5950 153b 02       		.byte	0x2
 5951 153c 27       		.uleb128 0x27
 5952 153d FB1B0000 		.4byte	0x1bfb
 5953 1541 5D120000 		.4byte	.LLST64
 5954 1545 5B120000 		.4byte	.LVUS64
 5955 1549 00       		.byte	0
 5956 154a 00       		.byte	0
 5957 154b 21       		.uleb128 0x21
 5958 154c 01       		.byte	0x1
 5959 154d 7A030000 		.4byte	.LASF106
 5960 1551 01       		.byte	0x1
 5961 1552 EB02     		.2byte	0x2eb
 5962 1554 0C       		.byte	0xc
 5963 1555 01       		.byte	0x1
 5964 1556 EF000000 		.4byte	0xef
 5965 155a C8010000 		.4byte	.LFB13
 5966 155e CC020000 		.4byte	.LFE13
 5967 1562 70120000 		.4byte	.LLST36
 5968 1566 01       		.byte	0x1
 5969 1567 6D170000 		.4byte	0x176d
 5970 156b 11       		.uleb128 0x11
 5971 156c 21020000 		.4byte	.LASF61
 5972 1570 01       		.byte	0x1
 5973 1571 EB02     		.2byte	0x2eb
 5974 1573 2D       		.byte	0x2d
 5975 1574 7D020000 		.4byte	0x27d
 5976 1578 B8120000 		.4byte	.LLST37
 5977 157c B4120000 		.4byte	.LVUS37
 5978 1580 11       		.uleb128 0x11
 5979 1581 A0070000 		.4byte	.LASF76
 5980 1585 01       		.byte	0x1
 5981 1586 EB02     		.2byte	0x2eb
ARM GAS  /tmp/ccjtHtwZ.s 			page 175


 5982 1588 48       		.byte	0x48
 5983 1589 B6000000 		.4byte	0xb6
 5984 158d DA120000 		.4byte	.LLST38
 5985 1591 D6120000 		.4byte	.LVUS38
 5986 1595 11       		.uleb128 0x11
 5987 1596 39090000 		.4byte	.LASF65
 5988 159a 01       		.byte	0x1
 5989 159b EB02     		.2byte	0x2eb
 5990 159d 62       		.byte	0x62
 5991 159e 16010000 		.4byte	0x116
 5992 15a2 FA120000 		.4byte	.LLST39
 5993 15a6 F8120000 		.4byte	.LVUS39
 5994 15aa 11       		.uleb128 0x11
 5995 15ab 95010000 		.4byte	.LASF105
 5996 15af 01       		.byte	0x1
 5997 15b0 EB02     		.2byte	0x2eb
 5998 15b2 81       		.byte	0x81
 5999 15b3 FB000000 		.4byte	0xfb
 6000 15b7 11130000 		.4byte	.LLST40
 6001 15bb 0D130000 		.4byte	.LVUS40
 6002 15bf 12       		.uleb128 0x12
 6003 15c0 07030000 		.4byte	.LASF96
 6004 15c4 01       		.byte	0x1
 6005 15c5 ED02     		.2byte	0x2ed
 6006 15c7 0C       		.byte	0xc
 6007 15c8 EF000000 		.4byte	0xef
 6008 15cc 39130000 		.4byte	.LLST41
 6009 15d0 2F130000 		.4byte	.LVUS41
 6010 15d4 12       		.uleb128 0x12
 6011 15d5 00020000 		.4byte	.LASF107
 6012 15d9 01       		.byte	0x1
 6013 15da ED02     		.2byte	0x2ed
 6014 15dc 25       		.byte	0x25
 6015 15dd EF000000 		.4byte	0xef
 6016 15e1 7C130000 		.4byte	.LLST42
 6017 15e5 7A130000 		.4byte	.LVUS42
 6018 15e9 2A       		.uleb128 0x2a
 6019 15ea 1C030000 		.4byte	.LASF98
 6020 15ee 01       		.byte	0x1
 6021 15ef EE02     		.2byte	0x2ee
 6022 15f1 0B       		.byte	0xb
 6023 15f2 71020000 		.4byte	0x271
 6024 15f6 02       		.byte	0x2
 6025 15f7 91       		.byte	0x91
 6026 15f8 58       		.sleb128 -40
 6027 15f9 12       		.uleb128 0x12
 6028 15fa 0E080000 		.4byte	.LASF67
 6029 15fe 01       		.byte	0x1
 6030 15ff EF02     		.2byte	0x2ef
 6031 1601 11       		.byte	0x11
 6032 1602 C4040000 		.4byte	0x4c4
 6033 1606 93130000 		.4byte	.LLST43
 6034 160a 8F130000 		.4byte	.LVUS43
 6035 160e 22       		.uleb128 0x22
 6036 160f 28050000 		.4byte	0x528
 6037 1613 6E020000 		.4byte	.LBI37
 6038 1617 01       		.byte	.LVU310
ARM GAS  /tmp/ccjtHtwZ.s 			page 176


 6039 1618 50000000 		.4byte	.Ldebug_ranges0+0x50
 6040 161c 01       		.byte	0x1
 6041 161d 9303     		.2byte	0x393
 6042 161f 08       		.byte	0x8
 6043 1620 60160000 		.4byte	0x1660
 6044 1624 27       		.uleb128 0x27
 6045 1625 3B050000 		.4byte	0x53b
 6046 1629 B5130000 		.4byte	.LLST44
 6047 162d B1130000 		.4byte	.LVUS44
 6048 1631 23       		.uleb128 0x23
 6049 1632 50000000 		.4byte	.Ldebug_ranges0+0x50
 6050 1636 24       		.uleb128 0x24
 6051 1637 48050000 		.4byte	0x548
 6052 163b D7130000 		.4byte	.LLST45
 6053 163f D3130000 		.4byte	.LVUS45
 6054 1643 13       		.uleb128 0x13
 6055 1644 72020000 		.4byte	.LVL83
 6056 1648 331C0000 		.4byte	0x1c33
 6057 164c 13       		.uleb128 0x13
 6058 164d 7E020000 		.4byte	.LVL85
 6059 1651 411C0000 		.4byte	0x1c41
 6060 1655 13       		.uleb128 0x13
 6061 1656 9E020000 		.4byte	.LVL90
 6062 165a 411C0000 		.4byte	0x1c41
 6063 165e 00       		.byte	0
 6064 165f 00       		.byte	0
 6065 1660 13       		.uleb128 0x13
 6066 1661 E0010000 		.4byte	.LVL67
 6067 1665 331C0000 		.4byte	0x1c33
 6068 1669 14       		.uleb128 0x14
 6069 166a F6010000 		.4byte	.LVL68
 6070 166e 42070000 		.4byte	0x742
 6071 1672 89160000 		.4byte	0x1689
 6072 1676 15       		.uleb128 0x15
 6073 1677 01       		.byte	0x1
 6074 1678 50       		.byte	0x50
 6075 1679 02       		.byte	0x2
 6076 167a 74       		.byte	0x74
 6077 167b 00       		.sleb128 0
 6078 167c 15       		.uleb128 0x15
 6079 167d 01       		.byte	0x1
 6080 167e 51       		.byte	0x51
 6081 167f 02       		.byte	0x2
 6082 1680 77       		.byte	0x77
 6083 1681 00       		.sleb128 0
 6084 1682 15       		.uleb128 0x15
 6085 1683 01       		.byte	0x1
 6086 1684 52       		.byte	0x52
 6087 1685 02       		.byte	0x2
 6088 1686 76       		.byte	0x76
 6089 1687 00       		.sleb128 0
 6090 1688 00       		.byte	0
 6091 1689 14       		.uleb128 0x14
 6092 168a 02020000 		.4byte	.LVL70
 6093 168e 5E1C0000 		.4byte	0x1c5e
 6094 1692 9D160000 		.4byte	0x169d
 6095 1696 15       		.uleb128 0x15
ARM GAS  /tmp/ccjtHtwZ.s 			page 177


 6096 1697 01       		.byte	0x1
 6097 1698 50       		.byte	0x50
 6098 1699 02       		.byte	0x2
 6099 169a 74       		.byte	0x74
 6100 169b 24       		.sleb128 36
 6101 169c 00       		.byte	0
 6102 169d 13       		.uleb128 0x13
 6103 169e 1C020000 		.4byte	.LVL71
 6104 16a2 411C0000 		.4byte	0x1c41
 6105 16a6 13       		.uleb128 0x13
 6106 16a7 2C020000 		.4byte	.LVL74
 6107 16ab 411C0000 		.4byte	0x1c41
 6108 16af 14       		.uleb128 0x14
 6109 16b0 3C020000 		.4byte	.LVL76
 6110 16b4 A61C0000 		.4byte	0x1ca6
 6111 16b8 C3160000 		.4byte	0x16c3
 6112 16bc 15       		.uleb128 0x15
 6113 16bd 01       		.byte	0x1
 6114 16be 50       		.byte	0x50
 6115 16bf 02       		.byte	0x2
 6116 16c0 91       		.byte	0x91
 6117 16c1 58       		.sleb128 -40
 6118 16c2 00       		.byte	0
 6119 16c3 13       		.uleb128 0x13
 6120 16c4 40020000 		.4byte	.LVL77
 6121 16c8 411C0000 		.4byte	0x1c41
 6122 16cc 13       		.uleb128 0x13
 6123 16cd 44020000 		.4byte	.LVL78
 6124 16d1 B51C0000 		.4byte	0x1cb5
 6125 16d5 13       		.uleb128 0x13
 6126 16d6 48020000 		.4byte	.LVL79
 6127 16da 331C0000 		.4byte	0x1c33
 6128 16de 13       		.uleb128 0x13
 6129 16df 64020000 		.4byte	.LVL80
 6130 16e3 411C0000 		.4byte	0x1c41
 6131 16e7 14       		.uleb128 0x14
 6132 16e8 6C020000 		.4byte	.LVL81
 6133 16ec C41C0000 		.4byte	0x1cc4
 6134 16f0 01170000 		.4byte	0x1701
 6135 16f4 15       		.uleb128 0x15
 6136 16f5 01       		.byte	0x1
 6137 16f6 50       		.byte	0x50
 6138 16f7 02       		.byte	0x2
 6139 16f8 91       		.byte	0x91
 6140 16f9 58       		.sleb128 -40
 6141 16fa 15       		.uleb128 0x15
 6142 16fb 01       		.byte	0x1
 6143 16fc 51       		.byte	0x51
 6144 16fd 02       		.byte	0x2
 6145 16fe 91       		.byte	0x91
 6146 16ff 54       		.sleb128 -44
 6147 1700 00       		.byte	0
 6148 1701 14       		.uleb128 0x14
 6149 1702 88020000 		.4byte	.LVL86
 6150 1706 D31C0000 		.4byte	0x1cd3
 6151 170a 15170000 		.4byte	0x1715
 6152 170e 15       		.uleb128 0x15
ARM GAS  /tmp/ccjtHtwZ.s 			page 178


 6153 170f 01       		.byte	0x1
 6154 1710 50       		.byte	0x50
 6155 1711 02       		.byte	0x2
 6156 1712 74       		.byte	0x74
 6157 1713 10       		.sleb128 16
 6158 1714 00       		.byte	0
 6159 1715 14       		.uleb128 0x14
 6160 1716 8E020000 		.4byte	.LVL87
 6161 171a 1C060000 		.4byte	0x61c
 6162 171e 29170000 		.4byte	0x1729
 6163 1722 15       		.uleb128 0x15
 6164 1723 01       		.byte	0x1
 6165 1724 50       		.byte	0x50
 6166 1725 02       		.byte	0x2
 6167 1726 74       		.byte	0x74
 6168 1727 00       		.sleb128 0
 6169 1728 00       		.byte	0
 6170 1729 13       		.uleb128 0x13
 6171 172a 92020000 		.4byte	.LVL88
 6172 172e E21C0000 		.4byte	0x1ce2
 6173 1732 14       		.uleb128 0x14
 6174 1733 A4020000 		.4byte	.LVL91
 6175 1737 1C060000 		.4byte	0x61c
 6176 173b 46170000 		.4byte	0x1746
 6177 173f 15       		.uleb128 0x15
 6178 1740 01       		.byte	0x1
 6179 1741 50       		.byte	0x50
 6180 1742 02       		.byte	0x2
 6181 1743 74       		.byte	0x74
 6182 1744 00       		.sleb128 0
 6183 1745 00       		.byte	0
 6184 1746 13       		.uleb128 0x13
 6185 1747 A8020000 		.4byte	.LVL92
 6186 174b E21C0000 		.4byte	0x1ce2
 6187 174f 14       		.uleb128 0x14
 6188 1750 C6020000 		.4byte	.LVL93
 6189 1754 1C060000 		.4byte	0x61c
 6190 1758 63170000 		.4byte	0x1763
 6191 175c 15       		.uleb128 0x15
 6192 175d 01       		.byte	0x1
 6193 175e 50       		.byte	0x50
 6194 175f 02       		.byte	0x2
 6195 1760 74       		.byte	0x74
 6196 1761 00       		.sleb128 0
 6197 1762 00       		.byte	0
 6198 1763 13       		.uleb128 0x13
 6199 1764 CA020000 		.4byte	.LVL94
 6200 1768 E21C0000 		.4byte	0x1ce2
 6201 176c 00       		.byte	0
 6202 176d 21       		.uleb128 0x21
 6203 176e 01       		.byte	0x1
 6204 176f 290A0000 		.4byte	.LASF108
 6205 1773 01       		.byte	0x1
 6206 1774 D102     		.2byte	0x2d1
 6207 1776 10       		.byte	0x10
 6208 1777 01       		.byte	0x1
 6209 1778 7D020000 		.4byte	0x27d
ARM GAS  /tmp/ccjtHtwZ.s 			page 179


 6210 177c B6010000 		.4byte	.LFB12
 6211 1780 C8010000 		.4byte	.LFE12
 6212 1784 F7130000 		.4byte	.LLST32
 6213 1788 01       		.byte	0x1
 6214 1789 E8170000 		.4byte	0x17e8
 6215 178d 11       		.uleb128 0x11
 6216 178e 75050000 		.4byte	.LASF109
 6217 1792 01       		.byte	0x1
 6218 1793 D102     		.2byte	0x2d1
 6219 1795 41       		.byte	0x41
 6220 1796 11010000 		.4byte	0x111
 6221 179a 1B140000 		.4byte	.LLST33
 6222 179e 17140000 		.4byte	.LVUS33
 6223 17a2 11       		.uleb128 0x11
 6224 17a3 CB030000 		.4byte	.LASF110
 6225 17a7 01       		.byte	0x1
 6226 17a8 D102     		.2byte	0x2d1
 6227 17aa 5F       		.byte	0x5f
 6228 17ab 11010000 		.4byte	0x111
 6229 17af 40140000 		.4byte	.LLST34
 6230 17b3 3C140000 		.4byte	.LVUS34
 6231 17b7 12       		.uleb128 0x12
 6232 17b8 25030000 		.4byte	.LASF111
 6233 17bc 01       		.byte	0x1
 6234 17bd D302     		.2byte	0x2d3
 6235 17bf 10       		.byte	0x10
 6236 17c0 7D020000 		.4byte	0x27d
 6237 17c4 60140000 		.4byte	.LLST35
 6238 17c8 5E140000 		.4byte	.LVUS35
 6239 17cc 28       		.uleb128 0x28
 6240 17cd C2010000 		.4byte	.LVL63
 6241 17d1 251A0000 		.4byte	0x1a25
 6242 17d5 15       		.uleb128 0x15
 6243 17d6 01       		.byte	0x1
 6244 17d7 50       		.byte	0x50
 6245 17d8 03       		.byte	0x3
 6246 17d9 F3       		.byte	0xf3
 6247 17da 01       		.uleb128 0x1
 6248 17db 50       		.byte	0x50
 6249 17dc 15       		.uleb128 0x15
 6250 17dd 01       		.byte	0x1
 6251 17de 51       		.byte	0x51
 6252 17df 01       		.byte	0x1
 6253 17e0 30       		.byte	0x30
 6254 17e1 15       		.uleb128 0x15
 6255 17e2 01       		.byte	0x1
 6256 17e3 52       		.byte	0x52
 6257 17e4 01       		.byte	0x1
 6258 17e5 32       		.byte	0x32
 6259 17e6 00       		.byte	0
 6260 17e7 00       		.byte	0
 6261 17e8 21       		.uleb128 0x21
 6262 17e9 01       		.byte	0x1
 6263 17ea 81060000 		.4byte	.LASF112
 6264 17ee 01       		.byte	0x1
 6265 17ef 8B02     		.2byte	0x28b
 6266 17f1 0D       		.byte	0xd
ARM GAS  /tmp/ccjtHtwZ.s 			page 180


 6267 17f2 01       		.byte	0x1
 6268 17f3 EF000000 		.4byte	0xef
 6269 17f7 F0050000 		.4byte	.LFB11
 6270 17fb 1E060000 		.4byte	.LFE11
 6271 17ff 73140000 		.4byte	.LLST92
 6272 1803 01       		.byte	0x1
 6273 1804 7C180000 		.4byte	0x187c
 6274 1808 11       		.uleb128 0x11
 6275 1809 39050000 		.4byte	.LASF113
 6276 180d 01       		.byte	0x1
 6277 180e 8B02     		.2byte	0x28b
 6278 1810 35       		.byte	0x35
 6279 1811 7D020000 		.4byte	0x27d
 6280 1815 97140000 		.4byte	.LLST93
 6281 1819 93140000 		.4byte	.LVUS93
 6282 181d 11       		.uleb128 0x11
 6283 181e 39090000 		.4byte	.LASF65
 6284 1822 01       		.byte	0x1
 6285 1823 8B02     		.2byte	0x28b
 6286 1825 48       		.byte	0x48
 6287 1826 16010000 		.4byte	0x116
 6288 182a B9140000 		.4byte	.LLST94
 6289 182e B5140000 		.4byte	.LVUS94
 6290 1832 12       		.uleb128 0x12
 6291 1833 16080000 		.4byte	.LASF68
 6292 1837 01       		.byte	0x1
 6293 1838 8D02     		.2byte	0x28d
 6294 183a 0D       		.byte	0xd
 6295 183b EF000000 		.4byte	0xef
 6296 183f D9140000 		.4byte	.LLST95
 6297 1843 D7140000 		.4byte	.LVUS95
 6298 1847 12       		.uleb128 0x12
 6299 1848 A8000000 		.4byte	.LASF114
 6300 184c 01       		.byte	0x1
 6301 184d 8E02     		.2byte	0x28e
 6302 184f 12       		.byte	0x12
 6303 1850 C4040000 		.4byte	0x4c4
 6304 1854 F0140000 		.4byte	.LLST96
 6305 1858 EC140000 		.4byte	.LVUS96
 6306 185c 13       		.uleb128 0x13
 6307 185d FC050000 		.4byte	.LVL204
 6308 1861 1E1D0000 		.4byte	0x1d1e
 6309 1865 28       		.uleb128 0x28
 6310 1866 12060000 		.4byte	.LVL207
 6311 186a A10E0000 		.4byte	0xea1
 6312 186e 15       		.uleb128 0x15
 6313 186f 01       		.byte	0x1
 6314 1870 50       		.byte	0x50
 6315 1871 02       		.byte	0x2
 6316 1872 74       		.byte	0x74
 6317 1873 00       		.sleb128 0
 6318 1874 15       		.uleb128 0x15
 6319 1875 01       		.byte	0x1
 6320 1876 51       		.byte	0x51
 6321 1877 02       		.byte	0x2
 6322 1878 75       		.byte	0x75
 6323 1879 00       		.sleb128 0
ARM GAS  /tmp/ccjtHtwZ.s 			page 181


 6324 187a 00       		.byte	0
 6325 187b 00       		.byte	0
 6326 187c 21       		.uleb128 0x21
 6327 187d 01       		.byte	0x1
 6328 187e 6F090000 		.4byte	.LASF115
 6329 1882 01       		.byte	0x1
 6330 1883 5402     		.2byte	0x254
 6331 1885 0D       		.byte	0xd
 6332 1886 01       		.byte	0x1
 6333 1887 EF000000 		.4byte	0xef
 6334 188b F0020000 		.4byte	.LFB10
 6335 188f 18030000 		.4byte	.LFE10
 6336 1893 0E150000 		.4byte	.LLST50
 6337 1897 01       		.byte	0x1
 6338 1898 F5180000 		.4byte	0x18f5
 6339 189c 11       		.uleb128 0x11
 6340 189d 39050000 		.4byte	.LASF113
 6341 18a1 01       		.byte	0x1
 6342 18a2 5402     		.2byte	0x254
 6343 18a4 35       		.byte	0x35
 6344 18a5 7D020000 		.4byte	0x27d
 6345 18a9 32150000 		.4byte	.LLST51
 6346 18ad 2E150000 		.4byte	.LVUS51
 6347 18b1 12       		.uleb128 0x12
 6348 18b2 16080000 		.4byte	.LASF68
 6349 18b6 01       		.byte	0x1
 6350 18b7 5602     		.2byte	0x256
 6351 18b9 0D       		.byte	0xd
 6352 18ba EF000000 		.4byte	0xef
 6353 18be 52150000 		.4byte	.LLST52
 6354 18c2 50150000 		.4byte	.LVUS52
 6355 18c6 12       		.uleb128 0x12
 6356 18c7 A8000000 		.4byte	.LASF114
 6357 18cb 01       		.byte	0x1
 6358 18cc 5702     		.2byte	0x257
 6359 18ce 12       		.byte	0x12
 6360 18cf C4040000 		.4byte	0x4c4
 6361 18d3 6A150000 		.4byte	.LLST53
 6362 18d7 66150000 		.4byte	.LVUS53
 6363 18db 13       		.uleb128 0x13
 6364 18dc FA020000 		.4byte	.LVL100
 6365 18e0 1E1D0000 		.4byte	0x1d1e
 6366 18e4 28       		.uleb128 0x28
 6367 18e5 10030000 		.4byte	.LVL101
 6368 18e9 4B150000 		.4byte	0x154b
 6369 18ed 15       		.uleb128 0x15
 6370 18ee 01       		.byte	0x1
 6371 18ef 50       		.byte	0x50
 6372 18f0 02       		.byte	0x2
 6373 18f1 74       		.byte	0x74
 6374 18f2 00       		.sleb128 0
 6375 18f3 00       		.byte	0
 6376 18f4 00       		.byte	0
 6377 18f5 21       		.uleb128 0x21
 6378 18f6 01       		.byte	0x1
 6379 18f7 D8040000 		.4byte	.LASF116
 6380 18fb 01       		.byte	0x1
ARM GAS  /tmp/ccjtHtwZ.s 			page 182


 6381 18fc F701     		.2byte	0x1f7
 6382 18fe 10       		.byte	0x10
 6383 18ff 01       		.byte	0x1
 6384 1900 7D020000 		.4byte	0x27d
 6385 1904 CC020000 		.4byte	.LFB9
 6386 1908 F0020000 		.4byte	.LFE9
 6387 190c 88150000 		.4byte	.LLST46
 6388 1910 01       		.byte	0x1
 6389 1911 B7190000 		.4byte	0x19b7
 6390 1915 11       		.uleb128 0x11
 6391 1916 FA050000 		.4byte	.LASF52
 6392 191a 01       		.byte	0x1
 6393 191b F701     		.2byte	0x1f7
 6394 191d 31       		.byte	0x31
 6395 191e DE000000 		.4byte	0xde
 6396 1922 AC150000 		.4byte	.LLST47
 6397 1926 A8150000 		.4byte	.LVUS47
 6398 192a 12       		.uleb128 0x12
 6399 192b 6B050000 		.4byte	.LASF117
 6400 192f 01       		.byte	0x1
 6401 1930 F901     		.2byte	0x1f9
 6402 1932 10       		.byte	0x10
 6403 1933 7D020000 		.4byte	0x27d
 6404 1937 D1150000 		.4byte	.LLST48
 6405 193b CD150000 		.4byte	.LVUS48
 6406 193f 2C       		.uleb128 0x2c
 6407 1940 F2030000 		.4byte	.LASF118
 6408 1944 01       		.byte	0x1
 6409 1945 FA01     		.2byte	0x1fa
 6410 1947 14       		.byte	0x14
 6411 1948 11010000 		.4byte	0x111
 6412 194c 01       		.byte	0x1
 6413 194d 2C       		.uleb128 0x2c
 6414 194e F4010000 		.4byte	.LASF119
 6415 1952 01       		.byte	0x1
 6416 1953 FA01     		.2byte	0x1fa
 6417 1955 37       		.byte	0x37
 6418 1956 11010000 		.4byte	0x111
 6419 195a 00       		.byte	0
 6420 195b 26       		.uleb128 0x26
 6421 195c B7190000 		.4byte	0x19b7
 6422 1960 D8020000 		.4byte	.LBI43
 6423 1964 01       		.byte	.LVU347
 6424 1965 D8020000 		.4byte	.LBB43
 6425 1969 EC020000 		.4byte	.LBE43
 6426 196d 01       		.byte	0x1
 6427 196e FD01     		.2byte	0x1fd
 6428 1970 03       		.byte	0x3
 6429 1971 A2190000 		.4byte	0x19a2
 6430 1975 27       		.uleb128 0x27
 6431 1976 C6190000 		.4byte	0x19c6
 6432 197a F3150000 		.4byte	.LLST49
 6433 197e EF150000 		.4byte	.LVUS49
 6434 1982 28       		.uleb128 0x28
 6435 1983 EC020000 		.4byte	.LVL98
 6436 1987 4B150000 		.4byte	0x154b
 6437 198b 15       		.uleb128 0x15
ARM GAS  /tmp/ccjtHtwZ.s 			page 183


 6438 198c 01       		.byte	0x1
 6439 198d 50       		.byte	0x50
 6440 198e 02       		.byte	0x2
 6441 198f 74       		.byte	0x74
 6442 1990 00       		.sleb128 0
 6443 1991 15       		.uleb128 0x15
 6444 1992 01       		.byte	0x1
 6445 1993 51       		.byte	0x51
 6446 1994 01       		.byte	0x1
 6447 1995 30       		.byte	0x30
 6448 1996 15       		.uleb128 0x15
 6449 1997 01       		.byte	0x1
 6450 1998 52       		.byte	0x52
 6451 1999 01       		.byte	0x1
 6452 199a 30       		.byte	0x30
 6453 199b 15       		.uleb128 0x15
 6454 199c 01       		.byte	0x1
 6455 199d 53       		.byte	0x53
 6456 199e 01       		.byte	0x1
 6457 199f 30       		.byte	0x30
 6458 19a0 00       		.byte	0
 6459 19a1 00       		.byte	0
 6460 19a2 28       		.uleb128 0x28
 6461 19a3 D8020000 		.4byte	.LVL97
 6462 19a7 251A0000 		.4byte	0x1a25
 6463 19ab 15       		.uleb128 0x15
 6464 19ac 01       		.byte	0x1
 6465 19ad 50       		.byte	0x50
 6466 19ae 01       		.byte	0x1
 6467 19af 31       		.byte	0x31
 6468 19b0 15       		.uleb128 0x15
 6469 19b1 01       		.byte	0x1
 6470 19b2 51       		.byte	0x51
 6471 19b3 01       		.byte	0x1
 6472 19b4 30       		.byte	0x30
 6473 19b5 00       		.byte	0
 6474 19b6 00       		.byte	0
 6475 19b7 2D       		.uleb128 0x2d
 6476 19b8 0B050000 		.4byte	.LASF121
 6477 19bc 01       		.byte	0x1
 6478 19bd D901     		.2byte	0x1d9
 6479 19bf 0E       		.byte	0xe
 6480 19c0 01       		.byte	0x1
 6481 19c1 01       		.byte	0x1
 6482 19c2 D4190000 		.4byte	0x19d4
 6483 19c6 19       		.uleb128 0x19
 6484 19c7 28020000 		.4byte	.LASF120
 6485 19cb 01       		.byte	0x1
 6486 19cc D901     		.2byte	0x1d9
 6487 19ce 2B       		.byte	0x2b
 6488 19cf BE040000 		.4byte	0x4be
 6489 19d3 00       		.byte	0
 6490 19d4 2D       		.uleb128 0x2d
 6491 19d5 CE010000 		.4byte	.LASF122
 6492 19d9 01       		.byte	0x1
 6493 19da AD01     		.2byte	0x1ad
 6494 19dc 0D       		.byte	0xd
ARM GAS  /tmp/ccjtHtwZ.s 			page 184


 6495 19dd 01       		.byte	0x1
 6496 19de 01       		.byte	0x1
 6497 19df 251A0000 		.4byte	0x1a25
 6498 19e3 19       		.uleb128 0x19
 6499 19e4 52060000 		.4byte	.LASF123
 6500 19e8 01       		.byte	0x1
 6501 19e9 AD01     		.2byte	0x1ad
 6502 19eb 36       		.byte	0x36
 6503 19ec 11010000 		.4byte	0x111
 6504 19f0 19       		.uleb128 0x19
 6505 19f1 C0030000 		.4byte	.LASF48
 6506 19f5 01       		.byte	0x1
 6507 19f6 AD01     		.2byte	0x1ad
 6508 19f8 57       		.byte	0x57
 6509 19f9 11010000 		.4byte	0x111
 6510 19fd 19       		.uleb128 0x19
 6511 19fe 29050000 		.4byte	.LASF124
 6512 1a02 01       		.byte	0x1
 6513 1a03 AD01     		.2byte	0x1ad
 6514 1a05 6C       		.byte	0x6c
 6515 1a06 22010000 		.4byte	0x122
 6516 1a0a 19       		.uleb128 0x19
 6517 1a0b FA050000 		.4byte	.LASF52
 6518 1a0f 01       		.byte	0x1
 6519 1a10 AD01     		.2byte	0x1ad
 6520 1a12 8B       		.byte	0x8b
 6521 1a13 DE000000 		.4byte	0xde
 6522 1a17 19       		.uleb128 0x19
 6523 1a18 28020000 		.4byte	.LASF120
 6524 1a1c 01       		.byte	0x1
 6525 1a1d AD01     		.2byte	0x1ad
 6526 1a1f A1       		.byte	0xa1
 6527 1a20 BE040000 		.4byte	0x4be
 6528 1a24 00       		.byte	0
 6529 1a25 21       		.uleb128 0x21
 6530 1a26 01       		.byte	0x1
 6531 1a27 C4040000 		.4byte	.LASF125
 6532 1a2b 01       		.byte	0x1
 6533 1a2c 7001     		.2byte	0x170
 6534 1a2e 10       		.byte	0x10
 6535 1a2f 01       		.byte	0x1
 6536 1a30 7D020000 		.4byte	0x27d
 6537 1a34 82010000 		.4byte	.LFB6
 6538 1a38 B6010000 		.4byte	.LFE6
 6539 1a3c 11160000 		.4byte	.LLST20
 6540 1a40 01       		.byte	0x1
 6541 1a41 461B0000 		.4byte	0x1b46
 6542 1a45 11       		.uleb128 0x11
 6543 1a46 52060000 		.4byte	.LASF123
 6544 1a4a 01       		.byte	0x1
 6545 1a4b 7001     		.2byte	0x170
 6546 1a4d 37       		.byte	0x37
 6547 1a4e 11010000 		.4byte	0x111
 6548 1a52 35160000 		.4byte	.LLST21
 6549 1a56 31160000 		.4byte	.LVUS21
 6550 1a5a 11       		.uleb128 0x11
 6551 1a5b C0030000 		.4byte	.LASF48
ARM GAS  /tmp/ccjtHtwZ.s 			page 185


 6552 1a5f 01       		.byte	0x1
 6553 1a60 7001     		.2byte	0x170
 6554 1a62 58       		.byte	0x58
 6555 1a63 11010000 		.4byte	0x111
 6556 1a67 57160000 		.4byte	.LLST22
 6557 1a6b 53160000 		.4byte	.LVUS22
 6558 1a6f 11       		.uleb128 0x11
 6559 1a70 FA050000 		.4byte	.LASF52
 6560 1a74 01       		.byte	0x1
 6561 1a75 7001     		.2byte	0x170
 6562 1a77 72       		.byte	0x72
 6563 1a78 DE000000 		.4byte	0xde
 6564 1a7c 79160000 		.4byte	.LLST23
 6565 1a80 75160000 		.4byte	.LVUS23
 6566 1a84 12       		.uleb128 0x12
 6567 1a85 28020000 		.4byte	.LASF120
 6568 1a89 01       		.byte	0x1
 6569 1a8a 7201     		.2byte	0x172
 6570 1a8c 0B       		.byte	0xb
 6571 1a8d BE040000 		.4byte	0x4be
 6572 1a91 A0160000 		.4byte	.LLST24
 6573 1a95 9A160000 		.4byte	.LVUS24
 6574 1a99 12       		.uleb128 0x12
 6575 1a9a 7F070000 		.4byte	.LASF126
 6576 1a9e 01       		.byte	0x1
 6577 1a9f 7301     		.2byte	0x173
 6578 1aa1 09       		.byte	0x9
 6579 1aa2 25000000 		.4byte	0x25
 6580 1aa6 D1160000 		.4byte	.LLST25
 6581 1aaa C9160000 		.4byte	.LVUS25
 6582 1aae 12       		.uleb128 0x12
 6583 1aaf 29050000 		.4byte	.LASF124
 6584 1ab3 01       		.byte	0x1
 6585 1ab4 7401     		.2byte	0x174
 6586 1ab6 0B       		.byte	0xb
 6587 1ab7 22010000 		.4byte	0x122
 6588 1abb 1A170000 		.4byte	.LLST26
 6589 1abf 12170000 		.4byte	.LVUS26
 6590 1ac3 22       		.uleb128 0x22
 6591 1ac4 D4190000 		.4byte	0x19d4
 6592 1ac8 96010000 		.4byte	.LBI29
 6593 1acc 03       		.byte	.LVU206
 6594 1acd 30000000 		.4byte	.Ldebug_ranges0+0x30
 6595 1ad1 01       		.byte	0x1
 6596 1ad2 9F01     		.2byte	0x19f
 6597 1ad4 04       		.byte	0x4
 6598 1ad5 301B0000 		.4byte	0x1b30
 6599 1ad9 27       		.uleb128 0x27
 6600 1ada 171A0000 		.4byte	0x1a17
 6601 1ade 58170000 		.4byte	.LLST27
 6602 1ae2 54170000 		.4byte	.LVUS27
 6603 1ae6 27       		.uleb128 0x27
 6604 1ae7 0A1A0000 		.4byte	0x1a0a
 6605 1aeb 7A170000 		.4byte	.LLST28
 6606 1aef 76170000 		.4byte	.LVUS28
 6607 1af3 27       		.uleb128 0x27
 6608 1af4 FD190000 		.4byte	0x19fd
ARM GAS  /tmp/ccjtHtwZ.s 			page 186


 6609 1af8 9E170000 		.4byte	.LLST29
 6610 1afc 98170000 		.4byte	.LVUS29
 6611 1b00 27       		.uleb128 0x27
 6612 1b01 F0190000 		.4byte	0x19f0
 6613 1b05 D1170000 		.4byte	.LLST30
 6614 1b09 CD170000 		.4byte	.LVUS30
 6615 1b0d 27       		.uleb128 0x27
 6616 1b0e E3190000 		.4byte	0x19e3
 6617 1b12 F3170000 		.4byte	.LLST31
 6618 1b16 EF170000 		.4byte	.LVUS31
 6619 1b1a 28       		.uleb128 0x28
 6620 1b1b AA010000 		.4byte	.LVL59
 6621 1b1f 461B0000 		.4byte	0x1b46
 6622 1b23 15       		.uleb128 0x15
 6623 1b24 01       		.byte	0x1
 6624 1b25 50       		.byte	0x50
 6625 1b26 02       		.byte	0x2
 6626 1b27 74       		.byte	0x74
 6627 1b28 00       		.sleb128 0
 6628 1b29 15       		.uleb128 0x15
 6629 1b2a 01       		.byte	0x1
 6630 1b2b 51       		.byte	0x51
 6631 1b2c 01       		.byte	0x1
 6632 1b2d 31       		.byte	0x31
 6633 1b2e 00       		.byte	0
 6634 1b2f 00       		.byte	0
 6635 1b30 28       		.uleb128 0x28
 6636 1b31 92010000 		.4byte	.LVL55
 6637 1b35 2D1D0000 		.4byte	0x1d2d
 6638 1b39 15       		.uleb128 0x15
 6639 1b3a 01       		.byte	0x1
 6640 1b3b 50       		.byte	0x50
 6641 1b3c 07       		.byte	0x7
 6642 1b3d 75       		.byte	0x75
 6643 1b3e 00       		.sleb128 0
 6644 1b3f 76       		.byte	0x76
 6645 1b40 00       		.sleb128 0
 6646 1b41 1E       		.byte	0x1e
 6647 1b42 23       		.byte	0x23
 6648 1b43 50       		.uleb128 0x50
 6649 1b44 00       		.byte	0
 6650 1b45 00       		.byte	0
 6651 1b46 2E       		.uleb128 0x2e
 6652 1b47 01       		.byte	0x1
 6653 1b48 97090000 		.4byte	.LASF127
 6654 1b4c 01       		.byte	0x1
 6655 1b4d FF       		.byte	0xff
 6656 1b4e 0C       		.byte	0xc
 6657 1b4f 01       		.byte	0x1
 6658 1b50 EF000000 		.4byte	0xef
 6659 1b54 18010000 		.4byte	.LFB5
 6660 1b58 82010000 		.4byte	.LFE5
 6661 1b5c 11180000 		.4byte	.LLST16
 6662 1b60 01       		.byte	0x1
 6663 1b61 ED1B0000 		.4byte	0x1bed
 6664 1b65 2F       		.uleb128 0x2f
 6665 1b66 21020000 		.4byte	.LASF61
ARM GAS  /tmp/ccjtHtwZ.s 			page 187


 6666 1b6a 01       		.byte	0x1
 6667 1b6b FF       		.byte	0xff
 6668 1b6c 2E       		.byte	0x2e
 6669 1b6d 7D020000 		.4byte	0x27d
 6670 1b71 35180000 		.4byte	.LLST17
 6671 1b75 31180000 		.4byte	.LVUS17
 6672 1b79 2F       		.uleb128 0x2f
 6673 1b7a 6B050000 		.4byte	.LASF117
 6674 1b7e 01       		.byte	0x1
 6675 1b7f FF       		.byte	0xff
 6676 1b80 41       		.byte	0x41
 6677 1b81 EF000000 		.4byte	0xef
 6678 1b85 57180000 		.4byte	.LLST18
 6679 1b89 53180000 		.4byte	.LVUS18
 6680 1b8d 12       		.uleb128 0x12
 6681 1b8e 0E080000 		.4byte	.LASF67
 6682 1b92 01       		.byte	0x1
 6683 1b93 0101     		.2byte	0x101
 6684 1b95 11       		.byte	0x11
 6685 1b96 C4040000 		.4byte	0x4c4
 6686 1b9a 79180000 		.4byte	.LLST19
 6687 1b9e 75180000 		.4byte	.LVUS19
 6688 1ba2 13       		.uleb128 0x13
 6689 1ba3 22010000 		.4byte	.LVL46
 6690 1ba7 331C0000 		.4byte	0x1c33
 6691 1bab 14       		.uleb128 0x14
 6692 1bac 52010000 		.4byte	.LVL47
 6693 1bb0 5E1C0000 		.4byte	0x1c5e
 6694 1bb4 BF1B0000 		.4byte	0x1bbf
 6695 1bb8 15       		.uleb128 0x15
 6696 1bb9 01       		.byte	0x1
 6697 1bba 50       		.byte	0x50
 6698 1bbb 02       		.byte	0x2
 6699 1bbc 74       		.byte	0x74
 6700 1bbd 10       		.sleb128 16
 6701 1bbe 00       		.byte	0
 6702 1bbf 13       		.uleb128 0x13
 6703 1bc0 6C010000 		.4byte	.LVL48
 6704 1bc4 411C0000 		.4byte	0x1c41
 6705 1bc8 14       		.uleb128 0x14
 6706 1bc9 78010000 		.4byte	.LVL50
 6707 1bcd 3B1D0000 		.4byte	0x1d3b
 6708 1bd1 DC1B0000 		.4byte	0x1bdc
 6709 1bd5 15       		.uleb128 0x15
 6710 1bd6 01       		.byte	0x1
 6711 1bd7 50       		.byte	0x50
 6712 1bd8 02       		.byte	0x2
 6713 1bd9 74       		.byte	0x74
 6714 1bda 10       		.sleb128 16
 6715 1bdb 00       		.byte	0
 6716 1bdc 28       		.uleb128 0x28
 6717 1bdd 80010000 		.4byte	.LVL51
 6718 1be1 3B1D0000 		.4byte	0x1d3b
 6719 1be5 15       		.uleb128 0x15
 6720 1be6 01       		.byte	0x1
 6721 1be7 50       		.byte	0x50
 6722 1be8 02       		.byte	0x2
ARM GAS  /tmp/ccjtHtwZ.s 			page 188


 6723 1be9 74       		.byte	0x74
 6724 1bea 24       		.sleb128 36
 6725 1beb 00       		.byte	0
 6726 1bec 00       		.byte	0
 6727 1bed 30       		.uleb128 0x30
 6728 1bee 57030000 		.4byte	.LASF128
 6729 1bf2 02       		.byte	0x2
 6730 1bf3 E3       		.byte	0xe3
 6731 1bf4 1E       		.byte	0x1e
 6732 1bf5 01       		.byte	0x1
 6733 1bf6 03       		.byte	0x3
 6734 1bf7 081C0000 		.4byte	0x1c08
 6735 1bfb 31       		.uleb128 0x31
 6736 1bfc CB050000 		.4byte	.LASF129
 6737 1c00 02       		.byte	0x2
 6738 1c01 E3       		.byte	0xe3
 6739 1c02 38       		.byte	0x38
 6740 1c03 E3000000 		.4byte	0xe3
 6741 1c07 00       		.byte	0
 6742 1c08 32       		.uleb128 0x32
 6743 1c09 EA040000 		.4byte	.LASF130
 6744 1c0d 02       		.byte	0x2
 6745 1c0e CF       		.byte	0xcf
 6746 1c0f 22       		.byte	0x22
 6747 1c10 01       		.byte	0x1
 6748 1c11 E3000000 		.4byte	0xe3
 6749 1c15 03       		.byte	0x3
 6750 1c16 331C0000 		.4byte	0x1c33
 6751 1c1a 33       		.uleb128 0x33
 6752 1c1b 0F020000 		.4byte	.LASF131
 6753 1c1f 02       		.byte	0x2
 6754 1c20 D1       		.byte	0xd1
 6755 1c21 0A       		.byte	0xa
 6756 1c22 E3000000 		.4byte	0xe3
 6757 1c26 33       		.uleb128 0x33
 6758 1c27 2D040000 		.4byte	.LASF132
 6759 1c2b 02       		.byte	0x2
 6760 1c2c D1       		.byte	0xd1
 6761 1c2d 1D       		.byte	0x1d
 6762 1c2e E3000000 		.4byte	0xe3
 6763 1c32 00       		.byte	0
 6764 1c33 34       		.uleb128 0x34
 6765 1c34 01       		.byte	0x1
 6766 1c35 01       		.byte	0x1
 6767 1c36 69010000 		.4byte	.LASF133
 6768 1c3a 69010000 		.4byte	.LASF133
 6769 1c3e 02       		.byte	0x2
 6770 1c3f 61       		.byte	0x61
 6771 1c40 0D       		.byte	0xd
 6772 1c41 34       		.uleb128 0x34
 6773 1c42 01       		.byte	0x1
 6774 1c43 01       		.byte	0x1
 6775 1c44 10000000 		.4byte	.LASF134
 6776 1c48 10000000 		.4byte	.LASF134
 6777 1c4c 02       		.byte	0x2
 6778 1c4d 62       		.byte	0x62
 6779 1c4e 0D       		.byte	0xd
ARM GAS  /tmp/ccjtHtwZ.s 			page 189


 6780 1c4f 35       		.uleb128 0x35
 6781 1c50 01       		.byte	0x1
 6782 1c51 01       		.byte	0x1
 6783 1c52 9C040000 		.4byte	.LASF135
 6784 1c56 9C040000 		.4byte	.LASF135
 6785 1c5a 07       		.byte	0x7
 6786 1c5b DE08     		.2byte	0x8de
 6787 1c5d 06       		.byte	0x6
 6788 1c5e 35       		.uleb128 0x35
 6789 1c5f 01       		.byte	0x1
 6790 1c60 01       		.byte	0x1
 6791 1c61 100A0000 		.4byte	.LASF136
 6792 1c65 100A0000 		.4byte	.LASF136
 6793 1c69 07       		.byte	0x7
 6794 1c6a F808     		.2byte	0x8f8
 6795 1c6c 0C       		.byte	0xc
 6796 1c6d 35       		.uleb128 0x35
 6797 1c6e 01       		.byte	0x1
 6798 1c6f 01       		.byte	0x1
 6799 1c70 1E080000 		.4byte	.LASF137
 6800 1c74 1E080000 		.4byte	.LASF137
 6801 1c78 07       		.byte	0x7
 6802 1c79 1F09     		.2byte	0x91f
 6803 1c7b 06       		.byte	0x6
 6804 1c7c 36       		.uleb128 0x36
 6805 1c7d 01       		.byte	0x1
 6806 1c7e 01       		.byte	0x1
 6807 1c7f E3090000 		.4byte	.LASF155
 6808 1c83 7C010000 		.4byte	.LASF156
 6809 1c87 0A       		.byte	0xa
 6810 1c88 00       		.byte	0
 6811 1c89 35       		.uleb128 0x35
 6812 1c8a 01       		.byte	0x1
 6813 1c8b 01       		.byte	0x1
 6814 1c8c DA030000 		.4byte	.LASF138
 6815 1c90 DA030000 		.4byte	.LASF138
 6816 1c94 07       		.byte	0x7
 6817 1c95 3109     		.2byte	0x931
 6818 1c97 0C       		.byte	0xc
 6819 1c98 34       		.uleb128 0x34
 6820 1c99 01       		.byte	0x1
 6821 1c9a 01       		.byte	0x1
 6822 1c9b C3070000 		.4byte	.LASF139
 6823 1c9f C3070000 		.4byte	.LASF139
 6824 1ca3 09       		.byte	0x9
 6825 1ca4 92       		.byte	0x92
 6826 1ca5 06       		.byte	0x6
 6827 1ca6 35       		.uleb128 0x35
 6828 1ca7 01       		.byte	0x1
 6829 1ca8 01       		.byte	0x1
 6830 1ca9 8A050000 		.4byte	.LASF140
 6831 1cad 8A050000 		.4byte	.LASF140
 6832 1cb1 07       		.byte	0x7
 6833 1cb2 6C09     		.2byte	0x96c
 6834 1cb4 06       		.byte	0x6
 6835 1cb5 35       		.uleb128 0x35
 6836 1cb6 01       		.byte	0x1
ARM GAS  /tmp/ccjtHtwZ.s 			page 190


 6837 1cb7 01       		.byte	0x1
 6838 1cb8 CD020000 		.4byte	.LASF141
 6839 1cbc CD020000 		.4byte	.LASF141
 6840 1cc0 07       		.byte	0x7
 6841 1cc1 0205     		.2byte	0x502
 6842 1cc3 06       		.byte	0x6
 6843 1cc4 35       		.uleb128 0x35
 6844 1cc5 01       		.byte	0x1
 6845 1cc6 01       		.byte	0x1
 6846 1cc7 AE070000 		.4byte	.LASF142
 6847 1ccb AE070000 		.4byte	.LASF142
 6848 1ccf 07       		.byte	0x7
 6849 1cd0 1909     		.2byte	0x919
 6850 1cd2 0C       		.byte	0xc
 6851 1cd3 35       		.uleb128 0x35
 6852 1cd4 01       		.byte	0x1
 6853 1cd5 01       		.byte	0x1
 6854 1cd6 8C030000 		.4byte	.LASF143
 6855 1cda 8C030000 		.4byte	.LASF143
 6856 1cde 07       		.byte	0x7
 6857 1cdf D008     		.2byte	0x8d0
 6858 1ce1 06       		.byte	0x6
 6859 1ce2 35       		.uleb128 0x35
 6860 1ce3 01       		.byte	0x1
 6861 1ce4 01       		.byte	0x1
 6862 1ce5 91070000 		.4byte	.LASF144
 6863 1ce9 91070000 		.4byte	.LASF144
 6864 1ced 07       		.byte	0x7
 6865 1cee 3805     		.2byte	0x538
 6866 1cf0 0C       		.byte	0xc
 6867 1cf1 35       		.uleb128 0x35
 6868 1cf2 01       		.byte	0x1
 6869 1cf3 01       		.byte	0x1
 6870 1cf4 A2030000 		.4byte	.LASF145
 6871 1cf8 A2030000 		.4byte	.LASF145
 6872 1cfc 07       		.byte	0x7
 6873 1cfd 6609     		.2byte	0x966
 6874 1cff 0E       		.byte	0xe
 6875 1d00 35       		.uleb128 0x35
 6876 1d01 01       		.byte	0x1
 6877 1d02 01       		.byte	0x1
 6878 1d03 15090000 		.4byte	.LASF146
 6879 1d07 15090000 		.4byte	.LASF146
 6880 1d0b 07       		.byte	0x7
 6881 1d0c 3B09     		.2byte	0x93b
 6882 1d0e 06       		.byte	0x6
 6883 1d0f 35       		.uleb128 0x35
 6884 1d10 01       		.byte	0x1
 6885 1d11 01       		.byte	0x1
 6886 1d12 41080000 		.4byte	.LASF147
 6887 1d16 41080000 		.4byte	.LASF147
 6888 1d1a 07       		.byte	0x7
 6889 1d1b 2B09     		.2byte	0x92b
 6890 1d1d 0C       		.byte	0xc
 6891 1d1e 35       		.uleb128 0x35
 6892 1d1f 01       		.byte	0x1
 6893 1d20 01       		.byte	0x1
ARM GAS  /tmp/ccjtHtwZ.s 			page 191


 6894 1d21 4E090000 		.4byte	.LASF148
 6895 1d25 4E090000 		.4byte	.LASF148
 6896 1d29 07       		.byte	0x7
 6897 1d2a 0E09     		.2byte	0x90e
 6898 1d2c 0E       		.byte	0xe
 6899 1d2d 34       		.uleb128 0x34
 6900 1d2e 01       		.byte	0x1
 6901 1d2f 01       		.byte	0x1
 6902 1d30 C0020000 		.4byte	.LASF149
 6903 1d34 C0020000 		.4byte	.LASF149
 6904 1d38 09       		.byte	0x9
 6905 1d39 91       		.byte	0x91
 6906 1d3a 07       		.byte	0x7
 6907 1d3b 35       		.uleb128 0x35
 6908 1d3c 01       		.byte	0x1
 6909 1d3d 01       		.byte	0x1
 6910 1d3e F0080000 		.4byte	.LASF150
 6911 1d42 F0080000 		.4byte	.LASF150
 6912 1d46 06       		.byte	0x6
 6913 1d47 5901     		.2byte	0x159
 6914 1d49 06       		.byte	0x6
 6915 1d4a 00       		.byte	0
 6916              		.section	.debug_abbrev,"",%progbits
 6917              	.Ldebug_abbrev0:
 6918 0000 01       		.uleb128 0x1
 6919 0001 11       		.uleb128 0x11
 6920 0002 01       		.byte	0x1
 6921 0003 25       		.uleb128 0x25
 6922 0004 0E       		.uleb128 0xe
 6923 0005 13       		.uleb128 0x13
 6924 0006 0B       		.uleb128 0xb
 6925 0007 03       		.uleb128 0x3
 6926 0008 0E       		.uleb128 0xe
 6927 0009 1B       		.uleb128 0x1b
 6928 000a 0E       		.uleb128 0xe
 6929 000b 11       		.uleb128 0x11
 6930 000c 01       		.uleb128 0x1
 6931 000d 12       		.uleb128 0x12
 6932 000e 01       		.uleb128 0x1
 6933 000f 10       		.uleb128 0x10
 6934 0010 06       		.uleb128 0x6
 6935 0011 00       		.byte	0
 6936 0012 00       		.byte	0
 6937 0013 02       		.uleb128 0x2
 6938 0014 16       		.uleb128 0x16
 6939 0015 00       		.byte	0
 6940 0016 03       		.uleb128 0x3
 6941 0017 0E       		.uleb128 0xe
 6942 0018 3A       		.uleb128 0x3a
 6943 0019 0B       		.uleb128 0xb
 6944 001a 3B       		.uleb128 0x3b
 6945 001b 0B       		.uleb128 0xb
 6946 001c 39       		.uleb128 0x39
 6947 001d 0B       		.uleb128 0xb
 6948 001e 49       		.uleb128 0x49
 6949 001f 13       		.uleb128 0x13
 6950 0020 00       		.byte	0
ARM GAS  /tmp/ccjtHtwZ.s 			page 192


 6951 0021 00       		.byte	0
 6952 0022 03       		.uleb128 0x3
 6953 0023 24       		.uleb128 0x24
 6954 0024 00       		.byte	0
 6955 0025 0B       		.uleb128 0xb
 6956 0026 0B       		.uleb128 0xb
 6957 0027 3E       		.uleb128 0x3e
 6958 0028 0B       		.uleb128 0xb
 6959 0029 03       		.uleb128 0x3
 6960 002a 0E       		.uleb128 0xe
 6961 002b 00       		.byte	0
 6962 002c 00       		.byte	0
 6963 002d 04       		.uleb128 0x4
 6964 002e 24       		.uleb128 0x24
 6965 002f 00       		.byte	0
 6966 0030 0B       		.uleb128 0xb
 6967 0031 0B       		.uleb128 0xb
 6968 0032 3E       		.uleb128 0x3e
 6969 0033 0B       		.uleb128 0xb
 6970 0034 03       		.uleb128 0x3
 6971 0035 08       		.uleb128 0x8
 6972 0036 00       		.byte	0
 6973 0037 00       		.byte	0
 6974 0038 05       		.uleb128 0x5
 6975 0039 0F       		.uleb128 0xf
 6976 003a 00       		.byte	0
 6977 003b 0B       		.uleb128 0xb
 6978 003c 0B       		.uleb128 0xb
 6979 003d 00       		.byte	0
 6980 003e 00       		.byte	0
 6981 003f 06       		.uleb128 0x6
 6982 0040 26       		.uleb128 0x26
 6983 0041 00       		.byte	0
 6984 0042 49       		.uleb128 0x49
 6985 0043 13       		.uleb128 0x13
 6986 0044 00       		.byte	0
 6987 0045 00       		.byte	0
 6988 0046 07       		.uleb128 0x7
 6989 0047 0F       		.uleb128 0xf
 6990 0048 00       		.byte	0
 6991 0049 0B       		.uleb128 0xb
 6992 004a 0B       		.uleb128 0xb
 6993 004b 49       		.uleb128 0x49
 6994 004c 13       		.uleb128 0x13
 6995 004d 00       		.byte	0
 6996 004e 00       		.byte	0
 6997 004f 08       		.uleb128 0x8
 6998 0050 26       		.uleb128 0x26
 6999 0051 00       		.byte	0
 7000 0052 00       		.byte	0
 7001 0053 00       		.byte	0
 7002 0054 09       		.uleb128 0x9
 7003 0055 35       		.uleb128 0x35
 7004 0056 00       		.byte	0
 7005 0057 49       		.uleb128 0x49
 7006 0058 13       		.uleb128 0x13
 7007 0059 00       		.byte	0
ARM GAS  /tmp/ccjtHtwZ.s 			page 193


 7008 005a 00       		.byte	0
 7009 005b 0A       		.uleb128 0xa
 7010 005c 13       		.uleb128 0x13
 7011 005d 01       		.byte	0x1
 7012 005e 03       		.uleb128 0x3
 7013 005f 0E       		.uleb128 0xe
 7014 0060 0B       		.uleb128 0xb
 7015 0061 0B       		.uleb128 0xb
 7016 0062 3A       		.uleb128 0x3a
 7017 0063 0B       		.uleb128 0xb
 7018 0064 3B       		.uleb128 0x3b
 7019 0065 0B       		.uleb128 0xb
 7020 0066 39       		.uleb128 0x39
 7021 0067 0B       		.uleb128 0xb
 7022 0068 01       		.uleb128 0x1
 7023 0069 13       		.uleb128 0x13
 7024 006a 00       		.byte	0
 7025 006b 00       		.byte	0
 7026 006c 0B       		.uleb128 0xb
 7027 006d 0D       		.uleb128 0xd
 7028 006e 00       		.byte	0
 7029 006f 03       		.uleb128 0x3
 7030 0070 0E       		.uleb128 0xe
 7031 0071 3A       		.uleb128 0x3a
 7032 0072 0B       		.uleb128 0xb
 7033 0073 3B       		.uleb128 0x3b
 7034 0074 0B       		.uleb128 0xb
 7035 0075 39       		.uleb128 0x39
 7036 0076 0B       		.uleb128 0xb
 7037 0077 49       		.uleb128 0x49
 7038 0078 13       		.uleb128 0x13
 7039 0079 38       		.uleb128 0x38
 7040 007a 0A       		.uleb128 0xa
 7041 007b 00       		.byte	0
 7042 007c 00       		.byte	0
 7043 007d 0C       		.uleb128 0xc
 7044 007e 13       		.uleb128 0x13
 7045 007f 00       		.byte	0
 7046 0080 03       		.uleb128 0x3
 7047 0081 0E       		.uleb128 0xe
 7048 0082 3C       		.uleb128 0x3c
 7049 0083 0C       		.uleb128 0xc
 7050 0084 00       		.byte	0
 7051 0085 00       		.byte	0
 7052 0086 0D       		.uleb128 0xd
 7053 0087 0D       		.uleb128 0xd
 7054 0088 00       		.byte	0
 7055 0089 03       		.uleb128 0x3
 7056 008a 08       		.uleb128 0x8
 7057 008b 3A       		.uleb128 0x3a
 7058 008c 0B       		.uleb128 0xb
 7059 008d 3B       		.uleb128 0x3b
 7060 008e 0B       		.uleb128 0xb
 7061 008f 39       		.uleb128 0x39
 7062 0090 0B       		.uleb128 0xb
 7063 0091 49       		.uleb128 0x49
 7064 0092 13       		.uleb128 0x13
ARM GAS  /tmp/ccjtHtwZ.s 			page 194


 7065 0093 38       		.uleb128 0x38
 7066 0094 0A       		.uleb128 0xa
 7067 0095 00       		.byte	0
 7068 0096 00       		.byte	0
 7069 0097 0E       		.uleb128 0xe
 7070 0098 17       		.uleb128 0x17
 7071 0099 01       		.byte	0x1
 7072 009a 0B       		.uleb128 0xb
 7073 009b 0B       		.uleb128 0xb
 7074 009c 3A       		.uleb128 0x3a
 7075 009d 0B       		.uleb128 0xb
 7076 009e 3B       		.uleb128 0x3b
 7077 009f 0B       		.uleb128 0xb
 7078 00a0 39       		.uleb128 0x39
 7079 00a1 0B       		.uleb128 0xb
 7080 00a2 01       		.uleb128 0x1
 7081 00a3 13       		.uleb128 0x13
 7082 00a4 00       		.byte	0
 7083 00a5 00       		.byte	0
 7084 00a6 0F       		.uleb128 0xf
 7085 00a7 0D       		.uleb128 0xd
 7086 00a8 00       		.byte	0
 7087 00a9 03       		.uleb128 0x3
 7088 00aa 0E       		.uleb128 0xe
 7089 00ab 3A       		.uleb128 0x3a
 7090 00ac 0B       		.uleb128 0xb
 7091 00ad 3B       		.uleb128 0x3b
 7092 00ae 0B       		.uleb128 0xb
 7093 00af 39       		.uleb128 0x39
 7094 00b0 0B       		.uleb128 0xb
 7095 00b1 49       		.uleb128 0x49
 7096 00b2 13       		.uleb128 0x13
 7097 00b3 00       		.byte	0
 7098 00b4 00       		.byte	0
 7099 00b5 10       		.uleb128 0x10
 7100 00b6 2E       		.uleb128 0x2e
 7101 00b7 01       		.byte	0x1
 7102 00b8 3F       		.uleb128 0x3f
 7103 00b9 0C       		.uleb128 0xc
 7104 00ba 03       		.uleb128 0x3
 7105 00bb 0E       		.uleb128 0xe
 7106 00bc 3A       		.uleb128 0x3a
 7107 00bd 0B       		.uleb128 0xb
 7108 00be 3B       		.uleb128 0x3b
 7109 00bf 05       		.uleb128 0x5
 7110 00c0 39       		.uleb128 0x39
 7111 00c1 0B       		.uleb128 0xb
 7112 00c2 27       		.uleb128 0x27
 7113 00c3 0C       		.uleb128 0xc
 7114 00c4 11       		.uleb128 0x11
 7115 00c5 01       		.uleb128 0x1
 7116 00c6 12       		.uleb128 0x12
 7117 00c7 01       		.uleb128 0x1
 7118 00c8 40       		.uleb128 0x40
 7119 00c9 06       		.uleb128 0x6
 7120 00ca 9742     		.uleb128 0x2117
 7121 00cc 0C       		.uleb128 0xc
ARM GAS  /tmp/ccjtHtwZ.s 			page 195


 7122 00cd 01       		.uleb128 0x1
 7123 00ce 13       		.uleb128 0x13
 7124 00cf 00       		.byte	0
 7125 00d0 00       		.byte	0
 7126 00d1 11       		.uleb128 0x11
 7127 00d2 05       		.uleb128 0x5
 7128 00d3 00       		.byte	0
 7129 00d4 03       		.uleb128 0x3
 7130 00d5 0E       		.uleb128 0xe
 7131 00d6 3A       		.uleb128 0x3a
 7132 00d7 0B       		.uleb128 0xb
 7133 00d8 3B       		.uleb128 0x3b
 7134 00d9 05       		.uleb128 0x5
 7135 00da 39       		.uleb128 0x39
 7136 00db 0B       		.uleb128 0xb
 7137 00dc 49       		.uleb128 0x49
 7138 00dd 13       		.uleb128 0x13
 7139 00de 02       		.uleb128 0x2
 7140 00df 06       		.uleb128 0x6
 7141 00e0 B742     		.uleb128 0x2137
 7142 00e2 06       		.uleb128 0x6
 7143 00e3 00       		.byte	0
 7144 00e4 00       		.byte	0
 7145 00e5 12       		.uleb128 0x12
 7146 00e6 34       		.uleb128 0x34
 7147 00e7 00       		.byte	0
 7148 00e8 03       		.uleb128 0x3
 7149 00e9 0E       		.uleb128 0xe
 7150 00ea 3A       		.uleb128 0x3a
 7151 00eb 0B       		.uleb128 0xb
 7152 00ec 3B       		.uleb128 0x3b
 7153 00ed 05       		.uleb128 0x5
 7154 00ee 39       		.uleb128 0x39
 7155 00ef 0B       		.uleb128 0xb
 7156 00f0 49       		.uleb128 0x49
 7157 00f1 13       		.uleb128 0x13
 7158 00f2 02       		.uleb128 0x2
 7159 00f3 06       		.uleb128 0x6
 7160 00f4 B742     		.uleb128 0x2137
 7161 00f6 06       		.uleb128 0x6
 7162 00f7 00       		.byte	0
 7163 00f8 00       		.byte	0
 7164 00f9 13       		.uleb128 0x13
 7165 00fa 898201   		.uleb128 0x4109
 7166 00fd 00       		.byte	0
 7167 00fe 11       		.uleb128 0x11
 7168 00ff 01       		.uleb128 0x1
 7169 0100 31       		.uleb128 0x31
 7170 0101 13       		.uleb128 0x13
 7171 0102 00       		.byte	0
 7172 0103 00       		.byte	0
 7173 0104 14       		.uleb128 0x14
 7174 0105 898201   		.uleb128 0x4109
 7175 0108 01       		.byte	0x1
 7176 0109 11       		.uleb128 0x11
 7177 010a 01       		.uleb128 0x1
 7178 010b 31       		.uleb128 0x31
ARM GAS  /tmp/ccjtHtwZ.s 			page 196


 7179 010c 13       		.uleb128 0x13
 7180 010d 01       		.uleb128 0x1
 7181 010e 13       		.uleb128 0x13
 7182 010f 00       		.byte	0
 7183 0110 00       		.byte	0
 7184 0111 15       		.uleb128 0x15
 7185 0112 8A8201   		.uleb128 0x410a
 7186 0115 00       		.byte	0
 7187 0116 02       		.uleb128 0x2
 7188 0117 0A       		.uleb128 0xa
 7189 0118 9142     		.uleb128 0x2111
 7190 011a 0A       		.uleb128 0xa
 7191 011b 00       		.byte	0
 7192 011c 00       		.byte	0
 7193 011d 16       		.uleb128 0x16
 7194 011e 898201   		.uleb128 0x4109
 7195 0121 01       		.byte	0x1
 7196 0122 11       		.uleb128 0x11
 7197 0123 01       		.uleb128 0x1
 7198 0124 9542     		.uleb128 0x2115
 7199 0126 0C       		.uleb128 0xc
 7200 0127 31       		.uleb128 0x31
 7201 0128 13       		.uleb128 0x13
 7202 0129 00       		.byte	0
 7203 012a 00       		.byte	0
 7204 012b 17       		.uleb128 0x17
 7205 012c 2E       		.uleb128 0x2e
 7206 012d 01       		.byte	0x1
 7207 012e 3F       		.uleb128 0x3f
 7208 012f 0C       		.uleb128 0xc
 7209 0130 03       		.uleb128 0x3
 7210 0131 0E       		.uleb128 0xe
 7211 0132 3A       		.uleb128 0x3a
 7212 0133 0B       		.uleb128 0xb
 7213 0134 3B       		.uleb128 0x3b
 7214 0135 05       		.uleb128 0x5
 7215 0136 39       		.uleb128 0x39
 7216 0137 0B       		.uleb128 0xb
 7217 0138 27       		.uleb128 0x27
 7218 0139 0C       		.uleb128 0xc
 7219 013a 49       		.uleb128 0x49
 7220 013b 13       		.uleb128 0x13
 7221 013c 11       		.uleb128 0x11
 7222 013d 01       		.uleb128 0x1
 7223 013e 12       		.uleb128 0x12
 7224 013f 01       		.uleb128 0x1
 7225 0140 40       		.uleb128 0x40
 7226 0141 0A       		.uleb128 0xa
 7227 0142 9742     		.uleb128 0x2117
 7228 0144 0C       		.uleb128 0xc
 7229 0145 01       		.uleb128 0x1
 7230 0146 13       		.uleb128 0x13
 7231 0147 00       		.byte	0
 7232 0148 00       		.byte	0
 7233 0149 18       		.uleb128 0x18
 7234 014a 2E       		.uleb128 0x2e
 7235 014b 01       		.byte	0x1
ARM GAS  /tmp/ccjtHtwZ.s 			page 197


 7236 014c 03       		.uleb128 0x3
 7237 014d 0E       		.uleb128 0xe
 7238 014e 3A       		.uleb128 0x3a
 7239 014f 0B       		.uleb128 0xb
 7240 0150 3B       		.uleb128 0x3b
 7241 0151 05       		.uleb128 0x5
 7242 0152 39       		.uleb128 0x39
 7243 0153 0B       		.uleb128 0xb
 7244 0154 27       		.uleb128 0x27
 7245 0155 0C       		.uleb128 0xc
 7246 0156 49       		.uleb128 0x49
 7247 0157 13       		.uleb128 0x13
 7248 0158 20       		.uleb128 0x20
 7249 0159 0B       		.uleb128 0xb
 7250 015a 01       		.uleb128 0x1
 7251 015b 13       		.uleb128 0x13
 7252 015c 00       		.byte	0
 7253 015d 00       		.byte	0
 7254 015e 19       		.uleb128 0x19
 7255 015f 05       		.uleb128 0x5
 7256 0160 00       		.byte	0
 7257 0161 03       		.uleb128 0x3
 7258 0162 0E       		.uleb128 0xe
 7259 0163 3A       		.uleb128 0x3a
 7260 0164 0B       		.uleb128 0xb
 7261 0165 3B       		.uleb128 0x3b
 7262 0166 05       		.uleb128 0x5
 7263 0167 39       		.uleb128 0x39
 7264 0168 0B       		.uleb128 0xb
 7265 0169 49       		.uleb128 0x49
 7266 016a 13       		.uleb128 0x13
 7267 016b 00       		.byte	0
 7268 016c 00       		.byte	0
 7269 016d 1A       		.uleb128 0x1a
 7270 016e 34       		.uleb128 0x34
 7271 016f 00       		.byte	0
 7272 0170 03       		.uleb128 0x3
 7273 0171 0E       		.uleb128 0xe
 7274 0172 3A       		.uleb128 0x3a
 7275 0173 0B       		.uleb128 0xb
 7276 0174 3B       		.uleb128 0x3b
 7277 0175 05       		.uleb128 0x5
 7278 0176 39       		.uleb128 0x39
 7279 0177 0B       		.uleb128 0xb
 7280 0178 49       		.uleb128 0x49
 7281 0179 13       		.uleb128 0x13
 7282 017a 00       		.byte	0
 7283 017b 00       		.byte	0
 7284 017c 1B       		.uleb128 0x1b
 7285 017d 2E       		.uleb128 0x2e
 7286 017e 01       		.byte	0x1
 7287 017f 03       		.uleb128 0x3
 7288 0180 0E       		.uleb128 0xe
 7289 0181 3A       		.uleb128 0x3a
 7290 0182 0B       		.uleb128 0xb
 7291 0183 3B       		.uleb128 0x3b
 7292 0184 05       		.uleb128 0x5
ARM GAS  /tmp/ccjtHtwZ.s 			page 198


 7293 0185 39       		.uleb128 0x39
 7294 0186 0B       		.uleb128 0xb
 7295 0187 27       		.uleb128 0x27
 7296 0188 0C       		.uleb128 0xc
 7297 0189 49       		.uleb128 0x49
 7298 018a 13       		.uleb128 0x13
 7299 018b 11       		.uleb128 0x11
 7300 018c 01       		.uleb128 0x1
 7301 018d 12       		.uleb128 0x12
 7302 018e 01       		.uleb128 0x1
 7303 018f 40       		.uleb128 0x40
 7304 0190 06       		.uleb128 0x6
 7305 0191 9742     		.uleb128 0x2117
 7306 0193 0C       		.uleb128 0xc
 7307 0194 01       		.uleb128 0x1
 7308 0195 13       		.uleb128 0x13
 7309 0196 00       		.byte	0
 7310 0197 00       		.byte	0
 7311 0198 1C       		.uleb128 0x1c
 7312 0199 2E       		.uleb128 0x2e
 7313 019a 01       		.byte	0x1
 7314 019b 03       		.uleb128 0x3
 7315 019c 0E       		.uleb128 0xe
 7316 019d 3A       		.uleb128 0x3a
 7317 019e 0B       		.uleb128 0xb
 7318 019f 3B       		.uleb128 0x3b
 7319 01a0 05       		.uleb128 0x5
 7320 01a1 39       		.uleb128 0x39
 7321 01a2 0B       		.uleb128 0xb
 7322 01a3 27       		.uleb128 0x27
 7323 01a4 0C       		.uleb128 0xc
 7324 01a5 11       		.uleb128 0x11
 7325 01a6 01       		.uleb128 0x1
 7326 01a7 12       		.uleb128 0x12
 7327 01a8 01       		.uleb128 0x1
 7328 01a9 40       		.uleb128 0x40
 7329 01aa 06       		.uleb128 0x6
 7330 01ab 9742     		.uleb128 0x2117
 7331 01ad 0C       		.uleb128 0xc
 7332 01ae 01       		.uleb128 0x1
 7333 01af 13       		.uleb128 0x13
 7334 01b0 00       		.byte	0
 7335 01b1 00       		.byte	0
 7336 01b2 1D       		.uleb128 0x1d
 7337 01b3 0B       		.uleb128 0xb
 7338 01b4 01       		.byte	0x1
 7339 01b5 55       		.uleb128 0x55
 7340 01b6 06       		.uleb128 0x6
 7341 01b7 01       		.uleb128 0x1
 7342 01b8 13       		.uleb128 0x13
 7343 01b9 00       		.byte	0
 7344 01ba 00       		.byte	0
 7345 01bb 1E       		.uleb128 0x1e
 7346 01bc 898201   		.uleb128 0x4109
 7347 01bf 00       		.byte	0
 7348 01c0 11       		.uleb128 0x11
 7349 01c1 01       		.uleb128 0x1
ARM GAS  /tmp/ccjtHtwZ.s 			page 199


 7350 01c2 9542     		.uleb128 0x2115
 7351 01c4 0C       		.uleb128 0xc
 7352 01c5 31       		.uleb128 0x31
 7353 01c6 13       		.uleb128 0x13
 7354 01c7 00       		.byte	0
 7355 01c8 00       		.byte	0
 7356 01c9 1F       		.uleb128 0x1f
 7357 01ca 2E       		.uleb128 0x2e
 7358 01cb 01       		.byte	0x1
 7359 01cc 3F       		.uleb128 0x3f
 7360 01cd 0C       		.uleb128 0xc
 7361 01ce 03       		.uleb128 0x3
 7362 01cf 0E       		.uleb128 0xe
 7363 01d0 3A       		.uleb128 0x3a
 7364 01d1 0B       		.uleb128 0xb
 7365 01d2 3B       		.uleb128 0x3b
 7366 01d3 05       		.uleb128 0x5
 7367 01d4 39       		.uleb128 0x39
 7368 01d5 0B       		.uleb128 0xb
 7369 01d6 27       		.uleb128 0x27
 7370 01d7 0C       		.uleb128 0xc
 7371 01d8 11       		.uleb128 0x11
 7372 01d9 01       		.uleb128 0x1
 7373 01da 12       		.uleb128 0x12
 7374 01db 01       		.uleb128 0x1
 7375 01dc 40       		.uleb128 0x40
 7376 01dd 0A       		.uleb128 0xa
 7377 01de 9742     		.uleb128 0x2117
 7378 01e0 0C       		.uleb128 0xc
 7379 01e1 01       		.uleb128 0x1
 7380 01e2 13       		.uleb128 0x13
 7381 01e3 00       		.byte	0
 7382 01e4 00       		.byte	0
 7383 01e5 20       		.uleb128 0x20
 7384 01e6 05       		.uleb128 0x5
 7385 01e7 00       		.byte	0
 7386 01e8 03       		.uleb128 0x3
 7387 01e9 0E       		.uleb128 0xe
 7388 01ea 3A       		.uleb128 0x3a
 7389 01eb 0B       		.uleb128 0xb
 7390 01ec 3B       		.uleb128 0x3b
 7391 01ed 05       		.uleb128 0x5
 7392 01ee 39       		.uleb128 0x39
 7393 01ef 0B       		.uleb128 0xb
 7394 01f0 49       		.uleb128 0x49
 7395 01f1 13       		.uleb128 0x13
 7396 01f2 02       		.uleb128 0x2
 7397 01f3 0A       		.uleb128 0xa
 7398 01f4 00       		.byte	0
 7399 01f5 00       		.byte	0
 7400 01f6 21       		.uleb128 0x21
 7401 01f7 2E       		.uleb128 0x2e
 7402 01f8 01       		.byte	0x1
 7403 01f9 3F       		.uleb128 0x3f
 7404 01fa 0C       		.uleb128 0xc
 7405 01fb 03       		.uleb128 0x3
 7406 01fc 0E       		.uleb128 0xe
ARM GAS  /tmp/ccjtHtwZ.s 			page 200


 7407 01fd 3A       		.uleb128 0x3a
 7408 01fe 0B       		.uleb128 0xb
 7409 01ff 3B       		.uleb128 0x3b
 7410 0200 05       		.uleb128 0x5
 7411 0201 39       		.uleb128 0x39
 7412 0202 0B       		.uleb128 0xb
 7413 0203 27       		.uleb128 0x27
 7414 0204 0C       		.uleb128 0xc
 7415 0205 49       		.uleb128 0x49
 7416 0206 13       		.uleb128 0x13
 7417 0207 11       		.uleb128 0x11
 7418 0208 01       		.uleb128 0x1
 7419 0209 12       		.uleb128 0x12
 7420 020a 01       		.uleb128 0x1
 7421 020b 40       		.uleb128 0x40
 7422 020c 06       		.uleb128 0x6
 7423 020d 9742     		.uleb128 0x2117
 7424 020f 0C       		.uleb128 0xc
 7425 0210 01       		.uleb128 0x1
 7426 0211 13       		.uleb128 0x13
 7427 0212 00       		.byte	0
 7428 0213 00       		.byte	0
 7429 0214 22       		.uleb128 0x22
 7430 0215 1D       		.uleb128 0x1d
 7431 0216 01       		.byte	0x1
 7432 0217 31       		.uleb128 0x31
 7433 0218 13       		.uleb128 0x13
 7434 0219 52       		.uleb128 0x52
 7435 021a 01       		.uleb128 0x1
 7436 021b B842     		.uleb128 0x2138
 7437 021d 0B       		.uleb128 0xb
 7438 021e 55       		.uleb128 0x55
 7439 021f 06       		.uleb128 0x6
 7440 0220 58       		.uleb128 0x58
 7441 0221 0B       		.uleb128 0xb
 7442 0222 59       		.uleb128 0x59
 7443 0223 05       		.uleb128 0x5
 7444 0224 57       		.uleb128 0x57
 7445 0225 0B       		.uleb128 0xb
 7446 0226 01       		.uleb128 0x1
 7447 0227 13       		.uleb128 0x13
 7448 0228 00       		.byte	0
 7449 0229 00       		.byte	0
 7450 022a 23       		.uleb128 0x23
 7451 022b 0B       		.uleb128 0xb
 7452 022c 01       		.byte	0x1
 7453 022d 55       		.uleb128 0x55
 7454 022e 06       		.uleb128 0x6
 7455 022f 00       		.byte	0
 7456 0230 00       		.byte	0
 7457 0231 24       		.uleb128 0x24
 7458 0232 34       		.uleb128 0x34
 7459 0233 00       		.byte	0
 7460 0234 31       		.uleb128 0x31
 7461 0235 13       		.uleb128 0x13
 7462 0236 02       		.uleb128 0x2
 7463 0237 06       		.uleb128 0x6
ARM GAS  /tmp/ccjtHtwZ.s 			page 201


 7464 0238 B742     		.uleb128 0x2137
 7465 023a 06       		.uleb128 0x6
 7466 023b 00       		.byte	0
 7467 023c 00       		.byte	0
 7468 023d 25       		.uleb128 0x25
 7469 023e 34       		.uleb128 0x34
 7470 023f 00       		.byte	0
 7471 0240 31       		.uleb128 0x31
 7472 0241 13       		.uleb128 0x13
 7473 0242 00       		.byte	0
 7474 0243 00       		.byte	0
 7475 0244 26       		.uleb128 0x26
 7476 0245 1D       		.uleb128 0x1d
 7477 0246 01       		.byte	0x1
 7478 0247 31       		.uleb128 0x31
 7479 0248 13       		.uleb128 0x13
 7480 0249 52       		.uleb128 0x52
 7481 024a 01       		.uleb128 0x1
 7482 024b B842     		.uleb128 0x2138
 7483 024d 0B       		.uleb128 0xb
 7484 024e 11       		.uleb128 0x11
 7485 024f 01       		.uleb128 0x1
 7486 0250 12       		.uleb128 0x12
 7487 0251 01       		.uleb128 0x1
 7488 0252 58       		.uleb128 0x58
 7489 0253 0B       		.uleb128 0xb
 7490 0254 59       		.uleb128 0x59
 7491 0255 05       		.uleb128 0x5
 7492 0256 57       		.uleb128 0x57
 7493 0257 0B       		.uleb128 0xb
 7494 0258 01       		.uleb128 0x1
 7495 0259 13       		.uleb128 0x13
 7496 025a 00       		.byte	0
 7497 025b 00       		.byte	0
 7498 025c 27       		.uleb128 0x27
 7499 025d 05       		.uleb128 0x5
 7500 025e 00       		.byte	0
 7501 025f 31       		.uleb128 0x31
 7502 0260 13       		.uleb128 0x13
 7503 0261 02       		.uleb128 0x2
 7504 0262 06       		.uleb128 0x6
 7505 0263 B742     		.uleb128 0x2137
 7506 0265 06       		.uleb128 0x6
 7507 0266 00       		.byte	0
 7508 0267 00       		.byte	0
 7509 0268 28       		.uleb128 0x28
 7510 0269 898201   		.uleb128 0x4109
 7511 026c 01       		.byte	0x1
 7512 026d 11       		.uleb128 0x11
 7513 026e 01       		.uleb128 0x1
 7514 026f 31       		.uleb128 0x31
 7515 0270 13       		.uleb128 0x13
 7516 0271 00       		.byte	0
 7517 0272 00       		.byte	0
 7518 0273 29       		.uleb128 0x29
 7519 0274 1D       		.uleb128 0x1d
 7520 0275 01       		.byte	0x1
ARM GAS  /tmp/ccjtHtwZ.s 			page 202


 7521 0276 31       		.uleb128 0x31
 7522 0277 13       		.uleb128 0x13
 7523 0278 52       		.uleb128 0x52
 7524 0279 01       		.uleb128 0x1
 7525 027a B842     		.uleb128 0x2138
 7526 027c 0B       		.uleb128 0xb
 7527 027d 11       		.uleb128 0x11
 7528 027e 01       		.uleb128 0x1
 7529 027f 12       		.uleb128 0x12
 7530 0280 01       		.uleb128 0x1
 7531 0281 58       		.uleb128 0x58
 7532 0282 0B       		.uleb128 0xb
 7533 0283 59       		.uleb128 0x59
 7534 0284 05       		.uleb128 0x5
 7535 0285 57       		.uleb128 0x57
 7536 0286 0B       		.uleb128 0xb
 7537 0287 00       		.byte	0
 7538 0288 00       		.byte	0
 7539 0289 2A       		.uleb128 0x2a
 7540 028a 34       		.uleb128 0x34
 7541 028b 00       		.byte	0
 7542 028c 03       		.uleb128 0x3
 7543 028d 0E       		.uleb128 0xe
 7544 028e 3A       		.uleb128 0x3a
 7545 028f 0B       		.uleb128 0xb
 7546 0290 3B       		.uleb128 0x3b
 7547 0291 05       		.uleb128 0x5
 7548 0292 39       		.uleb128 0x39
 7549 0293 0B       		.uleb128 0xb
 7550 0294 49       		.uleb128 0x49
 7551 0295 13       		.uleb128 0x13
 7552 0296 02       		.uleb128 0x2
 7553 0297 0A       		.uleb128 0xa
 7554 0298 00       		.byte	0
 7555 0299 00       		.byte	0
 7556 029a 2B       		.uleb128 0x2b
 7557 029b 0B       		.uleb128 0xb
 7558 029c 01       		.byte	0x1
 7559 029d 11       		.uleb128 0x11
 7560 029e 01       		.uleb128 0x1
 7561 029f 12       		.uleb128 0x12
 7562 02a0 01       		.uleb128 0x1
 7563 02a1 01       		.uleb128 0x1
 7564 02a2 13       		.uleb128 0x13
 7565 02a3 00       		.byte	0
 7566 02a4 00       		.byte	0
 7567 02a5 2C       		.uleb128 0x2c
 7568 02a6 34       		.uleb128 0x34
 7569 02a7 00       		.byte	0
 7570 02a8 03       		.uleb128 0x3
 7571 02a9 0E       		.uleb128 0xe
 7572 02aa 3A       		.uleb128 0x3a
 7573 02ab 0B       		.uleb128 0xb
 7574 02ac 3B       		.uleb128 0x3b
 7575 02ad 05       		.uleb128 0x5
 7576 02ae 39       		.uleb128 0x39
 7577 02af 0B       		.uleb128 0xb
ARM GAS  /tmp/ccjtHtwZ.s 			page 203


 7578 02b0 49       		.uleb128 0x49
 7579 02b1 13       		.uleb128 0x13
 7580 02b2 1C       		.uleb128 0x1c
 7581 02b3 0B       		.uleb128 0xb
 7582 02b4 00       		.byte	0
 7583 02b5 00       		.byte	0
 7584 02b6 2D       		.uleb128 0x2d
 7585 02b7 2E       		.uleb128 0x2e
 7586 02b8 01       		.byte	0x1
 7587 02b9 03       		.uleb128 0x3
 7588 02ba 0E       		.uleb128 0xe
 7589 02bb 3A       		.uleb128 0x3a
 7590 02bc 0B       		.uleb128 0xb
 7591 02bd 3B       		.uleb128 0x3b
 7592 02be 05       		.uleb128 0x5
 7593 02bf 39       		.uleb128 0x39
 7594 02c0 0B       		.uleb128 0xb
 7595 02c1 27       		.uleb128 0x27
 7596 02c2 0C       		.uleb128 0xc
 7597 02c3 20       		.uleb128 0x20
 7598 02c4 0B       		.uleb128 0xb
 7599 02c5 01       		.uleb128 0x1
 7600 02c6 13       		.uleb128 0x13
 7601 02c7 00       		.byte	0
 7602 02c8 00       		.byte	0
 7603 02c9 2E       		.uleb128 0x2e
 7604 02ca 2E       		.uleb128 0x2e
 7605 02cb 01       		.byte	0x1
 7606 02cc 3F       		.uleb128 0x3f
 7607 02cd 0C       		.uleb128 0xc
 7608 02ce 03       		.uleb128 0x3
 7609 02cf 0E       		.uleb128 0xe
 7610 02d0 3A       		.uleb128 0x3a
 7611 02d1 0B       		.uleb128 0xb
 7612 02d2 3B       		.uleb128 0x3b
 7613 02d3 0B       		.uleb128 0xb
 7614 02d4 39       		.uleb128 0x39
 7615 02d5 0B       		.uleb128 0xb
 7616 02d6 27       		.uleb128 0x27
 7617 02d7 0C       		.uleb128 0xc
 7618 02d8 49       		.uleb128 0x49
 7619 02d9 13       		.uleb128 0x13
 7620 02da 11       		.uleb128 0x11
 7621 02db 01       		.uleb128 0x1
 7622 02dc 12       		.uleb128 0x12
 7623 02dd 01       		.uleb128 0x1
 7624 02de 40       		.uleb128 0x40
 7625 02df 06       		.uleb128 0x6
 7626 02e0 9742     		.uleb128 0x2117
 7627 02e2 0C       		.uleb128 0xc
 7628 02e3 01       		.uleb128 0x1
 7629 02e4 13       		.uleb128 0x13
 7630 02e5 00       		.byte	0
 7631 02e6 00       		.byte	0
 7632 02e7 2F       		.uleb128 0x2f
 7633 02e8 05       		.uleb128 0x5
 7634 02e9 00       		.byte	0
ARM GAS  /tmp/ccjtHtwZ.s 			page 204


 7635 02ea 03       		.uleb128 0x3
 7636 02eb 0E       		.uleb128 0xe
 7637 02ec 3A       		.uleb128 0x3a
 7638 02ed 0B       		.uleb128 0xb
 7639 02ee 3B       		.uleb128 0x3b
 7640 02ef 0B       		.uleb128 0xb
 7641 02f0 39       		.uleb128 0x39
 7642 02f1 0B       		.uleb128 0xb
 7643 02f2 49       		.uleb128 0x49
 7644 02f3 13       		.uleb128 0x13
 7645 02f4 02       		.uleb128 0x2
 7646 02f5 06       		.uleb128 0x6
 7647 02f6 B742     		.uleb128 0x2137
 7648 02f8 06       		.uleb128 0x6
 7649 02f9 00       		.byte	0
 7650 02fa 00       		.byte	0
 7651 02fb 30       		.uleb128 0x30
 7652 02fc 2E       		.uleb128 0x2e
 7653 02fd 01       		.byte	0x1
 7654 02fe 03       		.uleb128 0x3
 7655 02ff 0E       		.uleb128 0xe
 7656 0300 3A       		.uleb128 0x3a
 7657 0301 0B       		.uleb128 0xb
 7658 0302 3B       		.uleb128 0x3b
 7659 0303 0B       		.uleb128 0xb
 7660 0304 39       		.uleb128 0x39
 7661 0305 0B       		.uleb128 0xb
 7662 0306 27       		.uleb128 0x27
 7663 0307 0C       		.uleb128 0xc
 7664 0308 20       		.uleb128 0x20
 7665 0309 0B       		.uleb128 0xb
 7666 030a 01       		.uleb128 0x1
 7667 030b 13       		.uleb128 0x13
 7668 030c 00       		.byte	0
 7669 030d 00       		.byte	0
 7670 030e 31       		.uleb128 0x31
 7671 030f 05       		.uleb128 0x5
 7672 0310 00       		.byte	0
 7673 0311 03       		.uleb128 0x3
 7674 0312 0E       		.uleb128 0xe
 7675 0313 3A       		.uleb128 0x3a
 7676 0314 0B       		.uleb128 0xb
 7677 0315 3B       		.uleb128 0x3b
 7678 0316 0B       		.uleb128 0xb
 7679 0317 39       		.uleb128 0x39
 7680 0318 0B       		.uleb128 0xb
 7681 0319 49       		.uleb128 0x49
 7682 031a 13       		.uleb128 0x13
 7683 031b 00       		.byte	0
 7684 031c 00       		.byte	0
 7685 031d 32       		.uleb128 0x32
 7686 031e 2E       		.uleb128 0x2e
 7687 031f 01       		.byte	0x1
 7688 0320 03       		.uleb128 0x3
 7689 0321 0E       		.uleb128 0xe
 7690 0322 3A       		.uleb128 0x3a
 7691 0323 0B       		.uleb128 0xb
ARM GAS  /tmp/ccjtHtwZ.s 			page 205


 7692 0324 3B       		.uleb128 0x3b
 7693 0325 0B       		.uleb128 0xb
 7694 0326 39       		.uleb128 0x39
 7695 0327 0B       		.uleb128 0xb
 7696 0328 27       		.uleb128 0x27
 7697 0329 0C       		.uleb128 0xc
 7698 032a 49       		.uleb128 0x49
 7699 032b 13       		.uleb128 0x13
 7700 032c 20       		.uleb128 0x20
 7701 032d 0B       		.uleb128 0xb
 7702 032e 01       		.uleb128 0x1
 7703 032f 13       		.uleb128 0x13
 7704 0330 00       		.byte	0
 7705 0331 00       		.byte	0
 7706 0332 33       		.uleb128 0x33
 7707 0333 34       		.uleb128 0x34
 7708 0334 00       		.byte	0
 7709 0335 03       		.uleb128 0x3
 7710 0336 0E       		.uleb128 0xe
 7711 0337 3A       		.uleb128 0x3a
 7712 0338 0B       		.uleb128 0xb
 7713 0339 3B       		.uleb128 0x3b
 7714 033a 0B       		.uleb128 0xb
 7715 033b 39       		.uleb128 0x39
 7716 033c 0B       		.uleb128 0xb
 7717 033d 49       		.uleb128 0x49
 7718 033e 13       		.uleb128 0x13
 7719 033f 00       		.byte	0
 7720 0340 00       		.byte	0
 7721 0341 34       		.uleb128 0x34
 7722 0342 2E       		.uleb128 0x2e
 7723 0343 00       		.byte	0
 7724 0344 3F       		.uleb128 0x3f
 7725 0345 0C       		.uleb128 0xc
 7726 0346 3C       		.uleb128 0x3c
 7727 0347 0C       		.uleb128 0xc
 7728 0348 8740     		.uleb128 0x2007
 7729 034a 0E       		.uleb128 0xe
 7730 034b 03       		.uleb128 0x3
 7731 034c 0E       		.uleb128 0xe
 7732 034d 3A       		.uleb128 0x3a
 7733 034e 0B       		.uleb128 0xb
 7734 034f 3B       		.uleb128 0x3b
 7735 0350 0B       		.uleb128 0xb
 7736 0351 39       		.uleb128 0x39
 7737 0352 0B       		.uleb128 0xb
 7738 0353 00       		.byte	0
 7739 0354 00       		.byte	0
 7740 0355 35       		.uleb128 0x35
 7741 0356 2E       		.uleb128 0x2e
 7742 0357 00       		.byte	0
 7743 0358 3F       		.uleb128 0x3f
 7744 0359 0C       		.uleb128 0xc
 7745 035a 3C       		.uleb128 0x3c
 7746 035b 0C       		.uleb128 0xc
 7747 035c 8740     		.uleb128 0x2007
 7748 035e 0E       		.uleb128 0xe
ARM GAS  /tmp/ccjtHtwZ.s 			page 206


 7749 035f 03       		.uleb128 0x3
 7750 0360 0E       		.uleb128 0xe
 7751 0361 3A       		.uleb128 0x3a
 7752 0362 0B       		.uleb128 0xb
 7753 0363 3B       		.uleb128 0x3b
 7754 0364 05       		.uleb128 0x5
 7755 0365 39       		.uleb128 0x39
 7756 0366 0B       		.uleb128 0xb
 7757 0367 00       		.byte	0
 7758 0368 00       		.byte	0
 7759 0369 36       		.uleb128 0x36
 7760 036a 2E       		.uleb128 0x2e
 7761 036b 00       		.byte	0
 7762 036c 3F       		.uleb128 0x3f
 7763 036d 0C       		.uleb128 0xc
 7764 036e 3C       		.uleb128 0x3c
 7765 036f 0C       		.uleb128 0xc
 7766 0370 8740     		.uleb128 0x2007
 7767 0372 0E       		.uleb128 0xe
 7768 0373 03       		.uleb128 0x3
 7769 0374 0E       		.uleb128 0xe
 7770 0375 3A       		.uleb128 0x3a
 7771 0376 0B       		.uleb128 0xb
 7772 0377 3B       		.uleb128 0x3b
 7773 0378 0B       		.uleb128 0xb
 7774 0379 00       		.byte	0
 7775 037a 00       		.byte	0
 7776 037b 00       		.byte	0
 7777              		.section	.debug_loc,"",%progbits
 7778              	.Ldebug_loc0:
 7779              	.LLST145:
 7780 0000 F8070000 		.4byte	.LFB36-.Ltext0
 7781 0004 FA070000 		.4byte	.LCFI34-.Ltext0
 7782 0008 0200     		.2byte	0x2
 7783 000a 7D       		.byte	0x7d
 7784 000b 00       		.sleb128 0
 7785 000c FA070000 		.4byte	.LCFI34-.Ltext0
 7786 0010 3A080000 		.4byte	.LCFI35-.Ltext0
 7787 0014 0200     		.2byte	0x2
 7788 0016 7D       		.byte	0x7d
 7789 0017 10       		.sleb128 16
 7790 0018 3A080000 		.4byte	.LCFI35-.Ltext0
 7791 001c 3C080000 		.4byte	.LFE36-.Ltext0
 7792 0020 0200     		.2byte	0x2
 7793 0022 7D       		.byte	0x7d
 7794 0023 00       		.sleb128 0
 7795 0024 00000000 		.4byte	0
 7796 0028 00000000 		.4byte	0
 7797              	.LVUS146:
 7798 002c 00       		.uleb128 0
 7799 002d 00       		.uleb128 .LVU994
 7800 002e 00       		.uleb128 .LVU994
 7801 002f 00       		.uleb128 .LVU1006
 7802 0030 00       		.uleb128 .LVU1006
 7803 0031 00       		.uleb128 .LVU1007
 7804 0032 00       		.uleb128 .LVU1007
 7805 0033 00       		.uleb128 0
ARM GAS  /tmp/ccjtHtwZ.s 			page 207


 7806              	.LLST146:
 7807 0034 F8070000 		.4byte	.LVL286-.Ltext0
 7808 0038 03080000 		.4byte	.LVL288-1-.Ltext0
 7809 003c 0100     		.2byte	0x1
 7810 003e 50       		.byte	0x50
 7811 003f 03080000 		.4byte	.LVL288-1-.Ltext0
 7812 0043 3A080000 		.4byte	.LVL291-.Ltext0
 7813 0047 0100     		.2byte	0x1
 7814 0049 54       		.byte	0x54
 7815 004a 3A080000 		.4byte	.LVL291-.Ltext0
 7816 004e 3B080000 		.4byte	.LVL292-1-.Ltext0
 7817 0052 0100     		.2byte	0x1
 7818 0054 50       		.byte	0x50
 7819 0055 3B080000 		.4byte	.LVL292-1-.Ltext0
 7820 0059 3C080000 		.4byte	.LFE36-.Ltext0
 7821 005d 0400     		.2byte	0x4
 7822 005f F3       		.byte	0xf3
 7823 0060 01       		.uleb128 0x1
 7824 0061 50       		.byte	0x50
 7825 0062 9F       		.byte	0x9f
 7826 0063 00000000 		.4byte	0
 7827 0067 00000000 		.4byte	0
 7828              	.LVUS147:
 7829 006b 00       		.uleb128 0
 7830 006c 00       		.uleb128 .LVU994
 7831 006d 00       		.uleb128 .LVU994
 7832 006e 00       		.uleb128 .LVU1006
 7833 006f 00       		.uleb128 .LVU1006
 7834 0070 00       		.uleb128 0
 7835              	.LLST147:
 7836 0071 F8070000 		.4byte	.LVL286-.Ltext0
 7837 0075 03080000 		.4byte	.LVL288-1-.Ltext0
 7838 0079 0100     		.2byte	0x1
 7839 007b 51       		.byte	0x51
 7840 007c 03080000 		.4byte	.LVL288-1-.Ltext0
 7841 0080 3A080000 		.4byte	.LVL291-.Ltext0
 7842 0084 0100     		.2byte	0x1
 7843 0086 55       		.byte	0x55
 7844 0087 3A080000 		.4byte	.LVL291-.Ltext0
 7845 008b 3C080000 		.4byte	.LFE36-.Ltext0
 7846 008f 0400     		.2byte	0x4
 7847 0091 F3       		.byte	0xf3
 7848 0092 01       		.uleb128 0x1
 7849 0093 51       		.byte	0x51
 7850 0094 9F       		.byte	0x9f
 7851 0095 00000000 		.4byte	0
 7852 0099 00000000 		.4byte	0
 7853              	.LVUS148:
 7854 009d 00       		.uleb128 0
 7855 009e 00       		.uleb128 .LVU994
 7856 009f 00       		.uleb128 .LVU994
 7857 00a0 00       		.uleb128 .LVU1006
 7858 00a1 00       		.uleb128 .LVU1006
 7859 00a2 00       		.uleb128 0
 7860              	.LLST148:
 7861 00a3 F8070000 		.4byte	.LVL286-.Ltext0
 7862 00a7 03080000 		.4byte	.LVL288-1-.Ltext0
ARM GAS  /tmp/ccjtHtwZ.s 			page 208


 7863 00ab 0100     		.2byte	0x1
 7864 00ad 52       		.byte	0x52
 7865 00ae 03080000 		.4byte	.LVL288-1-.Ltext0
 7866 00b2 3A080000 		.4byte	.LVL291-.Ltext0
 7867 00b6 0100     		.2byte	0x1
 7868 00b8 56       		.byte	0x56
 7869 00b9 3A080000 		.4byte	.LVL291-.Ltext0
 7870 00bd 3C080000 		.4byte	.LFE36-.Ltext0
 7871 00c1 0400     		.2byte	0x4
 7872 00c3 F3       		.byte	0xf3
 7873 00c4 01       		.uleb128 0x1
 7874 00c5 52       		.byte	0x52
 7875 00c6 9F       		.byte	0x9f
 7876 00c7 00000000 		.4byte	0
 7877 00cb 00000000 		.4byte	0
 7878              	.LVUS149:
 7879 00cf 00       		.uleb128 .LVU991
 7880 00d0 00       		.uleb128 .LVU994
 7881 00d1 00       		.uleb128 .LVU994
 7882 00d2 00       		.uleb128 .LVU1006
 7883 00d3 00       		.uleb128 .LVU1006
 7884 00d4 00       		.uleb128 .LVU1007
 7885 00d5 00       		.uleb128 .LVU1007
 7886 00d6 00       		.uleb128 0
 7887              	.LLST149:
 7888 00d7 FC070000 		.4byte	.LVL287-.Ltext0
 7889 00db 03080000 		.4byte	.LVL288-1-.Ltext0
 7890 00df 0100     		.2byte	0x1
 7891 00e1 50       		.byte	0x50
 7892 00e2 03080000 		.4byte	.LVL288-1-.Ltext0
 7893 00e6 3A080000 		.4byte	.LVL291-.Ltext0
 7894 00ea 0100     		.2byte	0x1
 7895 00ec 54       		.byte	0x54
 7896 00ed 3A080000 		.4byte	.LVL291-.Ltext0
 7897 00f1 3B080000 		.4byte	.LVL292-1-.Ltext0
 7898 00f5 0100     		.2byte	0x1
 7899 00f7 50       		.byte	0x50
 7900 00f8 3B080000 		.4byte	.LVL292-1-.Ltext0
 7901 00fc 3C080000 		.4byte	.LFE36-.Ltext0
 7902 0100 0400     		.2byte	0x4
 7903 0102 F3       		.byte	0xf3
 7904 0103 01       		.uleb128 0x1
 7905 0104 50       		.byte	0x50
 7906 0105 9F       		.byte	0x9f
 7907 0106 00000000 		.4byte	0
 7908 010a 00000000 		.4byte	0
 7909              	.LVUS142:
 7910 010e 00       		.uleb128 0
 7911 010f 00       		.uleb128 .LVU984
 7912 0110 00       		.uleb128 .LVU984
 7913 0111 00       		.uleb128 0
 7914              	.LLST142:
 7915 0112 EC070000 		.4byte	.LVL282-.Ltext0
 7916 0116 F0070000 		.4byte	.LVL284-.Ltext0
 7917 011a 0100     		.2byte	0x1
 7918 011c 50       		.byte	0x50
 7919 011d F0070000 		.4byte	.LVL284-.Ltext0
ARM GAS  /tmp/ccjtHtwZ.s 			page 209


 7920 0121 F8070000 		.4byte	.LFE35-.Ltext0
 7921 0125 0400     		.2byte	0x4
 7922 0127 F3       		.byte	0xf3
 7923 0128 01       		.uleb128 0x1
 7924 0129 50       		.byte	0x50
 7925 012a 9F       		.byte	0x9f
 7926 012b 00000000 		.4byte	0
 7927 012f 00000000 		.4byte	0
 7928              	.LVUS143:
 7929 0133 00       		.uleb128 .LVU982
 7930 0134 00       		.uleb128 .LVU984
 7931 0135 00       		.uleb128 .LVU984
 7932 0136 00       		.uleb128 .LVU985
 7933              	.LLST143:
 7934 0137 EE070000 		.4byte	.LVL283-.Ltext0
 7935 013b F0070000 		.4byte	.LVL284-.Ltext0
 7936 013f 0A00     		.2byte	0xa
 7937 0141 70       		.byte	0x70
 7938 0142 3C       		.sleb128 60
 7939 0143 06       		.byte	0x6
 7940 0144 73       		.byte	0x73
 7941 0145 00       		.sleb128 0
 7942 0146 29       		.byte	0x29
 7943 0147 08       		.byte	0x8
 7944 0148 FF       		.byte	0xff
 7945 0149 1A       		.byte	0x1a
 7946 014a 9F       		.byte	0x9f
 7947 014b F0070000 		.4byte	.LVL284-.Ltext0
 7948 014f F2070000 		.4byte	.LVL285-.Ltext0
 7949 0153 0900     		.2byte	0x9
 7950 0155 70       		.byte	0x70
 7951 0156 00       		.sleb128 0
 7952 0157 73       		.byte	0x73
 7953 0158 00       		.sleb128 0
 7954 0159 29       		.byte	0x29
 7955 015a 08       		.byte	0x8
 7956 015b FF       		.byte	0xff
 7957 015c 1A       		.byte	0x1a
 7958 015d 9F       		.byte	0x9f
 7959 015e 00000000 		.4byte	0
 7960 0162 00000000 		.4byte	0
 7961              	.LVUS144:
 7962 0166 03       		.uleb128 .LVU979
 7963 0167 00       		.uleb128 .LVU984
 7964 0168 00       		.uleb128 .LVU984
 7965 0169 00       		.uleb128 0
 7966              	.LLST144:
 7967 016a EC070000 		.4byte	.LVL282-.Ltext0
 7968 016e F0070000 		.4byte	.LVL284-.Ltext0
 7969 0172 0100     		.2byte	0x1
 7970 0174 50       		.byte	0x50
 7971 0175 F0070000 		.4byte	.LVL284-.Ltext0
 7972 0179 F8070000 		.4byte	.LFE35-.Ltext0
 7973 017d 0400     		.2byte	0x4
 7974 017f F3       		.byte	0xf3
 7975 0180 01       		.uleb128 0x1
 7976 0181 50       		.byte	0x50
ARM GAS  /tmp/ccjtHtwZ.s 			page 210


 7977 0182 9F       		.byte	0x9f
 7978 0183 00000000 		.4byte	0
 7979 0187 00000000 		.4byte	0
 7980              	.LVUS139:
 7981 018b 00       		.uleb128 0
 7982 018c 00       		.uleb128 .LVU973
 7983 018d 00       		.uleb128 .LVU973
 7984 018e 00       		.uleb128 0
 7985              	.LLST139:
 7986 018f E2070000 		.4byte	.LVL279-.Ltext0
 7987 0193 E4070000 		.4byte	.LVL280-.Ltext0
 7988 0197 0100     		.2byte	0x1
 7989 0199 50       		.byte	0x50
 7990 019a E4070000 		.4byte	.LVL280-.Ltext0
 7991 019e EC070000 		.4byte	.LFE33-.Ltext0
 7992 01a2 0400     		.2byte	0x4
 7993 01a4 F3       		.byte	0xf3
 7994 01a5 01       		.uleb128 0x1
 7995 01a6 50       		.byte	0x50
 7996 01a7 9F       		.byte	0x9f
 7997 01a8 00000000 		.4byte	0
 7998 01ac 00000000 		.4byte	0
 7999              	.LVUS140:
 8000 01b0 00       		.uleb128 .LVU973
 8001 01b1 00       		.uleb128 .LVU975
 8002              	.LLST140:
 8003 01b2 E4070000 		.4byte	.LVL280-.Ltext0
 8004 01b6 E8070000 		.4byte	.LVL281-.Ltext0
 8005 01ba 0800     		.2byte	0x8
 8006 01bc 70       		.byte	0x70
 8007 01bd 00       		.sleb128 0
 8008 01be 30       		.byte	0x30
 8009 01bf 29       		.byte	0x29
 8010 01c0 08       		.byte	0x8
 8011 01c1 FF       		.byte	0xff
 8012 01c2 1A       		.byte	0x1a
 8013 01c3 9F       		.byte	0x9f
 8014 01c4 00000000 		.4byte	0
 8015 01c8 00000000 		.4byte	0
 8016              	.LVUS141:
 8017 01cc 03       		.uleb128 .LVU970
 8018 01cd 00       		.uleb128 .LVU973
 8019 01ce 00       		.uleb128 .LVU973
 8020 01cf 00       		.uleb128 0
 8021              	.LLST141:
 8022 01d0 E2070000 		.4byte	.LVL279-.Ltext0
 8023 01d4 E4070000 		.4byte	.LVL280-.Ltext0
 8024 01d8 0100     		.2byte	0x1
 8025 01da 50       		.byte	0x50
 8026 01db E4070000 		.4byte	.LVL280-.Ltext0
 8027 01df EC070000 		.4byte	.LFE33-.Ltext0
 8028 01e3 0400     		.2byte	0x4
 8029 01e5 F3       		.byte	0xf3
 8030 01e6 01       		.uleb128 0x1
 8031 01e7 50       		.byte	0x50
 8032 01e8 9F       		.byte	0x9f
 8033 01e9 00000000 		.4byte	0
ARM GAS  /tmp/ccjtHtwZ.s 			page 211


 8034 01ed 00000000 		.4byte	0
 8035              	.LLST0:
 8036 01f1 00000000 		.4byte	.LFB32-.Ltext0
 8037 01f5 02000000 		.4byte	.LCFI0-.Ltext0
 8038 01f9 0200     		.2byte	0x2
 8039 01fb 7D       		.byte	0x7d
 8040 01fc 00       		.sleb128 0
 8041 01fd 02000000 		.4byte	.LCFI0-.Ltext0
 8042 0201 16000000 		.4byte	.LFE32-.Ltext0
 8043 0205 0200     		.2byte	0x2
 8044 0207 7D       		.byte	0x7d
 8045 0208 08       		.sleb128 8
 8046 0209 00000000 		.4byte	0
 8047 020d 00000000 		.4byte	0
 8048              	.LVUS1:
 8049 0211 00       		.uleb128 0
 8050 0212 00       		.uleb128 .LVU6
 8051 0213 00       		.uleb128 .LVU6
 8052 0214 00       		.uleb128 .LVU8
 8053 0215 00       		.uleb128 .LVU8
 8054 0216 00       		.uleb128 0
 8055              	.LLST1:
 8056 0217 00000000 		.4byte	.LVL0-.Ltext0
 8057 021b 07000000 		.4byte	.LVL1-1-.Ltext0
 8058 021f 0100     		.2byte	0x1
 8059 0221 50       		.byte	0x50
 8060 0222 07000000 		.4byte	.LVL1-1-.Ltext0
 8061 0226 0A000000 		.4byte	.LVL2-.Ltext0
 8062 022a 0100     		.2byte	0x1
 8063 022c 54       		.byte	0x54
 8064 022d 0A000000 		.4byte	.LVL2-.Ltext0
 8065 0231 16000000 		.4byte	.LFE32-.Ltext0
 8066 0235 0400     		.2byte	0x4
 8067 0237 F3       		.byte	0xf3
 8068 0238 01       		.uleb128 0x1
 8069 0239 50       		.byte	0x50
 8070 023a 9F       		.byte	0x9f
 8071 023b 00000000 		.4byte	0
 8072 023f 00000000 		.4byte	0
 8073              	.LVUS2:
 8074 0243 00       		.uleb128 .LVU8
 8075 0244 00       		.uleb128 0
 8076              	.LLST2:
 8077 0245 0A000000 		.4byte	.LVL2-.Ltext0
 8078 0249 16000000 		.4byte	.LFE32-.Ltext0
 8079 024d 0800     		.2byte	0x8
 8080 024f 74       		.byte	0x74
 8081 0250 00       		.sleb128 0
 8082 0251 30       		.byte	0x30
 8083 0252 29       		.byte	0x29
 8084 0253 08       		.byte	0x8
 8085 0254 FF       		.byte	0xff
 8086 0255 1A       		.byte	0x1a
 8087 0256 9F       		.byte	0x9f
 8088 0257 00000000 		.4byte	0
 8089 025b 00000000 		.4byte	0
 8090              	.LLST12:
ARM GAS  /tmp/ccjtHtwZ.s 			page 212


 8091 025f A8000000 		.4byte	.LFB31-.Ltext0
 8092 0263 AA000000 		.4byte	.LCFI6-.Ltext0
 8093 0267 0200     		.2byte	0x2
 8094 0269 7D       		.byte	0x7d
 8095 026a 00       		.sleb128 0
 8096 026b AA000000 		.4byte	.LCFI6-.Ltext0
 8097 026f E4000000 		.4byte	.LCFI7-.Ltext0
 8098 0273 0200     		.2byte	0x2
 8099 0275 7D       		.byte	0x7d
 8100 0276 10       		.sleb128 16
 8101 0277 E4000000 		.4byte	.LCFI7-.Ltext0
 8102 027b E8000000 		.4byte	.LCFI8-.Ltext0
 8103 027f 0200     		.2byte	0x2
 8104 0281 7D       		.byte	0x7d
 8105 0282 00       		.sleb128 0
 8106 0283 E8000000 		.4byte	.LCFI8-.Ltext0
 8107 0287 18010000 		.4byte	.LFE31-.Ltext0
 8108 028b 0200     		.2byte	0x2
 8109 028d 7D       		.byte	0x7d
 8110 028e 10       		.sleb128 16
 8111 028f 00000000 		.4byte	0
 8112 0293 00000000 		.4byte	0
 8113              	.LVUS13:
 8114 0297 00       		.uleb128 0
 8115 0298 00       		.uleb128 .LVU101
 8116 0299 00       		.uleb128 .LVU101
 8117 029a 00       		.uleb128 .LVU121
 8118 029b 00       		.uleb128 .LVU121
 8119 029c 00       		.uleb128 .LVU122
 8120 029d 00       		.uleb128 .LVU122
 8121 029e 00       		.uleb128 0
 8122              	.LLST13:
 8123 029f A8000000 		.4byte	.LVL26-.Ltext0
 8124 02a3 AF000000 		.4byte	.LVL27-1-.Ltext0
 8125 02a7 0100     		.2byte	0x1
 8126 02a9 50       		.byte	0x50
 8127 02aa AF000000 		.4byte	.LVL27-1-.Ltext0
 8128 02ae E4000000 		.4byte	.LVL33-.Ltext0
 8129 02b2 0100     		.2byte	0x1
 8130 02b4 54       		.byte	0x54
 8131 02b5 E4000000 		.4byte	.LVL33-.Ltext0
 8132 02b9 E8000000 		.4byte	.LVL34-.Ltext0
 8133 02bd 0400     		.2byte	0x4
 8134 02bf F3       		.byte	0xf3
 8135 02c0 01       		.uleb128 0x1
 8136 02c1 50       		.byte	0x50
 8137 02c2 9F       		.byte	0x9f
 8138 02c3 E8000000 		.4byte	.LVL34-.Ltext0
 8139 02c7 18010000 		.4byte	.LFE31-.Ltext0
 8140 02cb 0100     		.2byte	0x1
 8141 02cd 54       		.byte	0x54
 8142 02ce 00000000 		.4byte	0
 8143 02d2 00000000 		.4byte	0
 8144              	.LVUS14:
 8145 02d6 00       		.uleb128 .LVU105
 8146 02d7 00       		.uleb128 .LVU113
 8147 02d8 00       		.uleb128 .LVU122
ARM GAS  /tmp/ccjtHtwZ.s 			page 213


 8148 02d9 00       		.uleb128 .LVU131
 8149 02da 00       		.uleb128 .LVU132
 8150 02db 00       		.uleb128 .LVU133
 8151              	.LLST14:
 8152 02dc BA000000 		.4byte	.LVL28-.Ltext0
 8153 02e0 D0000000 		.4byte	.LVL31-.Ltext0
 8154 02e4 0100     		.2byte	0x1
 8155 02e6 55       		.byte	0x55
 8156 02e7 E8000000 		.4byte	.LVL34-.Ltext0
 8157 02eb FC000000 		.4byte	.LVL37-.Ltext0
 8158 02ef 0100     		.2byte	0x1
 8159 02f1 55       		.byte	0x55
 8160 02f2 FE000000 		.4byte	.LVL38-.Ltext0
 8161 02f6 00010000 		.4byte	.LVL39-.Ltext0
 8162 02fa 0100     		.2byte	0x1
 8163 02fc 55       		.byte	0x55
 8164 02fd 00000000 		.4byte	0
 8165 0301 00000000 		.4byte	0
 8166              	.LVUS15:
 8167 0305 00       		.uleb128 .LVU115
 8168 0306 00       		.uleb128 .LVU121
 8169 0307 00       		.uleb128 .LVU133
 8170 0308 00       		.uleb128 .LVU143
 8171 0309 00       		.uleb128 .LVU144
 8172 030a 00       		.uleb128 0
 8173              	.LLST15:
 8174 030b D6000000 		.4byte	.LVL32-.Ltext0
 8175 030f E4000000 		.4byte	.LVL33-.Ltext0
 8176 0313 0100     		.2byte	0x1
 8177 0315 55       		.byte	0x55
 8178 0316 00010000 		.4byte	.LVL39-.Ltext0
 8179 031a 14010000 		.4byte	.LVL42-.Ltext0
 8180 031e 0100     		.2byte	0x1
 8181 0320 55       		.byte	0x55
 8182 0321 16010000 		.4byte	.LVL43-.Ltext0
 8183 0325 18010000 		.4byte	.LFE31-.Ltext0
 8184 0329 0100     		.2byte	0x1
 8185 032b 55       		.byte	0x55
 8186 032c 00000000 		.4byte	0
 8187 0330 00000000 		.4byte	0
 8188              	.LLST9:
 8189 0334 80000000 		.4byte	.LFB30-.Ltext0
 8190 0338 88000000 		.4byte	.LCFI2-.Ltext0
 8191 033c 0200     		.2byte	0x2
 8192 033e 7D       		.byte	0x7d
 8193 033f 00       		.sleb128 0
 8194 0340 88000000 		.4byte	.LCFI2-.Ltext0
 8195 0344 A0000000 		.4byte	.LCFI3-.Ltext0
 8196 0348 0200     		.2byte	0x2
 8197 034a 7D       		.byte	0x7d
 8198 034b 04       		.sleb128 4
 8199 034c A0000000 		.4byte	.LCFI3-.Ltext0
 8200 0350 A4000000 		.4byte	.LCFI4-.Ltext0
 8201 0354 0200     		.2byte	0x2
 8202 0356 7D       		.byte	0x7d
 8203 0357 00       		.sleb128 0
 8204 0358 A4000000 		.4byte	.LCFI4-.Ltext0
ARM GAS  /tmp/ccjtHtwZ.s 			page 214


 8205 035c A6000000 		.4byte	.LCFI5-.Ltext0
 8206 0360 0200     		.2byte	0x2
 8207 0362 7D       		.byte	0x7d
 8208 0363 04       		.sleb128 4
 8209 0364 A6000000 		.4byte	.LCFI5-.Ltext0
 8210 0368 A8000000 		.4byte	.LFE30-.Ltext0
 8211 036c 0200     		.2byte	0x2
 8212 036e 7D       		.byte	0x7d
 8213 036f 00       		.sleb128 0
 8214 0370 00000000 		.4byte	0
 8215 0374 00000000 		.4byte	0
 8216              	.LVUS10:
 8217 0378 00       		.uleb128 0
 8218 0379 00       		.uleb128 .LVU78
 8219 037a 00       		.uleb128 .LVU78
 8220 037b 00       		.uleb128 .LVU95
 8221 037c 00       		.uleb128 .LVU95
 8222 037d 00       		.uleb128 .LVU95
 8223 037e 00       		.uleb128 .LVU95
 8224 037f 00       		.uleb128 0
 8225              	.LLST10:
 8226 0380 80000000 		.4byte	.LVL22-.Ltext0
 8227 0384 86000000 		.4byte	.LVL23-.Ltext0
 8228 0388 0100     		.2byte	0x1
 8229 038a 50       		.byte	0x50
 8230 038b 86000000 		.4byte	.LVL23-.Ltext0
 8231 038f A3000000 		.4byte	.LVL25-1-.Ltext0
 8232 0393 0100     		.2byte	0x1
 8233 0395 53       		.byte	0x53
 8234 0396 A3000000 		.4byte	.LVL25-1-.Ltext0
 8235 039a A4000000 		.4byte	.LVL25-.Ltext0
 8236 039e 0400     		.2byte	0x4
 8237 03a0 F3       		.byte	0xf3
 8238 03a1 01       		.uleb128 0x1
 8239 03a2 50       		.byte	0x50
 8240 03a3 9F       		.byte	0x9f
 8241 03a4 A4000000 		.4byte	.LVL25-.Ltext0
 8242 03a8 A8000000 		.4byte	.LFE30-.Ltext0
 8243 03ac 0100     		.2byte	0x1
 8244 03ae 53       		.byte	0x53
 8245 03af 00000000 		.4byte	0
 8246 03b3 00000000 		.4byte	0
 8247              	.LVUS11:
 8248 03b7 00       		.uleb128 0
 8249 03b8 00       		.uleb128 .LVU83
 8250 03b9 00       		.uleb128 .LVU83
 8251 03ba 00       		.uleb128 .LVU95
 8252 03bb 00       		.uleb128 .LVU95
 8253 03bc 00       		.uleb128 .LVU95
 8254 03bd 00       		.uleb128 .LVU95
 8255 03be 00       		.uleb128 0
 8256              	.LLST11:
 8257 03bf 80000000 		.4byte	.LVL22-.Ltext0
 8258 03c3 8E000000 		.4byte	.LVL24-.Ltext0
 8259 03c7 0100     		.2byte	0x1
 8260 03c9 51       		.byte	0x51
 8261 03ca 8E000000 		.4byte	.LVL24-.Ltext0
ARM GAS  /tmp/ccjtHtwZ.s 			page 215


 8262 03ce A3000000 		.4byte	.LVL25-1-.Ltext0
 8263 03d2 0100     		.2byte	0x1
 8264 03d4 50       		.byte	0x50
 8265 03d5 A3000000 		.4byte	.LVL25-1-.Ltext0
 8266 03d9 A4000000 		.4byte	.LVL25-.Ltext0
 8267 03dd 0400     		.2byte	0x4
 8268 03df F3       		.byte	0xf3
 8269 03e0 01       		.uleb128 0x1
 8270 03e1 51       		.byte	0x51
 8271 03e2 9F       		.byte	0x9f
 8272 03e3 A4000000 		.4byte	.LVL25-.Ltext0
 8273 03e7 A8000000 		.4byte	.LFE30-.Ltext0
 8274 03eb 0100     		.2byte	0x1
 8275 03ed 50       		.byte	0x50
 8276 03ee 00000000 		.4byte	0
 8277 03f2 00000000 		.4byte	0
 8278              	.LLST3:
 8279 03f6 16000000 		.4byte	.LFB29-.Ltext0
 8280 03fa 18000000 		.4byte	.LCFI1-.Ltext0
 8281 03fe 0200     		.2byte	0x2
 8282 0400 7D       		.byte	0x7d
 8283 0401 00       		.sleb128 0
 8284 0402 18000000 		.4byte	.LCFI1-.Ltext0
 8285 0406 80000000 		.4byte	.LFE29-.Ltext0
 8286 040a 0200     		.2byte	0x2
 8287 040c 7D       		.byte	0x7d
 8288 040d 18       		.sleb128 24
 8289 040e 00000000 		.4byte	0
 8290 0412 00000000 		.4byte	0
 8291              	.LVUS4:
 8292 0416 00       		.uleb128 0
 8293 0417 00       		.uleb128 .LVU27
 8294 0418 00       		.uleb128 .LVU27
 8295 0419 00       		.uleb128 .LVU38
 8296 041a 00       		.uleb128 .LVU38
 8297 041b 00       		.uleb128 .LVU42
 8298 041c 00       		.uleb128 .LVU42
 8299 041d 00       		.uleb128 .LVU51
 8300 041e 00       		.uleb128 .LVU51
 8301 041f 00       		.uleb128 .LVU53
 8302 0420 00       		.uleb128 .LVU53
 8303 0421 00       		.uleb128 0
 8304              	.LLST4:
 8305 0422 16000000 		.4byte	.LVL4-.Ltext0
 8306 0426 28000000 		.4byte	.LVL7-.Ltext0
 8307 042a 0100     		.2byte	0x1
 8308 042c 50       		.byte	0x50
 8309 042d 28000000 		.4byte	.LVL7-.Ltext0
 8310 0431 38000000 		.4byte	.LVL12-.Ltext0
 8311 0435 0100     		.2byte	0x1
 8312 0437 54       		.byte	0x54
 8313 0438 38000000 		.4byte	.LVL12-.Ltext0
 8314 043c 3C000000 		.4byte	.LVL13-.Ltext0
 8315 0440 0100     		.2byte	0x1
 8316 0442 50       		.byte	0x50
 8317 0443 3C000000 		.4byte	.LVL13-.Ltext0
 8318 0447 54000000 		.4byte	.LVL15-.Ltext0
ARM GAS  /tmp/ccjtHtwZ.s 			page 216


 8319 044b 0100     		.2byte	0x1
 8320 044d 54       		.byte	0x54
 8321 044e 54000000 		.4byte	.LVL15-.Ltext0
 8322 0452 56000000 		.4byte	.LVL16-.Ltext0
 8323 0456 0100     		.2byte	0x1
 8324 0458 50       		.byte	0x50
 8325 0459 56000000 		.4byte	.LVL16-.Ltext0
 8326 045d 80000000 		.4byte	.LFE29-.Ltext0
 8327 0461 0100     		.2byte	0x1
 8328 0463 54       		.byte	0x54
 8329 0464 00000000 		.4byte	0
 8330 0468 00000000 		.4byte	0
 8331              	.LVUS5:
 8332 046c 00       		.uleb128 0
 8333 046d 00       		.uleb128 .LVU28
 8334 046e 00       		.uleb128 .LVU28
 8335 046f 00       		.uleb128 .LVU38
 8336 0470 00       		.uleb128 .LVU38
 8337 0471 00       		.uleb128 .LVU43
 8338 0472 00       		.uleb128 .LVU43
 8339 0473 00       		.uleb128 .LVU51
 8340 0474 00       		.uleb128 .LVU51
 8341 0475 00       		.uleb128 .LVU54
 8342 0476 00       		.uleb128 .LVU54
 8343 0477 00       		.uleb128 0
 8344              	.LLST5:
 8345 0478 16000000 		.4byte	.LVL4-.Ltext0
 8346 047c 2B000000 		.4byte	.LVL8-1-.Ltext0
 8347 0480 0100     		.2byte	0x1
 8348 0482 51       		.byte	0x51
 8349 0483 2B000000 		.4byte	.LVL8-1-.Ltext0
 8350 0487 38000000 		.4byte	.LVL12-.Ltext0
 8351 048b 0400     		.2byte	0x4
 8352 048d F3       		.byte	0xf3
 8353 048e 01       		.uleb128 0x1
 8354 048f 51       		.byte	0x51
 8355 0490 9F       		.byte	0x9f
 8356 0491 38000000 		.4byte	.LVL12-.Ltext0
 8357 0495 3F000000 		.4byte	.LVL14-1-.Ltext0
 8358 0499 0100     		.2byte	0x1
 8359 049b 51       		.byte	0x51
 8360 049c 3F000000 		.4byte	.LVL14-1-.Ltext0
 8361 04a0 54000000 		.4byte	.LVL15-.Ltext0
 8362 04a4 0400     		.2byte	0x4
 8363 04a6 F3       		.byte	0xf3
 8364 04a7 01       		.uleb128 0x1
 8365 04a8 51       		.byte	0x51
 8366 04a9 9F       		.byte	0x9f
 8367 04aa 54000000 		.4byte	.LVL15-.Ltext0
 8368 04ae 59000000 		.4byte	.LVL17-1-.Ltext0
 8369 04b2 0100     		.2byte	0x1
 8370 04b4 51       		.byte	0x51
 8371 04b5 59000000 		.4byte	.LVL17-1-.Ltext0
 8372 04b9 80000000 		.4byte	.LFE29-.Ltext0
 8373 04bd 0400     		.2byte	0x4
 8374 04bf F3       		.byte	0xf3
 8375 04c0 01       		.uleb128 0x1
ARM GAS  /tmp/ccjtHtwZ.s 			page 217


 8376 04c1 51       		.byte	0x51
 8377 04c2 9F       		.byte	0x9f
 8378 04c3 00000000 		.4byte	0
 8379 04c7 00000000 		.4byte	0
 8380              	.LVUS6:
 8381 04cb 00       		.uleb128 0
 8382 04cc 00       		.uleb128 .LVU19
 8383 04cd 00       		.uleb128 .LVU19
 8384 04ce 00       		.uleb128 .LVU29
 8385 04cf 00       		.uleb128 .LVU29
 8386 04d0 00       		.uleb128 .LVU38
 8387 04d1 00       		.uleb128 .LVU38
 8388 04d2 00       		.uleb128 .LVU70
 8389 04d3 00       		.uleb128 .LVU70
 8390 04d4 00       		.uleb128 .LVU71
 8391 04d5 00       		.uleb128 .LVU71
 8392 04d6 00       		.uleb128 .LVU72
 8393 04d7 00       		.uleb128 .LVU72
 8394 04d8 00       		.uleb128 0
 8395              	.LLST6:
 8396 04d9 16000000 		.4byte	.LVL4-.Ltext0
 8397 04dd 1C000000 		.4byte	.LVL5-.Ltext0
 8398 04e1 0100     		.2byte	0x1
 8399 04e3 52       		.byte	0x52
 8400 04e4 1C000000 		.4byte	.LVL5-.Ltext0
 8401 04e8 2E000000 		.4byte	.LVL9-.Ltext0
 8402 04ec 0100     		.2byte	0x1
 8403 04ee 55       		.byte	0x55
 8404 04ef 2E000000 		.4byte	.LVL9-.Ltext0
 8405 04f3 38000000 		.4byte	.LVL12-.Ltext0
 8406 04f7 0400     		.2byte	0x4
 8407 04f9 F3       		.byte	0xf3
 8408 04fa 01       		.uleb128 0x1
 8409 04fb 52       		.byte	0x52
 8410 04fc 9F       		.byte	0x9f
 8411 04fd 38000000 		.4byte	.LVL12-.Ltext0
 8412 0501 7A000000 		.4byte	.LVL19-.Ltext0
 8413 0505 0100     		.2byte	0x1
 8414 0507 55       		.byte	0x55
 8415 0508 7A000000 		.4byte	.LVL19-.Ltext0
 8416 050c 7C000000 		.4byte	.LVL20-.Ltext0
 8417 0510 0400     		.2byte	0x4
 8418 0512 F3       		.byte	0xf3
 8419 0513 01       		.uleb128 0x1
 8420 0514 52       		.byte	0x52
 8421 0515 9F       		.byte	0x9f
 8422 0516 7C000000 		.4byte	.LVL20-.Ltext0
 8423 051a 7E000000 		.4byte	.LVL21-.Ltext0
 8424 051e 0100     		.2byte	0x1
 8425 0520 55       		.byte	0x55
 8426 0521 7E000000 		.4byte	.LVL21-.Ltext0
 8427 0525 80000000 		.4byte	.LFE29-.Ltext0
 8428 0529 0400     		.2byte	0x4
 8429 052b F3       		.byte	0xf3
 8430 052c 01       		.uleb128 0x1
 8431 052d 52       		.byte	0x52
 8432 052e 9F       		.byte	0x9f
ARM GAS  /tmp/ccjtHtwZ.s 			page 218


 8433 052f 00000000 		.4byte	0
 8434 0533 00000000 		.4byte	0
 8435              	.LVUS7:
 8436 0537 02       		.uleb128 .LVU14
 8437 0538 00       		.uleb128 .LVU29
 8438 0539 00       		.uleb128 .LVU29
 8439 053a 00       		.uleb128 .LVU31
 8440 053b 00       		.uleb128 .LVU31
 8441 053c 00       		.uleb128 .LVU38
 8442 053d 00       		.uleb128 .LVU38
 8443 053e 00       		.uleb128 0
 8444              	.LLST7:
 8445 053f 16000000 		.4byte	.LVL4-.Ltext0
 8446 0543 2E000000 		.4byte	.LVL9-.Ltext0
 8447 0547 0200     		.2byte	0x2
 8448 0549 30       		.byte	0x30
 8449 054a 9F       		.byte	0x9f
 8450 054b 2E000000 		.4byte	.LVL9-.Ltext0
 8451 054f 30000000 		.4byte	.LVL10-.Ltext0
 8452 0553 0100     		.2byte	0x1
 8453 0555 50       		.byte	0x50
 8454 0556 30000000 		.4byte	.LVL10-.Ltext0
 8455 055a 38000000 		.4byte	.LVL12-.Ltext0
 8456 055e 0100     		.2byte	0x1
 8457 0560 55       		.byte	0x55
 8458 0561 38000000 		.4byte	.LVL12-.Ltext0
 8459 0565 80000000 		.4byte	.LFE29-.Ltext0
 8460 0569 0200     		.2byte	0x2
 8461 056b 30       		.byte	0x30
 8462 056c 9F       		.byte	0x9f
 8463 056d 00000000 		.4byte	0
 8464 0571 00000000 		.4byte	0
 8465              	.LVUS8:
 8466 0575 00       		.uleb128 .LVU21
 8467 0576 00       		.uleb128 .LVU34
 8468 0577 00       		.uleb128 .LVU34
 8469 0578 00       		.uleb128 .LVU38
 8470 0579 00       		.uleb128 .LVU38
 8471 057a 00       		.uleb128 0
 8472              	.LLST8:
 8473 057b 20000000 		.4byte	.LVL6-.Ltext0
 8474 057f 32000000 		.4byte	.LVL11-.Ltext0
 8475 0583 0100     		.2byte	0x1
 8476 0585 56       		.byte	0x56
 8477 0586 32000000 		.4byte	.LVL11-.Ltext0
 8478 058a 38000000 		.4byte	.LVL12-.Ltext0
 8479 058e 0300     		.2byte	0x3
 8480 0590 76       		.byte	0x76
 8481 0591 7F       		.sleb128 -1
 8482 0592 9F       		.byte	0x9f
 8483 0593 38000000 		.4byte	.LVL12-.Ltext0
 8484 0597 80000000 		.4byte	.LFE29-.Ltext0
 8485 059b 0100     		.2byte	0x1
 8486 059d 56       		.byte	0x56
 8487 059e 00000000 		.4byte	0
 8488 05a2 00000000 		.4byte	0
 8489              	.LVUS138:
ARM GAS  /tmp/ccjtHtwZ.s 			page 219


 8490 05a6 00       		.uleb128 0
 8491 05a7 00       		.uleb128 .LVU966
 8492 05a8 00       		.uleb128 .LVU966
 8493 05a9 00       		.uleb128 0
 8494              	.LLST138:
 8495 05aa DC070000 		.4byte	.LVL277-.Ltext0
 8496 05ae E0070000 		.4byte	.LVL278-.Ltext0
 8497 05b2 0100     		.2byte	0x1
 8498 05b4 50       		.byte	0x50
 8499 05b5 E0070000 		.4byte	.LVL278-.Ltext0
 8500 05b9 E2070000 		.4byte	.LFE27-.Ltext0
 8501 05bd 0400     		.2byte	0x4
 8502 05bf F3       		.byte	0xf3
 8503 05c0 01       		.uleb128 0x1
 8504 05c1 50       		.byte	0x50
 8505 05c2 9F       		.byte	0x9f
 8506 05c3 00000000 		.4byte	0
 8507 05c7 00000000 		.4byte	0
 8508              	.LVUS137:
 8509 05cb 00       		.uleb128 0
 8510 05cc 00       		.uleb128 .LVU958
 8511 05cd 00       		.uleb128 .LVU958
 8512 05ce 00       		.uleb128 0
 8513              	.LLST137:
 8514 05cf D4070000 		.4byte	.LVL274-.Ltext0
 8515 05d3 D6070000 		.4byte	.LVL275-.Ltext0
 8516 05d7 0100     		.2byte	0x1
 8517 05d9 50       		.byte	0x50
 8518 05da D6070000 		.4byte	.LVL275-.Ltext0
 8519 05de D8070000 		.4byte	.LFE25-.Ltext0
 8520 05e2 0400     		.2byte	0x4
 8521 05e4 F3       		.byte	0xf3
 8522 05e5 01       		.uleb128 0x1
 8523 05e6 50       		.byte	0x50
 8524 05e7 9F       		.byte	0x9f
 8525 05e8 00000000 		.4byte	0
 8526 05ec 00000000 		.4byte	0
 8527              	.LVUS135:
 8528 05f0 00       		.uleb128 0
 8529 05f1 00       		.uleb128 .LVU954
 8530 05f2 00       		.uleb128 .LVU954
 8531 05f3 00       		.uleb128 0
 8532              	.LLST135:
 8533 05f4 D0070000 		.4byte	.LVL272-.Ltext0
 8534 05f8 D3070000 		.4byte	.LVL273-1-.Ltext0
 8535 05fc 0100     		.2byte	0x1
 8536 05fe 50       		.byte	0x50
 8537 05ff D3070000 		.4byte	.LVL273-1-.Ltext0
 8538 0603 D4070000 		.4byte	.LFE24-.Ltext0
 8539 0607 0400     		.2byte	0x4
 8540 0609 F3       		.byte	0xf3
 8541 060a 01       		.uleb128 0x1
 8542 060b 50       		.byte	0x50
 8543 060c 9F       		.byte	0x9f
 8544 060d 00000000 		.4byte	0
 8545 0611 00000000 		.4byte	0
 8546              	.LVUS136:
ARM GAS  /tmp/ccjtHtwZ.s 			page 220


 8547 0615 02       		.uleb128 .LVU951
 8548 0616 00       		.uleb128 .LVU954
 8549 0617 00       		.uleb128 .LVU954
 8550 0618 00       		.uleb128 0
 8551              	.LLST136:
 8552 0619 D0070000 		.4byte	.LVL272-.Ltext0
 8553 061d D3070000 		.4byte	.LVL273-1-.Ltext0
 8554 0621 0100     		.2byte	0x1
 8555 0623 50       		.byte	0x50
 8556 0624 D3070000 		.4byte	.LVL273-1-.Ltext0
 8557 0628 D4070000 		.4byte	.LFE24-.Ltext0
 8558 062c 0400     		.2byte	0x4
 8559 062e F3       		.byte	0xf3
 8560 062f 01       		.uleb128 0x1
 8561 0630 50       		.byte	0x50
 8562 0631 9F       		.byte	0x9f
 8563 0632 00000000 		.4byte	0
 8564 0636 00000000 		.4byte	0
 8565              	.LVUS132:
 8566 063a 00       		.uleb128 0
 8567 063b 00       		.uleb128 .LVU947
 8568 063c 00       		.uleb128 .LVU947
 8569 063d 00       		.uleb128 0
 8570              	.LLST132:
 8571 063e CC070000 		.4byte	.LVL270-.Ltext0
 8572 0642 CE070000 		.4byte	.LVL271-.Ltext0
 8573 0646 0100     		.2byte	0x1
 8574 0648 50       		.byte	0x50
 8575 0649 CE070000 		.4byte	.LVL271-.Ltext0
 8576 064d D0070000 		.4byte	.LFE23-.Ltext0
 8577 0651 0400     		.2byte	0x4
 8578 0653 F3       		.byte	0xf3
 8579 0654 01       		.uleb128 0x1
 8580 0655 50       		.byte	0x50
 8581 0656 9F       		.byte	0x9f
 8582 0657 00000000 		.4byte	0
 8583 065b 00000000 		.4byte	0
 8584              	.LVUS133:
 8585 065f 00       		.uleb128 .LVU947
 8586 0660 00       		.uleb128 0
 8587              	.LLST133:
 8588 0661 CE070000 		.4byte	.LVL271-.Ltext0
 8589 0665 D0070000 		.4byte	.LFE23-.Ltext0
 8590 0669 0100     		.2byte	0x1
 8591 066b 50       		.byte	0x50
 8592 066c 00000000 		.4byte	0
 8593 0670 00000000 		.4byte	0
 8594              	.LVUS134:
 8595 0674 03       		.uleb128 .LVU944
 8596 0675 00       		.uleb128 .LVU947
 8597 0676 00       		.uleb128 .LVU947
 8598 0677 00       		.uleb128 0
 8599              	.LLST134:
 8600 0678 CC070000 		.4byte	.LVL270-.Ltext0
 8601 067c CE070000 		.4byte	.LVL271-.Ltext0
 8602 0680 0100     		.2byte	0x1
 8603 0682 50       		.byte	0x50
ARM GAS  /tmp/ccjtHtwZ.s 			page 221


 8604 0683 CE070000 		.4byte	.LVL271-.Ltext0
 8605 0687 D0070000 		.4byte	.LFE23-.Ltext0
 8606 068b 0400     		.2byte	0x4
 8607 068d F3       		.byte	0xf3
 8608 068e 01       		.uleb128 0x1
 8609 068f 50       		.byte	0x50
 8610 0690 9F       		.byte	0x9f
 8611 0691 00000000 		.4byte	0
 8612 0695 00000000 		.4byte	0
 8613              	.LLST128:
 8614 0699 B6070000 		.4byte	.LFB22-.Ltext0
 8615 069d B8070000 		.4byte	.LCFI33-.Ltext0
 8616 06a1 0200     		.2byte	0x2
 8617 06a3 7D       		.byte	0x7d
 8618 06a4 00       		.sleb128 0
 8619 06a5 B8070000 		.4byte	.LCFI33-.Ltext0
 8620 06a9 CC070000 		.4byte	.LFE22-.Ltext0
 8621 06ad 0200     		.2byte	0x2
 8622 06af 7D       		.byte	0x7d
 8623 06b0 08       		.sleb128 8
 8624 06b1 00000000 		.4byte	0
 8625 06b5 00000000 		.4byte	0
 8626              	.LVUS129:
 8627 06b9 00       		.uleb128 0
 8628 06ba 00       		.uleb128 .LVU933
 8629 06bb 00       		.uleb128 .LVU933
 8630 06bc 00       		.uleb128 .LVU936
 8631 06bd 00       		.uleb128 .LVU936
 8632 06be 00       		.uleb128 0
 8633              	.LLST129:
 8634 06bf B6070000 		.4byte	.LVL264-.Ltext0
 8635 06c3 BD070000 		.4byte	.LVL266-1-.Ltext0
 8636 06c7 0100     		.2byte	0x1
 8637 06c9 50       		.byte	0x50
 8638 06ca BD070000 		.4byte	.LVL266-1-.Ltext0
 8639 06ce C2070000 		.4byte	.LVL267-.Ltext0
 8640 06d2 0100     		.2byte	0x1
 8641 06d4 54       		.byte	0x54
 8642 06d5 C2070000 		.4byte	.LVL267-.Ltext0
 8643 06d9 CC070000 		.4byte	.LFE22-.Ltext0
 8644 06dd 0400     		.2byte	0x4
 8645 06df F3       		.byte	0xf3
 8646 06e0 01       		.uleb128 0x1
 8647 06e1 50       		.byte	0x50
 8648 06e2 9F       		.byte	0x9f
 8649 06e3 00000000 		.4byte	0
 8650 06e7 00000000 		.4byte	0
 8651              	.LVUS130:
 8652 06eb 00       		.uleb128 .LVU937
 8653 06ec 00       		.uleb128 0
 8654              	.LLST130:
 8655 06ed C4070000 		.4byte	.LVL268-.Ltext0
 8656 06f1 CC070000 		.4byte	.LFE22-.Ltext0
 8657 06f5 0100     		.2byte	0x1
 8658 06f7 54       		.byte	0x54
 8659 06f8 00000000 		.4byte	0
 8660 06fc 00000000 		.4byte	0
ARM GAS  /tmp/ccjtHtwZ.s 			page 222


 8661              	.LVUS131:
 8662 0700 00       		.uleb128 .LVU931
 8663 0701 00       		.uleb128 .LVU933
 8664 0702 00       		.uleb128 .LVU933
 8665 0703 00       		.uleb128 .LVU936
 8666 0704 00       		.uleb128 .LVU936
 8667 0705 00       		.uleb128 0
 8668              	.LLST131:
 8669 0706 BA070000 		.4byte	.LVL265-.Ltext0
 8670 070a BD070000 		.4byte	.LVL266-1-.Ltext0
 8671 070e 0100     		.2byte	0x1
 8672 0710 50       		.byte	0x50
 8673 0711 BD070000 		.4byte	.LVL266-1-.Ltext0
 8674 0715 C2070000 		.4byte	.LVL267-.Ltext0
 8675 0719 0100     		.2byte	0x1
 8676 071b 54       		.byte	0x54
 8677 071c C2070000 		.4byte	.LVL267-.Ltext0
 8678 0720 CC070000 		.4byte	.LFE22-.Ltext0
 8679 0724 0400     		.2byte	0x4
 8680 0726 F3       		.byte	0xf3
 8681 0727 01       		.uleb128 0x1
 8682 0728 50       		.byte	0x50
 8683 0729 9F       		.byte	0x9f
 8684 072a 00000000 		.4byte	0
 8685 072e 00000000 		.4byte	0
 8686              	.LLST125:
 8687 0732 A4070000 		.4byte	.LFB21-.Ltext0
 8688 0736 A6070000 		.4byte	.LCFI32-.Ltext0
 8689 073a 0200     		.2byte	0x2
 8690 073c 7D       		.byte	0x7d
 8691 073d 00       		.sleb128 0
 8692 073e A6070000 		.4byte	.LCFI32-.Ltext0
 8693 0742 B6070000 		.4byte	.LFE21-.Ltext0
 8694 0746 0200     		.2byte	0x2
 8695 0748 7D       		.byte	0x7d
 8696 0749 08       		.sleb128 8
 8697 074a 00000000 		.4byte	0
 8698 074e 00000000 		.4byte	0
 8699              	.LVUS126:
 8700 0752 00       		.uleb128 0
 8701 0753 00       		.uleb128 .LVU920
 8702 0754 00       		.uleb128 .LVU920
 8703 0755 00       		.uleb128 .LVU922
 8704 0756 00       		.uleb128 .LVU922
 8705 0757 00       		.uleb128 0
 8706              	.LLST126:
 8707 0758 A4070000 		.4byte	.LVL260-.Ltext0
 8708 075c AB070000 		.4byte	.LVL261-1-.Ltext0
 8709 0760 0100     		.2byte	0x1
 8710 0762 50       		.byte	0x50
 8711 0763 AB070000 		.4byte	.LVL261-1-.Ltext0
 8712 0767 AE070000 		.4byte	.LVL262-.Ltext0
 8713 076b 0100     		.2byte	0x1
 8714 076d 54       		.byte	0x54
 8715 076e AE070000 		.4byte	.LVL262-.Ltext0
 8716 0772 B6070000 		.4byte	.LFE21-.Ltext0
 8717 0776 0400     		.2byte	0x4
ARM GAS  /tmp/ccjtHtwZ.s 			page 223


 8718 0778 F3       		.byte	0xf3
 8719 0779 01       		.uleb128 0x1
 8720 077a 50       		.byte	0x50
 8721 077b 9F       		.byte	0x9f
 8722 077c 00000000 		.4byte	0
 8723 0780 00000000 		.4byte	0
 8724              	.LVUS127:
 8725 0784 00       		.uleb128 .LVU922
 8726 0785 00       		.uleb128 0
 8727              	.LLST127:
 8728 0786 AE070000 		.4byte	.LVL262-.Ltext0
 8729 078a B6070000 		.4byte	.LFE21-.Ltext0
 8730 078e 0100     		.2byte	0x1
 8731 0790 54       		.byte	0x54
 8732 0791 00000000 		.4byte	0
 8733 0795 00000000 		.4byte	0
 8734              	.LLST116:
 8735 0799 74070000 		.4byte	.LFB20-.Ltext0
 8736 079d 76070000 		.4byte	.LCFI31-.Ltext0
 8737 07a1 0200     		.2byte	0x2
 8738 07a3 7D       		.byte	0x7d
 8739 07a4 00       		.sleb128 0
 8740 07a5 76070000 		.4byte	.LCFI31-.Ltext0
 8741 07a9 A4070000 		.4byte	.LFE20-.Ltext0
 8742 07ad 0200     		.2byte	0x2
 8743 07af 7D       		.byte	0x7d
 8744 07b0 10       		.sleb128 16
 8745 07b1 00000000 		.4byte	0
 8746 07b5 00000000 		.4byte	0
 8747              	.LVUS117:
 8748 07b9 00       		.uleb128 0
 8749 07ba 00       		.uleb128 .LVU900
 8750 07bb 00       		.uleb128 .LVU900
 8751 07bc 00       		.uleb128 .LVU911
 8752 07bd 00       		.uleb128 .LVU911
 8753 07be 00       		.uleb128 .LVU912
 8754 07bf 00       		.uleb128 .LVU912
 8755 07c0 00       		.uleb128 0
 8756              	.LLST117:
 8757 07c1 74070000 		.4byte	.LVL252-.Ltext0
 8758 07c5 95070000 		.4byte	.LVL255-1-.Ltext0
 8759 07c9 0100     		.2byte	0x1
 8760 07cb 50       		.byte	0x50
 8761 07cc 95070000 		.4byte	.LVL255-1-.Ltext0
 8762 07d0 A0070000 		.4byte	.LVL258-.Ltext0
 8763 07d4 0100     		.2byte	0x1
 8764 07d6 54       		.byte	0x54
 8765 07d7 A0070000 		.4byte	.LVL258-.Ltext0
 8766 07db A2070000 		.4byte	.LVL259-.Ltext0
 8767 07df 0100     		.2byte	0x1
 8768 07e1 50       		.byte	0x50
 8769 07e2 A2070000 		.4byte	.LVL259-.Ltext0
 8770 07e6 A4070000 		.4byte	.LFE20-.Ltext0
 8771 07ea 0100     		.2byte	0x1
 8772 07ec 54       		.byte	0x54
 8773 07ed 00000000 		.4byte	0
 8774 07f1 00000000 		.4byte	0
ARM GAS  /tmp/ccjtHtwZ.s 			page 224


 8775              	.LVUS118:
 8776 07f5 00       		.uleb128 0
 8777 07f6 00       		.uleb128 .LVU900
 8778 07f7 00       		.uleb128 .LVU900
 8779 07f8 00       		.uleb128 .LVU911
 8780 07f9 00       		.uleb128 .LVU911
 8781 07fa 00       		.uleb128 0
 8782              	.LLST118:
 8783 07fb 74070000 		.4byte	.LVL252-.Ltext0
 8784 07ff 95070000 		.4byte	.LVL255-1-.Ltext0
 8785 0803 0100     		.2byte	0x1
 8786 0805 51       		.byte	0x51
 8787 0806 95070000 		.4byte	.LVL255-1-.Ltext0
 8788 080a A0070000 		.4byte	.LVL258-.Ltext0
 8789 080e 0400     		.2byte	0x4
 8790 0810 F3       		.byte	0xf3
 8791 0811 01       		.uleb128 0x1
 8792 0812 51       		.byte	0x51
 8793 0813 9F       		.byte	0x9f
 8794 0814 A0070000 		.4byte	.LVL258-.Ltext0
 8795 0818 A4070000 		.4byte	.LFE20-.Ltext0
 8796 081c 0100     		.2byte	0x1
 8797 081e 51       		.byte	0x51
 8798 081f 00000000 		.4byte	0
 8799 0823 00000000 		.4byte	0
 8800              	.LVUS119:
 8801 0827 01       		.uleb128 .LVU904
 8802 0828 00       		.uleb128 .LVU911
 8803              	.LLST119:
 8804 0829 9A070000 		.4byte	.LVL256-.Ltext0
 8805 082d A0070000 		.4byte	.LVL258-.Ltext0
 8806 0831 0100     		.2byte	0x1
 8807 0833 50       		.byte	0x50
 8808 0834 00000000 		.4byte	0
 8809 0838 00000000 		.4byte	0
 8810              	.LVUS120:
 8811 083c 01       		.uleb128 .LVU892
 8812 083d 00       		.uleb128 0
 8813              	.LLST120:
 8814 083e 8C070000 		.4byte	.LVL253-.Ltext0
 8815 0842 A4070000 		.4byte	.LFE20-.Ltext0
 8816 0846 0100     		.2byte	0x1
 8817 0848 55       		.byte	0x55
 8818 0849 00000000 		.4byte	0
 8819 084d 00000000 		.4byte	0
 8820              	.LVUS121:
 8821 0851 00       		.uleb128 .LVU899
 8822 0852 01       		.uleb128 .LVU904
 8823              	.LLST121:
 8824 0853 92070000 		.4byte	.LVL254-.Ltext0
 8825 0857 9A070000 		.4byte	.LVL256-.Ltext0
 8826 085b 0100     		.2byte	0x1
 8827 085d 56       		.byte	0x56
 8828 085e 00000000 		.4byte	0
 8829 0862 00000000 		.4byte	0
 8830              	.LVUS122:
 8831 0866 05       		.uleb128 .LVU880
ARM GAS  /tmp/ccjtHtwZ.s 			page 225


 8832 0867 00       		.uleb128 .LVU900
 8833 0868 00       		.uleb128 .LVU900
 8834 0869 00       		.uleb128 .LVU911
 8835 086a 00       		.uleb128 .LVU911
 8836 086b 00       		.uleb128 .LVU912
 8837 086c 00       		.uleb128 .LVU912
 8838 086d 00       		.uleb128 0
 8839              	.LLST122:
 8840 086e 74070000 		.4byte	.LVL252-.Ltext0
 8841 0872 95070000 		.4byte	.LVL255-1-.Ltext0
 8842 0876 0100     		.2byte	0x1
 8843 0878 50       		.byte	0x50
 8844 0879 95070000 		.4byte	.LVL255-1-.Ltext0
 8845 087d A0070000 		.4byte	.LVL258-.Ltext0
 8846 0881 0100     		.2byte	0x1
 8847 0883 54       		.byte	0x54
 8848 0884 A0070000 		.4byte	.LVL258-.Ltext0
 8849 0888 A2070000 		.4byte	.LVL259-.Ltext0
 8850 088c 0100     		.2byte	0x1
 8851 088e 50       		.byte	0x50
 8852 088f A2070000 		.4byte	.LVL259-.Ltext0
 8853 0893 A4070000 		.4byte	.LFE20-.Ltext0
 8854 0897 0100     		.2byte	0x1
 8855 0899 54       		.byte	0x54
 8856 089a 00000000 		.4byte	0
 8857 089e 00000000 		.4byte	0
 8858              	.LVUS123:
 8859 08a2 00       		.uleb128 .LVU891
 8860 08a3 01       		.uleb128 .LVU892
 8861              	.LLST123:
 8862 08a4 8C070000 		.4byte	.LVL253-.Ltext0
 8863 08a8 8C070000 		.4byte	.LVL253-.Ltext0
 8864 08ac 0100     		.2byte	0x1
 8865 08ae 55       		.byte	0x55
 8866 08af 00000000 		.4byte	0
 8867 08b3 00000000 		.4byte	0
 8868              	.LVUS124:
 8869 08b7 03       		.uleb128 .LVU906
 8870 08b8 00       		.uleb128 .LVU908
 8871              	.LLST124:
 8872 08b9 9A070000 		.4byte	.LVL256-.Ltext0
 8873 08bd 9E070000 		.4byte	.LVL257-.Ltext0
 8874 08c1 0100     		.2byte	0x1
 8875 08c3 55       		.byte	0x55
 8876 08c4 00000000 		.4byte	0
 8877 08c8 00000000 		.4byte	0
 8878              	.LLST105:
 8879 08cc 0C070000 		.4byte	.LFB19-.Ltext0
 8880 08d0 10070000 		.4byte	.LCFI30-.Ltext0
 8881 08d4 0200     		.2byte	0x2
 8882 08d6 7D       		.byte	0x7d
 8883 08d7 00       		.sleb128 0
 8884 08d8 10070000 		.4byte	.LCFI30-.Ltext0
 8885 08dc 74070000 		.4byte	.LFE19-.Ltext0
 8886 08e0 0200     		.2byte	0x2
 8887 08e2 7D       		.byte	0x7d
 8888 08e3 18       		.sleb128 24
ARM GAS  /tmp/ccjtHtwZ.s 			page 226


 8889 08e4 00000000 		.4byte	0
 8890 08e8 00000000 		.4byte	0
 8891              	.LVUS106:
 8892 08ec 00       		.uleb128 0
 8893 08ed 00       		.uleb128 .LVU844
 8894 08ee 00       		.uleb128 .LVU844
 8895 08ef 00       		.uleb128 .LVU872
 8896 08f0 00       		.uleb128 .LVU872
 8897 08f1 00       		.uleb128 .LVU874
 8898 08f2 00       		.uleb128 .LVU874
 8899 08f3 00       		.uleb128 0
 8900              	.LLST106:
 8901 08f4 0C070000 		.4byte	.LVL236-.Ltext0
 8902 08f8 37070000 		.4byte	.LVL241-1-.Ltext0
 8903 08fc 0100     		.2byte	0x1
 8904 08fe 50       		.byte	0x50
 8905 08ff 37070000 		.4byte	.LVL241-1-.Ltext0
 8906 0903 70070000 		.4byte	.LVL250-.Ltext0
 8907 0907 0100     		.2byte	0x1
 8908 0909 55       		.byte	0x55
 8909 090a 70070000 		.4byte	.LVL250-.Ltext0
 8910 090e 72070000 		.4byte	.LVL251-.Ltext0
 8911 0912 0100     		.2byte	0x1
 8912 0914 50       		.byte	0x50
 8913 0915 72070000 		.4byte	.LVL251-.Ltext0
 8914 0919 74070000 		.4byte	.LFE19-.Ltext0
 8915 091d 0100     		.2byte	0x1
 8916 091f 55       		.byte	0x55
 8917 0920 00000000 		.4byte	0
 8918 0924 00000000 		.4byte	0
 8919              	.LVUS107:
 8920 0928 00       		.uleb128 0
 8921 0929 00       		.uleb128 .LVU844
 8922 092a 00       		.uleb128 .LVU844
 8923 092b 00       		.uleb128 .LVU872
 8924 092c 00       		.uleb128 .LVU872
 8925 092d 00       		.uleb128 0
 8926              	.LLST107:
 8927 092e 0C070000 		.4byte	.LVL236-.Ltext0
 8928 0932 37070000 		.4byte	.LVL241-1-.Ltext0
 8929 0936 0100     		.2byte	0x1
 8930 0938 51       		.byte	0x51
 8931 0939 37070000 		.4byte	.LVL241-1-.Ltext0
 8932 093d 70070000 		.4byte	.LVL250-.Ltext0
 8933 0941 0400     		.2byte	0x4
 8934 0943 F3       		.byte	0xf3
 8935 0944 01       		.uleb128 0x1
 8936 0945 51       		.byte	0x51
 8937 0946 9F       		.byte	0x9f
 8938 0947 70070000 		.4byte	.LVL250-.Ltext0
 8939 094b 74070000 		.4byte	.LFE19-.Ltext0
 8940 094f 0100     		.2byte	0x1
 8941 0951 51       		.byte	0x51
 8942 0952 00000000 		.4byte	0
 8943 0956 00000000 		.4byte	0
 8944              	.LVUS108:
 8945 095a 00       		.uleb128 0
ARM GAS  /tmp/ccjtHtwZ.s 			page 227


 8946 095b 00       		.uleb128 .LVU844
 8947 095c 00       		.uleb128 .LVU844
 8948 095d 00       		.uleb128 .LVU872
 8949 095e 00       		.uleb128 .LVU872
 8950 095f 00       		.uleb128 0
 8951              	.LLST108:
 8952 0960 0C070000 		.4byte	.LVL236-.Ltext0
 8953 0964 37070000 		.4byte	.LVL241-1-.Ltext0
 8954 0968 0100     		.2byte	0x1
 8955 096a 52       		.byte	0x52
 8956 096b 37070000 		.4byte	.LVL241-1-.Ltext0
 8957 096f 70070000 		.4byte	.LVL250-.Ltext0
 8958 0973 0100     		.2byte	0x1
 8959 0975 58       		.byte	0x58
 8960 0976 70070000 		.4byte	.LVL250-.Ltext0
 8961 097a 74070000 		.4byte	.LFE19-.Ltext0
 8962 097e 0100     		.2byte	0x1
 8963 0980 52       		.byte	0x52
 8964 0981 00000000 		.4byte	0
 8965 0985 00000000 		.4byte	0
 8966              	.LVUS109:
 8967 0989 00       		.uleb128 .LVU860
 8968 098a 00       		.uleb128 .LVU868
 8969              	.LLST109:
 8970 098b 5E070000 		.4byte	.LVL245-.Ltext0
 8971 098f 66070000 		.4byte	.LVL247-.Ltext0
 8972 0993 0100     		.2byte	0x1
 8973 0995 50       		.byte	0x50
 8974 0996 00000000 		.4byte	0
 8975 099a 00000000 		.4byte	0
 8976              	.LVUS110:
 8977 099e 01       		.uleb128 .LVU833
 8978 099f 00       		.uleb128 0
 8979              	.LLST110:
 8980 09a0 28070000 		.4byte	.LVL237-.Ltext0
 8981 09a4 74070000 		.4byte	.LFE19-.Ltext0
 8982 09a8 0100     		.2byte	0x1
 8983 09aa 57       		.byte	0x57
 8984 09ab 00000000 		.4byte	0
 8985 09af 00000000 		.4byte	0
 8986              	.LVUS111:
 8987 09b3 04       		.uleb128 .LVU822
 8988 09b4 00       		.uleb128 .LVU844
 8989 09b5 00       		.uleb128 .LVU844
 8990 09b6 00       		.uleb128 .LVU872
 8991 09b7 00       		.uleb128 .LVU872
 8992 09b8 00       		.uleb128 .LVU874
 8993 09b9 00       		.uleb128 .LVU874
 8994 09ba 00       		.uleb128 0
 8995              	.LLST111:
 8996 09bb 0C070000 		.4byte	.LVL236-.Ltext0
 8997 09bf 37070000 		.4byte	.LVL241-1-.Ltext0
 8998 09c3 0100     		.2byte	0x1
 8999 09c5 50       		.byte	0x50
 9000 09c6 37070000 		.4byte	.LVL241-1-.Ltext0
 9001 09ca 70070000 		.4byte	.LVL250-.Ltext0
 9002 09ce 0100     		.2byte	0x1
ARM GAS  /tmp/ccjtHtwZ.s 			page 228


 9003 09d0 55       		.byte	0x55
 9004 09d1 70070000 		.4byte	.LVL250-.Ltext0
 9005 09d5 72070000 		.4byte	.LVL251-.Ltext0
 9006 09d9 0100     		.2byte	0x1
 9007 09db 50       		.byte	0x50
 9008 09dc 72070000 		.4byte	.LVL251-.Ltext0
 9009 09e0 74070000 		.4byte	.LFE19-.Ltext0
 9010 09e4 0100     		.2byte	0x1
 9011 09e6 55       		.byte	0x55
 9012 09e7 00000000 		.4byte	0
 9013 09eb 00000000 		.4byte	0
 9014              	.LVUS113:
 9015 09ef 00       		.uleb128 .LVU836
 9016 09f0 00       		.uleb128 .LVU841
 9017 09f1 00       		.uleb128 .LVU841
 9018 09f2 00       		.uleb128 .LVU860
 9019 09f3 00       		.uleb128 .LVU868
 9020 09f4 00       		.uleb128 .LVU872
 9021 09f5 00       		.uleb128 .LVU872
 9022 09f6 00       		.uleb128 0
 9023              	.LLST113:
 9024 09f7 2A070000 		.4byte	.LVL238-.Ltext0
 9025 09fb 32070000 		.4byte	.LVL239-.Ltext0
 9026 09ff 0100     		.2byte	0x1
 9027 0a01 54       		.byte	0x54
 9028 0a02 32070000 		.4byte	.LVL239-.Ltext0
 9029 0a06 5E070000 		.4byte	.LVL245-.Ltext0
 9030 0a0a 0300     		.2byte	0x3
 9031 0a0c 74       		.byte	0x74
 9032 0a0d 01       		.sleb128 1
 9033 0a0e 9F       		.byte	0x9f
 9034 0a0f 66070000 		.4byte	.LVL247-.Ltext0
 9035 0a13 70070000 		.4byte	.LVL250-.Ltext0
 9036 0a17 0300     		.2byte	0x3
 9037 0a19 74       		.byte	0x74
 9038 0a1a 01       		.sleb128 1
 9039 0a1b 9F       		.byte	0x9f
 9040 0a1c 70070000 		.4byte	.LVL250-.Ltext0
 9041 0a20 74070000 		.4byte	.LFE19-.Ltext0
 9042 0a24 0100     		.2byte	0x1
 9043 0a26 54       		.byte	0x54
 9044 0a27 00000000 		.4byte	0
 9045 0a2b 00000000 		.4byte	0
 9046              	.LVUS114:
 9047 0a2f 00       		.uleb128 .LVU842
 9048 0a30 00       		.uleb128 .LVU852
 9049 0a31 00       		.uleb128 .LVU853
 9050 0a32 00       		.uleb128 .LVU860
 9051 0a33 00       		.uleb128 .LVU868
 9052 0a34 00       		.uleb128 .LVU870
 9053 0a35 00       		.uleb128 .LVU870
 9054 0a36 00       		.uleb128 .LVU871
 9055 0a37 00       		.uleb128 .LVU871
 9056 0a38 00       		.uleb128 .LVU872
 9057              	.LLST114:
 9058 0a39 34070000 		.4byte	.LVL240-.Ltext0
 9059 0a3d 42070000 		.4byte	.LVL242-.Ltext0
ARM GAS  /tmp/ccjtHtwZ.s 			page 229


 9060 0a41 0100     		.2byte	0x1
 9061 0a43 56       		.byte	0x56
 9062 0a44 46070000 		.4byte	.LVL243-.Ltext0
 9063 0a48 5E070000 		.4byte	.LVL245-.Ltext0
 9064 0a4c 0100     		.2byte	0x1
 9065 0a4e 56       		.byte	0x56
 9066 0a4f 66070000 		.4byte	.LVL247-.Ltext0
 9067 0a53 68070000 		.4byte	.LVL248-.Ltext0
 9068 0a57 0100     		.2byte	0x1
 9069 0a59 56       		.byte	0x56
 9070 0a5a 68070000 		.4byte	.LVL248-.Ltext0
 9071 0a5e 6A070000 		.4byte	.LVL249-.Ltext0
 9072 0a62 0300     		.2byte	0x3
 9073 0a64 76       		.byte	0x76
 9074 0a65 7F       		.sleb128 -1
 9075 0a66 9F       		.byte	0x9f
 9076 0a67 6A070000 		.4byte	.LVL249-.Ltext0
 9077 0a6b 70070000 		.4byte	.LVL250-.Ltext0
 9078 0a6f 0300     		.2byte	0x3
 9079 0a71 73       		.byte	0x73
 9080 0a72 7F       		.sleb128 -1
 9081 0a73 9F       		.byte	0x9f
 9082 0a74 00000000 		.4byte	0
 9083 0a78 00000000 		.4byte	0
 9084              	.LVUS112:
 9085 0a7c 00       		.uleb128 .LVU832
 9086 0a7d 01       		.uleb128 .LVU833
 9087              	.LLST112:
 9088 0a7e 28070000 		.4byte	.LVL237-.Ltext0
 9089 0a82 28070000 		.4byte	.LVL237-.Ltext0
 9090 0a86 0100     		.2byte	0x1
 9091 0a88 57       		.byte	0x57
 9092 0a89 00000000 		.4byte	0
 9093 0a8d 00000000 		.4byte	0
 9094              	.LVUS115:
 9095 0a91 03       		.uleb128 .LVU863
 9096 0a92 00       		.uleb128 .LVU865
 9097              	.LLST115:
 9098 0a93 5E070000 		.4byte	.LVL245-.Ltext0
 9099 0a97 62070000 		.4byte	.LVL246-.Ltext0
 9100 0a9b 0100     		.2byte	0x1
 9101 0a9d 57       		.byte	0x57
 9102 0a9e 00000000 		.4byte	0
 9103 0aa2 00000000 		.4byte	0
 9104              	.LLST97:
 9105 0aa6 1E060000 		.4byte	.LFB18-.Ltext0
 9106 0aaa 22060000 		.4byte	.LCFI27-.Ltext0
 9107 0aae 0200     		.2byte	0x2
 9108 0ab0 7D       		.byte	0x7d
 9109 0ab1 00       		.sleb128 0
 9110 0ab2 22060000 		.4byte	.LCFI27-.Ltext0
 9111 0ab6 6A060000 		.4byte	.LCFI28-.Ltext0
 9112 0aba 0200     		.2byte	0x2
 9113 0abc 7D       		.byte	0x7d
 9114 0abd 28       		.sleb128 40
 9115 0abe 6A060000 		.4byte	.LCFI28-.Ltext0
 9116 0ac2 6E060000 		.4byte	.LCFI29-.Ltext0
ARM GAS  /tmp/ccjtHtwZ.s 			page 230


 9117 0ac6 0200     		.2byte	0x2
 9118 0ac8 7D       		.byte	0x7d
 9119 0ac9 18       		.sleb128 24
 9120 0aca 6E060000 		.4byte	.LCFI29-.Ltext0
 9121 0ace 0C070000 		.4byte	.LFE18-.Ltext0
 9122 0ad2 0200     		.2byte	0x2
 9123 0ad4 7D       		.byte	0x7d
 9124 0ad5 28       		.sleb128 40
 9125 0ad6 00000000 		.4byte	0
 9126 0ada 00000000 		.4byte	0
 9127              	.LVUS98:
 9128 0ade 00       		.uleb128 0
 9129 0adf 00       		.uleb128 .LVU740
 9130 0ae0 00       		.uleb128 .LVU740
 9131 0ae1 00       		.uleb128 0
 9132              	.LLST98:
 9133 0ae2 1E060000 		.4byte	.LVL208-.Ltext0
 9134 0ae6 2C060000 		.4byte	.LVL210-.Ltext0
 9135 0aea 0100     		.2byte	0x1
 9136 0aec 50       		.byte	0x50
 9137 0aed 2C060000 		.4byte	.LVL210-.Ltext0
 9138 0af1 0C070000 		.4byte	.LFE18-.Ltext0
 9139 0af5 0100     		.2byte	0x1
 9140 0af7 54       		.byte	0x54
 9141 0af8 00000000 		.4byte	0
 9142 0afc 00000000 		.4byte	0
 9143              	.LVUS99:
 9144 0b00 00       		.uleb128 0
 9145 0b01 00       		.uleb128 .LVU740
 9146 0b02 00       		.uleb128 .LVU740
 9147 0b03 00       		.uleb128 0
 9148              	.LLST99:
 9149 0b04 1E060000 		.4byte	.LVL208-.Ltext0
 9150 0b08 2C060000 		.4byte	.LVL210-.Ltext0
 9151 0b0c 0100     		.2byte	0x1
 9152 0b0e 51       		.byte	0x51
 9153 0b0f 2C060000 		.4byte	.LVL210-.Ltext0
 9154 0b13 0C070000 		.4byte	.LFE18-.Ltext0
 9155 0b17 0100     		.2byte	0x1
 9156 0b19 56       		.byte	0x56
 9157 0b1a 00000000 		.4byte	0
 9158 0b1e 00000000 		.4byte	0
 9159              	.LVUS100:
 9160 0b22 00       		.uleb128 0
 9161 0b23 00       		.uleb128 .LVU740
 9162              	.LLST100:
 9163 0b24 1E060000 		.4byte	.LVL208-.Ltext0
 9164 0b28 2C060000 		.4byte	.LVL210-.Ltext0
 9165 0b2c 0100     		.2byte	0x1
 9166 0b2e 52       		.byte	0x52
 9167 0b2f 00000000 		.4byte	0
 9168 0b33 00000000 		.4byte	0
 9169              	.LVUS101:
 9170 0b37 02       		.uleb128 .LVU731
 9171 0b38 00       		.uleb128 .LVU740
 9172 0b39 00       		.uleb128 .LVU740
 9173 0b3a 00       		.uleb128 .LVU770
ARM GAS  /tmp/ccjtHtwZ.s 			page 231


 9174 0b3b 00       		.uleb128 .LVU772
 9175 0b3c 02       		.uleb128 .LVU777
 9176 0b3d 00       		.uleb128 .LVU779
 9177 0b3e 01       		.uleb128 .LVU783
 9178 0b3f 01       		.uleb128 .LVU783
 9179 0b40 00       		.uleb128 0
 9180              	.LLST101:
 9181 0b41 1E060000 		.4byte	.LVL208-.Ltext0
 9182 0b45 2C060000 		.4byte	.LVL210-.Ltext0
 9183 0b49 0200     		.2byte	0x2
 9184 0b4b 30       		.byte	0x30
 9185 0b4c 9F       		.byte	0x9f
 9186 0b4d 2C060000 		.4byte	.LVL210-.Ltext0
 9187 0b51 68060000 		.4byte	.LVL217-.Ltext0
 9188 0b55 0100     		.2byte	0x1
 9189 0b57 57       		.byte	0x57
 9190 0b58 6E060000 		.4byte	.LVL218-.Ltext0
 9191 0b5c 76060000 		.4byte	.LVL219-.Ltext0
 9192 0b60 0100     		.2byte	0x1
 9193 0b62 57       		.byte	0x57
 9194 0b63 7A060000 		.4byte	.LVL220-.Ltext0
 9195 0b67 82060000 		.4byte	.LVL221-.Ltext0
 9196 0b6b 0100     		.2byte	0x1
 9197 0b6d 57       		.byte	0x57
 9198 0b6e 82060000 		.4byte	.LVL221-.Ltext0
 9199 0b72 0C070000 		.4byte	.LFE18-.Ltext0
 9200 0b76 0200     		.2byte	0x2
 9201 0b78 31       		.byte	0x31
 9202 0b79 9F       		.byte	0x9f
 9203 0b7a 00000000 		.4byte	0
 9204 0b7e 00000000 		.4byte	0
 9205              	.LVUS102:
 9206 0b82 00       		.uleb128 .LVU752
 9207 0b83 00       		.uleb128 .LVU770
 9208              	.LLST102:
 9209 0b84 3A060000 		.4byte	.LVL213-.Ltext0
 9210 0b88 68060000 		.4byte	.LVL217-.Ltext0
 9211 0b8c 0100     		.2byte	0x1
 9212 0b8e 55       		.byte	0x55
 9213 0b8f 00000000 		.4byte	0
 9214 0b93 00000000 		.4byte	0
 9215              	.LVUS103:
 9216 0b97 00       		.uleb128 .LVU737
 9217 0b98 00       		.uleb128 .LVU740
 9218 0b99 00       		.uleb128 .LVU740
 9219 0b9a 00       		.uleb128 0
 9220              	.LLST103:
 9221 0b9b 26060000 		.4byte	.LVL209-.Ltext0
 9222 0b9f 2C060000 		.4byte	.LVL210-.Ltext0
 9223 0ba3 0100     		.2byte	0x1
 9224 0ba5 50       		.byte	0x50
 9225 0ba6 2C060000 		.4byte	.LVL210-.Ltext0
 9226 0baa 0C070000 		.4byte	.LFE18-.Ltext0
 9227 0bae 0100     		.2byte	0x1
 9228 0bb0 54       		.byte	0x54
 9229 0bb1 00000000 		.4byte	0
 9230 0bb5 00000000 		.4byte	0
ARM GAS  /tmp/ccjtHtwZ.s 			page 232


 9231              	.LVUS104:
 9232 0bb9 00       		.uleb128 .LVU747
 9233 0bba 00       		.uleb128 .LVU753
 9234 0bbb 00       		.uleb128 .LVU772
 9235 0bbc 00       		.uleb128 .LVU775
 9236 0bbd 00       		.uleb128 .LVU779
 9237 0bbe 00       		.uleb128 .LVU782
 9238              	.LLST104:
 9239 0bbf 32060000 		.4byte	.LVL212-.Ltext0
 9240 0bc3 3D060000 		.4byte	.LVL214-1-.Ltext0
 9241 0bc7 0100     		.2byte	0x1
 9242 0bc9 53       		.byte	0x53
 9243 0bca 6E060000 		.4byte	.LVL218-.Ltext0
 9244 0bce 75060000 		.4byte	.LVL219-1-.Ltext0
 9245 0bd2 0100     		.2byte	0x1
 9246 0bd4 53       		.byte	0x53
 9247 0bd5 7A060000 		.4byte	.LVL220-.Ltext0
 9248 0bd9 81060000 		.4byte	.LVL221-1-.Ltext0
 9249 0bdd 0100     		.2byte	0x1
 9250 0bdf 53       		.byte	0x53
 9251 0be0 00000000 		.4byte	0
 9252 0be4 00000000 		.4byte	0
 9253              	.LLST82:
 9254 0be8 CA040000 		.4byte	.LFB17-.Ltext0
 9255 0bec CE040000 		.4byte	.LCFI23-.Ltext0
 9256 0bf0 0200     		.2byte	0x2
 9257 0bf2 7D       		.byte	0x7d
 9258 0bf3 00       		.sleb128 0
 9259 0bf4 CE040000 		.4byte	.LCFI23-.Ltext0
 9260 0bf8 1A050000 		.4byte	.LCFI24-.Ltext0
 9261 0bfc 0200     		.2byte	0x2
 9262 0bfe 7D       		.byte	0x7d
 9263 0bff 28       		.sleb128 40
 9264 0c00 1A050000 		.4byte	.LCFI24-.Ltext0
 9265 0c04 1E050000 		.4byte	.LCFI25-.Ltext0
 9266 0c08 0200     		.2byte	0x2
 9267 0c0a 7D       		.byte	0x7d
 9268 0c0b 18       		.sleb128 24
 9269 0c0c 1E050000 		.4byte	.LCFI25-.Ltext0
 9270 0c10 F0050000 		.4byte	.LFE17-.Ltext0
 9271 0c14 0200     		.2byte	0x2
 9272 0c16 7D       		.byte	0x7d
 9273 0c17 28       		.sleb128 40
 9274 0c18 00000000 		.4byte	0
 9275 0c1c 00000000 		.4byte	0
 9276              	.LVUS83:
 9277 0c20 00       		.uleb128 0
 9278 0c21 00       		.uleb128 .LVU600
 9279 0c22 00       		.uleb128 .LVU600
 9280 0c23 00       		.uleb128 0
 9281              	.LLST83:
 9282 0c24 CA040000 		.4byte	.LVL166-.Ltext0
 9283 0c28 D8040000 		.4byte	.LVL168-.Ltext0
 9284 0c2c 0100     		.2byte	0x1
 9285 0c2e 50       		.byte	0x50
 9286 0c2f D8040000 		.4byte	.LVL168-.Ltext0
 9287 0c33 F0050000 		.4byte	.LFE17-.Ltext0
ARM GAS  /tmp/ccjtHtwZ.s 			page 233


 9288 0c37 0100     		.2byte	0x1
 9289 0c39 54       		.byte	0x54
 9290 0c3a 00000000 		.4byte	0
 9291 0c3e 00000000 		.4byte	0
 9292              	.LVUS84:
 9293 0c42 00       		.uleb128 0
 9294 0c43 00       		.uleb128 .LVU600
 9295              	.LLST84:
 9296 0c44 CA040000 		.4byte	.LVL166-.Ltext0
 9297 0c48 D8040000 		.4byte	.LVL168-.Ltext0
 9298 0c4c 0100     		.2byte	0x1
 9299 0c4e 51       		.byte	0x51
 9300 0c4f 00000000 		.4byte	0
 9301 0c53 00000000 		.4byte	0
 9302              	.LVUS85:
 9303 0c57 02       		.uleb128 .LVU591
 9304 0c58 00       		.uleb128 .LVU600
 9305 0c59 00       		.uleb128 .LVU600
 9306 0c5a 00       		.uleb128 .LVU634
 9307 0c5b 00       		.uleb128 .LVU636
 9308 0c5c 00       		.uleb128 .LVU638
 9309 0c5d 00       		.uleb128 .LVU641
 9310 0c5e 01       		.uleb128 .LVU645
 9311 0c5f 01       		.uleb128 .LVU645
 9312 0c60 00       		.uleb128 0
 9313              	.LLST85:
 9314 0c61 CA040000 		.4byte	.LVL166-.Ltext0
 9315 0c65 D8040000 		.4byte	.LVL168-.Ltext0
 9316 0c69 0200     		.2byte	0x2
 9317 0c6b 30       		.byte	0x30
 9318 0c6c 9F       		.byte	0x9f
 9319 0c6d D8040000 		.4byte	.LVL168-.Ltext0
 9320 0c71 16050000 		.4byte	.LVL176-.Ltext0
 9321 0c75 0100     		.2byte	0x1
 9322 0c77 57       		.byte	0x57
 9323 0c78 1E050000 		.4byte	.LVL177-.Ltext0
 9324 0c7c 28050000 		.4byte	.LVL178-.Ltext0
 9325 0c80 0100     		.2byte	0x1
 9326 0c82 57       		.byte	0x57
 9327 0c83 30050000 		.4byte	.LVL180-.Ltext0
 9328 0c87 38050000 		.4byte	.LVL181-.Ltext0
 9329 0c8b 0100     		.2byte	0x1
 9330 0c8d 57       		.byte	0x57
 9331 0c8e 38050000 		.4byte	.LVL181-.Ltext0
 9332 0c92 F0050000 		.4byte	.LFE17-.Ltext0
 9333 0c96 0200     		.2byte	0x2
 9334 0c98 31       		.byte	0x31
 9335 0c99 9F       		.byte	0x9f
 9336 0c9a 00000000 		.4byte	0
 9337 0c9e 00000000 		.4byte	0
 9338              	.LVUS86:
 9339 0ca2 00       		.uleb128 .LVU596
 9340 0ca3 00       		.uleb128 .LVU600
 9341 0ca4 00       		.uleb128 .LVU600
 9342 0ca5 00       		.uleb128 0
 9343              	.LLST86:
 9344 0ca6 D2040000 		.4byte	.LVL167-.Ltext0
ARM GAS  /tmp/ccjtHtwZ.s 			page 234


 9345 0caa D8040000 		.4byte	.LVL168-.Ltext0
 9346 0cae 0100     		.2byte	0x1
 9347 0cb0 50       		.byte	0x50
 9348 0cb1 D8040000 		.4byte	.LVL168-.Ltext0
 9349 0cb5 F0050000 		.4byte	.LFE17-.Ltext0
 9350 0cb9 0100     		.2byte	0x1
 9351 0cbb 54       		.byte	0x54
 9352 0cbc 00000000 		.4byte	0
 9353 0cc0 00000000 		.4byte	0
 9354              	.LVUS87:
 9355 0cc4 01       		.uleb128 .LVU597
 9356 0cc5 00       		.uleb128 .LVU600
 9357 0cc6 00       		.uleb128 .LVU666
 9358 0cc7 00       		.uleb128 .LVU667
 9359 0cc8 00       		.uleb128 .LVU667
 9360 0cc9 00       		.uleb128 .LVU667
 9361              	.LLST87:
 9362 0cca D2040000 		.4byte	.LVL167-.Ltext0
 9363 0cce D8040000 		.4byte	.LVL168-.Ltext0
 9364 0cd2 0200     		.2byte	0x2
 9365 0cd4 30       		.byte	0x30
 9366 0cd5 9F       		.byte	0x9f
 9367 0cd6 82050000 		.4byte	.LVL190-.Ltext0
 9368 0cda 85050000 		.4byte	.LVL191-1-.Ltext0
 9369 0cde 0100     		.2byte	0x1
 9370 0ce0 50       		.byte	0x50
 9371 0ce1 85050000 		.4byte	.LVL191-1-.Ltext0
 9372 0ce5 86050000 		.4byte	.LVL191-.Ltext0
 9373 0ce9 0100     		.2byte	0x1
 9374 0ceb 55       		.byte	0x55
 9375 0cec 00000000 		.4byte	0
 9376 0cf0 00000000 		.4byte	0
 9377              	.LVUS88:
 9378 0cf4 00       		.uleb128 .LVU607
 9379 0cf5 00       		.uleb128 .LVU612
 9380 0cf6 00       		.uleb128 .LVU612
 9381 0cf7 00       		.uleb128 .LVU615
 9382 0cf8 00       		.uleb128 .LVU615
 9383 0cf9 00       		.uleb128 .LVU618
 9384 0cfa 00       		.uleb128 .LVU636
 9385 0cfb 00       		.uleb128 .LVU638
 9386 0cfc 00       		.uleb128 .LVU641
 9387 0cfd 00       		.uleb128 .LVU644
 9388              	.LLST88:
 9389 0cfe DE040000 		.4byte	.LVL170-.Ltext0
 9390 0d02 E2040000 		.4byte	.LVL171-.Ltext0
 9391 0d06 0100     		.2byte	0x1
 9392 0d08 53       		.byte	0x53
 9393 0d09 E2040000 		.4byte	.LVL171-.Ltext0
 9394 0d0d E6040000 		.4byte	.LVL172-.Ltext0
 9395 0d11 0300     		.2byte	0x3
 9396 0d13 73       		.byte	0x73
 9397 0d14 01       		.sleb128 1
 9398 0d15 9F       		.byte	0x9f
 9399 0d16 E6040000 		.4byte	.LVL172-.Ltext0
 9400 0d1a EB040000 		.4byte	.LVL173-1-.Ltext0
 9401 0d1e 0600     		.2byte	0x6
ARM GAS  /tmp/ccjtHtwZ.s 			page 235


 9402 0d20 74       		.byte	0x74
 9403 0d21 38       		.sleb128 56
 9404 0d22 06       		.byte	0x6
 9405 0d23 23       		.byte	0x23
 9406 0d24 01       		.uleb128 0x1
 9407 0d25 9F       		.byte	0x9f
 9408 0d26 1E050000 		.4byte	.LVL177-.Ltext0
 9409 0d2a 28050000 		.4byte	.LVL178-.Ltext0
 9410 0d2e 0100     		.2byte	0x1
 9411 0d30 53       		.byte	0x53
 9412 0d31 30050000 		.4byte	.LVL180-.Ltext0
 9413 0d35 37050000 		.4byte	.LVL181-1-.Ltext0
 9414 0d39 0100     		.2byte	0x1
 9415 0d3b 53       		.byte	0x53
 9416 0d3c 00000000 		.4byte	0
 9417 0d40 00000000 		.4byte	0
 9418              	.LVUS89:
 9419 0d44 01       		.uleb128 .LVU701
 9420 0d45 00       		.uleb128 .LVU703
 9421              	.LLST89:
 9422 0d46 E8050000 		.4byte	.LVL201-.Ltext0
 9423 0d4a ED050000 		.4byte	.LVL202-1-.Ltext0
 9424 0d4e 0100     		.2byte	0x1
 9425 0d50 51       		.byte	0x51
 9426 0d51 00000000 		.4byte	0
 9427 0d55 00000000 		.4byte	0
 9428              	.LVUS90:
 9429 0d59 02       		.uleb128 .LVU692
 9430 0d5a 01       		.uleb128 .LVU701
 9431              	.LLST90:
 9432 0d5b DC050000 		.4byte	.LVL200-.Ltext0
 9433 0d5f E8050000 		.4byte	.LVL201-.Ltext0
 9434 0d63 0100     		.2byte	0x1
 9435 0d65 54       		.byte	0x54
 9436 0d66 00000000 		.4byte	0
 9437 0d6a 00000000 		.4byte	0
 9438              	.LVUS91:
 9439 0d6e 00       		.uleb128 .LVU700
 9440 0d6f 01       		.uleb128 .LVU701
 9441              	.LLST91:
 9442 0d70 E8050000 		.4byte	.LVL201-.Ltext0
 9443 0d74 E8050000 		.4byte	.LVL201-.Ltext0
 9444 0d78 0100     		.2byte	0x1
 9445 0d7a 51       		.byte	0x51
 9446 0d7b 00000000 		.4byte	0
 9447 0d7f 00000000 		.4byte	0
 9448              	.LLST75:
 9449 0d83 DC030000 		.4byte	.LFB16-.Ltext0
 9450 0d87 E0030000 		.4byte	.LCFI20-.Ltext0
 9451 0d8b 0200     		.2byte	0x2
 9452 0d8d 7D       		.byte	0x7d
 9453 0d8e 00       		.sleb128 0
 9454 0d8f E0030000 		.4byte	.LCFI20-.Ltext0
 9455 0d93 28040000 		.4byte	.LCFI21-.Ltext0
 9456 0d97 0200     		.2byte	0x2
 9457 0d99 7D       		.byte	0x7d
 9458 0d9a 28       		.sleb128 40
ARM GAS  /tmp/ccjtHtwZ.s 			page 236


 9459 0d9b 28040000 		.4byte	.LCFI21-.Ltext0
 9460 0d9f 2C040000 		.4byte	.LCFI22-.Ltext0
 9461 0da3 0200     		.2byte	0x2
 9462 0da5 7D       		.byte	0x7d
 9463 0da6 18       		.sleb128 24
 9464 0da7 2C040000 		.4byte	.LCFI22-.Ltext0
 9465 0dab CA040000 		.4byte	.LFE16-.Ltext0
 9466 0daf 0200     		.2byte	0x2
 9467 0db1 7D       		.byte	0x7d
 9468 0db2 28       		.sleb128 40
 9469 0db3 00000000 		.4byte	0
 9470 0db7 00000000 		.4byte	0
 9471              	.LVUS76:
 9472 0dbb 00       		.uleb128 0
 9473 0dbc 00       		.uleb128 .LVU511
 9474 0dbd 00       		.uleb128 .LVU511
 9475 0dbe 00       		.uleb128 0
 9476              	.LLST76:
 9477 0dbf DC030000 		.4byte	.LVL137-.Ltext0
 9478 0dc3 EA030000 		.4byte	.LVL139-.Ltext0
 9479 0dc7 0100     		.2byte	0x1
 9480 0dc9 50       		.byte	0x50
 9481 0dca EA030000 		.4byte	.LVL139-.Ltext0
 9482 0dce CA040000 		.4byte	.LFE16-.Ltext0
 9483 0dd2 0100     		.2byte	0x1
 9484 0dd4 54       		.byte	0x54
 9485 0dd5 00000000 		.4byte	0
 9486 0dd9 00000000 		.4byte	0
 9487              	.LVUS77:
 9488 0ddd 00       		.uleb128 0
 9489 0dde 00       		.uleb128 .LVU511
 9490 0ddf 00       		.uleb128 .LVU511
 9491 0de0 00       		.uleb128 0
 9492              	.LLST77:
 9493 0de1 DC030000 		.4byte	.LVL137-.Ltext0
 9494 0de5 EA030000 		.4byte	.LVL139-.Ltext0
 9495 0de9 0100     		.2byte	0x1
 9496 0deb 51       		.byte	0x51
 9497 0dec EA030000 		.4byte	.LVL139-.Ltext0
 9498 0df0 CA040000 		.4byte	.LFE16-.Ltext0
 9499 0df4 0100     		.2byte	0x1
 9500 0df6 56       		.byte	0x56
 9501 0df7 00000000 		.4byte	0
 9502 0dfb 00000000 		.4byte	0
 9503              	.LVUS78:
 9504 0dff 00       		.uleb128 0
 9505 0e00 00       		.uleb128 .LVU511
 9506              	.LLST78:
 9507 0e01 DC030000 		.4byte	.LVL137-.Ltext0
 9508 0e05 EA030000 		.4byte	.LVL139-.Ltext0
 9509 0e09 0100     		.2byte	0x1
 9510 0e0b 52       		.byte	0x52
 9511 0e0c 00000000 		.4byte	0
 9512 0e10 00000000 		.4byte	0
 9513              	.LVUS79:
 9514 0e14 02       		.uleb128 .LVU503
 9515 0e15 00       		.uleb128 .LVU511
ARM GAS  /tmp/ccjtHtwZ.s 			page 237


 9516 0e16 00       		.uleb128 .LVU511
 9517 0e17 00       		.uleb128 .LVU540
 9518 0e18 00       		.uleb128 .LVU542
 9519 0e19 02       		.uleb128 .LVU548
 9520 0e1a 00       		.uleb128 .LVU550
 9521 0e1b 01       		.uleb128 .LVU554
 9522 0e1c 01       		.uleb128 .LVU554
 9523 0e1d 00       		.uleb128 0
 9524              	.LLST79:
 9525 0e1e DC030000 		.4byte	.LVL137-.Ltext0
 9526 0e22 EA030000 		.4byte	.LVL139-.Ltext0
 9527 0e26 0200     		.2byte	0x2
 9528 0e28 30       		.byte	0x30
 9529 0e29 9F       		.byte	0x9f
 9530 0e2a EA030000 		.4byte	.LVL139-.Ltext0
 9531 0e2e 26040000 		.4byte	.LVL146-.Ltext0
 9532 0e32 0100     		.2byte	0x1
 9533 0e34 57       		.byte	0x57
 9534 0e35 2C040000 		.4byte	.LVL147-.Ltext0
 9535 0e39 34040000 		.4byte	.LVL149-.Ltext0
 9536 0e3d 0100     		.2byte	0x1
 9537 0e3f 57       		.byte	0x57
 9538 0e40 38040000 		.4byte	.LVL150-.Ltext0
 9539 0e44 40040000 		.4byte	.LVL151-.Ltext0
 9540 0e48 0100     		.2byte	0x1
 9541 0e4a 57       		.byte	0x57
 9542 0e4b 40040000 		.4byte	.LVL151-.Ltext0
 9543 0e4f CA040000 		.4byte	.LFE16-.Ltext0
 9544 0e53 0200     		.2byte	0x2
 9545 0e55 31       		.byte	0x31
 9546 0e56 9F       		.byte	0x9f
 9547 0e57 00000000 		.4byte	0
 9548 0e5b 00000000 		.4byte	0
 9549              	.LVUS80:
 9550 0e5f 00       		.uleb128 .LVU508
 9551 0e60 00       		.uleb128 .LVU511
 9552 0e61 00       		.uleb128 .LVU511
 9553 0e62 00       		.uleb128 0
 9554              	.LLST80:
 9555 0e63 E4030000 		.4byte	.LVL138-.Ltext0
 9556 0e67 EA030000 		.4byte	.LVL139-.Ltext0
 9557 0e6b 0100     		.2byte	0x1
 9558 0e6d 50       		.byte	0x50
 9559 0e6e EA030000 		.4byte	.LVL139-.Ltext0
 9560 0e72 CA040000 		.4byte	.LFE16-.Ltext0
 9561 0e76 0100     		.2byte	0x1
 9562 0e78 54       		.byte	0x54
 9563 0e79 00000000 		.4byte	0
 9564 0e7d 00000000 		.4byte	0
 9565              	.LVUS81:
 9566 0e81 00       		.uleb128 .LVU518
 9567 0e82 00       		.uleb128 .LVU522
 9568 0e83 00       		.uleb128 .LVU522
 9569 0e84 00       		.uleb128 .LVU540
 9570 0e85 00       		.uleb128 .LVU542
 9571 0e86 00       		.uleb128 .LVU544
 9572              	.LLST81:
ARM GAS  /tmp/ccjtHtwZ.s 			page 238


 9573 0e87 F0030000 		.4byte	.LVL141-.Ltext0
 9574 0e8b F8030000 		.4byte	.LVL142-.Ltext0
 9575 0e8f 0100     		.2byte	0x1
 9576 0e91 55       		.byte	0x55
 9577 0e92 F8030000 		.4byte	.LVL142-.Ltext0
 9578 0e96 26040000 		.4byte	.LVL146-.Ltext0
 9579 0e9a 0300     		.2byte	0x3
 9580 0e9c 75       		.byte	0x75
 9581 0e9d 01       		.sleb128 1
 9582 0e9e 9F       		.byte	0x9f
 9583 0e9f 2C040000 		.4byte	.LVL147-.Ltext0
 9584 0ea3 2E040000 		.4byte	.LVL148-.Ltext0
 9585 0ea7 0100     		.2byte	0x1
 9586 0ea9 55       		.byte	0x55
 9587 0eaa 00000000 		.4byte	0
 9588 0eae 00000000 		.4byte	0
 9589              	.LLST65:
 9590 0eb2 80030000 		.4byte	.LFB15-.Ltext0
 9591 0eb6 82030000 		.4byte	.LCFI19-.Ltext0
 9592 0eba 0200     		.2byte	0x2
 9593 0ebc 7D       		.byte	0x7d
 9594 0ebd 00       		.sleb128 0
 9595 0ebe 82030000 		.4byte	.LCFI19-.Ltext0
 9596 0ec2 DC030000 		.4byte	.LFE15-.Ltext0
 9597 0ec6 0200     		.2byte	0x2
 9598 0ec8 7D       		.byte	0x7d
 9599 0ec9 10       		.sleb128 16
 9600 0eca 00000000 		.4byte	0
 9601 0ece 00000000 		.4byte	0
 9602              	.LVUS66:
 9603 0ed2 00       		.uleb128 0
 9604 0ed3 00       		.uleb128 .LVU478
 9605 0ed4 00       		.uleb128 .LVU478
 9606 0ed5 00       		.uleb128 .LVU479
 9607 0ed6 00       		.uleb128 .LVU479
 9608 0ed7 00       		.uleb128 .LVU481
 9609 0ed8 00       		.uleb128 .LVU481
 9610 0ed9 00       		.uleb128 .LVU482
 9611 0eda 00       		.uleb128 .LVU482
 9612 0edb 00       		.uleb128 .LVU494
 9613 0edc 00       		.uleb128 .LVU494
 9614 0edd 00       		.uleb128 .LVU500
 9615 0ede 00       		.uleb128 .LVU500
 9616 0edf 00       		.uleb128 0
 9617              	.LLST66:
 9618 0ee0 80030000 		.4byte	.LVL119-.Ltext0
 9619 0ee4 B2030000 		.4byte	.LVL126-.Ltext0
 9620 0ee8 0100     		.2byte	0x1
 9621 0eea 50       		.byte	0x50
 9622 0eeb B2030000 		.4byte	.LVL126-.Ltext0
 9623 0eef B6030000 		.4byte	.LVL127-.Ltext0
 9624 0ef3 0400     		.2byte	0x4
 9625 0ef5 F3       		.byte	0xf3
 9626 0ef6 01       		.uleb128 0x1
 9627 0ef7 50       		.byte	0x50
 9628 0ef8 9F       		.byte	0x9f
 9629 0ef9 B6030000 		.4byte	.LVL127-.Ltext0
ARM GAS  /tmp/ccjtHtwZ.s 			page 239


 9630 0efd B8030000 		.4byte	.LVL128-.Ltext0
 9631 0f01 0100     		.2byte	0x1
 9632 0f03 50       		.byte	0x50
 9633 0f04 B8030000 		.4byte	.LVL128-.Ltext0
 9634 0f08 BB030000 		.4byte	.LVL129-1-.Ltext0
 9635 0f0c 0300     		.2byte	0x3
 9636 0f0e 70       		.byte	0x70
 9637 0f0f 5C       		.sleb128 -36
 9638 0f10 9F       		.byte	0x9f
 9639 0f11 BB030000 		.4byte	.LVL129-1-.Ltext0
 9640 0f15 CE030000 		.4byte	.LVL132-.Ltext0
 9641 0f19 0400     		.2byte	0x4
 9642 0f1b F3       		.byte	0xf3
 9643 0f1c 01       		.uleb128 0x1
 9644 0f1d 50       		.byte	0x50
 9645 0f1e 9F       		.byte	0x9f
 9646 0f1f CE030000 		.4byte	.LVL132-.Ltext0
 9647 0f23 DA030000 		.4byte	.LVL136-.Ltext0
 9648 0f27 0100     		.2byte	0x1
 9649 0f29 50       		.byte	0x50
 9650 0f2a DA030000 		.4byte	.LVL136-.Ltext0
 9651 0f2e DC030000 		.4byte	.LFE15-.Ltext0
 9652 0f32 0400     		.2byte	0x4
 9653 0f34 F3       		.byte	0xf3
 9654 0f35 01       		.uleb128 0x1
 9655 0f36 50       		.byte	0x50
 9656 0f37 9F       		.byte	0x9f
 9657 0f38 00000000 		.4byte	0
 9658 0f3c 00000000 		.4byte	0
 9659              	.LVUS67:
 9660 0f40 00       		.uleb128 0
 9661 0f41 00       		.uleb128 .LVU467
 9662 0f42 00       		.uleb128 .LVU467
 9663 0f43 00       		.uleb128 .LVU498
 9664 0f44 00       		.uleb128 .LVU498
 9665 0f45 00       		.uleb128 0
 9666              	.LLST67:
 9667 0f46 80030000 		.4byte	.LVL119-.Ltext0
 9668 0f4a A4030000 		.4byte	.LVL122-.Ltext0
 9669 0f4e 0100     		.2byte	0x1
 9670 0f50 51       		.byte	0x51
 9671 0f51 A4030000 		.4byte	.LVL122-.Ltext0
 9672 0f55 D8030000 		.4byte	.LVL135-.Ltext0
 9673 0f59 0100     		.2byte	0x1
 9674 0f5b 54       		.byte	0x54
 9675 0f5c D8030000 		.4byte	.LVL135-.Ltext0
 9676 0f60 DC030000 		.4byte	.LFE15-.Ltext0
 9677 0f64 0100     		.2byte	0x1
 9678 0f66 51       		.byte	0x51
 9679 0f67 00000000 		.4byte	0
 9680 0f6b 00000000 		.4byte	0
 9681              	.LVUS68:
 9682 0f6f 00       		.uleb128 .LVU487
 9683 0f70 00       		.uleb128 .LVU494
 9684              	.LLST68:
 9685 0f71 C8030000 		.4byte	.LVL130-.Ltext0
 9686 0f75 CE030000 		.4byte	.LVL132-.Ltext0
ARM GAS  /tmp/ccjtHtwZ.s 			page 240


 9687 0f79 0100     		.2byte	0x1
 9688 0f7b 50       		.byte	0x50
 9689 0f7c 00000000 		.4byte	0
 9690 0f80 00000000 		.4byte	0
 9691              	.LVUS69:
 9692 0f84 01       		.uleb128 .LVU460
 9693 0f85 00       		.uleb128 0
 9694              	.LLST69:
 9695 0f86 98030000 		.4byte	.LVL120-.Ltext0
 9696 0f8a DC030000 		.4byte	.LFE15-.Ltext0
 9697 0f8e 0100     		.2byte	0x1
 9698 0f90 55       		.byte	0x55
 9699 0f91 00000000 		.4byte	0
 9700 0f95 00000000 		.4byte	0
 9701              	.LVUS70:
 9702 0f99 04       		.uleb128 .LVU448
 9703 0f9a 00       		.uleb128 .LVU478
 9704 0f9b 00       		.uleb128 .LVU478
 9705 0f9c 00       		.uleb128 .LVU479
 9706 0f9d 00       		.uleb128 .LVU479
 9707 0f9e 00       		.uleb128 .LVU481
 9708 0f9f 00       		.uleb128 .LVU481
 9709 0fa0 00       		.uleb128 .LVU482
 9710 0fa1 00       		.uleb128 .LVU482
 9711 0fa2 00       		.uleb128 .LVU494
 9712 0fa3 00       		.uleb128 .LVU494
 9713 0fa4 00       		.uleb128 .LVU500
 9714 0fa5 00       		.uleb128 .LVU500
 9715 0fa6 00       		.uleb128 0
 9716              	.LLST70:
 9717 0fa7 80030000 		.4byte	.LVL119-.Ltext0
 9718 0fab B2030000 		.4byte	.LVL126-.Ltext0
 9719 0faf 0100     		.2byte	0x1
 9720 0fb1 50       		.byte	0x50
 9721 0fb2 B2030000 		.4byte	.LVL126-.Ltext0
 9722 0fb6 B6030000 		.4byte	.LVL127-.Ltext0
 9723 0fba 0400     		.2byte	0x4
 9724 0fbc F3       		.byte	0xf3
 9725 0fbd 01       		.uleb128 0x1
 9726 0fbe 50       		.byte	0x50
 9727 0fbf 9F       		.byte	0x9f
 9728 0fc0 B6030000 		.4byte	.LVL127-.Ltext0
 9729 0fc4 B8030000 		.4byte	.LVL128-.Ltext0
 9730 0fc8 0100     		.2byte	0x1
 9731 0fca 50       		.byte	0x50
 9732 0fcb B8030000 		.4byte	.LVL128-.Ltext0
 9733 0fcf BB030000 		.4byte	.LVL129-1-.Ltext0
 9734 0fd3 0300     		.2byte	0x3
 9735 0fd5 70       		.byte	0x70
 9736 0fd6 5C       		.sleb128 -36
 9737 0fd7 9F       		.byte	0x9f
 9738 0fd8 BB030000 		.4byte	.LVL129-1-.Ltext0
 9739 0fdc CE030000 		.4byte	.LVL132-.Ltext0
 9740 0fe0 0400     		.2byte	0x4
 9741 0fe2 F3       		.byte	0xf3
 9742 0fe3 01       		.uleb128 0x1
 9743 0fe4 50       		.byte	0x50
ARM GAS  /tmp/ccjtHtwZ.s 			page 241


 9744 0fe5 9F       		.byte	0x9f
 9745 0fe6 CE030000 		.4byte	.LVL132-.Ltext0
 9746 0fea DA030000 		.4byte	.LVL136-.Ltext0
 9747 0fee 0100     		.2byte	0x1
 9748 0ff0 50       		.byte	0x50
 9749 0ff1 DA030000 		.4byte	.LVL136-.Ltext0
 9750 0ff5 DC030000 		.4byte	.LFE15-.Ltext0
 9751 0ff9 0400     		.2byte	0x4
 9752 0ffb F3       		.byte	0xf3
 9753 0ffc 01       		.uleb128 0x1
 9754 0ffd 50       		.byte	0x50
 9755 0ffe 9F       		.byte	0x9f
 9756 0fff 00000000 		.4byte	0
 9757 1003 00000000 		.4byte	0
 9758              	.LVUS72:
 9759 1007 00       		.uleb128 .LVU463
 9760 1008 00       		.uleb128 .LVU468
 9761 1009 00       		.uleb128 .LVU468
 9762 100a 00       		.uleb128 .LVU478
 9763 100b 00       		.uleb128 .LVU479
 9764 100c 00       		.uleb128 .LVU482
 9765 100d 00       		.uleb128 .LVU494
 9766 100e 00       		.uleb128 .LVU498
 9767 100f 00       		.uleb128 .LVU498
 9768 1010 00       		.uleb128 0
 9769              	.LLST72:
 9770 1011 9A030000 		.4byte	.LVL121-.Ltext0
 9771 1015 A6030000 		.4byte	.LVL123-.Ltext0
 9772 1019 0100     		.2byte	0x1
 9773 101b 52       		.byte	0x52
 9774 101c A6030000 		.4byte	.LVL123-.Ltext0
 9775 1020 B2030000 		.4byte	.LVL126-.Ltext0
 9776 1024 0300     		.2byte	0x3
 9777 1026 72       		.byte	0x72
 9778 1027 7F       		.sleb128 -1
 9779 1028 9F       		.byte	0x9f
 9780 1029 B6030000 		.4byte	.LVL127-.Ltext0
 9781 102d BB030000 		.4byte	.LVL129-1-.Ltext0
 9782 1031 0300     		.2byte	0x3
 9783 1033 72       		.byte	0x72
 9784 1034 7F       		.sleb128 -1
 9785 1035 9F       		.byte	0x9f
 9786 1036 CE030000 		.4byte	.LVL132-.Ltext0
 9787 103a D8030000 		.4byte	.LVL135-.Ltext0
 9788 103e 0300     		.2byte	0x3
 9789 1040 72       		.byte	0x72
 9790 1041 7F       		.sleb128 -1
 9791 1042 9F       		.byte	0x9f
 9792 1043 D8030000 		.4byte	.LVL135-.Ltext0
 9793 1047 DC030000 		.4byte	.LFE15-.Ltext0
 9794 104b 0100     		.2byte	0x1
 9795 104d 52       		.byte	0x52
 9796 104e 00000000 		.4byte	0
 9797 1052 00000000 		.4byte	0
 9798              	.LVUS73:
 9799 1056 00       		.uleb128 .LVU470
 9800 1057 00       		.uleb128 .LVU477
ARM GAS  /tmp/ccjtHtwZ.s 			page 242


 9801 1058 00       		.uleb128 .LVU477
 9802 1059 00       		.uleb128 .LVU478
 9803 105a 00       		.uleb128 .LVU479
 9804 105b 00       		.uleb128 .LVU482
 9805 105c 00       		.uleb128 .LVU494
 9806 105d 00       		.uleb128 .LVU496
 9807 105e 00       		.uleb128 .LVU496
 9808 105f 00       		.uleb128 .LVU497
 9809 1060 00       		.uleb128 .LVU497
 9810 1061 00       		.uleb128 .LVU498
 9811              	.LLST73:
 9812 1062 AA030000 		.4byte	.LVL124-.Ltext0
 9813 1066 B0030000 		.4byte	.LVL125-.Ltext0
 9814 106a 0100     		.2byte	0x1
 9815 106c 53       		.byte	0x53
 9816 106d B0030000 		.4byte	.LVL125-.Ltext0
 9817 1071 B2030000 		.4byte	.LVL126-.Ltext0
 9818 1075 0100     		.2byte	0x1
 9819 1077 51       		.byte	0x51
 9820 1078 B6030000 		.4byte	.LVL127-.Ltext0
 9821 107c BB030000 		.4byte	.LVL129-1-.Ltext0
 9822 1080 0100     		.2byte	0x1
 9823 1082 51       		.byte	0x51
 9824 1083 CE030000 		.4byte	.LVL132-.Ltext0
 9825 1087 D0030000 		.4byte	.LVL133-.Ltext0
 9826 108b 0100     		.2byte	0x1
 9827 108d 53       		.byte	0x53
 9828 108e D0030000 		.4byte	.LVL133-.Ltext0
 9829 1092 D2030000 		.4byte	.LVL134-.Ltext0
 9830 1096 0300     		.2byte	0x3
 9831 1098 73       		.byte	0x73
 9832 1099 7F       		.sleb128 -1
 9833 109a 9F       		.byte	0x9f
 9834 109b D2030000 		.4byte	.LVL134-.Ltext0
 9835 109f D8030000 		.4byte	.LVL135-.Ltext0
 9836 10a3 0100     		.2byte	0x1
 9837 10a5 51       		.byte	0x51
 9838 10a6 00000000 		.4byte	0
 9839 10aa 00000000 		.4byte	0
 9840              	.LVUS71:
 9841 10ae 00       		.uleb128 .LVU459
 9842 10af 01       		.uleb128 .LVU460
 9843              	.LLST71:
 9844 10b0 98030000 		.4byte	.LVL120-.Ltext0
 9845 10b4 98030000 		.4byte	.LVL120-.Ltext0
 9846 10b8 0100     		.2byte	0x1
 9847 10ba 55       		.byte	0x55
 9848 10bb 00000000 		.4byte	0
 9849 10bf 00000000 		.4byte	0
 9850              	.LVUS74:
 9851 10c3 02       		.uleb128 .LVU489
 9852 10c4 00       		.uleb128 .LVU491
 9853              	.LLST74:
 9854 10c5 C8030000 		.4byte	.LVL130-.Ltext0
 9855 10c9 CC030000 		.4byte	.LVL131-.Ltext0
 9856 10cd 0100     		.2byte	0x1
 9857 10cf 55       		.byte	0x55
ARM GAS  /tmp/ccjtHtwZ.s 			page 243


 9858 10d0 00000000 		.4byte	0
 9859 10d4 00000000 		.4byte	0
 9860              	.LLST54:
 9861 10d8 18030000 		.4byte	.LFB14-.Ltext0
 9862 10dc 1A030000 		.4byte	.LCFI18-.Ltext0
 9863 10e0 0200     		.2byte	0x2
 9864 10e2 7D       		.byte	0x7d
 9865 10e3 00       		.sleb128 0
 9866 10e4 1A030000 		.4byte	.LCFI18-.Ltext0
 9867 10e8 80030000 		.4byte	.LFE14-.Ltext0
 9868 10ec 0200     		.2byte	0x2
 9869 10ee 7D       		.byte	0x7d
 9870 10ef 18       		.sleb128 24
 9871 10f0 00000000 		.4byte	0
 9872 10f4 00000000 		.4byte	0
 9873              	.LVUS55:
 9874 10f8 00       		.uleb128 0
 9875 10f9 00       		.uleb128 .LVU409
 9876 10fa 00       		.uleb128 .LVU409
 9877 10fb 00       		.uleb128 0
 9878              	.LLST55:
 9879 10fc 18030000 		.4byte	.LVL104-.Ltext0
 9880 1100 36030000 		.4byte	.LVL107-.Ltext0
 9881 1104 0100     		.2byte	0x1
 9882 1106 50       		.byte	0x50
 9883 1107 36030000 		.4byte	.LVL107-.Ltext0
 9884 110b 80030000 		.4byte	.LFE14-.Ltext0
 9885 110f 0100     		.2byte	0x1
 9886 1111 54       		.byte	0x54
 9887 1112 00000000 		.4byte	0
 9888 1116 00000000 		.4byte	0
 9889              	.LVUS56:
 9890 111a 00       		.uleb128 0
 9891 111b 00       		.uleb128 .LVU418
 9892 111c 00       		.uleb128 .LVU418
 9893 111d 00       		.uleb128 .LVU442
 9894 111e 00       		.uleb128 .LVU442
 9895 111f 00       		.uleb128 0
 9896              	.LLST56:
 9897 1120 18030000 		.4byte	.LVL104-.Ltext0
 9898 1124 4B030000 		.4byte	.LVL109-1-.Ltext0
 9899 1128 0100     		.2byte	0x1
 9900 112a 51       		.byte	0x51
 9901 112b 4B030000 		.4byte	.LVL109-1-.Ltext0
 9902 112f 7C030000 		.4byte	.LVL118-.Ltext0
 9903 1133 0400     		.2byte	0x4
 9904 1135 F3       		.byte	0xf3
 9905 1136 01       		.uleb128 0x1
 9906 1137 51       		.byte	0x51
 9907 1138 9F       		.byte	0x9f
 9908 1139 7C030000 		.4byte	.LVL118-.Ltext0
 9909 113d 80030000 		.4byte	.LFE14-.Ltext0
 9910 1141 0100     		.2byte	0x1
 9911 1143 51       		.byte	0x51
 9912 1144 00000000 		.4byte	0
 9913 1148 00000000 		.4byte	0
 9914              	.LVUS57:
ARM GAS  /tmp/ccjtHtwZ.s 			page 244


 9915 114c 00       		.uleb128 0
 9916 114d 00       		.uleb128 .LVU404
 9917 114e 00       		.uleb128 .LVU404
 9918 114f 00       		.uleb128 0
 9919              	.LLST57:
 9920 1150 18030000 		.4byte	.LVL104-.Ltext0
 9921 1154 20030000 		.4byte	.LVL105-.Ltext0
 9922 1158 0100     		.2byte	0x1
 9923 115a 52       		.byte	0x52
 9924 115b 20030000 		.4byte	.LVL105-.Ltext0
 9925 115f 80030000 		.4byte	.LFE14-.Ltext0
 9926 1163 0100     		.2byte	0x1
 9927 1165 57       		.byte	0x57
 9928 1166 00000000 		.4byte	0
 9929 116a 00000000 		.4byte	0
 9930              	.LVUS58:
 9931 116e 00       		.uleb128 0
 9932 116f 00       		.uleb128 .LVU405
 9933 1170 00       		.uleb128 .LVU405
 9934 1171 00       		.uleb128 .LVU418
 9935 1172 00       		.uleb128 .LVU418
 9936 1173 00       		.uleb128 .LVU442
 9937 1174 00       		.uleb128 .LVU442
 9938 1175 00       		.uleb128 0
 9939              	.LLST58:
 9940 1176 18030000 		.4byte	.LVL104-.Ltext0
 9941 117a 34030000 		.4byte	.LVL106-.Ltext0
 9942 117e 0100     		.2byte	0x1
 9943 1180 53       		.byte	0x53
 9944 1181 34030000 		.4byte	.LVL106-.Ltext0
 9945 1185 4B030000 		.4byte	.LVL109-1-.Ltext0
 9946 1189 0100     		.2byte	0x1
 9947 118b 52       		.byte	0x52
 9948 118c 4B030000 		.4byte	.LVL109-1-.Ltext0
 9949 1190 7C030000 		.4byte	.LVL118-.Ltext0
 9950 1194 0400     		.2byte	0x4
 9951 1196 F3       		.byte	0xf3
 9952 1197 01       		.uleb128 0x1
 9953 1198 53       		.byte	0x53
 9954 1199 9F       		.byte	0x9f
 9955 119a 7C030000 		.4byte	.LVL118-.Ltext0
 9956 119e 80030000 		.4byte	.LFE14-.Ltext0
 9957 11a2 0100     		.2byte	0x1
 9958 11a4 52       		.byte	0x52
 9959 11a5 00000000 		.4byte	0
 9960 11a9 00000000 		.4byte	0
 9961              	.LVUS59:
 9962 11ad 00       		.uleb128 .LVU431
 9963 11ae 00       		.uleb128 .LVU438
 9964              	.LLST59:
 9965 11af 6C030000 		.4byte	.LVL113-.Ltext0
 9966 11b3 72030000 		.4byte	.LVL115-.Ltext0
 9967 11b7 0100     		.2byte	0x1
 9968 11b9 50       		.byte	0x50
 9969 11ba 00000000 		.4byte	0
 9970 11be 00000000 		.4byte	0
 9971              	.LVUS60:
ARM GAS  /tmp/ccjtHtwZ.s 			page 245


 9972 11c2 01       		.uleb128 .LVU406
 9973 11c3 00       		.uleb128 0
 9974              	.LLST60:
 9975 11c4 34030000 		.4byte	.LVL106-.Ltext0
 9976 11c8 80030000 		.4byte	.LFE14-.Ltext0
 9977 11cc 0100     		.2byte	0x1
 9978 11ce 56       		.byte	0x56
 9979 11cf 00000000 		.4byte	0
 9980 11d3 00000000 		.4byte	0
 9981              	.LVUS61:
 9982 11d7 04       		.uleb128 .LVU394
 9983 11d8 00       		.uleb128 .LVU409
 9984 11d9 00       		.uleb128 .LVU409
 9985 11da 00       		.uleb128 0
 9986              	.LLST61:
 9987 11db 18030000 		.4byte	.LVL104-.Ltext0
 9988 11df 36030000 		.4byte	.LVL107-.Ltext0
 9989 11e3 0100     		.2byte	0x1
 9990 11e5 50       		.byte	0x50
 9991 11e6 36030000 		.4byte	.LVL107-.Ltext0
 9992 11ea 80030000 		.4byte	.LFE14-.Ltext0
 9993 11ee 0100     		.2byte	0x1
 9994 11f0 54       		.byte	0x54
 9995 11f1 00000000 		.4byte	0
 9996 11f5 00000000 		.4byte	0
 9997              	.LVUS63:
 9998 11f9 00       		.uleb128 .LVU415
 9999 11fa 00       		.uleb128 .LVU423
 10000 11fb 00       		.uleb128 .LVU424
 10001 11fc 00       		.uleb128 .LVU431
 10002 11fd 00       		.uleb128 .LVU438
 10003 11fe 00       		.uleb128 .LVU440
 10004 11ff 00       		.uleb128 .LVU440
 10005 1200 00       		.uleb128 .LVU441
 10006 1201 00       		.uleb128 .LVU441
 10007 1202 00       		.uleb128 .LVU442
 10008              	.LLST63:
 10009 1203 48030000 		.4byte	.LVL108-.Ltext0
 10010 1207 54030000 		.4byte	.LVL110-.Ltext0
 10011 120b 0100     		.2byte	0x1
 10012 120d 55       		.byte	0x55
 10013 120e 58030000 		.4byte	.LVL111-.Ltext0
 10014 1212 6C030000 		.4byte	.LVL113-.Ltext0
 10015 1216 0100     		.2byte	0x1
 10016 1218 55       		.byte	0x55
 10017 1219 72030000 		.4byte	.LVL115-.Ltext0
 10018 121d 74030000 		.4byte	.LVL116-.Ltext0
 10019 1221 0100     		.2byte	0x1
 10020 1223 55       		.byte	0x55
 10021 1224 74030000 		.4byte	.LVL116-.Ltext0
 10022 1228 76030000 		.4byte	.LVL117-.Ltext0
 10023 122c 0300     		.2byte	0x3
 10024 122e 75       		.byte	0x75
 10025 122f 7F       		.sleb128 -1
 10026 1230 9F       		.byte	0x9f
 10027 1231 76030000 		.4byte	.LVL117-.Ltext0
 10028 1235 7C030000 		.4byte	.LVL118-.Ltext0
ARM GAS  /tmp/ccjtHtwZ.s 			page 246


 10029 1239 0300     		.2byte	0x3
 10030 123b 73       		.byte	0x73
 10031 123c 7F       		.sleb128 -1
 10032 123d 9F       		.byte	0x9f
 10033 123e 00000000 		.4byte	0
 10034 1242 00000000 		.4byte	0
 10035              	.LVUS62:
 10036 1246 00       		.uleb128 .LVU405
 10037 1247 01       		.uleb128 .LVU406
 10038              	.LLST62:
 10039 1248 34030000 		.4byte	.LVL106-.Ltext0
 10040 124c 34030000 		.4byte	.LVL106-.Ltext0
 10041 1250 0100     		.2byte	0x1
 10042 1252 56       		.byte	0x56
 10043 1253 00000000 		.4byte	0
 10044 1257 00000000 		.4byte	0
 10045              	.LVUS64:
 10046 125b 02       		.uleb128 .LVU433
 10047 125c 00       		.uleb128 .LVU435
 10048              	.LLST64:
 10049 125d 6C030000 		.4byte	.LVL113-.Ltext0
 10050 1261 70030000 		.4byte	.LVL114-.Ltext0
 10051 1265 0100     		.2byte	0x1
 10052 1267 56       		.byte	0x56
 10053 1268 00000000 		.4byte	0
 10054 126c 00000000 		.4byte	0
 10055              	.LLST36:
 10056 1270 C8010000 		.4byte	.LFB13-.Ltext0
 10057 1274 CC010000 		.4byte	.LCFI12-.Ltext0
 10058 1278 0200     		.2byte	0x2
 10059 127a 7D       		.byte	0x7d
 10060 127b 00       		.sleb128 0
 10061 127c CC010000 		.4byte	.LCFI12-.Ltext0
 10062 1280 DA010000 		.4byte	.LCFI13-.Ltext0
 10063 1284 0200     		.2byte	0x2
 10064 1286 7D       		.byte	0x7d
 10065 1287 1C       		.sleb128 28
 10066 1288 DA010000 		.4byte	.LCFI13-.Ltext0
 10067 128c 20020000 		.4byte	.LCFI14-.Ltext0
 10068 1290 0200     		.2byte	0x2
 10069 1292 7D       		.byte	0x7d
 10070 1293 30       		.sleb128 48
 10071 1294 20020000 		.4byte	.LCFI14-.Ltext0
 10072 1298 24020000 		.4byte	.LCFI15-.Ltext0
 10073 129c 0200     		.2byte	0x2
 10074 129e 7D       		.byte	0x7d
 10075 129f 1C       		.sleb128 28
 10076 12a0 24020000 		.4byte	.LCFI15-.Ltext0
 10077 12a4 CC020000 		.4byte	.LFE13-.Ltext0
 10078 12a8 0200     		.2byte	0x2
 10079 12aa 7D       		.byte	0x7d
 10080 12ab 30       		.sleb128 48
 10081 12ac 00000000 		.4byte	0
 10082 12b0 00000000 		.4byte	0
 10083              	.LVUS37:
 10084 12b4 00       		.uleb128 0
 10085 12b5 00       		.uleb128 .LVU255
ARM GAS  /tmp/ccjtHtwZ.s 			page 247


 10086 12b6 00       		.uleb128 .LVU255
 10087 12b7 00       		.uleb128 0
 10088              	.LLST37:
 10089 12b8 C8010000 		.4byte	.LVL64-.Ltext0
 10090 12bc DC010000 		.4byte	.LVL66-.Ltext0
 10091 12c0 0100     		.2byte	0x1
 10092 12c2 50       		.byte	0x50
 10093 12c3 DC010000 		.4byte	.LVL66-.Ltext0
 10094 12c7 CC020000 		.4byte	.LFE13-.Ltext0
 10095 12cb 0100     		.2byte	0x1
 10096 12cd 54       		.byte	0x54
 10097 12ce 00000000 		.4byte	0
 10098 12d2 00000000 		.4byte	0
 10099              	.LVUS38:
 10100 12d6 00       		.uleb128 0
 10101 12d7 00       		.uleb128 .LVU255
 10102 12d8 00       		.uleb128 .LVU255
 10103 12d9 00       		.uleb128 0
 10104              	.LLST38:
 10105 12da C8010000 		.4byte	.LVL64-.Ltext0
 10106 12de DC010000 		.4byte	.LVL66-.Ltext0
 10107 12e2 0100     		.2byte	0x1
 10108 12e4 51       		.byte	0x51
 10109 12e5 DC010000 		.4byte	.LVL66-.Ltext0
 10110 12e9 CC020000 		.4byte	.LFE13-.Ltext0
 10111 12ed 0100     		.2byte	0x1
 10112 12ef 57       		.byte	0x57
 10113 12f0 00000000 		.4byte	0
 10114 12f4 00000000 		.4byte	0
 10115              	.LVUS39:
 10116 12f8 00       		.uleb128 0
 10117 12f9 00       		.uleb128 .LVU255
 10118              	.LLST39:
 10119 12fa C8010000 		.4byte	.LVL64-.Ltext0
 10120 12fe DC010000 		.4byte	.LVL66-.Ltext0
 10121 1302 0100     		.2byte	0x1
 10122 1304 52       		.byte	0x52
 10123 1305 00000000 		.4byte	0
 10124 1309 00000000 		.4byte	0
 10125              	.LVUS40:
 10126 130d 00       		.uleb128 0
 10127 130e 00       		.uleb128 .LVU255
 10128 130f 00       		.uleb128 .LVU255
 10129 1310 00       		.uleb128 0
 10130              	.LLST40:
 10131 1311 C8010000 		.4byte	.LVL64-.Ltext0
 10132 1315 DC010000 		.4byte	.LVL66-.Ltext0
 10133 1319 0100     		.2byte	0x1
 10134 131b 53       		.byte	0x53
 10135 131c DC010000 		.4byte	.LVL66-.Ltext0
 10136 1320 CC020000 		.4byte	.LFE13-.Ltext0
 10137 1324 0100     		.2byte	0x1
 10138 1326 56       		.byte	0x56
 10139 1327 00000000 		.4byte	0
 10140 132b 00000000 		.4byte	0
 10141              	.LVUS41:
 10142 132f 02       		.uleb128 .LVU246
ARM GAS  /tmp/ccjtHtwZ.s 			page 248


 10143 1330 00       		.uleb128 .LVU255
 10144 1331 00       		.uleb128 .LVU255
 10145 1332 00       		.uleb128 .LVU284
 10146 1333 00       		.uleb128 .LVU285
 10147 1334 02       		.uleb128 .LVU290
 10148 1335 00       		.uleb128 .LVU293
 10149 1336 01       		.uleb128 .LVU297
 10150 1337 01       		.uleb128 .LVU297
 10151 1338 00       		.uleb128 0
 10152              	.LLST41:
 10153 1339 C8010000 		.4byte	.LVL64-.Ltext0
 10154 133d DC010000 		.4byte	.LVL66-.Ltext0
 10155 1341 0200     		.2byte	0x2
 10156 1343 30       		.byte	0x30
 10157 1344 9F       		.byte	0x9f
 10158 1345 DC010000 		.4byte	.LVL66-.Ltext0
 10159 1349 1E020000 		.4byte	.LVL72-.Ltext0
 10160 134d 0100     		.2byte	0x1
 10161 134f 58       		.byte	0x58
 10162 1350 24020000 		.4byte	.LVL73-.Ltext0
 10163 1354 2C020000 		.4byte	.LVL74-.Ltext0
 10164 1358 0100     		.2byte	0x1
 10165 135a 58       		.byte	0x58
 10166 135b 30020000 		.4byte	.LVL75-.Ltext0
 10167 135f 3C020000 		.4byte	.LVL76-.Ltext0
 10168 1363 0100     		.2byte	0x1
 10169 1365 58       		.byte	0x58
 10170 1366 3C020000 		.4byte	.LVL76-.Ltext0
 10171 136a CC020000 		.4byte	.LFE13-.Ltext0
 10172 136e 0200     		.2byte	0x2
 10173 1370 31       		.byte	0x31
 10174 1371 9F       		.byte	0x9f
 10175 1372 00000000 		.4byte	0
 10176 1376 00000000 		.4byte	0
 10177              	.LVUS42:
 10178 137a 00       		.uleb128 .LVU268
 10179 137b 00       		.uleb128 .LVU273
 10180              	.LLST42:
 10181 137c F6010000 		.4byte	.LVL68-.Ltext0
 10182 1380 FE010000 		.4byte	.LVL69-.Ltext0
 10183 1384 0100     		.2byte	0x1
 10184 1386 50       		.byte	0x50
 10185 1387 00000000 		.4byte	0
 10186 138b 00000000 		.4byte	0
 10187              	.LVUS43:
 10188 138f 00       		.uleb128 .LVU251
 10189 1390 00       		.uleb128 .LVU255
 10190 1391 00       		.uleb128 .LVU255
 10191 1392 00       		.uleb128 0
 10192              	.LLST43:
 10193 1393 D2010000 		.4byte	.LVL65-.Ltext0
 10194 1397 DC010000 		.4byte	.LVL66-.Ltext0
 10195 139b 0100     		.2byte	0x1
 10196 139d 50       		.byte	0x50
 10197 139e DC010000 		.4byte	.LVL66-.Ltext0
 10198 13a2 CC020000 		.4byte	.LFE13-.Ltext0
 10199 13a6 0100     		.2byte	0x1
ARM GAS  /tmp/ccjtHtwZ.s 			page 249


 10200 13a8 54       		.byte	0x54
 10201 13a9 00000000 		.4byte	0
 10202 13ad 00000000 		.4byte	0
 10203              	.LVUS44:
 10204 13b1 01       		.uleb128 .LVU310
 10205 13b2 01       		.uleb128 .LVU318
 10206 13b3 00       		.uleb128 .LVU326
 10207 13b4 01       		.uleb128 .LVU329
 10208              	.LLST44:
 10209 13b5 6E020000 		.4byte	.LVL82-.Ltext0
 10210 13b9 7E020000 		.4byte	.LVL85-.Ltext0
 10211 13bd 0100     		.2byte	0x1
 10212 13bf 54       		.byte	0x54
 10213 13c0 9A020000 		.4byte	.LVL89-.Ltext0
 10214 13c4 9E020000 		.4byte	.LVL90-.Ltext0
 10215 13c8 0100     		.2byte	0x1
 10216 13ca 54       		.byte	0x54
 10217 13cb 00000000 		.4byte	0
 10218 13cf 00000000 		.4byte	0
 10219              	.LVUS45:
 10220 13d3 00       		.uleb128 .LVU316
 10221 13d4 01       		.uleb128 .LVU318
 10222 13d5 01       		.uleb128 .LVU327
 10223 13d6 01       		.uleb128 .LVU329
 10224              	.LLST45:
 10225 13d7 7A020000 		.4byte	.LVL84-.Ltext0
 10226 13db 7E020000 		.4byte	.LVL85-.Ltext0
 10227 13df 0200     		.2byte	0x2
 10228 13e1 31       		.byte	0x31
 10229 13e2 9F       		.byte	0x9f
 10230 13e3 9A020000 		.4byte	.LVL89-.Ltext0
 10231 13e7 9E020000 		.4byte	.LVL90-.Ltext0
 10232 13eb 0200     		.2byte	0x2
 10233 13ed 30       		.byte	0x30
 10234 13ee 9F       		.byte	0x9f
 10235 13ef 00000000 		.4byte	0
 10236 13f3 00000000 		.4byte	0
 10237              	.LLST32:
 10238 13f7 B6010000 		.4byte	.LFB12-.Ltext0
 10239 13fb B8010000 		.4byte	.LCFI11-.Ltext0
 10240 13ff 0200     		.2byte	0x2
 10241 1401 7D       		.byte	0x7d
 10242 1402 00       		.sleb128 0
 10243 1403 B8010000 		.4byte	.LCFI11-.Ltext0
 10244 1407 C8010000 		.4byte	.LFE12-.Ltext0
 10245 140b 0200     		.2byte	0x2
 10246 140d 7D       		.byte	0x7d
 10247 140e 08       		.sleb128 8
 10248 140f 00000000 		.4byte	0
 10249 1413 00000000 		.4byte	0
 10250              	.LVUS33:
 10251 1417 00       		.uleb128 0
 10252 1418 00       		.uleb128 .LVU235
 10253 1419 00       		.uleb128 .LVU235
 10254 141a 00       		.uleb128 0
 10255              	.LLST33:
 10256 141b B6010000 		.4byte	.LVL61-.Ltext0
ARM GAS  /tmp/ccjtHtwZ.s 			page 250


 10257 141f C1010000 		.4byte	.LVL63-1-.Ltext0
 10258 1423 0100     		.2byte	0x1
 10259 1425 50       		.byte	0x50
 10260 1426 C1010000 		.4byte	.LVL63-1-.Ltext0
 10261 142a C8010000 		.4byte	.LFE12-.Ltext0
 10262 142e 0400     		.2byte	0x4
 10263 1430 F3       		.byte	0xf3
 10264 1431 01       		.uleb128 0x1
 10265 1432 50       		.byte	0x50
 10266 1433 9F       		.byte	0x9f
 10267 1434 00000000 		.4byte	0
 10268 1438 00000000 		.4byte	0
 10269              	.LVUS34:
 10270 143c 00       		.uleb128 0
 10271 143d 00       		.uleb128 .LVU234
 10272 143e 00       		.uleb128 .LVU234
 10273 143f 00       		.uleb128 0
 10274              	.LLST34:
 10275 1440 B6010000 		.4byte	.LVL61-.Ltext0
 10276 1444 BE010000 		.4byte	.LVL62-.Ltext0
 10277 1448 0100     		.2byte	0x1
 10278 144a 51       		.byte	0x51
 10279 144b BE010000 		.4byte	.LVL62-.Ltext0
 10280 144f C8010000 		.4byte	.LFE12-.Ltext0
 10281 1453 0100     		.2byte	0x1
 10282 1455 54       		.byte	0x54
 10283 1456 00000000 		.4byte	0
 10284 145a 00000000 		.4byte	0
 10285              	.LVUS35:
 10286 145e 00       		.uleb128 .LVU235
 10287 145f 00       		.uleb128 0
 10288              	.LLST35:
 10289 1460 C2010000 		.4byte	.LVL63-.Ltext0
 10290 1464 C8010000 		.4byte	.LFE12-.Ltext0
 10291 1468 0100     		.2byte	0x1
 10292 146a 50       		.byte	0x50
 10293 146b 00000000 		.4byte	0
 10294 146f 00000000 		.4byte	0
 10295              	.LLST92:
 10296 1473 F0050000 		.4byte	.LFB11-.Ltext0
 10297 1477 F2050000 		.4byte	.LCFI26-.Ltext0
 10298 147b 0200     		.2byte	0x2
 10299 147d 7D       		.byte	0x7d
 10300 147e 00       		.sleb128 0
 10301 147f F2050000 		.4byte	.LCFI26-.Ltext0
 10302 1483 1E060000 		.4byte	.LFE11-.Ltext0
 10303 1487 0200     		.2byte	0x2
 10304 1489 7D       		.byte	0x7d
 10305 148a 10       		.sleb128 16
 10306 148b 00000000 		.4byte	0
 10307 148f 00000000 		.4byte	0
 10308              	.LVUS93:
 10309 1493 00       		.uleb128 0
 10310 1494 00       		.uleb128 .LVU714
 10311 1495 00       		.uleb128 .LVU714
 10312 1496 00       		.uleb128 0
 10313              	.LLST93:
ARM GAS  /tmp/ccjtHtwZ.s 			page 251


 10314 1497 F0050000 		.4byte	.LVL203-.Ltext0
 10315 149b FB050000 		.4byte	.LVL204-1-.Ltext0
 10316 149f 0100     		.2byte	0x1
 10317 14a1 50       		.byte	0x50
 10318 14a2 FB050000 		.4byte	.LVL204-1-.Ltext0
 10319 14a6 1E060000 		.4byte	.LFE11-.Ltext0
 10320 14aa 0100     		.2byte	0x1
 10321 14ac 54       		.byte	0x54
 10322 14ad 00000000 		.4byte	0
 10323 14b1 00000000 		.4byte	0
 10324              	.LVUS94:
 10325 14b5 00       		.uleb128 0
 10326 14b6 00       		.uleb128 .LVU714
 10327 14b7 00       		.uleb128 .LVU714
 10328 14b8 00       		.uleb128 0
 10329              	.LLST94:
 10330 14b9 F0050000 		.4byte	.LVL203-.Ltext0
 10331 14bd FB050000 		.4byte	.LVL204-1-.Ltext0
 10332 14c1 0100     		.2byte	0x1
 10333 14c3 51       		.byte	0x51
 10334 14c4 FB050000 		.4byte	.LVL204-1-.Ltext0
 10335 14c8 1E060000 		.4byte	.LFE11-.Ltext0
 10336 14cc 0100     		.2byte	0x1
 10337 14ce 55       		.byte	0x55
 10338 14cf 00000000 		.4byte	0
 10339 14d3 00000000 		.4byte	0
 10340              	.LVUS95:
 10341 14d7 00       		.uleb128 .LVU722
 10342 14d8 00       		.uleb128 0
 10343              	.LLST95:
 10344 14d9 12060000 		.4byte	.LVL207-.Ltext0
 10345 14dd 1E060000 		.4byte	.LFE11-.Ltext0
 10346 14e1 0100     		.2byte	0x1
 10347 14e3 50       		.byte	0x50
 10348 14e4 00000000 		.4byte	0
 10349 14e8 00000000 		.4byte	0
 10350              	.LVUS96:
 10351 14ec 03       		.uleb128 .LVU707
 10352 14ed 00       		.uleb128 .LVU714
 10353 14ee 00       		.uleb128 .LVU714
 10354 14ef 00       		.uleb128 0
 10355              	.LLST96:
 10356 14f0 F0050000 		.4byte	.LVL203-.Ltext0
 10357 14f4 FB050000 		.4byte	.LVL204-1-.Ltext0
 10358 14f8 0100     		.2byte	0x1
 10359 14fa 50       		.byte	0x50
 10360 14fb FB050000 		.4byte	.LVL204-1-.Ltext0
 10361 14ff 1E060000 		.4byte	.LFE11-.Ltext0
 10362 1503 0100     		.2byte	0x1
 10363 1505 54       		.byte	0x54
 10364 1506 00000000 		.4byte	0
 10365 150a 00000000 		.4byte	0
 10366              	.LLST50:
 10367 150e F0020000 		.4byte	.LFB10-.Ltext0
 10368 1512 F2020000 		.4byte	.LCFI17-.Ltext0
 10369 1516 0200     		.2byte	0x2
 10370 1518 7D       		.byte	0x7d
ARM GAS  /tmp/ccjtHtwZ.s 			page 252


 10371 1519 00       		.sleb128 0
 10372 151a F2020000 		.4byte	.LCFI17-.Ltext0
 10373 151e 18030000 		.4byte	.LFE10-.Ltext0
 10374 1522 0200     		.2byte	0x2
 10375 1524 7D       		.byte	0x7d
 10376 1525 10       		.sleb128 16
 10377 1526 00000000 		.4byte	0
 10378 152a 00000000 		.4byte	0
 10379              	.LVUS51:
 10380 152e 00       		.uleb128 0
 10381 152f 00       		.uleb128 .LVU375
 10382 1530 00       		.uleb128 .LVU375
 10383 1531 00       		.uleb128 0
 10384              	.LLST51:
 10385 1532 F0020000 		.4byte	.LVL99-.Ltext0
 10386 1536 F9020000 		.4byte	.LVL100-1-.Ltext0
 10387 153a 0100     		.2byte	0x1
 10388 153c 50       		.byte	0x50
 10389 153d F9020000 		.4byte	.LVL100-1-.Ltext0
 10390 1541 18030000 		.4byte	.LFE10-.Ltext0
 10391 1545 0100     		.2byte	0x1
 10392 1547 54       		.byte	0x54
 10393 1548 00000000 		.4byte	0
 10394 154c 00000000 		.4byte	0
 10395              	.LVUS52:
 10396 1550 00       		.uleb128 .LVU384
 10397 1551 00       		.uleb128 .LVU387
 10398              	.LLST52:
 10399 1552 12030000 		.4byte	.LVL102-.Ltext0
 10400 1556 14030000 		.4byte	.LVL103-.Ltext0
 10401 155a 0200     		.2byte	0x2
 10402 155c 31       		.byte	0x31
 10403 155d 9F       		.byte	0x9f
 10404 155e 00000000 		.4byte	0
 10405 1562 00000000 		.4byte	0
 10406              	.LVUS53:
 10407 1566 03       		.uleb128 .LVU369
 10408 1567 00       		.uleb128 .LVU375
 10409 1568 00       		.uleb128 .LVU375
 10410 1569 00       		.uleb128 0
 10411              	.LLST53:
 10412 156a F0020000 		.4byte	.LVL99-.Ltext0
 10413 156e F9020000 		.4byte	.LVL100-1-.Ltext0
 10414 1572 0100     		.2byte	0x1
 10415 1574 50       		.byte	0x50
 10416 1575 F9020000 		.4byte	.LVL100-1-.Ltext0
 10417 1579 18030000 		.4byte	.LFE10-.Ltext0
 10418 157d 0100     		.2byte	0x1
 10419 157f 54       		.byte	0x54
 10420 1580 00000000 		.4byte	0
 10421 1584 00000000 		.4byte	0
 10422              	.LLST46:
 10423 1588 CC020000 		.4byte	.LFB9-.Ltext0
 10424 158c D0020000 		.4byte	.LCFI16-.Ltext0
 10425 1590 0200     		.2byte	0x2
 10426 1592 7D       		.byte	0x7d
 10427 1593 00       		.sleb128 0
ARM GAS  /tmp/ccjtHtwZ.s 			page 253


 10428 1594 D0020000 		.4byte	.LCFI16-.Ltext0
 10429 1598 F0020000 		.4byte	.LFE9-.Ltext0
 10430 159c 0200     		.2byte	0x2
 10431 159e 7D       		.byte	0x7d
 10432 159f 08       		.sleb128 8
 10433 15a0 00000000 		.4byte	0
 10434 15a4 00000000 		.4byte	0
 10435              	.LVUS47:
 10436 15a8 00       		.uleb128 0
 10437 15a9 00       		.uleb128 .LVU345
 10438 15aa 00       		.uleb128 .LVU345
 10439 15ab 00       		.uleb128 0
 10440              	.LLST47:
 10441 15ac CC020000 		.4byte	.LVL95-.Ltext0
 10442 15b0 D4020000 		.4byte	.LVL96-.Ltext0
 10443 15b4 0100     		.2byte	0x1
 10444 15b6 50       		.byte	0x50
 10445 15b7 D4020000 		.4byte	.LVL96-.Ltext0
 10446 15bb F0020000 		.4byte	.LFE9-.Ltext0
 10447 15bf 0400     		.2byte	0x4
 10448 15c1 F3       		.byte	0xf3
 10449 15c2 01       		.uleb128 0x1
 10450 15c3 50       		.byte	0x50
 10451 15c4 9F       		.byte	0x9f
 10452 15c5 00000000 		.4byte	0
 10453 15c9 00000000 		.4byte	0
 10454              	.LVUS48:
 10455 15cd 00       		.uleb128 .LVU346
 10456 15ce 00       		.uleb128 .LVU361
 10457 15cf 00       		.uleb128 .LVU361
 10458 15d0 00       		.uleb128 0
 10459              	.LLST48:
 10460 15d1 D8020000 		.4byte	.LVL97-.Ltext0
 10461 15d5 EB020000 		.4byte	.LVL98-1-.Ltext0
 10462 15d9 0100     		.2byte	0x1
 10463 15db 50       		.byte	0x50
 10464 15dc EB020000 		.4byte	.LVL98-1-.Ltext0
 10465 15e0 F0020000 		.4byte	.LFE9-.Ltext0
 10466 15e4 0100     		.2byte	0x1
 10467 15e6 54       		.byte	0x54
 10468 15e7 00000000 		.4byte	0
 10469 15eb 00000000 		.4byte	0
 10470              	.LVUS49:
 10471 15ef 01       		.uleb128 .LVU347
 10472 15f0 00       		.uleb128 .LVU361
 10473 15f1 00       		.uleb128 .LVU361
 10474 15f2 01       		.uleb128 .LVU362
 10475              	.LLST49:
 10476 15f3 D8020000 		.4byte	.LVL97-.Ltext0
 10477 15f7 EB020000 		.4byte	.LVL98-1-.Ltext0
 10478 15fb 0100     		.2byte	0x1
 10479 15fd 50       		.byte	0x50
 10480 15fe EB020000 		.4byte	.LVL98-1-.Ltext0
 10481 1602 EC020000 		.4byte	.LVL98-.Ltext0
 10482 1606 0100     		.2byte	0x1
 10483 1608 54       		.byte	0x54
 10484 1609 00000000 		.4byte	0
ARM GAS  /tmp/ccjtHtwZ.s 			page 254


 10485 160d 00000000 		.4byte	0
 10486              	.LLST20:
 10487 1611 82010000 		.4byte	.LFB6-.Ltext0
 10488 1615 84010000 		.4byte	.LCFI10-.Ltext0
 10489 1619 0200     		.2byte	0x2
 10490 161b 7D       		.byte	0x7d
 10491 161c 00       		.sleb128 0
 10492 161d 84010000 		.4byte	.LCFI10-.Ltext0
 10493 1621 B6010000 		.4byte	.LFE6-.Ltext0
 10494 1625 0200     		.2byte	0x2
 10495 1627 7D       		.byte	0x7d
 10496 1628 18       		.sleb128 24
 10497 1629 00000000 		.4byte	0
 10498 162d 00000000 		.4byte	0
 10499              	.LVUS21:
 10500 1631 00       		.uleb128 0
 10501 1632 00       		.uleb128 .LVU198
 10502 1633 00       		.uleb128 .LVU198
 10503 1634 00       		.uleb128 0
 10504              	.LLST21:
 10505 1635 82010000 		.4byte	.LVL52-.Ltext0
 10506 1639 88010000 		.4byte	.LVL53-.Ltext0
 10507 163d 0100     		.2byte	0x1
 10508 163f 50       		.byte	0x50
 10509 1640 88010000 		.4byte	.LVL53-.Ltext0
 10510 1644 B6010000 		.4byte	.LFE6-.Ltext0
 10511 1648 0100     		.2byte	0x1
 10512 164a 56       		.byte	0x56
 10513 164b 00000000 		.4byte	0
 10514 164f 00000000 		.4byte	0
 10515              	.LVUS22:
 10516 1653 00       		.uleb128 0
 10517 1654 00       		.uleb128 .LVU201
 10518 1655 00       		.uleb128 .LVU201
 10519 1656 00       		.uleb128 0
 10520              	.LLST22:
 10521 1657 82010000 		.4byte	.LVL52-.Ltext0
 10522 165b 91010000 		.4byte	.LVL55-1-.Ltext0
 10523 165f 0100     		.2byte	0x1
 10524 1661 51       		.byte	0x51
 10525 1662 91010000 		.4byte	.LVL55-1-.Ltext0
 10526 1666 B6010000 		.4byte	.LFE6-.Ltext0
 10527 166a 0100     		.2byte	0x1
 10528 166c 55       		.byte	0x55
 10529 166d 00000000 		.4byte	0
 10530 1671 00000000 		.4byte	0
 10531              	.LVUS23:
 10532 1675 00       		.uleb128 0
 10533 1676 00       		.uleb128 .LVU201
 10534 1677 00       		.uleb128 .LVU201
 10535 1678 00       		.uleb128 0
 10536              	.LLST23:
 10537 1679 82010000 		.4byte	.LVL52-.Ltext0
 10538 167d 91010000 		.4byte	.LVL55-1-.Ltext0
 10539 1681 0100     		.2byte	0x1
 10540 1683 52       		.byte	0x52
 10541 1684 91010000 		.4byte	.LVL55-1-.Ltext0
ARM GAS  /tmp/ccjtHtwZ.s 			page 255


 10542 1688 B6010000 		.4byte	.LFE6-.Ltext0
 10543 168c 0400     		.2byte	0x4
 10544 168e F3       		.byte	0xf3
 10545 168f 01       		.uleb128 0x1
 10546 1690 52       		.byte	0x52
 10547 1691 9F       		.byte	0x9f
 10548 1692 00000000 		.4byte	0
 10549 1696 00000000 		.4byte	0
 10550              	.LVUS24:
 10551 169a 00       		.uleb128 .LVU201
 10552 169b 00       		.uleb128 .LVU213
 10553 169c 00       		.uleb128 .LVU213
 10554 169d 00       		.uleb128 .LVU224
 10555 169e 00       		.uleb128 .LVU224
 10556 169f 00       		.uleb128 0
 10557              	.LLST24:
 10558 16a0 92010000 		.4byte	.LVL55-.Ltext0
 10559 16a4 A0010000 		.4byte	.LVL58-.Ltext0
 10560 16a8 0100     		.2byte	0x1
 10561 16aa 50       		.byte	0x50
 10562 16ab A0010000 		.4byte	.LVL58-.Ltext0
 10563 16af B2010000 		.4byte	.LVL60-.Ltext0
 10564 16b3 0100     		.2byte	0x1
 10565 16b5 54       		.byte	0x54
 10566 16b6 B2010000 		.4byte	.LVL60-.Ltext0
 10567 16ba B6010000 		.4byte	.LFE6-.Ltext0
 10568 16be 0100     		.2byte	0x1
 10569 16c0 50       		.byte	0x50
 10570 16c1 00000000 		.4byte	0
 10571 16c5 00000000 		.4byte	0
 10572              	.LVUS25:
 10573 16c9 06       		.uleb128 .LVU194
 10574 16ca 00       		.uleb128 .LVU198
 10575 16cb 00       		.uleb128 .LVU198
 10576 16cc 00       		.uleb128 .LVU199
 10577 16cd 00       		.uleb128 .LVU199
 10578 16ce 00       		.uleb128 .LVU201
 10579 16cf 00       		.uleb128 .LVU201
 10580 16d0 00       		.uleb128 0
 10581              	.LLST25:
 10582 16d1 82010000 		.4byte	.LVL52-.Ltext0
 10583 16d5 88010000 		.4byte	.LVL53-.Ltext0
 10584 16d9 0600     		.2byte	0x6
 10585 16db 71       		.byte	0x71
 10586 16dc 00       		.sleb128 0
 10587 16dd 70       		.byte	0x70
 10588 16de 00       		.sleb128 0
 10589 16df 1E       		.byte	0x1e
 10590 16e0 9F       		.byte	0x9f
 10591 16e1 88010000 		.4byte	.LVL53-.Ltext0
 10592 16e5 8A010000 		.4byte	.LVL54-.Ltext0
 10593 16e9 0100     		.2byte	0x1
 10594 16eb 50       		.byte	0x50
 10595 16ec 8A010000 		.4byte	.LVL54-.Ltext0
 10596 16f0 91010000 		.4byte	.LVL55-1-.Ltext0
 10597 16f4 0400     		.2byte	0x4
 10598 16f6 70       		.byte	0x70
ARM GAS  /tmp/ccjtHtwZ.s 			page 256


 10599 16f7 B07F     		.sleb128 -80
 10600 16f9 9F       		.byte	0x9f
 10601 16fa 91010000 		.4byte	.LVL55-1-.Ltext0
 10602 16fe B6010000 		.4byte	.LFE6-.Ltext0
 10603 1702 0600     		.2byte	0x6
 10604 1704 75       		.byte	0x75
 10605 1705 00       		.sleb128 0
 10606 1706 76       		.byte	0x76
 10607 1707 00       		.sleb128 0
 10608 1708 1E       		.byte	0x1e
 10609 1709 9F       		.byte	0x9f
 10610 170a 00000000 		.4byte	0
 10611 170e 00000000 		.4byte	0
 10612              	.LVUS26:
 10613 1712 01       		.uleb128 .LVU204
 10614 1713 02       		.uleb128 .LVU205
 10615 1714 02       		.uleb128 .LVU205
 10616 1715 00       		.uleb128 .LVU211
 10617 1716 00       		.uleb128 .LVU211
 10618 1717 01       		.uleb128 .LVU212
 10619 1718 00       		.uleb128 .LVU224
 10620 1719 00       		.uleb128 0
 10621              	.LLST26:
 10622 171a 96010000 		.4byte	.LVL56-.Ltext0
 10623 171e 96010000 		.4byte	.LVL56-.Ltext0
 10624 1722 0100     		.2byte	0x1
 10625 1724 50       		.byte	0x50
 10626 1725 96010000 		.4byte	.LVL56-.Ltext0
 10627 1729 9C010000 		.4byte	.LVL57-.Ltext0
 10628 172d 0400     		.2byte	0x4
 10629 172f 70       		.byte	0x70
 10630 1730 D000     		.sleb128 80
 10631 1732 9F       		.byte	0x9f
 10632 1733 9C010000 		.4byte	.LVL57-.Ltext0
 10633 1737 9C010000 		.4byte	.LVL57-.Ltext0
 10634 173b 0100     		.2byte	0x1
 10635 173d 53       		.byte	0x53
 10636 173e B2010000 		.4byte	.LVL60-.Ltext0
 10637 1742 B6010000 		.4byte	.LFE6-.Ltext0
 10638 1746 0400     		.2byte	0x4
 10639 1748 70       		.byte	0x70
 10640 1749 D000     		.sleb128 80
 10641 174b 9F       		.byte	0x9f
 10642 174c 00000000 		.4byte	0
 10643 1750 00000000 		.4byte	0
 10644              	.LVUS27:
 10645 1754 03       		.uleb128 .LVU206
 10646 1755 01       		.uleb128 .LVU212
 10647 1756 00       		.uleb128 .LVU224
 10648 1757 00       		.uleb128 0
 10649              	.LLST27:
 10650 1758 96010000 		.4byte	.LVL56-.Ltext0
 10651 175c 9C010000 		.4byte	.LVL57-.Ltext0
 10652 1760 0100     		.2byte	0x1
 10653 1762 50       		.byte	0x50
 10654 1763 B2010000 		.4byte	.LVL60-.Ltext0
 10655 1767 B6010000 		.4byte	.LFE6-.Ltext0
ARM GAS  /tmp/ccjtHtwZ.s 			page 257


 10656 176b 0100     		.2byte	0x1
 10657 176d 50       		.byte	0x50
 10658 176e 00000000 		.4byte	0
 10659 1772 00000000 		.4byte	0
 10660              	.LVUS28:
 10661 1776 03       		.uleb128 .LVU206
 10662 1777 01       		.uleb128 .LVU212
 10663 1778 00       		.uleb128 .LVU224
 10664 1779 00       		.uleb128 0
 10665              	.LLST28:
 10666 177a 96010000 		.4byte	.LVL56-.Ltext0
 10667 177e 9C010000 		.4byte	.LVL57-.Ltext0
 10668 1782 0100     		.2byte	0x1
 10669 1784 57       		.byte	0x57
 10670 1785 B2010000 		.4byte	.LVL60-.Ltext0
 10671 1789 B6010000 		.4byte	.LFE6-.Ltext0
 10672 178d 0100     		.2byte	0x1
 10673 178f 57       		.byte	0x57
 10674 1790 00000000 		.4byte	0
 10675 1794 00000000 		.4byte	0
 10676              	.LVUS29:
 10677 1798 03       		.uleb128 .LVU206
 10678 1799 00       		.uleb128 .LVU211
 10679 179a 00       		.uleb128 .LVU211
 10680 179b 01       		.uleb128 .LVU212
 10681 179c 00       		.uleb128 .LVU224
 10682 179d 00       		.uleb128 0
 10683              	.LLST29:
 10684 179e 96010000 		.4byte	.LVL56-.Ltext0
 10685 17a2 9C010000 		.4byte	.LVL57-.Ltext0
 10686 17a6 0400     		.2byte	0x4
 10687 17a8 70       		.byte	0x70
 10688 17a9 D000     		.sleb128 80
 10689 17ab 9F       		.byte	0x9f
 10690 17ac 9C010000 		.4byte	.LVL57-.Ltext0
 10691 17b0 9C010000 		.4byte	.LVL57-.Ltext0
 10692 17b4 0100     		.2byte	0x1
 10693 17b6 53       		.byte	0x53
 10694 17b7 B2010000 		.4byte	.LVL60-.Ltext0
 10695 17bb B6010000 		.4byte	.LFE6-.Ltext0
 10696 17bf 0400     		.2byte	0x4
 10697 17c1 70       		.byte	0x70
 10698 17c2 D000     		.sleb128 80
 10699 17c4 9F       		.byte	0x9f
 10700 17c5 00000000 		.4byte	0
 10701 17c9 00000000 		.4byte	0
 10702              	.LVUS30:
 10703 17cd 03       		.uleb128 .LVU206
 10704 17ce 01       		.uleb128 .LVU212
 10705 17cf 00       		.uleb128 .LVU224
 10706 17d0 00       		.uleb128 0
 10707              	.LLST30:
 10708 17d1 96010000 		.4byte	.LVL56-.Ltext0
 10709 17d5 9C010000 		.4byte	.LVL57-.Ltext0
 10710 17d9 0100     		.2byte	0x1
 10711 17db 55       		.byte	0x55
 10712 17dc B2010000 		.4byte	.LVL60-.Ltext0
ARM GAS  /tmp/ccjtHtwZ.s 			page 258


 10713 17e0 B6010000 		.4byte	.LFE6-.Ltext0
 10714 17e4 0100     		.2byte	0x1
 10715 17e6 55       		.byte	0x55
 10716 17e7 00000000 		.4byte	0
 10717 17eb 00000000 		.4byte	0
 10718              	.LVUS31:
 10719 17ef 03       		.uleb128 .LVU206
 10720 17f0 01       		.uleb128 .LVU212
 10721 17f1 00       		.uleb128 .LVU224
 10722 17f2 00       		.uleb128 0
 10723              	.LLST31:
 10724 17f3 96010000 		.4byte	.LVL56-.Ltext0
 10725 17f7 9C010000 		.4byte	.LVL57-.Ltext0
 10726 17fb 0100     		.2byte	0x1
 10727 17fd 56       		.byte	0x56
 10728 17fe B2010000 		.4byte	.LVL60-.Ltext0
 10729 1802 B6010000 		.4byte	.LFE6-.Ltext0
 10730 1806 0100     		.2byte	0x1
 10731 1808 56       		.byte	0x56
 10732 1809 00000000 		.4byte	0
 10733 180d 00000000 		.4byte	0
 10734              	.LLST16:
 10735 1811 18010000 		.4byte	.LFB5-.Ltext0
 10736 1815 1A010000 		.4byte	.LCFI9-.Ltext0
 10737 1819 0200     		.2byte	0x2
 10738 181b 7D       		.byte	0x7d
 10739 181c 00       		.sleb128 0
 10740 181d 1A010000 		.4byte	.LCFI9-.Ltext0
 10741 1821 82010000 		.4byte	.LFE5-.Ltext0
 10742 1825 0200     		.2byte	0x2
 10743 1827 7D       		.byte	0x7d
 10744 1828 10       		.sleb128 16
 10745 1829 00000000 		.4byte	0
 10746 182d 00000000 		.4byte	0
 10747              	.LVUS17:
 10748 1831 00       		.uleb128 0
 10749 1832 00       		.uleb128 .LVU153
 10750 1833 00       		.uleb128 .LVU153
 10751 1834 00       		.uleb128 0
 10752              	.LLST17:
 10753 1835 18010000 		.4byte	.LVL44-.Ltext0
 10754 1839 21010000 		.4byte	.LVL46-1-.Ltext0
 10755 183d 0100     		.2byte	0x1
 10756 183f 50       		.byte	0x50
 10757 1840 21010000 		.4byte	.LVL46-1-.Ltext0
 10758 1844 82010000 		.4byte	.LFE5-.Ltext0
 10759 1848 0100     		.2byte	0x1
 10760 184a 54       		.byte	0x54
 10761 184b 00000000 		.4byte	0
 10762 184f 00000000 		.4byte	0
 10763              	.LVUS18:
 10764 1853 00       		.uleb128 0
 10765 1854 00       		.uleb128 .LVU153
 10766 1855 00       		.uleb128 .LVU153
 10767 1856 00       		.uleb128 0
 10768              	.LLST18:
 10769 1857 18010000 		.4byte	.LVL44-.Ltext0
ARM GAS  /tmp/ccjtHtwZ.s 			page 259


 10770 185b 21010000 		.4byte	.LVL46-1-.Ltext0
 10771 185f 0100     		.2byte	0x1
 10772 1861 51       		.byte	0x51
 10773 1862 21010000 		.4byte	.LVL46-1-.Ltext0
 10774 1866 82010000 		.4byte	.LFE5-.Ltext0
 10775 186a 0100     		.2byte	0x1
 10776 186c 55       		.byte	0x55
 10777 186d 00000000 		.4byte	0
 10778 1871 00000000 		.4byte	0
 10779              	.LVUS19:
 10780 1875 00       		.uleb128 .LVU149
 10781 1876 00       		.uleb128 .LVU153
 10782 1877 00       		.uleb128 .LVU153
 10783 1878 00       		.uleb128 0
 10784              	.LLST19:
 10785 1879 1C010000 		.4byte	.LVL45-.Ltext0
 10786 187d 21010000 		.4byte	.LVL46-1-.Ltext0
 10787 1881 0100     		.2byte	0x1
 10788 1883 50       		.byte	0x50
 10789 1884 21010000 		.4byte	.LVL46-1-.Ltext0
 10790 1888 82010000 		.4byte	.LFE5-.Ltext0
 10791 188c 0100     		.2byte	0x1
 10792 188e 54       		.byte	0x54
 10793 188f 00000000 		.4byte	0
 10794 1893 00000000 		.4byte	0
 10795              		.section	.debug_aranges,"",%progbits
 10796 0000 1C000000 		.4byte	0x1c
 10797 0004 0200     		.2byte	0x2
 10798 0006 00000000 		.4byte	.Ldebug_info0
 10799 000a 04       		.byte	0x4
 10800 000b 00       		.byte	0
 10801 000c 0000     		.2byte	0
 10802 000e 0000     		.2byte	0
 10803 0010 00000000 		.4byte	.Ltext0
 10804 0014 3C080000 		.4byte	.Letext0-.Ltext0
 10805 0018 00000000 		.4byte	0
 10806 001c 00000000 		.4byte	0
 10807              		.section	.debug_ranges,"",%progbits
 10808              	.Ldebug_ranges0:
 10809 0000 B0000000 		.4byte	.LBB23-.Ltext0
 10810 0004 C4000000 		.4byte	.LBE23-.Ltext0
 10811 0008 E8000000 		.4byte	.LBB25-.Ltext0
 10812 000c 00010000 		.4byte	.LBE25-.Ltext0
 10813 0010 00000000 		.4byte	0
 10814 0014 00000000 		.4byte	0
 10815 0018 CC000000 		.4byte	.LBB24-.Ltext0
 10816 001c E0000000 		.4byte	.LBE24-.Ltext0
 10817 0020 00010000 		.4byte	.LBB26-.Ltext0
 10818 0024 18010000 		.4byte	.LBE26-.Ltext0
 10819 0028 00000000 		.4byte	0
 10820 002c 00000000 		.4byte	0
 10821 0030 96010000 		.4byte	.LBB29-.Ltext0
 10822 0034 98010000 		.4byte	.LBE29-.Ltext0
 10823 0038 9C010000 		.4byte	.LBB33-.Ltext0
 10824 003c AE010000 		.4byte	.LBE33-.Ltext0
 10825 0040 B2010000 		.4byte	.LBB34-.Ltext0
 10826 0044 B6010000 		.4byte	.LBE34-.Ltext0
ARM GAS  /tmp/ccjtHtwZ.s 			page 260


 10827 0048 00000000 		.4byte	0
 10828 004c 00000000 		.4byte	0
 10829 0050 6E020000 		.4byte	.LBB37-.Ltext0
 10830 0054 7E020000 		.4byte	.LBE37-.Ltext0
 10831 0058 9A020000 		.4byte	.LBB40-.Ltext0
 10832 005c 9E020000 		.4byte	.LBE40-.Ltext0
 10833 0060 00000000 		.4byte	0
 10834 0064 00000000 		.4byte	0
 10835 0068 18030000 		.4byte	.LBB45-.Ltext0
 10836 006c 18030000 		.4byte	.LBE45-.Ltext0
 10837 0070 20030000 		.4byte	.LBB48-.Ltext0
 10838 0074 34030000 		.4byte	.LBE48-.Ltext0
 10839 0078 00000000 		.4byte	0
 10840 007c 00000000 		.4byte	0
 10841 0080 40030000 		.4byte	.LBB49-.Ltext0
 10842 0084 6C030000 		.4byte	.LBE49-.Ltext0
 10843 0088 72030000 		.4byte	.LBB52-.Ltext0
 10844 008c 7C030000 		.4byte	.LBE52-.Ltext0
 10845 0090 00000000 		.4byte	0
 10846 0094 00000000 		.4byte	0
 10847 0098 80030000 		.4byte	.LBB53-.Ltext0
 10848 009c 80030000 		.4byte	.LBE53-.Ltext0
 10849 00a0 84030000 		.4byte	.LBB56-.Ltext0
 10850 00a4 98030000 		.4byte	.LBE56-.Ltext0
 10851 00a8 00000000 		.4byte	0
 10852 00ac 00000000 		.4byte	0
 10853 00b0 98030000 		.4byte	.LBB57-.Ltext0
 10854 00b4 C8030000 		.4byte	.LBE57-.Ltext0
 10855 00b8 CE030000 		.4byte	.LBB62-.Ltext0
 10856 00bc DC030000 		.4byte	.LBE62-.Ltext0
 10857 00c0 00000000 		.4byte	0
 10858 00c4 00000000 		.4byte	0
 10859 00c8 A0030000 		.4byte	.LBB58-.Ltext0
 10860 00cc C8030000 		.4byte	.LBE58-.Ltext0
 10861 00d0 CE030000 		.4byte	.LBB59-.Ltext0
 10862 00d4 D8030000 		.4byte	.LBE59-.Ltext0
 10863 00d8 00000000 		.4byte	0
 10864 00dc 00000000 		.4byte	0
 10865 00e0 EE030000 		.4byte	.LBB63-.Ltext0
 10866 00e4 26040000 		.4byte	.LBE63-.Ltext0
 10867 00e8 2C040000 		.4byte	.LBB64-.Ltext0
 10868 00ec 34040000 		.4byte	.LBE64-.Ltext0
 10869 00f0 38040000 		.4byte	.LBB65-.Ltext0
 10870 00f4 40040000 		.4byte	.LBE65-.Ltext0
 10871 00f8 00000000 		.4byte	0
 10872 00fc 00000000 		.4byte	0
 10873 0100 DC040000 		.4byte	.LBB70-.Ltext0
 10874 0104 16050000 		.4byte	.LBE70-.Ltext0
 10875 0108 1E050000 		.4byte	.LBB71-.Ltext0
 10876 010c 28050000 		.4byte	.LBE71-.Ltext0
 10877 0110 30050000 		.4byte	.LBB72-.Ltext0
 10878 0114 38050000 		.4byte	.LBE72-.Ltext0
 10879 0118 00000000 		.4byte	0
 10880 011c 00000000 		.4byte	0
 10881 0120 30060000 		.4byte	.LBB76-.Ltext0
 10882 0124 68060000 		.4byte	.LBE76-.Ltext0
 10883 0128 6E060000 		.4byte	.LBB77-.Ltext0
ARM GAS  /tmp/ccjtHtwZ.s 			page 261


 10884 012c 76060000 		.4byte	.LBE77-.Ltext0
 10885 0130 7A060000 		.4byte	.LBB78-.Ltext0
 10886 0134 82060000 		.4byte	.LBE78-.Ltext0
 10887 0138 00000000 		.4byte	0
 10888 013c 00000000 		.4byte	0
 10889 0140 0C070000 		.4byte	.LBB79-.Ltext0
 10890 0144 0C070000 		.4byte	.LBE79-.Ltext0
 10891 0148 14070000 		.4byte	.LBB82-.Ltext0
 10892 014c 28070000 		.4byte	.LBE82-.Ltext0
 10893 0150 00000000 		.4byte	0
 10894 0154 00000000 		.4byte	0
 10895 0158 28070000 		.4byte	.LBB83-.Ltext0
 10896 015c 5E070000 		.4byte	.LBE83-.Ltext0
 10897 0160 66070000 		.4byte	.LBB88-.Ltext0
 10898 0164 74070000 		.4byte	.LBE88-.Ltext0
 10899 0168 00000000 		.4byte	0
 10900 016c 00000000 		.4byte	0
 10901 0170 2C070000 		.4byte	.LBB84-.Ltext0
 10902 0174 5E070000 		.4byte	.LBE84-.Ltext0
 10903 0178 66070000 		.4byte	.LBB85-.Ltext0
 10904 017c 70070000 		.4byte	.LBE85-.Ltext0
 10905 0180 00000000 		.4byte	0
 10906 0184 00000000 		.4byte	0
 10907 0188 74070000 		.4byte	.LBB89-.Ltext0
 10908 018c 74070000 		.4byte	.LBE89-.Ltext0
 10909 0190 78070000 		.4byte	.LBB92-.Ltext0
 10910 0194 8C070000 		.4byte	.LBE92-.Ltext0
 10911 0198 00000000 		.4byte	0
 10912 019c 00000000 		.4byte	0
 10913              		.section	.debug_line,"",%progbits
 10914              	.Ldebug_line0:
 10915 0000 7A0F0000 		.section	.debug_str,"MS",%progbits,1
 10915      03004201 
 10915      00000201 
 10915      FB0E0D00 
 10915      01010101 
 10916              	.LASF28:
 10917 0000 75784E75 		.ascii	"uxNumberOfItems\000"
 10917      6D626572 
 10917      4F664974 
 10917      656D7300 
 10918              	.LASF134:
 10919 0010 76506F72 		.ascii	"vPortExitCritical\000"
 10919      74457869 
 10919      74437269 
 10919      74696361 
 10919      6C00
 10920              	.LASF57:
 10921 0022 53656D61 		.ascii	"SemaphoreData\000"
 10921      70686F72 
 10921      65446174 
 10921      6100
 10922              	.LASF154:
 10923 0030 74736B54 		.ascii	"tskTaskControlBlock\000"
 10923      61736B43 
 10923      6F6E7472 
 10923      6F6C426C 
ARM GAS  /tmp/ccjtHtwZ.s 			page 262


 10923      6F636B00 
 10924              	.LASF60:
 10925 0044 53656D61 		.ascii	"SemaphoreData_t\000"
 10925      70686F72 
 10925      65446174 
 10925      615F7400 
 10926              	.LASF102:
 10927 0054 78517565 		.ascii	"xQueueReceive\000"
 10927      75655265 
 10927      63656976 
 10927      6500
 10928              	.LASF93:
 10929 0062 78517565 		.ascii	"xQueueReceiveFromISR\000"
 10929      75655265 
 10929      63656976 
 10929      6546726F 
 10929      6D495352 
 10930              	.LASF45:
 10931 0077 78546173 		.ascii	"xTasksWaitingToReceive\000"
 10931      6B735761 
 10931      6974696E 
 10931      67546F52 
 10931      65636569 
 10932              	.LASF94:
 10933 008e 70784869 		.ascii	"pxHigherPriorityTaskWoken\000"
 10933      67686572 
 10933      5072696F 
 10933      72697479 
 10933      5461736B 
 10934              	.LASF114:
 10935 00a8 70784D75 		.ascii	"pxMutex\000"
 10935      74657800 
 10936              	.LASF0:
 10937 00b0 756E7369 		.ascii	"unsigned int\000"
 10937      676E6564 
 10937      20696E74 
 10937      00
 10938              	.LASF29:
 10939 00bd 7078496E 		.ascii	"pxIndex\000"
 10939      64657800 
 10940              	.LASF36:
 10941 00c5 7854494D 		.ascii	"xTIME_OUT\000"
 10941      455F4F55 
 10941      5400
 10942              	.LASF85:
 10943 00cf 76517565 		.ascii	"vQueueDelete\000"
 10943      75654465 
 10943      6C657465 
 10943      00
 10944              	.LASF26:
 10945 00dc 784C4953 		.ascii	"xLIST_ITEM\000"
 10945      545F4954 
 10945      454D00
 10946              	.LASF104:
 10947 00e7 78517565 		.ascii	"xQueueGenericSendFromISR\000"
 10947      75654765 
 10947      6E657269 
ARM GAS  /tmp/ccjtHtwZ.s 			page 263


 10947      6353656E 
 10947      6446726F 
 10948              	.LASF83:
 10949 0100 76517565 		.ascii	"vQueueSetQueueNumber\000"
 10949      75655365 
 10949      74517565 
 10949      75654E75 
 10949      6D626572 
 10950              	.LASF66:
 10951 0115 78576169 		.ascii	"xWaitIndefinitely\000"
 10951      74496E64 
 10951      6566696E 
 10951      6974656C 
 10951      7900
 10952              	.LASF44:
 10953 0127 78546173 		.ascii	"xTasksWaitingToSend\000"
 10953      6B735761 
 10953      6974696E 
 10953      67546F53 
 10953      656E6400 
 10954              	.LASF88:
 10955 013b 75785175 		.ascii	"uxQueueSpacesAvailable\000"
 10955      65756553 
 10955      70616365 
 10955      73417661 
 10955      696C6162 
 10956              	.LASF50:
 10957 0152 6354784C 		.ascii	"cTxLock\000"
 10957      6F636B00 
 10958              	.LASF37:
 10959 015a 784F7665 		.ascii	"xOverflowCount\000"
 10959      72666C6F 
 10959      77436F75 
 10959      6E7400
 10960              	.LASF133:
 10961 0169 76506F72 		.ascii	"vPortEnterCritical\000"
 10961      74456E74 
 10961      65724372 
 10961      69746963 
 10961      616C00
 10962              	.LASF156:
 10963 017c 5F5F6275 		.ascii	"__builtin_memcpy\000"
 10963      696C7469 
 10963      6E5F6D65 
 10963      6D637079 
 10963      00
 10964              	.LASF64:
 10965 018d 51756575 		.ascii	"Queue_t\000"
 10965      655F7400 
 10966              	.LASF105:
 10967 0195 78436F70 		.ascii	"xCopyPosition\000"
 10967      79506F73 
 10967      6974696F 
 10967      6E00
 10968              	.LASF87:
 10969 01a3 75785265 		.ascii	"uxReturn\000"
 10969      7475726E 
ARM GAS  /tmp/ccjtHtwZ.s 			page 264


 10969      00
 10970              	.LASF55:
 10971 01ac 70635265 		.ascii	"pcReadFrom\000"
 10971      61644672 
 10971      6F6D00
 10972              	.LASF91:
 10973 01b7 75785361 		.ascii	"uxSavedInterruptStatus\000"
 10973      76656449 
 10973      6E746572 
 10973      72757074 
 10973      53746174 
 10974              	.LASF122:
 10975 01ce 70727649 		.ascii	"prvInitialiseNewQueue\000"
 10975      6E697469 
 10975      616C6973 
 10975      654E6577 
 10975      51756575 
 10976              	.LASF17:
 10977 01e4 75696E74 		.ascii	"uint32_t\000"
 10977      33325F74 
 10977      00
 10978              	.LASF15:
 10979 01ed 696E7438 		.ascii	"int8_t\000"
 10979      5F7400
 10980              	.LASF119:
 10981 01f4 75784D75 		.ascii	"uxMutexSize\000"
 10981      74657853 
 10981      697A6500 
 10982              	.LASF107:
 10983 0200 78596965 		.ascii	"xYieldRequired\000"
 10983      6C645265 
 10983      71756972 
 10983      656400
 10984              	.LASF131:
 10985 020f 756C4F72 		.ascii	"ulOriginalBASEPRI\000"
 10985      6967696E 
 10985      616C4241 
 10985      53455052 
 10985      4900
 10986              	.LASF61:
 10987 0221 78517565 		.ascii	"xQueue\000"
 10987      756500
 10988              	.LASF120:
 10989 0228 70784E65 		.ascii	"pxNewQueue\000"
 10989      77517565 
 10989      756500
 10990              	.LASF41:
 10991 0233 51756575 		.ascii	"QueueDefinition\000"
 10991      65446566 
 10991      696E6974 
 10991      696F6E00 
 10992              	.LASF13:
 10993 0243 6C6F6E67 		.ascii	"long long unsigned int\000"
 10993      206C6F6E 
 10993      6720756E 
 10993      7369676E 
 10993      65642069 
ARM GAS  /tmp/ccjtHtwZ.s 			page 265


 10994              	.LASF74:
 10995 025a 70727649 		.ascii	"prvIsQueueEmpty\000"
 10995      73517565 
 10995      7565456D 
 10995      70747900 
 10996              	.LASF73:
 10997 026a 70764275 		.ascii	"pvBuffer\000"
 10997      66666572 
 10997      00
 10998              	.LASF79:
 10999 0273 70727647 		.ascii	"prvGetDisinheritPriorityAfterTimeout\000"
 10999      65744469 
 10999      73696E68 
 10999      65726974 
 10999      5072696F 
 11000              	.LASF23:
 11001 0298 70785072 		.ascii	"pxPrevious\000"
 11001      6576696F 
 11001      757300
 11002              	.LASF46:
 11003 02a3 75784D65 		.ascii	"uxMessagesWaiting\000"
 11003      73736167 
 11003      65735761 
 11003      6974696E 
 11003      6700
 11004              	.LASF62:
 11005 02b5 7853656D 		.ascii	"xSemaphore\000"
 11005      6170686F 
 11005      726500
 11006              	.LASF149:
 11007 02c0 7076506F 		.ascii	"pvPortMalloc\000"
 11007      72744D61 
 11007      6C6C6F63 
 11007      00
 11008              	.LASF141:
 11009 02cd 76546173 		.ascii	"vTaskSuspendAll\000"
 11009      6B537573 
 11009      70656E64 
 11009      416C6C00 
 11010              	.LASF82:
 11011 02dd 76517565 		.ascii	"vQueueWaitForMessageRestricted\000"
 11011      75655761 
 11011      6974466F 
 11011      724D6573 
 11011      73616765 
 11012              	.LASF95:
 11013 02fc 78517565 		.ascii	"xQueuePeek\000"
 11013      75655065 
 11013      656B00
 11014              	.LASF96:
 11015 0307 78456E74 		.ascii	"xEntryTimeSet\000"
 11015      72795469 
 11015      6D655365 
 11015      7400
 11016              	.LASF3:
 11017 0315 73697A65 		.ascii	"size_t\000"
 11017      5F7400
ARM GAS  /tmp/ccjtHtwZ.s 			page 266


 11018              	.LASF98:
 11019 031c 7854696D 		.ascii	"xTimeOut\000"
 11019      654F7574 
 11019      00
 11020              	.LASF111:
 11021 0325 7848616E 		.ascii	"xHandle\000"
 11021      646C6500 
 11022              	.LASF32:
 11023 032d 784D494E 		.ascii	"xMINI_LIST_ITEM\000"
 11023      495F4C49 
 11023      53545F49 
 11023      54454D00 
 11024              	.LASF27:
 11025 033d 784C4953 		.ascii	"xLIST\000"
 11025      5400
 11026              	.LASF97:
 11027 0343 78517565 		.ascii	"xQueueSemaphoreTake\000"
 11027      75655365 
 11027      6D617068 
 11027      6F726554 
 11027      616B6500 
 11028              	.LASF128:
 11029 0357 76506F72 		.ascii	"vPortSetBASEPRI\000"
 11029      74536574 
 11029      42415345 
 11029      50524900 
 11030              	.LASF75:
 11031 0367 70727643 		.ascii	"prvCopyDataToQueue\000"
 11031      6F707944 
 11031      61746154 
 11031      6F517565 
 11031      756500
 11032              	.LASF106:
 11033 037a 78517565 		.ascii	"xQueueGenericSend\000"
 11033      75654765 
 11033      6E657269 
 11033      6353656E 
 11033      6400
 11034              	.LASF143:
 11035 038c 76546173 		.ascii	"vTaskPlaceOnEventList\000"
 11035      6B506C61 
 11035      63654F6E 
 11035      4576656E 
 11035      744C6973 
 11036              	.LASF145:
 11037 03a2 70765461 		.ascii	"pvTaskIncrementMutexHeldCount\000"
 11037      736B496E 
 11037      6372656D 
 11037      656E744D 
 11037      75746578 
 11038              	.LASF48:
 11039 03c0 75784974 		.ascii	"uxItemSize\000"
 11039      656D5369 
 11039      7A6500
 11040              	.LASF110:
 11041 03cb 7578496E 		.ascii	"uxInitialCount\000"
 11041      69746961 
ARM GAS  /tmp/ccjtHtwZ.s 			page 267


 11041      6C436F75 
 11041      6E7400
 11042              	.LASF138:
 11043 03da 78546173 		.ascii	"xTaskPriorityDisinherit\000"
 11043      6B507269 
 11043      6F726974 
 11043      79446973 
 11043      696E6865 
 11044              	.LASF118:
 11045 03f2 75784D75 		.ascii	"uxMutexLength\000"
 11045      7465784C 
 11045      656E6774 
 11045      6800
 11046              	.LASF14:
 11047 0400 63686172 		.ascii	"char\000"
 11047      00
 11048              	.LASF31:
 11049 0405 4C697374 		.ascii	"ListItem_t\000"
 11049      4974656D 
 11049      5F7400
 11050              	.LASF78:
 11051 0410 70727649 		.ascii	"prvIsQueueFull\000"
 11051      73517565 
 11051      75654675 
 11051      6C6C00
 11052              	.LASF53:
 11053 041f 51756575 		.ascii	"QueuePointers\000"
 11053      65506F69 
 11053      6E746572 
 11053      7300
 11054              	.LASF132:
 11055 042d 756C4E65 		.ascii	"ulNewBASEPRI\000"
 11055      77424153 
 11055      45505249 
 11055      00
 11056              	.LASF19:
 11057 043a 55426173 		.ascii	"UBaseType_t\000"
 11057      65547970 
 11057      655F7400 
 11058              	.LASF103:
 11059 0446 78517565 		.ascii	"xQueueGiveFromISR\000"
 11059      75654769 
 11059      76654672 
 11059      6F6D4953 
 11059      5200
 11060              	.LASF40:
 11061 0458 51756575 		.ascii	"QueueHandle_t\000"
 11061      6548616E 
 11061      646C655F 
 11061      7400
 11062              	.LASF30:
 11063 0466 784C6973 		.ascii	"xListEnd\000"
 11063      74456E64 
 11063      00
 11064              	.LASF86:
 11065 046f 75785175 		.ascii	"uxQueueMessagesWaitingFromISR\000"
 11065      6575654D 
ARM GAS  /tmp/ccjtHtwZ.s 			page 268


 11065      65737361 
 11065      67657357 
 11065      61697469 
 11066              	.LASF33:
 11067 048d 4D696E69 		.ascii	"MiniListItem_t\000"
 11067      4C697374 
 11067      4974656D 
 11067      5F7400
 11068              	.LASF135:
 11069 049c 76546173 		.ascii	"vTaskPlaceOnEventListRestricted\000"
 11069      6B506C61 
 11069      63654F6E 
 11069      4576656E 
 11069      744C6973 
 11070              	.LASF16:
 11071 04bc 75696E74 		.ascii	"uint8_t\000"
 11071      385F7400 
 11072              	.LASF125:
 11073 04c4 78517565 		.ascii	"xQueueGenericCreate\000"
 11073      75654765 
 11073      6E657269 
 11073      63437265 
 11073      61746500 
 11074              	.LASF116:
 11075 04d8 78517565 		.ascii	"xQueueCreateMutex\000"
 11075      75654372 
 11075      65617465 
 11075      4D757465 
 11075      7800
 11076              	.LASF130:
 11077 04ea 756C506F 		.ascii	"ulPortRaiseBASEPRI\000"
 11077      72745261 
 11077      69736542 
 11077      41534550 
 11077      524900
 11078              	.LASF1:
 11079 04fd 6C6F6E67 		.ascii	"long long int\000"
 11079      206C6F6E 
 11079      6720696E 
 11079      7400
 11080              	.LASF121:
 11081 050b 70727649 		.ascii	"prvInitialiseMutex\000"
 11081      6E697469 
 11081      616C6973 
 11081      654D7574 
 11081      657800
 11082              	.LASF18:
 11083 051e 42617365 		.ascii	"BaseType_t\000"
 11083      54797065 
 11083      5F7400
 11084              	.LASF124:
 11085 0529 70756351 		.ascii	"pucQueueStorage\000"
 11085      75657565 
 11085      53746F72 
 11085      61676500 
 11086              	.LASF113:
 11087 0539 784D7574 		.ascii	"xMutex\000"
ARM GAS  /tmp/ccjtHtwZ.s 			page 269


 11087      657800
 11088              	.LASF38:
 11089 0540 7854696D 		.ascii	"xTimeOnEntering\000"
 11089      654F6E45 
 11089      6E746572 
 11089      696E6700 
 11090              	.LASF81:
 11091 0550 75635175 		.ascii	"ucQueueGetQueueType\000"
 11091      65756547 
 11091      65745175 
 11091      65756554 
 11091      79706500 
 11092              	.LASF22:
 11093 0564 70784E65 		.ascii	"pxNext\000"
 11093      787400
 11094              	.LASF117:
 11095 056b 784E6577 		.ascii	"xNewQueue\000"
 11095      51756575 
 11095      6500
 11096              	.LASF109:
 11097 0575 75784D61 		.ascii	"uxMaxCount\000"
 11097      78436F75 
 11097      6E7400
 11098              	.LASF39:
 11099 0580 54696D65 		.ascii	"TimeOut_t\000"
 11099      4F75745F 
 11099      7400
 11100              	.LASF140:
 11101 058a 76546173 		.ascii	"vTaskInternalSetTimeOutState\000"
 11101      6B496E74 
 11101      65726E61 
 11101      6C536574 
 11101      54696D65 
 11102              	.LASF92:
 11103 05a7 70634F72 		.ascii	"pcOriginalReadPosition\000"
 11103      6967696E 
 11103      616C5265 
 11103      6164506F 
 11103      73697469 
 11104              	.LASF35:
 11105 05be 5461736B 		.ascii	"TaskHandle_t\000"
 11105      48616E64 
 11105      6C655F74 
 11105      00
 11106              	.LASF129:
 11107 05cb 756C4E65 		.ascii	"ulNewMaskValue\000"
 11107      774D6173 
 11107      6B56616C 
 11107      756500
 11108              	.LASF80:
 11109 05da 75784869 		.ascii	"uxHighestPriorityOfWaitingTasks\000"
 11109      67686573 
 11109      74507269 
 11109      6F726974 
 11109      794F6657 
 11110              	.LASF52:
 11111 05fa 75635175 		.ascii	"ucQueueType\000"
ARM GAS  /tmp/ccjtHtwZ.s 			page 270


 11111      65756554 
 11111      79706500 
 11112              	.LASF34:
 11113 0606 4C697374 		.ascii	"List_t\000"
 11113      5F7400
 11114              	.LASF100:
 11115 060d 75785365 		.ascii	"uxSemaphoreCount\000"
 11115      6D617068 
 11115      6F726543 
 11115      6F756E74 
 11115      00
 11116              	.LASF43:
 11117 061e 70635772 		.ascii	"pcWriteTo\000"
 11117      69746554 
 11117      6F00
 11118              	.LASF20:
 11119 0628 5469636B 		.ascii	"TickType_t\000"
 11119      54797065 
 11119      5F7400
 11120              	.LASF4:
 11121 0633 5F5F696E 		.ascii	"__int8_t\000"
 11121      74385F74 
 11121      00
 11122              	.LASF84:
 11123 063c 75785175 		.ascii	"uxQueueGetQueueNumber\000"
 11123      65756547 
 11123      65745175 
 11123      6575654E 
 11123      756D6265 
 11124              	.LASF123:
 11125 0652 75785175 		.ascii	"uxQueueLength\000"
 11125      6575654C 
 11125      656E6774 
 11125      6800
 11126              	.LASF2:
 11127 0660 6C6F6E67 		.ascii	"long double\000"
 11127      20646F75 
 11127      626C6500 
 11128              	.LASF99:
 11129 066c 78496E68 		.ascii	"xInheritanceOccurred\000"
 11129      65726974 
 11129      616E6365 
 11129      4F636375 
 11129      72726564 
 11130              	.LASF112:
 11131 0681 78517565 		.ascii	"xQueueTakeMutexRecursive\000"
 11131      75655461 
 11131      6B654D75 
 11131      74657852 
 11131      65637572 
 11132              	.LASF25:
 11133 069a 7076436F 		.ascii	"pvContainer\000"
 11133      6E746169 
 11133      6E657200 
 11134              	.LASF152:
 11135 06a6 2E2E2F66 		.ascii	"../freertos/queue.c\000"
 11135      72656572 
ARM GAS  /tmp/ccjtHtwZ.s 			page 271


 11135      746F732F 
 11135      71756575 
 11135      652E6300 
 11136              	.LASF56:
 11137 06ba 51756575 		.ascii	"QueuePointers_t\000"
 11137      65506F69 
 11137      6E746572 
 11137      735F7400 
 11138              	.LASF47:
 11139 06ca 75784C65 		.ascii	"uxLength\000"
 11139      6E677468 
 11139      00
 11140              	.LASF151:
 11141 06d3 474E5520 		.ascii	"GNU C17 10.3.1 20210824 (release) -mcpu=cortex-m3 -"
 11141      43313720 
 11141      31302E33 
 11141      2E312032 
 11141      30323130 
 11142 0706 6D746875 		.ascii	"mthumb -mfloat-abi=soft -march=armv7-m -g -gdwarf-2"
 11142      6D62202D 
 11142      6D666C6F 
 11142      61742D61 
 11142      62693D73 
 11143 0739 202D4F73 		.ascii	" -Os -fomit-frame-pointer\000"
 11143      202D666F 
 11143      6D69742D 
 11143      6672616D 
 11143      652D706F 
 11144              	.LASF51:
 11145 0753 75785175 		.ascii	"uxQueueNumber\000"
 11145      6575654E 
 11145      756D6265 
 11145      7200
 11146              	.LASF8:
 11147 0761 73686F72 		.ascii	"short int\000"
 11147      7420696E 
 11147      7400
 11148              	.LASF21:
 11149 076b 78497465 		.ascii	"xItemValue\000"
 11149      6D56616C 
 11149      756500
 11150              	.LASF10:
 11151 0776 6C6F6E67 		.ascii	"long int\000"
 11151      20696E74 
 11151      00
 11152              	.LASF126:
 11153 077f 78517565 		.ascii	"xQueueSizeInBytes\000"
 11153      75655369 
 11153      7A65496E 
 11153      42797465 
 11153      7300
 11154              	.LASF144:
 11155 0791 78546173 		.ascii	"xTaskResumeAll\000"
 11155      6B526573 
 11155      756D6541 
 11155      6C6C00
 11156              	.LASF76:
ARM GAS  /tmp/ccjtHtwZ.s 			page 272


 11157 07a0 70764974 		.ascii	"pvItemToQueue\000"
 11157      656D546F 
 11157      51756575 
 11157      6500
 11158              	.LASF142:
 11159 07ae 78546173 		.ascii	"xTaskCheckForTimeOut\000"
 11159      6B436865 
 11159      636B466F 
 11159      7254696D 
 11159      654F7574 
 11160              	.LASF139:
 11161 07c3 76506F72 		.ascii	"vPortFree\000"
 11161      74467265 
 11161      6500
 11162              	.LASF69:
 11163 07cd 78517565 		.ascii	"xQueueIsQueueFullFromISR\000"
 11163      75654973 
 11163      51756575 
 11163      6546756C 
 11163      6C46726F 
 11164              	.LASF89:
 11165 07e6 75785175 		.ascii	"uxQueueMessagesWaiting\000"
 11165      6575654D 
 11165      65737361 
 11165      67657357 
 11165      61697469 
 11166              	.LASF54:
 11167 07fd 70635461 		.ascii	"pcTail\000"
 11167      696C00
 11168              	.LASF6:
 11169 0804 5F5F7569 		.ascii	"__uint8_t\000"
 11169      6E74385F 
 11169      7400
 11170              	.LASF67:
 11171 080e 70785175 		.ascii	"pxQueue\000"
 11171      65756500 
 11172              	.LASF68:
 11173 0816 78526574 		.ascii	"xReturn\000"
 11173      75726E00 
 11174              	.LASF137:
 11175 081e 76546173 		.ascii	"vTaskMissedYield\000"
 11175      6B4D6973 
 11175      73656459 
 11175      69656C64 
 11175      00
 11176              	.LASF12:
 11177 082f 6C6F6E67 		.ascii	"long unsigned int\000"
 11177      20756E73 
 11177      69676E65 
 11177      6420696E 
 11177      7400
 11178              	.LASF147:
 11179 0841 78546173 		.ascii	"xTaskPriorityInherit\000"
 11179      6B507269 
 11179      6F726974 
 11179      79496E68 
 11179      65726974 
ARM GAS  /tmp/ccjtHtwZ.s 			page 273


 11180              	.LASF59:
 11181 0856 75785265 		.ascii	"uxRecursiveCallCount\000"
 11181      63757273 
 11181      69766543 
 11181      616C6C43 
 11181      6F756E74 
 11182              	.LASF90:
 11183 086b 78517565 		.ascii	"xQueuePeekFromISR\000"
 11183      75655065 
 11183      656B4672 
 11183      6F6D4953 
 11183      5200
 11184              	.LASF153:
 11185 087d 2F686F6D 		.ascii	"/home/junior/Codigos/6-Stm32_GCC_FreeRTOS10.2.1/5-P"
 11185      652F6A75 
 11185      6E696F72 
 11185      2F436F64 
 11185      69676F73 
 11186 08b0 574D5F4C 		.ascii	"WM_LCD_SERIAL\000"
 11186      43445F53 
 11186      45524941 
 11186      4C00
 11187              	.LASF101:
 11188 08be 75784869 		.ascii	"uxHighestWaitingPriority\000"
 11188      67686573 
 11188      74576169 
 11188      74696E67 
 11188      5072696F 
 11189              	.LASF7:
 11190 08d7 756E7369 		.ascii	"unsigned char\000"
 11190      676E6564 
 11190      20636861 
 11190      7200
 11191              	.LASF11:
 11192 08e5 5F5F7569 		.ascii	"__uint32_t\000"
 11192      6E743332 
 11192      5F7400
 11193              	.LASF150:
 11194 08f0 764C6973 		.ascii	"vListInitialise\000"
 11194      74496E69 
 11194      7469616C 
 11194      69736500 
 11195              	.LASF72:
 11196 0900 70727643 		.ascii	"prvCopyDataFromQueue\000"
 11196      6F707944 
 11196      61746146 
 11196      726F6D51 
 11196      75657565 
 11197              	.LASF146:
 11198 0915 76546173 		.ascii	"vTaskPriorityDisinheritAfterTimeout\000"
 11198      6B507269 
 11198      6F726974 
 11198      79446973 
 11198      696E6865 
 11199              	.LASF65:
 11200 0939 78546963 		.ascii	"xTicksToWait\000"
 11200      6B73546F 
ARM GAS  /tmp/ccjtHtwZ.s 			page 274


 11200      57616974 
 11200      00
 11201              	.LASF24:
 11202 0946 70764F77 		.ascii	"pvOwner\000"
 11202      6E657200 
 11203              	.LASF148:
 11204 094e 78546173 		.ascii	"xTaskGetCurrentTaskHandle\000"
 11204      6B476574 
 11204      43757272 
 11204      656E7454 
 11204      61736B48 
 11205              	.LASF42:
 11206 0968 70634865 		.ascii	"pcHead\000"
 11206      616400
 11207              	.LASF115:
 11208 096f 78517565 		.ascii	"xQueueGiveMutexRecursive\000"
 11208      75654769 
 11208      76654D75 
 11208      74657852 
 11208      65637572 
 11209              	.LASF71:
 11210 0988 70727655 		.ascii	"prvUnlockQueue\000"
 11210      6E6C6F63 
 11210      6B517565 
 11210      756500
 11211              	.LASF127:
 11212 0997 78517565 		.ascii	"xQueueGenericReset\000"
 11212      75654765 
 11212      6E657269 
 11212      63526573 
 11212      657400
 11213              	.LASF70:
 11214 09aa 78517565 		.ascii	"xQueueIsQueueEmptyFromISR\000"
 11214      75654973 
 11214      51756575 
 11214      65456D70 
 11214      74794672 
 11215              	.LASF5:
 11216 09c4 7369676E 		.ascii	"signed char\000"
 11216      65642063 
 11216      68617200 
 11217              	.LASF9:
 11218 09d0 73686F72 		.ascii	"short unsigned int\000"
 11218      7420756E 
 11218      7369676E 
 11218      65642069 
 11218      6E7400
 11219              	.LASF155:
 11220 09e3 6D656D63 		.ascii	"memcpy\000"
 11220      707900
 11221              	.LASF63:
 11222 09ea 78515545 		.ascii	"xQUEUE\000"
 11222      554500
 11223              	.LASF58:
 11224 09f1 784D7574 		.ascii	"xMutexHolder\000"
 11224      6578486F 
 11224      6C646572 
ARM GAS  /tmp/ccjtHtwZ.s 			page 275


 11224      00
 11225              	.LASF77:
 11226 09fe 78506F73 		.ascii	"xPosition\000"
 11226      6974696F 
 11226      6E00
 11227              	.LASF49:
 11228 0a08 6352784C 		.ascii	"cRxLock\000"
 11228      6F636B00 
 11229              	.LASF136:
 11230 0a10 78546173 		.ascii	"xTaskRemoveFromEventList\000"
 11230      6B52656D 
 11230      6F766546 
 11230      726F6D45 
 11230      76656E74 
 11231              	.LASF108:
 11232 0a29 78517565 		.ascii	"xQueueCreateCountingSemaphore\000"
 11232      75654372 
 11232      65617465 
 11232      436F756E 
 11232      74696E67 
 11233              		.ident	"GCC: (GNU Arm Embedded Toolchain 10.3-2021.10) 10.3.1 20210824 (release)"
ARM GAS  /tmp/ccjtHtwZ.s 			page 276


DEFINED SYMBOLS
                            *ABS*:0000000000000000 queue.c
     /tmp/ccjtHtwZ.s:77     .text:0000000000000000 $t
     /tmp/ccjtHtwZ.s:82     .text:0000000000000000 prvIsQueueEmpty
     /tmp/ccjtHtwZ.s:129    .text:0000000000000016 prvCopyDataToQueue
     /tmp/ccjtHtwZ.s:314    .text:0000000000000080 prvCopyDataFromQueue
     /tmp/ccjtHtwZ.s:402    .text:00000000000000a8 prvUnlockQueue
     /tmp/ccjtHtwZ.s:576    .text:0000000000000118 xQueueGenericReset
     /tmp/ccjtHtwZ.s:715    .text:0000000000000182 xQueueGenericCreate
     /tmp/ccjtHtwZ.s:834    .text:00000000000001b6 xQueueCreateCountingSemaphore
     /tmp/ccjtHtwZ.s:890    .text:00000000000001c8 xQueueGenericSend
     /tmp/ccjtHtwZ.s:1199   .text:00000000000002cc xQueueCreateMutex
     /tmp/ccjtHtwZ.s:1280   .text:00000000000002f0 xQueueGiveMutexRecursive
     /tmp/ccjtHtwZ.s:1362   .text:0000000000000318 xQueueGenericSendFromISR
     /tmp/ccjtHtwZ.s:1553   .text:0000000000000380 xQueueGiveFromISR
     /tmp/ccjtHtwZ.s:1746   .text:00000000000003dc xQueueReceive
     /tmp/ccjtHtwZ.s:2032   .text:00000000000004ca xQueueSemaphoreTake
     /tmp/ccjtHtwZ.s:2393   .text:00000000000005f0 xQueueTakeMutexRecursive
     /tmp/ccjtHtwZ.s:2478   .text:000000000000061e xQueuePeek
     /tmp/ccjtHtwZ.s:2764   .text:000000000000070c xQueueReceiveFromISR
     /tmp/ccjtHtwZ.s:2957   .text:0000000000000774 xQueuePeekFromISR
     /tmp/ccjtHtwZ.s:3077   .text:00000000000007a4 uxQueueMessagesWaiting
     /tmp/ccjtHtwZ.s:3124   .text:00000000000007b6 uxQueueSpacesAvailable
     /tmp/ccjtHtwZ.s:3177   .text:00000000000007cc uxQueueMessagesWaitingFromISR
     /tmp/ccjtHtwZ.s:3206   .text:00000000000007d0 vQueueDelete
     /tmp/ccjtHtwZ.s:3230   .text:00000000000007d4 uxQueueGetQueueNumber
     /tmp/ccjtHtwZ.s:3254   .text:00000000000007d8 vQueueSetQueueNumber
     /tmp/ccjtHtwZ.s:3278   .text:00000000000007dc ucQueueGetQueueType
     /tmp/ccjtHtwZ.s:3302   .text:00000000000007e2 xQueueIsQueueEmptyFromISR
     /tmp/ccjtHtwZ.s:3335   .text:00000000000007ec xQueueIsQueueFullFromISR
     /tmp/ccjtHtwZ.s:3374   .text:00000000000007f8 vQueueWaitForMessageRestricted

UNDEFINED SYMBOLS
vPortEnterCritical
vPortExitCritical
xTaskPriorityDisinherit
memcpy
xTaskRemoveFromEventList
vTaskMissedYield
vListInitialise
pvPortMalloc
vTaskInternalSetTimeOutState
vTaskSuspendAll
xTaskCheckForTimeOut
vTaskPlaceOnEventList
xTaskResumeAll
xTaskGetCurrentTaskHandle
pvTaskIncrementMutexHeldCount
xTaskPriorityInherit
vTaskPriorityDisinheritAfterTimeout
vPortFree
vTaskPlaceOnEventListRestricted
