ARM GAS  /tmp/ccGXytas.s 			page 1


   1              		.cpu cortex-m3
   2              		.arch armv7-m
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1	@ Tag_ABI_FP_denormal
   5              		.eabi_attribute 21, 1	@ Tag_ABI_FP_exceptions
   6              		.eabi_attribute 23, 3	@ Tag_ABI_FP_number_model
   7              		.eabi_attribute 24, 1	@ Tag_ABI_align8_needed
   8              		.eabi_attribute 25, 1	@ Tag_ABI_align8_preserved
   9              		.eabi_attribute 26, 1	@ Tag_ABI_enum_size
  10              		.eabi_attribute 30, 4	@ Tag_ABI_optimization_goals
  11              		.eabi_attribute 34, 1	@ Tag_CPU_unaligned_access
  12              		.eabi_attribute 18, 4	@ Tag_ABI_PCS_wchar_t
  13              		.file	"tasks.c"
  14              	@ GNU C17 (Arch Repository) version 13.2.0 (arm-none-eabi)
  15              	@	compiled by GNU C version 13.2.1 20230801, GMP version 6.3.0, MPFR version 4.2.0-p12, MPC version
  16              	
  17              	@ warning: MPFR header version 4.2.0-p12 differs from library version 4.2.1.
  18              	@ GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
  19              	@ options passed: -mcpu=cortex-m3 -mthumb -mfloat-abi=soft -march=armv7-m -g -gdwarf-2 -Os -fomit-f
  20              		.text
  21              	.Ltext0:
  22              		.cfi_sections	.debug_frame
  23              		.file 1 "../freertos/tasks.c"
  24              		.align	1
  25              		.syntax unified
  26              		.thumb
  27              		.thumb_func
  28              		.type	prvAddCurrentTaskToDelayedList, %function
  29              	prvAddCurrentTaskToDelayedList:
  30              	.LVL0:
  31              	.LFB62:
   1:../freertos/tasks.c **** /*
   2:../freertos/tasks.c ****  * FreeRTOS Kernel V10.2.1
   3:../freertos/tasks.c ****  * Copyright (C) 2019 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:../freertos/tasks.c ****  *
   5:../freertos/tasks.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:../freertos/tasks.c ****  * this software and associated documentation files (the "Software"), to deal in
   7:../freertos/tasks.c ****  * the Software without restriction, including without limitation the rights to
   8:../freertos/tasks.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:../freertos/tasks.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:../freertos/tasks.c ****  * subject to the following conditions:
  11:../freertos/tasks.c ****  *
  12:../freertos/tasks.c ****  * The above copyright notice and this permission notice shall be included in all
  13:../freertos/tasks.c ****  * copies or substantial portions of the Software.
  14:../freertos/tasks.c ****  *
  15:../freertos/tasks.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:../freertos/tasks.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:../freertos/tasks.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:../freertos/tasks.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:../freertos/tasks.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:../freertos/tasks.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:../freertos/tasks.c ****  *
  22:../freertos/tasks.c ****  * http://www.FreeRTOS.org
  23:../freertos/tasks.c ****  * http://aws.amazon.com/freertos
  24:../freertos/tasks.c ****  *
  25:../freertos/tasks.c ****  * 1 tab == 4 spaces!
  26:../freertos/tasks.c ****  */
ARM GAS  /tmp/ccGXytas.s 			page 2


  27:../freertos/tasks.c **** 
  28:../freertos/tasks.c **** /* Standard includes. */
  29:../freertos/tasks.c **** #include <stdlib.h>
  30:../freertos/tasks.c **** #include <string.h>
  31:../freertos/tasks.c **** 
  32:../freertos/tasks.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  33:../freertos/tasks.c **** all the API functions to use the MPU wrappers.  That should only be done when
  34:../freertos/tasks.c **** task.h is included from an application file. */
  35:../freertos/tasks.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  36:../freertos/tasks.c **** 
  37:../freertos/tasks.c **** /* FreeRTOS includes. */
  38:../freertos/tasks.c **** #include "FreeRTOS.h"
  39:../freertos/tasks.c **** #include "task.h"
  40:../freertos/tasks.c **** #include "timers.h"
  41:../freertos/tasks.c **** #include "stack_macros.h"
  42:../freertos/tasks.c **** 
  43:../freertos/tasks.c **** /* Lint e9021, e961 and e750 are suppressed as a MISRA exception justified
  44:../freertos/tasks.c **** because the MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined
  45:../freertos/tasks.c **** for the header files above, but not in this file, in order to generate the
  46:../freertos/tasks.c **** correct privileged Vs unprivileged linkage and placement. */
  47:../freertos/tasks.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750 !e9021. */
  48:../freertos/tasks.c **** 
  49:../freertos/tasks.c **** /* Set configUSE_STATS_FORMATTING_FUNCTIONS to 2 to include the stats formatting
  50:../freertos/tasks.c **** functions but without including stdio.h here. */
  51:../freertos/tasks.c **** #if ( configUSE_STATS_FORMATTING_FUNCTIONS == 1 )
  52:../freertos/tasks.c **** 	/* At the bottom of this file are two optional functions that can be used
  53:../freertos/tasks.c **** 	to generate human readable text from the raw data generated by the
  54:../freertos/tasks.c **** 	uxTaskGetSystemState() function.  Note the formatting functions are provided
  55:../freertos/tasks.c **** 	for convenience only, and are NOT considered part of the kernel. */
  56:../freertos/tasks.c **** 	#include <stdio.h>
  57:../freertos/tasks.c **** #endif /* configUSE_STATS_FORMATTING_FUNCTIONS == 1 ) */
  58:../freertos/tasks.c **** 
  59:../freertos/tasks.c **** #if( configUSE_PREEMPTION == 0 )
  60:../freertos/tasks.c **** 	/* If the cooperative scheduler is being used then a yield should not be
  61:../freertos/tasks.c **** 	performed just because a higher priority task has been woken. */
  62:../freertos/tasks.c **** 	#define taskYIELD_IF_USING_PREEMPTION()
  63:../freertos/tasks.c **** #else
  64:../freertos/tasks.c **** 	#define taskYIELD_IF_USING_PREEMPTION() portYIELD_WITHIN_API()
  65:../freertos/tasks.c **** #endif
  66:../freertos/tasks.c **** 
  67:../freertos/tasks.c **** /* Values that can be assigned to the ucNotifyState member of the TCB. */
  68:../freertos/tasks.c **** #define taskNOT_WAITING_NOTIFICATION	( ( uint8_t ) 0 )
  69:../freertos/tasks.c **** #define taskWAITING_NOTIFICATION		( ( uint8_t ) 1 )
  70:../freertos/tasks.c **** #define taskNOTIFICATION_RECEIVED		( ( uint8_t ) 2 )
  71:../freertos/tasks.c **** 
  72:../freertos/tasks.c **** /*
  73:../freertos/tasks.c ****  * The value used to fill the stack of a task when the task is created.  This
  74:../freertos/tasks.c ****  * is used purely for checking the high water mark for tasks.
  75:../freertos/tasks.c ****  */
  76:../freertos/tasks.c **** #define tskSTACK_FILL_BYTE	( 0xa5U )
  77:../freertos/tasks.c **** 
  78:../freertos/tasks.c **** /* Bits used to recored how a task's stack and TCB were allocated. */
  79:../freertos/tasks.c **** #define tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB 		( ( uint8_t ) 0 )
  80:../freertos/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_ONLY 			( ( uint8_t ) 1 )
  81:../freertos/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_AND_TCB		( ( uint8_t ) 2 )
  82:../freertos/tasks.c **** 
  83:../freertos/tasks.c **** /* If any of the following are set then task stacks are filled with a known
ARM GAS  /tmp/ccGXytas.s 			page 3


  84:../freertos/tasks.c **** value so the high water mark can be determined.  If none of the following are
  85:../freertos/tasks.c **** set then don't fill the stack so there is no unnecessary dependency on memset. */
  86:../freertos/tasks.c **** #if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTas
  87:../freertos/tasks.c **** 	#define tskSET_NEW_STACKS_TO_KNOWN_VALUE	1
  88:../freertos/tasks.c **** #else
  89:../freertos/tasks.c **** 	#define tskSET_NEW_STACKS_TO_KNOWN_VALUE	0
  90:../freertos/tasks.c **** #endif
  91:../freertos/tasks.c **** 
  92:../freertos/tasks.c **** /*
  93:../freertos/tasks.c ****  * Macros used by vListTask to indicate which state a task is in.
  94:../freertos/tasks.c ****  */
  95:../freertos/tasks.c **** #define tskRUNNING_CHAR		( 'X' )
  96:../freertos/tasks.c **** #define tskBLOCKED_CHAR		( 'B' )
  97:../freertos/tasks.c **** #define tskREADY_CHAR		( 'R' )
  98:../freertos/tasks.c **** #define tskDELETED_CHAR		( 'D' )
  99:../freertos/tasks.c **** #define tskSUSPENDED_CHAR	( 'S' )
 100:../freertos/tasks.c **** 
 101:../freertos/tasks.c **** /*
 102:../freertos/tasks.c ****  * Some kernel aware debuggers require the data the debugger needs access to be
 103:../freertos/tasks.c ****  * global, rather than file scope.
 104:../freertos/tasks.c ****  */
 105:../freertos/tasks.c **** #ifdef portREMOVE_STATIC_QUALIFIER
 106:../freertos/tasks.c **** 	#define static
 107:../freertos/tasks.c **** #endif
 108:../freertos/tasks.c **** 
 109:../freertos/tasks.c **** /* The name allocated to the Idle task.  This can be overridden by defining
 110:../freertos/tasks.c **** configIDLE_TASK_NAME in FreeRTOSConfig.h. */
 111:../freertos/tasks.c **** #ifndef configIDLE_TASK_NAME
 112:../freertos/tasks.c **** 	#define configIDLE_TASK_NAME "IDLE"
 113:../freertos/tasks.c **** #endif
 114:../freertos/tasks.c **** 
 115:../freertos/tasks.c **** #if ( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
 116:../freertos/tasks.c **** 
 117:../freertos/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 0 then task selection is
 118:../freertos/tasks.c **** 	performed in a generic way that is not optimised to any particular
 119:../freertos/tasks.c **** 	microcontroller architecture. */
 120:../freertos/tasks.c **** 
 121:../freertos/tasks.c **** 	/* uxTopReadyPriority holds the priority of the highest priority ready
 122:../freertos/tasks.c **** 	state task. */
 123:../freertos/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )														\
 124:../freertos/tasks.c **** 	{																									\
 125:../freertos/tasks.c **** 		if( ( uxPriority ) > uxTopReadyPriority )														\
 126:../freertos/tasks.c **** 		{																								\
 127:../freertos/tasks.c **** 			uxTopReadyPriority = ( uxPriority );														\
 128:../freertos/tasks.c **** 		}																								\
 129:../freertos/tasks.c **** 	} /* taskRECORD_READY_PRIORITY */
 130:../freertos/tasks.c **** 
 131:../freertos/tasks.c **** 	/*-----------------------------------------------------------*/
 132:../freertos/tasks.c **** 
 133:../freertos/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()															\
 134:../freertos/tasks.c **** 	{																									\
 135:../freertos/tasks.c **** 	UBaseType_t uxTopPriority = uxTopReadyPriority;														\
 136:../freertos/tasks.c **** 																										\
 137:../freertos/tasks.c **** 		/* Find the highest priority queue that contains ready tasks. */								\
 138:../freertos/tasks.c **** 		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopPriority ] ) ) )							\
 139:../freertos/tasks.c **** 		{																								\
 140:../freertos/tasks.c **** 			configASSERT( uxTopPriority );																\
ARM GAS  /tmp/ccGXytas.s 			page 4


 141:../freertos/tasks.c **** 			--uxTopPriority;																			\
 142:../freertos/tasks.c **** 		}																								\
 143:../freertos/tasks.c **** 																										\
 144:../freertos/tasks.c **** 		/* listGET_OWNER_OF_NEXT_ENTRY indexes through the list, so the tasks of						\
 145:../freertos/tasks.c **** 		the	same priority get an equal share of the processor time. */									\
 146:../freertos/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );			\
 147:../freertos/tasks.c **** 		uxTopReadyPriority = uxTopPriority;																\
 148:../freertos/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK */
 149:../freertos/tasks.c **** 
 150:../freertos/tasks.c **** 	/*-----------------------------------------------------------*/
 151:../freertos/tasks.c **** 
 152:../freertos/tasks.c **** 	/* Define away taskRESET_READY_PRIORITY() and portRESET_READY_PRIORITY() as
 153:../freertos/tasks.c **** 	they are only required when a port optimised method of task selection is
 154:../freertos/tasks.c **** 	being used. */
 155:../freertos/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )
 156:../freertos/tasks.c **** 	#define portRESET_READY_PRIORITY( uxPriority, uxTopReadyPriority )
 157:../freertos/tasks.c **** 
 158:../freertos/tasks.c **** #else /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 159:../freertos/tasks.c **** 
 160:../freertos/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 1 then task selection is
 161:../freertos/tasks.c **** 	performed in a way that is tailored to the particular microcontroller
 162:../freertos/tasks.c **** 	architecture being used. */
 163:../freertos/tasks.c **** 
 164:../freertos/tasks.c **** 	/* A port optimised version is provided.  Call the port defined macros. */
 165:../freertos/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )	portRECORD_READY_PRIORITY( uxPriority, uxTopReadyP
 166:../freertos/tasks.c **** 
 167:../freertos/tasks.c **** 	/*-----------------------------------------------------------*/
 168:../freertos/tasks.c **** 
 169:../freertos/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()														\
 170:../freertos/tasks.c **** 	{																								\
 171:../freertos/tasks.c **** 	UBaseType_t uxTopPriority;																		\
 172:../freertos/tasks.c **** 																									\
 173:../freertos/tasks.c **** 		/* Find the highest priority list that contains ready tasks. */								\
 174:../freertos/tasks.c **** 		portGET_HIGHEST_PRIORITY( uxTopPriority, uxTopReadyPriority );								\
 175:../freertos/tasks.c **** 		configASSERT( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ uxTopPriority ] ) ) > 0 );		\
 176:../freertos/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );		\
 177:../freertos/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK() */
 178:../freertos/tasks.c **** 
 179:../freertos/tasks.c **** 	/*-----------------------------------------------------------*/
 180:../freertos/tasks.c **** 
 181:../freertos/tasks.c **** 	/* A port optimised version is provided, call it only if the TCB being reset
 182:../freertos/tasks.c **** 	is being referenced from a ready list.  If it is referenced from a delayed
 183:../freertos/tasks.c **** 	or suspended list then it won't be in a ready list. */
 184:../freertos/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )														\
 185:../freertos/tasks.c **** 	{																									\
 186:../freertos/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ ( uxPriority ) ] ) ) == ( UBaseType_t ) 0 )	\
 187:../freertos/tasks.c **** 		{																								\
 188:../freertos/tasks.c **** 			portRESET_READY_PRIORITY( ( uxPriority ), ( uxTopReadyPriority ) );							\
 189:../freertos/tasks.c **** 		}																								\
 190:../freertos/tasks.c **** 	}
 191:../freertos/tasks.c **** 
 192:../freertos/tasks.c **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 193:../freertos/tasks.c **** 
 194:../freertos/tasks.c **** /*-----------------------------------------------------------*/
 195:../freertos/tasks.c **** 
 196:../freertos/tasks.c **** /* pxDelayedTaskList and pxOverflowDelayedTaskList are switched when the tick
 197:../freertos/tasks.c **** count overflows. */
ARM GAS  /tmp/ccGXytas.s 			page 5


 198:../freertos/tasks.c **** #define taskSWITCH_DELAYED_LISTS()																	\
 199:../freertos/tasks.c **** {																									\
 200:../freertos/tasks.c **** 	List_t *pxTemp;																					\
 201:../freertos/tasks.c **** 																									\
 202:../freertos/tasks.c **** 	/* The delayed tasks list should be empty when the lists are switched. */						\
 203:../freertos/tasks.c **** 	configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );										\
 204:../freertos/tasks.c **** 																									\
 205:../freertos/tasks.c **** 	pxTemp = pxDelayedTaskList;																		\
 206:../freertos/tasks.c **** 	pxDelayedTaskList = pxOverflowDelayedTaskList;													\
 207:../freertos/tasks.c **** 	pxOverflowDelayedTaskList = pxTemp;																\
 208:../freertos/tasks.c **** 	xNumOfOverflows++;																				\
 209:../freertos/tasks.c **** 	prvResetNextTaskUnblockTime();																	\
 210:../freertos/tasks.c **** }
 211:../freertos/tasks.c **** 
 212:../freertos/tasks.c **** /*-----------------------------------------------------------*/
 213:../freertos/tasks.c **** 
 214:../freertos/tasks.c **** /*
 215:../freertos/tasks.c ****  * Place the task represented by pxTCB into the appropriate ready list for
 216:../freertos/tasks.c ****  * the task.  It is inserted at the end of the list.
 217:../freertos/tasks.c ****  */
 218:../freertos/tasks.c **** #define prvAddTaskToReadyList( pxTCB )																\
 219:../freertos/tasks.c **** 	traceMOVED_TASK_TO_READY_STATE( pxTCB );														\
 220:../freertos/tasks.c **** 	taskRECORD_READY_PRIORITY( ( pxTCB )->uxPriority );												\
 221:../freertos/tasks.c **** 	vListInsertEnd( &( pxReadyTasksLists[ ( pxTCB )->uxPriority ] ), &( ( pxTCB )->xStateListItem ) );
 222:../freertos/tasks.c **** 	tracePOST_MOVED_TASK_TO_READY_STATE( pxTCB )
 223:../freertos/tasks.c **** /*-----------------------------------------------------------*/
 224:../freertos/tasks.c **** 
 225:../freertos/tasks.c **** /*
 226:../freertos/tasks.c ****  * Several functions take an TaskHandle_t parameter that can optionally be NULL,
 227:../freertos/tasks.c ****  * where NULL is used to indicate that the handle of the currently executing
 228:../freertos/tasks.c ****  * task should be used in place of the parameter.  This macro simply checks to
 229:../freertos/tasks.c ****  * see if the parameter is NULL and returns a pointer to the appropriate TCB.
 230:../freertos/tasks.c ****  */
 231:../freertos/tasks.c **** #define prvGetTCBFromHandle( pxHandle ) ( ( ( pxHandle ) == NULL ) ? pxCurrentTCB : ( pxHandle ) )
 232:../freertos/tasks.c **** 
 233:../freertos/tasks.c **** /* The item value of the event list item is normally used to hold the priority
 234:../freertos/tasks.c **** of the task to which it belongs (coded to allow it to be held in reverse
 235:../freertos/tasks.c **** priority order).  However, it is occasionally borrowed for other purposes.  It
 236:../freertos/tasks.c **** is important its value is not updated due to a task priority change while it is
 237:../freertos/tasks.c **** being used for another purpose.  The following bit definition is used to inform
 238:../freertos/tasks.c **** the scheduler that the value should not be changed - in which case it is the
 239:../freertos/tasks.c **** responsibility of whichever module is using the value to ensure it gets set back
 240:../freertos/tasks.c **** to its original value when it is released. */
 241:../freertos/tasks.c **** #if( configUSE_16_BIT_TICKS == 1 )
 242:../freertos/tasks.c **** 	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x8000U
 243:../freertos/tasks.c **** #else
 244:../freertos/tasks.c **** 	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x80000000UL
 245:../freertos/tasks.c **** #endif
 246:../freertos/tasks.c **** 
 247:../freertos/tasks.c **** /*
 248:../freertos/tasks.c ****  * Task control block.  A task control block (TCB) is allocated for each task,
 249:../freertos/tasks.c ****  * and stores task state information, including a pointer to the task's context
 250:../freertos/tasks.c ****  * (the task's run time environment, including register values)
 251:../freertos/tasks.c ****  */
 252:../freertos/tasks.c **** typedef struct tskTaskControlBlock 			/* The old naming convention is used to prevent breaking kern
 253:../freertos/tasks.c **** {
 254:../freertos/tasks.c **** 	volatile StackType_t	*pxTopOfStack;	/*< Points to the location of the last item placed on the task
ARM GAS  /tmp/ccGXytas.s 			page 6


 255:../freertos/tasks.c **** 
 256:../freertos/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
 257:../freertos/tasks.c **** 		xMPU_SETTINGS	xMPUSettings;		/*< The MPU settings are defined as part of the port layer.  THIS MU
 258:../freertos/tasks.c **** 	#endif
 259:../freertos/tasks.c **** 
 260:../freertos/tasks.c **** 	ListItem_t			xStateListItem;	/*< The list that the state list item of a task is reference from den
 261:../freertos/tasks.c **** 	ListItem_t			xEventListItem;		/*< Used to reference a task from an event list. */
 262:../freertos/tasks.c **** 	UBaseType_t			uxPriority;			/*< The priority of the task.  0 is the lowest priority. */
 263:../freertos/tasks.c **** 	StackType_t			*pxStack;			/*< Points to the start of the stack. */
 264:../freertos/tasks.c **** 	char				pcTaskName[ configMAX_TASK_NAME_LEN ];/*< Descriptive name given to the task when created.
 265:../freertos/tasks.c **** 
 266:../freertos/tasks.c **** 	#if ( ( portSTACK_GROWTH > 0 ) || ( configRECORD_STACK_HIGH_ADDRESS == 1 ) )
 267:../freertos/tasks.c **** 		StackType_t		*pxEndOfStack;		/*< Points to the highest valid address for the stack. */
 268:../freertos/tasks.c **** 	#endif
 269:../freertos/tasks.c **** 
 270:../freertos/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
 271:../freertos/tasks.c **** 		UBaseType_t		uxCriticalNesting;	/*< Holds the critical section nesting depth for ports that do no
 272:../freertos/tasks.c **** 	#endif
 273:../freertos/tasks.c **** 
 274:../freertos/tasks.c **** 	#if ( configUSE_TRACE_FACILITY == 1 )
 275:../freertos/tasks.c **** 		UBaseType_t		uxTCBNumber;		/*< Stores a number that increments each time a TCB is created.  It al
 276:../freertos/tasks.c **** 		UBaseType_t		uxTaskNumber;		/*< Stores a number specifically for use by third party trace code. *
 277:../freertos/tasks.c **** 	#endif
 278:../freertos/tasks.c **** 
 279:../freertos/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 280:../freertos/tasks.c **** 		UBaseType_t		uxBasePriority;		/*< The priority last assigned to the task - used by the priority i
 281:../freertos/tasks.c **** 		UBaseType_t		uxMutexesHeld;
 282:../freertos/tasks.c **** 	#endif
 283:../freertos/tasks.c **** 
 284:../freertos/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
 285:../freertos/tasks.c **** 		TaskHookFunction_t pxTaskTag;
 286:../freertos/tasks.c **** 	#endif
 287:../freertos/tasks.c **** 
 288:../freertos/tasks.c **** 	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS > 0 )
 289:../freertos/tasks.c **** 		void			*pvThreadLocalStoragePointers[ configNUM_THREAD_LOCAL_STORAGE_POINTERS ];
 290:../freertos/tasks.c **** 	#endif
 291:../freertos/tasks.c **** 
 292:../freertos/tasks.c **** 	#if( configGENERATE_RUN_TIME_STATS == 1 )
 293:../freertos/tasks.c **** 		uint32_t		ulRunTimeCounter;	/*< Stores the amount of time the task has spent in the Running state
 294:../freertos/tasks.c **** 	#endif
 295:../freertos/tasks.c **** 
 296:../freertos/tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
 297:../freertos/tasks.c **** 		/* Allocate a Newlib reent structure that is specific to this task.
 298:../freertos/tasks.c **** 		Note Newlib support has been included by popular demand, but is not
 299:../freertos/tasks.c **** 		used by the FreeRTOS maintainers themselves.  FreeRTOS is not
 300:../freertos/tasks.c **** 		responsible for resulting newlib operation.  User must be familiar with
 301:../freertos/tasks.c **** 		newlib and must provide system-wide implementations of the necessary
 302:../freertos/tasks.c **** 		stubs. Be warned that (at the time of writing) the current newlib design
 303:../freertos/tasks.c **** 		implements a system-wide malloc() that must be provided with locks. */
 304:../freertos/tasks.c **** 		struct	_reent xNewLib_reent;
 305:../freertos/tasks.c **** 	#endif
 306:../freertos/tasks.c **** 
 307:../freertos/tasks.c **** 	#if( configUSE_TASK_NOTIFICATIONS == 1 )
 308:../freertos/tasks.c **** 		volatile uint32_t ulNotifiedValue;
 309:../freertos/tasks.c **** 		volatile uint8_t ucNotifyState;
 310:../freertos/tasks.c **** 	#endif
 311:../freertos/tasks.c **** 
ARM GAS  /tmp/ccGXytas.s 			page 7


 312:../freertos/tasks.c **** 	/* See the comments in FreeRTOS.h with the definition of
 313:../freertos/tasks.c **** 	tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE. */
 314:../freertos/tasks.c **** 	#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolida
 315:../freertos/tasks.c **** 		uint8_t	ucStaticallyAllocated; 		/*< Set to pdTRUE if the task is a statically allocated to ensur
 316:../freertos/tasks.c **** 	#endif
 317:../freertos/tasks.c **** 
 318:../freertos/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
 319:../freertos/tasks.c **** 		uint8_t ucDelayAborted;
 320:../freertos/tasks.c **** 	#endif
 321:../freertos/tasks.c **** 
 322:../freertos/tasks.c **** 	#if( configUSE_POSIX_ERRNO == 1 )
 323:../freertos/tasks.c **** 		int iTaskErrno;
 324:../freertos/tasks.c **** 	#endif
 325:../freertos/tasks.c **** 
 326:../freertos/tasks.c **** } tskTCB;
 327:../freertos/tasks.c **** 
 328:../freertos/tasks.c **** /* The old tskTCB name is maintained above then typedefed to the new TCB_t name
 329:../freertos/tasks.c **** below to enable the use of older kernel aware debuggers. */
 330:../freertos/tasks.c **** typedef tskTCB TCB_t;
 331:../freertos/tasks.c **** 
 332:../freertos/tasks.c **** /*lint -save -e956 A manual analysis and inspection has been used to determine
 333:../freertos/tasks.c **** which static variables must be declared volatile. */
 334:../freertos/tasks.c **** PRIVILEGED_DATA TCB_t * volatile pxCurrentTCB = NULL;
 335:../freertos/tasks.c **** 
 336:../freertos/tasks.c **** /* Lists for ready and blocked tasks. --------------------
 337:../freertos/tasks.c **** xDelayedTaskList1 and xDelayedTaskList2 could be move to function scople but
 338:../freertos/tasks.c **** doing so breaks some kernel aware debuggers and debuggers that rely on removing
 339:../freertos/tasks.c **** the static qualifier. */
 340:../freertos/tasks.c **** PRIVILEGED_DATA static List_t pxReadyTasksLists[ configMAX_PRIORITIES ];/*< Prioritised ready tasks
 341:../freertos/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList1;						/*< Delayed tasks. */
 342:../freertos/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList2;						/*< Delayed tasks (two lists are used - one f
 343:../freertos/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxDelayedTaskList;				/*< Points to the delayed task list 
 344:../freertos/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxOverflowDelayedTaskList;		/*< Points to the delayed task
 345:../freertos/tasks.c **** PRIVILEGED_DATA static List_t xPendingReadyList;						/*< Tasks that have been readied while the sc
 346:../freertos/tasks.c **** 
 347:../freertos/tasks.c **** #if( INCLUDE_vTaskDelete == 1 )
 348:../freertos/tasks.c **** 
 349:../freertos/tasks.c **** 	PRIVILEGED_DATA static List_t xTasksWaitingTermination;				/*< Tasks that have been deleted - but 
 350:../freertos/tasks.c **** 	PRIVILEGED_DATA static volatile UBaseType_t uxDeletedTasksWaitingCleanUp = ( UBaseType_t ) 0U;
 351:../freertos/tasks.c **** 
 352:../freertos/tasks.c **** #endif
 353:../freertos/tasks.c **** 
 354:../freertos/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 355:../freertos/tasks.c **** 
 356:../freertos/tasks.c **** 	PRIVILEGED_DATA static List_t xSuspendedTaskList;					/*< Tasks that are currently suspended. */
 357:../freertos/tasks.c **** 
 358:../freertos/tasks.c **** #endif
 359:../freertos/tasks.c **** 
 360:../freertos/tasks.c **** /* Global POSIX errno. Its value is changed upon context switching to match
 361:../freertos/tasks.c **** the errno of the currently running task. */
 362:../freertos/tasks.c **** #if ( configUSE_POSIX_ERRNO == 1 )
 363:../freertos/tasks.c **** 	int FreeRTOS_errno = 0;
 364:../freertos/tasks.c **** #endif
 365:../freertos/tasks.c **** 
 366:../freertos/tasks.c **** /* Other file private variables. --------------------------------*/
 367:../freertos/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxCurrentNumberOfTasks 	= ( UBaseType_t ) 0U;
 368:../freertos/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xTickCount 				= ( TickType_t ) configINITIAL_TICK_COUNT
ARM GAS  /tmp/ccGXytas.s 			page 8


 369:../freertos/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxTopReadyPriority 		= tskIDLE_PRIORITY;
 370:../freertos/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xSchedulerRunning 		= pdFALSE;
 371:../freertos/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxPendedTicks 			= ( UBaseType_t ) 0U;
 372:../freertos/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xYieldPending 			= pdFALSE;
 373:../freertos/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xNumOfOverflows 			= ( BaseType_t ) 0;
 374:../freertos/tasks.c **** PRIVILEGED_DATA static UBaseType_t uxTaskNumber 					= ( UBaseType_t ) 0U;
 375:../freertos/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xNextTaskUnblockTime		= ( TickType_t ) 0U; /* Initialise
 376:../freertos/tasks.c **** PRIVILEGED_DATA static TaskHandle_t xIdleTaskHandle					= NULL;			/*< Holds the handle of the idle 
 377:../freertos/tasks.c **** 
 378:../freertos/tasks.c **** /* Context switches are held pending while the scheduler is suspended.  Also,
 379:../freertos/tasks.c **** interrupts must not manipulate the xStateListItem of a TCB, or any of the
 380:../freertos/tasks.c **** lists the xStateListItem can be referenced from, if the scheduler is suspended.
 381:../freertos/tasks.c **** If an interrupt needs to unblock a task while the scheduler is suspended then it
 382:../freertos/tasks.c **** moves the task's event list item into the xPendingReadyList, ready for the
 383:../freertos/tasks.c **** kernel to move the task from the pending ready list into the real ready list
 384:../freertos/tasks.c **** when the scheduler is unsuspended.  The pending ready list itself can only be
 385:../freertos/tasks.c **** accessed from a critical section. */
 386:../freertos/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxSchedulerSuspended	= ( UBaseType_t ) pdFALSE;
 387:../freertos/tasks.c **** 
 388:../freertos/tasks.c **** #if ( configGENERATE_RUN_TIME_STATS == 1 )
 389:../freertos/tasks.c **** 
 390:../freertos/tasks.c **** 	/* Do not move these variables to function scope as doing so prevents the
 391:../freertos/tasks.c **** 	code working with debuggers that need to remove the static qualifier. */
 392:../freertos/tasks.c **** 	PRIVILEGED_DATA static uint32_t ulTaskSwitchedInTime = 0UL;	/*< Holds the value of a timer/counter
 393:../freertos/tasks.c **** 	PRIVILEGED_DATA static uint32_t ulTotalRunTime = 0UL;		/*< Holds the total amount of execution tim
 394:../freertos/tasks.c **** 
 395:../freertos/tasks.c **** #endif
 396:../freertos/tasks.c **** 
 397:../freertos/tasks.c **** /*lint -restore */
 398:../freertos/tasks.c **** 
 399:../freertos/tasks.c **** /*-----------------------------------------------------------*/
 400:../freertos/tasks.c **** 
 401:../freertos/tasks.c **** /* Callback function prototypes. --------------------------*/
 402:../freertos/tasks.c **** #if(  configCHECK_FOR_STACK_OVERFLOW > 0 )
 403:../freertos/tasks.c **** 
 404:../freertos/tasks.c **** 	extern void vApplicationStackOverflowHook( TaskHandle_t xTask, char *pcTaskName );
 405:../freertos/tasks.c **** 
 406:../freertos/tasks.c **** #endif
 407:../freertos/tasks.c **** 
 408:../freertos/tasks.c **** #if( configUSE_TICK_HOOK > 0 )
 409:../freertos/tasks.c **** 
 410:../freertos/tasks.c **** 	extern void vApplicationTickHook( void ); /*lint !e526 Symbol not defined as it is an application 
 411:../freertos/tasks.c **** 
 412:../freertos/tasks.c **** #endif
 413:../freertos/tasks.c **** 
 414:../freertos/tasks.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 415:../freertos/tasks.c **** 
 416:../freertos/tasks.c **** 	extern void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxI
 417:../freertos/tasks.c **** 
 418:../freertos/tasks.c **** #endif
 419:../freertos/tasks.c **** 
 420:../freertos/tasks.c **** /* File private functions. --------------------------------*/
 421:../freertos/tasks.c **** 
 422:../freertos/tasks.c **** /**
 423:../freertos/tasks.c ****  * Utility task that simply returns pdTRUE if the task referenced by xTask is
 424:../freertos/tasks.c ****  * currently in the Suspended state, or pdFALSE if the task referenced by xTask
 425:../freertos/tasks.c ****  * is in any other state.
ARM GAS  /tmp/ccGXytas.s 			page 9


 426:../freertos/tasks.c ****  */
 427:../freertos/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 428:../freertos/tasks.c **** 
 429:../freertos/tasks.c **** 	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask ) PRIVILEGED_FUNCTION;
 430:../freertos/tasks.c **** 
 431:../freertos/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
 432:../freertos/tasks.c **** 
 433:../freertos/tasks.c **** /*
 434:../freertos/tasks.c ****  * Utility to ready all the lists used by the scheduler.  This is called
 435:../freertos/tasks.c ****  * automatically upon the creation of the first task.
 436:../freertos/tasks.c ****  */
 437:../freertos/tasks.c **** static void prvInitialiseTaskLists( void ) PRIVILEGED_FUNCTION;
 438:../freertos/tasks.c **** 
 439:../freertos/tasks.c **** /*
 440:../freertos/tasks.c ****  * The idle task, which as all tasks is implemented as a never ending loop.
 441:../freertos/tasks.c ****  * The idle task is automatically created and added to the ready lists upon
 442:../freertos/tasks.c ****  * creation of the first user task.
 443:../freertos/tasks.c ****  *
 444:../freertos/tasks.c ****  * The portTASK_FUNCTION_PROTO() macro is used to allow port/compiler specific
 445:../freertos/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
 446:../freertos/tasks.c ****  *
 447:../freertos/tasks.c ****  * void prvIdleTask( void *pvParameters );
 448:../freertos/tasks.c ****  *
 449:../freertos/tasks.c ****  */
 450:../freertos/tasks.c **** static portTASK_FUNCTION_PROTO( prvIdleTask, pvParameters );
 451:../freertos/tasks.c **** 
 452:../freertos/tasks.c **** /*
 453:../freertos/tasks.c ****  * Utility to free all memory allocated by the scheduler to hold a TCB,
 454:../freertos/tasks.c ****  * including the stack pointed to by the TCB.
 455:../freertos/tasks.c ****  *
 456:../freertos/tasks.c ****  * This does not free memory allocated by the task itself (i.e. memory
 457:../freertos/tasks.c ****  * allocated by calls to pvPortMalloc from within the tasks application code).
 458:../freertos/tasks.c ****  */
 459:../freertos/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
 460:../freertos/tasks.c **** 
 461:../freertos/tasks.c **** 	static void prvDeleteTCB( TCB_t *pxTCB ) PRIVILEGED_FUNCTION;
 462:../freertos/tasks.c **** 
 463:../freertos/tasks.c **** #endif
 464:../freertos/tasks.c **** 
 465:../freertos/tasks.c **** /*
 466:../freertos/tasks.c ****  * Used only by the idle task.  This checks to see if anything has been placed
 467:../freertos/tasks.c ****  * in the list of tasks waiting to be deleted.  If so the task is cleaned up
 468:../freertos/tasks.c ****  * and its TCB deleted.
 469:../freertos/tasks.c ****  */
 470:../freertos/tasks.c **** static void prvCheckTasksWaitingTermination( void ) PRIVILEGED_FUNCTION;
 471:../freertos/tasks.c **** 
 472:../freertos/tasks.c **** /*
 473:../freertos/tasks.c ****  * The currently executing task is entering the Blocked state.  Add the task to
 474:../freertos/tasks.c ****  * either the current or the overflow delayed task list.
 475:../freertos/tasks.c ****  */
 476:../freertos/tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockInde
 477:../freertos/tasks.c **** 
 478:../freertos/tasks.c **** /*
 479:../freertos/tasks.c ****  * Fills an TaskStatus_t structure with information on each task that is
 480:../freertos/tasks.c ****  * referenced from the pxList list (which may be a ready list, a delayed list,
 481:../freertos/tasks.c ****  * a suspended list, etc.).
 482:../freertos/tasks.c ****  *
ARM GAS  /tmp/ccGXytas.s 			page 10


 483:../freertos/tasks.c ****  * THIS FUNCTION IS INTENDED FOR DEBUGGING ONLY, AND SHOULD NOT BE CALLED FROM
 484:../freertos/tasks.c ****  * NORMAL APPLICATION CODE.
 485:../freertos/tasks.c ****  */
 486:../freertos/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
 487:../freertos/tasks.c **** 
 488:../freertos/tasks.c **** 	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, 
 489:../freertos/tasks.c **** 
 490:../freertos/tasks.c **** #endif
 491:../freertos/tasks.c **** 
 492:../freertos/tasks.c **** /*
 493:../freertos/tasks.c ****  * Searches pxList for a task with name pcNameToQuery - returning a handle to
 494:../freertos/tasks.c ****  * the task if it is found, or NULL if the task is not found.
 495:../freertos/tasks.c ****  */
 496:../freertos/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
 497:../freertos/tasks.c **** 
 498:../freertos/tasks.c **** 	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] ) PRIVI
 499:../freertos/tasks.c **** 
 500:../freertos/tasks.c **** #endif
 501:../freertos/tasks.c **** 
 502:../freertos/tasks.c **** /*
 503:../freertos/tasks.c ****  * When a task is created, the stack of the task is filled with a known value.
 504:../freertos/tasks.c ****  * This function determines the 'high water mark' of the task stack by
 505:../freertos/tasks.c ****  * determining how much of the stack remains at the original preset value.
 506:../freertos/tasks.c ****  */
 507:../freertos/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUD
 508:../freertos/tasks.c **** 
 509:../freertos/tasks.c **** 	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte ) PRIVILEGE
 510:../freertos/tasks.c **** 
 511:../freertos/tasks.c **** #endif
 512:../freertos/tasks.c **** 
 513:../freertos/tasks.c **** /*
 514:../freertos/tasks.c ****  * Return the amount of time, in ticks, that will pass before the kernel will
 515:../freertos/tasks.c ****  * next move a task from the Blocked state to the Running state.
 516:../freertos/tasks.c ****  *
 517:../freertos/tasks.c ****  * This conditional compilation should use inequality to 0, not equality to 1.
 518:../freertos/tasks.c ****  * This is to ensure portSUPPRESS_TICKS_AND_SLEEP() can be called when user
 519:../freertos/tasks.c ****  * defined low power mode implementations require configUSE_TICKLESS_IDLE to be
 520:../freertos/tasks.c ****  * set to a value other than 1.
 521:../freertos/tasks.c ****  */
 522:../freertos/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
 523:../freertos/tasks.c **** 
 524:../freertos/tasks.c **** 	static TickType_t prvGetExpectedIdleTime( void ) PRIVILEGED_FUNCTION;
 525:../freertos/tasks.c **** 
 526:../freertos/tasks.c **** #endif
 527:../freertos/tasks.c **** 
 528:../freertos/tasks.c **** /*
 529:../freertos/tasks.c ****  * Set xNextTaskUnblockTime to the time at which the next Blocked state task
 530:../freertos/tasks.c ****  * will exit the Blocked state.
 531:../freertos/tasks.c ****  */
 532:../freertos/tasks.c **** static void prvResetNextTaskUnblockTime( void );
 533:../freertos/tasks.c **** 
 534:../freertos/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
 535:../freertos/tasks.c **** 
 536:../freertos/tasks.c **** 	/*
 537:../freertos/tasks.c **** 	 * Helper function used to pad task names with spaces when printing out
 538:../freertos/tasks.c **** 	 * human readable tables of task information.
 539:../freertos/tasks.c **** 	 */
ARM GAS  /tmp/ccGXytas.s 			page 11


 540:../freertos/tasks.c **** 	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName ) PRIVILEGED_FUNCTION;
 541:../freertos/tasks.c **** 
 542:../freertos/tasks.c **** #endif
 543:../freertos/tasks.c **** 
 544:../freertos/tasks.c **** /*
 545:../freertos/tasks.c ****  * Called after a Task_t structure has been allocated either statically or
 546:../freertos/tasks.c ****  * dynamically to fill in the structure's members.
 547:../freertos/tasks.c ****  */
 548:../freertos/tasks.c **** static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 549:../freertos/tasks.c **** 									const char * const pcName, 		/*lint !e971 Unqualified char types are allowed for strings a
 550:../freertos/tasks.c **** 									const uint32_t ulStackDepth,
 551:../freertos/tasks.c **** 									void * const pvParameters,
 552:../freertos/tasks.c **** 									UBaseType_t uxPriority,
 553:../freertos/tasks.c **** 									TaskHandle_t * const pxCreatedTask,
 554:../freertos/tasks.c **** 									TCB_t *pxNewTCB,
 555:../freertos/tasks.c **** 									const MemoryRegion_t * const xRegions ) PRIVILEGED_FUNCTION;
 556:../freertos/tasks.c **** 
 557:../freertos/tasks.c **** /*
 558:../freertos/tasks.c ****  * Called after a new task has been created and initialised to place the task
 559:../freertos/tasks.c ****  * under the control of the scheduler.
 560:../freertos/tasks.c ****  */
 561:../freertos/tasks.c **** static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB ) PRIVILEGED_FUNCTION;
 562:../freertos/tasks.c **** 
 563:../freertos/tasks.c **** /*
 564:../freertos/tasks.c ****  * freertos_tasks_c_additions_init() should only be called if the user definable
 565:../freertos/tasks.c ****  * macro FREERTOS_TASKS_C_ADDITIONS_INIT() is defined, as that is the only macro
 566:../freertos/tasks.c ****  * called by the function.
 567:../freertos/tasks.c ****  */
 568:../freertos/tasks.c **** #ifdef FREERTOS_TASKS_C_ADDITIONS_INIT
 569:../freertos/tasks.c **** 
 570:../freertos/tasks.c **** 	static void freertos_tasks_c_additions_init( void ) PRIVILEGED_FUNCTION;
 571:../freertos/tasks.c **** 
 572:../freertos/tasks.c **** #endif
 573:../freertos/tasks.c **** 
 574:../freertos/tasks.c **** /*-----------------------------------------------------------*/
 575:../freertos/tasks.c **** 
 576:../freertos/tasks.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 577:../freertos/tasks.c **** 
 578:../freertos/tasks.c **** 	TaskHandle_t xTaskCreateStatic(	TaskFunction_t pxTaskCode,
 579:../freertos/tasks.c **** 									const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings an
 580:../freertos/tasks.c **** 									const uint32_t ulStackDepth,
 581:../freertos/tasks.c **** 									void * const pvParameters,
 582:../freertos/tasks.c **** 									UBaseType_t uxPriority,
 583:../freertos/tasks.c **** 									StackType_t * const puxStackBuffer,
 584:../freertos/tasks.c **** 									StaticTask_t * const pxTaskBuffer )
 585:../freertos/tasks.c **** 	{
 586:../freertos/tasks.c **** 	TCB_t *pxNewTCB;
 587:../freertos/tasks.c **** 	TaskHandle_t xReturn;
 588:../freertos/tasks.c **** 
 589:../freertos/tasks.c **** 		configASSERT( puxStackBuffer != NULL );
 590:../freertos/tasks.c **** 		configASSERT( pxTaskBuffer != NULL );
 591:../freertos/tasks.c **** 
 592:../freertos/tasks.c **** 		#if( configASSERT_DEFINED == 1 )
 593:../freertos/tasks.c **** 		{
 594:../freertos/tasks.c **** 			/* Sanity check that the size of the structure used to declare a
 595:../freertos/tasks.c **** 			variable of type StaticTask_t equals the size of the real task
 596:../freertos/tasks.c **** 			structure. */
ARM GAS  /tmp/ccGXytas.s 			page 12


 597:../freertos/tasks.c **** 			volatile size_t xSize = sizeof( StaticTask_t );
 598:../freertos/tasks.c **** 			configASSERT( xSize == sizeof( TCB_t ) );
 599:../freertos/tasks.c **** 			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 600:../freertos/tasks.c **** 		}
 601:../freertos/tasks.c **** 		#endif /* configASSERT_DEFINED */
 602:../freertos/tasks.c **** 
 603:../freertos/tasks.c **** 
 604:../freertos/tasks.c **** 		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 605:../freertos/tasks.c **** 		{
 606:../freertos/tasks.c **** 			/* The memory used for the task's TCB and stack are passed into this
 607:../freertos/tasks.c **** 			function - use them. */
 608:../freertos/tasks.c **** 			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures ar
 609:../freertos/tasks.c **** 			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 610:../freertos/tasks.c **** 
 611:../freertos/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consoli
 612:../freertos/tasks.c **** 			{
 613:../freertos/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 614:../freertos/tasks.c **** 				task was created statically in case the task is later deleted. */
 615:../freertos/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 616:../freertos/tasks.c **** 			}
 617:../freertos/tasks.c **** 			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 618:../freertos/tasks.c **** 
 619:../freertos/tasks.c **** 			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNe
 620:../freertos/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 621:../freertos/tasks.c **** 		}
 622:../freertos/tasks.c **** 		else
 623:../freertos/tasks.c **** 		{
 624:../freertos/tasks.c **** 			xReturn = NULL;
 625:../freertos/tasks.c **** 		}
 626:../freertos/tasks.c **** 
 627:../freertos/tasks.c **** 		return xReturn;
 628:../freertos/tasks.c **** 	}
 629:../freertos/tasks.c **** 
 630:../freertos/tasks.c **** #endif /* SUPPORT_STATIC_ALLOCATION */
 631:../freertos/tasks.c **** /*-----------------------------------------------------------*/
 632:../freertos/tasks.c **** 
 633:../freertos/tasks.c **** #if( ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 634:../freertos/tasks.c **** 
 635:../freertos/tasks.c **** 	BaseType_t xTaskCreateRestrictedStatic( const TaskParameters_t * const pxTaskDefinition, TaskHandl
 636:../freertos/tasks.c **** 	{
 637:../freertos/tasks.c **** 	TCB_t *pxNewTCB;
 638:../freertos/tasks.c **** 	BaseType_t xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 639:../freertos/tasks.c **** 
 640:../freertos/tasks.c **** 		configASSERT( pxTaskDefinition->puxStackBuffer != NULL );
 641:../freertos/tasks.c **** 		configASSERT( pxTaskDefinition->pxTaskBuffer != NULL );
 642:../freertos/tasks.c **** 
 643:../freertos/tasks.c **** 		if( ( pxTaskDefinition->puxStackBuffer != NULL ) && ( pxTaskDefinition->pxTaskBuffer != NULL ) )
 644:../freertos/tasks.c **** 		{
 645:../freertos/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends
 646:../freertos/tasks.c **** 			on the implementation of the port malloc function and whether or
 647:../freertos/tasks.c **** 			not static allocation is being used. */
 648:../freertos/tasks.c **** 			pxNewTCB = ( TCB_t * ) pxTaskDefinition->pxTaskBuffer;
 649:../freertos/tasks.c **** 
 650:../freertos/tasks.c **** 			/* Store the stack location in the TCB. */
 651:../freertos/tasks.c **** 			pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 652:../freertos/tasks.c **** 
 653:../freertos/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
ARM GAS  /tmp/ccGXytas.s 			page 13


 654:../freertos/tasks.c **** 			{
 655:../freertos/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 656:../freertos/tasks.c **** 				task was created statically in case the task is later deleted. */
 657:../freertos/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 658:../freertos/tasks.c **** 			}
 659:../freertos/tasks.c **** 			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 660:../freertos/tasks.c **** 
 661:../freertos/tasks.c **** 			prvInitialiseNewTask(	pxTaskDefinition->pvTaskCode,
 662:../freertos/tasks.c **** 									pxTaskDefinition->pcName,
 663:../freertos/tasks.c **** 									( uint32_t ) pxTaskDefinition->usStackDepth,
 664:../freertos/tasks.c **** 									pxTaskDefinition->pvParameters,
 665:../freertos/tasks.c **** 									pxTaskDefinition->uxPriority,
 666:../freertos/tasks.c **** 									pxCreatedTask, pxNewTCB,
 667:../freertos/tasks.c **** 									pxTaskDefinition->xRegions );
 668:../freertos/tasks.c **** 
 669:../freertos/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 670:../freertos/tasks.c **** 			xReturn = pdPASS;
 671:../freertos/tasks.c **** 		}
 672:../freertos/tasks.c **** 
 673:../freertos/tasks.c **** 		return xReturn;
 674:../freertos/tasks.c **** 	}
 675:../freertos/tasks.c **** 
 676:../freertos/tasks.c **** #endif /* ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
 677:../freertos/tasks.c **** /*-----------------------------------------------------------*/
 678:../freertos/tasks.c **** 
 679:../freertos/tasks.c **** #if( ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 680:../freertos/tasks.c **** 
 681:../freertos/tasks.c **** 	BaseType_t xTaskCreateRestricted( const TaskParameters_t * const pxTaskDefinition, TaskHandle_t *p
 682:../freertos/tasks.c **** 	{
 683:../freertos/tasks.c **** 	TCB_t *pxNewTCB;
 684:../freertos/tasks.c **** 	BaseType_t xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 685:../freertos/tasks.c **** 
 686:../freertos/tasks.c **** 		configASSERT( pxTaskDefinition->puxStackBuffer );
 687:../freertos/tasks.c **** 
 688:../freertos/tasks.c **** 		if( pxTaskDefinition->puxStackBuffer != NULL )
 689:../freertos/tasks.c **** 		{
 690:../freertos/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends
 691:../freertos/tasks.c **** 			on the implementation of the port malloc function and whether or
 692:../freertos/tasks.c **** 			not static allocation is being used. */
 693:../freertos/tasks.c **** 			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 694:../freertos/tasks.c **** 
 695:../freertos/tasks.c **** 			if( pxNewTCB != NULL )
 696:../freertos/tasks.c **** 			{
 697:../freertos/tasks.c **** 				/* Store the stack location in the TCB. */
 698:../freertos/tasks.c **** 				pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 699:../freertos/tasks.c **** 
 700:../freertos/tasks.c **** 				#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 701:../freertos/tasks.c **** 				{
 702:../freertos/tasks.c **** 					/* Tasks can be created statically or dynamically, so note
 703:../freertos/tasks.c **** 					this task had a statically allocated stack in case it is
 704:../freertos/tasks.c **** 					later deleted.  The TCB was allocated dynamically. */
 705:../freertos/tasks.c **** 					pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_ONLY;
 706:../freertos/tasks.c **** 				}
 707:../freertos/tasks.c **** 				#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 708:../freertos/tasks.c **** 
 709:../freertos/tasks.c **** 				prvInitialiseNewTask(	pxTaskDefinition->pvTaskCode,
 710:../freertos/tasks.c **** 										pxTaskDefinition->pcName,
ARM GAS  /tmp/ccGXytas.s 			page 14


 711:../freertos/tasks.c **** 										( uint32_t ) pxTaskDefinition->usStackDepth,
 712:../freertos/tasks.c **** 										pxTaskDefinition->pvParameters,
 713:../freertos/tasks.c **** 										pxTaskDefinition->uxPriority,
 714:../freertos/tasks.c **** 										pxCreatedTask, pxNewTCB,
 715:../freertos/tasks.c **** 										pxTaskDefinition->xRegions );
 716:../freertos/tasks.c **** 
 717:../freertos/tasks.c **** 				prvAddNewTaskToReadyList( pxNewTCB );
 718:../freertos/tasks.c **** 				xReturn = pdPASS;
 719:../freertos/tasks.c **** 			}
 720:../freertos/tasks.c **** 		}
 721:../freertos/tasks.c **** 
 722:../freertos/tasks.c **** 		return xReturn;
 723:../freertos/tasks.c **** 	}
 724:../freertos/tasks.c **** 
 725:../freertos/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
 726:../freertos/tasks.c **** /*-----------------------------------------------------------*/
 727:../freertos/tasks.c **** 
 728:../freertos/tasks.c **** #if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 729:../freertos/tasks.c **** 
 730:../freertos/tasks.c **** 	BaseType_t xTaskCreate(	TaskFunction_t pxTaskCode,
 731:../freertos/tasks.c **** 							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and 
 732:../freertos/tasks.c **** 							const configSTACK_DEPTH_TYPE usStackDepth,
 733:../freertos/tasks.c **** 							void * const pvParameters,
 734:../freertos/tasks.c **** 							UBaseType_t uxPriority,
 735:../freertos/tasks.c **** 							TaskHandle_t * const pxCreatedTask )
 736:../freertos/tasks.c **** 	{
 737:../freertos/tasks.c **** 	TCB_t *pxNewTCB;
 738:../freertos/tasks.c **** 	BaseType_t xReturn;
 739:../freertos/tasks.c **** 
 740:../freertos/tasks.c **** 		/* If the stack grows down then allocate the stack then the TCB so the stack
 741:../freertos/tasks.c **** 		does not grow into the TCB.  Likewise if the stack grows up then allocate
 742:../freertos/tasks.c **** 		the TCB then the stack. */
 743:../freertos/tasks.c **** 		#if( portSTACK_GROWTH > 0 )
 744:../freertos/tasks.c **** 		{
 745:../freertos/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends on
 746:../freertos/tasks.c **** 			the implementation of the port malloc function and whether or not static
 747:../freertos/tasks.c **** 			allocation is being used. */
 748:../freertos/tasks.c **** 			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 749:../freertos/tasks.c **** 
 750:../freertos/tasks.c **** 			if( pxNewTCB != NULL )
 751:../freertos/tasks.c **** 			{
 752:../freertos/tasks.c **** 				/* Allocate space for the stack used by the task being created.
 753:../freertos/tasks.c **** 				The base of the stack memory stored in the TCB so the task can
 754:../freertos/tasks.c **** 				be deleted later if required. */
 755:../freertos/tasks.c **** 				pxNewTCB->pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( Sta
 756:../freertos/tasks.c **** 
 757:../freertos/tasks.c **** 				if( pxNewTCB->pxStack == NULL )
 758:../freertos/tasks.c **** 				{
 759:../freertos/tasks.c **** 					/* Could not allocate the stack.  Delete the allocated TCB. */
 760:../freertos/tasks.c **** 					vPortFree( pxNewTCB );
 761:../freertos/tasks.c **** 					pxNewTCB = NULL;
 762:../freertos/tasks.c **** 				}
 763:../freertos/tasks.c **** 			}
 764:../freertos/tasks.c **** 		}
 765:../freertos/tasks.c **** 		#else /* portSTACK_GROWTH */
 766:../freertos/tasks.c **** 		{
 767:../freertos/tasks.c **** 		StackType_t *pxStack;
ARM GAS  /tmp/ccGXytas.s 			page 15


 768:../freertos/tasks.c **** 
 769:../freertos/tasks.c **** 			/* Allocate space for the stack used by the task being created. */
 770:../freertos/tasks.c **** 			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079
 771:../freertos/tasks.c **** 
 772:../freertos/tasks.c **** 			if( pxStack != NULL )
 773:../freertos/tasks.c **** 			{
 774:../freertos/tasks.c **** 				/* Allocate space for the TCB. */
 775:../freertos/tasks.c **** 				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returne
 776:../freertos/tasks.c **** 
 777:../freertos/tasks.c **** 				if( pxNewTCB != NULL )
 778:../freertos/tasks.c **** 				{
 779:../freertos/tasks.c **** 					/* Store the stack location in the TCB. */
 780:../freertos/tasks.c **** 					pxNewTCB->pxStack = pxStack;
 781:../freertos/tasks.c **** 				}
 782:../freertos/tasks.c **** 				else
 783:../freertos/tasks.c **** 				{
 784:../freertos/tasks.c **** 					/* The stack cannot be used as the TCB was not created.  Free
 785:../freertos/tasks.c **** 					it again. */
 786:../freertos/tasks.c **** 					vPortFree( pxStack );
 787:../freertos/tasks.c **** 				}
 788:../freertos/tasks.c **** 			}
 789:../freertos/tasks.c **** 			else
 790:../freertos/tasks.c **** 			{
 791:../freertos/tasks.c **** 				pxNewTCB = NULL;
 792:../freertos/tasks.c **** 			}
 793:../freertos/tasks.c **** 		}
 794:../freertos/tasks.c **** 		#endif /* portSTACK_GROWTH */
 795:../freertos/tasks.c **** 
 796:../freertos/tasks.c **** 		if( pxNewTCB != NULL )
 797:../freertos/tasks.c **** 		{
 798:../freertos/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consoli
 799:../freertos/tasks.c **** 			{
 800:../freertos/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 801:../freertos/tasks.c **** 				task was created dynamically in case it is later deleted. */
 802:../freertos/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 803:../freertos/tasks.c **** 			}
 804:../freertos/tasks.c **** 			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 805:../freertos/tasks.c **** 
 806:../freertos/tasks.c **** 			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, p
 807:../freertos/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 808:../freertos/tasks.c **** 			xReturn = pdPASS;
 809:../freertos/tasks.c **** 		}
 810:../freertos/tasks.c **** 		else
 811:../freertos/tasks.c **** 		{
 812:../freertos/tasks.c **** 			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 813:../freertos/tasks.c **** 		}
 814:../freertos/tasks.c **** 
 815:../freertos/tasks.c **** 		return xReturn;
 816:../freertos/tasks.c **** 	}
 817:../freertos/tasks.c **** 
 818:../freertos/tasks.c **** #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 819:../freertos/tasks.c **** /*-----------------------------------------------------------*/
 820:../freertos/tasks.c **** 
 821:../freertos/tasks.c **** static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 822:../freertos/tasks.c **** 									const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings an
 823:../freertos/tasks.c **** 									const uint32_t ulStackDepth,
 824:../freertos/tasks.c **** 									void * const pvParameters,
ARM GAS  /tmp/ccGXytas.s 			page 16


 825:../freertos/tasks.c **** 									UBaseType_t uxPriority,
 826:../freertos/tasks.c **** 									TaskHandle_t * const pxCreatedTask,
 827:../freertos/tasks.c **** 									TCB_t *pxNewTCB,
 828:../freertos/tasks.c **** 									const MemoryRegion_t * const xRegions )
 829:../freertos/tasks.c **** {
 830:../freertos/tasks.c **** StackType_t *pxTopOfStack;
 831:../freertos/tasks.c **** UBaseType_t x;
 832:../freertos/tasks.c **** 
 833:../freertos/tasks.c **** 	#if( portUSING_MPU_WRAPPERS == 1 )
 834:../freertos/tasks.c **** 		/* Should the task be created in privileged mode? */
 835:../freertos/tasks.c **** 		BaseType_t xRunPrivileged;
 836:../freertos/tasks.c **** 		if( ( uxPriority & portPRIVILEGE_BIT ) != 0U )
 837:../freertos/tasks.c **** 		{
 838:../freertos/tasks.c **** 			xRunPrivileged = pdTRUE;
 839:../freertos/tasks.c **** 		}
 840:../freertos/tasks.c **** 		else
 841:../freertos/tasks.c **** 		{
 842:../freertos/tasks.c **** 			xRunPrivileged = pdFALSE;
 843:../freertos/tasks.c **** 		}
 844:../freertos/tasks.c **** 		uxPriority &= ~portPRIVILEGE_BIT;
 845:../freertos/tasks.c **** 	#endif /* portUSING_MPU_WRAPPERS == 1 */
 846:../freertos/tasks.c **** 
 847:../freertos/tasks.c **** 	/* Avoid dependency on memset() if it is not required. */
 848:../freertos/tasks.c **** 	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
 849:../freertos/tasks.c **** 	{
 850:../freertos/tasks.c **** 		/* Fill the stack with a known value to assist debugging. */
 851:../freertos/tasks.c **** 		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof(
 852:../freertos/tasks.c **** 	}
 853:../freertos/tasks.c **** 	#endif /* tskSET_NEW_STACKS_TO_KNOWN_VALUE */
 854:../freertos/tasks.c **** 
 855:../freertos/tasks.c **** 	/* Calculate the top of stack address.  This depends on whether the stack
 856:../freertos/tasks.c **** 	grows from high memory to low (as per the 80x86) or vice versa.
 857:../freertos/tasks.c **** 	portSTACK_GROWTH is used to make the result positive or negative as required
 858:../freertos/tasks.c **** 	by the port. */
 859:../freertos/tasks.c **** 	#if( portSTACK_GROWTH < 0 )
 860:../freertos/tasks.c **** 	{
 861:../freertos/tasks.c **** 		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 862:../freertos/tasks.c **** 		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTE
 863:../freertos/tasks.c **** 
 864:../freertos/tasks.c **** 		/* Check the alignment of the calculated top of stack is correct. */
 865:../freertos/tasks.c **** 		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALI
 866:../freertos/tasks.c **** 
 867:../freertos/tasks.c **** 		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
 868:../freertos/tasks.c **** 		{
 869:../freertos/tasks.c **** 			/* Also record the stack's high address, which may assist
 870:../freertos/tasks.c **** 			debugging. */
 871:../freertos/tasks.c **** 			pxNewTCB->pxEndOfStack = pxTopOfStack;
 872:../freertos/tasks.c **** 		}
 873:../freertos/tasks.c **** 		#endif /* configRECORD_STACK_HIGH_ADDRESS */
 874:../freertos/tasks.c **** 	}
 875:../freertos/tasks.c **** 	#else /* portSTACK_GROWTH */
 876:../freertos/tasks.c **** 	{
 877:../freertos/tasks.c **** 		pxTopOfStack = pxNewTCB->pxStack;
 878:../freertos/tasks.c **** 
 879:../freertos/tasks.c **** 		/* Check the alignment of the stack buffer is correct. */
 880:../freertos/tasks.c **** 		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxNewTCB->pxStack & ( portPOINTER_SIZE_TYPE ) portBYT
 881:../freertos/tasks.c **** 
ARM GAS  /tmp/ccGXytas.s 			page 17


 882:../freertos/tasks.c **** 		/* The other extreme of the stack space is required if stack checking is
 883:../freertos/tasks.c **** 		performed. */
 884:../freertos/tasks.c **** 		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 885:../freertos/tasks.c **** 	}
 886:../freertos/tasks.c **** 	#endif /* portSTACK_GROWTH */
 887:../freertos/tasks.c **** 
 888:../freertos/tasks.c **** 	/* Store the task name in the TCB. */
 889:../freertos/tasks.c **** 	if( pcName != NULL )
 890:../freertos/tasks.c **** 	{
 891:../freertos/tasks.c **** 		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 892:../freertos/tasks.c **** 		{
 893:../freertos/tasks.c **** 			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 894:../freertos/tasks.c **** 
 895:../freertos/tasks.c **** 			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
 896:../freertos/tasks.c **** 			configMAX_TASK_NAME_LEN characters just in case the memory after the
 897:../freertos/tasks.c **** 			string is not accessible (extremely unlikely). */
 898:../freertos/tasks.c **** 			if( pcName[ x ] == ( char ) 0x00 )
 899:../freertos/tasks.c **** 			{
 900:../freertos/tasks.c **** 				break;
 901:../freertos/tasks.c **** 			}
 902:../freertos/tasks.c **** 			else
 903:../freertos/tasks.c **** 			{
 904:../freertos/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
 905:../freertos/tasks.c **** 			}
 906:../freertos/tasks.c **** 		}
 907:../freertos/tasks.c **** 
 908:../freertos/tasks.c **** 		/* Ensure the name string is terminated in the case that the string length
 909:../freertos/tasks.c **** 		was greater or equal to configMAX_TASK_NAME_LEN. */
 910:../freertos/tasks.c **** 		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 911:../freertos/tasks.c **** 	}
 912:../freertos/tasks.c **** 	else
 913:../freertos/tasks.c **** 	{
 914:../freertos/tasks.c **** 		/* The task has not been given a name, so just ensure there is a NULL
 915:../freertos/tasks.c **** 		terminator when it is read out. */
 916:../freertos/tasks.c **** 		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 917:../freertos/tasks.c **** 	}
 918:../freertos/tasks.c **** 
 919:../freertos/tasks.c **** 	/* This is used as an array index so must ensure it's not too large.  First
 920:../freertos/tasks.c **** 	remove the privilege bit if one is present. */
 921:../freertos/tasks.c **** 	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 922:../freertos/tasks.c **** 	{
 923:../freertos/tasks.c **** 		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 924:../freertos/tasks.c **** 	}
 925:../freertos/tasks.c **** 	else
 926:../freertos/tasks.c **** 	{
 927:../freertos/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
 928:../freertos/tasks.c **** 	}
 929:../freertos/tasks.c **** 
 930:../freertos/tasks.c **** 	pxNewTCB->uxPriority = uxPriority;
 931:../freertos/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 932:../freertos/tasks.c **** 	{
 933:../freertos/tasks.c **** 		pxNewTCB->uxBasePriority = uxPriority;
 934:../freertos/tasks.c **** 		pxNewTCB->uxMutexesHeld = 0;
 935:../freertos/tasks.c **** 	}
 936:../freertos/tasks.c **** 	#endif /* configUSE_MUTEXES */
 937:../freertos/tasks.c **** 
 938:../freertos/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
ARM GAS  /tmp/ccGXytas.s 			page 18


 939:../freertos/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 940:../freertos/tasks.c **** 
 941:../freertos/tasks.c **** 	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
 942:../freertos/tasks.c **** 	back to	the containing TCB from a generic item in a list. */
 943:../freertos/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 944:../freertos/tasks.c **** 
 945:../freertos/tasks.c **** 	/* Event lists are always in priority order. */
 946:../freertos/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( Ti
 947:../freertos/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 948:../freertos/tasks.c **** 
 949:../freertos/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
 950:../freertos/tasks.c **** 	{
 951:../freertos/tasks.c **** 		pxNewTCB->uxCriticalNesting = ( UBaseType_t ) 0U;
 952:../freertos/tasks.c **** 	}
 953:../freertos/tasks.c **** 	#endif /* portCRITICAL_NESTING_IN_TCB */
 954:../freertos/tasks.c **** 
 955:../freertos/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
 956:../freertos/tasks.c **** 	{
 957:../freertos/tasks.c **** 		pxNewTCB->pxTaskTag = NULL;
 958:../freertos/tasks.c **** 	}
 959:../freertos/tasks.c **** 	#endif /* configUSE_APPLICATION_TASK_TAG */
 960:../freertos/tasks.c **** 
 961:../freertos/tasks.c **** 	#if ( configGENERATE_RUN_TIME_STATS == 1 )
 962:../freertos/tasks.c **** 	{
 963:../freertos/tasks.c **** 		pxNewTCB->ulRunTimeCounter = 0UL;
 964:../freertos/tasks.c **** 	}
 965:../freertos/tasks.c **** 	#endif /* configGENERATE_RUN_TIME_STATS */
 966:../freertos/tasks.c **** 
 967:../freertos/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
 968:../freertos/tasks.c **** 	{
 969:../freertos/tasks.c **** 		vPortStoreTaskMPUSettings( &( pxNewTCB->xMPUSettings ), xRegions, pxNewTCB->pxStack, ulStackDepth
 970:../freertos/tasks.c **** 	}
 971:../freertos/tasks.c **** 	#else
 972:../freertos/tasks.c **** 	{
 973:../freertos/tasks.c **** 		/* Avoid compiler warning about unreferenced parameter. */
 974:../freertos/tasks.c **** 		( void ) xRegions;
 975:../freertos/tasks.c **** 	}
 976:../freertos/tasks.c **** 	#endif
 977:../freertos/tasks.c **** 
 978:../freertos/tasks.c **** 	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
 979:../freertos/tasks.c **** 	{
 980:../freertos/tasks.c **** 		for( x = 0; x < ( UBaseType_t ) configNUM_THREAD_LOCAL_STORAGE_POINTERS; x++ )
 981:../freertos/tasks.c **** 		{
 982:../freertos/tasks.c **** 			pxNewTCB->pvThreadLocalStoragePointers[ x ] = NULL;
 983:../freertos/tasks.c **** 		}
 984:../freertos/tasks.c **** 	}
 985:../freertos/tasks.c **** 	#endif
 986:../freertos/tasks.c **** 
 987:../freertos/tasks.c **** 	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
 988:../freertos/tasks.c **** 	{
 989:../freertos/tasks.c **** 		pxNewTCB->ulNotifiedValue = 0;
 990:../freertos/tasks.c **** 		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 991:../freertos/tasks.c **** 	}
 992:../freertos/tasks.c **** 	#endif
 993:../freertos/tasks.c **** 
 994:../freertos/tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
 995:../freertos/tasks.c **** 	{
ARM GAS  /tmp/ccGXytas.s 			page 19


 996:../freertos/tasks.c **** 		/* Initialise this task's Newlib reent structure. */
 997:../freertos/tasks.c **** 		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 998:../freertos/tasks.c **** 	}
 999:../freertos/tasks.c **** 	#endif
1000:../freertos/tasks.c **** 
1001:../freertos/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
1002:../freertos/tasks.c **** 	{
1003:../freertos/tasks.c **** 		pxNewTCB->ucDelayAborted = pdFALSE;
1004:../freertos/tasks.c **** 	}
1005:../freertos/tasks.c **** 	#endif
1006:../freertos/tasks.c **** 
1007:../freertos/tasks.c **** 	/* Initialize the TCB stack to look as if the task was already running,
1008:../freertos/tasks.c **** 	but had been interrupted by the scheduler.  The return address is set
1009:../freertos/tasks.c **** 	to the start of the task function. Once the stack has been initialised
1010:../freertos/tasks.c **** 	the top of stack variable is updated. */
1011:../freertos/tasks.c **** 	#if( portUSING_MPU_WRAPPERS == 1 )
1012:../freertos/tasks.c **** 	{
1013:../freertos/tasks.c **** 		/* If the port has capability to detect stack overflow,
1014:../freertos/tasks.c **** 		pass the stack end address to the stack initialization
1015:../freertos/tasks.c **** 		function as well. */
1016:../freertos/tasks.c **** 		#if( portHAS_STACK_OVERFLOW_CHECKING == 1 )
1017:../freertos/tasks.c **** 		{
1018:../freertos/tasks.c **** 			#if( portSTACK_GROWTH < 0 )
1019:../freertos/tasks.c **** 			{
1020:../freertos/tasks.c **** 				pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, pxTaskCode, pv
1021:../freertos/tasks.c **** 			}
1022:../freertos/tasks.c **** 			#else /* portSTACK_GROWTH */
1023:../freertos/tasks.c **** 			{
1024:../freertos/tasks.c **** 				pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxEndOfStack, pxTaskCod
1025:../freertos/tasks.c **** 			}
1026:../freertos/tasks.c **** 			#endif /* portSTACK_GROWTH */
1027:../freertos/tasks.c **** 		}
1028:../freertos/tasks.c **** 		#else /* portHAS_STACK_OVERFLOW_CHECKING */
1029:../freertos/tasks.c **** 		{
1030:../freertos/tasks.c **** 			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPriv
1031:../freertos/tasks.c **** 		}
1032:../freertos/tasks.c **** 		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
1033:../freertos/tasks.c **** 	}
1034:../freertos/tasks.c **** 	#else /* portUSING_MPU_WRAPPERS */
1035:../freertos/tasks.c **** 	{
1036:../freertos/tasks.c **** 		/* If the port has capability to detect stack overflow,
1037:../freertos/tasks.c **** 		pass the stack end address to the stack initialization
1038:../freertos/tasks.c **** 		function as well. */
1039:../freertos/tasks.c **** 		#if( portHAS_STACK_OVERFLOW_CHECKING == 1 )
1040:../freertos/tasks.c **** 		{
1041:../freertos/tasks.c **** 			#if( portSTACK_GROWTH < 0 )
1042:../freertos/tasks.c **** 			{
1043:../freertos/tasks.c **** 				pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, pxTaskCode, pv
1044:../freertos/tasks.c **** 			}
1045:../freertos/tasks.c **** 			#else /* portSTACK_GROWTH */
1046:../freertos/tasks.c **** 			{
1047:../freertos/tasks.c **** 				pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxEndOfStack, pxTaskCod
1048:../freertos/tasks.c **** 			}
1049:../freertos/tasks.c **** 			#endif /* portSTACK_GROWTH */
1050:../freertos/tasks.c **** 		}
1051:../freertos/tasks.c **** 		#else /* portHAS_STACK_OVERFLOW_CHECKING */
1052:../freertos/tasks.c **** 		{
ARM GAS  /tmp/ccGXytas.s 			page 20


1053:../freertos/tasks.c **** 			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
1054:../freertos/tasks.c **** 		}
1055:../freertos/tasks.c **** 		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
1056:../freertos/tasks.c **** 	}
1057:../freertos/tasks.c **** 	#endif /* portUSING_MPU_WRAPPERS */
1058:../freertos/tasks.c **** 
1059:../freertos/tasks.c **** 	if( pxCreatedTask != NULL )
1060:../freertos/tasks.c **** 	{
1061:../freertos/tasks.c **** 		/* Pass the handle out in an anonymous way.  The handle can be used to
1062:../freertos/tasks.c **** 		change the created task's priority, delete the created task, etc.*/
1063:../freertos/tasks.c **** 		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
1064:../freertos/tasks.c **** 	}
1065:../freertos/tasks.c **** 	else
1066:../freertos/tasks.c **** 	{
1067:../freertos/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
1068:../freertos/tasks.c **** 	}
1069:../freertos/tasks.c **** }
1070:../freertos/tasks.c **** /*-----------------------------------------------------------*/
1071:../freertos/tasks.c **** 
1072:../freertos/tasks.c **** static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
1073:../freertos/tasks.c **** {
1074:../freertos/tasks.c **** 	/* Ensure interrupts don't access the task lists while the lists are being
1075:../freertos/tasks.c **** 	updated. */
1076:../freertos/tasks.c **** 	taskENTER_CRITICAL();
1077:../freertos/tasks.c **** 	{
1078:../freertos/tasks.c **** 		uxCurrentNumberOfTasks++;
1079:../freertos/tasks.c **** 		if( pxCurrentTCB == NULL )
1080:../freertos/tasks.c **** 		{
1081:../freertos/tasks.c **** 			/* There are no other tasks, or all the other tasks are in
1082:../freertos/tasks.c **** 			the suspended state - make this the current task. */
1083:../freertos/tasks.c **** 			pxCurrentTCB = pxNewTCB;
1084:../freertos/tasks.c **** 
1085:../freertos/tasks.c **** 			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
1086:../freertos/tasks.c **** 			{
1087:../freertos/tasks.c **** 				/* This is the first task to be created so do the preliminary
1088:../freertos/tasks.c **** 				initialisation required.  We will not recover if this call
1089:../freertos/tasks.c **** 				fails, but we will report the failure. */
1090:../freertos/tasks.c **** 				prvInitialiseTaskLists();
1091:../freertos/tasks.c **** 			}
1092:../freertos/tasks.c **** 			else
1093:../freertos/tasks.c **** 			{
1094:../freertos/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1095:../freertos/tasks.c **** 			}
1096:../freertos/tasks.c **** 		}
1097:../freertos/tasks.c **** 		else
1098:../freertos/tasks.c **** 		{
1099:../freertos/tasks.c **** 			/* If the scheduler is not already running, make this task the
1100:../freertos/tasks.c **** 			current task if it is the highest priority task to be created
1101:../freertos/tasks.c **** 			so far. */
1102:../freertos/tasks.c **** 			if( xSchedulerRunning == pdFALSE )
1103:../freertos/tasks.c **** 			{
1104:../freertos/tasks.c **** 				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
1105:../freertos/tasks.c **** 				{
1106:../freertos/tasks.c **** 					pxCurrentTCB = pxNewTCB;
1107:../freertos/tasks.c **** 				}
1108:../freertos/tasks.c **** 				else
1109:../freertos/tasks.c **** 				{
ARM GAS  /tmp/ccGXytas.s 			page 21


1110:../freertos/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1111:../freertos/tasks.c **** 				}
1112:../freertos/tasks.c **** 			}
1113:../freertos/tasks.c **** 			else
1114:../freertos/tasks.c **** 			{
1115:../freertos/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1116:../freertos/tasks.c **** 			}
1117:../freertos/tasks.c **** 		}
1118:../freertos/tasks.c **** 
1119:../freertos/tasks.c **** 		uxTaskNumber++;
1120:../freertos/tasks.c **** 
1121:../freertos/tasks.c **** 		#if ( configUSE_TRACE_FACILITY == 1 )
1122:../freertos/tasks.c **** 		{
1123:../freertos/tasks.c **** 			/* Add a counter into the TCB for tracing only. */
1124:../freertos/tasks.c **** 			pxNewTCB->uxTCBNumber = uxTaskNumber;
1125:../freertos/tasks.c **** 		}
1126:../freertos/tasks.c **** 		#endif /* configUSE_TRACE_FACILITY */
1127:../freertos/tasks.c **** 		traceTASK_CREATE( pxNewTCB );
1128:../freertos/tasks.c **** 
1129:../freertos/tasks.c **** 		prvAddTaskToReadyList( pxNewTCB );
1130:../freertos/tasks.c **** 
1131:../freertos/tasks.c **** 		portSETUP_TCB( pxNewTCB );
1132:../freertos/tasks.c **** 	}
1133:../freertos/tasks.c **** 	taskEXIT_CRITICAL();
1134:../freertos/tasks.c **** 
1135:../freertos/tasks.c **** 	if( xSchedulerRunning != pdFALSE )
1136:../freertos/tasks.c **** 	{
1137:../freertos/tasks.c **** 		/* If the created task is of a higher priority than the current task
1138:../freertos/tasks.c **** 		then it should run now. */
1139:../freertos/tasks.c **** 		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
1140:../freertos/tasks.c **** 		{
1141:../freertos/tasks.c **** 			taskYIELD_IF_USING_PREEMPTION();
1142:../freertos/tasks.c **** 		}
1143:../freertos/tasks.c **** 		else
1144:../freertos/tasks.c **** 		{
1145:../freertos/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1146:../freertos/tasks.c **** 		}
1147:../freertos/tasks.c **** 	}
1148:../freertos/tasks.c **** 	else
1149:../freertos/tasks.c **** 	{
1150:../freertos/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
1151:../freertos/tasks.c **** 	}
1152:../freertos/tasks.c **** }
1153:../freertos/tasks.c **** /*-----------------------------------------------------------*/
1154:../freertos/tasks.c **** 
1155:../freertos/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
1156:../freertos/tasks.c **** 
1157:../freertos/tasks.c **** 	void vTaskDelete( TaskHandle_t xTaskToDelete )
1158:../freertos/tasks.c **** 	{
1159:../freertos/tasks.c **** 	TCB_t *pxTCB;
1160:../freertos/tasks.c **** 
1161:../freertos/tasks.c **** 		taskENTER_CRITICAL();
1162:../freertos/tasks.c **** 		{
1163:../freertos/tasks.c **** 			/* If null is passed in here then it is the calling task that is
1164:../freertos/tasks.c **** 			being deleted. */
1165:../freertos/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
1166:../freertos/tasks.c **** 
ARM GAS  /tmp/ccGXytas.s 			page 22


1167:../freertos/tasks.c **** 			/* Remove task from the ready list. */
1168:../freertos/tasks.c **** 			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1169:../freertos/tasks.c **** 			{
1170:../freertos/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1171:../freertos/tasks.c **** 			}
1172:../freertos/tasks.c **** 			else
1173:../freertos/tasks.c **** 			{
1174:../freertos/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1175:../freertos/tasks.c **** 			}
1176:../freertos/tasks.c **** 
1177:../freertos/tasks.c **** 			/* Is the task waiting on an event also? */
1178:../freertos/tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1179:../freertos/tasks.c **** 			{
1180:../freertos/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1181:../freertos/tasks.c **** 			}
1182:../freertos/tasks.c **** 			else
1183:../freertos/tasks.c **** 			{
1184:../freertos/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1185:../freertos/tasks.c **** 			}
1186:../freertos/tasks.c **** 
1187:../freertos/tasks.c **** 			/* Increment the uxTaskNumber also so kernel aware debuggers can
1188:../freertos/tasks.c **** 			detect that the task lists need re-generating.  This is done before
1189:../freertos/tasks.c **** 			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
1190:../freertos/tasks.c **** 			not return. */
1191:../freertos/tasks.c **** 			uxTaskNumber++;
1192:../freertos/tasks.c **** 
1193:../freertos/tasks.c **** 			if( pxTCB == pxCurrentTCB )
1194:../freertos/tasks.c **** 			{
1195:../freertos/tasks.c **** 				/* A task is deleting itself.  This cannot complete within the
1196:../freertos/tasks.c **** 				task itself, as a context switch to another task is required.
1197:../freertos/tasks.c **** 				Place the task in the termination list.  The idle task will
1198:../freertos/tasks.c **** 				check the termination list and free up any memory allocated by
1199:../freertos/tasks.c **** 				the scheduler for the TCB and stack of the deleted task. */
1200:../freertos/tasks.c **** 				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
1201:../freertos/tasks.c **** 
1202:../freertos/tasks.c **** 				/* Increment the ucTasksDeleted variable so the idle task knows
1203:../freertos/tasks.c **** 				there is a task that has been deleted and that it should therefore
1204:../freertos/tasks.c **** 				check the xTasksWaitingTermination list. */
1205:../freertos/tasks.c **** 				++uxDeletedTasksWaitingCleanUp;
1206:../freertos/tasks.c **** 
1207:../freertos/tasks.c **** 				/* The pre-delete hook is primarily for the Windows simulator,
1208:../freertos/tasks.c **** 				in which Windows specific clean up operations are performed,
1209:../freertos/tasks.c **** 				after which it is not possible to yield away from this task -
1210:../freertos/tasks.c **** 				hence xYieldPending is used to latch that a context switch is
1211:../freertos/tasks.c **** 				required. */
1212:../freertos/tasks.c **** 				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
1213:../freertos/tasks.c **** 			}
1214:../freertos/tasks.c **** 			else
1215:../freertos/tasks.c **** 			{
1216:../freertos/tasks.c **** 				--uxCurrentNumberOfTasks;
1217:../freertos/tasks.c **** 				prvDeleteTCB( pxTCB );
1218:../freertos/tasks.c **** 
1219:../freertos/tasks.c **** 				/* Reset the next expected unblock time in case it referred to
1220:../freertos/tasks.c **** 				the task that has just been deleted. */
1221:../freertos/tasks.c **** 				prvResetNextTaskUnblockTime();
1222:../freertos/tasks.c **** 			}
1223:../freertos/tasks.c **** 
ARM GAS  /tmp/ccGXytas.s 			page 23


1224:../freertos/tasks.c **** 			traceTASK_DELETE( pxTCB );
1225:../freertos/tasks.c **** 		}
1226:../freertos/tasks.c **** 		taskEXIT_CRITICAL();
1227:../freertos/tasks.c **** 
1228:../freertos/tasks.c **** 		/* Force a reschedule if it is the currently running task that has just
1229:../freertos/tasks.c **** 		been deleted. */
1230:../freertos/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
1231:../freertos/tasks.c **** 		{
1232:../freertos/tasks.c **** 			if( pxTCB == pxCurrentTCB )
1233:../freertos/tasks.c **** 			{
1234:../freertos/tasks.c **** 				configASSERT( uxSchedulerSuspended == 0 );
1235:../freertos/tasks.c **** 				portYIELD_WITHIN_API();
1236:../freertos/tasks.c **** 			}
1237:../freertos/tasks.c **** 			else
1238:../freertos/tasks.c **** 			{
1239:../freertos/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1240:../freertos/tasks.c **** 			}
1241:../freertos/tasks.c **** 		}
1242:../freertos/tasks.c **** 	}
1243:../freertos/tasks.c **** 
1244:../freertos/tasks.c **** #endif /* INCLUDE_vTaskDelete */
1245:../freertos/tasks.c **** /*-----------------------------------------------------------*/
1246:../freertos/tasks.c **** 
1247:../freertos/tasks.c **** #if ( INCLUDE_vTaskDelayUntil == 1 )
1248:../freertos/tasks.c **** 
1249:../freertos/tasks.c **** 	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
1250:../freertos/tasks.c **** 	{
1251:../freertos/tasks.c **** 	TickType_t xTimeToWake;
1252:../freertos/tasks.c **** 	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
1253:../freertos/tasks.c **** 
1254:../freertos/tasks.c **** 		configASSERT( pxPreviousWakeTime );
1255:../freertos/tasks.c **** 		configASSERT( ( xTimeIncrement > 0U ) );
1256:../freertos/tasks.c **** 		configASSERT( uxSchedulerSuspended == 0 );
1257:../freertos/tasks.c **** 
1258:../freertos/tasks.c **** 		vTaskSuspendAll();
1259:../freertos/tasks.c **** 		{
1260:../freertos/tasks.c **** 			/* Minor optimisation.  The tick count cannot change in this
1261:../freertos/tasks.c **** 			block. */
1262:../freertos/tasks.c **** 			const TickType_t xConstTickCount = xTickCount;
1263:../freertos/tasks.c **** 
1264:../freertos/tasks.c **** 			/* Generate the tick time at which the task wants to wake. */
1265:../freertos/tasks.c **** 			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
1266:../freertos/tasks.c **** 
1267:../freertos/tasks.c **** 			if( xConstTickCount < *pxPreviousWakeTime )
1268:../freertos/tasks.c **** 			{
1269:../freertos/tasks.c **** 				/* The tick count has overflowed since this function was
1270:../freertos/tasks.c **** 				lasted called.  In this case the only time we should ever
1271:../freertos/tasks.c **** 				actually delay is if the wake time has also	overflowed,
1272:../freertos/tasks.c **** 				and the wake time is greater than the tick time.  When this
1273:../freertos/tasks.c **** 				is the case it is as if neither time had overflowed. */
1274:../freertos/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
1275:../freertos/tasks.c **** 				{
1276:../freertos/tasks.c **** 					xShouldDelay = pdTRUE;
1277:../freertos/tasks.c **** 				}
1278:../freertos/tasks.c **** 				else
1279:../freertos/tasks.c **** 				{
1280:../freertos/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
ARM GAS  /tmp/ccGXytas.s 			page 24


1281:../freertos/tasks.c **** 				}
1282:../freertos/tasks.c **** 			}
1283:../freertos/tasks.c **** 			else
1284:../freertos/tasks.c **** 			{
1285:../freertos/tasks.c **** 				/* The tick time has not overflowed.  In this case we will
1286:../freertos/tasks.c **** 				delay if either the wake time has overflowed, and/or the
1287:../freertos/tasks.c **** 				tick time is less than the wake time. */
1288:../freertos/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
1289:../freertos/tasks.c **** 				{
1290:../freertos/tasks.c **** 					xShouldDelay = pdTRUE;
1291:../freertos/tasks.c **** 				}
1292:../freertos/tasks.c **** 				else
1293:../freertos/tasks.c **** 				{
1294:../freertos/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1295:../freertos/tasks.c **** 				}
1296:../freertos/tasks.c **** 			}
1297:../freertos/tasks.c **** 
1298:../freertos/tasks.c **** 			/* Update the wake time ready for the next call. */
1299:../freertos/tasks.c **** 			*pxPreviousWakeTime = xTimeToWake;
1300:../freertos/tasks.c **** 
1301:../freertos/tasks.c **** 			if( xShouldDelay != pdFALSE )
1302:../freertos/tasks.c **** 			{
1303:../freertos/tasks.c **** 				traceTASK_DELAY_UNTIL( xTimeToWake );
1304:../freertos/tasks.c **** 
1305:../freertos/tasks.c **** 				/* prvAddCurrentTaskToDelayedList() needs the block time, not
1306:../freertos/tasks.c **** 				the time to wake, so subtract the current tick count. */
1307:../freertos/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
1308:../freertos/tasks.c **** 			}
1309:../freertos/tasks.c **** 			else
1310:../freertos/tasks.c **** 			{
1311:../freertos/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1312:../freertos/tasks.c **** 			}
1313:../freertos/tasks.c **** 		}
1314:../freertos/tasks.c **** 		xAlreadyYielded = xTaskResumeAll();
1315:../freertos/tasks.c **** 
1316:../freertos/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
1317:../freertos/tasks.c **** 		have put ourselves to sleep. */
1318:../freertos/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
1319:../freertos/tasks.c **** 		{
1320:../freertos/tasks.c **** 			portYIELD_WITHIN_API();
1321:../freertos/tasks.c **** 		}
1322:../freertos/tasks.c **** 		else
1323:../freertos/tasks.c **** 		{
1324:../freertos/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1325:../freertos/tasks.c **** 		}
1326:../freertos/tasks.c **** 	}
1327:../freertos/tasks.c **** 
1328:../freertos/tasks.c **** #endif /* INCLUDE_vTaskDelayUntil */
1329:../freertos/tasks.c **** /*-----------------------------------------------------------*/
1330:../freertos/tasks.c **** 
1331:../freertos/tasks.c **** #if ( INCLUDE_vTaskDelay == 1 )
1332:../freertos/tasks.c **** 
1333:../freertos/tasks.c **** 	void vTaskDelay( const TickType_t xTicksToDelay )
1334:../freertos/tasks.c **** 	{
1335:../freertos/tasks.c **** 	BaseType_t xAlreadyYielded = pdFALSE;
1336:../freertos/tasks.c **** 
1337:../freertos/tasks.c **** 		/* A delay time of zero just forces a reschedule. */
ARM GAS  /tmp/ccGXytas.s 			page 25


1338:../freertos/tasks.c **** 		if( xTicksToDelay > ( TickType_t ) 0U )
1339:../freertos/tasks.c **** 		{
1340:../freertos/tasks.c **** 			configASSERT( uxSchedulerSuspended == 0 );
1341:../freertos/tasks.c **** 			vTaskSuspendAll();
1342:../freertos/tasks.c **** 			{
1343:../freertos/tasks.c **** 				traceTASK_DELAY();
1344:../freertos/tasks.c **** 
1345:../freertos/tasks.c **** 				/* A task that is removed from the event list while the
1346:../freertos/tasks.c **** 				scheduler is suspended will not get placed in the ready
1347:../freertos/tasks.c **** 				list or removed from the blocked list until the scheduler
1348:../freertos/tasks.c **** 				is resumed.
1349:../freertos/tasks.c **** 
1350:../freertos/tasks.c **** 				This task cannot be in an event list as it is the currently
1351:../freertos/tasks.c **** 				executing task. */
1352:../freertos/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
1353:../freertos/tasks.c **** 			}
1354:../freertos/tasks.c **** 			xAlreadyYielded = xTaskResumeAll();
1355:../freertos/tasks.c **** 		}
1356:../freertos/tasks.c **** 		else
1357:../freertos/tasks.c **** 		{
1358:../freertos/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1359:../freertos/tasks.c **** 		}
1360:../freertos/tasks.c **** 
1361:../freertos/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
1362:../freertos/tasks.c **** 		have put ourselves to sleep. */
1363:../freertos/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
1364:../freertos/tasks.c **** 		{
1365:../freertos/tasks.c **** 			portYIELD_WITHIN_API();
1366:../freertos/tasks.c **** 		}
1367:../freertos/tasks.c **** 		else
1368:../freertos/tasks.c **** 		{
1369:../freertos/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1370:../freertos/tasks.c **** 		}
1371:../freertos/tasks.c **** 	}
1372:../freertos/tasks.c **** 
1373:../freertos/tasks.c **** #endif /* INCLUDE_vTaskDelay */
1374:../freertos/tasks.c **** /*-----------------------------------------------------------*/
1375:../freertos/tasks.c **** 
1376:../freertos/tasks.c **** #if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDel
1377:../freertos/tasks.c **** 
1378:../freertos/tasks.c **** 	eTaskState eTaskGetState( TaskHandle_t xTask )
1379:../freertos/tasks.c **** 	{
1380:../freertos/tasks.c **** 	eTaskState eReturn;
1381:../freertos/tasks.c **** 	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
1382:../freertos/tasks.c **** 	const TCB_t * const pxTCB = xTask;
1383:../freertos/tasks.c **** 
1384:../freertos/tasks.c **** 		configASSERT( pxTCB );
1385:../freertos/tasks.c **** 
1386:../freertos/tasks.c **** 		if( pxTCB == pxCurrentTCB )
1387:../freertos/tasks.c **** 		{
1388:../freertos/tasks.c **** 			/* The task calling this function is querying its own state. */
1389:../freertos/tasks.c **** 			eReturn = eRunning;
1390:../freertos/tasks.c **** 		}
1391:../freertos/tasks.c **** 		else
1392:../freertos/tasks.c **** 		{
1393:../freertos/tasks.c **** 			taskENTER_CRITICAL();
1394:../freertos/tasks.c **** 			{
ARM GAS  /tmp/ccGXytas.s 			page 26


1395:../freertos/tasks.c **** 				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
1396:../freertos/tasks.c **** 				pxDelayedList = pxDelayedTaskList;
1397:../freertos/tasks.c **** 				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
1398:../freertos/tasks.c **** 			}
1399:../freertos/tasks.c **** 			taskEXIT_CRITICAL();
1400:../freertos/tasks.c **** 
1401:../freertos/tasks.c **** 			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
1402:../freertos/tasks.c **** 			{
1403:../freertos/tasks.c **** 				/* The task being queried is referenced from one of the Blocked
1404:../freertos/tasks.c **** 				lists. */
1405:../freertos/tasks.c **** 				eReturn = eBlocked;
1406:../freertos/tasks.c **** 			}
1407:../freertos/tasks.c **** 
1408:../freertos/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
1409:../freertos/tasks.c **** 				else if( pxStateList == &xSuspendedTaskList )
1410:../freertos/tasks.c **** 				{
1411:../freertos/tasks.c **** 					/* The task being queried is referenced from the suspended
1412:../freertos/tasks.c **** 					list.  Is it genuinely suspended or is it blocked
1413:../freertos/tasks.c **** 					indefinitely? */
1414:../freertos/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
1415:../freertos/tasks.c **** 					{
1416:../freertos/tasks.c **** 						#if( configUSE_TASK_NOTIFICATIONS == 1 )
1417:../freertos/tasks.c **** 						{
1418:../freertos/tasks.c **** 							/* The task does not appear on the event list item of
1419:../freertos/tasks.c **** 							and of the RTOS objects, but could still be in the
1420:../freertos/tasks.c **** 							blocked state if it is waiting on its notification
1421:../freertos/tasks.c **** 							rather than waiting on an object. */
1422:../freertos/tasks.c **** 							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
1423:../freertos/tasks.c **** 							{
1424:../freertos/tasks.c **** 								eReturn = eBlocked;
1425:../freertos/tasks.c **** 							}
1426:../freertos/tasks.c **** 							else
1427:../freertos/tasks.c **** 							{
1428:../freertos/tasks.c **** 								eReturn = eSuspended;
1429:../freertos/tasks.c **** 							}
1430:../freertos/tasks.c **** 						}
1431:../freertos/tasks.c **** 						#else
1432:../freertos/tasks.c **** 						{
1433:../freertos/tasks.c **** 							eReturn = eSuspended;
1434:../freertos/tasks.c **** 						}
1435:../freertos/tasks.c **** 						#endif
1436:../freertos/tasks.c **** 					}
1437:../freertos/tasks.c **** 					else
1438:../freertos/tasks.c **** 					{
1439:../freertos/tasks.c **** 						eReturn = eBlocked;
1440:../freertos/tasks.c **** 					}
1441:../freertos/tasks.c **** 				}
1442:../freertos/tasks.c **** 			#endif
1443:../freertos/tasks.c **** 
1444:../freertos/tasks.c **** 			#if ( INCLUDE_vTaskDelete == 1 )
1445:../freertos/tasks.c **** 				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
1446:../freertos/tasks.c **** 				{
1447:../freertos/tasks.c **** 					/* The task being queried is referenced from the deleted
1448:../freertos/tasks.c **** 					tasks list, or it is not referenced from any lists at
1449:../freertos/tasks.c **** 					all. */
1450:../freertos/tasks.c **** 					eReturn = eDeleted;
1451:../freertos/tasks.c **** 				}
ARM GAS  /tmp/ccGXytas.s 			page 27


1452:../freertos/tasks.c **** 			#endif
1453:../freertos/tasks.c **** 
1454:../freertos/tasks.c **** 			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
1455:../freertos/tasks.c **** 			{
1456:../freertos/tasks.c **** 				/* If the task is not in any other state, it must be in the
1457:../freertos/tasks.c **** 				Ready (including pending ready) state. */
1458:../freertos/tasks.c **** 				eReturn = eReady;
1459:../freertos/tasks.c **** 			}
1460:../freertos/tasks.c **** 		}
1461:../freertos/tasks.c **** 
1462:../freertos/tasks.c **** 		return eReturn;
1463:../freertos/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
1464:../freertos/tasks.c **** 
1465:../freertos/tasks.c **** #endif /* INCLUDE_eTaskGetState */
1466:../freertos/tasks.c **** /*-----------------------------------------------------------*/
1467:../freertos/tasks.c **** 
1468:../freertos/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1469:../freertos/tasks.c **** 
1470:../freertos/tasks.c **** 	UBaseType_t uxTaskPriorityGet( const TaskHandle_t xTask )
1471:../freertos/tasks.c **** 	{
1472:../freertos/tasks.c **** 	TCB_t const *pxTCB;
1473:../freertos/tasks.c **** 	UBaseType_t uxReturn;
1474:../freertos/tasks.c **** 
1475:../freertos/tasks.c **** 		taskENTER_CRITICAL();
1476:../freertos/tasks.c **** 		{
1477:../freertos/tasks.c **** 			/* If null is passed in here then it is the priority of the task
1478:../freertos/tasks.c **** 			that called uxTaskPriorityGet() that is being queried. */
1479:../freertos/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
1480:../freertos/tasks.c **** 			uxReturn = pxTCB->uxPriority;
1481:../freertos/tasks.c **** 		}
1482:../freertos/tasks.c **** 		taskEXIT_CRITICAL();
1483:../freertos/tasks.c **** 
1484:../freertos/tasks.c **** 		return uxReturn;
1485:../freertos/tasks.c **** 	}
1486:../freertos/tasks.c **** 
1487:../freertos/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1488:../freertos/tasks.c **** /*-----------------------------------------------------------*/
1489:../freertos/tasks.c **** 
1490:../freertos/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1491:../freertos/tasks.c **** 
1492:../freertos/tasks.c **** 	UBaseType_t uxTaskPriorityGetFromISR( const TaskHandle_t xTask )
1493:../freertos/tasks.c **** 	{
1494:../freertos/tasks.c **** 	TCB_t const *pxTCB;
1495:../freertos/tasks.c **** 	UBaseType_t uxReturn, uxSavedInterruptState;
1496:../freertos/tasks.c **** 
1497:../freertos/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
1498:../freertos/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
1499:../freertos/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
1500:../freertos/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
1501:../freertos/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1502:../freertos/tasks.c **** 		is defined in FreeRTOSConfig.h then
1503:../freertos/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1504:../freertos/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
1505:../freertos/tasks.c **** 		been assigned a priority above the configured maximum system call
1506:../freertos/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
1507:../freertos/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
1508:../freertos/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
ARM GAS  /tmp/ccGXytas.s 			page 28


1509:../freertos/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
1510:../freertos/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
1511:../freertos/tasks.c **** 		provided on the following link:
1512:../freertos/tasks.c **** 		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
1513:../freertos/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1514:../freertos/tasks.c **** 
1515:../freertos/tasks.c **** 		uxSavedInterruptState = portSET_INTERRUPT_MASK_FROM_ISR();
1516:../freertos/tasks.c **** 		{
1517:../freertos/tasks.c **** 			/* If null is passed in here then it is the priority of the calling
1518:../freertos/tasks.c **** 			task that is being queried. */
1519:../freertos/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
1520:../freertos/tasks.c **** 			uxReturn = pxTCB->uxPriority;
1521:../freertos/tasks.c **** 		}
1522:../freertos/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptState );
1523:../freertos/tasks.c **** 
1524:../freertos/tasks.c **** 		return uxReturn;
1525:../freertos/tasks.c **** 	}
1526:../freertos/tasks.c **** 
1527:../freertos/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1528:../freertos/tasks.c **** /*-----------------------------------------------------------*/
1529:../freertos/tasks.c **** 
1530:../freertos/tasks.c **** #if ( INCLUDE_vTaskPrioritySet == 1 )
1531:../freertos/tasks.c **** 
1532:../freertos/tasks.c **** 	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
1533:../freertos/tasks.c **** 	{
1534:../freertos/tasks.c **** 	TCB_t *pxTCB;
1535:../freertos/tasks.c **** 	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
1536:../freertos/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
1537:../freertos/tasks.c **** 
1538:../freertos/tasks.c **** 		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
1539:../freertos/tasks.c **** 
1540:../freertos/tasks.c **** 		/* Ensure the new priority is valid. */
1541:../freertos/tasks.c **** 		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
1542:../freertos/tasks.c **** 		{
1543:../freertos/tasks.c **** 			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
1544:../freertos/tasks.c **** 		}
1545:../freertos/tasks.c **** 		else
1546:../freertos/tasks.c **** 		{
1547:../freertos/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1548:../freertos/tasks.c **** 		}
1549:../freertos/tasks.c **** 
1550:../freertos/tasks.c **** 		taskENTER_CRITICAL();
1551:../freertos/tasks.c **** 		{
1552:../freertos/tasks.c **** 			/* If null is passed in here then it is the priority of the calling
1553:../freertos/tasks.c **** 			task that is being changed. */
1554:../freertos/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
1555:../freertos/tasks.c **** 
1556:../freertos/tasks.c **** 			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );
1557:../freertos/tasks.c **** 
1558:../freertos/tasks.c **** 			#if ( configUSE_MUTEXES == 1 )
1559:../freertos/tasks.c **** 			{
1560:../freertos/tasks.c **** 				uxCurrentBasePriority = pxTCB->uxBasePriority;
1561:../freertos/tasks.c **** 			}
1562:../freertos/tasks.c **** 			#else
1563:../freertos/tasks.c **** 			{
1564:../freertos/tasks.c **** 				uxCurrentBasePriority = pxTCB->uxPriority;
1565:../freertos/tasks.c **** 			}
ARM GAS  /tmp/ccGXytas.s 			page 29


1566:../freertos/tasks.c **** 			#endif
1567:../freertos/tasks.c **** 
1568:../freertos/tasks.c **** 			if( uxCurrentBasePriority != uxNewPriority )
1569:../freertos/tasks.c **** 			{
1570:../freertos/tasks.c **** 				/* The priority change may have readied a task of higher
1571:../freertos/tasks.c **** 				priority than the calling task. */
1572:../freertos/tasks.c **** 				if( uxNewPriority > uxCurrentBasePriority )
1573:../freertos/tasks.c **** 				{
1574:../freertos/tasks.c **** 					if( pxTCB != pxCurrentTCB )
1575:../freertos/tasks.c **** 					{
1576:../freertos/tasks.c **** 						/* The priority of a task other than the currently
1577:../freertos/tasks.c **** 						running task is being raised.  Is the priority being
1578:../freertos/tasks.c **** 						raised above that of the running task? */
1579:../freertos/tasks.c **** 						if( uxNewPriority >= pxCurrentTCB->uxPriority )
1580:../freertos/tasks.c **** 						{
1581:../freertos/tasks.c **** 							xYieldRequired = pdTRUE;
1582:../freertos/tasks.c **** 						}
1583:../freertos/tasks.c **** 						else
1584:../freertos/tasks.c **** 						{
1585:../freertos/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
1586:../freertos/tasks.c **** 						}
1587:../freertos/tasks.c **** 					}
1588:../freertos/tasks.c **** 					else
1589:../freertos/tasks.c **** 					{
1590:../freertos/tasks.c **** 						/* The priority of the running task is being raised,
1591:../freertos/tasks.c **** 						but the running task must already be the highest
1592:../freertos/tasks.c **** 						priority task able to run so no yield is required. */
1593:../freertos/tasks.c **** 					}
1594:../freertos/tasks.c **** 				}
1595:../freertos/tasks.c **** 				else if( pxTCB == pxCurrentTCB )
1596:../freertos/tasks.c **** 				{
1597:../freertos/tasks.c **** 					/* Setting the priority of the running task down means
1598:../freertos/tasks.c **** 					there may now be another task of higher priority that
1599:../freertos/tasks.c **** 					is ready to execute. */
1600:../freertos/tasks.c **** 					xYieldRequired = pdTRUE;
1601:../freertos/tasks.c **** 				}
1602:../freertos/tasks.c **** 				else
1603:../freertos/tasks.c **** 				{
1604:../freertos/tasks.c **** 					/* Setting the priority of any other task down does not
1605:../freertos/tasks.c **** 					require a yield as the running task must be above the
1606:../freertos/tasks.c **** 					new priority of the task being modified. */
1607:../freertos/tasks.c **** 				}
1608:../freertos/tasks.c **** 
1609:../freertos/tasks.c **** 				/* Remember the ready list the task might be referenced from
1610:../freertos/tasks.c **** 				before its uxPriority member is changed so the
1611:../freertos/tasks.c **** 				taskRESET_READY_PRIORITY() macro can function correctly. */
1612:../freertos/tasks.c **** 				uxPriorityUsedOnEntry = pxTCB->uxPriority;
1613:../freertos/tasks.c **** 
1614:../freertos/tasks.c **** 				#if ( configUSE_MUTEXES == 1 )
1615:../freertos/tasks.c **** 				{
1616:../freertos/tasks.c **** 					/* Only change the priority being used if the task is not
1617:../freertos/tasks.c **** 					currently using an inherited priority. */
1618:../freertos/tasks.c **** 					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
1619:../freertos/tasks.c **** 					{
1620:../freertos/tasks.c **** 						pxTCB->uxPriority = uxNewPriority;
1621:../freertos/tasks.c **** 					}
1622:../freertos/tasks.c **** 					else
ARM GAS  /tmp/ccGXytas.s 			page 30


1623:../freertos/tasks.c **** 					{
1624:../freertos/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1625:../freertos/tasks.c **** 					}
1626:../freertos/tasks.c **** 
1627:../freertos/tasks.c **** 					/* The base priority gets set whatever. */
1628:../freertos/tasks.c **** 					pxTCB->uxBasePriority = uxNewPriority;
1629:../freertos/tasks.c **** 				}
1630:../freertos/tasks.c **** 				#else
1631:../freertos/tasks.c **** 				{
1632:../freertos/tasks.c **** 					pxTCB->uxPriority = uxNewPriority;
1633:../freertos/tasks.c **** 				}
1634:../freertos/tasks.c **** 				#endif
1635:../freertos/tasks.c **** 
1636:../freertos/tasks.c **** 				/* Only reset the event list item value if the value is not
1637:../freertos/tasks.c **** 				being used for anything else. */
1638:../freertos/tasks.c **** 				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE 
1639:../freertos/tasks.c **** 				{
1640:../freertos/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - (
1641:../freertos/tasks.c **** 				}
1642:../freertos/tasks.c **** 				else
1643:../freertos/tasks.c **** 				{
1644:../freertos/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1645:../freertos/tasks.c **** 				}
1646:../freertos/tasks.c **** 
1647:../freertos/tasks.c **** 				/* If the task is in the blocked or suspended list we need do
1648:../freertos/tasks.c **** 				nothing more than change its priority variable. However, if
1649:../freertos/tasks.c **** 				the task is in a ready list it needs to be removed and placed
1650:../freertos/tasks.c **** 				in the list appropriate to its new priority. */
1651:../freertos/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateL
1652:../freertos/tasks.c **** 				{
1653:../freertos/tasks.c **** 					/* The task is currently in its ready list - remove before
1654:../freertos/tasks.c **** 					adding it to it's new ready list.  As we are in a critical
1655:../freertos/tasks.c **** 					section we can do this even if the scheduler is suspended. */
1656:../freertos/tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1657:../freertos/tasks.c **** 					{
1658:../freertos/tasks.c **** 						/* It is known that the task is in its ready list so
1659:../freertos/tasks.c **** 						there is no need to check again and the port level
1660:../freertos/tasks.c **** 						reset macro can be called directly. */
1661:../freertos/tasks.c **** 						portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
1662:../freertos/tasks.c **** 					}
1663:../freertos/tasks.c **** 					else
1664:../freertos/tasks.c **** 					{
1665:../freertos/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1666:../freertos/tasks.c **** 					}
1667:../freertos/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
1668:../freertos/tasks.c **** 				}
1669:../freertos/tasks.c **** 				else
1670:../freertos/tasks.c **** 				{
1671:../freertos/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1672:../freertos/tasks.c **** 				}
1673:../freertos/tasks.c **** 
1674:../freertos/tasks.c **** 				if( xYieldRequired != pdFALSE )
1675:../freertos/tasks.c **** 				{
1676:../freertos/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
1677:../freertos/tasks.c **** 				}
1678:../freertos/tasks.c **** 				else
1679:../freertos/tasks.c **** 				{
ARM GAS  /tmp/ccGXytas.s 			page 31


1680:../freertos/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1681:../freertos/tasks.c **** 				}
1682:../freertos/tasks.c **** 
1683:../freertos/tasks.c **** 				/* Remove compiler warning about unused variables when the port
1684:../freertos/tasks.c **** 				optimised task selection is not being used. */
1685:../freertos/tasks.c **** 				( void ) uxPriorityUsedOnEntry;
1686:../freertos/tasks.c **** 			}
1687:../freertos/tasks.c **** 		}
1688:../freertos/tasks.c **** 		taskEXIT_CRITICAL();
1689:../freertos/tasks.c **** 	}
1690:../freertos/tasks.c **** 
1691:../freertos/tasks.c **** #endif /* INCLUDE_vTaskPrioritySet */
1692:../freertos/tasks.c **** /*-----------------------------------------------------------*/
1693:../freertos/tasks.c **** 
1694:../freertos/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1695:../freertos/tasks.c **** 
1696:../freertos/tasks.c **** 	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
1697:../freertos/tasks.c **** 	{
1698:../freertos/tasks.c **** 	TCB_t *pxTCB;
1699:../freertos/tasks.c **** 
1700:../freertos/tasks.c **** 		taskENTER_CRITICAL();
1701:../freertos/tasks.c **** 		{
1702:../freertos/tasks.c **** 			/* If null is passed in here then it is the running task that is
1703:../freertos/tasks.c **** 			being suspended. */
1704:../freertos/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
1705:../freertos/tasks.c **** 
1706:../freertos/tasks.c **** 			traceTASK_SUSPEND( pxTCB );
1707:../freertos/tasks.c **** 
1708:../freertos/tasks.c **** 			/* Remove task from the ready/delayed list and place in the
1709:../freertos/tasks.c **** 			suspended list. */
1710:../freertos/tasks.c **** 			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1711:../freertos/tasks.c **** 			{
1712:../freertos/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1713:../freertos/tasks.c **** 			}
1714:../freertos/tasks.c **** 			else
1715:../freertos/tasks.c **** 			{
1716:../freertos/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1717:../freertos/tasks.c **** 			}
1718:../freertos/tasks.c **** 
1719:../freertos/tasks.c **** 			/* Is the task waiting on an event also? */
1720:../freertos/tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1721:../freertos/tasks.c **** 			{
1722:../freertos/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1723:../freertos/tasks.c **** 			}
1724:../freertos/tasks.c **** 			else
1725:../freertos/tasks.c **** 			{
1726:../freertos/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1727:../freertos/tasks.c **** 			}
1728:../freertos/tasks.c **** 
1729:../freertos/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
1730:../freertos/tasks.c **** 
1731:../freertos/tasks.c **** 			#if( configUSE_TASK_NOTIFICATIONS == 1 )
1732:../freertos/tasks.c **** 			{
1733:../freertos/tasks.c **** 				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
1734:../freertos/tasks.c **** 				{
1735:../freertos/tasks.c **** 					/* The task was blocked to wait for a notification, but is
1736:../freertos/tasks.c **** 					now suspended, so no notification was received. */
ARM GAS  /tmp/ccGXytas.s 			page 32


1737:../freertos/tasks.c **** 					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
1738:../freertos/tasks.c **** 				}
1739:../freertos/tasks.c **** 			}
1740:../freertos/tasks.c **** 			#endif
1741:../freertos/tasks.c **** 		}
1742:../freertos/tasks.c **** 		taskEXIT_CRITICAL();
1743:../freertos/tasks.c **** 
1744:../freertos/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
1745:../freertos/tasks.c **** 		{
1746:../freertos/tasks.c **** 			/* Reset the next expected unblock time in case it referred to the
1747:../freertos/tasks.c **** 			task that is now in the Suspended state. */
1748:../freertos/tasks.c **** 			taskENTER_CRITICAL();
1749:../freertos/tasks.c **** 			{
1750:../freertos/tasks.c **** 				prvResetNextTaskUnblockTime();
1751:../freertos/tasks.c **** 			}
1752:../freertos/tasks.c **** 			taskEXIT_CRITICAL();
1753:../freertos/tasks.c **** 		}
1754:../freertos/tasks.c **** 		else
1755:../freertos/tasks.c **** 		{
1756:../freertos/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1757:../freertos/tasks.c **** 		}
1758:../freertos/tasks.c **** 
1759:../freertos/tasks.c **** 		if( pxTCB == pxCurrentTCB )
1760:../freertos/tasks.c **** 		{
1761:../freertos/tasks.c **** 			if( xSchedulerRunning != pdFALSE )
1762:../freertos/tasks.c **** 			{
1763:../freertos/tasks.c **** 				/* The current task has just been suspended. */
1764:../freertos/tasks.c **** 				configASSERT( uxSchedulerSuspended == 0 );
1765:../freertos/tasks.c **** 				portYIELD_WITHIN_API();
1766:../freertos/tasks.c **** 			}
1767:../freertos/tasks.c **** 			else
1768:../freertos/tasks.c **** 			{
1769:../freertos/tasks.c **** 				/* The scheduler is not running, but the task that was pointed
1770:../freertos/tasks.c **** 				to by pxCurrentTCB has just been suspended and pxCurrentTCB
1771:../freertos/tasks.c **** 				must be adjusted to point to a different task. */
1772:../freertos/tasks.c **** 				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Rig
1773:../freertos/tasks.c **** 				{
1774:../freertos/tasks.c **** 					/* No other tasks are ready, so set pxCurrentTCB back to
1775:../freertos/tasks.c **** 					NULL so when the next task is created pxCurrentTCB will
1776:../freertos/tasks.c **** 					be set to point to it no matter what its relative priority
1777:../freertos/tasks.c **** 					is. */
1778:../freertos/tasks.c **** 					pxCurrentTCB = NULL;
1779:../freertos/tasks.c **** 				}
1780:../freertos/tasks.c **** 				else
1781:../freertos/tasks.c **** 				{
1782:../freertos/tasks.c **** 					vTaskSwitchContext();
1783:../freertos/tasks.c **** 				}
1784:../freertos/tasks.c **** 			}
1785:../freertos/tasks.c **** 		}
1786:../freertos/tasks.c **** 		else
1787:../freertos/tasks.c **** 		{
1788:../freertos/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1789:../freertos/tasks.c **** 		}
1790:../freertos/tasks.c **** 	}
1791:../freertos/tasks.c **** 
1792:../freertos/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1793:../freertos/tasks.c **** /*-----------------------------------------------------------*/
ARM GAS  /tmp/ccGXytas.s 			page 33


1794:../freertos/tasks.c **** 
1795:../freertos/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1796:../freertos/tasks.c **** 
1797:../freertos/tasks.c **** 	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
1798:../freertos/tasks.c **** 	{
1799:../freertos/tasks.c **** 	BaseType_t xReturn = pdFALSE;
1800:../freertos/tasks.c **** 	const TCB_t * const pxTCB = xTask;
1801:../freertos/tasks.c **** 
1802:../freertos/tasks.c **** 		/* Accesses xPendingReadyList so must be called from a critical
1803:../freertos/tasks.c **** 		section. */
1804:../freertos/tasks.c **** 
1805:../freertos/tasks.c **** 		/* It does not make sense to check if the calling task is suspended. */
1806:../freertos/tasks.c **** 		configASSERT( xTask );
1807:../freertos/tasks.c **** 
1808:../freertos/tasks.c **** 		/* Is the task being resumed actually in the suspended list? */
1809:../freertos/tasks.c **** 		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
1810:../freertos/tasks.c **** 		{
1811:../freertos/tasks.c **** 			/* Has the task already been resumed from within an ISR? */
1812:../freertos/tasks.c **** 			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
1813:../freertos/tasks.c **** 			{
1814:../freertos/tasks.c **** 				/* Is it in the suspended list because it is in the	Suspended
1815:../freertos/tasks.c **** 				state, or because is is blocked with no timeout? */
1816:../freertos/tasks.c **** 				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The
1817:../freertos/tasks.c **** 				{
1818:../freertos/tasks.c **** 					xReturn = pdTRUE;
1819:../freertos/tasks.c **** 				}
1820:../freertos/tasks.c **** 				else
1821:../freertos/tasks.c **** 				{
1822:../freertos/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1823:../freertos/tasks.c **** 				}
1824:../freertos/tasks.c **** 			}
1825:../freertos/tasks.c **** 			else
1826:../freertos/tasks.c **** 			{
1827:../freertos/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1828:../freertos/tasks.c **** 			}
1829:../freertos/tasks.c **** 		}
1830:../freertos/tasks.c **** 		else
1831:../freertos/tasks.c **** 		{
1832:../freertos/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1833:../freertos/tasks.c **** 		}
1834:../freertos/tasks.c **** 
1835:../freertos/tasks.c **** 		return xReturn;
1836:../freertos/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
1837:../freertos/tasks.c **** 
1838:../freertos/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1839:../freertos/tasks.c **** /*-----------------------------------------------------------*/
1840:../freertos/tasks.c **** 
1841:../freertos/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1842:../freertos/tasks.c **** 
1843:../freertos/tasks.c **** 	void vTaskResume( TaskHandle_t xTaskToResume )
1844:../freertos/tasks.c **** 	{
1845:../freertos/tasks.c **** 	TCB_t * const pxTCB = xTaskToResume;
1846:../freertos/tasks.c **** 
1847:../freertos/tasks.c **** 		/* It does not make sense to resume the calling task. */
1848:../freertos/tasks.c **** 		configASSERT( xTaskToResume );
1849:../freertos/tasks.c **** 
1850:../freertos/tasks.c **** 		/* The parameter cannot be NULL as it is impossible to resume the
ARM GAS  /tmp/ccGXytas.s 			page 34


1851:../freertos/tasks.c **** 		currently executing task. */
1852:../freertos/tasks.c **** 		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
1853:../freertos/tasks.c **** 		{
1854:../freertos/tasks.c **** 			taskENTER_CRITICAL();
1855:../freertos/tasks.c **** 			{
1856:../freertos/tasks.c **** 				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
1857:../freertos/tasks.c **** 				{
1858:../freertos/tasks.c **** 					traceTASK_RESUME( pxTCB );
1859:../freertos/tasks.c **** 
1860:../freertos/tasks.c **** 					/* The ready list can be accessed even if the scheduler is
1861:../freertos/tasks.c **** 					suspended because this is inside a critical section. */
1862:../freertos/tasks.c **** 					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
1863:../freertos/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
1864:../freertos/tasks.c **** 
1865:../freertos/tasks.c **** 					/* A higher priority task may have just been resumed. */
1866:../freertos/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1867:../freertos/tasks.c **** 					{
1868:../freertos/tasks.c **** 						/* This yield may not cause the task just resumed to run,
1869:../freertos/tasks.c **** 						but will leave the lists in the correct state for the
1870:../freertos/tasks.c **** 						next yield. */
1871:../freertos/tasks.c **** 						taskYIELD_IF_USING_PREEMPTION();
1872:../freertos/tasks.c **** 					}
1873:../freertos/tasks.c **** 					else
1874:../freertos/tasks.c **** 					{
1875:../freertos/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1876:../freertos/tasks.c **** 					}
1877:../freertos/tasks.c **** 				}
1878:../freertos/tasks.c **** 				else
1879:../freertos/tasks.c **** 				{
1880:../freertos/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1881:../freertos/tasks.c **** 				}
1882:../freertos/tasks.c **** 			}
1883:../freertos/tasks.c **** 			taskEXIT_CRITICAL();
1884:../freertos/tasks.c **** 		}
1885:../freertos/tasks.c **** 		else
1886:../freertos/tasks.c **** 		{
1887:../freertos/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1888:../freertos/tasks.c **** 		}
1889:../freertos/tasks.c **** 	}
1890:../freertos/tasks.c **** 
1891:../freertos/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1892:../freertos/tasks.c **** 
1893:../freertos/tasks.c **** /*-----------------------------------------------------------*/
1894:../freertos/tasks.c **** 
1895:../freertos/tasks.c **** #if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )
1896:../freertos/tasks.c **** 
1897:../freertos/tasks.c **** 	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
1898:../freertos/tasks.c **** 	{
1899:../freertos/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
1900:../freertos/tasks.c **** 	TCB_t * const pxTCB = xTaskToResume;
1901:../freertos/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
1902:../freertos/tasks.c **** 
1903:../freertos/tasks.c **** 		configASSERT( xTaskToResume );
1904:../freertos/tasks.c **** 
1905:../freertos/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
1906:../freertos/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
1907:../freertos/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
ARM GAS  /tmp/ccGXytas.s 			page 35


1908:../freertos/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
1909:../freertos/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1910:../freertos/tasks.c **** 		is defined in FreeRTOSConfig.h then
1911:../freertos/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1912:../freertos/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
1913:../freertos/tasks.c **** 		been assigned a priority above the configured maximum system call
1914:../freertos/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
1915:../freertos/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
1916:../freertos/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
1917:../freertos/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
1918:../freertos/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
1919:../freertos/tasks.c **** 		provided on the following link:
1920:../freertos/tasks.c **** 		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
1921:../freertos/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1922:../freertos/tasks.c **** 
1923:../freertos/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
1924:../freertos/tasks.c **** 		{
1925:../freertos/tasks.c **** 			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
1926:../freertos/tasks.c **** 			{
1927:../freertos/tasks.c **** 				traceTASK_RESUME_FROM_ISR( pxTCB );
1928:../freertos/tasks.c **** 
1929:../freertos/tasks.c **** 				/* Check the ready lists can be accessed. */
1930:../freertos/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1931:../freertos/tasks.c **** 				{
1932:../freertos/tasks.c **** 					/* Ready lists can be accessed so move the task from the
1933:../freertos/tasks.c **** 					suspended list to the ready list directly. */
1934:../freertos/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1935:../freertos/tasks.c **** 					{
1936:../freertos/tasks.c **** 						xYieldRequired = pdTRUE;
1937:../freertos/tasks.c **** 					}
1938:../freertos/tasks.c **** 					else
1939:../freertos/tasks.c **** 					{
1940:../freertos/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1941:../freertos/tasks.c **** 					}
1942:../freertos/tasks.c **** 
1943:../freertos/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1944:../freertos/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
1945:../freertos/tasks.c **** 				}
1946:../freertos/tasks.c **** 				else
1947:../freertos/tasks.c **** 				{
1948:../freertos/tasks.c **** 					/* The delayed or ready lists cannot be accessed so the task
1949:../freertos/tasks.c **** 					is held in the pending ready list until the scheduler is
1950:../freertos/tasks.c **** 					unsuspended. */
1951:../freertos/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
1952:../freertos/tasks.c **** 				}
1953:../freertos/tasks.c **** 			}
1954:../freertos/tasks.c **** 			else
1955:../freertos/tasks.c **** 			{
1956:../freertos/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1957:../freertos/tasks.c **** 			}
1958:../freertos/tasks.c **** 		}
1959:../freertos/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1960:../freertos/tasks.c **** 
1961:../freertos/tasks.c **** 		return xYieldRequired;
1962:../freertos/tasks.c **** 	}
1963:../freertos/tasks.c **** 
1964:../freertos/tasks.c **** #endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
ARM GAS  /tmp/ccGXytas.s 			page 36


1965:../freertos/tasks.c **** /*-----------------------------------------------------------*/
1966:../freertos/tasks.c **** 
1967:../freertos/tasks.c **** void vTaskStartScheduler( void )
1968:../freertos/tasks.c **** {
1969:../freertos/tasks.c **** BaseType_t xReturn;
1970:../freertos/tasks.c **** 
1971:../freertos/tasks.c **** 	/* Add the idle task at the lowest priority. */
1972:../freertos/tasks.c **** 	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
1973:../freertos/tasks.c **** 	{
1974:../freertos/tasks.c **** 		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
1975:../freertos/tasks.c **** 		StackType_t *pxIdleTaskStackBuffer = NULL;
1976:../freertos/tasks.c **** 		uint32_t ulIdleTaskStackSize;
1977:../freertos/tasks.c **** 
1978:../freertos/tasks.c **** 		/* The Idle task is created using user provided RAM - obtain the
1979:../freertos/tasks.c **** 		address of the RAM then create the idle task. */
1980:../freertos/tasks.c **** 		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize
1981:../freertos/tasks.c **** 		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
1982:../freertos/tasks.c **** 												configIDLE_TASK_NAME,
1983:../freertos/tasks.c **** 												ulIdleTaskStackSize,
1984:../freertos/tasks.c **** 												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
1985:../freertos/tasks.c **** 												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_P
1986:../freertos/tasks.c **** 												pxIdleTaskStackBuffer,
1987:../freertos/tasks.c **** 												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant
1988:../freertos/tasks.c **** 
1989:../freertos/tasks.c **** 		if( xIdleTaskHandle != NULL )
1990:../freertos/tasks.c **** 		{
1991:../freertos/tasks.c **** 			xReturn = pdPASS;
1992:../freertos/tasks.c **** 		}
1993:../freertos/tasks.c **** 		else
1994:../freertos/tasks.c **** 		{
1995:../freertos/tasks.c **** 			xReturn = pdFAIL;
1996:../freertos/tasks.c **** 		}
1997:../freertos/tasks.c **** 	}
1998:../freertos/tasks.c **** 	#else
1999:../freertos/tasks.c **** 	{
2000:../freertos/tasks.c **** 		/* The Idle task is being created using dynamically allocated RAM. */
2001:../freertos/tasks.c **** 		xReturn = xTaskCreate(	prvIdleTask,
2002:../freertos/tasks.c **** 								configIDLE_TASK_NAME,
2003:../freertos/tasks.c **** 								configMINIMAL_STACK_SIZE,
2004:../freertos/tasks.c **** 								( void * ) NULL,
2005:../freertos/tasks.c **** 								portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIOR
2006:../freertos/tasks.c **** 								&xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explic
2007:../freertos/tasks.c **** 	}
2008:../freertos/tasks.c **** 	#endif /* configSUPPORT_STATIC_ALLOCATION */
2009:../freertos/tasks.c **** 
2010:../freertos/tasks.c **** 	#if ( configUSE_TIMERS == 1 )
2011:../freertos/tasks.c **** 	{
2012:../freertos/tasks.c **** 		if( xReturn == pdPASS )
2013:../freertos/tasks.c **** 		{
2014:../freertos/tasks.c **** 			xReturn = xTimerCreateTimerTask();
2015:../freertos/tasks.c **** 		}
2016:../freertos/tasks.c **** 		else
2017:../freertos/tasks.c **** 		{
2018:../freertos/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2019:../freertos/tasks.c **** 		}
2020:../freertos/tasks.c **** 	}
2021:../freertos/tasks.c **** 	#endif /* configUSE_TIMERS */
ARM GAS  /tmp/ccGXytas.s 			page 37


2022:../freertos/tasks.c **** 
2023:../freertos/tasks.c **** 	if( xReturn == pdPASS )
2024:../freertos/tasks.c **** 	{
2025:../freertos/tasks.c **** 		/* freertos_tasks_c_additions_init() should only be called if the user
2026:../freertos/tasks.c **** 		definable macro FREERTOS_TASKS_C_ADDITIONS_INIT() is defined, as that is
2027:../freertos/tasks.c **** 		the only macro called by the function. */
2028:../freertos/tasks.c **** 		#ifdef FREERTOS_TASKS_C_ADDITIONS_INIT
2029:../freertos/tasks.c **** 		{
2030:../freertos/tasks.c **** 			freertos_tasks_c_additions_init();
2031:../freertos/tasks.c **** 		}
2032:../freertos/tasks.c **** 		#endif
2033:../freertos/tasks.c **** 
2034:../freertos/tasks.c **** 		/* Interrupts are turned off here, to ensure a tick does not occur
2035:../freertos/tasks.c **** 		before or during the call to xPortStartScheduler().  The stacks of
2036:../freertos/tasks.c **** 		the created tasks contain a status word with interrupts switched on
2037:../freertos/tasks.c **** 		so interrupts will automatically get re-enabled when the first task
2038:../freertos/tasks.c **** 		starts to run. */
2039:../freertos/tasks.c **** 		portDISABLE_INTERRUPTS();
2040:../freertos/tasks.c **** 
2041:../freertos/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
2042:../freertos/tasks.c **** 		{
2043:../freertos/tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
2044:../freertos/tasks.c **** 			structure specific to the task that will run first. */
2045:../freertos/tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
2046:../freertos/tasks.c **** 		}
2047:../freertos/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
2048:../freertos/tasks.c **** 
2049:../freertos/tasks.c **** 		xNextTaskUnblockTime = portMAX_DELAY;
2050:../freertos/tasks.c **** 		xSchedulerRunning = pdTRUE;
2051:../freertos/tasks.c **** 		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
2052:../freertos/tasks.c **** 
2053:../freertos/tasks.c **** 		/* If configGENERATE_RUN_TIME_STATS is defined then the following
2054:../freertos/tasks.c **** 		macro must be defined to configure the timer/counter used to generate
2055:../freertos/tasks.c **** 		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
2056:../freertos/tasks.c **** 		is set to 0 and the following line fails to build then ensure you do not
2057:../freertos/tasks.c **** 		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
2058:../freertos/tasks.c **** 		FreeRTOSConfig.h file. */
2059:../freertos/tasks.c **** 		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
2060:../freertos/tasks.c **** 
2061:../freertos/tasks.c **** 		traceTASK_SWITCHED_IN();
2062:../freertos/tasks.c **** 
2063:../freertos/tasks.c **** 		/* Setting up the timer tick is hardware specific and thus in the
2064:../freertos/tasks.c **** 		portable interface. */
2065:../freertos/tasks.c **** 		if( xPortStartScheduler() != pdFALSE )
2066:../freertos/tasks.c **** 		{
2067:../freertos/tasks.c **** 			/* Should not reach here as if the scheduler is running the
2068:../freertos/tasks.c **** 			function will not return. */
2069:../freertos/tasks.c **** 		}
2070:../freertos/tasks.c **** 		else
2071:../freertos/tasks.c **** 		{
2072:../freertos/tasks.c **** 			/* Should only reach here if a task calls xTaskEndScheduler(). */
2073:../freertos/tasks.c **** 		}
2074:../freertos/tasks.c **** 	}
2075:../freertos/tasks.c **** 	else
2076:../freertos/tasks.c **** 	{
2077:../freertos/tasks.c **** 		/* This line will only be reached if the kernel could not be started,
2078:../freertos/tasks.c **** 		because there was not enough FreeRTOS heap to create the idle task
ARM GAS  /tmp/ccGXytas.s 			page 38


2079:../freertos/tasks.c **** 		or the timer task. */
2080:../freertos/tasks.c **** 		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
2081:../freertos/tasks.c **** 	}
2082:../freertos/tasks.c **** 
2083:../freertos/tasks.c **** 	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
2084:../freertos/tasks.c **** 	meaning xIdleTaskHandle is not used anywhere else. */
2085:../freertos/tasks.c **** 	( void ) xIdleTaskHandle;
2086:../freertos/tasks.c **** }
2087:../freertos/tasks.c **** /*-----------------------------------------------------------*/
2088:../freertos/tasks.c **** 
2089:../freertos/tasks.c **** void vTaskEndScheduler( void )
2090:../freertos/tasks.c **** {
2091:../freertos/tasks.c **** 	/* Stop the scheduler interrupts and call the portable scheduler end
2092:../freertos/tasks.c **** 	routine so the original ISRs can be restored if necessary.  The port
2093:../freertos/tasks.c **** 	layer must ensure interrupts enable	bit is left in the correct state. */
2094:../freertos/tasks.c **** 	portDISABLE_INTERRUPTS();
2095:../freertos/tasks.c **** 	xSchedulerRunning = pdFALSE;
2096:../freertos/tasks.c **** 	vPortEndScheduler();
2097:../freertos/tasks.c **** }
2098:../freertos/tasks.c **** /*----------------------------------------------------------*/
2099:../freertos/tasks.c **** 
2100:../freertos/tasks.c **** void vTaskSuspendAll( void )
2101:../freertos/tasks.c **** {
2102:../freertos/tasks.c **** 	/* A critical section is not required as the variable is of type
2103:../freertos/tasks.c **** 	BaseType_t.  Please read Richard Barry's reply in the following link to a
2104:../freertos/tasks.c **** 	post in the FreeRTOS support forum before reporting this as a bug! -
2105:../freertos/tasks.c **** 	http://goo.gl/wu4acr */
2106:../freertos/tasks.c **** 	++uxSchedulerSuspended;
2107:../freertos/tasks.c **** 	portMEMORY_BARRIER();
2108:../freertos/tasks.c **** }
2109:../freertos/tasks.c **** /*----------------------------------------------------------*/
2110:../freertos/tasks.c **** 
2111:../freertos/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
2112:../freertos/tasks.c **** 
2113:../freertos/tasks.c **** 	static TickType_t prvGetExpectedIdleTime( void )
2114:../freertos/tasks.c **** 	{
2115:../freertos/tasks.c **** 	TickType_t xReturn;
2116:../freertos/tasks.c **** 	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
2117:../freertos/tasks.c **** 
2118:../freertos/tasks.c **** 		/* uxHigherPriorityReadyTasks takes care of the case where
2119:../freertos/tasks.c **** 		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
2120:../freertos/tasks.c **** 		task that are in the Ready state, even though the idle task is
2121:../freertos/tasks.c **** 		running. */
2122:../freertos/tasks.c **** 		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
2123:../freertos/tasks.c **** 		{
2124:../freertos/tasks.c **** 			if( uxTopReadyPriority > tskIDLE_PRIORITY )
2125:../freertos/tasks.c **** 			{
2126:../freertos/tasks.c **** 				uxHigherPriorityReadyTasks = pdTRUE;
2127:../freertos/tasks.c **** 			}
2128:../freertos/tasks.c **** 		}
2129:../freertos/tasks.c **** 		#else
2130:../freertos/tasks.c **** 		{
2131:../freertos/tasks.c **** 			const UBaseType_t uxLeastSignificantBit = ( UBaseType_t ) 0x01;
2132:../freertos/tasks.c **** 
2133:../freertos/tasks.c **** 			/* When port optimised task selection is used the uxTopReadyPriority
2134:../freertos/tasks.c **** 			variable is used as a bit map.  If bits other than the least
2135:../freertos/tasks.c **** 			significant bit are set then there are tasks that have a priority
ARM GAS  /tmp/ccGXytas.s 			page 39


2136:../freertos/tasks.c **** 			above the idle priority that are in the Ready state.  This takes
2137:../freertos/tasks.c **** 			care of the case where the co-operative scheduler is in use. */
2138:../freertos/tasks.c **** 			if( uxTopReadyPriority > uxLeastSignificantBit )
2139:../freertos/tasks.c **** 			{
2140:../freertos/tasks.c **** 				uxHigherPriorityReadyTasks = pdTRUE;
2141:../freertos/tasks.c **** 			}
2142:../freertos/tasks.c **** 		}
2143:../freertos/tasks.c **** 		#endif
2144:../freertos/tasks.c **** 
2145:../freertos/tasks.c **** 		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
2146:../freertos/tasks.c **** 		{
2147:../freertos/tasks.c **** 			xReturn = 0;
2148:../freertos/tasks.c **** 		}
2149:../freertos/tasks.c **** 		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
2150:../freertos/tasks.c **** 		{
2151:../freertos/tasks.c **** 			/* There are other idle priority tasks in the ready state.  If
2152:../freertos/tasks.c **** 			time slicing is used then the very next tick interrupt must be
2153:../freertos/tasks.c **** 			processed. */
2154:../freertos/tasks.c **** 			xReturn = 0;
2155:../freertos/tasks.c **** 		}
2156:../freertos/tasks.c **** 		else if( uxHigherPriorityReadyTasks != pdFALSE )
2157:../freertos/tasks.c **** 		{
2158:../freertos/tasks.c **** 			/* There are tasks in the Ready state that have a priority above the
2159:../freertos/tasks.c **** 			idle priority.  This path can only be reached if
2160:../freertos/tasks.c **** 			configUSE_PREEMPTION is 0. */
2161:../freertos/tasks.c **** 			xReturn = 0;
2162:../freertos/tasks.c **** 		}
2163:../freertos/tasks.c **** 		else
2164:../freertos/tasks.c **** 		{
2165:../freertos/tasks.c **** 			xReturn = xNextTaskUnblockTime - xTickCount;
2166:../freertos/tasks.c **** 		}
2167:../freertos/tasks.c **** 
2168:../freertos/tasks.c **** 		return xReturn;
2169:../freertos/tasks.c **** 	}
2170:../freertos/tasks.c **** 
2171:../freertos/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2172:../freertos/tasks.c **** /*----------------------------------------------------------*/
2173:../freertos/tasks.c **** 
2174:../freertos/tasks.c **** BaseType_t xTaskResumeAll( void )
2175:../freertos/tasks.c **** {
2176:../freertos/tasks.c **** TCB_t *pxTCB = NULL;
2177:../freertos/tasks.c **** BaseType_t xAlreadyYielded = pdFALSE;
2178:../freertos/tasks.c **** 
2179:../freertos/tasks.c **** 	/* If uxSchedulerSuspended is zero then this function does not match a
2180:../freertos/tasks.c **** 	previous call to vTaskSuspendAll(). */
2181:../freertos/tasks.c **** 	configASSERT( uxSchedulerSuspended );
2182:../freertos/tasks.c **** 
2183:../freertos/tasks.c **** 	/* It is possible that an ISR caused a task to be removed from an event
2184:../freertos/tasks.c **** 	list while the scheduler was suspended.  If this was the case then the
2185:../freertos/tasks.c **** 	removed task will have been added to the xPendingReadyList.  Once the
2186:../freertos/tasks.c **** 	scheduler has been resumed it is safe to move all the pending ready
2187:../freertos/tasks.c **** 	tasks from this list into their appropriate ready list. */
2188:../freertos/tasks.c **** 	taskENTER_CRITICAL();
2189:../freertos/tasks.c **** 	{
2190:../freertos/tasks.c **** 		--uxSchedulerSuspended;
2191:../freertos/tasks.c **** 
2192:../freertos/tasks.c **** 		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
ARM GAS  /tmp/ccGXytas.s 			page 40


2193:../freertos/tasks.c **** 		{
2194:../freertos/tasks.c **** 			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
2195:../freertos/tasks.c **** 			{
2196:../freertos/tasks.c **** 				/* Move any readied tasks from the pending list into the
2197:../freertos/tasks.c **** 				appropriate ready list. */
2198:../freertos/tasks.c **** 				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
2199:../freertos/tasks.c **** 				{
2200:../freertos/tasks.c **** 					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as
2201:../freertos/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2202:../freertos/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2203:../freertos/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
2204:../freertos/tasks.c **** 
2205:../freertos/tasks.c **** 					/* If the moved task has a priority higher than the current
2206:../freertos/tasks.c **** 					task then a yield must be performed. */
2207:../freertos/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
2208:../freertos/tasks.c **** 					{
2209:../freertos/tasks.c **** 						xYieldPending = pdTRUE;
2210:../freertos/tasks.c **** 					}
2211:../freertos/tasks.c **** 					else
2212:../freertos/tasks.c **** 					{
2213:../freertos/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2214:../freertos/tasks.c **** 					}
2215:../freertos/tasks.c **** 				}
2216:../freertos/tasks.c **** 
2217:../freertos/tasks.c **** 				if( pxTCB != NULL )
2218:../freertos/tasks.c **** 				{
2219:../freertos/tasks.c **** 					/* A task was unblocked while the scheduler was suspended,
2220:../freertos/tasks.c **** 					which may have prevented the next unblock time from being
2221:../freertos/tasks.c **** 					re-calculated, in which case re-calculate it now.  Mainly
2222:../freertos/tasks.c **** 					important for low power tickless implementations, where
2223:../freertos/tasks.c **** 					this can prevent an unnecessary exit from low power
2224:../freertos/tasks.c **** 					state. */
2225:../freertos/tasks.c **** 					prvResetNextTaskUnblockTime();
2226:../freertos/tasks.c **** 				}
2227:../freertos/tasks.c **** 
2228:../freertos/tasks.c **** 				/* If any ticks occurred while the scheduler was suspended then
2229:../freertos/tasks.c **** 				they should be processed now.  This ensures the tick count does
2230:../freertos/tasks.c **** 				not	slip, and that any delayed tasks are resumed at the correct
2231:../freertos/tasks.c **** 				time. */
2232:../freertos/tasks.c **** 				{
2233:../freertos/tasks.c **** 					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
2234:../freertos/tasks.c **** 
2235:../freertos/tasks.c **** 					if( uxPendedCounts > ( UBaseType_t ) 0U )
2236:../freertos/tasks.c **** 					{
2237:../freertos/tasks.c **** 						do
2238:../freertos/tasks.c **** 						{
2239:../freertos/tasks.c **** 							if( xTaskIncrementTick() != pdFALSE )
2240:../freertos/tasks.c **** 							{
2241:../freertos/tasks.c **** 								xYieldPending = pdTRUE;
2242:../freertos/tasks.c **** 							}
2243:../freertos/tasks.c **** 							else
2244:../freertos/tasks.c **** 							{
2245:../freertos/tasks.c **** 								mtCOVERAGE_TEST_MARKER();
2246:../freertos/tasks.c **** 							}
2247:../freertos/tasks.c **** 							--uxPendedCounts;
2248:../freertos/tasks.c **** 						} while( uxPendedCounts > ( UBaseType_t ) 0U );
2249:../freertos/tasks.c **** 
ARM GAS  /tmp/ccGXytas.s 			page 41


2250:../freertos/tasks.c **** 						uxPendedTicks = 0;
2251:../freertos/tasks.c **** 					}
2252:../freertos/tasks.c **** 					else
2253:../freertos/tasks.c **** 					{
2254:../freertos/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2255:../freertos/tasks.c **** 					}
2256:../freertos/tasks.c **** 				}
2257:../freertos/tasks.c **** 
2258:../freertos/tasks.c **** 				if( xYieldPending != pdFALSE )
2259:../freertos/tasks.c **** 				{
2260:../freertos/tasks.c **** 					#if( configUSE_PREEMPTION != 0 )
2261:../freertos/tasks.c **** 					{
2262:../freertos/tasks.c **** 						xAlreadyYielded = pdTRUE;
2263:../freertos/tasks.c **** 					}
2264:../freertos/tasks.c **** 					#endif
2265:../freertos/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
2266:../freertos/tasks.c **** 				}
2267:../freertos/tasks.c **** 				else
2268:../freertos/tasks.c **** 				{
2269:../freertos/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
2270:../freertos/tasks.c **** 				}
2271:../freertos/tasks.c **** 			}
2272:../freertos/tasks.c **** 		}
2273:../freertos/tasks.c **** 		else
2274:../freertos/tasks.c **** 		{
2275:../freertos/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2276:../freertos/tasks.c **** 		}
2277:../freertos/tasks.c **** 	}
2278:../freertos/tasks.c **** 	taskEXIT_CRITICAL();
2279:../freertos/tasks.c **** 
2280:../freertos/tasks.c **** 	return xAlreadyYielded;
2281:../freertos/tasks.c **** }
2282:../freertos/tasks.c **** /*-----------------------------------------------------------*/
2283:../freertos/tasks.c **** 
2284:../freertos/tasks.c **** TickType_t xTaskGetTickCount( void )
2285:../freertos/tasks.c **** {
2286:../freertos/tasks.c **** TickType_t xTicks;
2287:../freertos/tasks.c **** 
2288:../freertos/tasks.c **** 	/* Critical section required if running on a 16 bit processor. */
2289:../freertos/tasks.c **** 	portTICK_TYPE_ENTER_CRITICAL();
2290:../freertos/tasks.c **** 	{
2291:../freertos/tasks.c **** 		xTicks = xTickCount;
2292:../freertos/tasks.c **** 	}
2293:../freertos/tasks.c **** 	portTICK_TYPE_EXIT_CRITICAL();
2294:../freertos/tasks.c **** 
2295:../freertos/tasks.c **** 	return xTicks;
2296:../freertos/tasks.c **** }
2297:../freertos/tasks.c **** /*-----------------------------------------------------------*/
2298:../freertos/tasks.c **** 
2299:../freertos/tasks.c **** TickType_t xTaskGetTickCountFromISR( void )
2300:../freertos/tasks.c **** {
2301:../freertos/tasks.c **** TickType_t xReturn;
2302:../freertos/tasks.c **** UBaseType_t uxSavedInterruptStatus;
2303:../freertos/tasks.c **** 
2304:../freertos/tasks.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
2305:../freertos/tasks.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
2306:../freertos/tasks.c **** 	above the maximum system call priority are kept permanently enabled, even
ARM GAS  /tmp/ccGXytas.s 			page 42


2307:../freertos/tasks.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
2308:../freertos/tasks.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
2309:../freertos/tasks.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
2310:../freertos/tasks.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
2311:../freertos/tasks.c **** 	assigned a priority above the configured maximum system call priority.
2312:../freertos/tasks.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
2313:../freertos/tasks.c **** 	that have been assigned a priority at or (logically) below the maximum
2314:../freertos/tasks.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
2315:../freertos/tasks.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
2316:../freertos/tasks.c **** 	More information (albeit Cortex-M specific) is provided on the following
2317:../freertos/tasks.c **** 	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
2318:../freertos/tasks.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
2319:../freertos/tasks.c **** 
2320:../freertos/tasks.c **** 	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
2321:../freertos/tasks.c **** 	{
2322:../freertos/tasks.c **** 		xReturn = xTickCount;
2323:../freertos/tasks.c **** 	}
2324:../freertos/tasks.c **** 	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
2325:../freertos/tasks.c **** 
2326:../freertos/tasks.c **** 	return xReturn;
2327:../freertos/tasks.c **** }
2328:../freertos/tasks.c **** /*-----------------------------------------------------------*/
2329:../freertos/tasks.c **** 
2330:../freertos/tasks.c **** UBaseType_t uxTaskGetNumberOfTasks( void )
2331:../freertos/tasks.c **** {
2332:../freertos/tasks.c **** 	/* A critical section is not required because the variables are of type
2333:../freertos/tasks.c **** 	BaseType_t. */
2334:../freertos/tasks.c **** 	return uxCurrentNumberOfTasks;
2335:../freertos/tasks.c **** }
2336:../freertos/tasks.c **** /*-----------------------------------------------------------*/
2337:../freertos/tasks.c **** 
2338:../freertos/tasks.c **** char *pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed fo
2339:../freertos/tasks.c **** {
2340:../freertos/tasks.c **** TCB_t *pxTCB;
2341:../freertos/tasks.c **** 
2342:../freertos/tasks.c **** 	/* If null is passed in here then the name of the calling task is being
2343:../freertos/tasks.c **** 	queried. */
2344:../freertos/tasks.c **** 	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
2345:../freertos/tasks.c **** 	configASSERT( pxTCB );
2346:../freertos/tasks.c **** 	return &( pxTCB->pcTaskName[ 0 ] );
2347:../freertos/tasks.c **** }
2348:../freertos/tasks.c **** /*-----------------------------------------------------------*/
2349:../freertos/tasks.c **** 
2350:../freertos/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2351:../freertos/tasks.c **** 
2352:../freertos/tasks.c **** 	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] )
2353:../freertos/tasks.c **** 	{
2354:../freertos/tasks.c **** 	TCB_t *pxNextTCB, *pxFirstTCB, *pxReturn = NULL;
2355:../freertos/tasks.c **** 	UBaseType_t x;
2356:../freertos/tasks.c **** 	char cNextChar;
2357:../freertos/tasks.c **** 	BaseType_t xBreakLoop;
2358:../freertos/tasks.c **** 
2359:../freertos/tasks.c **** 		/* This function is called with the scheduler suspended. */
2360:../freertos/tasks.c **** 
2361:../freertos/tasks.c **** 		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
2362:../freertos/tasks.c **** 		{
2363:../freertos/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );  /*lint !e9079 void * is used as this macro i
ARM GAS  /tmp/ccGXytas.s 			page 43


2364:../freertos/tasks.c **** 
2365:../freertos/tasks.c **** 			do
2366:../freertos/tasks.c **** 			{
2367:../freertos/tasks.c **** 				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is
2368:../freertos/tasks.c **** 
2369:../freertos/tasks.c **** 				/* Check each character in the name looking for a match or
2370:../freertos/tasks.c **** 				mismatch. */
2371:../freertos/tasks.c **** 				xBreakLoop = pdFALSE;
2372:../freertos/tasks.c **** 				for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
2373:../freertos/tasks.c **** 				{
2374:../freertos/tasks.c **** 					cNextChar = pxNextTCB->pcTaskName[ x ];
2375:../freertos/tasks.c **** 
2376:../freertos/tasks.c **** 					if( cNextChar != pcNameToQuery[ x ] )
2377:../freertos/tasks.c **** 					{
2378:../freertos/tasks.c **** 						/* Characters didn't match. */
2379:../freertos/tasks.c **** 						xBreakLoop = pdTRUE;
2380:../freertos/tasks.c **** 					}
2381:../freertos/tasks.c **** 					else if( cNextChar == ( char ) 0x00 )
2382:../freertos/tasks.c **** 					{
2383:../freertos/tasks.c **** 						/* Both strings terminated, a match must have been
2384:../freertos/tasks.c **** 						found. */
2385:../freertos/tasks.c **** 						pxReturn = pxNextTCB;
2386:../freertos/tasks.c **** 						xBreakLoop = pdTRUE;
2387:../freertos/tasks.c **** 					}
2388:../freertos/tasks.c **** 					else
2389:../freertos/tasks.c **** 					{
2390:../freertos/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2391:../freertos/tasks.c **** 					}
2392:../freertos/tasks.c **** 
2393:../freertos/tasks.c **** 					if( xBreakLoop != pdFALSE )
2394:../freertos/tasks.c **** 					{
2395:../freertos/tasks.c **** 						break;
2396:../freertos/tasks.c **** 					}
2397:../freertos/tasks.c **** 				}
2398:../freertos/tasks.c **** 
2399:../freertos/tasks.c **** 				if( pxReturn != NULL )
2400:../freertos/tasks.c **** 				{
2401:../freertos/tasks.c **** 					/* The handle has been found. */
2402:../freertos/tasks.c **** 					break;
2403:../freertos/tasks.c **** 				}
2404:../freertos/tasks.c **** 
2405:../freertos/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
2406:../freertos/tasks.c **** 		}
2407:../freertos/tasks.c **** 		else
2408:../freertos/tasks.c **** 		{
2409:../freertos/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2410:../freertos/tasks.c **** 		}
2411:../freertos/tasks.c **** 
2412:../freertos/tasks.c **** 		return pxReturn;
2413:../freertos/tasks.c **** 	}
2414:../freertos/tasks.c **** 
2415:../freertos/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2416:../freertos/tasks.c **** /*-----------------------------------------------------------*/
2417:../freertos/tasks.c **** 
2418:../freertos/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2419:../freertos/tasks.c **** 
2420:../freertos/tasks.c **** 	TaskHandle_t xTaskGetHandle( const char *pcNameToQuery ) /*lint !e971 Unqualified char types are a
ARM GAS  /tmp/ccGXytas.s 			page 44


2421:../freertos/tasks.c **** 	{
2422:../freertos/tasks.c **** 	UBaseType_t uxQueue = configMAX_PRIORITIES;
2423:../freertos/tasks.c **** 	TCB_t* pxTCB;
2424:../freertos/tasks.c **** 
2425:../freertos/tasks.c **** 		/* Task names will be truncated to configMAX_TASK_NAME_LEN - 1 bytes. */
2426:../freertos/tasks.c **** 		configASSERT( strlen( pcNameToQuery ) < configMAX_TASK_NAME_LEN );
2427:../freertos/tasks.c **** 
2428:../freertos/tasks.c **** 		vTaskSuspendAll();
2429:../freertos/tasks.c **** 		{
2430:../freertos/tasks.c **** 			/* Search the ready lists. */
2431:../freertos/tasks.c **** 			do
2432:../freertos/tasks.c **** 			{
2433:../freertos/tasks.c **** 				uxQueue--;
2434:../freertos/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) &( pxReadyTasksLists[ uxQueue ] ), pcNam
2435:../freertos/tasks.c **** 
2436:../freertos/tasks.c **** 				if( pxTCB != NULL )
2437:../freertos/tasks.c **** 				{
2438:../freertos/tasks.c **** 					/* Found the handle. */
2439:../freertos/tasks.c **** 					break;
2440:../freertos/tasks.c **** 				}
2441:../freertos/tasks.c **** 
2442:../freertos/tasks.c **** 			} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts
2443:../freertos/tasks.c **** 
2444:../freertos/tasks.c **** 			/* Search the delayed lists. */
2445:../freertos/tasks.c **** 			if( pxTCB == NULL )
2446:../freertos/tasks.c **** 			{
2447:../freertos/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxDelayedTaskList, pcNameToQuery );
2448:../freertos/tasks.c **** 			}
2449:../freertos/tasks.c **** 
2450:../freertos/tasks.c **** 			if( pxTCB == NULL )
2451:../freertos/tasks.c **** 			{
2452:../freertos/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxOverflowDelayedTaskList, pcNameToQuery
2453:../freertos/tasks.c **** 			}
2454:../freertos/tasks.c **** 
2455:../freertos/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
2456:../freertos/tasks.c **** 			{
2457:../freertos/tasks.c **** 				if( pxTCB == NULL )
2458:../freertos/tasks.c **** 				{
2459:../freertos/tasks.c **** 					/* Search the suspended list. */
2460:../freertos/tasks.c **** 					pxTCB = prvSearchForNameWithinSingleList( &xSuspendedTaskList, pcNameToQuery );
2461:../freertos/tasks.c **** 				}
2462:../freertos/tasks.c **** 			}
2463:../freertos/tasks.c **** 			#endif
2464:../freertos/tasks.c **** 
2465:../freertos/tasks.c **** 			#if( INCLUDE_vTaskDelete == 1 )
2466:../freertos/tasks.c **** 			{
2467:../freertos/tasks.c **** 				if( pxTCB == NULL )
2468:../freertos/tasks.c **** 				{
2469:../freertos/tasks.c **** 					/* Search the deleted list. */
2470:../freertos/tasks.c **** 					pxTCB = prvSearchForNameWithinSingleList( &xTasksWaitingTermination, pcNameToQuery );
2471:../freertos/tasks.c **** 				}
2472:../freertos/tasks.c **** 			}
2473:../freertos/tasks.c **** 			#endif
2474:../freertos/tasks.c **** 		}
2475:../freertos/tasks.c **** 		( void ) xTaskResumeAll();
2476:../freertos/tasks.c **** 
2477:../freertos/tasks.c **** 		return pxTCB;
ARM GAS  /tmp/ccGXytas.s 			page 45


2478:../freertos/tasks.c **** 	}
2479:../freertos/tasks.c **** 
2480:../freertos/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2481:../freertos/tasks.c **** /*-----------------------------------------------------------*/
2482:../freertos/tasks.c **** 
2483:../freertos/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2484:../freertos/tasks.c **** 
2485:../freertos/tasks.c **** 	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArra
2486:../freertos/tasks.c **** 	{
2487:../freertos/tasks.c **** 	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
2488:../freertos/tasks.c **** 
2489:../freertos/tasks.c **** 		vTaskSuspendAll();
2490:../freertos/tasks.c **** 		{
2491:../freertos/tasks.c **** 			/* Is there a space in the array for each task in the system? */
2492:../freertos/tasks.c **** 			if( uxArraySize >= uxCurrentNumberOfTasks )
2493:../freertos/tasks.c **** 			{
2494:../freertos/tasks.c **** 				/* Fill in an TaskStatus_t structure with information on each
2495:../freertos/tasks.c **** 				task in the Ready state. */
2496:../freertos/tasks.c **** 				do
2497:../freertos/tasks.c **** 				{
2498:../freertos/tasks.c **** 					uxQueue--;
2499:../freertos/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists
2500:../freertos/tasks.c **** 
2501:../freertos/tasks.c **** 				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the cast
2502:../freertos/tasks.c **** 
2503:../freertos/tasks.c **** 				/* Fill in an TaskStatus_t structure with information on each
2504:../freertos/tasks.c **** 				task in the Blocked state. */
2505:../freertos/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelaye
2506:../freertos/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverfl
2507:../freertos/tasks.c **** 
2508:../freertos/tasks.c **** 				#if( INCLUDE_vTaskDelete == 1 )
2509:../freertos/tasks.c **** 				{
2510:../freertos/tasks.c **** 					/* Fill in an TaskStatus_t structure with information on
2511:../freertos/tasks.c **** 					each task that has been deleted but not yet cleaned up. */
2512:../freertos/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermin
2513:../freertos/tasks.c **** 				}
2514:../freertos/tasks.c **** 				#endif
2515:../freertos/tasks.c **** 
2516:../freertos/tasks.c **** 				#if ( INCLUDE_vTaskSuspend == 1 )
2517:../freertos/tasks.c **** 				{
2518:../freertos/tasks.c **** 					/* Fill in an TaskStatus_t structure with information on
2519:../freertos/tasks.c **** 					each task in the Suspended state. */
2520:../freertos/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList,
2521:../freertos/tasks.c **** 				}
2522:../freertos/tasks.c **** 				#endif
2523:../freertos/tasks.c **** 
2524:../freertos/tasks.c **** 				#if ( configGENERATE_RUN_TIME_STATS == 1)
2525:../freertos/tasks.c **** 				{
2526:../freertos/tasks.c **** 					if( pulTotalRunTime != NULL )
2527:../freertos/tasks.c **** 					{
2528:../freertos/tasks.c **** 						#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
2529:../freertos/tasks.c **** 							portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
2530:../freertos/tasks.c **** 						#else
2531:../freertos/tasks.c **** 							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
2532:../freertos/tasks.c **** 						#endif
2533:../freertos/tasks.c **** 					}
2534:../freertos/tasks.c **** 				}
ARM GAS  /tmp/ccGXytas.s 			page 46


2535:../freertos/tasks.c **** 				#else
2536:../freertos/tasks.c **** 				{
2537:../freertos/tasks.c **** 					if( pulTotalRunTime != NULL )
2538:../freertos/tasks.c **** 					{
2539:../freertos/tasks.c **** 						*pulTotalRunTime = 0;
2540:../freertos/tasks.c **** 					}
2541:../freertos/tasks.c **** 				}
2542:../freertos/tasks.c **** 				#endif
2543:../freertos/tasks.c **** 			}
2544:../freertos/tasks.c **** 			else
2545:../freertos/tasks.c **** 			{
2546:../freertos/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2547:../freertos/tasks.c **** 			}
2548:../freertos/tasks.c **** 		}
2549:../freertos/tasks.c **** 		( void ) xTaskResumeAll();
2550:../freertos/tasks.c **** 
2551:../freertos/tasks.c **** 		return uxTask;
2552:../freertos/tasks.c **** 	}
2553:../freertos/tasks.c **** 
2554:../freertos/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
2555:../freertos/tasks.c **** /*----------------------------------------------------------*/
2556:../freertos/tasks.c **** 
2557:../freertos/tasks.c **** #if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )
2558:../freertos/tasks.c **** 
2559:../freertos/tasks.c **** 	TaskHandle_t xTaskGetIdleTaskHandle( void )
2560:../freertos/tasks.c **** 	{
2561:../freertos/tasks.c **** 		/* If xTaskGetIdleTaskHandle() is called before the scheduler has been
2562:../freertos/tasks.c **** 		started, then xIdleTaskHandle will be NULL. */
2563:../freertos/tasks.c **** 		configASSERT( ( xIdleTaskHandle != NULL ) );
2564:../freertos/tasks.c **** 		return xIdleTaskHandle;
2565:../freertos/tasks.c **** 	}
2566:../freertos/tasks.c **** 
2567:../freertos/tasks.c **** #endif /* INCLUDE_xTaskGetIdleTaskHandle */
2568:../freertos/tasks.c **** /*----------------------------------------------------------*/
2569:../freertos/tasks.c **** 
2570:../freertos/tasks.c **** /* This conditional compilation should use inequality to 0, not equality to 1.
2571:../freertos/tasks.c **** This is to ensure vTaskStepTick() is available when user defined low power mode
2572:../freertos/tasks.c **** implementations require configUSE_TICKLESS_IDLE to be set to a value other than
2573:../freertos/tasks.c **** 1. */
2574:../freertos/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
2575:../freertos/tasks.c **** 
2576:../freertos/tasks.c **** 	void vTaskStepTick( const TickType_t xTicksToJump )
2577:../freertos/tasks.c **** 	{
2578:../freertos/tasks.c **** 		/* Correct the tick count value after a period during which the tick
2579:../freertos/tasks.c **** 		was suppressed.  Note this does *not* call the tick hook function for
2580:../freertos/tasks.c **** 		each stepped tick. */
2581:../freertos/tasks.c **** 		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
2582:../freertos/tasks.c **** 		xTickCount += xTicksToJump;
2583:../freertos/tasks.c **** 		traceINCREASE_TICK_COUNT( xTicksToJump );
2584:../freertos/tasks.c **** 	}
2585:../freertos/tasks.c **** 
2586:../freertos/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2587:../freertos/tasks.c **** /*----------------------------------------------------------*/
2588:../freertos/tasks.c **** 
2589:../freertos/tasks.c **** #if ( INCLUDE_xTaskAbortDelay == 1 )
2590:../freertos/tasks.c **** 
2591:../freertos/tasks.c **** 	BaseType_t xTaskAbortDelay( TaskHandle_t xTask )
ARM GAS  /tmp/ccGXytas.s 			page 47


2592:../freertos/tasks.c **** 	{
2593:../freertos/tasks.c **** 	TCB_t *pxTCB = xTask;
2594:../freertos/tasks.c **** 	BaseType_t xReturn;
2595:../freertos/tasks.c **** 
2596:../freertos/tasks.c **** 		configASSERT( pxTCB );
2597:../freertos/tasks.c **** 
2598:../freertos/tasks.c **** 		vTaskSuspendAll();
2599:../freertos/tasks.c **** 		{
2600:../freertos/tasks.c **** 			/* A task can only be prematurely removed from the Blocked state if
2601:../freertos/tasks.c **** 			it is actually in the Blocked state. */
2602:../freertos/tasks.c **** 			if( eTaskGetState( xTask ) == eBlocked )
2603:../freertos/tasks.c **** 			{
2604:../freertos/tasks.c **** 				xReturn = pdPASS;
2605:../freertos/tasks.c **** 
2606:../freertos/tasks.c **** 				/* Remove the reference to the task from the blocked list.  An
2607:../freertos/tasks.c **** 				interrupt won't touch the xStateListItem because the
2608:../freertos/tasks.c **** 				scheduler is suspended. */
2609:../freertos/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2610:../freertos/tasks.c **** 
2611:../freertos/tasks.c **** 				/* Is the task waiting on an event also?  If so remove it from
2612:../freertos/tasks.c **** 				the event list too.  Interrupts can touch the event list item,
2613:../freertos/tasks.c **** 				even though the scheduler is suspended, so a critical section
2614:../freertos/tasks.c **** 				is used. */
2615:../freertos/tasks.c **** 				taskENTER_CRITICAL();
2616:../freertos/tasks.c **** 				{
2617:../freertos/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
2618:../freertos/tasks.c **** 					{
2619:../freertos/tasks.c **** 						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2620:../freertos/tasks.c **** 						pxTCB->ucDelayAborted = pdTRUE;
2621:../freertos/tasks.c **** 					}
2622:../freertos/tasks.c **** 					else
2623:../freertos/tasks.c **** 					{
2624:../freertos/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2625:../freertos/tasks.c **** 					}
2626:../freertos/tasks.c **** 				}
2627:../freertos/tasks.c **** 				taskEXIT_CRITICAL();
2628:../freertos/tasks.c **** 
2629:../freertos/tasks.c **** 				/* Place the unblocked task into the appropriate ready list. */
2630:../freertos/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
2631:../freertos/tasks.c **** 
2632:../freertos/tasks.c **** 				/* A task being unblocked cannot cause an immediate context
2633:../freertos/tasks.c **** 				switch if preemption is turned off. */
2634:../freertos/tasks.c **** 				#if (  configUSE_PREEMPTION == 1 )
2635:../freertos/tasks.c **** 				{
2636:../freertos/tasks.c **** 					/* Preemption is on, but a context switch should only be
2637:../freertos/tasks.c **** 					performed if the unblocked task has a priority that is
2638:../freertos/tasks.c **** 					equal to or higher than the currently executing task. */
2639:../freertos/tasks.c **** 					if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
2640:../freertos/tasks.c **** 					{
2641:../freertos/tasks.c **** 						/* Pend the yield to be performed when the scheduler
2642:../freertos/tasks.c **** 						is unsuspended. */
2643:../freertos/tasks.c **** 						xYieldPending = pdTRUE;
2644:../freertos/tasks.c **** 					}
2645:../freertos/tasks.c **** 					else
2646:../freertos/tasks.c **** 					{
2647:../freertos/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2648:../freertos/tasks.c **** 					}
ARM GAS  /tmp/ccGXytas.s 			page 48


2649:../freertos/tasks.c **** 				}
2650:../freertos/tasks.c **** 				#endif /* configUSE_PREEMPTION */
2651:../freertos/tasks.c **** 			}
2652:../freertos/tasks.c **** 			else
2653:../freertos/tasks.c **** 			{
2654:../freertos/tasks.c **** 				xReturn = pdFAIL;
2655:../freertos/tasks.c **** 			}
2656:../freertos/tasks.c **** 		}
2657:../freertos/tasks.c **** 		( void ) xTaskResumeAll();
2658:../freertos/tasks.c **** 
2659:../freertos/tasks.c **** 		return xReturn;
2660:../freertos/tasks.c **** 	}
2661:../freertos/tasks.c **** 
2662:../freertos/tasks.c **** #endif /* INCLUDE_xTaskAbortDelay */
2663:../freertos/tasks.c **** /*----------------------------------------------------------*/
2664:../freertos/tasks.c **** 
2665:../freertos/tasks.c **** BaseType_t xTaskIncrementTick( void )
2666:../freertos/tasks.c **** {
2667:../freertos/tasks.c **** TCB_t * pxTCB;
2668:../freertos/tasks.c **** TickType_t xItemValue;
2669:../freertos/tasks.c **** BaseType_t xSwitchRequired = pdFALSE;
2670:../freertos/tasks.c **** 
2671:../freertos/tasks.c **** 	/* Called by the portable layer each time a tick interrupt occurs.
2672:../freertos/tasks.c **** 	Increments the tick then checks to see if the new tick value will cause any
2673:../freertos/tasks.c **** 	tasks to be unblocked. */
2674:../freertos/tasks.c **** 	traceTASK_INCREMENT_TICK( xTickCount );
2675:../freertos/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
2676:../freertos/tasks.c **** 	{
2677:../freertos/tasks.c **** 		/* Minor optimisation.  The tick count cannot change in this
2678:../freertos/tasks.c **** 		block. */
2679:../freertos/tasks.c **** 		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
2680:../freertos/tasks.c **** 
2681:../freertos/tasks.c **** 		/* Increment the RTOS tick, switching the delayed and overflowed
2682:../freertos/tasks.c **** 		delayed lists if it wraps to 0. */
2683:../freertos/tasks.c **** 		xTickCount = xConstTickCount;
2684:../freertos/tasks.c **** 
2685:../freertos/tasks.c **** 		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as
2686:../freertos/tasks.c **** 		{
2687:../freertos/tasks.c **** 			taskSWITCH_DELAYED_LISTS();
2688:../freertos/tasks.c **** 		}
2689:../freertos/tasks.c **** 		else
2690:../freertos/tasks.c **** 		{
2691:../freertos/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2692:../freertos/tasks.c **** 		}
2693:../freertos/tasks.c **** 
2694:../freertos/tasks.c **** 		/* See if this tick has made a timeout expire.  Tasks are stored in
2695:../freertos/tasks.c **** 		the	queue in the order of their wake time - meaning once one task
2696:../freertos/tasks.c **** 		has been found whose block time has not expired there is no need to
2697:../freertos/tasks.c **** 		look any further down the list. */
2698:../freertos/tasks.c **** 		if( xConstTickCount >= xNextTaskUnblockTime )
2699:../freertos/tasks.c **** 		{
2700:../freertos/tasks.c **** 			for( ;; )
2701:../freertos/tasks.c **** 			{
2702:../freertos/tasks.c **** 				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
2703:../freertos/tasks.c **** 				{
2704:../freertos/tasks.c **** 					/* The delayed list is empty.  Set xNextTaskUnblockTime
2705:../freertos/tasks.c **** 					to the maximum possible value so it is extremely
ARM GAS  /tmp/ccGXytas.s 			page 49


2706:../freertos/tasks.c **** 					unlikely that the
2707:../freertos/tasks.c **** 					if( xTickCount >= xNextTaskUnblockTime ) test will pass
2708:../freertos/tasks.c **** 					next time through. */
2709:../freertos/tasks.c **** 					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redun
2710:../freertos/tasks.c **** 					break;
2711:../freertos/tasks.c **** 				}
2712:../freertos/tasks.c **** 				else
2713:../freertos/tasks.c **** 				{
2714:../freertos/tasks.c **** 					/* The delayed list is not empty, get the value of the
2715:../freertos/tasks.c **** 					item at the head of the delayed list.  This is the time
2716:../freertos/tasks.c **** 					at which the task at the head of the delayed list must
2717:../freertos/tasks.c **** 					be removed from the Blocked state. */
2718:../freertos/tasks.c **** 					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this
2719:../freertos/tasks.c **** 					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
2720:../freertos/tasks.c **** 
2721:../freertos/tasks.c **** 					if( xConstTickCount < xItemValue )
2722:../freertos/tasks.c **** 					{
2723:../freertos/tasks.c **** 						/* It is not time to unblock this item yet, but the
2724:../freertos/tasks.c **** 						item value is the time at which the task at the head
2725:../freertos/tasks.c **** 						of the blocked list must be removed from the Blocked
2726:../freertos/tasks.c **** 						state -	so record the item value in
2727:../freertos/tasks.c **** 						xNextTaskUnblockTime. */
2728:../freertos/tasks.c **** 						xNextTaskUnblockTime = xItemValue;
2729:../freertos/tasks.c **** 						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks
2730:../freertos/tasks.c **** 					}
2731:../freertos/tasks.c **** 					else
2732:../freertos/tasks.c **** 					{
2733:../freertos/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2734:../freertos/tasks.c **** 					}
2735:../freertos/tasks.c **** 
2736:../freertos/tasks.c **** 					/* It is time to remove the item from the Blocked state. */
2737:../freertos/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2738:../freertos/tasks.c **** 
2739:../freertos/tasks.c **** 					/* Is the task waiting on an event also?  If so remove
2740:../freertos/tasks.c **** 					it from the event list. */
2741:../freertos/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
2742:../freertos/tasks.c **** 					{
2743:../freertos/tasks.c **** 						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2744:../freertos/tasks.c **** 					}
2745:../freertos/tasks.c **** 					else
2746:../freertos/tasks.c **** 					{
2747:../freertos/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2748:../freertos/tasks.c **** 					}
2749:../freertos/tasks.c **** 
2750:../freertos/tasks.c **** 					/* Place the unblocked task into the appropriate ready
2751:../freertos/tasks.c **** 					list. */
2752:../freertos/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
2753:../freertos/tasks.c **** 
2754:../freertos/tasks.c **** 					/* A task being unblocked cannot cause an immediate
2755:../freertos/tasks.c **** 					context switch if preemption is turned off. */
2756:../freertos/tasks.c **** 					#if (  configUSE_PREEMPTION == 1 )
2757:../freertos/tasks.c **** 					{
2758:../freertos/tasks.c **** 						/* Preemption is on, but a context switch should
2759:../freertos/tasks.c **** 						only be performed if the unblocked task has a
2760:../freertos/tasks.c **** 						priority that is equal to or higher than the
2761:../freertos/tasks.c **** 						currently executing task. */
2762:../freertos/tasks.c **** 						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
ARM GAS  /tmp/ccGXytas.s 			page 50


2763:../freertos/tasks.c **** 						{
2764:../freertos/tasks.c **** 							xSwitchRequired = pdTRUE;
2765:../freertos/tasks.c **** 						}
2766:../freertos/tasks.c **** 						else
2767:../freertos/tasks.c **** 						{
2768:../freertos/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
2769:../freertos/tasks.c **** 						}
2770:../freertos/tasks.c **** 					}
2771:../freertos/tasks.c **** 					#endif /* configUSE_PREEMPTION */
2772:../freertos/tasks.c **** 				}
2773:../freertos/tasks.c **** 			}
2774:../freertos/tasks.c **** 		}
2775:../freertos/tasks.c **** 
2776:../freertos/tasks.c **** 		/* Tasks of equal priority to the currently running task will share
2777:../freertos/tasks.c **** 		processing time (time slice) if preemption is on, and the application
2778:../freertos/tasks.c **** 		writer has not explicitly turned time slicing off. */
2779:../freertos/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
2780:../freertos/tasks.c **** 		{
2781:../freertos/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_
2782:../freertos/tasks.c **** 			{
2783:../freertos/tasks.c **** 				xSwitchRequired = pdTRUE;
2784:../freertos/tasks.c **** 			}
2785:../freertos/tasks.c **** 			else
2786:../freertos/tasks.c **** 			{
2787:../freertos/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2788:../freertos/tasks.c **** 			}
2789:../freertos/tasks.c **** 		}
2790:../freertos/tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) ) */
2791:../freertos/tasks.c **** 
2792:../freertos/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
2793:../freertos/tasks.c **** 		{
2794:../freertos/tasks.c **** 			/* Guard against the tick hook being called when the pended tick
2795:../freertos/tasks.c **** 			count is being unwound (when the scheduler is being unlocked). */
2796:../freertos/tasks.c **** 			if( uxPendedTicks == ( UBaseType_t ) 0U )
2797:../freertos/tasks.c **** 			{
2798:../freertos/tasks.c **** 				vApplicationTickHook();
2799:../freertos/tasks.c **** 			}
2800:../freertos/tasks.c **** 			else
2801:../freertos/tasks.c **** 			{
2802:../freertos/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2803:../freertos/tasks.c **** 			}
2804:../freertos/tasks.c **** 		}
2805:../freertos/tasks.c **** 		#endif /* configUSE_TICK_HOOK */
2806:../freertos/tasks.c **** 	}
2807:../freertos/tasks.c **** 	else
2808:../freertos/tasks.c **** 	{
2809:../freertos/tasks.c **** 		++uxPendedTicks;
2810:../freertos/tasks.c **** 
2811:../freertos/tasks.c **** 		/* The tick hook gets called at regular intervals, even if the
2812:../freertos/tasks.c **** 		scheduler is locked. */
2813:../freertos/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
2814:../freertos/tasks.c **** 		{
2815:../freertos/tasks.c **** 			vApplicationTickHook();
2816:../freertos/tasks.c **** 		}
2817:../freertos/tasks.c **** 		#endif
2818:../freertos/tasks.c **** 	}
2819:../freertos/tasks.c **** 
ARM GAS  /tmp/ccGXytas.s 			page 51


2820:../freertos/tasks.c **** 	#if ( configUSE_PREEMPTION == 1 )
2821:../freertos/tasks.c **** 	{
2822:../freertos/tasks.c **** 		if( xYieldPending != pdFALSE )
2823:../freertos/tasks.c **** 		{
2824:../freertos/tasks.c **** 			xSwitchRequired = pdTRUE;
2825:../freertos/tasks.c **** 		}
2826:../freertos/tasks.c **** 		else
2827:../freertos/tasks.c **** 		{
2828:../freertos/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2829:../freertos/tasks.c **** 		}
2830:../freertos/tasks.c **** 	}
2831:../freertos/tasks.c **** 	#endif /* configUSE_PREEMPTION */
2832:../freertos/tasks.c **** 
2833:../freertos/tasks.c **** 	return xSwitchRequired;
2834:../freertos/tasks.c **** }
2835:../freertos/tasks.c **** /*-----------------------------------------------------------*/
2836:../freertos/tasks.c **** 
2837:../freertos/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2838:../freertos/tasks.c **** 
2839:../freertos/tasks.c **** 	void vTaskSetApplicationTaskTag( TaskHandle_t xTask, TaskHookFunction_t pxHookFunction )
2840:../freertos/tasks.c **** 	{
2841:../freertos/tasks.c **** 	TCB_t *xTCB;
2842:../freertos/tasks.c **** 
2843:../freertos/tasks.c **** 		/* If xTask is NULL then it is the task hook of the calling task that is
2844:../freertos/tasks.c **** 		getting set. */
2845:../freertos/tasks.c **** 		if( xTask == NULL )
2846:../freertos/tasks.c **** 		{
2847:../freertos/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2848:../freertos/tasks.c **** 		}
2849:../freertos/tasks.c **** 		else
2850:../freertos/tasks.c **** 		{
2851:../freertos/tasks.c **** 			xTCB = xTask;
2852:../freertos/tasks.c **** 		}
2853:../freertos/tasks.c **** 
2854:../freertos/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2855:../freertos/tasks.c **** 		the value can be accessed from an interrupt. */
2856:../freertos/tasks.c **** 		taskENTER_CRITICAL();
2857:../freertos/tasks.c **** 		{
2858:../freertos/tasks.c **** 			xTCB->pxTaskTag = pxHookFunction;
2859:../freertos/tasks.c **** 		}
2860:../freertos/tasks.c **** 		taskEXIT_CRITICAL();
2861:../freertos/tasks.c **** 	}
2862:../freertos/tasks.c **** 
2863:../freertos/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2864:../freertos/tasks.c **** /*-----------------------------------------------------------*/
2865:../freertos/tasks.c **** 
2866:../freertos/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2867:../freertos/tasks.c **** 
2868:../freertos/tasks.c **** 	TaskHookFunction_t xTaskGetApplicationTaskTag( TaskHandle_t xTask )
2869:../freertos/tasks.c **** 	{
2870:../freertos/tasks.c **** 	TCB_t *pxTCB;
2871:../freertos/tasks.c **** 	TaskHookFunction_t xReturn;
2872:../freertos/tasks.c **** 
2873:../freertos/tasks.c **** 		/* If xTask is NULL then set the calling task's hook. */
2874:../freertos/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
2875:../freertos/tasks.c **** 
2876:../freertos/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
ARM GAS  /tmp/ccGXytas.s 			page 52


2877:../freertos/tasks.c **** 		the value can be accessed from an interrupt. */
2878:../freertos/tasks.c **** 		taskENTER_CRITICAL();
2879:../freertos/tasks.c **** 		{
2880:../freertos/tasks.c **** 			xReturn = pxTCB->pxTaskTag;
2881:../freertos/tasks.c **** 		}
2882:../freertos/tasks.c **** 		taskEXIT_CRITICAL();
2883:../freertos/tasks.c **** 
2884:../freertos/tasks.c **** 		return xReturn;
2885:../freertos/tasks.c **** 	}
2886:../freertos/tasks.c **** 
2887:../freertos/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2888:../freertos/tasks.c **** /*-----------------------------------------------------------*/
2889:../freertos/tasks.c **** 
2890:../freertos/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2891:../freertos/tasks.c **** 
2892:../freertos/tasks.c **** 	TaskHookFunction_t xTaskGetApplicationTaskTagFromISR( TaskHandle_t xTask )
2893:../freertos/tasks.c **** 	{
2894:../freertos/tasks.c **** 	TCB_t *pxTCB;
2895:../freertos/tasks.c **** 	TaskHookFunction_t xReturn;
2896:../freertos/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
2897:../freertos/tasks.c **** 
2898:../freertos/tasks.c **** 		/* If xTask is NULL then set the calling task's hook. */
2899:../freertos/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
2900:../freertos/tasks.c **** 
2901:../freertos/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2902:../freertos/tasks.c **** 		the value can be accessed from an interrupt. */
2903:../freertos/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
2904:../freertos/tasks.c **** 		{
2905:../freertos/tasks.c **** 			xReturn = pxTCB->pxTaskTag;
2906:../freertos/tasks.c **** 		}
2907:../freertos/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
2908:../freertos/tasks.c **** 
2909:../freertos/tasks.c **** 		return xReturn;
2910:../freertos/tasks.c **** 	}
2911:../freertos/tasks.c **** 
2912:../freertos/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2913:../freertos/tasks.c **** /*-----------------------------------------------------------*/
2914:../freertos/tasks.c **** 
2915:../freertos/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2916:../freertos/tasks.c **** 
2917:../freertos/tasks.c **** 	BaseType_t xTaskCallApplicationTaskHook( TaskHandle_t xTask, void *pvParameter )
2918:../freertos/tasks.c **** 	{
2919:../freertos/tasks.c **** 	TCB_t *xTCB;
2920:../freertos/tasks.c **** 	BaseType_t xReturn;
2921:../freertos/tasks.c **** 
2922:../freertos/tasks.c **** 		/* If xTask is NULL then we are calling our own task hook. */
2923:../freertos/tasks.c **** 		if( xTask == NULL )
2924:../freertos/tasks.c **** 		{
2925:../freertos/tasks.c **** 			xTCB = pxCurrentTCB;
2926:../freertos/tasks.c **** 		}
2927:../freertos/tasks.c **** 		else
2928:../freertos/tasks.c **** 		{
2929:../freertos/tasks.c **** 			xTCB = xTask;
2930:../freertos/tasks.c **** 		}
2931:../freertos/tasks.c **** 
2932:../freertos/tasks.c **** 		if( xTCB->pxTaskTag != NULL )
2933:../freertos/tasks.c **** 		{
ARM GAS  /tmp/ccGXytas.s 			page 53


2934:../freertos/tasks.c **** 			xReturn = xTCB->pxTaskTag( pvParameter );
2935:../freertos/tasks.c **** 		}
2936:../freertos/tasks.c **** 		else
2937:../freertos/tasks.c **** 		{
2938:../freertos/tasks.c **** 			xReturn = pdFAIL;
2939:../freertos/tasks.c **** 		}
2940:../freertos/tasks.c **** 
2941:../freertos/tasks.c **** 		return xReturn;
2942:../freertos/tasks.c **** 	}
2943:../freertos/tasks.c **** 
2944:../freertos/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2945:../freertos/tasks.c **** /*-----------------------------------------------------------*/
2946:../freertos/tasks.c **** 
2947:../freertos/tasks.c **** void vTaskSwitchContext( void )
2948:../freertos/tasks.c **** {
2949:../freertos/tasks.c **** 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
2950:../freertos/tasks.c **** 	{
2951:../freertos/tasks.c **** 		/* The scheduler is currently suspended - do not allow a context
2952:../freertos/tasks.c **** 		switch. */
2953:../freertos/tasks.c **** 		xYieldPending = pdTRUE;
2954:../freertos/tasks.c **** 	}
2955:../freertos/tasks.c **** 	else
2956:../freertos/tasks.c **** 	{
2957:../freertos/tasks.c **** 		xYieldPending = pdFALSE;
2958:../freertos/tasks.c **** 		traceTASK_SWITCHED_OUT();
2959:../freertos/tasks.c **** 
2960:../freertos/tasks.c **** 		#if ( configGENERATE_RUN_TIME_STATS == 1 )
2961:../freertos/tasks.c **** 		{
2962:../freertos/tasks.c **** 			#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
2963:../freertos/tasks.c **** 				portALT_GET_RUN_TIME_COUNTER_VALUE( ulTotalRunTime );
2964:../freertos/tasks.c **** 			#else
2965:../freertos/tasks.c **** 				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
2966:../freertos/tasks.c **** 			#endif
2967:../freertos/tasks.c **** 
2968:../freertos/tasks.c **** 			/* Add the amount of time the task has been running to the
2969:../freertos/tasks.c **** 			accumulated time so far.  The time the task started running was
2970:../freertos/tasks.c **** 			stored in ulTaskSwitchedInTime.  Note that there is no overflow
2971:../freertos/tasks.c **** 			protection here so count values are only valid until the timer
2972:../freertos/tasks.c **** 			overflows.  The guard against negative values is to protect
2973:../freertos/tasks.c **** 			against suspect run time stat counter implementations - which
2974:../freertos/tasks.c **** 			are provided by the application, not the kernel. */
2975:../freertos/tasks.c **** 			if( ulTotalRunTime > ulTaskSwitchedInTime )
2976:../freertos/tasks.c **** 			{
2977:../freertos/tasks.c **** 				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
2978:../freertos/tasks.c **** 			}
2979:../freertos/tasks.c **** 			else
2980:../freertos/tasks.c **** 			{
2981:../freertos/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2982:../freertos/tasks.c **** 			}
2983:../freertos/tasks.c **** 			ulTaskSwitchedInTime = ulTotalRunTime;
2984:../freertos/tasks.c **** 		}
2985:../freertos/tasks.c **** 		#endif /* configGENERATE_RUN_TIME_STATS */
2986:../freertos/tasks.c **** 
2987:../freertos/tasks.c **** 		/* Check for stack overflow, if configured. */
2988:../freertos/tasks.c **** 		taskCHECK_FOR_STACK_OVERFLOW();
2989:../freertos/tasks.c **** 
2990:../freertos/tasks.c **** 		/* Before the currently running task is switched out, save its errno. */
ARM GAS  /tmp/ccGXytas.s 			page 54


2991:../freertos/tasks.c **** 		#if( configUSE_POSIX_ERRNO == 1 )
2992:../freertos/tasks.c **** 		{
2993:../freertos/tasks.c **** 			pxCurrentTCB->iTaskErrno = FreeRTOS_errno;
2994:../freertos/tasks.c **** 		}
2995:../freertos/tasks.c **** 		#endif
2996:../freertos/tasks.c **** 
2997:../freertos/tasks.c **** 		/* Select a new task to run using either the generic C or port
2998:../freertos/tasks.c **** 		optimised asm code. */
2999:../freertos/tasks.c **** 		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timer
3000:../freertos/tasks.c **** 		traceTASK_SWITCHED_IN();
3001:../freertos/tasks.c **** 
3002:../freertos/tasks.c **** 		/* After the new task is switched in, update the global errno. */
3003:../freertos/tasks.c **** 		#if( configUSE_POSIX_ERRNO == 1 )
3004:../freertos/tasks.c **** 		{
3005:../freertos/tasks.c **** 			FreeRTOS_errno = pxCurrentTCB->iTaskErrno;
3006:../freertos/tasks.c **** 		}
3007:../freertos/tasks.c **** 		#endif
3008:../freertos/tasks.c **** 
3009:../freertos/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
3010:../freertos/tasks.c **** 		{
3011:../freertos/tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
3012:../freertos/tasks.c **** 			structure specific to this task. */
3013:../freertos/tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
3014:../freertos/tasks.c **** 		}
3015:../freertos/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
3016:../freertos/tasks.c **** 	}
3017:../freertos/tasks.c **** }
3018:../freertos/tasks.c **** /*-----------------------------------------------------------*/
3019:../freertos/tasks.c **** 
3020:../freertos/tasks.c **** void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
3021:../freertos/tasks.c **** {
3022:../freertos/tasks.c **** 	configASSERT( pxEventList );
3023:../freertos/tasks.c **** 
3024:../freertos/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH EITHER INTERRUPTS DISABLED OR THE
3025:../freertos/tasks.c **** 	SCHEDULER SUSPENDED AND THE QUEUE BEING ACCESSED LOCKED. */
3026:../freertos/tasks.c **** 
3027:../freertos/tasks.c **** 	/* Place the event list item of the TCB in the appropriate event list.
3028:../freertos/tasks.c **** 	This is placed in the list in priority order so the highest priority task
3029:../freertos/tasks.c **** 	is the first to be woken by the event.  The queue that contains the event
3030:../freertos/tasks.c **** 	list is locked, preventing simultaneous access from interrupts. */
3031:../freertos/tasks.c **** 	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
3032:../freertos/tasks.c **** 
3033:../freertos/tasks.c **** 	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
3034:../freertos/tasks.c **** }
3035:../freertos/tasks.c **** /*-----------------------------------------------------------*/
3036:../freertos/tasks.c **** 
3037:../freertos/tasks.c **** void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickT
3038:../freertos/tasks.c **** {
3039:../freertos/tasks.c **** 	configASSERT( pxEventList );
3040:../freertos/tasks.c **** 
3041:../freertos/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
3042:../freertos/tasks.c **** 	the event groups implementation. */
3043:../freertos/tasks.c **** 	configASSERT( uxSchedulerSuspended != 0 );
3044:../freertos/tasks.c **** 
3045:../freertos/tasks.c **** 	/* Store the item value in the event list item.  It is safe to access the
3046:../freertos/tasks.c **** 	event list item here as interrupts won't access the event list item of a
3047:../freertos/tasks.c **** 	task that is not in the Blocked state. */
ARM GAS  /tmp/ccGXytas.s 			page 55


3048:../freertos/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE
3049:../freertos/tasks.c **** 
3050:../freertos/tasks.c **** 	/* Place the event list item of the TCB at the end of the appropriate event
3051:../freertos/tasks.c **** 	list.  It is safe to access the event list here because it is part of an
3052:../freertos/tasks.c **** 	event group implementation - and interrupts don't access event groups
3053:../freertos/tasks.c **** 	directly (instead they access them indirectly by pending function calls to
3054:../freertos/tasks.c **** 	the task level). */
3055:../freertos/tasks.c **** 	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
3056:../freertos/tasks.c **** 
3057:../freertos/tasks.c **** 	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
3058:../freertos/tasks.c **** }
3059:../freertos/tasks.c **** /*-----------------------------------------------------------*/
3060:../freertos/tasks.c **** 
3061:../freertos/tasks.c **** #if( configUSE_TIMERS == 1 )
3062:../freertos/tasks.c **** 
3063:../freertos/tasks.c **** 	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const B
3064:../freertos/tasks.c **** 	{
3065:../freertos/tasks.c **** 		configASSERT( pxEventList );
3066:../freertos/tasks.c **** 
3067:../freertos/tasks.c **** 		/* This function should not be called by application code hence the
3068:../freertos/tasks.c **** 		'Restricted' in its name.  It is not part of the public API.  It is
3069:../freertos/tasks.c **** 		designed for use by kernel code, and has special calling requirements -
3070:../freertos/tasks.c **** 		it should be called with the scheduler suspended. */
3071:../freertos/tasks.c **** 
3072:../freertos/tasks.c **** 
3073:../freertos/tasks.c **** 		/* Place the event list item of the TCB in the appropriate event list.
3074:../freertos/tasks.c **** 		In this case it is assume that this is the only task that is going to
3075:../freertos/tasks.c **** 		be waiting on this event list, so the faster vListInsertEnd() function
3076:../freertos/tasks.c **** 		can be used in place of vListInsert. */
3077:../freertos/tasks.c **** 		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
3078:../freertos/tasks.c **** 
3079:../freertos/tasks.c **** 		/* If the task should block indefinitely then set the block time to a
3080:../freertos/tasks.c **** 		value that will be recognised as an indefinite delay inside the
3081:../freertos/tasks.c **** 		prvAddCurrentTaskToDelayedList() function. */
3082:../freertos/tasks.c **** 		if( xWaitIndefinitely != pdFALSE )
3083:../freertos/tasks.c **** 		{
3084:../freertos/tasks.c **** 			xTicksToWait = portMAX_DELAY;
3085:../freertos/tasks.c **** 		}
3086:../freertos/tasks.c **** 
3087:../freertos/tasks.c **** 		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
3088:../freertos/tasks.c **** 		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
3089:../freertos/tasks.c **** 	}
3090:../freertos/tasks.c **** 
3091:../freertos/tasks.c **** #endif /* configUSE_TIMERS */
3092:../freertos/tasks.c **** /*-----------------------------------------------------------*/
3093:../freertos/tasks.c **** 
3094:../freertos/tasks.c **** BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
3095:../freertos/tasks.c **** {
3096:../freertos/tasks.c **** TCB_t *pxUnblockedTCB;
3097:../freertos/tasks.c **** BaseType_t xReturn;
3098:../freertos/tasks.c **** 
3099:../freertos/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED FROM A CRITICAL SECTION.  It can also be
3100:../freertos/tasks.c **** 	called from a critical section within an ISR. */
3101:../freertos/tasks.c **** 
3102:../freertos/tasks.c **** 	/* The event list is sorted in priority order, so the first in the list can
3103:../freertos/tasks.c **** 	be removed as it is known to be the highest priority.  Remove the TCB from
3104:../freertos/tasks.c **** 	the delayed list, and add it to the ready list.
ARM GAS  /tmp/ccGXytas.s 			page 56


3105:../freertos/tasks.c **** 
3106:../freertos/tasks.c **** 	If an event is for a queue that is locked then this function will never
3107:../freertos/tasks.c **** 	get called - the lock count on the queue will get modified instead.  This
3108:../freertos/tasks.c **** 	means exclusive access to the event list is guaranteed here.
3109:../freertos/tasks.c **** 
3110:../freertos/tasks.c **** 	This function assumes that a check has already been made to ensure that
3111:../freertos/tasks.c **** 	pxEventList is not empty. */
3112:../freertos/tasks.c **** 	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this 
3113:../freertos/tasks.c **** 	configASSERT( pxUnblockedTCB );
3114:../freertos/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
3115:../freertos/tasks.c **** 
3116:../freertos/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
3117:../freertos/tasks.c **** 	{
3118:../freertos/tasks.c **** 		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
3119:../freertos/tasks.c **** 		prvAddTaskToReadyList( pxUnblockedTCB );
3120:../freertos/tasks.c **** 
3121:../freertos/tasks.c **** 		#if( configUSE_TICKLESS_IDLE != 0 )
3122:../freertos/tasks.c **** 		{
3123:../freertos/tasks.c **** 			/* If a task is blocked on a kernel object then xNextTaskUnblockTime
3124:../freertos/tasks.c **** 			might be set to the blocked task's time out time.  If the task is
3125:../freertos/tasks.c **** 			unblocked for a reason other than a timeout xNextTaskUnblockTime is
3126:../freertos/tasks.c **** 			normally left unchanged, because it is automatically reset to a new
3127:../freertos/tasks.c **** 			value when the tick count equals xNextTaskUnblockTime.  However if
3128:../freertos/tasks.c **** 			tickless idling is used it might be more important to enter sleep mode
3129:../freertos/tasks.c **** 			at the earliest possible time - so reset xNextTaskUnblockTime here to
3130:../freertos/tasks.c **** 			ensure it is updated at the earliest possible time. */
3131:../freertos/tasks.c **** 			prvResetNextTaskUnblockTime();
3132:../freertos/tasks.c **** 		}
3133:../freertos/tasks.c **** 		#endif
3134:../freertos/tasks.c **** 	}
3135:../freertos/tasks.c **** 	else
3136:../freertos/tasks.c **** 	{
3137:../freertos/tasks.c **** 		/* The delayed and ready lists cannot be accessed, so hold this task
3138:../freertos/tasks.c **** 		pending until the scheduler is resumed. */
3139:../freertos/tasks.c **** 		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
3140:../freertos/tasks.c **** 	}
3141:../freertos/tasks.c **** 
3142:../freertos/tasks.c **** 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
3143:../freertos/tasks.c **** 	{
3144:../freertos/tasks.c **** 		/* Return true if the task removed from the event list has a higher
3145:../freertos/tasks.c **** 		priority than the calling task.  This allows the calling task to know if
3146:../freertos/tasks.c **** 		it should force a context switch now. */
3147:../freertos/tasks.c **** 		xReturn = pdTRUE;
3148:../freertos/tasks.c **** 
3149:../freertos/tasks.c **** 		/* Mark that a yield is pending in case the user is not using the
3150:../freertos/tasks.c **** 		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
3151:../freertos/tasks.c **** 		xYieldPending = pdTRUE;
3152:../freertos/tasks.c **** 	}
3153:../freertos/tasks.c **** 	else
3154:../freertos/tasks.c **** 	{
3155:../freertos/tasks.c **** 		xReturn = pdFALSE;
3156:../freertos/tasks.c **** 	}
3157:../freertos/tasks.c **** 
3158:../freertos/tasks.c **** 	return xReturn;
3159:../freertos/tasks.c **** }
3160:../freertos/tasks.c **** /*-----------------------------------------------------------*/
3161:../freertos/tasks.c **** 
ARM GAS  /tmp/ccGXytas.s 			page 57


3162:../freertos/tasks.c **** void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
3163:../freertos/tasks.c **** {
3164:../freertos/tasks.c **** TCB_t *pxUnblockedTCB;
3165:../freertos/tasks.c **** 
3166:../freertos/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
3167:../freertos/tasks.c **** 	the event flags implementation. */
3168:../freertos/tasks.c **** 	configASSERT( uxSchedulerSuspended != pdFALSE );
3169:../freertos/tasks.c **** 
3170:../freertos/tasks.c **** 	/* Store the new item value in the event list. */
3171:../freertos/tasks.c **** 	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
3172:../freertos/tasks.c **** 
3173:../freertos/tasks.c **** 	/* Remove the event list form the event flag.  Interrupts do not access
3174:../freertos/tasks.c **** 	event flags. */
3175:../freertos/tasks.c **** 	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this 
3176:../freertos/tasks.c **** 	configASSERT( pxUnblockedTCB );
3177:../freertos/tasks.c **** 	( void ) uxListRemove( pxEventListItem );
3178:../freertos/tasks.c **** 
3179:../freertos/tasks.c **** 	/* Remove the task from the delayed list and add it to the ready list.  The
3180:../freertos/tasks.c **** 	scheduler is suspended so interrupts will not be accessing the ready
3181:../freertos/tasks.c **** 	lists. */
3182:../freertos/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
3183:../freertos/tasks.c **** 	prvAddTaskToReadyList( pxUnblockedTCB );
3184:../freertos/tasks.c **** 
3185:../freertos/tasks.c **** 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
3186:../freertos/tasks.c **** 	{
3187:../freertos/tasks.c **** 		/* The unblocked task has a priority above that of the calling task, so
3188:../freertos/tasks.c **** 		a context switch is required.  This function is called with the
3189:../freertos/tasks.c **** 		scheduler suspended so xYieldPending is set so the context switch
3190:../freertos/tasks.c **** 		occurs immediately that the scheduler is resumed (unsuspended). */
3191:../freertos/tasks.c **** 		xYieldPending = pdTRUE;
3192:../freertos/tasks.c **** 	}
3193:../freertos/tasks.c **** }
3194:../freertos/tasks.c **** /*-----------------------------------------------------------*/
3195:../freertos/tasks.c **** 
3196:../freertos/tasks.c **** void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
3197:../freertos/tasks.c **** {
3198:../freertos/tasks.c **** 	configASSERT( pxTimeOut );
3199:../freertos/tasks.c **** 	taskENTER_CRITICAL();
3200:../freertos/tasks.c **** 	{
3201:../freertos/tasks.c **** 		pxTimeOut->xOverflowCount = xNumOfOverflows;
3202:../freertos/tasks.c **** 		pxTimeOut->xTimeOnEntering = xTickCount;
3203:../freertos/tasks.c **** 	}
3204:../freertos/tasks.c **** 	taskEXIT_CRITICAL();
3205:../freertos/tasks.c **** }
3206:../freertos/tasks.c **** /*-----------------------------------------------------------*/
3207:../freertos/tasks.c **** 
3208:../freertos/tasks.c **** void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
3209:../freertos/tasks.c **** {
3210:../freertos/tasks.c **** 	/* For internal use only as it does not use a critical section. */
3211:../freertos/tasks.c **** 	pxTimeOut->xOverflowCount = xNumOfOverflows;
3212:../freertos/tasks.c **** 	pxTimeOut->xTimeOnEntering = xTickCount;
3213:../freertos/tasks.c **** }
3214:../freertos/tasks.c **** /*-----------------------------------------------------------*/
3215:../freertos/tasks.c **** 
3216:../freertos/tasks.c **** BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
3217:../freertos/tasks.c **** {
3218:../freertos/tasks.c **** BaseType_t xReturn;
ARM GAS  /tmp/ccGXytas.s 			page 58


3219:../freertos/tasks.c **** 
3220:../freertos/tasks.c **** 	configASSERT( pxTimeOut );
3221:../freertos/tasks.c **** 	configASSERT( pxTicksToWait );
3222:../freertos/tasks.c **** 
3223:../freertos/tasks.c **** 	taskENTER_CRITICAL();
3224:../freertos/tasks.c **** 	{
3225:../freertos/tasks.c **** 		/* Minor optimisation.  The tick count cannot change in this block. */
3226:../freertos/tasks.c **** 		const TickType_t xConstTickCount = xTickCount;
3227:../freertos/tasks.c **** 		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
3228:../freertos/tasks.c **** 
3229:../freertos/tasks.c **** 		#if( INCLUDE_xTaskAbortDelay == 1 )
3230:../freertos/tasks.c **** 			if( pxCurrentTCB->ucDelayAborted != ( uint8_t ) pdFALSE )
3231:../freertos/tasks.c **** 			{
3232:../freertos/tasks.c **** 				/* The delay was aborted, which is not the same as a time out,
3233:../freertos/tasks.c **** 				but has the same result. */
3234:../freertos/tasks.c **** 				pxCurrentTCB->ucDelayAborted = pdFALSE;
3235:../freertos/tasks.c **** 				xReturn = pdTRUE;
3236:../freertos/tasks.c **** 			}
3237:../freertos/tasks.c **** 			else
3238:../freertos/tasks.c **** 		#endif
3239:../freertos/tasks.c **** 
3240:../freertos/tasks.c **** 		#if ( INCLUDE_vTaskSuspend == 1 )
3241:../freertos/tasks.c **** 			if( *pxTicksToWait == portMAX_DELAY )
3242:../freertos/tasks.c **** 			{
3243:../freertos/tasks.c **** 				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
3244:../freertos/tasks.c **** 				specified is the maximum block time then the task should block
3245:../freertos/tasks.c **** 				indefinitely, and therefore never time out. */
3246:../freertos/tasks.c **** 				xReturn = pdFALSE;
3247:../freertos/tasks.c **** 			}
3248:../freertos/tasks.c **** 			else
3249:../freertos/tasks.c **** 		#endif
3250:../freertos/tasks.c **** 
3251:../freertos/tasks.c **** 		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEn
3252:../freertos/tasks.c **** 		{
3253:../freertos/tasks.c **** 			/* The tick count is greater than the time at which
3254:../freertos/tasks.c **** 			vTaskSetTimeout() was called, but has also overflowed since
3255:../freertos/tasks.c **** 			vTaskSetTimeOut() was called.  It must have wrapped all the way
3256:../freertos/tasks.c **** 			around and gone past again. This passed since vTaskSetTimeout()
3257:../freertos/tasks.c **** 			was called. */
3258:../freertos/tasks.c **** 			xReturn = pdTRUE;
3259:../freertos/tasks.c **** 		}
3260:../freertos/tasks.c **** 		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with som
3261:../freertos/tasks.c **** 		{
3262:../freertos/tasks.c **** 			/* Not a genuine timeout. Adjust parameters for time remaining. */
3263:../freertos/tasks.c **** 			*pxTicksToWait -= xElapsedTime;
3264:../freertos/tasks.c **** 			vTaskInternalSetTimeOutState( pxTimeOut );
3265:../freertos/tasks.c **** 			xReturn = pdFALSE;
3266:../freertos/tasks.c **** 		}
3267:../freertos/tasks.c **** 		else
3268:../freertos/tasks.c **** 		{
3269:../freertos/tasks.c **** 			*pxTicksToWait = 0;
3270:../freertos/tasks.c **** 			xReturn = pdTRUE;
3271:../freertos/tasks.c **** 		}
3272:../freertos/tasks.c **** 	}
3273:../freertos/tasks.c **** 	taskEXIT_CRITICAL();
3274:../freertos/tasks.c **** 
3275:../freertos/tasks.c **** 	return xReturn;
ARM GAS  /tmp/ccGXytas.s 			page 59


3276:../freertos/tasks.c **** }
3277:../freertos/tasks.c **** /*-----------------------------------------------------------*/
3278:../freertos/tasks.c **** 
3279:../freertos/tasks.c **** void vTaskMissedYield( void )
3280:../freertos/tasks.c **** {
3281:../freertos/tasks.c **** 	xYieldPending = pdTRUE;
3282:../freertos/tasks.c **** }
3283:../freertos/tasks.c **** /*-----------------------------------------------------------*/
3284:../freertos/tasks.c **** 
3285:../freertos/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3286:../freertos/tasks.c **** 
3287:../freertos/tasks.c **** 	UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
3288:../freertos/tasks.c **** 	{
3289:../freertos/tasks.c **** 	UBaseType_t uxReturn;
3290:../freertos/tasks.c **** 	TCB_t const *pxTCB;
3291:../freertos/tasks.c **** 
3292:../freertos/tasks.c **** 		if( xTask != NULL )
3293:../freertos/tasks.c **** 		{
3294:../freertos/tasks.c **** 			pxTCB = xTask;
3295:../freertos/tasks.c **** 			uxReturn = pxTCB->uxTaskNumber;
3296:../freertos/tasks.c **** 		}
3297:../freertos/tasks.c **** 		else
3298:../freertos/tasks.c **** 		{
3299:../freertos/tasks.c **** 			uxReturn = 0U;
3300:../freertos/tasks.c **** 		}
3301:../freertos/tasks.c **** 
3302:../freertos/tasks.c **** 		return uxReturn;
3303:../freertos/tasks.c **** 	}
3304:../freertos/tasks.c **** 
3305:../freertos/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3306:../freertos/tasks.c **** /*-----------------------------------------------------------*/
3307:../freertos/tasks.c **** 
3308:../freertos/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3309:../freertos/tasks.c **** 
3310:../freertos/tasks.c **** 	void vTaskSetTaskNumber( TaskHandle_t xTask, const UBaseType_t uxHandle )
3311:../freertos/tasks.c **** 	{
3312:../freertos/tasks.c **** 	TCB_t * pxTCB;
3313:../freertos/tasks.c **** 
3314:../freertos/tasks.c **** 		if( xTask != NULL )
3315:../freertos/tasks.c **** 		{
3316:../freertos/tasks.c **** 			pxTCB = xTask;
3317:../freertos/tasks.c **** 			pxTCB->uxTaskNumber = uxHandle;
3318:../freertos/tasks.c **** 		}
3319:../freertos/tasks.c **** 	}
3320:../freertos/tasks.c **** 
3321:../freertos/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3322:../freertos/tasks.c **** 
3323:../freertos/tasks.c **** /*
3324:../freertos/tasks.c ****  * -----------------------------------------------------------
3325:../freertos/tasks.c ****  * The Idle task.
3326:../freertos/tasks.c ****  * ----------------------------------------------------------
3327:../freertos/tasks.c ****  *
3328:../freertos/tasks.c ****  * The portTASK_FUNCTION() macro is used to allow port/compiler specific
3329:../freertos/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
3330:../freertos/tasks.c ****  *
3331:../freertos/tasks.c ****  * void prvIdleTask( void *pvParameters );
3332:../freertos/tasks.c ****  *
ARM GAS  /tmp/ccGXytas.s 			page 60


3333:../freertos/tasks.c ****  */
3334:../freertos/tasks.c **** static portTASK_FUNCTION( prvIdleTask, pvParameters )
3335:../freertos/tasks.c **** {
3336:../freertos/tasks.c **** 	/* Stop warnings. */
3337:../freertos/tasks.c **** 	( void ) pvParameters;
3338:../freertos/tasks.c **** 
3339:../freertos/tasks.c **** 	/** THIS IS THE RTOS IDLE TASK - WHICH IS CREATED AUTOMATICALLY WHEN THE
3340:../freertos/tasks.c **** 	SCHEDULER IS STARTED. **/
3341:../freertos/tasks.c **** 
3342:../freertos/tasks.c **** 	/* In case a task that has a secure context deletes itself, in which case
3343:../freertos/tasks.c **** 	the idle task is responsible for deleting the task's secure context, if
3344:../freertos/tasks.c **** 	any. */
3345:../freertos/tasks.c **** 	portALLOCATE_SECURE_CONTEXT( configMINIMAL_SECURE_STACK_SIZE );
3346:../freertos/tasks.c **** 
3347:../freertos/tasks.c **** 	for( ;; )
3348:../freertos/tasks.c **** 	{
3349:../freertos/tasks.c **** 		/* See if any tasks have deleted themselves - if so then the idle task
3350:../freertos/tasks.c **** 		is responsible for freeing the deleted task's TCB and stack. */
3351:../freertos/tasks.c **** 		prvCheckTasksWaitingTermination();
3352:../freertos/tasks.c **** 
3353:../freertos/tasks.c **** 		#if ( configUSE_PREEMPTION == 0 )
3354:../freertos/tasks.c **** 		{
3355:../freertos/tasks.c **** 			/* If we are not using preemption we keep forcing a task switch to
3356:../freertos/tasks.c **** 			see if any other task has become available.  If we are using
3357:../freertos/tasks.c **** 			preemption we don't need to do this as any task becoming available
3358:../freertos/tasks.c **** 			will automatically get the processor anyway. */
3359:../freertos/tasks.c **** 			taskYIELD();
3360:../freertos/tasks.c **** 		}
3361:../freertos/tasks.c **** 		#endif /* configUSE_PREEMPTION */
3362:../freertos/tasks.c **** 
3363:../freertos/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) )
3364:../freertos/tasks.c **** 		{
3365:../freertos/tasks.c **** 			/* When using preemption tasks of equal priority will be
3366:../freertos/tasks.c **** 			timesliced.  If a task that is sharing the idle priority is ready
3367:../freertos/tasks.c **** 			to run then the idle task should yield before the end of the
3368:../freertos/tasks.c **** 			timeslice.
3369:../freertos/tasks.c **** 
3370:../freertos/tasks.c **** 			A critical region is not required here as we are just reading from
3371:../freertos/tasks.c **** 			the list, and an occasional incorrect value will not matter.  If
3372:../freertos/tasks.c **** 			the ready list at the idle priority contains more than one task
3373:../freertos/tasks.c **** 			then a task other than the idle task is ready to execute. */
3374:../freertos/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
3375:../freertos/tasks.c **** 			{
3376:../freertos/tasks.c **** 				taskYIELD();
3377:../freertos/tasks.c **** 			}
3378:../freertos/tasks.c **** 			else
3379:../freertos/tasks.c **** 			{
3380:../freertos/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3381:../freertos/tasks.c **** 			}
3382:../freertos/tasks.c **** 		}
3383:../freertos/tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) ) */
3384:../freertos/tasks.c **** 
3385:../freertos/tasks.c **** 		#if ( configUSE_IDLE_HOOK == 1 )
3386:../freertos/tasks.c **** 		{
3387:../freertos/tasks.c **** 			extern void vApplicationIdleHook( void );
3388:../freertos/tasks.c **** 
3389:../freertos/tasks.c **** 			/* Call the user defined function from within the idle task.  This
ARM GAS  /tmp/ccGXytas.s 			page 61


3390:../freertos/tasks.c **** 			allows the application designer to add background functionality
3391:../freertos/tasks.c **** 			without the overhead of a separate task.
3392:../freertos/tasks.c **** 			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
3393:../freertos/tasks.c **** 			CALL A FUNCTION THAT MIGHT BLOCK. */
3394:../freertos/tasks.c **** 			vApplicationIdleHook();
3395:../freertos/tasks.c **** 		}
3396:../freertos/tasks.c **** 		#endif /* configUSE_IDLE_HOOK */
3397:../freertos/tasks.c **** 
3398:../freertos/tasks.c **** 		/* This conditional compilation should use inequality to 0, not equality
3399:../freertos/tasks.c **** 		to 1.  This is to ensure portSUPPRESS_TICKS_AND_SLEEP() is called when
3400:../freertos/tasks.c **** 		user defined low power mode	implementations require
3401:../freertos/tasks.c **** 		configUSE_TICKLESS_IDLE to be set to a value other than 1. */
3402:../freertos/tasks.c **** 		#if ( configUSE_TICKLESS_IDLE != 0 )
3403:../freertos/tasks.c **** 		{
3404:../freertos/tasks.c **** 		TickType_t xExpectedIdleTime;
3405:../freertos/tasks.c **** 
3406:../freertos/tasks.c **** 			/* It is not desirable to suspend then resume the scheduler on
3407:../freertos/tasks.c **** 			each iteration of the idle task.  Therefore, a preliminary
3408:../freertos/tasks.c **** 			test of the expected idle time is performed without the
3409:../freertos/tasks.c **** 			scheduler suspended.  The result here is not necessarily
3410:../freertos/tasks.c **** 			valid. */
3411:../freertos/tasks.c **** 			xExpectedIdleTime = prvGetExpectedIdleTime();
3412:../freertos/tasks.c **** 
3413:../freertos/tasks.c **** 			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3414:../freertos/tasks.c **** 			{
3415:../freertos/tasks.c **** 				vTaskSuspendAll();
3416:../freertos/tasks.c **** 				{
3417:../freertos/tasks.c **** 					/* Now the scheduler is suspended, the expected idle
3418:../freertos/tasks.c **** 					time can be sampled again, and this time its value can
3419:../freertos/tasks.c **** 					be used. */
3420:../freertos/tasks.c **** 					configASSERT( xNextTaskUnblockTime >= xTickCount );
3421:../freertos/tasks.c **** 					xExpectedIdleTime = prvGetExpectedIdleTime();
3422:../freertos/tasks.c **** 
3423:../freertos/tasks.c **** 					/* Define the following macro to set xExpectedIdleTime to 0
3424:../freertos/tasks.c **** 					if the application does not want
3425:../freertos/tasks.c **** 					portSUPPRESS_TICKS_AND_SLEEP() to be called. */
3426:../freertos/tasks.c **** 					configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );
3427:../freertos/tasks.c **** 
3428:../freertos/tasks.c **** 					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3429:../freertos/tasks.c **** 					{
3430:../freertos/tasks.c **** 						traceLOW_POWER_IDLE_BEGIN();
3431:../freertos/tasks.c **** 						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
3432:../freertos/tasks.c **** 						traceLOW_POWER_IDLE_END();
3433:../freertos/tasks.c **** 					}
3434:../freertos/tasks.c **** 					else
3435:../freertos/tasks.c **** 					{
3436:../freertos/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3437:../freertos/tasks.c **** 					}
3438:../freertos/tasks.c **** 				}
3439:../freertos/tasks.c **** 				( void ) xTaskResumeAll();
3440:../freertos/tasks.c **** 			}
3441:../freertos/tasks.c **** 			else
3442:../freertos/tasks.c **** 			{
3443:../freertos/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3444:../freertos/tasks.c **** 			}
3445:../freertos/tasks.c **** 		}
3446:../freertos/tasks.c **** 		#endif /* configUSE_TICKLESS_IDLE */
ARM GAS  /tmp/ccGXytas.s 			page 62


3447:../freertos/tasks.c **** 	}
3448:../freertos/tasks.c **** }
3449:../freertos/tasks.c **** /*-----------------------------------------------------------*/
3450:../freertos/tasks.c **** 
3451:../freertos/tasks.c **** #if( configUSE_TICKLESS_IDLE != 0 )
3452:../freertos/tasks.c **** 
3453:../freertos/tasks.c **** 	eSleepModeStatus eTaskConfirmSleepModeStatus( void )
3454:../freertos/tasks.c **** 	{
3455:../freertos/tasks.c **** 	/* The idle task exists in addition to the application tasks. */
3456:../freertos/tasks.c **** 	const UBaseType_t uxNonApplicationTasks = 1;
3457:../freertos/tasks.c **** 	eSleepModeStatus eReturn = eStandardSleep;
3458:../freertos/tasks.c **** 
3459:../freertos/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
3460:../freertos/tasks.c **** 		{
3461:../freertos/tasks.c **** 			/* A task was made ready while the scheduler was suspended. */
3462:../freertos/tasks.c **** 			eReturn = eAbortSleep;
3463:../freertos/tasks.c **** 		}
3464:../freertos/tasks.c **** 		else if( xYieldPending != pdFALSE )
3465:../freertos/tasks.c **** 		{
3466:../freertos/tasks.c **** 			/* A yield was pended while the scheduler was suspended. */
3467:../freertos/tasks.c **** 			eReturn = eAbortSleep;
3468:../freertos/tasks.c **** 		}
3469:../freertos/tasks.c **** 		else
3470:../freertos/tasks.c **** 		{
3471:../freertos/tasks.c **** 			/* If all the tasks are in the suspended list (which might mean they
3472:../freertos/tasks.c **** 			have an infinite block time rather than actually being suspended)
3473:../freertos/tasks.c **** 			then it is safe to turn all clocks off and just wait for external
3474:../freertos/tasks.c **** 			interrupts. */
3475:../freertos/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicatio
3476:../freertos/tasks.c **** 			{
3477:../freertos/tasks.c **** 				eReturn = eNoTasksWaitingTimeout;
3478:../freertos/tasks.c **** 			}
3479:../freertos/tasks.c **** 			else
3480:../freertos/tasks.c **** 			{
3481:../freertos/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3482:../freertos/tasks.c **** 			}
3483:../freertos/tasks.c **** 		}
3484:../freertos/tasks.c **** 
3485:../freertos/tasks.c **** 		return eReturn;
3486:../freertos/tasks.c **** 	}
3487:../freertos/tasks.c **** 
3488:../freertos/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
3489:../freertos/tasks.c **** /*-----------------------------------------------------------*/
3490:../freertos/tasks.c **** 
3491:../freertos/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3492:../freertos/tasks.c **** 
3493:../freertos/tasks.c **** 	void vTaskSetThreadLocalStoragePointer( TaskHandle_t xTaskToSet, BaseType_t xIndex, void *pvValue 
3494:../freertos/tasks.c **** 	{
3495:../freertos/tasks.c **** 	TCB_t *pxTCB;
3496:../freertos/tasks.c **** 
3497:../freertos/tasks.c **** 		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
3498:../freertos/tasks.c **** 		{
3499:../freertos/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToSet );
3500:../freertos/tasks.c **** 			pxTCB->pvThreadLocalStoragePointers[ xIndex ] = pvValue;
3501:../freertos/tasks.c **** 		}
3502:../freertos/tasks.c **** 	}
3503:../freertos/tasks.c **** 
ARM GAS  /tmp/ccGXytas.s 			page 63


3504:../freertos/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3505:../freertos/tasks.c **** /*-----------------------------------------------------------*/
3506:../freertos/tasks.c **** 
3507:../freertos/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3508:../freertos/tasks.c **** 
3509:../freertos/tasks.c **** 	void *pvTaskGetThreadLocalStoragePointer( TaskHandle_t xTaskToQuery, BaseType_t xIndex )
3510:../freertos/tasks.c **** 	{
3511:../freertos/tasks.c **** 	void *pvReturn = NULL;
3512:../freertos/tasks.c **** 	TCB_t *pxTCB;
3513:../freertos/tasks.c **** 
3514:../freertos/tasks.c **** 		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
3515:../freertos/tasks.c **** 		{
3516:../freertos/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToQuery );
3517:../freertos/tasks.c **** 			pvReturn = pxTCB->pvThreadLocalStoragePointers[ xIndex ];
3518:../freertos/tasks.c **** 		}
3519:../freertos/tasks.c **** 		else
3520:../freertos/tasks.c **** 		{
3521:../freertos/tasks.c **** 			pvReturn = NULL;
3522:../freertos/tasks.c **** 		}
3523:../freertos/tasks.c **** 
3524:../freertos/tasks.c **** 		return pvReturn;
3525:../freertos/tasks.c **** 	}
3526:../freertos/tasks.c **** 
3527:../freertos/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3528:../freertos/tasks.c **** /*-----------------------------------------------------------*/
3529:../freertos/tasks.c **** 
3530:../freertos/tasks.c **** #if ( portUSING_MPU_WRAPPERS == 1 )
3531:../freertos/tasks.c **** 
3532:../freertos/tasks.c **** 	void vTaskAllocateMPURegions( TaskHandle_t xTaskToModify, const MemoryRegion_t * const xRegions )
3533:../freertos/tasks.c **** 	{
3534:../freertos/tasks.c **** 	TCB_t *pxTCB;
3535:../freertos/tasks.c **** 
3536:../freertos/tasks.c **** 		/* If null is passed in here then we are modifying the MPU settings of
3537:../freertos/tasks.c **** 		the calling task. */
3538:../freertos/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTaskToModify );
3539:../freertos/tasks.c **** 
3540:../freertos/tasks.c **** 		vPortStoreTaskMPUSettings( &( pxTCB->xMPUSettings ), xRegions, NULL, 0 );
3541:../freertos/tasks.c **** 	}
3542:../freertos/tasks.c **** 
3543:../freertos/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
3544:../freertos/tasks.c **** /*-----------------------------------------------------------*/
3545:../freertos/tasks.c **** 
3546:../freertos/tasks.c **** static void prvInitialiseTaskLists( void )
3547:../freertos/tasks.c **** {
3548:../freertos/tasks.c **** UBaseType_t uxPriority;
3549:../freertos/tasks.c **** 
3550:../freertos/tasks.c **** 	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriorit
3551:../freertos/tasks.c **** 	{
3552:../freertos/tasks.c **** 		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
3553:../freertos/tasks.c **** 	}
3554:../freertos/tasks.c **** 
3555:../freertos/tasks.c **** 	vListInitialise( &xDelayedTaskList1 );
3556:../freertos/tasks.c **** 	vListInitialise( &xDelayedTaskList2 );
3557:../freertos/tasks.c **** 	vListInitialise( &xPendingReadyList );
3558:../freertos/tasks.c **** 
3559:../freertos/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
3560:../freertos/tasks.c **** 	{
ARM GAS  /tmp/ccGXytas.s 			page 64


3561:../freertos/tasks.c **** 		vListInitialise( &xTasksWaitingTermination );
3562:../freertos/tasks.c **** 	}
3563:../freertos/tasks.c **** 	#endif /* INCLUDE_vTaskDelete */
3564:../freertos/tasks.c **** 
3565:../freertos/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
3566:../freertos/tasks.c **** 	{
3567:../freertos/tasks.c **** 		vListInitialise( &xSuspendedTaskList );
3568:../freertos/tasks.c **** 	}
3569:../freertos/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
3570:../freertos/tasks.c **** 
3571:../freertos/tasks.c **** 	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
3572:../freertos/tasks.c **** 	using list2. */
3573:../freertos/tasks.c **** 	pxDelayedTaskList = &xDelayedTaskList1;
3574:../freertos/tasks.c **** 	pxOverflowDelayedTaskList = &xDelayedTaskList2;
3575:../freertos/tasks.c **** }
3576:../freertos/tasks.c **** /*-----------------------------------------------------------*/
3577:../freertos/tasks.c **** 
3578:../freertos/tasks.c **** static void prvCheckTasksWaitingTermination( void )
3579:../freertos/tasks.c **** {
3580:../freertos/tasks.c **** 
3581:../freertos/tasks.c **** 	/** THIS FUNCTION IS CALLED FROM THE RTOS IDLE TASK **/
3582:../freertos/tasks.c **** 
3583:../freertos/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
3584:../freertos/tasks.c **** 	{
3585:../freertos/tasks.c **** 		TCB_t *pxTCB;
3586:../freertos/tasks.c **** 
3587:../freertos/tasks.c **** 		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
3588:../freertos/tasks.c **** 		being called too often in the idle task. */
3589:../freertos/tasks.c **** 		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
3590:../freertos/tasks.c **** 		{
3591:../freertos/tasks.c **** 			taskENTER_CRITICAL();
3592:../freertos/tasks.c **** 			{
3593:../freertos/tasks.c **** 				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is u
3594:../freertos/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
3595:../freertos/tasks.c **** 				--uxCurrentNumberOfTasks;
3596:../freertos/tasks.c **** 				--uxDeletedTasksWaitingCleanUp;
3597:../freertos/tasks.c **** 			}
3598:../freertos/tasks.c **** 			taskEXIT_CRITICAL();
3599:../freertos/tasks.c **** 
3600:../freertos/tasks.c **** 			prvDeleteTCB( pxTCB );
3601:../freertos/tasks.c **** 		}
3602:../freertos/tasks.c **** 	}
3603:../freertos/tasks.c **** 	#endif /* INCLUDE_vTaskDelete */
3604:../freertos/tasks.c **** }
3605:../freertos/tasks.c **** /*-----------------------------------------------------------*/
3606:../freertos/tasks.c **** 
3607:../freertos/tasks.c **** #if( configUSE_TRACE_FACILITY == 1 )
3608:../freertos/tasks.c **** 
3609:../freertos/tasks.c **** 	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, 
3610:../freertos/tasks.c **** 	{
3611:../freertos/tasks.c **** 	TCB_t *pxTCB;
3612:../freertos/tasks.c **** 
3613:../freertos/tasks.c **** 		/* xTask is NULL then get the state of the calling task. */
3614:../freertos/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
3615:../freertos/tasks.c **** 
3616:../freertos/tasks.c **** 		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
3617:../freertos/tasks.c **** 		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
ARM GAS  /tmp/ccGXytas.s 			page 65


3618:../freertos/tasks.c **** 		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
3619:../freertos/tasks.c **** 		pxTaskStatus->pxStackBase = pxTCB->pxStack;
3620:../freertos/tasks.c **** 		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
3621:../freertos/tasks.c **** 
3622:../freertos/tasks.c **** 		#if ( configUSE_MUTEXES == 1 )
3623:../freertos/tasks.c **** 		{
3624:../freertos/tasks.c **** 			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
3625:../freertos/tasks.c **** 		}
3626:../freertos/tasks.c **** 		#else
3627:../freertos/tasks.c **** 		{
3628:../freertos/tasks.c **** 			pxTaskStatus->uxBasePriority = 0;
3629:../freertos/tasks.c **** 		}
3630:../freertos/tasks.c **** 		#endif
3631:../freertos/tasks.c **** 
3632:../freertos/tasks.c **** 		#if ( configGENERATE_RUN_TIME_STATS == 1 )
3633:../freertos/tasks.c **** 		{
3634:../freertos/tasks.c **** 			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
3635:../freertos/tasks.c **** 		}
3636:../freertos/tasks.c **** 		#else
3637:../freertos/tasks.c **** 		{
3638:../freertos/tasks.c **** 			pxTaskStatus->ulRunTimeCounter = 0;
3639:../freertos/tasks.c **** 		}
3640:../freertos/tasks.c **** 		#endif
3641:../freertos/tasks.c **** 
3642:../freertos/tasks.c **** 		/* Obtaining the task state is a little fiddly, so is only done if the
3643:../freertos/tasks.c **** 		value of eState passed into this function is eInvalid - otherwise the
3644:../freertos/tasks.c **** 		state is just set to whatever is passed in. */
3645:../freertos/tasks.c **** 		if( eState != eInvalid )
3646:../freertos/tasks.c **** 		{
3647:../freertos/tasks.c **** 			if( pxTCB == pxCurrentTCB )
3648:../freertos/tasks.c **** 			{
3649:../freertos/tasks.c **** 				pxTaskStatus->eCurrentState = eRunning;
3650:../freertos/tasks.c **** 			}
3651:../freertos/tasks.c **** 			else
3652:../freertos/tasks.c **** 			{
3653:../freertos/tasks.c **** 				pxTaskStatus->eCurrentState = eState;
3654:../freertos/tasks.c **** 
3655:../freertos/tasks.c **** 				#if ( INCLUDE_vTaskSuspend == 1 )
3656:../freertos/tasks.c **** 				{
3657:../freertos/tasks.c **** 					/* If the task is in the suspended list then there is a
3658:../freertos/tasks.c **** 					chance it is actually just blocked indefinitely - so really
3659:../freertos/tasks.c **** 					it should be reported as being in the Blocked state. */
3660:../freertos/tasks.c **** 					if( eState == eSuspended )
3661:../freertos/tasks.c **** 					{
3662:../freertos/tasks.c **** 						vTaskSuspendAll();
3663:../freertos/tasks.c **** 						{
3664:../freertos/tasks.c **** 							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
3665:../freertos/tasks.c **** 							{
3666:../freertos/tasks.c **** 								pxTaskStatus->eCurrentState = eBlocked;
3667:../freertos/tasks.c **** 							}
3668:../freertos/tasks.c **** 						}
3669:../freertos/tasks.c **** 						( void ) xTaskResumeAll();
3670:../freertos/tasks.c **** 					}
3671:../freertos/tasks.c **** 				}
3672:../freertos/tasks.c **** 				#endif /* INCLUDE_vTaskSuspend */
3673:../freertos/tasks.c **** 			}
3674:../freertos/tasks.c **** 		}
ARM GAS  /tmp/ccGXytas.s 			page 66


3675:../freertos/tasks.c **** 		else
3676:../freertos/tasks.c **** 		{
3677:../freertos/tasks.c **** 			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
3678:../freertos/tasks.c **** 		}
3679:../freertos/tasks.c **** 
3680:../freertos/tasks.c **** 		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
3681:../freertos/tasks.c **** 		parameter is provided to allow it to be skipped. */
3682:../freertos/tasks.c **** 		if( xGetFreeStackSpace != pdFALSE )
3683:../freertos/tasks.c **** 		{
3684:../freertos/tasks.c **** 			#if ( portSTACK_GROWTH > 0 )
3685:../freertos/tasks.c **** 			{
3686:../freertos/tasks.c **** 				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfSt
3687:../freertos/tasks.c **** 			}
3688:../freertos/tasks.c **** 			#else
3689:../freertos/tasks.c **** 			{
3690:../freertos/tasks.c **** 				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack )
3691:../freertos/tasks.c **** 			}
3692:../freertos/tasks.c **** 			#endif
3693:../freertos/tasks.c **** 		}
3694:../freertos/tasks.c **** 		else
3695:../freertos/tasks.c **** 		{
3696:../freertos/tasks.c **** 			pxTaskStatus->usStackHighWaterMark = 0;
3697:../freertos/tasks.c **** 		}
3698:../freertos/tasks.c **** 	}
3699:../freertos/tasks.c **** 
3700:../freertos/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3701:../freertos/tasks.c **** /*-----------------------------------------------------------*/
3702:../freertos/tasks.c **** 
3703:../freertos/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3704:../freertos/tasks.c **** 
3705:../freertos/tasks.c **** 	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, 
3706:../freertos/tasks.c **** 	{
3707:../freertos/tasks.c **** 	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
3708:../freertos/tasks.c **** 	UBaseType_t uxTask = 0;
3709:../freertos/tasks.c **** 
3710:../freertos/tasks.c **** 		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
3711:../freertos/tasks.c **** 		{
3712:../freertos/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is
3713:../freertos/tasks.c **** 
3714:../freertos/tasks.c **** 			/* Populate an TaskStatus_t structure within the
3715:../freertos/tasks.c **** 			pxTaskStatusArray array for each task that is referenced from
3716:../freertos/tasks.c **** 			pxList.  See the definition of TaskStatus_t in task.h for the
3717:../freertos/tasks.c **** 			meaning of each TaskStatus_t structure member. */
3718:../freertos/tasks.c **** 			do
3719:../freertos/tasks.c **** 			{
3720:../freertos/tasks.c **** 				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is
3721:../freertos/tasks.c **** 				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
3722:../freertos/tasks.c **** 				uxTask++;
3723:../freertos/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
3724:../freertos/tasks.c **** 		}
3725:../freertos/tasks.c **** 		else
3726:../freertos/tasks.c **** 		{
3727:../freertos/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3728:../freertos/tasks.c **** 		}
3729:../freertos/tasks.c **** 
3730:../freertos/tasks.c **** 		return uxTask;
3731:../freertos/tasks.c **** 	}
ARM GAS  /tmp/ccGXytas.s 			page 67


3732:../freertos/tasks.c **** 
3733:../freertos/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3734:../freertos/tasks.c **** /*-----------------------------------------------------------*/
3735:../freertos/tasks.c **** 
3736:../freertos/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUD
3737:../freertos/tasks.c **** 
3738:../freertos/tasks.c **** 	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
3739:../freertos/tasks.c **** 	{
3740:../freertos/tasks.c **** 	uint32_t ulCount = 0U;
3741:../freertos/tasks.c **** 
3742:../freertos/tasks.c **** 		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
3743:../freertos/tasks.c **** 		{
3744:../freertos/tasks.c **** 			pucStackByte -= portSTACK_GROWTH;
3745:../freertos/tasks.c **** 			ulCount++;
3746:../freertos/tasks.c **** 		}
3747:../freertos/tasks.c **** 
3748:../freertos/tasks.c **** 		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller a
3749:../freertos/tasks.c **** 
3750:../freertos/tasks.c **** 		return ( configSTACK_DEPTH_TYPE ) ulCount;
3751:../freertos/tasks.c **** 	}
3752:../freertos/tasks.c **** 
3753:../freertos/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( 
3754:../freertos/tasks.c **** /*-----------------------------------------------------------*/
3755:../freertos/tasks.c **** 
3756:../freertos/tasks.c **** #if ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 )
3757:../freertos/tasks.c **** 
3758:../freertos/tasks.c **** 	/* uxTaskGetStackHighWaterMark() and uxTaskGetStackHighWaterMark2() are the
3759:../freertos/tasks.c **** 	same except for their return type.  Using configSTACK_DEPTH_TYPE allows the
3760:../freertos/tasks.c **** 	user to determine the return type.  It gets around the problem of the value
3761:../freertos/tasks.c **** 	overflowing on 8-bit types without breaking backward compatibility for
3762:../freertos/tasks.c **** 	applications that expect an 8-bit return type. */
3763:../freertos/tasks.c **** 	configSTACK_DEPTH_TYPE uxTaskGetStackHighWaterMark2( TaskHandle_t xTask )
3764:../freertos/tasks.c **** 	{
3765:../freertos/tasks.c **** 	TCB_t *pxTCB;
3766:../freertos/tasks.c **** 	uint8_t *pucEndOfStack;
3767:../freertos/tasks.c **** 	configSTACK_DEPTH_TYPE uxReturn;
3768:../freertos/tasks.c **** 
3769:../freertos/tasks.c **** 		/* uxTaskGetStackHighWaterMark() and uxTaskGetStackHighWaterMark2() are
3770:../freertos/tasks.c **** 		the same except for their return type.  Using configSTACK_DEPTH_TYPE
3771:../freertos/tasks.c **** 		allows the user to determine the return type.  It gets around the
3772:../freertos/tasks.c **** 		problem of the value overflowing on 8-bit types without breaking
3773:../freertos/tasks.c **** 		backward compatibility for applications that expect an 8-bit return
3774:../freertos/tasks.c **** 		type. */
3775:../freertos/tasks.c **** 
3776:../freertos/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
3777:../freertos/tasks.c **** 
3778:../freertos/tasks.c **** 		#if portSTACK_GROWTH < 0
3779:../freertos/tasks.c **** 		{
3780:../freertos/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
3781:../freertos/tasks.c **** 		}
3782:../freertos/tasks.c **** 		#else
3783:../freertos/tasks.c **** 		{
3784:../freertos/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
3785:../freertos/tasks.c **** 		}
3786:../freertos/tasks.c **** 		#endif
3787:../freertos/tasks.c **** 
3788:../freertos/tasks.c **** 		uxReturn = prvTaskCheckFreeStackSpace( pucEndOfStack );
ARM GAS  /tmp/ccGXytas.s 			page 68


3789:../freertos/tasks.c **** 
3790:../freertos/tasks.c **** 		return uxReturn;
3791:../freertos/tasks.c **** 	}
3792:../freertos/tasks.c **** 
3793:../freertos/tasks.c **** #endif /* INCLUDE_uxTaskGetStackHighWaterMark2 */
3794:../freertos/tasks.c **** /*-----------------------------------------------------------*/
3795:../freertos/tasks.c **** 
3796:../freertos/tasks.c **** #if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )
3797:../freertos/tasks.c **** 
3798:../freertos/tasks.c **** 	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
3799:../freertos/tasks.c **** 	{
3800:../freertos/tasks.c **** 	TCB_t *pxTCB;
3801:../freertos/tasks.c **** 	uint8_t *pucEndOfStack;
3802:../freertos/tasks.c **** 	UBaseType_t uxReturn;
3803:../freertos/tasks.c **** 
3804:../freertos/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
3805:../freertos/tasks.c **** 
3806:../freertos/tasks.c **** 		#if portSTACK_GROWTH < 0
3807:../freertos/tasks.c **** 		{
3808:../freertos/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
3809:../freertos/tasks.c **** 		}
3810:../freertos/tasks.c **** 		#else
3811:../freertos/tasks.c **** 		{
3812:../freertos/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
3813:../freertos/tasks.c **** 		}
3814:../freertos/tasks.c **** 		#endif
3815:../freertos/tasks.c **** 
3816:../freertos/tasks.c **** 		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
3817:../freertos/tasks.c **** 
3818:../freertos/tasks.c **** 		return uxReturn;
3819:../freertos/tasks.c **** 	}
3820:../freertos/tasks.c **** 
3821:../freertos/tasks.c **** #endif /* INCLUDE_uxTaskGetStackHighWaterMark */
3822:../freertos/tasks.c **** /*-----------------------------------------------------------*/
3823:../freertos/tasks.c **** 
3824:../freertos/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
3825:../freertos/tasks.c **** 
3826:../freertos/tasks.c **** 	static void prvDeleteTCB( TCB_t *pxTCB )
3827:../freertos/tasks.c **** 	{
3828:../freertos/tasks.c **** 		/* This call is required specifically for the TriCore port.  It must be
3829:../freertos/tasks.c **** 		above the vPortFree() calls.  The call is also used by ports/demos that
3830:../freertos/tasks.c **** 		want to allocate and clean RAM statically. */
3831:../freertos/tasks.c **** 		portCLEAN_UP_TCB( pxTCB );
3832:../freertos/tasks.c **** 
3833:../freertos/tasks.c **** 		/* Free up the memory allocated by the scheduler for the task.  It is up
3834:../freertos/tasks.c **** 		to the task to free any memory allocated at the application level. */
3835:../freertos/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
3836:../freertos/tasks.c **** 		{
3837:../freertos/tasks.c **** 			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
3838:../freertos/tasks.c **** 		}
3839:../freertos/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
3840:../freertos/tasks.c **** 
3841:../freertos/tasks.c **** 		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( p
3842:../freertos/tasks.c **** 		{
3843:../freertos/tasks.c **** 			/* The task can only have been allocated dynamically - free both
3844:../freertos/tasks.c **** 			the stack and TCB. */
3845:../freertos/tasks.c **** 			vPortFree( pxTCB->pxStack );
ARM GAS  /tmp/ccGXytas.s 			page 69


3846:../freertos/tasks.c **** 			vPortFree( pxTCB );
3847:../freertos/tasks.c **** 		}
3848:../freertos/tasks.c **** 		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consol
3849:../freertos/tasks.c **** 		{
3850:../freertos/tasks.c **** 			/* The task could have been allocated statically or dynamically, so
3851:../freertos/tasks.c **** 			check what was statically allocated before trying to free the
3852:../freertos/tasks.c **** 			memory. */
3853:../freertos/tasks.c **** 			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
3854:../freertos/tasks.c **** 			{
3855:../freertos/tasks.c **** 				/* Both the stack and TCB were allocated dynamically, so both
3856:../freertos/tasks.c **** 				must be freed. */
3857:../freertos/tasks.c **** 				vPortFree( pxTCB->pxStack );
3858:../freertos/tasks.c **** 				vPortFree( pxTCB );
3859:../freertos/tasks.c **** 			}
3860:../freertos/tasks.c **** 			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
3861:../freertos/tasks.c **** 			{
3862:../freertos/tasks.c **** 				/* Only the stack was statically allocated, so the TCB is the
3863:../freertos/tasks.c **** 				only memory that must be freed. */
3864:../freertos/tasks.c **** 				vPortFree( pxTCB );
3865:../freertos/tasks.c **** 			}
3866:../freertos/tasks.c **** 			else
3867:../freertos/tasks.c **** 			{
3868:../freertos/tasks.c **** 				/* Neither the stack nor the TCB were allocated dynamically, so
3869:../freertos/tasks.c **** 				nothing needs to be freed. */
3870:../freertos/tasks.c **** 				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
3871:../freertos/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3872:../freertos/tasks.c **** 			}
3873:../freertos/tasks.c **** 		}
3874:../freertos/tasks.c **** 		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
3875:../freertos/tasks.c **** 	}
3876:../freertos/tasks.c **** 
3877:../freertos/tasks.c **** #endif /* INCLUDE_vTaskDelete */
3878:../freertos/tasks.c **** /*-----------------------------------------------------------*/
3879:../freertos/tasks.c **** 
3880:../freertos/tasks.c **** static void prvResetNextTaskUnblockTime( void )
3881:../freertos/tasks.c **** {
3882:../freertos/tasks.c **** TCB_t *pxTCB;
3883:../freertos/tasks.c **** 
3884:../freertos/tasks.c **** 	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
3885:../freertos/tasks.c **** 	{
3886:../freertos/tasks.c **** 		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
3887:../freertos/tasks.c **** 		the maximum possible value so it is	extremely unlikely that the
3888:../freertos/tasks.c **** 		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
3889:../freertos/tasks.c **** 		there is an item in the delayed list. */
3890:../freertos/tasks.c **** 		xNextTaskUnblockTime = portMAX_DELAY;
3891:../freertos/tasks.c **** 	}
3892:../freertos/tasks.c **** 	else
3893:../freertos/tasks.c **** 	{
3894:../freertos/tasks.c **** 		/* The new current delayed list is not empty, get the value of
3895:../freertos/tasks.c **** 		the item at the head of the delayed list.  This is the time at
3896:../freertos/tasks.c **** 		which the task at the head of the delayed list should be removed
3897:../freertos/tasks.c **** 		from the Blocked state. */
3898:../freertos/tasks.c **** 		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as thi
3899:../freertos/tasks.c **** 		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
3900:../freertos/tasks.c **** 	}
3901:../freertos/tasks.c **** }
3902:../freertos/tasks.c **** /*-----------------------------------------------------------*/
ARM GAS  /tmp/ccGXytas.s 			page 70


3903:../freertos/tasks.c **** 
3904:../freertos/tasks.c **** #if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )
3905:../freertos/tasks.c **** 
3906:../freertos/tasks.c **** 	TaskHandle_t xTaskGetCurrentTaskHandle( void )
3907:../freertos/tasks.c **** 	{
3908:../freertos/tasks.c **** 	TaskHandle_t xReturn;
3909:../freertos/tasks.c **** 
3910:../freertos/tasks.c **** 		/* A critical section is not required as this is not called from
3911:../freertos/tasks.c **** 		an interrupt and the current TCB will always be the same for any
3912:../freertos/tasks.c **** 		individual execution thread. */
3913:../freertos/tasks.c **** 		xReturn = pxCurrentTCB;
3914:../freertos/tasks.c **** 
3915:../freertos/tasks.c **** 		return xReturn;
3916:../freertos/tasks.c **** 	}
3917:../freertos/tasks.c **** 
3918:../freertos/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) ) */
3919:../freertos/tasks.c **** /*-----------------------------------------------------------*/
3920:../freertos/tasks.c **** 
3921:../freertos/tasks.c **** #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
3922:../freertos/tasks.c **** 
3923:../freertos/tasks.c **** 	BaseType_t xTaskGetSchedulerState( void )
3924:../freertos/tasks.c **** 	{
3925:../freertos/tasks.c **** 	BaseType_t xReturn;
3926:../freertos/tasks.c **** 
3927:../freertos/tasks.c **** 		if( xSchedulerRunning == pdFALSE )
3928:../freertos/tasks.c **** 		{
3929:../freertos/tasks.c **** 			xReturn = taskSCHEDULER_NOT_STARTED;
3930:../freertos/tasks.c **** 		}
3931:../freertos/tasks.c **** 		else
3932:../freertos/tasks.c **** 		{
3933:../freertos/tasks.c **** 			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
3934:../freertos/tasks.c **** 			{
3935:../freertos/tasks.c **** 				xReturn = taskSCHEDULER_RUNNING;
3936:../freertos/tasks.c **** 			}
3937:../freertos/tasks.c **** 			else
3938:../freertos/tasks.c **** 			{
3939:../freertos/tasks.c **** 				xReturn = taskSCHEDULER_SUSPENDED;
3940:../freertos/tasks.c **** 			}
3941:../freertos/tasks.c **** 		}
3942:../freertos/tasks.c **** 
3943:../freertos/tasks.c **** 		return xReturn;
3944:../freertos/tasks.c **** 	}
3945:../freertos/tasks.c **** 
3946:../freertos/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) ) */
3947:../freertos/tasks.c **** /*-----------------------------------------------------------*/
3948:../freertos/tasks.c **** 
3949:../freertos/tasks.c **** #if ( configUSE_MUTEXES == 1 )
3950:../freertos/tasks.c **** 
3951:../freertos/tasks.c **** 	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
3952:../freertos/tasks.c **** 	{
3953:../freertos/tasks.c **** 	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
3954:../freertos/tasks.c **** 	BaseType_t xReturn = pdFALSE;
3955:../freertos/tasks.c **** 
3956:../freertos/tasks.c **** 		/* If the mutex was given back by an interrupt while the queue was
3957:../freertos/tasks.c **** 		locked then the mutex holder might now be NULL.  _RB_ Is this still
3958:../freertos/tasks.c **** 		needed as interrupts can no longer use mutexes? */
3959:../freertos/tasks.c **** 		if( pxMutexHolder != NULL )
ARM GAS  /tmp/ccGXytas.s 			page 71


3960:../freertos/tasks.c **** 		{
3961:../freertos/tasks.c **** 			/* If the holder of the mutex has a priority below the priority of
3962:../freertos/tasks.c **** 			the task attempting to obtain the mutex then it will temporarily
3963:../freertos/tasks.c **** 			inherit the priority of the task attempting to obtain the mutex. */
3964:../freertos/tasks.c **** 			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
3965:../freertos/tasks.c **** 			{
3966:../freertos/tasks.c **** 				/* Adjust the mutex holder state to account for its new
3967:../freertos/tasks.c **** 				priority.  Only reset the event list item value if the value is
3968:../freertos/tasks.c **** 				not being used for anything else. */
3969:../freertos/tasks.c **** 				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VA
3970:../freertos/tasks.c **** 				{
3971:../freertos/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIOR
3972:../freertos/tasks.c **** 				}
3973:../freertos/tasks.c **** 				else
3974:../freertos/tasks.c **** 				{
3975:../freertos/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3976:../freertos/tasks.c **** 				}
3977:../freertos/tasks.c **** 
3978:../freertos/tasks.c **** 				/* If the task being modified is in the ready state it will need
3979:../freertos/tasks.c **** 				to be moved into a new list. */
3980:../freertos/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutex
3981:../freertos/tasks.c **** 				{
3982:../freertos/tasks.c **** 					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
3983:../freertos/tasks.c **** 					{
3984:../freertos/tasks.c **** 						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
3985:../freertos/tasks.c **** 					}
3986:../freertos/tasks.c **** 					else
3987:../freertos/tasks.c **** 					{
3988:../freertos/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3989:../freertos/tasks.c **** 					}
3990:../freertos/tasks.c **** 
3991:../freertos/tasks.c **** 					/* Inherit the priority before being moved into the new list. */
3992:../freertos/tasks.c **** 					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
3993:../freertos/tasks.c **** 					prvAddTaskToReadyList( pxMutexHolderTCB );
3994:../freertos/tasks.c **** 				}
3995:../freertos/tasks.c **** 				else
3996:../freertos/tasks.c **** 				{
3997:../freertos/tasks.c **** 					/* Just inherit the priority. */
3998:../freertos/tasks.c **** 					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
3999:../freertos/tasks.c **** 				}
4000:../freertos/tasks.c **** 
4001:../freertos/tasks.c **** 				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
4002:../freertos/tasks.c **** 
4003:../freertos/tasks.c **** 				/* Inheritance occurred. */
4004:../freertos/tasks.c **** 				xReturn = pdTRUE;
4005:../freertos/tasks.c **** 			}
4006:../freertos/tasks.c **** 			else
4007:../freertos/tasks.c **** 			{
4008:../freertos/tasks.c **** 				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
4009:../freertos/tasks.c **** 				{
4010:../freertos/tasks.c **** 					/* The base priority of the mutex holder is lower than the
4011:../freertos/tasks.c **** 					priority of the task attempting to take the mutex, but the
4012:../freertos/tasks.c **** 					current priority of the mutex holder is not lower than the
4013:../freertos/tasks.c **** 					priority of the task attempting to take the mutex.
4014:../freertos/tasks.c **** 					Therefore the mutex holder must have already inherited a
4015:../freertos/tasks.c **** 					priority, but inheritance would have occurred if that had
4016:../freertos/tasks.c **** 					not been the case. */
ARM GAS  /tmp/ccGXytas.s 			page 72


4017:../freertos/tasks.c **** 					xReturn = pdTRUE;
4018:../freertos/tasks.c **** 				}
4019:../freertos/tasks.c **** 				else
4020:../freertos/tasks.c **** 				{
4021:../freertos/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4022:../freertos/tasks.c **** 				}
4023:../freertos/tasks.c **** 			}
4024:../freertos/tasks.c **** 		}
4025:../freertos/tasks.c **** 		else
4026:../freertos/tasks.c **** 		{
4027:../freertos/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4028:../freertos/tasks.c **** 		}
4029:../freertos/tasks.c **** 
4030:../freertos/tasks.c **** 		return xReturn;
4031:../freertos/tasks.c **** 	}
4032:../freertos/tasks.c **** 
4033:../freertos/tasks.c **** #endif /* configUSE_MUTEXES */
4034:../freertos/tasks.c **** /*-----------------------------------------------------------*/
4035:../freertos/tasks.c **** 
4036:../freertos/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4037:../freertos/tasks.c **** 
4038:../freertos/tasks.c **** 	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
4039:../freertos/tasks.c **** 	{
4040:../freertos/tasks.c **** 	TCB_t * const pxTCB = pxMutexHolder;
4041:../freertos/tasks.c **** 	BaseType_t xReturn = pdFALSE;
4042:../freertos/tasks.c **** 
4043:../freertos/tasks.c **** 		if( pxMutexHolder != NULL )
4044:../freertos/tasks.c **** 		{
4045:../freertos/tasks.c **** 			/* A task can only have an inherited priority if it holds the mutex.
4046:../freertos/tasks.c **** 			If the mutex is held by a task then it cannot be given from an
4047:../freertos/tasks.c **** 			interrupt, and if a mutex is given by the holding task then it must
4048:../freertos/tasks.c **** 			be the running state task. */
4049:../freertos/tasks.c **** 			configASSERT( pxTCB == pxCurrentTCB );
4050:../freertos/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
4051:../freertos/tasks.c **** 			( pxTCB->uxMutexesHeld )--;
4052:../freertos/tasks.c **** 
4053:../freertos/tasks.c **** 			/* Has the holder of the mutex inherited the priority of another
4054:../freertos/tasks.c **** 			task? */
4055:../freertos/tasks.c **** 			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
4056:../freertos/tasks.c **** 			{
4057:../freertos/tasks.c **** 				/* Only disinherit if no other mutexes are held. */
4058:../freertos/tasks.c **** 				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
4059:../freertos/tasks.c **** 				{
4060:../freertos/tasks.c **** 					/* A task can only have an inherited priority if it holds
4061:../freertos/tasks.c **** 					the mutex.  If the mutex is held by a task then it cannot be
4062:../freertos/tasks.c **** 					given from an interrupt, and if a mutex is given by the
4063:../freertos/tasks.c **** 					holding task then it must be the running state task.  Remove
4064:../freertos/tasks.c **** 					the holding task from the ready list. */
4065:../freertos/tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
4066:../freertos/tasks.c **** 					{
4067:../freertos/tasks.c **** 						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
4068:../freertos/tasks.c **** 					}
4069:../freertos/tasks.c **** 					else
4070:../freertos/tasks.c **** 					{
4071:../freertos/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
4072:../freertos/tasks.c **** 					}
4073:../freertos/tasks.c **** 
ARM GAS  /tmp/ccGXytas.s 			page 73


4074:../freertos/tasks.c **** 					/* Disinherit the priority before adding the task into the
4075:../freertos/tasks.c **** 					new	ready list. */
4076:../freertos/tasks.c **** 					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
4077:../freertos/tasks.c **** 					pxTCB->uxPriority = pxTCB->uxBasePriority;
4078:../freertos/tasks.c **** 
4079:../freertos/tasks.c **** 					/* Reset the event list item value.  It cannot be in use for
4080:../freertos/tasks.c **** 					any other purpose if this task is running, and it must be
4081:../freertos/tasks.c **** 					running to give back the mutex. */
4082:../freertos/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( T
4083:../freertos/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
4084:../freertos/tasks.c **** 
4085:../freertos/tasks.c **** 					/* Return true to indicate that a context switch is required.
4086:../freertos/tasks.c **** 					This is only actually required in the corner case whereby
4087:../freertos/tasks.c **** 					multiple mutexes were held and the mutexes were given back
4088:../freertos/tasks.c **** 					in an order different to that in which they were taken.
4089:../freertos/tasks.c **** 					If a context switch did not occur when the first mutex was
4090:../freertos/tasks.c **** 					returned, even if a task was waiting on it, then a context
4091:../freertos/tasks.c **** 					switch should occur when the last mutex is returned whether
4092:../freertos/tasks.c **** 					a task is waiting on it or not. */
4093:../freertos/tasks.c **** 					xReturn = pdTRUE;
4094:../freertos/tasks.c **** 				}
4095:../freertos/tasks.c **** 				else
4096:../freertos/tasks.c **** 				{
4097:../freertos/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4098:../freertos/tasks.c **** 				}
4099:../freertos/tasks.c **** 			}
4100:../freertos/tasks.c **** 			else
4101:../freertos/tasks.c **** 			{
4102:../freertos/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4103:../freertos/tasks.c **** 			}
4104:../freertos/tasks.c **** 		}
4105:../freertos/tasks.c **** 		else
4106:../freertos/tasks.c **** 		{
4107:../freertos/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4108:../freertos/tasks.c **** 		}
4109:../freertos/tasks.c **** 
4110:../freertos/tasks.c **** 		return xReturn;
4111:../freertos/tasks.c **** 	}
4112:../freertos/tasks.c **** 
4113:../freertos/tasks.c **** #endif /* configUSE_MUTEXES */
4114:../freertos/tasks.c **** /*-----------------------------------------------------------*/
4115:../freertos/tasks.c **** 
4116:../freertos/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4117:../freertos/tasks.c **** 
4118:../freertos/tasks.c **** 	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestP
4119:../freertos/tasks.c **** 	{
4120:../freertos/tasks.c **** 	TCB_t * const pxTCB = pxMutexHolder;
4121:../freertos/tasks.c **** 	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
4122:../freertos/tasks.c **** 	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
4123:../freertos/tasks.c **** 
4124:../freertos/tasks.c **** 		if( pxMutexHolder != NULL )
4125:../freertos/tasks.c **** 		{
4126:../freertos/tasks.c **** 			/* If pxMutexHolder is not NULL then the holder must hold at least
4127:../freertos/tasks.c **** 			one mutex. */
4128:../freertos/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
4129:../freertos/tasks.c **** 
4130:../freertos/tasks.c **** 			/* Determine the priority to which the priority of the task that
ARM GAS  /tmp/ccGXytas.s 			page 74


4131:../freertos/tasks.c **** 			holds the mutex should be set.  This will be the greater of the
4132:../freertos/tasks.c **** 			holding task's base priority and the priority of the highest
4133:../freertos/tasks.c **** 			priority task that is waiting to obtain the mutex. */
4134:../freertos/tasks.c **** 			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
4135:../freertos/tasks.c **** 			{
4136:../freertos/tasks.c **** 				uxPriorityToUse = uxHighestPriorityWaitingTask;
4137:../freertos/tasks.c **** 			}
4138:../freertos/tasks.c **** 			else
4139:../freertos/tasks.c **** 			{
4140:../freertos/tasks.c **** 				uxPriorityToUse = pxTCB->uxBasePriority;
4141:../freertos/tasks.c **** 			}
4142:../freertos/tasks.c **** 
4143:../freertos/tasks.c **** 			/* Does the priority need to change? */
4144:../freertos/tasks.c **** 			if( pxTCB->uxPriority != uxPriorityToUse )
4145:../freertos/tasks.c **** 			{
4146:../freertos/tasks.c **** 				/* Only disinherit if no other mutexes are held.  This is a
4147:../freertos/tasks.c **** 				simplification in the priority inheritance implementation.  If
4148:../freertos/tasks.c **** 				the task that holds the mutex is also holding other mutexes then
4149:../freertos/tasks.c **** 				the other mutexes may have caused the priority inheritance. */
4150:../freertos/tasks.c **** 				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
4151:../freertos/tasks.c **** 				{
4152:../freertos/tasks.c **** 					/* If a task has timed out because it already holds the
4153:../freertos/tasks.c **** 					mutex it was trying to obtain then it cannot of inherited
4154:../freertos/tasks.c **** 					its own priority. */
4155:../freertos/tasks.c **** 					configASSERT( pxTCB != pxCurrentTCB );
4156:../freertos/tasks.c **** 
4157:../freertos/tasks.c **** 					/* Disinherit the priority, remembering the previous
4158:../freertos/tasks.c **** 					priority to facilitate determining the subject task's
4159:../freertos/tasks.c **** 					state. */
4160:../freertos/tasks.c **** 					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
4161:../freertos/tasks.c **** 					uxPriorityUsedOnEntry = pxTCB->uxPriority;
4162:../freertos/tasks.c **** 					pxTCB->uxPriority = uxPriorityToUse;
4163:../freertos/tasks.c **** 
4164:../freertos/tasks.c **** 					/* Only reset the event list item value if the value is not
4165:../freertos/tasks.c **** 					being used for anything else. */
4166:../freertos/tasks.c **** 					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE
4167:../freertos/tasks.c **** 					{
4168:../freertos/tasks.c **** 						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( 
4169:../freertos/tasks.c **** 					}
4170:../freertos/tasks.c **** 					else
4171:../freertos/tasks.c **** 					{
4172:../freertos/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
4173:../freertos/tasks.c **** 					}
4174:../freertos/tasks.c **** 
4175:../freertos/tasks.c **** 					/* If the running task is not the task that holds the mutex
4176:../freertos/tasks.c **** 					then the task that holds the mutex could be in either the
4177:../freertos/tasks.c **** 					Ready, Blocked or Suspended states.  Only remove the task
4178:../freertos/tasks.c **** 					from its current state list if it is in the Ready state as
4179:../freertos/tasks.c **** 					the task's priority is going to change and there is one
4180:../freertos/tasks.c **** 					Ready list per priority. */
4181:../freertos/tasks.c **** 					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xState
4182:../freertos/tasks.c **** 					{
4183:../freertos/tasks.c **** 						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
4184:../freertos/tasks.c **** 						{
4185:../freertos/tasks.c **** 							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
4186:../freertos/tasks.c **** 						}
4187:../freertos/tasks.c **** 						else
ARM GAS  /tmp/ccGXytas.s 			page 75


4188:../freertos/tasks.c **** 						{
4189:../freertos/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
4190:../freertos/tasks.c **** 						}
4191:../freertos/tasks.c **** 
4192:../freertos/tasks.c **** 						prvAddTaskToReadyList( pxTCB );
4193:../freertos/tasks.c **** 					}
4194:../freertos/tasks.c **** 					else
4195:../freertos/tasks.c **** 					{
4196:../freertos/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
4197:../freertos/tasks.c **** 					}
4198:../freertos/tasks.c **** 				}
4199:../freertos/tasks.c **** 				else
4200:../freertos/tasks.c **** 				{
4201:../freertos/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4202:../freertos/tasks.c **** 				}
4203:../freertos/tasks.c **** 			}
4204:../freertos/tasks.c **** 			else
4205:../freertos/tasks.c **** 			{
4206:../freertos/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4207:../freertos/tasks.c **** 			}
4208:../freertos/tasks.c **** 		}
4209:../freertos/tasks.c **** 		else
4210:../freertos/tasks.c **** 		{
4211:../freertos/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4212:../freertos/tasks.c **** 		}
4213:../freertos/tasks.c **** 	}
4214:../freertos/tasks.c **** 
4215:../freertos/tasks.c **** #endif /* configUSE_MUTEXES */
4216:../freertos/tasks.c **** /*-----------------------------------------------------------*/
4217:../freertos/tasks.c **** 
4218:../freertos/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
4219:../freertos/tasks.c **** 
4220:../freertos/tasks.c **** 	void vTaskEnterCritical( void )
4221:../freertos/tasks.c **** 	{
4222:../freertos/tasks.c **** 		portDISABLE_INTERRUPTS();
4223:../freertos/tasks.c **** 
4224:../freertos/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
4225:../freertos/tasks.c **** 		{
4226:../freertos/tasks.c **** 			( pxCurrentTCB->uxCriticalNesting )++;
4227:../freertos/tasks.c **** 
4228:../freertos/tasks.c **** 			/* This is not the interrupt safe version of the enter critical
4229:../freertos/tasks.c **** 			function so	assert() if it is being called from an interrupt
4230:../freertos/tasks.c **** 			context.  Only API functions that end in "FromISR" can be used in an
4231:../freertos/tasks.c **** 			interrupt.  Only assert if the critical nesting count is 1 to
4232:../freertos/tasks.c **** 			protect against recursive calls if the assert function also uses a
4233:../freertos/tasks.c **** 			critical section. */
4234:../freertos/tasks.c **** 			if( pxCurrentTCB->uxCriticalNesting == 1 )
4235:../freertos/tasks.c **** 			{
4236:../freertos/tasks.c **** 				portASSERT_IF_IN_ISR();
4237:../freertos/tasks.c **** 			}
4238:../freertos/tasks.c **** 		}
4239:../freertos/tasks.c **** 		else
4240:../freertos/tasks.c **** 		{
4241:../freertos/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4242:../freertos/tasks.c **** 		}
4243:../freertos/tasks.c **** 	}
4244:../freertos/tasks.c **** 
ARM GAS  /tmp/ccGXytas.s 			page 76


4245:../freertos/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
4246:../freertos/tasks.c **** /*-----------------------------------------------------------*/
4247:../freertos/tasks.c **** 
4248:../freertos/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
4249:../freertos/tasks.c **** 
4250:../freertos/tasks.c **** 	void vTaskExitCritical( void )
4251:../freertos/tasks.c **** 	{
4252:../freertos/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
4253:../freertos/tasks.c **** 		{
4254:../freertos/tasks.c **** 			if( pxCurrentTCB->uxCriticalNesting > 0U )
4255:../freertos/tasks.c **** 			{
4256:../freertos/tasks.c **** 				( pxCurrentTCB->uxCriticalNesting )--;
4257:../freertos/tasks.c **** 
4258:../freertos/tasks.c **** 				if( pxCurrentTCB->uxCriticalNesting == 0U )
4259:../freertos/tasks.c **** 				{
4260:../freertos/tasks.c **** 					portENABLE_INTERRUPTS();
4261:../freertos/tasks.c **** 				}
4262:../freertos/tasks.c **** 				else
4263:../freertos/tasks.c **** 				{
4264:../freertos/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4265:../freertos/tasks.c **** 				}
4266:../freertos/tasks.c **** 			}
4267:../freertos/tasks.c **** 			else
4268:../freertos/tasks.c **** 			{
4269:../freertos/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4270:../freertos/tasks.c **** 			}
4271:../freertos/tasks.c **** 		}
4272:../freertos/tasks.c **** 		else
4273:../freertos/tasks.c **** 		{
4274:../freertos/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4275:../freertos/tasks.c **** 		}
4276:../freertos/tasks.c **** 	}
4277:../freertos/tasks.c **** 
4278:../freertos/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
4279:../freertos/tasks.c **** /*-----------------------------------------------------------*/
4280:../freertos/tasks.c **** 
4281:../freertos/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
4282:../freertos/tasks.c **** 
4283:../freertos/tasks.c **** 	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
4284:../freertos/tasks.c **** 	{
4285:../freertos/tasks.c **** 	size_t x;
4286:../freertos/tasks.c **** 
4287:../freertos/tasks.c **** 		/* Start by copying the entire string. */
4288:../freertos/tasks.c **** 		strcpy( pcBuffer, pcTaskName );
4289:../freertos/tasks.c **** 
4290:../freertos/tasks.c **** 		/* Pad the end of the string with spaces to ensure columns line up when
4291:../freertos/tasks.c **** 		printed out. */
4292:../freertos/tasks.c **** 		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
4293:../freertos/tasks.c **** 		{
4294:../freertos/tasks.c **** 			pcBuffer[ x ] = ' ';
4295:../freertos/tasks.c **** 		}
4296:../freertos/tasks.c **** 
4297:../freertos/tasks.c **** 		/* Terminate. */
4298:../freertos/tasks.c **** 		pcBuffer[ x ] = ( char ) 0x00;
4299:../freertos/tasks.c **** 
4300:../freertos/tasks.c **** 		/* Return the new end of string. */
4301:../freertos/tasks.c **** 		return &( pcBuffer[ x ] );
ARM GAS  /tmp/ccGXytas.s 			page 77


4302:../freertos/tasks.c **** 	}
4303:../freertos/tasks.c **** 
4304:../freertos/tasks.c **** #endif /* ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) */
4305:../freertos/tasks.c **** /*-----------------------------------------------------------*/
4306:../freertos/tasks.c **** 
4307:../freertos/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( config
4308:../freertos/tasks.c **** 
4309:../freertos/tasks.c **** 	void vTaskList( char * pcWriteBuffer )
4310:../freertos/tasks.c **** 	{
4311:../freertos/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
4312:../freertos/tasks.c **** 	UBaseType_t uxArraySize, x;
4313:../freertos/tasks.c **** 	char cStatus;
4314:../freertos/tasks.c **** 
4315:../freertos/tasks.c **** 		/*
4316:../freertos/tasks.c **** 		 * PLEASE NOTE:
4317:../freertos/tasks.c **** 		 *
4318:../freertos/tasks.c **** 		 * This function is provided for convenience only, and is used by many
4319:../freertos/tasks.c **** 		 * of the demo applications.  Do not consider it to be part of the
4320:../freertos/tasks.c **** 		 * scheduler.
4321:../freertos/tasks.c **** 		 *
4322:../freertos/tasks.c **** 		 * vTaskList() calls uxTaskGetSystemState(), then formats part of the
4323:../freertos/tasks.c **** 		 * uxTaskGetSystemState() output into a human readable table that
4324:../freertos/tasks.c **** 		 * displays task names, states and stack usage.
4325:../freertos/tasks.c **** 		 *
4326:../freertos/tasks.c **** 		 * vTaskList() has a dependency on the sprintf() C library function that
4327:../freertos/tasks.c **** 		 * might bloat the code size, use a lot of stack, and provide different
4328:../freertos/tasks.c **** 		 * results on different platforms.  An alternative, tiny, third party,
4329:../freertos/tasks.c **** 		 * and limited functionality implementation of sprintf() is provided in
4330:../freertos/tasks.c **** 		 * many of the FreeRTOS/Demo sub-directories in a file called
4331:../freertos/tasks.c **** 		 * printf-stdarg.c (note printf-stdarg.c does not provide a full
4332:../freertos/tasks.c **** 		 * snprintf() implementation!).
4333:../freertos/tasks.c **** 		 *
4334:../freertos/tasks.c **** 		 * It is recommended that production systems call uxTaskGetSystemState()
4335:../freertos/tasks.c **** 		 * directly to get access to raw stats data, rather than indirectly
4336:../freertos/tasks.c **** 		 * through a call to vTaskList().
4337:../freertos/tasks.c **** 		 */
4338:../freertos/tasks.c **** 
4339:../freertos/tasks.c **** 
4340:../freertos/tasks.c **** 		/* Make sure the write buffer does not contain a string. */
4341:../freertos/tasks.c **** 		*pcWriteBuffer = ( char ) 0x00;
4342:../freertos/tasks.c **** 
4343:../freertos/tasks.c **** 		/* Take a snapshot of the number of tasks in case it changes while this
4344:../freertos/tasks.c **** 		function is executing. */
4345:../freertos/tasks.c **** 		uxArraySize = uxCurrentNumberOfTasks;
4346:../freertos/tasks.c **** 
4347:../freertos/tasks.c **** 		/* Allocate an array index for each task.  NOTE!  if
4348:../freertos/tasks.c **** 		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
4349:../freertos/tasks.c **** 		equate to NULL. */
4350:../freertos/tasks.c **** 		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e907
4351:../freertos/tasks.c **** 
4352:../freertos/tasks.c **** 		if( pxTaskStatusArray != NULL )
4353:../freertos/tasks.c **** 		{
4354:../freertos/tasks.c **** 			/* Generate the (binary) data. */
4355:../freertos/tasks.c **** 			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
4356:../freertos/tasks.c **** 
4357:../freertos/tasks.c **** 			/* Create a human readable table from the binary data. */
4358:../freertos/tasks.c **** 			for( x = 0; x < uxArraySize; x++ )
ARM GAS  /tmp/ccGXytas.s 			page 78


4359:../freertos/tasks.c **** 			{
4360:../freertos/tasks.c **** 				switch( pxTaskStatusArray[ x ].eCurrentState )
4361:../freertos/tasks.c **** 				{
4362:../freertos/tasks.c **** 					case eRunning:		cStatus = tskRUNNING_CHAR;
4363:../freertos/tasks.c **** 										break;
4364:../freertos/tasks.c **** 
4365:../freertos/tasks.c **** 					case eReady:		cStatus = tskREADY_CHAR;
4366:../freertos/tasks.c **** 										break;
4367:../freertos/tasks.c **** 
4368:../freertos/tasks.c **** 					case eBlocked:		cStatus = tskBLOCKED_CHAR;
4369:../freertos/tasks.c **** 										break;
4370:../freertos/tasks.c **** 
4371:../freertos/tasks.c **** 					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
4372:../freertos/tasks.c **** 										break;
4373:../freertos/tasks.c **** 
4374:../freertos/tasks.c **** 					case eDeleted:		cStatus = tskDELETED_CHAR;
4375:../freertos/tasks.c **** 										break;
4376:../freertos/tasks.c **** 
4377:../freertos/tasks.c **** 					case eInvalid:		/* Fall through. */
4378:../freertos/tasks.c **** 					default:			/* Should not get here, but it is included
4379:../freertos/tasks.c **** 										to prevent static checking errors. */
4380:../freertos/tasks.c **** 										cStatus = ( char ) 0x00;
4381:../freertos/tasks.c **** 										break;
4382:../freertos/tasks.c **** 				}
4383:../freertos/tasks.c **** 
4384:../freertos/tasks.c **** 				/* Write the task name to the string, padding with spaces so it
4385:../freertos/tasks.c **** 				can be printed in tabular form more easily. */
4386:../freertos/tasks.c **** 				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
4387:../freertos/tasks.c **** 
4388:../freertos/tasks.c **** 				/* Write the rest of the string. */
4389:../freertos/tasks.c **** 				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x 
4390:../freertos/tasks.c **** 				pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers 
4391:../freertos/tasks.c **** 			}
4392:../freertos/tasks.c **** 
4393:../freertos/tasks.c **** 			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4394:../freertos/tasks.c **** 			is 0 then vPortFree() will be #defined to nothing. */
4395:../freertos/tasks.c **** 			vPortFree( pxTaskStatusArray );
4396:../freertos/tasks.c **** 		}
4397:../freertos/tasks.c **** 		else
4398:../freertos/tasks.c **** 		{
4399:../freertos/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4400:../freertos/tasks.c **** 		}
4401:../freertos/tasks.c **** 	}
4402:../freertos/tasks.c **** 
4403:../freertos/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( 
4404:../freertos/tasks.c **** /*----------------------------------------------------------*/
4405:../freertos/tasks.c **** 
4406:../freertos/tasks.c **** #if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( c
4407:../freertos/tasks.c **** 
4408:../freertos/tasks.c **** 	void vTaskGetRunTimeStats( char *pcWriteBuffer )
4409:../freertos/tasks.c **** 	{
4410:../freertos/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
4411:../freertos/tasks.c **** 	UBaseType_t uxArraySize, x;
4412:../freertos/tasks.c **** 	uint32_t ulTotalTime, ulStatsAsPercentage;
4413:../freertos/tasks.c **** 
4414:../freertos/tasks.c **** 		#if( configUSE_TRACE_FACILITY != 1 )
4415:../freertos/tasks.c **** 		{
ARM GAS  /tmp/ccGXytas.s 			page 79


4416:../freertos/tasks.c **** 			#error configUSE_TRACE_FACILITY must also be set to 1 in FreeRTOSConfig.h to use vTaskGetRunTime
4417:../freertos/tasks.c **** 		}
4418:../freertos/tasks.c **** 		#endif
4419:../freertos/tasks.c **** 
4420:../freertos/tasks.c **** 		/*
4421:../freertos/tasks.c **** 		 * PLEASE NOTE:
4422:../freertos/tasks.c **** 		 *
4423:../freertos/tasks.c **** 		 * This function is provided for convenience only, and is used by many
4424:../freertos/tasks.c **** 		 * of the demo applications.  Do not consider it to be part of the
4425:../freertos/tasks.c **** 		 * scheduler.
4426:../freertos/tasks.c **** 		 *
4427:../freertos/tasks.c **** 		 * vTaskGetRunTimeStats() calls uxTaskGetSystemState(), then formats part
4428:../freertos/tasks.c **** 		 * of the uxTaskGetSystemState() output into a human readable table that
4429:../freertos/tasks.c **** 		 * displays the amount of time each task has spent in the Running state
4430:../freertos/tasks.c **** 		 * in both absolute and percentage terms.
4431:../freertos/tasks.c **** 		 *
4432:../freertos/tasks.c **** 		 * vTaskGetRunTimeStats() has a dependency on the sprintf() C library
4433:../freertos/tasks.c **** 		 * function that might bloat the code size, use a lot of stack, and
4434:../freertos/tasks.c **** 		 * provide different results on different platforms.  An alternative,
4435:../freertos/tasks.c **** 		 * tiny, third party, and limited functionality implementation of
4436:../freertos/tasks.c **** 		 * sprintf() is provided in many of the FreeRTOS/Demo sub-directories in
4437:../freertos/tasks.c **** 		 * a file called printf-stdarg.c (note printf-stdarg.c does not provide
4438:../freertos/tasks.c **** 		 * a full snprintf() implementation!).
4439:../freertos/tasks.c **** 		 *
4440:../freertos/tasks.c **** 		 * It is recommended that production systems call uxTaskGetSystemState()
4441:../freertos/tasks.c **** 		 * directly to get access to raw stats data, rather than indirectly
4442:../freertos/tasks.c **** 		 * through a call to vTaskGetRunTimeStats().
4443:../freertos/tasks.c **** 		 */
4444:../freertos/tasks.c **** 
4445:../freertos/tasks.c **** 		/* Make sure the write buffer does not contain a string. */
4446:../freertos/tasks.c **** 		*pcWriteBuffer = ( char ) 0x00;
4447:../freertos/tasks.c **** 
4448:../freertos/tasks.c **** 		/* Take a snapshot of the number of tasks in case it changes while this
4449:../freertos/tasks.c **** 		function is executing. */
4450:../freertos/tasks.c **** 		uxArraySize = uxCurrentNumberOfTasks;
4451:../freertos/tasks.c **** 
4452:../freertos/tasks.c **** 		/* Allocate an array index for each task.  NOTE!  If
4453:../freertos/tasks.c **** 		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
4454:../freertos/tasks.c **** 		equate to NULL. */
4455:../freertos/tasks.c **** 		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e907
4456:../freertos/tasks.c **** 
4457:../freertos/tasks.c **** 		if( pxTaskStatusArray != NULL )
4458:../freertos/tasks.c **** 		{
4459:../freertos/tasks.c **** 			/* Generate the (binary) data. */
4460:../freertos/tasks.c **** 			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
4461:../freertos/tasks.c **** 
4462:../freertos/tasks.c **** 			/* For percentage calculations. */
4463:../freertos/tasks.c **** 			ulTotalTime /= 100UL;
4464:../freertos/tasks.c **** 
4465:../freertos/tasks.c **** 			/* Avoid divide by zero errors. */
4466:../freertos/tasks.c **** 			if( ulTotalTime > 0UL )
4467:../freertos/tasks.c **** 			{
4468:../freertos/tasks.c **** 				/* Create a human readable table from the binary data. */
4469:../freertos/tasks.c **** 				for( x = 0; x < uxArraySize; x++ )
4470:../freertos/tasks.c **** 				{
4471:../freertos/tasks.c **** 					/* What percentage of the total run time has the task used?
4472:../freertos/tasks.c **** 					This will always be rounded down to the nearest integer.
ARM GAS  /tmp/ccGXytas.s 			page 80


4473:../freertos/tasks.c **** 					ulTotalRunTimeDiv100 has already been divided by 100. */
4474:../freertos/tasks.c **** 					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
4475:../freertos/tasks.c **** 
4476:../freertos/tasks.c **** 					/* Write the task name to the string, padding with
4477:../freertos/tasks.c **** 					spaces so it can be printed in tabular form more
4478:../freertos/tasks.c **** 					easily. */
4479:../freertos/tasks.c **** 					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
4480:../freertos/tasks.c **** 
4481:../freertos/tasks.c **** 					if( ulStatsAsPercentage > 0UL )
4482:../freertos/tasks.c **** 					{
4483:../freertos/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4484:../freertos/tasks.c **** 						{
4485:../freertos/tasks.c **** 							sprintf( pcWriteBuffer, "\t%lu\t\t%lu%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter, ulSta
4486:../freertos/tasks.c **** 						}
4487:../freertos/tasks.c **** 						#else
4488:../freertos/tasks.c **** 						{
4489:../freertos/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
4490:../freertos/tasks.c **** 							printf() library can be used. */
4491:../freertos/tasks.c **** 							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTim
4492:../freertos/tasks.c **** 						}
4493:../freertos/tasks.c **** 						#endif
4494:../freertos/tasks.c **** 					}
4495:../freertos/tasks.c **** 					else
4496:../freertos/tasks.c **** 					{
4497:../freertos/tasks.c **** 						/* If the percentage is zero here then the task has
4498:../freertos/tasks.c **** 						consumed less than 1% of the total run time. */
4499:../freertos/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4500:../freertos/tasks.c **** 						{
4501:../freertos/tasks.c **** 							sprintf( pcWriteBuffer, "\t%lu\t\t<1%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter );
4502:../freertos/tasks.c **** 						}
4503:../freertos/tasks.c **** 						#else
4504:../freertos/tasks.c **** 						{
4505:../freertos/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
4506:../freertos/tasks.c **** 							printf() library can be used. */
4507:../freertos/tasks.c **** 							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTim
4508:../freertos/tasks.c **** 						}
4509:../freertos/tasks.c **** 						#endif
4510:../freertos/tasks.c **** 					}
4511:../freertos/tasks.c **** 
4512:../freertos/tasks.c **** 					pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers
4513:../freertos/tasks.c **** 				}
4514:../freertos/tasks.c **** 			}
4515:../freertos/tasks.c **** 			else
4516:../freertos/tasks.c **** 			{
4517:../freertos/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4518:../freertos/tasks.c **** 			}
4519:../freertos/tasks.c **** 
4520:../freertos/tasks.c **** 			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4521:../freertos/tasks.c **** 			is 0 then vPortFree() will be #defined to nothing. */
4522:../freertos/tasks.c **** 			vPortFree( pxTaskStatusArray );
4523:../freertos/tasks.c **** 		}
4524:../freertos/tasks.c **** 		else
4525:../freertos/tasks.c **** 		{
4526:../freertos/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4527:../freertos/tasks.c **** 		}
4528:../freertos/tasks.c **** 	}
4529:../freertos/tasks.c **** 
ARM GAS  /tmp/ccGXytas.s 			page 81


4530:../freertos/tasks.c **** #endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) 
4531:../freertos/tasks.c **** /*-----------------------------------------------------------*/
4532:../freertos/tasks.c **** 
4533:../freertos/tasks.c **** TickType_t uxTaskResetEventItemValue( void )
4534:../freertos/tasks.c **** {
4535:../freertos/tasks.c **** TickType_t uxReturn;
4536:../freertos/tasks.c **** 
4537:../freertos/tasks.c **** 	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
4538:../freertos/tasks.c **** 
4539:../freertos/tasks.c **** 	/* Reset the event list item to its normal value - so it can be used with
4540:../freertos/tasks.c **** 	queues and semaphores. */
4541:../freertos/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES 
4542:../freertos/tasks.c **** 
4543:../freertos/tasks.c **** 	return uxReturn;
4544:../freertos/tasks.c **** }
4545:../freertos/tasks.c **** /*-----------------------------------------------------------*/
4546:../freertos/tasks.c **** 
4547:../freertos/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4548:../freertos/tasks.c **** 
4549:../freertos/tasks.c **** 	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
4550:../freertos/tasks.c **** 	{
4551:../freertos/tasks.c **** 		/* If xSemaphoreCreateMutex() is called before any tasks have been created
4552:../freertos/tasks.c **** 		then pxCurrentTCB will be NULL. */
4553:../freertos/tasks.c **** 		if( pxCurrentTCB != NULL )
4554:../freertos/tasks.c **** 		{
4555:../freertos/tasks.c **** 			( pxCurrentTCB->uxMutexesHeld )++;
4556:../freertos/tasks.c **** 		}
4557:../freertos/tasks.c **** 
4558:../freertos/tasks.c **** 		return pxCurrentTCB;
4559:../freertos/tasks.c **** 	}
4560:../freertos/tasks.c **** 
4561:../freertos/tasks.c **** #endif /* configUSE_MUTEXES */
4562:../freertos/tasks.c **** /*-----------------------------------------------------------*/
4563:../freertos/tasks.c **** 
4564:../freertos/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4565:../freertos/tasks.c **** 
4566:../freertos/tasks.c **** 	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
4567:../freertos/tasks.c **** 	{
4568:../freertos/tasks.c **** 	uint32_t ulReturn;
4569:../freertos/tasks.c **** 
4570:../freertos/tasks.c **** 		taskENTER_CRITICAL();
4571:../freertos/tasks.c **** 		{
4572:../freertos/tasks.c **** 			/* Only block if the notification count is not already non-zero. */
4573:../freertos/tasks.c **** 			if( pxCurrentTCB->ulNotifiedValue == 0UL )
4574:../freertos/tasks.c **** 			{
4575:../freertos/tasks.c **** 				/* Mark this task as waiting for a notification. */
4576:../freertos/tasks.c **** 				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
4577:../freertos/tasks.c **** 
4578:../freertos/tasks.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
4579:../freertos/tasks.c **** 				{
4580:../freertos/tasks.c **** 					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
4581:../freertos/tasks.c **** 					traceTASK_NOTIFY_TAKE_BLOCK();
4582:../freertos/tasks.c **** 
4583:../freertos/tasks.c **** 					/* All ports are written to allow a yield in a critical
4584:../freertos/tasks.c **** 					section (some will yield immediately, others wait until the
4585:../freertos/tasks.c **** 					critical section exits) - but it is not something that
4586:../freertos/tasks.c **** 					application code should ever do. */
ARM GAS  /tmp/ccGXytas.s 			page 82


4587:../freertos/tasks.c **** 					portYIELD_WITHIN_API();
4588:../freertos/tasks.c **** 				}
4589:../freertos/tasks.c **** 				else
4590:../freertos/tasks.c **** 				{
4591:../freertos/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4592:../freertos/tasks.c **** 				}
4593:../freertos/tasks.c **** 			}
4594:../freertos/tasks.c **** 			else
4595:../freertos/tasks.c **** 			{
4596:../freertos/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4597:../freertos/tasks.c **** 			}
4598:../freertos/tasks.c **** 		}
4599:../freertos/tasks.c **** 		taskEXIT_CRITICAL();
4600:../freertos/tasks.c **** 
4601:../freertos/tasks.c **** 		taskENTER_CRITICAL();
4602:../freertos/tasks.c **** 		{
4603:../freertos/tasks.c **** 			traceTASK_NOTIFY_TAKE();
4604:../freertos/tasks.c **** 			ulReturn = pxCurrentTCB->ulNotifiedValue;
4605:../freertos/tasks.c **** 
4606:../freertos/tasks.c **** 			if( ulReturn != 0UL )
4607:../freertos/tasks.c **** 			{
4608:../freertos/tasks.c **** 				if( xClearCountOnExit != pdFALSE )
4609:../freertos/tasks.c **** 				{
4610:../freertos/tasks.c **** 					pxCurrentTCB->ulNotifiedValue = 0UL;
4611:../freertos/tasks.c **** 				}
4612:../freertos/tasks.c **** 				else
4613:../freertos/tasks.c **** 				{
4614:../freertos/tasks.c **** 					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
4615:../freertos/tasks.c **** 				}
4616:../freertos/tasks.c **** 			}
4617:../freertos/tasks.c **** 			else
4618:../freertos/tasks.c **** 			{
4619:../freertos/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4620:../freertos/tasks.c **** 			}
4621:../freertos/tasks.c **** 
4622:../freertos/tasks.c **** 			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
4623:../freertos/tasks.c **** 		}
4624:../freertos/tasks.c **** 		taskEXIT_CRITICAL();
4625:../freertos/tasks.c **** 
4626:../freertos/tasks.c **** 		return ulReturn;
4627:../freertos/tasks.c **** 	}
4628:../freertos/tasks.c **** 
4629:../freertos/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4630:../freertos/tasks.c **** /*-----------------------------------------------------------*/
4631:../freertos/tasks.c **** 
4632:../freertos/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4633:../freertos/tasks.c **** 
4634:../freertos/tasks.c **** 	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t 
4635:../freertos/tasks.c **** 	{
4636:../freertos/tasks.c **** 	BaseType_t xReturn;
4637:../freertos/tasks.c **** 
4638:../freertos/tasks.c **** 		taskENTER_CRITICAL();
4639:../freertos/tasks.c **** 		{
4640:../freertos/tasks.c **** 			/* Only block if a notification is not already pending. */
4641:../freertos/tasks.c **** 			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
4642:../freertos/tasks.c **** 			{
4643:../freertos/tasks.c **** 				/* Clear bits in the task's notification value as bits may get
ARM GAS  /tmp/ccGXytas.s 			page 83


4644:../freertos/tasks.c **** 				set	by the notifying task or interrupt.  This can be used to
4645:../freertos/tasks.c **** 				clear the value to zero. */
4646:../freertos/tasks.c **** 				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
4647:../freertos/tasks.c **** 
4648:../freertos/tasks.c **** 				/* Mark this task as waiting for a notification. */
4649:../freertos/tasks.c **** 				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
4650:../freertos/tasks.c **** 
4651:../freertos/tasks.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
4652:../freertos/tasks.c **** 				{
4653:../freertos/tasks.c **** 					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
4654:../freertos/tasks.c **** 					traceTASK_NOTIFY_WAIT_BLOCK();
4655:../freertos/tasks.c **** 
4656:../freertos/tasks.c **** 					/* All ports are written to allow a yield in a critical
4657:../freertos/tasks.c **** 					section (some will yield immediately, others wait until the
4658:../freertos/tasks.c **** 					critical section exits) - but it is not something that
4659:../freertos/tasks.c **** 					application code should ever do. */
4660:../freertos/tasks.c **** 					portYIELD_WITHIN_API();
4661:../freertos/tasks.c **** 				}
4662:../freertos/tasks.c **** 				else
4663:../freertos/tasks.c **** 				{
4664:../freertos/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4665:../freertos/tasks.c **** 				}
4666:../freertos/tasks.c **** 			}
4667:../freertos/tasks.c **** 			else
4668:../freertos/tasks.c **** 			{
4669:../freertos/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4670:../freertos/tasks.c **** 			}
4671:../freertos/tasks.c **** 		}
4672:../freertos/tasks.c **** 		taskEXIT_CRITICAL();
4673:../freertos/tasks.c **** 
4674:../freertos/tasks.c **** 		taskENTER_CRITICAL();
4675:../freertos/tasks.c **** 		{
4676:../freertos/tasks.c **** 			traceTASK_NOTIFY_WAIT();
4677:../freertos/tasks.c **** 
4678:../freertos/tasks.c **** 			if( pulNotificationValue != NULL )
4679:../freertos/tasks.c **** 			{
4680:../freertos/tasks.c **** 				/* Output the current notification value, which may or may not
4681:../freertos/tasks.c **** 				have changed. */
4682:../freertos/tasks.c **** 				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
4683:../freertos/tasks.c **** 			}
4684:../freertos/tasks.c **** 
4685:../freertos/tasks.c **** 			/* If ucNotifyValue is set then either the task never entered the
4686:../freertos/tasks.c **** 			blocked state (because a notification was already pending) or the
4687:../freertos/tasks.c **** 			task unblocked because of a notification.  Otherwise the task
4688:../freertos/tasks.c **** 			unblocked because of a timeout. */
4689:../freertos/tasks.c **** 			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
4690:../freertos/tasks.c **** 			{
4691:../freertos/tasks.c **** 				/* A notification was not received. */
4692:../freertos/tasks.c **** 				xReturn = pdFALSE;
4693:../freertos/tasks.c **** 			}
4694:../freertos/tasks.c **** 			else
4695:../freertos/tasks.c **** 			{
4696:../freertos/tasks.c **** 				/* A notification was already pending or a notification was
4697:../freertos/tasks.c **** 				received while the task was waiting. */
4698:../freertos/tasks.c **** 				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
4699:../freertos/tasks.c **** 				xReturn = pdTRUE;
4700:../freertos/tasks.c **** 			}
ARM GAS  /tmp/ccGXytas.s 			page 84


4701:../freertos/tasks.c **** 
4702:../freertos/tasks.c **** 			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
4703:../freertos/tasks.c **** 		}
4704:../freertos/tasks.c **** 		taskEXIT_CRITICAL();
4705:../freertos/tasks.c **** 
4706:../freertos/tasks.c **** 		return xReturn;
4707:../freertos/tasks.c **** 	}
4708:../freertos/tasks.c **** 
4709:../freertos/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4710:../freertos/tasks.c **** /*-----------------------------------------------------------*/
4711:../freertos/tasks.c **** 
4712:../freertos/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4713:../freertos/tasks.c **** 
4714:../freertos/tasks.c **** 	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction
4715:../freertos/tasks.c **** 	{
4716:../freertos/tasks.c **** 	TCB_t * pxTCB;
4717:../freertos/tasks.c **** 	BaseType_t xReturn = pdPASS;
4718:../freertos/tasks.c **** 	uint8_t ucOriginalNotifyState;
4719:../freertos/tasks.c **** 
4720:../freertos/tasks.c **** 		configASSERT( xTaskToNotify );
4721:../freertos/tasks.c **** 		pxTCB = xTaskToNotify;
4722:../freertos/tasks.c **** 
4723:../freertos/tasks.c **** 		taskENTER_CRITICAL();
4724:../freertos/tasks.c **** 		{
4725:../freertos/tasks.c **** 			if( pulPreviousNotificationValue != NULL )
4726:../freertos/tasks.c **** 			{
4727:../freertos/tasks.c **** 				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
4728:../freertos/tasks.c **** 			}
4729:../freertos/tasks.c **** 
4730:../freertos/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
4731:../freertos/tasks.c **** 
4732:../freertos/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
4733:../freertos/tasks.c **** 
4734:../freertos/tasks.c **** 			switch( eAction )
4735:../freertos/tasks.c **** 			{
4736:../freertos/tasks.c **** 				case eSetBits	:
4737:../freertos/tasks.c **** 					pxTCB->ulNotifiedValue |= ulValue;
4738:../freertos/tasks.c **** 					break;
4739:../freertos/tasks.c **** 
4740:../freertos/tasks.c **** 				case eIncrement	:
4741:../freertos/tasks.c **** 					( pxTCB->ulNotifiedValue )++;
4742:../freertos/tasks.c **** 					break;
4743:../freertos/tasks.c **** 
4744:../freertos/tasks.c **** 				case eSetValueWithOverwrite	:
4745:../freertos/tasks.c **** 					pxTCB->ulNotifiedValue = ulValue;
4746:../freertos/tasks.c **** 					break;
4747:../freertos/tasks.c **** 
4748:../freertos/tasks.c **** 				case eSetValueWithoutOverwrite :
4749:../freertos/tasks.c **** 					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
4750:../freertos/tasks.c **** 					{
4751:../freertos/tasks.c **** 						pxTCB->ulNotifiedValue = ulValue;
4752:../freertos/tasks.c **** 					}
4753:../freertos/tasks.c **** 					else
4754:../freertos/tasks.c **** 					{
4755:../freertos/tasks.c **** 						/* The value could not be written to the task. */
4756:../freertos/tasks.c **** 						xReturn = pdFAIL;
4757:../freertos/tasks.c **** 					}
ARM GAS  /tmp/ccGXytas.s 			page 85


4758:../freertos/tasks.c **** 					break;
4759:../freertos/tasks.c **** 
4760:../freertos/tasks.c **** 				case eNoAction:
4761:../freertos/tasks.c **** 					/* The task is being notified without its notify value being
4762:../freertos/tasks.c **** 					updated. */
4763:../freertos/tasks.c **** 					break;
4764:../freertos/tasks.c **** 
4765:../freertos/tasks.c **** 				default:
4766:../freertos/tasks.c **** 					/* Should not get here if all enums are handled.
4767:../freertos/tasks.c **** 					Artificially force an assert by testing a value the
4768:../freertos/tasks.c **** 					compiler can't assume is const. */
4769:../freertos/tasks.c **** 					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
4770:../freertos/tasks.c **** 
4771:../freertos/tasks.c **** 					break;
4772:../freertos/tasks.c **** 			}
4773:../freertos/tasks.c **** 
4774:../freertos/tasks.c **** 			traceTASK_NOTIFY();
4775:../freertos/tasks.c **** 
4776:../freertos/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4777:../freertos/tasks.c **** 			notification then unblock it now. */
4778:../freertos/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
4779:../freertos/tasks.c **** 			{
4780:../freertos/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
4781:../freertos/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
4782:../freertos/tasks.c **** 
4783:../freertos/tasks.c **** 				/* The task should not have been on an event list. */
4784:../freertos/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
4785:../freertos/tasks.c **** 
4786:../freertos/tasks.c **** 				#if( configUSE_TICKLESS_IDLE != 0 )
4787:../freertos/tasks.c **** 				{
4788:../freertos/tasks.c **** 					/* If a task is blocked waiting for a notification then
4789:../freertos/tasks.c **** 					xNextTaskUnblockTime might be set to the blocked task's time
4790:../freertos/tasks.c **** 					out time.  If the task is unblocked for a reason other than
4791:../freertos/tasks.c **** 					a timeout xNextTaskUnblockTime is normally left unchanged,
4792:../freertos/tasks.c **** 					because it will automatically get reset to a new value when
4793:../freertos/tasks.c **** 					the tick count equals xNextTaskUnblockTime.  However if
4794:../freertos/tasks.c **** 					tickless idling is used it might be more important to enter
4795:../freertos/tasks.c **** 					sleep mode at the earliest possible time - so reset
4796:../freertos/tasks.c **** 					xNextTaskUnblockTime here to ensure it is updated at the
4797:../freertos/tasks.c **** 					earliest possible time. */
4798:../freertos/tasks.c **** 					prvResetNextTaskUnblockTime();
4799:../freertos/tasks.c **** 				}
4800:../freertos/tasks.c **** 				#endif
4801:../freertos/tasks.c **** 
4802:../freertos/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
4803:../freertos/tasks.c **** 				{
4804:../freertos/tasks.c **** 					/* The notified task has a priority above the currently
4805:../freertos/tasks.c **** 					executing task so a yield is required. */
4806:../freertos/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
4807:../freertos/tasks.c **** 				}
4808:../freertos/tasks.c **** 				else
4809:../freertos/tasks.c **** 				{
4810:../freertos/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4811:../freertos/tasks.c **** 				}
4812:../freertos/tasks.c **** 			}
4813:../freertos/tasks.c **** 			else
4814:../freertos/tasks.c **** 			{
ARM GAS  /tmp/ccGXytas.s 			page 86


4815:../freertos/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4816:../freertos/tasks.c **** 			}
4817:../freertos/tasks.c **** 		}
4818:../freertos/tasks.c **** 		taskEXIT_CRITICAL();
4819:../freertos/tasks.c **** 
4820:../freertos/tasks.c **** 		return xReturn;
4821:../freertos/tasks.c **** 	}
4822:../freertos/tasks.c **** 
4823:../freertos/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4824:../freertos/tasks.c **** /*-----------------------------------------------------------*/
4825:../freertos/tasks.c **** 
4826:../freertos/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4827:../freertos/tasks.c **** 
4828:../freertos/tasks.c **** 	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction 
4829:../freertos/tasks.c **** 	{
4830:../freertos/tasks.c **** 	TCB_t * pxTCB;
4831:../freertos/tasks.c **** 	uint8_t ucOriginalNotifyState;
4832:../freertos/tasks.c **** 	BaseType_t xReturn = pdPASS;
4833:../freertos/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
4834:../freertos/tasks.c **** 
4835:../freertos/tasks.c **** 		configASSERT( xTaskToNotify );
4836:../freertos/tasks.c **** 
4837:../freertos/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
4838:../freertos/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
4839:../freertos/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
4840:../freertos/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
4841:../freertos/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
4842:../freertos/tasks.c **** 		is defined in FreeRTOSConfig.h then
4843:../freertos/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
4844:../freertos/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
4845:../freertos/tasks.c **** 		been assigned a priority above the configured maximum system call
4846:../freertos/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
4847:../freertos/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
4848:../freertos/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
4849:../freertos/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
4850:../freertos/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
4851:../freertos/tasks.c **** 		provided on the following link:
4852:../freertos/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
4853:../freertos/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
4854:../freertos/tasks.c **** 
4855:../freertos/tasks.c **** 		pxTCB = xTaskToNotify;
4856:../freertos/tasks.c **** 
4857:../freertos/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
4858:../freertos/tasks.c **** 		{
4859:../freertos/tasks.c **** 			if( pulPreviousNotificationValue != NULL )
4860:../freertos/tasks.c **** 			{
4861:../freertos/tasks.c **** 				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
4862:../freertos/tasks.c **** 			}
4863:../freertos/tasks.c **** 
4864:../freertos/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
4865:../freertos/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
4866:../freertos/tasks.c **** 
4867:../freertos/tasks.c **** 			switch( eAction )
4868:../freertos/tasks.c **** 			{
4869:../freertos/tasks.c **** 				case eSetBits	:
4870:../freertos/tasks.c **** 					pxTCB->ulNotifiedValue |= ulValue;
4871:../freertos/tasks.c **** 					break;
ARM GAS  /tmp/ccGXytas.s 			page 87


4872:../freertos/tasks.c **** 
4873:../freertos/tasks.c **** 				case eIncrement	:
4874:../freertos/tasks.c **** 					( pxTCB->ulNotifiedValue )++;
4875:../freertos/tasks.c **** 					break;
4876:../freertos/tasks.c **** 
4877:../freertos/tasks.c **** 				case eSetValueWithOverwrite	:
4878:../freertos/tasks.c **** 					pxTCB->ulNotifiedValue = ulValue;
4879:../freertos/tasks.c **** 					break;
4880:../freertos/tasks.c **** 
4881:../freertos/tasks.c **** 				case eSetValueWithoutOverwrite :
4882:../freertos/tasks.c **** 					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
4883:../freertos/tasks.c **** 					{
4884:../freertos/tasks.c **** 						pxTCB->ulNotifiedValue = ulValue;
4885:../freertos/tasks.c **** 					}
4886:../freertos/tasks.c **** 					else
4887:../freertos/tasks.c **** 					{
4888:../freertos/tasks.c **** 						/* The value could not be written to the task. */
4889:../freertos/tasks.c **** 						xReturn = pdFAIL;
4890:../freertos/tasks.c **** 					}
4891:../freertos/tasks.c **** 					break;
4892:../freertos/tasks.c **** 
4893:../freertos/tasks.c **** 				case eNoAction :
4894:../freertos/tasks.c **** 					/* The task is being notified without its notify value being
4895:../freertos/tasks.c **** 					updated. */
4896:../freertos/tasks.c **** 					break;
4897:../freertos/tasks.c **** 
4898:../freertos/tasks.c **** 				default:
4899:../freertos/tasks.c **** 					/* Should not get here if all enums are handled.
4900:../freertos/tasks.c **** 					Artificially force an assert by testing a value the
4901:../freertos/tasks.c **** 					compiler can't assume is const. */
4902:../freertos/tasks.c **** 					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
4903:../freertos/tasks.c **** 					break;
4904:../freertos/tasks.c **** 			}
4905:../freertos/tasks.c **** 
4906:../freertos/tasks.c **** 			traceTASK_NOTIFY_FROM_ISR();
4907:../freertos/tasks.c **** 
4908:../freertos/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4909:../freertos/tasks.c **** 			notification then unblock it now. */
4910:../freertos/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
4911:../freertos/tasks.c **** 			{
4912:../freertos/tasks.c **** 				/* The task should not have been on an event list. */
4913:../freertos/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
4914:../freertos/tasks.c **** 
4915:../freertos/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
4916:../freertos/tasks.c **** 				{
4917:../freertos/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
4918:../freertos/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
4919:../freertos/tasks.c **** 				}
4920:../freertos/tasks.c **** 				else
4921:../freertos/tasks.c **** 				{
4922:../freertos/tasks.c **** 					/* The delayed and ready lists cannot be accessed, so hold
4923:../freertos/tasks.c **** 					this task pending until the scheduler is resumed. */
4924:../freertos/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
4925:../freertos/tasks.c **** 				}
4926:../freertos/tasks.c **** 
4927:../freertos/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
4928:../freertos/tasks.c **** 				{
ARM GAS  /tmp/ccGXytas.s 			page 88


4929:../freertos/tasks.c **** 					/* The notified task has a priority above the currently
4930:../freertos/tasks.c **** 					executing task so a yield is required. */
4931:../freertos/tasks.c **** 					if( pxHigherPriorityTaskWoken != NULL )
4932:../freertos/tasks.c **** 					{
4933:../freertos/tasks.c **** 						*pxHigherPriorityTaskWoken = pdTRUE;
4934:../freertos/tasks.c **** 					}
4935:../freertos/tasks.c **** 
4936:../freertos/tasks.c **** 					/* Mark that a yield is pending in case the user is not
4937:../freertos/tasks.c **** 					using the "xHigherPriorityTaskWoken" parameter to an ISR
4938:../freertos/tasks.c **** 					safe FreeRTOS function. */
4939:../freertos/tasks.c **** 					xYieldPending = pdTRUE;
4940:../freertos/tasks.c **** 				}
4941:../freertos/tasks.c **** 				else
4942:../freertos/tasks.c **** 				{
4943:../freertos/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4944:../freertos/tasks.c **** 				}
4945:../freertos/tasks.c **** 			}
4946:../freertos/tasks.c **** 		}
4947:../freertos/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
4948:../freertos/tasks.c **** 
4949:../freertos/tasks.c **** 		return xReturn;
4950:../freertos/tasks.c **** 	}
4951:../freertos/tasks.c **** 
4952:../freertos/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4953:../freertos/tasks.c **** /*-----------------------------------------------------------*/
4954:../freertos/tasks.c **** 
4955:../freertos/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4956:../freertos/tasks.c **** 
4957:../freertos/tasks.c **** 	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
4958:../freertos/tasks.c **** 	{
4959:../freertos/tasks.c **** 	TCB_t * pxTCB;
4960:../freertos/tasks.c **** 	uint8_t ucOriginalNotifyState;
4961:../freertos/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
4962:../freertos/tasks.c **** 
4963:../freertos/tasks.c **** 		configASSERT( xTaskToNotify );
4964:../freertos/tasks.c **** 
4965:../freertos/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
4966:../freertos/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
4967:../freertos/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
4968:../freertos/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
4969:../freertos/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
4970:../freertos/tasks.c **** 		is defined in FreeRTOSConfig.h then
4971:../freertos/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
4972:../freertos/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
4973:../freertos/tasks.c **** 		been assigned a priority above the configured maximum system call
4974:../freertos/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
4975:../freertos/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
4976:../freertos/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
4977:../freertos/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
4978:../freertos/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
4979:../freertos/tasks.c **** 		provided on the following link:
4980:../freertos/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
4981:../freertos/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
4982:../freertos/tasks.c **** 
4983:../freertos/tasks.c **** 		pxTCB = xTaskToNotify;
4984:../freertos/tasks.c **** 
4985:../freertos/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
ARM GAS  /tmp/ccGXytas.s 			page 89


4986:../freertos/tasks.c **** 		{
4987:../freertos/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
4988:../freertos/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
4989:../freertos/tasks.c **** 
4990:../freertos/tasks.c **** 			/* 'Giving' is equivalent to incrementing a count in a counting
4991:../freertos/tasks.c **** 			semaphore. */
4992:../freertos/tasks.c **** 			( pxTCB->ulNotifiedValue )++;
4993:../freertos/tasks.c **** 
4994:../freertos/tasks.c **** 			traceTASK_NOTIFY_GIVE_FROM_ISR();
4995:../freertos/tasks.c **** 
4996:../freertos/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4997:../freertos/tasks.c **** 			notification then unblock it now. */
4998:../freertos/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
4999:../freertos/tasks.c **** 			{
5000:../freertos/tasks.c **** 				/* The task should not have been on an event list. */
5001:../freertos/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
5002:../freertos/tasks.c **** 
5003:../freertos/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
5004:../freertos/tasks.c **** 				{
5005:../freertos/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
5006:../freertos/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
5007:../freertos/tasks.c **** 				}
5008:../freertos/tasks.c **** 				else
5009:../freertos/tasks.c **** 				{
5010:../freertos/tasks.c **** 					/* The delayed and ready lists cannot be accessed, so hold
5011:../freertos/tasks.c **** 					this task pending until the scheduler is resumed. */
5012:../freertos/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
5013:../freertos/tasks.c **** 				}
5014:../freertos/tasks.c **** 
5015:../freertos/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
5016:../freertos/tasks.c **** 				{
5017:../freertos/tasks.c **** 					/* The notified task has a priority above the currently
5018:../freertos/tasks.c **** 					executing task so a yield is required. */
5019:../freertos/tasks.c **** 					if( pxHigherPriorityTaskWoken != NULL )
5020:../freertos/tasks.c **** 					{
5021:../freertos/tasks.c **** 						*pxHigherPriorityTaskWoken = pdTRUE;
5022:../freertos/tasks.c **** 					}
5023:../freertos/tasks.c **** 
5024:../freertos/tasks.c **** 					/* Mark that a yield is pending in case the user is not
5025:../freertos/tasks.c **** 					using the "xHigherPriorityTaskWoken" parameter in an ISR
5026:../freertos/tasks.c **** 					safe FreeRTOS function. */
5027:../freertos/tasks.c **** 					xYieldPending = pdTRUE;
5028:../freertos/tasks.c **** 				}
5029:../freertos/tasks.c **** 				else
5030:../freertos/tasks.c **** 				{
5031:../freertos/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
5032:../freertos/tasks.c **** 				}
5033:../freertos/tasks.c **** 			}
5034:../freertos/tasks.c **** 		}
5035:../freertos/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
5036:../freertos/tasks.c **** 	}
5037:../freertos/tasks.c **** 
5038:../freertos/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
5039:../freertos/tasks.c **** 
5040:../freertos/tasks.c **** /*-----------------------------------------------------------*/
5041:../freertos/tasks.c **** 
5042:../freertos/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
ARM GAS  /tmp/ccGXytas.s 			page 90


5043:../freertos/tasks.c **** 
5044:../freertos/tasks.c **** 	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
5045:../freertos/tasks.c **** 	{
5046:../freertos/tasks.c **** 	TCB_t *pxTCB;
5047:../freertos/tasks.c **** 	BaseType_t xReturn;
5048:../freertos/tasks.c **** 
5049:../freertos/tasks.c **** 		/* If null is passed in here then it is the calling task that is having
5050:../freertos/tasks.c **** 		its notification state cleared. */
5051:../freertos/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
5052:../freertos/tasks.c **** 
5053:../freertos/tasks.c **** 		taskENTER_CRITICAL();
5054:../freertos/tasks.c **** 		{
5055:../freertos/tasks.c **** 			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
5056:../freertos/tasks.c **** 			{
5057:../freertos/tasks.c **** 				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
5058:../freertos/tasks.c **** 				xReturn = pdPASS;
5059:../freertos/tasks.c **** 			}
5060:../freertos/tasks.c **** 			else
5061:../freertos/tasks.c **** 			{
5062:../freertos/tasks.c **** 				xReturn = pdFAIL;
5063:../freertos/tasks.c **** 			}
5064:../freertos/tasks.c **** 		}
5065:../freertos/tasks.c **** 		taskEXIT_CRITICAL();
5066:../freertos/tasks.c **** 
5067:../freertos/tasks.c **** 		return xReturn;
5068:../freertos/tasks.c **** 	}
5069:../freertos/tasks.c **** 
5070:../freertos/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
5071:../freertos/tasks.c **** /*-----------------------------------------------------------*/
5072:../freertos/tasks.c **** 
5073:../freertos/tasks.c **** #if( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) )
5074:../freertos/tasks.c **** 	TickType_t xTaskGetIdleRunTimeCounter( void )
5075:../freertos/tasks.c **** 	{
5076:../freertos/tasks.c **** 		return xIdleTaskHandle->ulRunTimeCounter;
5077:../freertos/tasks.c **** 	}
5078:../freertos/tasks.c **** #endif
5079:../freertos/tasks.c **** /*-----------------------------------------------------------*/
5080:../freertos/tasks.c **** 
5081:../freertos/tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockInde
5082:../freertos/tasks.c **** {
  32              		.loc 1 5082 1 view -0
  33              		.cfi_startproc
  34              		@ args = 0, pretend = 0, frame = 0
  35              		@ frame_needed = 0, uses_anonymous_args = 0
5083:../freertos/tasks.c **** TickType_t xTimeToWake;
  36              		.loc 1 5083 1 view .LVU1
5084:../freertos/tasks.c **** const TickType_t xConstTickCount = xTickCount;
  37              		.loc 1 5084 1 view .LVU2
  38              	@ ../freertos/tasks.c:5082: {
5082:../freertos/tasks.c **** TickType_t xTimeToWake;
  39              		.loc 1 5082 1 is_stmt 0 view .LVU3
  40 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}	@
  41              	.LCFI0:
  42              		.cfi_def_cfa_offset 24
  43              		.cfi_offset 3, -24
  44              		.cfi_offset 4, -20
  45              		.cfi_offset 5, -16
ARM GAS  /tmp/ccGXytas.s 			page 91


  46              		.cfi_offset 6, -12
  47              		.cfi_offset 7, -8
  48              		.cfi_offset 14, -4
  49              	@ ../freertos/tasks.c:5084: const TickType_t xConstTickCount = xTickCount;
  50              		.loc 1 5084 18 view .LVU4
  51 0002 184C     		ldr	r4, .L11	@ tmp140,
  52              	@ ../freertos/tasks.c:5082: {
5082:../freertos/tasks.c **** TickType_t xTimeToWake;
  53              		.loc 1 5082 1 view .LVU5
  54 0004 0646     		mov	r6, r0	@ xTicksToWait, tmp165
  55              	@ ../freertos/tasks.c:5084: const TickType_t xConstTickCount = xTickCount;
  56              		.loc 1 5084 18 view .LVU6
  57 0006 2568     		ldr	r5, [r4]	@ xConstTickCount, xTickCount
  58              	.LVL1:
5085:../freertos/tasks.c **** 
5086:../freertos/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
5087:../freertos/tasks.c **** 	{
5088:../freertos/tasks.c **** 		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
5089:../freertos/tasks.c **** 		reset to pdFALSE so it can be detected as having been set to pdTRUE
5090:../freertos/tasks.c **** 		when the task leaves the Blocked state. */
5091:../freertos/tasks.c **** 		pxCurrentTCB->ucDelayAborted = pdFALSE;
5092:../freertos/tasks.c **** 	}
5093:../freertos/tasks.c **** 	#endif
5094:../freertos/tasks.c **** 
5095:../freertos/tasks.c **** 	/* Remove the task from the ready list before adding it to the blocked list
5096:../freertos/tasks.c **** 	as the same list item is used for both lists. */
5097:../freertos/tasks.c **** 	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
  59              		.loc 1 5097 2 is_stmt 1 view .LVU7
  60              	@ ../freertos/tasks.c:5097: 	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t
  61              		.loc 1 5097 35 is_stmt 0 view .LVU8
  62 0008 6068     		ldr	r0, [r4, #4]	@ pxCurrentTCB.21_1, pxCurrentTCB
  63              	.LVL2:
  64              	@ ../freertos/tasks.c:5082: {
5082:../freertos/tasks.c **** TickType_t xTimeToWake;
  65              		.loc 1 5082 1 view .LVU9
  66 000a 0F46     		mov	r7, r1	@ xCanBlockIndefinitely, tmp166
  67              	@ ../freertos/tasks.c:5097: 	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t
  68              		.loc 1 5097 6 view .LVU10
  69 000c 0430     		adds	r0, r0, #4	@, pxCurrentTCB.21_1,
  70 000e FFF7FEFF 		bl	uxListRemove		@
  71              	.LVL3:
  72              	@ ../freertos/tasks.c:5097: 	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t
  73              		.loc 1 5097 4 discriminator 1 view .LVU11
  74 0012 38B9     		cbnz	r0, .L2	@ tmp167,
5098:../freertos/tasks.c **** 	{
5099:../freertos/tasks.c **** 		/* The current task must be in a ready list, so there is no need to
5100:../freertos/tasks.c **** 		check, and the port reset macro can be called directly. */
5101:../freertos/tasks.c **** 		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentT
  75              		.loc 1 5101 3 is_stmt 1 view .LVU12
  76 0014 6268     		ldr	r2, [r4, #4]	@ pxCurrentTCB.22_4, pxCurrentTCB
  77 0016 A368     		ldr	r3, [r4, #8]	@ uxTopReadyPriority.23_7, uxTopReadyPriority
  78 0018 D16A     		ldr	r1, [r2, #44]	@ pxCurrentTCB.22_4->uxPriority, pxCurrentTCB.22_4->uxPriority
  79 001a 0122     		movs	r2, #1	@ tmp146,
  80 001c 8A40     		lsls	r2, r2, r1	@ tmp145, tmp146, pxCurrentTCB.22_4->uxPriority
  81 001e 23EA0203 		bic	r3, r3, r2	@ _8, uxTopReadyPriority.23_7, tmp145
  82 0022 A360     		str	r3, [r4, #8]	@ _8, uxTopReadyPriority
  83              	.L2:
ARM GAS  /tmp/ccGXytas.s 			page 92


5102:../freertos/tasks.c **** 	}
5103:../freertos/tasks.c **** 	else
5104:../freertos/tasks.c **** 	{
5105:../freertos/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
  84              		.loc 1 5105 27 view .LVU13
5106:../freertos/tasks.c **** 	}
5107:../freertos/tasks.c **** 
5108:../freertos/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
5109:../freertos/tasks.c **** 	{
5110:../freertos/tasks.c **** 		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
  85              		.loc 1 5110 3 view .LVU14
  86              	@ ../freertos/tasks.c:5110: 		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != p
  87              		.loc 1 5110 5 is_stmt 0 view .LVU15
  88 0024 731C     		adds	r3, r6, #1	@, xTicksToWait,
  89 0026 07D1     		bne	.L3		@,
  90              	@ ../freertos/tasks.c:5110: 		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != p
  91              		.loc 1 5110 41 discriminator 1 view .LVU16
  92 0028 37B1     		cbz	r7, .L3	@ xCanBlockIndefinitely,
5111:../freertos/tasks.c **** 		{
5112:../freertos/tasks.c **** 			/* Add the task to the suspended task list instead of a delayed task
5113:../freertos/tasks.c **** 			list to ensure it is not woken by a timing event.  It will block
5114:../freertos/tasks.c **** 			indefinitely. */
5115:../freertos/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
  93              		.loc 1 5115 4 is_stmt 1 view .LVU17
  94              	@ ../freertos/tasks.c:5115: 			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem
  95              		.loc 1 5115 56 is_stmt 0 view .LVU18
  96 002a 6168     		ldr	r1, [r4, #4]	@ pxCurrentTCB.24_9, pxCurrentTCB
  97              	@ ../freertos/tasks.c:5115: 			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem
  98              		.loc 1 5115 4 view .LVU19
  99 002c 0E48     		ldr	r0, .L11+4	@,
 100 002e 0431     		adds	r1, r1, #4	@, pxCurrentTCB.24_9,
 101              	@ ../freertos/tasks.c:5190: }
5116:../freertos/tasks.c **** 		}
5117:../freertos/tasks.c **** 		else
5118:../freertos/tasks.c **** 		{
5119:../freertos/tasks.c **** 			/* Calculate the time at which the task should be woken if the event
5120:../freertos/tasks.c **** 			does not occur.  This may overflow but this doesn't matter, the
5121:../freertos/tasks.c **** 			kernel will manage it correctly. */
5122:../freertos/tasks.c **** 			xTimeToWake = xConstTickCount + xTicksToWait;
5123:../freertos/tasks.c **** 
5124:../freertos/tasks.c **** 			/* The list item will be inserted in wake time order. */
5125:../freertos/tasks.c **** 			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
5126:../freertos/tasks.c **** 
5127:../freertos/tasks.c **** 			if( xTimeToWake < xConstTickCount )
5128:../freertos/tasks.c **** 			{
5129:../freertos/tasks.c **** 				/* Wake time has overflowed.  Place this item in the overflow
5130:../freertos/tasks.c **** 				list. */
5131:../freertos/tasks.c **** 				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
5132:../freertos/tasks.c **** 			}
5133:../freertos/tasks.c **** 			else
5134:../freertos/tasks.c **** 			{
5135:../freertos/tasks.c **** 				/* The wake time has not overflowed, so the current block list
5136:../freertos/tasks.c **** 				is used. */
5137:../freertos/tasks.c **** 				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
5138:../freertos/tasks.c **** 
5139:../freertos/tasks.c **** 				/* If the task entering the blocked state was placed at the
5140:../freertos/tasks.c **** 				head of the list of blocked tasks then xNextTaskUnblockTime
ARM GAS  /tmp/ccGXytas.s 			page 93


5141:../freertos/tasks.c **** 				needs to be updated too. */
5142:../freertos/tasks.c **** 				if( xTimeToWake < xNextTaskUnblockTime )
5143:../freertos/tasks.c **** 				{
5144:../freertos/tasks.c **** 					xNextTaskUnblockTime = xTimeToWake;
5145:../freertos/tasks.c **** 				}
5146:../freertos/tasks.c **** 				else
5147:../freertos/tasks.c **** 				{
5148:../freertos/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
5149:../freertos/tasks.c **** 				}
5150:../freertos/tasks.c **** 			}
5151:../freertos/tasks.c **** 		}
5152:../freertos/tasks.c **** 	}
5153:../freertos/tasks.c **** 	#else /* INCLUDE_vTaskSuspend */
5154:../freertos/tasks.c **** 	{
5155:../freertos/tasks.c **** 		/* Calculate the time at which the task should be woken if the event
5156:../freertos/tasks.c **** 		does not occur.  This may overflow but this doesn't matter, the kernel
5157:../freertos/tasks.c **** 		will manage it correctly. */
5158:../freertos/tasks.c **** 		xTimeToWake = xConstTickCount + xTicksToWait;
5159:../freertos/tasks.c **** 
5160:../freertos/tasks.c **** 		/* The list item will be inserted in wake time order. */
5161:../freertos/tasks.c **** 		listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
5162:../freertos/tasks.c **** 
5163:../freertos/tasks.c **** 		if( xTimeToWake < xConstTickCount )
5164:../freertos/tasks.c **** 		{
5165:../freertos/tasks.c **** 			/* Wake time has overflowed.  Place this item in the overflow list. */
5166:../freertos/tasks.c **** 			vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
5167:../freertos/tasks.c **** 		}
5168:../freertos/tasks.c **** 		else
5169:../freertos/tasks.c **** 		{
5170:../freertos/tasks.c **** 			/* The wake time has not overflowed, so the current block list is used. */
5171:../freertos/tasks.c **** 			vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
5172:../freertos/tasks.c **** 
5173:../freertos/tasks.c **** 			/* If the task entering the blocked state was placed at the head of the
5174:../freertos/tasks.c **** 			list of blocked tasks then xNextTaskUnblockTime needs to be updated
5175:../freertos/tasks.c **** 			too. */
5176:../freertos/tasks.c **** 			if( xTimeToWake < xNextTaskUnblockTime )
5177:../freertos/tasks.c **** 			{
5178:../freertos/tasks.c **** 				xNextTaskUnblockTime = xTimeToWake;
5179:../freertos/tasks.c **** 			}
5180:../freertos/tasks.c **** 			else
5181:../freertos/tasks.c **** 			{
5182:../freertos/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
5183:../freertos/tasks.c **** 			}
5184:../freertos/tasks.c **** 		}
5185:../freertos/tasks.c **** 
5186:../freertos/tasks.c **** 		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
5187:../freertos/tasks.c **** 		( void ) xCanBlockIndefinitely;
5188:../freertos/tasks.c **** 	}
5189:../freertos/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
5190:../freertos/tasks.c **** }
 102              		.loc 1 5190 1 view .LVU20
 103 0030 BDE8F840 		pop	{r3, r4, r5, r6, r7, lr}	@
 104              	.LCFI1:
 105              		.cfi_remember_state
 106              		.cfi_restore 14
 107              		.cfi_restore 7
 108              		.cfi_restore 6
ARM GAS  /tmp/ccGXytas.s 			page 94


 109              		.cfi_restore 5
 110              		.cfi_restore 4
 111              		.cfi_restore 3
 112              		.cfi_def_cfa_offset 0
 113              	.LVL4:
 114              	@ ../freertos/tasks.c:5115: 			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem
5115:../freertos/tasks.c **** 		}
 115              		.loc 1 5115 4 view .LVU21
 116 0034 FFF7FEBF 		b	vListInsertEnd		@
 117              	.LVL5:
 118              	.L3:
 119              	.LCFI2:
 120              		.cfi_restore_state
5122:../freertos/tasks.c **** 
 121              		.loc 1 5122 4 is_stmt 1 view .LVU22
 122              	@ ../freertos/tasks.c:5125: 			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToW
5125:../freertos/tasks.c **** 
 123              		.loc 1 5125 4 is_stmt 0 view .LVU23
 124 0038 6368     		ldr	r3, [r4, #4]	@ pxCurrentTCB.25_11, pxCurrentTCB
 125 003a AD19     		adds	r5, r5, r6	@ tmp154, xConstTickCount, xTicksToWait
 126              	.LVL6:
5125:../freertos/tasks.c **** 
 127              		.loc 1 5125 4 is_stmt 1 view .LVU24
 128 003c 5D60     		str	r5, [r3, #4]	@ tmp154, pxCurrentTCB.25_11->xStateListItem.xItemValue
5127:../freertos/tasks.c **** 			{
 129              		.loc 1 5127 4 view .LVU25
 130              	@ ../freertos/tasks.c:5127: 			if( xTimeToWake < xConstTickCount )
5127:../freertos/tasks.c **** 			{
 131              		.loc 1 5127 6 is_stmt 0 view .LVU26
 132 003e 06D3     		bcc	.L6		@,
5131:../freertos/tasks.c **** 			}
 133              		.loc 1 5131 5 is_stmt 1 view .LVU27
 134 0040 206A     		ldr	r0, [r4, #32]	@ pxOverflowDelayedTaskList.26_12, pxOverflowDelayedTaskList
 135              	@ ../freertos/tasks.c:5131: 				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateList
5131:../freertos/tasks.c **** 			}
 136              		.loc 1 5131 60 is_stmt 0 view .LVU28
 137 0042 6168     		ldr	r1, [r4, #4]	@ pxCurrentTCB.27_13, pxCurrentTCB
 138              	@ ../freertos/tasks.c:5190: }
 139              		.loc 1 5190 1 view .LVU29
 140 0044 BDE8F840 		pop	{r3, r4, r5, r6, r7, lr}	@
 141              	.LCFI3:
 142              		.cfi_remember_state
 143              		.cfi_restore 14
 144              		.cfi_restore 7
 145              		.cfi_restore 6
 146              		.cfi_restore 5
 147              		.cfi_restore 4
 148              		.cfi_restore 3
 149              		.cfi_def_cfa_offset 0
 150              	.LVL7:
 151              	@ ../freertos/tasks.c:5131: 				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateList
5131:../freertos/tasks.c **** 			}
 152              		.loc 1 5131 5 view .LVU30
 153 0048 0431     		adds	r1, r1, #4	@, pxCurrentTCB.27_13,
 154 004a FFF7FEBF 		b	vListInsert		@
 155              	.LVL8:
 156              	.L6:
ARM GAS  /tmp/ccGXytas.s 			page 95


 157              	.LCFI4:
 158              		.cfi_restore_state
5137:../freertos/tasks.c **** 
 159              		.loc 1 5137 5 is_stmt 1 view .LVU31
 160 004e 606A     		ldr	r0, [r4, #36]	@ pxDelayedTaskList.28_15, pxDelayedTaskList
 161              	@ ../freertos/tasks.c:5137: 				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) )
5137:../freertos/tasks.c **** 
 162              		.loc 1 5137 52 is_stmt 0 view .LVU32
 163 0050 6168     		ldr	r1, [r4, #4]	@ pxCurrentTCB.29_16, pxCurrentTCB
 164              	@ ../freertos/tasks.c:5137: 				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) )
5137:../freertos/tasks.c **** 
 165              		.loc 1 5137 5 view .LVU33
 166 0052 0431     		adds	r1, r1, #4	@, pxCurrentTCB.29_16,
 167 0054 FFF7FEFF 		bl	vListInsert		@
 168              	.LVL9:
5142:../freertos/tasks.c **** 				{
 169              		.loc 1 5142 5 is_stmt 1 view .LVU34
 170              	@ ../freertos/tasks.c:5142: 				if( xTimeToWake < xNextTaskUnblockTime )
5142:../freertos/tasks.c **** 				{
 171              		.loc 1 5142 21 is_stmt 0 view .LVU35
 172 0058 A36A     		ldr	r3, [r4, #40]	@ xNextTaskUnblockTime.30_18, xNextTaskUnblockTime
 173              	@ ../freertos/tasks.c:5142: 				if( xTimeToWake < xNextTaskUnblockTime )
5142:../freertos/tasks.c **** 				{
 174              		.loc 1 5142 7 view .LVU36
 175 005a AB42     		cmp	r3, r5	@ xNextTaskUnblockTime.30_18, tmp154
5144:../freertos/tasks.c **** 				}
 176              		.loc 1 5144 6 is_stmt 1 view .LVU37
 177              	@ ../freertos/tasks.c:5144: 					xNextTaskUnblockTime = xTimeToWake;
5144:../freertos/tasks.c **** 				}
 178              		.loc 1 5144 27 is_stmt 0 view .LVU38
 179 005c 88BF     		it	hi
 180 005e A562     		strhi	r5, [r4, #40]	@ tmp154, xNextTaskUnblockTime
5148:../freertos/tasks.c **** 				}
 181              		.loc 1 5148 30 is_stmt 1 view .LVU39
 182              	@ ../freertos/tasks.c:5190: }
 183              		.loc 1 5190 1 is_stmt 0 view .LVU40
 184 0060 F8BD     		pop	{r3, r4, r5, r6, r7, pc}	@
 185              	.LVL10:
 186              	.L12:
 187              		.loc 1 5190 1 view .LVU41
 188 0062 00BF     		.align	2
 189              	.L11:
 190 0064 00000000 		.word	.LANCHOR0
 191 0068 0C000000 		.word	.LANCHOR0+12
 192              		.cfi_endproc
 193              	.LFE62:
 194              		.size	prvAddCurrentTaskToDelayedList, .-prvAddCurrentTaskToDelayedList
 195              		.align	1
 196              		.syntax unified
 197              		.thumb
 198              		.thumb_func
 199              		.type	prvResetNextTaskUnblockTime, %function
 200              	prvResetNextTaskUnblockTime:
 201              	.LFB48:
3881:../freertos/tasks.c **** TCB_t *pxTCB;
 202              		.loc 1 3881 1 is_stmt 1 view -0
 203              		.cfi_startproc
ARM GAS  /tmp/ccGXytas.s 			page 96


 204              		@ args = 0, pretend = 0, frame = 0
 205              		@ frame_needed = 0, uses_anonymous_args = 0
 206              		@ link register save eliminated.
3882:../freertos/tasks.c **** 
 207              		.loc 1 3882 1 view .LVU43
3884:../freertos/tasks.c **** 	{
 208              		.loc 1 3884 2 view .LVU44
 209              	@ ../freertos/tasks.c:3884: 	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
3884:../freertos/tasks.c **** 	{
 210              		.loc 1 3884 6 is_stmt 0 view .LVU45
 211 006c 064B     		ldr	r3, .L17	@ tmp120,
 212 006e 5A6A     		ldr	r2, [r3, #36]	@ pxDelayedTaskList.19_1, pxDelayedTaskList
 213 0070 1268     		ldr	r2, [r2]	@ _2, pxDelayedTaskList.19_1->uxNumberOfItems
 214              	@ ../freertos/tasks.c:3884: 	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
3884:../freertos/tasks.c **** 	{
 215              		.loc 1 3884 4 view .LVU46
 216 0072 1AB9     		cbnz	r2, .L14	@ _2,
3890:../freertos/tasks.c **** 	}
 217              		.loc 1 3890 3 is_stmt 1 view .LVU47
 218              	@ ../freertos/tasks.c:3890: 		xNextTaskUnblockTime = portMAX_DELAY;
3890:../freertos/tasks.c **** 	}
 219              		.loc 1 3890 24 is_stmt 0 view .LVU48
 220 0074 4FF0FF32 		mov	r2, #-1	@ tmp122,
 221              	.L16:
 222              	.LBB34:
 223              	.LBB35:
 224              	@ ../freertos/tasks.c:3899: 		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateL
3899:../freertos/tasks.c **** 	}
 225              		.loc 1 3899 24 view .LVU49
 226 0078 9A62     		str	r2, [r3, #40]	@ _10, xNextTaskUnblockTime
 227              	.LBE35:
 228              	.LBE34:
 229              	@ ../freertos/tasks.c:3901: }
3901:../freertos/tasks.c **** /*-----------------------------------------------------------*/
 230              		.loc 1 3901 1 view .LVU50
 231 007a 7047     		bx	lr	@
 232              	.L14:
 233              	.LBB37:
 234              	.LBI34:
3880:../freertos/tasks.c **** {
 235              		.loc 1 3880 13 is_stmt 1 view .LVU51
 236              	.LBB36:
3898:../freertos/tasks.c **** 		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 237              		.loc 1 3898 3 view .LVU52
 238              	@ ../freertos/tasks.c:3898: 		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint 
3898:../freertos/tasks.c **** 		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 239              		.loc 1 3898 15 is_stmt 0 view .LVU53
 240 007c 5A6A     		ldr	r2, [r3, #36]	@ pxDelayedTaskList.20_7, pxDelayedTaskList
 241              	.LVL11:
3899:../freertos/tasks.c **** 	}
 242              		.loc 1 3899 3 is_stmt 1 view .LVU54
 243              	@ ../freertos/tasks.c:3898: 		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint 
3898:../freertos/tasks.c **** 		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 244              		.loc 1 3898 13 is_stmt 0 view .LVU55
 245 007e D268     		ldr	r2, [r2, #12]	@ pxDelayedTaskList.20_7->xListEnd.pxNext, pxDelayedTaskList.20_7->xListEnd.pxNe
 246              	.LVL12:
 247              	@ ../freertos/tasks.c:3899: 		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateL
ARM GAS  /tmp/ccGXytas.s 			page 97


3899:../freertos/tasks.c **** 	}
 248              		.loc 1 3899 26 view .LVU56
 249 0080 D268     		ldr	r2, [r2, #12]	@ _8->pvOwner, _8->pvOwner
 250              	.LVL13:
3899:../freertos/tasks.c **** 	}
 251              		.loc 1 3899 26 view .LVU57
 252 0082 5268     		ldr	r2, [r2, #4]	@ _10, pxTCB_9->xStateListItem.xItemValue
 253              	.LVL14:
3899:../freertos/tasks.c **** 	}
 254              		.loc 1 3899 26 view .LVU58
 255 0084 F8E7     		b	.L16		@
 256              	.L18:
 257 0086 00BF     		.align	2
 258              	.L17:
 259 0088 00000000 		.word	.LANCHOR0
 260              	.LBE36:
 261              	.LBE37:
 262              		.cfi_endproc
 263              	.LFE48:
 264              		.size	prvResetNextTaskUnblockTime, .-prvResetNextTaskUnblockTime
 265              		.align	1
 266              		.syntax unified
 267              		.thumb
 268              		.thumb_func
 269              		.type	prvIdleTask, %function
 270              	prvIdleTask:
 271              	.LVL15:
 272              	.LFB41:
3335:../freertos/tasks.c **** 	/* Stop warnings. */
 273              		.loc 1 3335 1 is_stmt 1 view -0
 274              		.cfi_startproc
 275              		@ Volatile: function does not return.
 276              		@ args = 0, pretend = 0, frame = 0
 277              		@ frame_needed = 0, uses_anonymous_args = 0
3335:../freertos/tasks.c **** 	/* Stop warnings. */
 278              		.loc 1 3335 1 is_stmt 0 view .LVU60
 279 008c 80B5     		push	{r7, lr}	@
 280              	.LCFI5:
 281              		.cfi_def_cfa_offset 8
 282              		.cfi_offset 7, -8
 283              		.cfi_offset 14, -4
 284              	@ ../freertos/tasks.c:3376: 				taskYIELD();
3376:../freertos/tasks.c **** 			}
 285              		.loc 1 3376 5 view .LVU61
 286 008e 4FF0E026 		mov	r6, #-536813568	@ tmp136,
 287 0092 4FF08057 		mov	r7, #268435456	@ tmp137,
 288              	.LBB43:
 289              	.LBB44:
 290              	@ ../freertos/tasks.c:3589: 		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
3589:../freertos/tasks.c **** 		{
 291              		.loc 1 3589 39 view .LVU62
 292 0096 114C     		ldr	r4, .L25	@ tmp132,
 293              	.LVL16:
 294              	.L20:
3589:../freertos/tasks.c **** 		{
 295              		.loc 1 3589 39 is_stmt 1 view .LVU63
 296 0098 636C     		ldr	r3, [r4, #68]	@ uxDeletedTasksWaitingCleanUp.54_16, uxDeletedTasksWaitingCleanUp
ARM GAS  /tmp/ccGXytas.s 			page 98


 297 009a 4BB9     		cbnz	r3, .L21	@ uxDeletedTasksWaitingCleanUp.54_16,
 298              	.LBE44:
 299              	.LBE43:
3374:../freertos/tasks.c **** 			{
 300              		.loc 1 3374 4 view .LVU64
 301              	@ ../freertos/tasks.c:3374: 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY 
3374:../freertos/tasks.c **** 			{
 302              		.loc 1 3374 8 is_stmt 0 view .LVU65
 303 009c A36C     		ldr	r3, [r4, #72]	@ _1, pxReadyTasksLists[0].uxNumberOfItems
 304              	@ ../freertos/tasks.c:3374: 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY 
3374:../freertos/tasks.c **** 			{
 305              		.loc 1 3374 6 view .LVU66
 306 009e 012B     		cmp	r3, #1	@ _1,
 307 00a0 FAD9     		bls	.L20		@,
3376:../freertos/tasks.c **** 			}
 308              		.loc 1 3376 5 is_stmt 1 view .LVU67
 309 00a2 C6F8047D 		str	r7, [r6, #3332]	@ tmp137, MEM[(volatile uint32_t *)3758157060B]
3376:../freertos/tasks.c **** 			}
 310              		.loc 1 3376 5 view .LVU68
 311              		.syntax unified
 312              	@ 3376 "../freertos/tasks.c" 1
 313 00a6 BFF34F8F 		dsb	
 314              	@ 0 "" 2
3376:../freertos/tasks.c **** 			}
 315              		.loc 1 3376 5 view .LVU69
 316              	@ 3376 "../freertos/tasks.c" 1
 317 00aa BFF36F8F 		isb
 318              	@ 0 "" 2
3376:../freertos/tasks.c **** 			}
 319              		.loc 1 3376 16 view .LVU70
 320              		.thumb
 321              		.syntax unified
 322 00ae F3E7     		b	.L20		@
 323              	.L21:
 324              	.LBB48:
 325              	.LBB47:
3591:../freertos/tasks.c **** 			{
 326              		.loc 1 3591 4 view .LVU71
 327 00b0 FFF7FEFF 		bl	vPortEnterCritical		@
 328              	.LVL17:
3593:../freertos/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 329              		.loc 1 3593 5 view .LVU72
 330              	@ ../freertos/tasks.c:3593: 				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) 
3593:../freertos/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 331              		.loc 1 3593 11 is_stmt 0 view .LVU73
 332 00b4 A36B     		ldr	r3, [r4, #56]	@ xTasksWaitingTermination.xListEnd.pxNext, xTasksWaitingTermination.xListEnd.px
 333 00b6 DD68     		ldr	r5, [r3, #12]	@ pxTCB, _9->pvOwner
 334              	.LVL18:
3594:../freertos/tasks.c **** 				--uxCurrentNumberOfTasks;
 335              		.loc 1 3594 5 is_stmt 1 view .LVU74
 336              	@ ../freertos/tasks.c:3594: 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
3594:../freertos/tasks.c **** 				--uxCurrentNumberOfTasks;
 337              		.loc 1 3594 14 is_stmt 0 view .LVU75
 338 00b8 281D     		adds	r0, r5, #4	@, pxTCB,
 339 00ba FFF7FEFF 		bl	uxListRemove		@
 340              	.LVL19:
3595:../freertos/tasks.c **** 				--uxDeletedTasksWaitingCleanUp;
ARM GAS  /tmp/ccGXytas.s 			page 99


 341              		.loc 1 3595 5 is_stmt 1 view .LVU76
 342 00be 236C     		ldr	r3, [r4, #64]	@ uxCurrentNumberOfTasks.52_12, uxCurrentNumberOfTasks
 343 00c0 013B     		subs	r3, r3, #1	@ _13, uxCurrentNumberOfTasks.52_12,
 344 00c2 2364     		str	r3, [r4, #64]	@ _13, uxCurrentNumberOfTasks
3596:../freertos/tasks.c **** 			}
 345              		.loc 1 3596 5 view .LVU77
 346 00c4 636C     		ldr	r3, [r4, #68]	@ uxDeletedTasksWaitingCleanUp.53_14, uxDeletedTasksWaitingCleanUp
 347 00c6 013B     		subs	r3, r3, #1	@ _15, uxDeletedTasksWaitingCleanUp.53_14,
 348 00c8 6364     		str	r3, [r4, #68]	@ _15, uxDeletedTasksWaitingCleanUp
3598:../freertos/tasks.c **** 
 349              		.loc 1 3598 4 view .LVU78
 350 00ca FFF7FEFF 		bl	vPortExitCritical		@
 351              	.LVL20:
3600:../freertos/tasks.c **** 		}
 352              		.loc 1 3600 4 view .LVU79
 353              	.LBB45:
 354              	.LBI45:
3826:../freertos/tasks.c **** 	{
 355              		.loc 1 3826 14 view .LVU80
 356              	.LBB46:
3831:../freertos/tasks.c **** 
 357              		.loc 1 3831 3 view .LVU81
3845:../freertos/tasks.c **** 			vPortFree( pxTCB );
 358              		.loc 1 3845 4 view .LVU82
 359 00ce 286B     		ldr	r0, [r5, #48]	@, pxTCB_10->pxStack
 360 00d0 FFF7FEFF 		bl	vPortFree		@
 361              	.LVL21:
3846:../freertos/tasks.c **** 		}
 362              		.loc 1 3846 4 view .LVU83
 363 00d4 2846     		mov	r0, r5	@, pxTCB
 364 00d6 FFF7FEFF 		bl	vPortFree		@
 365              	.LVL22:
 366              	@ ../freertos/tasks.c:3875: 	}
3875:../freertos/tasks.c **** 
 367              		.loc 1 3875 2 is_stmt 0 view .LVU84
 368 00da DDE7     		b	.L20		@
 369              	.L26:
 370              		.align	2
 371              	.L25:
 372 00dc 00000000 		.word	.LANCHOR0
 373              	.LBE46:
 374              	.LBE45:
 375              	.LBE47:
 376              	.LBE48:
 377              		.cfi_endproc
 378              	.LFE41:
 379              		.size	prvIdleTask, .-prvIdleTask
 380              		.align	1
 381              		.global	xTaskCreate
 382              		.syntax unified
 383              		.thumb
 384              		.thumb_func
 385              		.type	xTaskCreate, %function
 386              	xTaskCreate:
 387              	.LVL23:
 388              	.LFB5:
 736:../freertos/tasks.c **** 	TCB_t *pxNewTCB;
ARM GAS  /tmp/ccGXytas.s 			page 100


 389              		.loc 1 736 2 is_stmt 1 view -0
 390              		.cfi_startproc
 391              		@ args = 8, pretend = 0, frame = 0
 392              		@ frame_needed = 0, uses_anonymous_args = 0
 736:../freertos/tasks.c **** 	TCB_t *pxNewTCB;
 393              		.loc 1 736 2 is_stmt 0 view .LVU86
 394 00e0 2DE9F84F 		push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 395              	.LCFI6:
 396              		.cfi_def_cfa_offset 40
 397              		.cfi_offset 3, -40
 398              		.cfi_offset 4, -36
 399              		.cfi_offset 5, -32
 400              		.cfi_offset 6, -28
 401              		.cfi_offset 7, -24
 402              		.cfi_offset 8, -20
 403              		.cfi_offset 9, -16
 404              		.cfi_offset 10, -12
 405              		.cfi_offset 11, -8
 406              		.cfi_offset 14, -4
 407              	.LBB56:
 408              	@ ../freertos/tasks.c:770: 			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( Stack
 770:../freertos/tasks.c **** 
 409              		.loc 1 770 14 view .LVU87
 410 00e4 9600     		lsls	r6, r2, #2	@ _2, tmp234,
 411              	.LBE56:
 412              	@ ../freertos/tasks.c:736: 	{
 736:../freertos/tasks.c **** 	TCB_t *pxNewTCB;
 413              		.loc 1 736 2 view .LVU88
 414 00e6 0746     		mov	r7, r0	@ pxTaskCode, tmp232
 737:../freertos/tasks.c **** 	BaseType_t xReturn;
 415              		.loc 1 737 2 is_stmt 1 view .LVU89
 738:../freertos/tasks.c **** 
 416              		.loc 1 738 2 view .LVU90
 417              	.LBB57:
 767:../freertos/tasks.c **** 
 418              		.loc 1 767 3 view .LVU91
 770:../freertos/tasks.c **** 
 419              		.loc 1 770 4 view .LVU92
 420              	@ ../freertos/tasks.c:770: 			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( Stack
 770:../freertos/tasks.c **** 
 421              		.loc 1 770 14 is_stmt 0 view .LVU93
 422 00e8 3046     		mov	r0, r6	@, _2
 423              	.LVL24:
 770:../freertos/tasks.c **** 
 424              		.loc 1 770 14 view .LVU94
 425              	.LBE57:
 426              	@ ../freertos/tasks.c:736: 	{
 736:../freertos/tasks.c **** 	TCB_t *pxNewTCB;
 427              		.loc 1 736 2 view .LVU95
 428 00ea 0D46     		mov	r5, r1	@ pcName, tmp233
 429 00ec 9846     		mov	r8, r3	@ pvParameters, tmp235
 430 00ee DDF82C90 		ldr	r9, [sp, #44]	@ pxCreatedTask, pxCreatedTask
 431              	.LBB58:
 432              	@ ../freertos/tasks.c:770: 			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( Stack
 770:../freertos/tasks.c **** 
 433              		.loc 1 770 14 view .LVU96
 434 00f2 FFF7FEFF 		bl	pvPortMalloc		@
ARM GAS  /tmp/ccGXytas.s 			page 101


 435              	.LVL25:
 772:../freertos/tasks.c **** 			{
 436              		.loc 1 772 4 is_stmt 1 view .LVU97
 437              	@ ../freertos/tasks.c:772: 			if( pxStack != NULL )
 772:../freertos/tasks.c **** 			{
 438              		.loc 1 772 6 is_stmt 0 view .LVU98
 439 00f6 8246     		mov	r10, r0	@ pxStack, tmp236
 440 00f8 18B9     		cbnz	r0, .L28	@ pxStack,
 441              	.LVL26:
 442              	.L42:
 772:../freertos/tasks.c **** 			{
 443              		.loc 1 772 6 view .LVU99
 444              	.LBE58:
 445              	@ ../freertos/tasks.c:812: 			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 812:../freertos/tasks.c **** 		}
 446              		.loc 1 812 12 view .LVU100
 447 00fa 4FF0FF30 		mov	r0, #-1	@ <retval>,
 448              	.LVL27:
 449              	.L27:
 450              	@ ../freertos/tasks.c:816: 	}
 816:../freertos/tasks.c **** 
 451              		.loc 1 816 2 view .LVU101
 452 00fe BDE8F88F 		pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 453              	.LVL28:
 454              	.L28:
 455              	.LBB59:
 775:../freertos/tasks.c **** 
 456              		.loc 1 775 5 is_stmt 1 view .LVU102
 457              	@ ../freertos/tasks.c:775: 				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e908
 775:../freertos/tasks.c **** 
 458              		.loc 1 775 28 is_stmt 0 view .LVU103
 459 0102 5C20     		movs	r0, #92	@,
 460              	.LVL29:
 775:../freertos/tasks.c **** 
 461              		.loc 1 775 28 view .LVU104
 462 0104 FFF7FEFF 		bl	pvPortMalloc		@
 463              	.LVL30:
 777:../freertos/tasks.c **** 				{
 464              		.loc 1 777 5 is_stmt 1 view .LVU105
 465              	@ ../freertos/tasks.c:777: 				if( pxNewTCB != NULL )
 777:../freertos/tasks.c **** 				{
 466              		.loc 1 777 7 is_stmt 0 view .LVU106
 467 0108 0446     		mov	r4, r0	@ pxNewTCB, tmp237
 468 010a 0028     		cmp	r0, #0	@ pxNewTCB
 469 010c 00F0AA80 		beq	.L30	@
 780:../freertos/tasks.c **** 				}
 470              		.loc 1 780 6 is_stmt 1 view .LVU107
 471              	.LBE59:
 472              	.LBB60:
 473              	.LBB61:
 474              	@ ../freertos/tasks.c:851: 		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size
 851:../freertos/tasks.c **** 	}
 475              		.loc 1 851 12 is_stmt 0 view .LVU108
 476 0110 3246     		mov	r2, r6	@, _2
 477              	.LBE61:
 478              	.LBE60:
 479              	.LBB64:
ARM GAS  /tmp/ccGXytas.s 			page 102


 480              	@ ../freertos/tasks.c:780: 					pxNewTCB->pxStack = pxStack;
 780:../freertos/tasks.c **** 				}
 481              		.loc 1 780 24 view .LVU109
 482 0112 C0F830A0 		str	r10, [r0, #48]	@ pxStack, pxNewTCB_11->pxStack
 780:../freertos/tasks.c **** 				}
 483              		.loc 1 780 24 view .LVU110
 484              	.LBE64:
 796:../freertos/tasks.c **** 		{
 485              		.loc 1 796 3 is_stmt 1 view .LVU111
 806:../freertos/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 486              		.loc 1 806 4 view .LVU112
 487              	.LVL31:
 488              	.LBB65:
 489              	.LBI60:
 821:../freertos/tasks.c **** 									const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings an
 490              		.loc 1 821 13 view .LVU113
 491              	.LBB62:
 830:../freertos/tasks.c **** UBaseType_t x;
 492              		.loc 1 830 1 view .LVU114
 831:../freertos/tasks.c **** 
 493              		.loc 1 831 1 view .LVU115
 851:../freertos/tasks.c **** 	}
 494              		.loc 1 851 3 view .LVU116
 495              	@ ../freertos/tasks.c:851: 		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size
 851:../freertos/tasks.c **** 	}
 496              		.loc 1 851 12 is_stmt 0 view .LVU117
 497 0116 A521     		movs	r1, #165	@,
 498 0118 5046     		mov	r0, r10	@, pxStack
 499              	.LVL32:
 851:../freertos/tasks.c **** 	}
 500              		.loc 1 851 12 view .LVU118
 501 011a FFF7FEFF 		bl	memset		@
 502              	.LVL33:
 861:../freertos/tasks.c **** 		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTE
 503              		.loc 1 861 3 is_stmt 1 view .LVU119
 862:../freertos/tasks.c **** 
 504              		.loc 1 862 3 view .LVU120
 505              	@ ../freertos/tasks.c:861: 		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] )
 861:../freertos/tasks.c **** 		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTE
 506              		.loc 1 861 16 is_stmt 0 view .LVU121
 507 011e 236B     		ldr	r3, [r4, #48]	@ pxNewTCB_11->pxStack, pxNewTCB_11->pxStack
 508              	@ ../freertos/tasks.c:861: 		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] )
 861:../freertos/tasks.c **** 		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTE
 509              		.loc 1 861 38 view .LVU122
 510 0120 043E     		subs	r6, r6, #4	@ tmp169, _2,
 511              	.LVL34:
 512              	@ ../freertos/tasks.c:861: 		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] )
 861:../freertos/tasks.c **** 		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTE
 513              		.loc 1 861 16 view .LVU123
 514 0122 1E44     		add	r6, r6, r3	@ pxTopOfStack, pxNewTCB_11->pxStack
 515              	.LVL35:
 516              	@ ../freertos/tasks.c:862: 		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOf
 862:../freertos/tasks.c **** 
 517              		.loc 1 862 81 view .LVU124
 518 0124 26F00706 		bic	r6, r6, #7	@ pxTopOfStack, pxTopOfStack,
 519              	.LVL36:
 865:../freertos/tasks.c **** 
ARM GAS  /tmp/ccGXytas.s 			page 103


 520              		.loc 1 865 124 is_stmt 1 view .LVU125
 889:../freertos/tasks.c **** 	{
 521              		.loc 1 889 2 view .LVU126
 522              	@ ../freertos/tasks.c:889: 	if( pcName != NULL )
 889:../freertos/tasks.c **** 	{
 523              		.loc 1 889 4 is_stmt 0 view .LVU127
 524 0128 002D     		cmp	r5, #0	@ pcName
 525 012a 00F08D80 		beq	.L31	@
 526 012e 6B1E     		subs	r3, r5, #1	@ ivtmp.225, pcName,
 527 0130 04F13302 		add	r2, r4, #51	@ ivtmp.229, pxNewTCB,
 528 0134 0F35     		adds	r5, r5, #15	@ _125, pcName,
 529              	.LVL37:
 530              	.L33:
 893:../freertos/tasks.c **** 
 531              		.loc 1 893 4 is_stmt 1 view .LVU128
 532              	@ ../freertos/tasks.c:893: 			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 893:../freertos/tasks.c **** 
 533              		.loc 1 893 38 is_stmt 0 view .LVU129
 534 0136 13F8011F 		ldrb	r1, [r3, #1]!	@ zero_extendqisi2	@ _52, MEM[(const char *)_122]
 535              	.LVL38:
 536              	@ ../freertos/tasks.c:893: 			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 893:../freertos/tasks.c **** 
 537              		.loc 1 893 30 view .LVU130
 538 013a 02F8011F 		strb	r1, [r2, #1]!	@ _52, MEM[(char *)_123]
 898:../freertos/tasks.c **** 			{
 539              		.loc 1 898 4 is_stmt 1 view .LVU131
 540              	@ ../freertos/tasks.c:898: 			if( pcName[ x ] == ( char ) 0x00 )
 898:../freertos/tasks.c **** 			{
 541              		.loc 1 898 6 is_stmt 0 view .LVU132
 542 013e 09B1     		cbz	r1, .L32	@ _52,
 904:../freertos/tasks.c **** 			}
 543              		.loc 1 904 29 is_stmt 1 view .LVU133
 891:../freertos/tasks.c **** 		{
 544              		.loc 1 891 77 discriminator 2 view .LVU134
 545              	.LVL39:
 891:../freertos/tasks.c **** 		{
 546              		.loc 1 891 33 discriminator 1 view .LVU135
 547 0140 AB42     		cmp	r3, r5	@ ivtmp.225, _125
 548 0142 F8D1     		bne	.L33		@,
 549              	.LVL40:
 550              	.L32:
 910:../freertos/tasks.c **** 	}
 551              		.loc 1 910 3 view .LVU136
 552              	@ ../freertos/tasks.c:910: 		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 910:../freertos/tasks.c **** 	}
 553              		.loc 1 910 55 is_stmt 0 view .LVU137
 554 0144 0023     		movs	r3, #0	@ tmp173,
 555 0146 84F84330 		strb	r3, [r4, #67]	@ tmp173, pxNewTCB_11->pcTaskName[15]
 556              	.LVL41:
 557              	.L34:
 921:../freertos/tasks.c **** 	{
 558              		.loc 1 921 2 is_stmt 1 view .LVU138
 559              	@ ../freertos/tasks.c:921: 	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 921:../freertos/tasks.c **** 	{
 560              		.loc 1 921 4 is_stmt 0 view .LVU139
 561 014a 0A9D     		ldr	r5, [sp, #40]	@ uxPriority, uxPriority
 562              	@ ../freertos/tasks.c:934: 		pxNewTCB->uxMutexesHeld = 0;
ARM GAS  /tmp/ccGXytas.s 			page 104


 934:../freertos/tasks.c **** 	}
 563              		.loc 1 934 27 view .LVU140
 564 014c 4FF0000B 		mov	fp, #0	@ tmp177,
 565              	@ ../freertos/tasks.c:921: 	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 921:../freertos/tasks.c **** 	{
 566              		.loc 1 921 4 view .LVU141
 567 0150 042D     		cmp	r5, #4	@ uxPriority,
 568 0152 28BF     		it	cs
 569 0154 0425     		movcs	r5, #4	@ _54,
 570              	.LVL42:
 927:../freertos/tasks.c **** 	}
 571              		.loc 1 927 27 is_stmt 1 view .LVU142
 930:../freertos/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 572              		.loc 1 930 2 view .LVU143
 573              	@ ../freertos/tasks.c:938: 	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 938:../freertos/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 574              		.loc 1 938 2 is_stmt 0 view .LVU144
 575 0156 04F1040A 		add	r10, r4, #4	@ _55, pxNewTCB,
 576              	.LVL43:
 938:../freertos/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 577              		.loc 1 938 2 view .LVU145
 578 015a 5046     		mov	r0, r10	@, _55
 579              	@ ../freertos/tasks.c:930: 	pxNewTCB->uxPriority = uxPriority;
 930:../freertos/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 580              		.loc 1 930 23 view .LVU146
 581 015c E562     		str	r5, [r4, #44]	@ _54, pxNewTCB_11->uxPriority
 933:../freertos/tasks.c **** 		pxNewTCB->uxMutexesHeld = 0;
 582              		.loc 1 933 3 is_stmt 1 view .LVU147
 583              	@ ../freertos/tasks.c:933: 		pxNewTCB->uxBasePriority = uxPriority;
 933:../freertos/tasks.c **** 		pxNewTCB->uxMutexesHeld = 0;
 584              		.loc 1 933 28 is_stmt 0 view .LVU148
 585 015e E564     		str	r5, [r4, #76]	@ _54, pxNewTCB_11->uxBasePriority
 934:../freertos/tasks.c **** 	}
 586              		.loc 1 934 3 is_stmt 1 view .LVU149
 587              	@ ../freertos/tasks.c:934: 		pxNewTCB->uxMutexesHeld = 0;
 934:../freertos/tasks.c **** 	}
 588              		.loc 1 934 27 is_stmt 0 view .LVU150
 589 0160 C4F850B0 		str	fp, [r4, #80]	@ tmp177, pxNewTCB_11->uxMutexesHeld
 938:../freertos/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 590              		.loc 1 938 2 is_stmt 1 view .LVU151
 591 0164 FFF7FEFF 		bl	vListInitialiseItem		@
 592              	.LVL44:
 939:../freertos/tasks.c **** 
 593              		.loc 1 939 2 view .LVU152
 594              	@ ../freertos/tasks.c:946: 	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) 
 946:../freertos/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 595              		.loc 1 946 2 is_stmt 0 view .LVU153
 596 0168 C5F10505 		rsb	r5, r5, #5	@ tmp179, _54,
 597              	.LVL45:
 598              	@ ../freertos/tasks.c:939: 	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 939:../freertos/tasks.c **** 
 599              		.loc 1 939 2 view .LVU154
 600 016c 04F11800 		add	r0, r4, #24	@, pxNewTCB,
 601 0170 FFF7FEFF 		bl	vListInitialiseItem		@
 602              	.LVL46:
 943:../freertos/tasks.c **** 
 603              		.loc 1 943 2 is_stmt 1 view .LVU155
ARM GAS  /tmp/ccGXytas.s 			page 105


 604              	@ ../freertos/tasks.c:989: 		pxNewTCB->ulNotifiedValue = 0;
 989:../freertos/tasks.c **** 		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 605              		.loc 1 989 29 is_stmt 0 view .LVU156
 606 0174 C4F854B0 		str	fp, [r4, #84]	@ tmp177, pxNewTCB_11->ulNotifiedValue
 607              	@ ../freertos/tasks.c:1053: 			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTask
1053:../freertos/tasks.c **** 		}
 608              		.loc 1 1053 29 view .LVU157
 609 0178 4246     		mov	r2, r8	@, pvParameters
 610 017a 3946     		mov	r1, r7	@, pxTaskCode
 611 017c 3046     		mov	r0, r6	@, pxTopOfStack
 612              	@ ../freertos/tasks.c:943: 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 943:../freertos/tasks.c **** 
 613              		.loc 1 943 2 view .LVU158
 614 017e 2461     		str	r4, [r4, #16]	@ pxNewTCB, pxNewTCB_11->xStateListItem.pvOwner
 946:../freertos/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 615              		.loc 1 946 2 is_stmt 1 view .LVU159
 616 0180 A561     		str	r5, [r4, #24]	@ tmp179, pxNewTCB_11->xEventListItem.xItemValue
 947:../freertos/tasks.c **** 
 617              		.loc 1 947 2 view .LVU160
 618 0182 6462     		str	r4, [r4, #36]	@ pxNewTCB, pxNewTCB_11->xEventListItem.pvOwner
 974:../freertos/tasks.c **** 	}
 619              		.loc 1 974 3 view .LVU161
 989:../freertos/tasks.c **** 		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 620              		.loc 1 989 3 view .LVU162
 990:../freertos/tasks.c **** 	}
 621              		.loc 1 990 3 view .LVU163
 622              	@ ../freertos/tasks.c:990: 		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 990:../freertos/tasks.c **** 	}
 623              		.loc 1 990 27 is_stmt 0 view .LVU164
 624 0184 84F858B0 		strb	fp, [r4, #88]	@ tmp177, pxNewTCB_11->ucNotifyState
1053:../freertos/tasks.c **** 		}
 625              		.loc 1 1053 4 is_stmt 1 view .LVU165
 626              	@ ../freertos/tasks.c:1053: 			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTask
1053:../freertos/tasks.c **** 		}
 627              		.loc 1 1053 29 is_stmt 0 view .LVU166
 628 0188 FFF7FEFF 		bl	pxPortInitialiseStack		@
 629              	.LVL47:
 630              	@ ../freertos/tasks.c:1053: 			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTask
1053:../freertos/tasks.c **** 		}
 631              		.loc 1 1053 27 discriminator 1 view .LVU167
 632 018c 2060     		str	r0, [r4]	@ tmp238, pxNewTCB_11->pxTopOfStack
1059:../freertos/tasks.c **** 	{
 633              		.loc 1 1059 2 is_stmt 1 view .LVU168
 634              	@ ../freertos/tasks.c:1059: 	if( pxCreatedTask != NULL )
1059:../freertos/tasks.c **** 	{
 635              		.loc 1 1059 4 is_stmt 0 view .LVU169
 636 018e B9F1000F 		cmp	r9, #0	@ pxCreatedTask
 637 0192 01D0     		beq	.L35	@
1063:../freertos/tasks.c **** 	}
 638              		.loc 1 1063 3 is_stmt 1 view .LVU170
 639              	@ ../freertos/tasks.c:1063: 		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
1063:../freertos/tasks.c **** 	}
 640              		.loc 1 1063 18 is_stmt 0 view .LVU171
 641 0194 C9F80040 		str	r4, [r9]	@ pxNewTCB, *pxCreatedTask_18(D)
 642              	.L35:
1067:../freertos/tasks.c **** 	}
 643              		.loc 1 1067 27 is_stmt 1 view .LVU172
ARM GAS  /tmp/ccGXytas.s 			page 106


 644              	.LVL48:
1067:../freertos/tasks.c **** 	}
 645              		.loc 1 1067 27 is_stmt 0 view .LVU173
 646              	.LBE62:
 647              	.LBE65:
 807:../freertos/tasks.c **** 			xReturn = pdPASS;
 648              		.loc 1 807 4 is_stmt 1 view .LVU174
 649              	.LBB66:
 650              	.LBI66:
1072:../freertos/tasks.c **** {
 651              		.loc 1 1072 13 view .LVU175
 652              	.LBB67:
1076:../freertos/tasks.c **** 	{
 653              		.loc 1 1076 2 view .LVU176
 654              	@ ../freertos/tasks.c:1078: 		uxCurrentNumberOfTasks++;
1078:../freertos/tasks.c **** 		if( pxCurrentTCB == NULL )
 655              		.loc 1 1078 25 is_stmt 0 view .LVU177
 656 0198 344D     		ldr	r5, .L54	@ tmp183,
 657              	@ ../freertos/tasks.c:1076: 	taskENTER_CRITICAL();
1076:../freertos/tasks.c **** 	{
 658              		.loc 1 1076 2 view .LVU178
 659 019a FFF7FEFF 		bl	vPortEnterCritical		@
 660              	.LVL49:
1078:../freertos/tasks.c **** 		if( pxCurrentTCB == NULL )
 661              		.loc 1 1078 3 is_stmt 1 view .LVU179
 662              	@ ../freertos/tasks.c:1078: 		uxCurrentNumberOfTasks++;
1078:../freertos/tasks.c **** 		if( pxCurrentTCB == NULL )
 663              		.loc 1 1078 25 is_stmt 0 view .LVU180
 664 019e 2B6C     		ldr	r3, [r5, #64]	@ uxCurrentNumberOfTasks.1_21, uxCurrentNumberOfTasks
 665 01a0 05F14807 		add	r7, r5, #72	@ tmp229, tmp183,
 666              	.LVL50:
1078:../freertos/tasks.c **** 		if( pxCurrentTCB == NULL )
 667              		.loc 1 1078 25 view .LVU181
 668 01a4 0133     		adds	r3, r3, #1	@ _22, uxCurrentNumberOfTasks.1_21,
 669 01a6 2B64     		str	r3, [r5, #64]	@ _22, uxCurrentNumberOfTasks
1079:../freertos/tasks.c **** 		{
 670              		.loc 1 1079 3 is_stmt 1 view .LVU182
 671              	@ ../freertos/tasks.c:1079: 		if( pxCurrentTCB == NULL )
1079:../freertos/tasks.c **** 		{
 672              		.loc 1 1079 20 is_stmt 0 view .LVU183
 673 01a8 6E68     		ldr	r6, [r5, #4]	@ pxCurrentTCB.2_23, pxCurrentTCB
 674              	@ ../freertos/tasks.c:1079: 		if( pxCurrentTCB == NULL )
1079:../freertos/tasks.c **** 		{
 675              		.loc 1 1079 5 view .LVU184
 676 01aa 002E     		cmp	r6, #0	@ pxCurrentTCB.2_23
 677 01ac 4FD1     		bne	.L36	@
1083:../freertos/tasks.c **** 
 678              		.loc 1 1083 4 is_stmt 1 view .LVU185
 679              	@ ../freertos/tasks.c:1083: 			pxCurrentTCB = pxNewTCB;
1083:../freertos/tasks.c **** 
 680              		.loc 1 1083 17 is_stmt 0 view .LVU186
 681 01ae 6C60     		str	r4, [r5, #4]	@ pxNewTCB, pxCurrentTCB
1085:../freertos/tasks.c **** 			{
 682              		.loc 1 1085 4 is_stmt 1 view .LVU187
 683              	@ ../freertos/tasks.c:1085: 			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
1085:../freertos/tasks.c **** 			{
 684              		.loc 1 1085 31 is_stmt 0 view .LVU188
ARM GAS  /tmp/ccGXytas.s 			page 107


 685 01b0 2B6C     		ldr	r3, [r5, #64]	@ uxCurrentNumberOfTasks.3_24, uxCurrentNumberOfTasks
 686              	@ ../freertos/tasks.c:1085: 			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
1085:../freertos/tasks.c **** 			{
 687              		.loc 1 1085 6 view .LVU189
 688 01b2 012B     		cmp	r3, #1	@ uxCurrentNumberOfTasks.3_24,
 689 01b4 20D1     		bne	.L38		@,
1085:../freertos/tasks.c **** 			{
 690              		.loc 1 1085 6 view .LVU190
 691 01b6 B846     		mov	r8, r7	@ ivtmp.217, tmp229
 692              	.LVL51:
 693              	.L39:
 694              	.LBB68:
 695              	.LBB69:
3552:../freertos/tasks.c **** 	}
 696              		.loc 1 3552 3 is_stmt 1 view .LVU191
 697 01b8 4046     		mov	r0, r8	@, ivtmp.217
 698              	@ ../freertos/tasks.c:3550: 	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) con
3550:../freertos/tasks.c **** 	{
 699              		.loc 1 3550 101 is_stmt 0 discriminator 3 view .LVU192
 700 01ba 0136     		adds	r6, r6, #1	@ uxPriority, uxPriority,
 701              	.LVL52:
 702              	@ ../freertos/tasks.c:3552: 		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
3552:../freertos/tasks.c **** 	}
 703              		.loc 1 3552 3 view .LVU193
 704 01bc FFF7FEFF 		bl	vListInitialise		@
 705              	.LVL53:
3550:../freertos/tasks.c **** 	{
 706              		.loc 1 3550 101 is_stmt 1 discriminator 3 view .LVU194
3550:../freertos/tasks.c **** 	{
 707              		.loc 1 3550 51 discriminator 1 view .LVU195
 708 01c0 052E     		cmp	r6, #5	@ uxPriority,
 709 01c2 08F11408 		add	r8, r8, #20	@ ivtmp.217, ivtmp.217,
 710 01c6 F7D1     		bne	.L39		@,
3555:../freertos/tasks.c **** 	vListInitialise( &xDelayedTaskList2 );
 711              		.loc 1 3555 2 view .LVU196
 712 01c8 294E     		ldr	r6, .L54+4	@ tmp190,
 713              	.LVL54:
3555:../freertos/tasks.c **** 	vListInitialise( &xDelayedTaskList2 );
 714              		.loc 1 3555 2 is_stmt 0 view .LVU197
 715 01ca 3046     		mov	r0, r6	@, tmp190
 716              	@ ../freertos/tasks.c:3556: 	vListInitialise( &xDelayedTaskList2 );
3556:../freertos/tasks.c **** 	vListInitialise( &xPendingReadyList );
 717              		.loc 1 3556 2 view .LVU198
 718 01cc 06F11408 		add	r8, r6, #20	@ tmp192, tmp190,
 719              	@ ../freertos/tasks.c:3555: 	vListInitialise( &xDelayedTaskList1 );
3555:../freertos/tasks.c **** 	vListInitialise( &xDelayedTaskList2 );
 720              		.loc 1 3555 2 view .LVU199
 721 01d0 FFF7FEFF 		bl	vListInitialise		@
 722              	.LVL55:
3556:../freertos/tasks.c **** 	vListInitialise( &xPendingReadyList );
 723              		.loc 1 3556 2 is_stmt 1 view .LVU200
 724 01d4 4046     		mov	r0, r8	@, tmp192
 725 01d6 FFF7FEFF 		bl	vListInitialise		@
 726              	.LVL56:
3557:../freertos/tasks.c **** 
 727              		.loc 1 3557 2 view .LVU201
 728 01da 06F12800 		add	r0, r6, #40	@, tmp190,
ARM GAS  /tmp/ccGXytas.s 			page 108


 729 01de FFF7FEFF 		bl	vListInitialise		@
 730              	.LVL57:
3561:../freertos/tasks.c **** 	}
 731              		.loc 1 3561 3 view .LVU202
 732 01e2 A6F18000 		sub	r0, r6, #128	@, tmp190,
 733 01e6 FFF7FEFF 		bl	vListInitialise		@
 734              	.LVL58:
3567:../freertos/tasks.c **** 	}
 735              		.loc 1 3567 3 view .LVU203
 736 01ea A6F1A000 		sub	r0, r6, #160	@, tmp190,
 737 01ee FFF7FEFF 		bl	vListInitialise		@
 738              	.LVL59:
3573:../freertos/tasks.c **** 	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 739              		.loc 1 3573 2 view .LVU204
 740              	@ ../freertos/tasks.c:3573: 	pxDelayedTaskList = &xDelayedTaskList1;
3573:../freertos/tasks.c **** 	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 741              		.loc 1 3573 20 is_stmt 0 view .LVU205
 742 01f2 6E62     		str	r6, [r5, #36]	@ tmp190, pxDelayedTaskList
3574:../freertos/tasks.c **** }
 743              		.loc 1 3574 2 is_stmt 1 view .LVU206
 744              	@ ../freertos/tasks.c:3574: 	pxOverflowDelayedTaskList = &xDelayedTaskList2;
3574:../freertos/tasks.c **** }
 745              		.loc 1 3574 28 is_stmt 0 view .LVU207
 746 01f4 C5F82080 		str	r8, [r5, #32]	@ tmp192, pxOverflowDelayedTaskList
 747              	.LVL60:
 748              	.L38:
3574:../freertos/tasks.c **** }
 749              		.loc 1 3574 28 view .LVU208
 750              	.LBE69:
 751              	.LBE68:
1115:../freertos/tasks.c **** 			}
 752              		.loc 1 1115 29 is_stmt 1 view .LVU209
1119:../freertos/tasks.c **** 
 753              		.loc 1 1119 3 view .LVU210
 754              	@ ../freertos/tasks.c:1119: 		uxTaskNumber++;
1119:../freertos/tasks.c **** 
 755              		.loc 1 1119 15 is_stmt 0 view .LVU211
 756 01f8 D5F8EC30 		ldr	r3, [r5, #236]	@ uxTaskNumber, uxTaskNumber
 757              	@ ../freertos/tasks.c:1129: 		prvAddTaskToReadyList( pxNewTCB );
1129:../freertos/tasks.c **** 
 758              		.loc 1 1129 3 view .LVU212
 759 01fc 1420     		movs	r0, #20	@ tmp219,
 760              	@ ../freertos/tasks.c:1119: 		uxTaskNumber++;
1119:../freertos/tasks.c **** 
 761              		.loc 1 1119 15 view .LVU213
 762 01fe 0133     		adds	r3, r3, #1	@ _30, uxTaskNumber,
 763 0200 C5F8EC30 		str	r3, [r5, #236]	@ _30, uxTaskNumber
1124:../freertos/tasks.c **** 		}
 764              		.loc 1 1124 4 is_stmt 1 view .LVU214
 765              	@ ../freertos/tasks.c:1124: 			pxNewTCB->uxTCBNumber = uxTaskNumber;
1124:../freertos/tasks.c **** 		}
 766              		.loc 1 1124 26 is_stmt 0 view .LVU215
 767 0204 6364     		str	r3, [r4, #68]	@ _30, pxNewTCB_11->uxTCBNumber
1127:../freertos/tasks.c **** 
 768              		.loc 1 1127 31 is_stmt 1 view .LVU216
1129:../freertos/tasks.c **** 
 769              		.loc 1 1129 3 view .LVU217
ARM GAS  /tmp/ccGXytas.s 			page 109


1129:../freertos/tasks.c **** 
 770              		.loc 1 1129 3 view .LVU218
 771 0206 0123     		movs	r3, #1	@ tmp214,
 772 0208 E26A     		ldr	r2, [r4, #44]	@ _31, pxNewTCB_11->uxPriority
 773 020a A968     		ldr	r1, [r5, #8]	@ uxTopReadyPriority.8_33, uxTopReadyPriority
 774 020c 9340     		lsls	r3, r3, r2	@ tmp213, tmp214, _31
 775 020e 0B43     		orrs	r3, r3, r1	@, _34, tmp213, uxTopReadyPriority.8_33
 776 0210 00FB0270 		mla	r0, r0, r2, r7	@, tmp219, _31, tmp229
 777 0214 5146     		mov	r1, r10	@, _55
 778 0216 AB60     		str	r3, [r5, #8]	@ _34, uxTopReadyPriority
1129:../freertos/tasks.c **** 
 779              		.loc 1 1129 3 view .LVU219
 780 0218 FFF7FEFF 		bl	vListInsertEnd		@
 781              	.LVL61:
1129:../freertos/tasks.c **** 
 782              		.loc 1 1129 36 discriminator 1 view .LVU220
1131:../freertos/tasks.c **** 	}
 783              		.loc 1 1131 3 view .LVU221
1133:../freertos/tasks.c **** 
 784              		.loc 1 1133 2 view .LVU222
 785 021c FFF7FEFF 		bl	vPortExitCritical		@
 786              	.LVL62:
1135:../freertos/tasks.c **** 	{
 787              		.loc 1 1135 2 view .LVU223
 788              	@ ../freertos/tasks.c:1135: 	if( xSchedulerRunning != pdFALSE )
1135:../freertos/tasks.c **** 	{
 789              		.loc 1 1135 24 is_stmt 0 view .LVU224
 790 0220 D5F8E830 		ldr	r3, [r5, #232]	@ xSchedulerRunning.9_37, xSchedulerRunning
 791              	@ ../freertos/tasks.c:1135: 	if( xSchedulerRunning != pdFALSE )
1135:../freertos/tasks.c **** 	{
 792              		.loc 1 1135 4 view .LVU225
 793 0224 73B1     		cbz	r3, .L41	@ xSchedulerRunning.9_37,
1139:../freertos/tasks.c **** 		{
 794              		.loc 1 1139 3 is_stmt 1 view .LVU226
 795              	@ ../freertos/tasks.c:1139: 		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
1139:../freertos/tasks.c **** 		{
 796              		.loc 1 1139 19 is_stmt 0 view .LVU227
 797 0226 6B68     		ldr	r3, [r5, #4]	@ pxCurrentTCB.10_38, pxCurrentTCB
 798              	@ ../freertos/tasks.c:1139: 		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
1139:../freertos/tasks.c **** 		{
 799              		.loc 1 1139 5 view .LVU228
 800 0228 DA6A     		ldr	r2, [r3, #44]	@ pxCurrentTCB.10_38->uxPriority, pxCurrentTCB.10_38->uxPriority
 801 022a E36A     		ldr	r3, [r4, #44]	@ pxNewTCB_11->uxPriority, pxNewTCB_11->uxPriority
 802 022c 9A42     		cmp	r2, r3	@ pxCurrentTCB.10_38->uxPriority, pxNewTCB_11->uxPriority
 803 022e 09D2     		bcs	.L41		@,
1141:../freertos/tasks.c **** 		}
 804              		.loc 1 1141 4 is_stmt 1 view .LVU229
 805 0230 4FF0E023 		mov	r3, #-536813568	@ tmp225,
 806 0234 4FF08052 		mov	r2, #268435456	@ tmp226,
 807 0238 C3F8042D 		str	r2, [r3, #3332]	@ tmp226, MEM[(volatile uint32_t *)3758157060B]
 808              	.LVL63:
1141:../freertos/tasks.c **** 		}
 809              		.loc 1 1141 4 view .LVU230
 810              		.syntax unified
 811              	@ 1141 "../freertos/tasks.c" 1
 812 023c BFF34F8F 		dsb	
 813              	@ 0 "" 2
ARM GAS  /tmp/ccGXytas.s 			page 110


1141:../freertos/tasks.c **** 		}
 814              		.loc 1 1141 4 view .LVU231
 815              	@ 1141 "../freertos/tasks.c" 1
 816 0240 BFF36F8F 		isb
 817              	@ 0 "" 2
1141:../freertos/tasks.c **** 		}
 818              		.loc 1 1141 35 view .LVU232
 819              		.thumb
 820              		.syntax unified
 821              	.L41:
 822              	.LBE67:
 823              	.LBE66:
 824              	@ ../freertos/tasks.c:808: 			xReturn = pdPASS;
 808:../freertos/tasks.c **** 		}
 825              		.loc 1 808 12 is_stmt 0 view .LVU233
 826 0244 0120     		movs	r0, #1	@ <retval>,
 827              	.LVL64:
 815:../freertos/tasks.c **** 	}
 828              		.loc 1 815 3 is_stmt 1 view .LVU234
 829              	@ ../freertos/tasks.c:815: 		return xReturn;
 815:../freertos/tasks.c **** 	}
 830              		.loc 1 815 10 is_stmt 0 view .LVU235
 831 0246 5AE7     		b	.L27		@
 832              	.LVL65:
 833              	.L31:
 834              	.LBB71:
 835              	.LBB63:
 916:../freertos/tasks.c **** 	}
 836              		.loc 1 916 3 is_stmt 1 view .LVU236
 837              	@ ../freertos/tasks.c:916: 		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 916:../freertos/tasks.c **** 	}
 838              		.loc 1 916 29 is_stmt 0 view .LVU237
 839 0248 84F83450 		strb	r5, [r4, #52]	@ pcName, pxNewTCB_11->pcTaskName[0]
 840 024c 7DE7     		b	.L34		@
 841              	.LVL66:
 842              	.L36:
 916:../freertos/tasks.c **** 	}
 843              		.loc 1 916 29 view .LVU238
 844              	.LBE63:
 845              	.LBE71:
 846              	.LBB72:
 847              	.LBB70:
1102:../freertos/tasks.c **** 			{
 848              		.loc 1 1102 4 is_stmt 1 view .LVU239
 849              	@ ../freertos/tasks.c:1102: 			if( xSchedulerRunning == pdFALSE )
1102:../freertos/tasks.c **** 			{
 850              		.loc 1 1102 26 is_stmt 0 view .LVU240
 851 024e D5F8E820 		ldr	r2, [r5, #232]	@ xSchedulerRunning.4_25, xSchedulerRunning
 852              	@ ../freertos/tasks.c:1104: 				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
1104:../freertos/tasks.c **** 				{
 853              		.loc 1 1104 45 view .LVU241
 854 0252 E36A     		ldr	r3, [r4, #44]	@ pretmp_113, pxNewTCB_11->uxPriority
 855              	@ ../freertos/tasks.c:1102: 			if( xSchedulerRunning == pdFALSE )
1102:../freertos/tasks.c **** 			{
 856              		.loc 1 1102 6 view .LVU242
 857 0254 002A     		cmp	r2, #0	@ xSchedulerRunning.4_25
 858 0256 CFD1     		bne	.L38	@
ARM GAS  /tmp/ccGXytas.s 			page 111


1104:../freertos/tasks.c **** 				{
 859              		.loc 1 1104 5 is_stmt 1 view .LVU243
 860              	@ ../freertos/tasks.c:1104: 				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
1104:../freertos/tasks.c **** 				{
 861              		.loc 1 1104 21 is_stmt 0 view .LVU244
 862 0258 6A68     		ldr	r2, [r5, #4]	@ pxCurrentTCB.5_26, pxCurrentTCB
 863              	@ ../freertos/tasks.c:1104: 				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
1104:../freertos/tasks.c **** 				{
 864              		.loc 1 1104 7 view .LVU245
 865 025a D26A     		ldr	r2, [r2, #44]	@ pxCurrentTCB.5_26->uxPriority, pxCurrentTCB.5_26->uxPriority
 866 025c 9A42     		cmp	r2, r3	@ pxCurrentTCB.5_26->uxPriority, pretmp_113
1106:../freertos/tasks.c **** 				}
 867              		.loc 1 1106 6 is_stmt 1 view .LVU246
 868              	@ ../freertos/tasks.c:1106: 					pxCurrentTCB = pxNewTCB;
1106:../freertos/tasks.c **** 				}
 869              		.loc 1 1106 19 is_stmt 0 view .LVU247
 870 025e 98BF     		it	ls
 871 0260 6C60     		strls	r4, [r5, #4]	@ pxNewTCB, pxCurrentTCB
 872 0262 C9E7     		b	.L38		@
 873              	.LVL67:
 874              	.L30:
1106:../freertos/tasks.c **** 				}
 875              		.loc 1 1106 19 view .LVU248
 876              	.LBE70:
 877              	.LBE72:
 878              	.LBB73:
 786:../freertos/tasks.c **** 				}
 879              		.loc 1 786 6 is_stmt 1 view .LVU249
 880 0264 5046     		mov	r0, r10	@, pxStack
 881              	.LVL68:
 786:../freertos/tasks.c **** 				}
 882              		.loc 1 786 6 is_stmt 0 view .LVU250
 883 0266 FFF7FEFF 		bl	vPortFree		@
 884              	.LVL69:
 786:../freertos/tasks.c **** 				}
 885              		.loc 1 786 6 view .LVU251
 886              	.LBE73:
 796:../freertos/tasks.c **** 		{
 887              		.loc 1 796 3 is_stmt 1 view .LVU252
 888 026a 46E7     		b	.L42		@
 889              	.L55:
 890              		.align	2
 891              	.L54:
 892 026c 00000000 		.word	.LANCHOR0
 893 0270 AC000000 		.word	.LANCHOR0+172
 894              		.cfi_endproc
 895              	.LFE5:
 896              		.size	xTaskCreate, .-xTaskCreate
 897              		.align	1
 898              		.global	vTaskDelete
 899              		.syntax unified
 900              		.thumb
 901              		.thumb_func
 902              		.type	vTaskDelete, %function
 903              	vTaskDelete:
 904              	.LVL70:
 905              	.LFB8:
ARM GAS  /tmp/ccGXytas.s 			page 112


1158:../freertos/tasks.c **** 	TCB_t *pxTCB;
 906              		.loc 1 1158 2 view -0
 907              		.cfi_startproc
 908              		@ args = 0, pretend = 0, frame = 0
 909              		@ frame_needed = 0, uses_anonymous_args = 0
1159:../freertos/tasks.c **** 
 910              		.loc 1 1159 2 view .LVU254
1161:../freertos/tasks.c **** 		{
 911              		.loc 1 1161 3 view .LVU255
 912              	@ ../freertos/tasks.c:1158: 	{
1158:../freertos/tasks.c **** 	TCB_t *pxTCB;
 913              		.loc 1 1158 2 is_stmt 0 view .LVU256
 914 0274 70B5     		push	{r4, r5, r6, lr}	@
 915              	.LCFI7:
 916              		.cfi_def_cfa_offset 16
 917              		.cfi_offset 4, -16
 918              		.cfi_offset 5, -12
 919              		.cfi_offset 6, -8
 920              		.cfi_offset 14, -4
 921              	@ ../freertos/tasks.c:1158: 	{
1158:../freertos/tasks.c **** 	TCB_t *pxTCB;
 922              		.loc 1 1158 2 view .LVU257
 923 0276 0546     		mov	r5, r0	@ xTaskToDelete, tmp164
 924 0278 244C     		ldr	r4, .L69	@ tmp163,
 925              	@ ../freertos/tasks.c:1161: 		taskENTER_CRITICAL();
1161:../freertos/tasks.c **** 		{
 926              		.loc 1 1161 3 view .LVU258
 927 027a FFF7FEFF 		bl	vPortEnterCritical		@
 928              	.LVL71:
1165:../freertos/tasks.c **** 
 929              		.loc 1 1165 4 is_stmt 1 view .LVU259
 930              	@ ../freertos/tasks.c:1165: 			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
1165:../freertos/tasks.c **** 
 931              		.loc 1 1165 12 is_stmt 0 view .LVU260
 932 027e 05B9     		cbnz	r5, .L57	@ xTaskToDelete,
 933              	@ ../freertos/tasks.c:1165: 			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
1165:../freertos/tasks.c **** 
 934              		.loc 1 1165 12 discriminator 1 view .LVU261
 935 0280 6568     		ldr	r5, [r4, #4]	@ xTaskToDelete, pxCurrentTCB
 936              	.LVL72:
 937              	.L57:
1168:../freertos/tasks.c **** 			{
 938              		.loc 1 1168 4 is_stmt 1 view .LVU262
 939              	@ ../freertos/tasks.c:1168: 			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 
1168:../freertos/tasks.c **** 			{
 940              		.loc 1 1168 8 is_stmt 0 view .LVU263
 941 0282 2E1D     		adds	r6, r5, #4	@ _1, xTaskToDelete,
 942 0284 3046     		mov	r0, r6	@, _1
 943 0286 FFF7FEFF 		bl	uxListRemove		@
 944              	.LVL73:
 945              	@ ../freertos/tasks.c:1168: 			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 
1168:../freertos/tasks.c **** 			{
 946              		.loc 1 1168 6 discriminator 1 view .LVU264
 947 028a 58B9     		cbnz	r0, .L58	@ tmp165,
1170:../freertos/tasks.c **** 			}
 948              		.loc 1 1170 5 is_stmt 1 view .LVU265
 949 028c 1423     		movs	r3, #20	@ tmp138,
ARM GAS  /tmp/ccGXytas.s 			page 113


 950 028e E96A     		ldr	r1, [r5, #44]	@ _3, iftmp.11_20->uxPriority
 951 0290 03FB0143 		mla	r3, r3, r1, r4	@ tmp139, tmp138, _3, tmp163
 952 0294 9B6C     		ldr	r3, [r3, #72]	@ _4, pxReadyTasksLists[_3].uxNumberOfItems
 953 0296 2BB9     		cbnz	r3, .L58	@ _4,
1170:../freertos/tasks.c **** 			}
 954              		.loc 1 1170 5 discriminator 1 view .LVU266
 955 0298 0122     		movs	r2, #1	@ tmp143,
 956 029a A368     		ldr	r3, [r4, #8]	@ uxTopReadyPriority.12_7, uxTopReadyPriority
 957 029c 8A40     		lsls	r2, r2, r1	@ tmp142, tmp143, _3
 958 029e 23EA0203 		bic	r3, r3, r2	@ _8, uxTopReadyPriority.12_7, tmp142
 959 02a2 A360     		str	r3, [r4, #8]	@ _8, uxTopReadyPriority
 960              	.L58:
1174:../freertos/tasks.c **** 			}
 961              		.loc 1 1174 29 view .LVU267
1178:../freertos/tasks.c **** 			{
 962              		.loc 1 1178 4 view .LVU268
 963              	@ ../freertos/tasks.c:1178: 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1178:../freertos/tasks.c **** 			{
 964              		.loc 1 1178 6 is_stmt 0 view .LVU269
 965 02a4 AB6A     		ldr	r3, [r5, #40]	@ iftmp.11_20->xEventListItem.pvContainer, iftmp.11_20->xEventListItem.pvContain
 966 02a6 1BB1     		cbz	r3, .L59	@ iftmp.11_20->xEventListItem.pvContainer,
1180:../freertos/tasks.c **** 			}
 967              		.loc 1 1180 5 is_stmt 1 view .LVU270
 968              	@ ../freertos/tasks.c:1180: 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1180:../freertos/tasks.c **** 			}
 969              		.loc 1 1180 14 is_stmt 0 view .LVU271
 970 02a8 05F11800 		add	r0, r5, #24	@, xTaskToDelete,
 971 02ac FFF7FEFF 		bl	uxListRemove		@
 972              	.LVL74:
 973              	.L59:
1184:../freertos/tasks.c **** 			}
 974              		.loc 1 1184 29 is_stmt 1 view .LVU272
1191:../freertos/tasks.c **** 
 975              		.loc 1 1191 4 view .LVU273
 976              	@ ../freertos/tasks.c:1191: 			uxTaskNumber++;
1191:../freertos/tasks.c **** 
 977              		.loc 1 1191 16 is_stmt 0 view .LVU274
 978 02b0 D4F8EC30 		ldr	r3, [r4, #236]	@ uxTaskNumber, uxTaskNumber
 979 02b4 0133     		adds	r3, r3, #1	@ tmp150, uxTaskNumber,
 980 02b6 C4F8EC30 		str	r3, [r4, #236]	@ tmp150, uxTaskNumber
1193:../freertos/tasks.c **** 			{
 981              		.loc 1 1193 4 is_stmt 1 view .LVU275
 982              	@ ../freertos/tasks.c:1193: 			if( pxTCB == pxCurrentTCB )
1193:../freertos/tasks.c **** 			{
 983              		.loc 1 1193 14 is_stmt 0 view .LVU276
 984 02ba 6368     		ldr	r3, [r4, #4]	@ pxCurrentTCB.14_13, pxCurrentTCB
 985              	@ ../freertos/tasks.c:1193: 			if( pxTCB == pxCurrentTCB )
1193:../freertos/tasks.c **** 			{
 986              		.loc 1 1193 6 view .LVU277
 987 02bc AB42     		cmp	r3, r5	@ pxCurrentTCB.14_13, xTaskToDelete
 988 02be 19D1     		bne	.L60		@,
1200:../freertos/tasks.c **** 
 989              		.loc 1 1200 5 is_stmt 1 view .LVU278
 990 02c0 3146     		mov	r1, r6	@, _1
 991 02c2 1348     		ldr	r0, .L69+4	@,
 992 02c4 FFF7FEFF 		bl	vListInsertEnd		@
 993              	.LVL75:
ARM GAS  /tmp/ccGXytas.s 			page 114


1205:../freertos/tasks.c **** 
 994              		.loc 1 1205 5 view .LVU279
 995 02c8 636C     		ldr	r3, [r4, #68]	@ uxDeletedTasksWaitingCleanUp.15_14, uxDeletedTasksWaitingCleanUp
 996 02ca 0133     		adds	r3, r3, #1	@ _15, uxDeletedTasksWaitingCleanUp.15_14,
 997 02cc 6364     		str	r3, [r4, #68]	@ _15, uxDeletedTasksWaitingCleanUp
1212:../freertos/tasks.c **** 			}
 998              		.loc 1 1212 54 view .LVU280
 999              	.L61:
1224:../freertos/tasks.c **** 		}
 1000              		.loc 1 1224 29 view .LVU281
1226:../freertos/tasks.c **** 
 1001              		.loc 1 1226 3 view .LVU282
 1002 02ce FFF7FEFF 		bl	vPortExitCritical		@
 1003              	.LVL76:
1230:../freertos/tasks.c **** 		{
 1004              		.loc 1 1230 3 view .LVU283
 1005              	@ ../freertos/tasks.c:1230: 		if( xSchedulerRunning != pdFALSE )
1230:../freertos/tasks.c **** 		{
 1006              		.loc 1 1230 25 is_stmt 0 view .LVU284
 1007 02d2 D4F8E830 		ldr	r3, [r4, #232]	@ xSchedulerRunning.17_18, xSchedulerRunning
 1008              	@ ../freertos/tasks.c:1230: 		if( xSchedulerRunning != pdFALSE )
1230:../freertos/tasks.c **** 		{
 1009              		.loc 1 1230 5 view .LVU285
 1010 02d6 63B1     		cbz	r3, .L56	@ xSchedulerRunning.17_18,
1232:../freertos/tasks.c **** 			{
 1011              		.loc 1 1232 4 is_stmt 1 view .LVU286
 1012              	@ ../freertos/tasks.c:1232: 			if( pxTCB == pxCurrentTCB )
1232:../freertos/tasks.c **** 			{
 1013              		.loc 1 1232 14 is_stmt 0 view .LVU287
 1014 02d8 6368     		ldr	r3, [r4, #4]	@ pxCurrentTCB.18_19, pxCurrentTCB
 1015              	@ ../freertos/tasks.c:1232: 			if( pxTCB == pxCurrentTCB )
1232:../freertos/tasks.c **** 			{
 1016              		.loc 1 1232 6 view .LVU288
 1017 02da AB42     		cmp	r3, r5	@ pxCurrentTCB.18_19, xTaskToDelete
 1018 02dc 09D1     		bne	.L56		@,
1234:../freertos/tasks.c **** 				portYIELD_WITHIN_API();
 1019              		.loc 1 1234 46 is_stmt 1 view .LVU289
1235:../freertos/tasks.c **** 			}
 1020              		.loc 1 1235 5 view .LVU290
 1021 02de 4FF0E023 		mov	r3, #-536813568	@ tmp161,
 1022 02e2 4FF08052 		mov	r2, #268435456	@ tmp162,
 1023 02e6 C3F8042D 		str	r2, [r3, #3332]	@ tmp162, MEM[(volatile uint32_t *)3758157060B]
1235:../freertos/tasks.c **** 			}
 1024              		.loc 1 1235 5 view .LVU291
 1025              		.syntax unified
 1026              	@ 1235 "../freertos/tasks.c" 1
 1027 02ea BFF34F8F 		dsb	
 1028              	@ 0 "" 2
1235:../freertos/tasks.c **** 			}
 1029              		.loc 1 1235 5 view .LVU292
 1030              	@ 1235 "../freertos/tasks.c" 1
 1031 02ee BFF36F8F 		isb
 1032              	@ 0 "" 2
1235:../freertos/tasks.c **** 			}
 1033              		.loc 1 1235 27 view .LVU293
1239:../freertos/tasks.c **** 			}
 1034              		.loc 1 1239 29 view .LVU294
ARM GAS  /tmp/ccGXytas.s 			page 115


 1035              		.thumb
 1036              		.syntax unified
 1037              	.L56:
 1038              	@ ../freertos/tasks.c:1242: 	}
1242:../freertos/tasks.c **** 
 1039              		.loc 1 1242 2 is_stmt 0 view .LVU295
 1040 02f2 70BD     		pop	{r4, r5, r6, pc}	@
 1041              	.LVL77:
 1042              	.L60:
1216:../freertos/tasks.c **** 				prvDeleteTCB( pxTCB );
 1043              		.loc 1 1216 5 is_stmt 1 view .LVU296
 1044 02f4 236C     		ldr	r3, [r4, #64]	@ uxCurrentNumberOfTasks.16_16, uxCurrentNumberOfTasks
 1045              	.LBB76:
 1046              	.LBB77:
 1047              	@ ../freertos/tasks.c:3845: 			vPortFree( pxTCB->pxStack );
3845:../freertos/tasks.c **** 			vPortFree( pxTCB );
 1048              		.loc 1 3845 4 is_stmt 0 view .LVU297
 1049 02f6 286B     		ldr	r0, [r5, #48]	@, iftmp.11_20->pxStack
 1050              	.LBE77:
 1051              	.LBE76:
 1052              	@ ../freertos/tasks.c:1216: 				--uxCurrentNumberOfTasks;
1216:../freertos/tasks.c **** 				prvDeleteTCB( pxTCB );
 1053              		.loc 1 1216 5 view .LVU298
 1054 02f8 013B     		subs	r3, r3, #1	@ _17, uxCurrentNumberOfTasks.16_16,
 1055 02fa 2364     		str	r3, [r4, #64]	@ _17, uxCurrentNumberOfTasks
1217:../freertos/tasks.c **** 
 1056              		.loc 1 1217 5 is_stmt 1 view .LVU299
 1057              	.LVL78:
 1058              	.LBB79:
 1059              	.LBI76:
3826:../freertos/tasks.c **** 	{
 1060              		.loc 1 3826 14 view .LVU300
 1061              	.LBB78:
3831:../freertos/tasks.c **** 
 1062              		.loc 1 3831 3 view .LVU301
3845:../freertos/tasks.c **** 			vPortFree( pxTCB );
 1063              		.loc 1 3845 4 view .LVU302
 1064 02fc FFF7FEFF 		bl	vPortFree		@
 1065              	.LVL79:
3846:../freertos/tasks.c **** 		}
 1066              		.loc 1 3846 4 view .LVU303
 1067 0300 2846     		mov	r0, r5	@, xTaskToDelete
 1068 0302 FFF7FEFF 		bl	vPortFree		@
 1069              	.LVL80:
3846:../freertos/tasks.c **** 		}
 1070              		.loc 1 3846 4 is_stmt 0 view .LVU304
 1071              	.LBE78:
 1072              	.LBE79:
1221:../freertos/tasks.c **** 			}
 1073              		.loc 1 1221 5 is_stmt 1 view .LVU305
 1074 0306 FFF7B1FE 		bl	prvResetNextTaskUnblockTime		@
 1075              	.LVL81:
 1076 030a E0E7     		b	.L61		@
 1077              	.L70:
 1078              		.align	2
 1079              	.L69:
 1080 030c 00000000 		.word	.LANCHOR0
ARM GAS  /tmp/ccGXytas.s 			page 116


 1081 0310 2C000000 		.word	.LANCHOR0+44
 1082              		.cfi_endproc
 1083              	.LFE8:
 1084              		.size	vTaskDelete, .-vTaskDelete
 1085              		.align	1
 1086              		.global	eTaskGetState
 1087              		.syntax unified
 1088              		.thumb
 1089              		.thumb_func
 1090              		.type	eTaskGetState, %function
 1091              	eTaskGetState:
 1092              	.LVL82:
 1093              	.LFB11:
1379:../freertos/tasks.c **** 	eTaskState eReturn;
 1094              		.loc 1 1379 2 view -0
 1095              		.cfi_startproc
 1096              		@ args = 0, pretend = 0, frame = 0
 1097              		@ frame_needed = 0, uses_anonymous_args = 0
1380:../freertos/tasks.c **** 	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
 1098              		.loc 1 1380 2 view .LVU307
1381:../freertos/tasks.c **** 	const TCB_t * const pxTCB = xTask;
 1099              		.loc 1 1381 2 view .LVU308
1382:../freertos/tasks.c **** 
 1100              		.loc 1 1382 2 view .LVU309
1384:../freertos/tasks.c **** 
 1101              		.loc 1 1384 24 view .LVU310
1386:../freertos/tasks.c **** 		{
 1102              		.loc 1 1386 3 view .LVU311
 1103              	@ ../freertos/tasks.c:1379: 	{
1379:../freertos/tasks.c **** 	eTaskState eReturn;
 1104              		.loc 1 1379 2 is_stmt 0 view .LVU312
 1105 0314 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}	@
 1106              	.LCFI8:
 1107              		.cfi_def_cfa_offset 24
 1108              		.cfi_offset 4, -24
 1109              		.cfi_offset 5, -20
 1110              		.cfi_offset 6, -16
 1111              		.cfi_offset 7, -12
 1112              		.cfi_offset 8, -8
 1113              		.cfi_offset 14, -4
 1114              	@ ../freertos/tasks.c:1386: 		if( pxTCB == pxCurrentTCB )
1386:../freertos/tasks.c **** 		{
 1115              		.loc 1 1386 13 view .LVU313
 1116 0318 164C     		ldr	r4, .L81	@ tmp122,
 1117              	@ ../freertos/tasks.c:1379: 	{
1379:../freertos/tasks.c **** 	eTaskState eReturn;
 1118              		.loc 1 1379 2 view .LVU314
 1119 031a 0546     		mov	r5, r0	@ xTask, tmp134
 1120              	@ ../freertos/tasks.c:1386: 		if( pxTCB == pxCurrentTCB )
1386:../freertos/tasks.c **** 		{
 1121              		.loc 1 1386 13 view .LVU315
 1122 031c 6368     		ldr	r3, [r4, #4]	@ pxCurrentTCB.31_1, pxCurrentTCB
 1123              	@ ../freertos/tasks.c:1386: 		if( pxTCB == pxCurrentTCB )
1386:../freertos/tasks.c **** 		{
 1124              		.loc 1 1386 5 view .LVU316
 1125 031e 8342     		cmp	r3, r0	@ pxCurrentTCB.31_1, xTask
 1126 0320 21D0     		beq	.L74		@,
ARM GAS  /tmp/ccGXytas.s 			page 117


 1127              	.LVL83:
 1128              	.LBB82:
 1129              	.LBI82:
1378:../freertos/tasks.c **** 	{
 1130              		.loc 1 1378 13 is_stmt 1 view .LVU317
 1131              	.LBB83:
1393:../freertos/tasks.c **** 			{
 1132              		.loc 1 1393 4 view .LVU318
 1133 0322 FFF7FEFF 		bl	vPortEnterCritical		@
 1134              	.LVL84:
1395:../freertos/tasks.c **** 				pxDelayedList = pxDelayedTaskList;
 1135              		.loc 1 1395 5 view .LVU319
 1136              	@ ../freertos/tasks.c:1396: 				pxDelayedList = pxDelayedTaskList;
1396:../freertos/tasks.c **** 				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 1137              		.loc 1 1396 19 is_stmt 0 view .LVU320
 1138 0326 D4F82480 		ldr	r8, [r4, #36]	@ pxDelayedList, pxDelayedTaskList
 1139              	@ ../freertos/tasks.c:1395: 				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) )
1395:../freertos/tasks.c **** 				pxDelayedList = pxDelayedTaskList;
 1140              		.loc 1 1395 17 view .LVU321
 1141 032a 6E69     		ldr	r6, [r5, #20]	@ pxStateList, MEM[(const struct TCB_t *)xTask_3(D)].xStateListItem.pvContainer
 1142              	.LVL85:
1396:../freertos/tasks.c **** 				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 1143              		.loc 1 1396 5 is_stmt 1 view .LVU322
1397:../freertos/tasks.c **** 			}
 1144              		.loc 1 1397 5 view .LVU323
 1145              	@ ../freertos/tasks.c:1397: 				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
1397:../freertos/tasks.c **** 			}
 1146              		.loc 1 1397 29 is_stmt 0 view .LVU324
 1147 032c 276A     		ldr	r7, [r4, #32]	@ pxOverflowedDelayedList, pxOverflowDelayedTaskList
 1148              	.LVL86:
1399:../freertos/tasks.c **** 
 1149              		.loc 1 1399 4 is_stmt 1 view .LVU325
 1150 032e FFF7FEFF 		bl	vPortExitCritical		@
 1151              	.LVL87:
1401:../freertos/tasks.c **** 			{
 1152              		.loc 1 1401 4 view .LVU326
 1153              	@ ../freertos/tasks.c:1401: 			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowe
1401:../freertos/tasks.c **** 			{
 1154              		.loc 1 1401 6 is_stmt 0 view .LVU327
 1155 0332 4645     		cmp	r6, r8	@ pxStateList, pxDelayedList
 1156 0334 19D0     		beq	.L77		@,
 1157              	@ ../freertos/tasks.c:1401: 			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowe
1401:../freertos/tasks.c **** 			{
 1158              		.loc 1 1401 41 discriminator 1 view .LVU328
 1159 0336 BE42     		cmp	r6, r7	@ pxStateList, pxOverflowedDelayedList
 1160 0338 17D0     		beq	.L77		@,
1409:../freertos/tasks.c **** 				{
 1161              		.loc 1 1409 10 is_stmt 1 view .LVU329
 1162              	@ ../freertos/tasks.c:1409: 				else if( pxStateList == &xSuspendedTaskList )
1409:../freertos/tasks.c **** 				{
 1163              		.loc 1 1409 12 is_stmt 0 view .LVU330
 1164 033a 04F10C03 		add	r3, r4, #12	@ tmp126, tmp122,
 1165 033e 9E42     		cmp	r6, r3	@ pxStateList, tmp126
 1166 0340 09D1     		bne	.L73		@,
1414:../freertos/tasks.c **** 					{
 1167              		.loc 1 1414 6 is_stmt 1 view .LVU331
 1168              	@ ../freertos/tasks.c:1414: 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL 
ARM GAS  /tmp/ccGXytas.s 			page 118


1414:../freertos/tasks.c **** 					{
 1169              		.loc 1 1414 8 is_stmt 0 view .LVU332
 1170 0342 AB6A     		ldr	r3, [r5, #40]	@ MEM[(const struct TCB_t *)xTask_3(D)].xEventListItem.pvContainer, MEM[(const s
 1171 0344 8BB9     		cbnz	r3, .L77	@ MEM[(const struct TCB_t *)xTask_3(D)].xEventListItem.pvContainer,
1422:../freertos/tasks.c **** 							{
 1172              		.loc 1 1422 8 is_stmt 1 view .LVU333
 1173              	@ ../freertos/tasks.c:1422: 							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
1422:../freertos/tasks.c **** 							{
 1174              		.loc 1 1422 17 is_stmt 0 view .LVU334
 1175 0346 95F85830 		ldrb	r3, [r5, #88]	@ zero_extendqisi2	@ MEM[(const struct TCB_t *)xTask_3(D)].ucNotifyState, MEM[(
 1176              	@ ../freertos/tasks.c:1428: 								eReturn = eSuspended;
1428:../freertos/tasks.c **** 							}
 1177              		.loc 1 1428 17 view .LVU335
 1178 034a 012B     		cmp	r3, #1	@ MEM[(const struct TCB_t *)xTask_3(D)].ucNotifyState,
 1179 034c 0CBF     		ite	eq
 1180 034e 0220     		moveq	r0, #2	@ <retval>,
 1181 0350 0320     		movne	r0, #3	@ <retval>,
 1182              	.LVL88:
 1183              	.L72:
1428:../freertos/tasks.c **** 							}
 1184              		.loc 1 1428 17 view .LVU336
 1185              	.LBE83:
 1186              	.LBE82:
1462:../freertos/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 1187              		.loc 1 1462 3 is_stmt 1 view .LVU337
 1188              	@ ../freertos/tasks.c:1463: 	} /*lint !e818 xTask cannot be a pointer to const because it is a type
1463:../freertos/tasks.c **** 
 1189              		.loc 1 1463 2 is_stmt 0 view .LVU338
 1190 0352 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}	@
 1191              	.LVL89:
 1192              	.L73:
 1193              	.LBB86:
 1194              	.LBB84:
1445:../freertos/tasks.c **** 				{
 1195              		.loc 1 1445 10 is_stmt 1 view .LVU339
 1196              	@ ../freertos/tasks.c:1445: 				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateL
1445:../freertos/tasks.c **** 				{
 1197              		.loc 1 1445 12 is_stmt 0 view .LVU340
 1198 0356 2C34     		adds	r4, r4, #44	@ tmp132, tmp122,
 1199 0358 A642     		cmp	r6, r4	@ pxStateList, tmp132
 1200 035a 08D0     		beq	.L79		@,
 1201              	@ ../freertos/tasks.c:1458: 				eReturn = eReady;
1458:../freertos/tasks.c **** 			}
 1202              		.loc 1 1458 13 view .LVU341
 1203 035c 002E     		cmp	r6, #0	@ pxStateList,
 1204 035e 0CBF     		ite	eq
 1205 0360 0420     		moveq	r0, #4	@ <retval>,
 1206 0362 0120     		movne	r0, #1	@ <retval>,
 1207 0364 F5E7     		b	.L72		@
 1208              	.LVL90:
 1209              	.L74:
1458:../freertos/tasks.c **** 			}
 1210              		.loc 1 1458 13 view .LVU342
 1211              	.LBE84:
 1212              	.LBE86:
 1213              	@ ../freertos/tasks.c:1389: 			eReturn = eRunning;
1389:../freertos/tasks.c **** 		}
ARM GAS  /tmp/ccGXytas.s 			page 119


 1214              		.loc 1 1389 12 view .LVU343
 1215 0366 0020     		movs	r0, #0	@ <retval>,
 1216              	.LVL91:
1389:../freertos/tasks.c **** 		}
 1217              		.loc 1 1389 12 view .LVU344
 1218 0368 F3E7     		b	.L72		@
 1219              	.LVL92:
 1220              	.L77:
 1221              	.LBB87:
 1222              	.LBB85:
 1223              	@ ../freertos/tasks.c:1405: 				eReturn = eBlocked;
1405:../freertos/tasks.c **** 			}
 1224              		.loc 1 1405 13 view .LVU345
 1225 036a 0220     		movs	r0, #2	@ <retval>,
 1226 036c F1E7     		b	.L72		@
 1227              	.L79:
 1228              	@ ../freertos/tasks.c:1450: 					eReturn = eDeleted;
1450:../freertos/tasks.c **** 				}
 1229              		.loc 1 1450 14 view .LVU346
 1230 036e 0420     		movs	r0, #4	@ <retval>,
 1231 0370 EFE7     		b	.L72		@
 1232              	.L82:
 1233 0372 00BF     		.align	2
 1234              	.L81:
 1235 0374 00000000 		.word	.LANCHOR0
 1236              	.LBE85:
 1237              	.LBE87:
 1238              		.cfi_endproc
 1239              	.LFE11:
 1240              		.size	eTaskGetState, .-eTaskGetState
 1241              		.align	1
 1242              		.global	uxTaskPriorityGet
 1243              		.syntax unified
 1244              		.thumb
 1245              		.thumb_func
 1246              		.type	uxTaskPriorityGet, %function
 1247              	uxTaskPriorityGet:
 1248              	.LVL93:
 1249              	.LFB12:
1471:../freertos/tasks.c **** 	TCB_t const *pxTCB;
 1250              		.loc 1 1471 2 is_stmt 1 view -0
 1251              		.cfi_startproc
 1252              		@ args = 0, pretend = 0, frame = 0
 1253              		@ frame_needed = 0, uses_anonymous_args = 0
1472:../freertos/tasks.c **** 	UBaseType_t uxReturn;
 1254              		.loc 1 1472 2 view .LVU348
1473:../freertos/tasks.c **** 
 1255              		.loc 1 1473 2 view .LVU349
1475:../freertos/tasks.c **** 		{
 1256              		.loc 1 1475 3 view .LVU350
 1257              	@ ../freertos/tasks.c:1471: 	{
1471:../freertos/tasks.c **** 	TCB_t const *pxTCB;
 1258              		.loc 1 1471 2 is_stmt 0 view .LVU351
 1259 0378 10B5     		push	{r4, lr}	@
 1260              	.LCFI9:
 1261              		.cfi_def_cfa_offset 8
 1262              		.cfi_offset 4, -8
ARM GAS  /tmp/ccGXytas.s 			page 120


 1263              		.cfi_offset 14, -4
 1264              	@ ../freertos/tasks.c:1471: 	{
1471:../freertos/tasks.c **** 	TCB_t const *pxTCB;
 1265              		.loc 1 1471 2 view .LVU352
 1266 037a 0446     		mov	r4, r0	@ xTask, tmp118
 1267              	@ ../freertos/tasks.c:1475: 		taskENTER_CRITICAL();
1475:../freertos/tasks.c **** 		{
 1268              		.loc 1 1475 3 view .LVU353
 1269 037c FFF7FEFF 		bl	vPortEnterCritical		@
 1270              	.LVL94:
1479:../freertos/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1271              		.loc 1 1479 4 is_stmt 1 view .LVU354
 1272              	@ ../freertos/tasks.c:1479: 			pxTCB = prvGetTCBFromHandle( xTask );
1479:../freertos/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1273              		.loc 1 1479 12 is_stmt 0 view .LVU355
 1274 0380 0CB9     		cbnz	r4, .L84	@ xTask,
 1275              	@ ../freertos/tasks.c:1479: 			pxTCB = prvGetTCBFromHandle( xTask );
1479:../freertos/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1276              		.loc 1 1479 12 discriminator 1 view .LVU356
 1277 0382 034B     		ldr	r3, .L85	@ tmp116,
 1278 0384 5C68     		ldr	r4, [r3, #4]	@ xTask, pxCurrentTCB
 1279              	.LVL95:
 1280              	.L84:
1480:../freertos/tasks.c **** 		}
 1281              		.loc 1 1480 4 is_stmt 1 view .LVU357
 1282              	@ ../freertos/tasks.c:1480: 			uxReturn = pxTCB->uxPriority;
1480:../freertos/tasks.c **** 		}
 1283              		.loc 1 1480 13 is_stmt 0 view .LVU358
 1284 0386 E46A     		ldr	r4, [r4, #44]	@ <retval>, iftmp.32_1->uxPriority
 1285              	.LVL96:
1482:../freertos/tasks.c **** 
 1286              		.loc 1 1482 3 is_stmt 1 view .LVU359
 1287 0388 FFF7FEFF 		bl	vPortExitCritical		@
 1288              	.LVL97:
1484:../freertos/tasks.c **** 	}
 1289              		.loc 1 1484 3 view .LVU360
 1290              	@ ../freertos/tasks.c:1485: 	}
1485:../freertos/tasks.c **** 
 1291              		.loc 1 1485 2 is_stmt 0 view .LVU361
 1292 038c 2046     		mov	r0, r4	@, <retval>
 1293 038e 10BD     		pop	{r4, pc}	@
 1294              	.LVL98:
 1295              	.L86:
1485:../freertos/tasks.c **** 
 1296              		.loc 1 1485 2 view .LVU362
 1297              		.align	2
 1298              	.L85:
 1299 0390 00000000 		.word	.LANCHOR0
 1300              		.cfi_endproc
 1301              	.LFE12:
 1302              		.size	uxTaskPriorityGet, .-uxTaskPriorityGet
 1303              		.align	1
 1304              		.global	uxTaskPriorityGetFromISR
 1305              		.syntax unified
 1306              		.thumb
 1307              		.thumb_func
 1308              		.type	uxTaskPriorityGetFromISR, %function
ARM GAS  /tmp/ccGXytas.s 			page 121


 1309              	uxTaskPriorityGetFromISR:
 1310              	.LVL99:
 1311              	.LFB13:
1493:../freertos/tasks.c **** 	TCB_t const *pxTCB;
 1312              		.loc 1 1493 2 is_stmt 1 view -0
 1313              		.cfi_startproc
 1314              		@ args = 0, pretend = 0, frame = 0
 1315              		@ frame_needed = 0, uses_anonymous_args = 0
 1316              		@ link register save eliminated.
1494:../freertos/tasks.c **** 	UBaseType_t uxReturn, uxSavedInterruptState;
 1317              		.loc 1 1494 2 view .LVU364
1495:../freertos/tasks.c **** 
 1318              		.loc 1 1495 2 view .LVU365
1513:../freertos/tasks.c **** 
 1319              		.loc 1 1513 45 view .LVU366
1515:../freertos/tasks.c **** 		{
 1320              		.loc 1 1515 3 view .LVU367
 1321              	.LBB88:
 1322              	.LBI88:
 1323              		.file 2 "../freertos/portable/GCC/ARM_CM3/portmacro.h"
   1:../freertos/portable/GCC/ARM_CM3/portmacro.h **** /*
   2:../freertos/portable/GCC/ARM_CM3/portmacro.h ****  * FreeRTOS Kernel V10.2.1
   3:../freertos/portable/GCC/ARM_CM3/portmacro.h ****  * Copyright (C) 2019 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:../freertos/portable/GCC/ARM_CM3/portmacro.h ****  *
   5:../freertos/portable/GCC/ARM_CM3/portmacro.h ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:../freertos/portable/GCC/ARM_CM3/portmacro.h ****  * this software and associated documentation files (the "Software"), to deal in
   7:../freertos/portable/GCC/ARM_CM3/portmacro.h ****  * the Software without restriction, including without limitation the rights to
   8:../freertos/portable/GCC/ARM_CM3/portmacro.h ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:../freertos/portable/GCC/ARM_CM3/portmacro.h ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:../freertos/portable/GCC/ARM_CM3/portmacro.h ****  * subject to the following conditions:
  11:../freertos/portable/GCC/ARM_CM3/portmacro.h ****  *
  12:../freertos/portable/GCC/ARM_CM3/portmacro.h ****  * The above copyright notice and this permission notice shall be included in all
  13:../freertos/portable/GCC/ARM_CM3/portmacro.h ****  * copies or substantial portions of the Software.
  14:../freertos/portable/GCC/ARM_CM3/portmacro.h ****  *
  15:../freertos/portable/GCC/ARM_CM3/portmacro.h ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:../freertos/portable/GCC/ARM_CM3/portmacro.h ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:../freertos/portable/GCC/ARM_CM3/portmacro.h ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:../freertos/portable/GCC/ARM_CM3/portmacro.h ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:../freertos/portable/GCC/ARM_CM3/portmacro.h ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:../freertos/portable/GCC/ARM_CM3/portmacro.h ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:../freertos/portable/GCC/ARM_CM3/portmacro.h ****  *
  22:../freertos/portable/GCC/ARM_CM3/portmacro.h ****  * http://www.FreeRTOS.org
  23:../freertos/portable/GCC/ARM_CM3/portmacro.h ****  * http://aws.amazon.com/freertos
  24:../freertos/portable/GCC/ARM_CM3/portmacro.h ****  *
  25:../freertos/portable/GCC/ARM_CM3/portmacro.h ****  * 1 tab == 4 spaces!
  26:../freertos/portable/GCC/ARM_CM3/portmacro.h ****  */
  27:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 
  28:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 
  29:../freertos/portable/GCC/ARM_CM3/portmacro.h **** #ifndef PORTMACRO_H
  30:../freertos/portable/GCC/ARM_CM3/portmacro.h **** #define PORTMACRO_H
  31:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 
  32:../freertos/portable/GCC/ARM_CM3/portmacro.h **** #ifdef __cplusplus
  33:../freertos/portable/GCC/ARM_CM3/portmacro.h **** extern "C" {
  34:../freertos/portable/GCC/ARM_CM3/portmacro.h **** #endif
  35:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 
  36:../freertos/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------
  37:../freertos/portable/GCC/ARM_CM3/portmacro.h ****  * Port specific definitions.
ARM GAS  /tmp/ccGXytas.s 			page 122


  38:../freertos/portable/GCC/ARM_CM3/portmacro.h ****  *
  39:../freertos/portable/GCC/ARM_CM3/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  40:../freertos/portable/GCC/ARM_CM3/portmacro.h ****  * given hardware and compiler.
  41:../freertos/portable/GCC/ARM_CM3/portmacro.h ****  *
  42:../freertos/portable/GCC/ARM_CM3/portmacro.h ****  * These settings should not be altered.
  43:../freertos/portable/GCC/ARM_CM3/portmacro.h ****  *-----------------------------------------------------------
  44:../freertos/portable/GCC/ARM_CM3/portmacro.h ****  */
  45:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 
  46:../freertos/portable/GCC/ARM_CM3/portmacro.h **** /* Type definitions. */
  47:../freertos/portable/GCC/ARM_CM3/portmacro.h **** #define portCHAR		char
  48:../freertos/portable/GCC/ARM_CM3/portmacro.h **** #define portFLOAT		float
  49:../freertos/portable/GCC/ARM_CM3/portmacro.h **** #define portDOUBLE		double
  50:../freertos/portable/GCC/ARM_CM3/portmacro.h **** #define portLONG		long
  51:../freertos/portable/GCC/ARM_CM3/portmacro.h **** #define portSHORT		short
  52:../freertos/portable/GCC/ARM_CM3/portmacro.h **** #define portSTACK_TYPE	uint32_t
  53:../freertos/portable/GCC/ARM_CM3/portmacro.h **** #define portBASE_TYPE	long
  54:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 
  55:../freertos/portable/GCC/ARM_CM3/portmacro.h **** typedef portSTACK_TYPE StackType_t;
  56:../freertos/portable/GCC/ARM_CM3/portmacro.h **** typedef long BaseType_t;
  57:../freertos/portable/GCC/ARM_CM3/portmacro.h **** typedef unsigned long UBaseType_t;
  58:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 
  59:../freertos/portable/GCC/ARM_CM3/portmacro.h **** #if( configUSE_16_BIT_TICKS == 1 )
  60:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	typedef uint16_t TickType_t;
  61:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffff
  62:../freertos/portable/GCC/ARM_CM3/portmacro.h **** #else
  63:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	typedef uint32_t TickType_t;
  64:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffffffffUL
  65:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 
  66:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	/* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
  67:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	not need to be guarded with a critical section. */
  68:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	#define portTICK_TYPE_IS_ATOMIC 1
  69:../freertos/portable/GCC/ARM_CM3/portmacro.h **** #endif
  70:../freertos/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
  71:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 
  72:../freertos/portable/GCC/ARM_CM3/portmacro.h **** /* Architecture specifics. */
  73:../freertos/portable/GCC/ARM_CM3/portmacro.h **** #define portSTACK_GROWTH			( -1 )
  74:../freertos/portable/GCC/ARM_CM3/portmacro.h **** #define portTICK_PERIOD_MS			( ( TickType_t ) 1000 / configTICK_RATE_HZ )
  75:../freertos/portable/GCC/ARM_CM3/portmacro.h **** #define portBYTE_ALIGNMENT			8
  76:../freertos/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
  77:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 
  78:../freertos/portable/GCC/ARM_CM3/portmacro.h **** /* Scheduler utilities. */
  79:../freertos/portable/GCC/ARM_CM3/portmacro.h **** #define portYIELD() 															\
  80:../freertos/portable/GCC/ARM_CM3/portmacro.h **** {																				\
  81:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	/* Set a PendSV to request a context switch. */								\
  82:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;								\
  83:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 																				\
  84:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	/* Barriers are normally not required but do ensure the code is completely	\
  85:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	within the specified behaviour for the architecture. */						\
  86:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	__asm volatile( "dsb" ::: "memory" );										\
  87:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	__asm volatile( "isb" );													\
  88:../freertos/portable/GCC/ARM_CM3/portmacro.h **** }
  89:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 
  90:../freertos/portable/GCC/ARM_CM3/portmacro.h **** #define portNVIC_INT_CTRL_REG		( * ( ( volatile uint32_t * ) 0xe000ed04 ) )
  91:../freertos/portable/GCC/ARM_CM3/portmacro.h **** #define portNVIC_PENDSVSET_BIT		( 1UL << 28UL )
  92:../freertos/portable/GCC/ARM_CM3/portmacro.h **** #define portEND_SWITCHING_ISR( xSwitchRequired ) if( xSwitchRequired != pdFALSE ) portYIELD()
  93:../freertos/portable/GCC/ARM_CM3/portmacro.h **** #define portYIELD_FROM_ISR( x ) portEND_SWITCHING_ISR( x )
  94:../freertos/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
ARM GAS  /tmp/ccGXytas.s 			page 123


  95:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 
  96:../freertos/portable/GCC/ARM_CM3/portmacro.h **** /* Critical section management. */
  97:../freertos/portable/GCC/ARM_CM3/portmacro.h **** extern void vPortEnterCritical( void );
  98:../freertos/portable/GCC/ARM_CM3/portmacro.h **** extern void vPortExitCritical( void );
  99:../freertos/portable/GCC/ARM_CM3/portmacro.h **** #define portSET_INTERRUPT_MASK_FROM_ISR()		ulPortRaiseBASEPRI()
 100:../freertos/portable/GCC/ARM_CM3/portmacro.h **** #define portCLEAR_INTERRUPT_MASK_FROM_ISR(x)	vPortSetBASEPRI(x)
 101:../freertos/portable/GCC/ARM_CM3/portmacro.h **** #define portDISABLE_INTERRUPTS()				vPortRaiseBASEPRI()
 102:../freertos/portable/GCC/ARM_CM3/portmacro.h **** #define portENABLE_INTERRUPTS()					vPortSetBASEPRI(0)
 103:../freertos/portable/GCC/ARM_CM3/portmacro.h **** #define portENTER_CRITICAL()					vPortEnterCritical()
 104:../freertos/portable/GCC/ARM_CM3/portmacro.h **** #define portEXIT_CRITICAL()						vPortExitCritical()
 105:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 
 106:../freertos/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 107:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 
 108:../freertos/portable/GCC/ARM_CM3/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 109:../freertos/portable/GCC/ARM_CM3/portmacro.h **** not necessary for to use this port.  They are defined so the common demo files
 110:../freertos/portable/GCC/ARM_CM3/portmacro.h **** (which build with all the ports) will build. */
 111:../freertos/portable/GCC/ARM_CM3/portmacro.h **** #define portTASK_FUNCTION_PROTO( vFunction, pvParameters ) void vFunction( void *pvParameters )
 112:../freertos/portable/GCC/ARM_CM3/portmacro.h **** #define portTASK_FUNCTION( vFunction, pvParameters ) void vFunction( void *pvParameters )
 113:../freertos/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 114:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 
 115:../freertos/portable/GCC/ARM_CM3/portmacro.h **** /* Tickless idle/low power functionality. */
 116:../freertos/portable/GCC/ARM_CM3/portmacro.h **** #ifndef portSUPPRESS_TICKS_AND_SLEEP
 117:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 118:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	#define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime ) vPortSuppressTicksAndSleep( xExpectedIdl
 119:../freertos/portable/GCC/ARM_CM3/portmacro.h **** #endif
 120:../freertos/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 121:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 
 122:../freertos/portable/GCC/ARM_CM3/portmacro.h **** /* Architecture specific optimisations. */
 123:../freertos/portable/GCC/ARM_CM3/portmacro.h **** #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 124:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	#define configUSE_PORT_OPTIMISED_TASK_SELECTION 1
 125:../freertos/portable/GCC/ARM_CM3/portmacro.h **** #endif
 126:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 
 127:../freertos/portable/GCC/ARM_CM3/portmacro.h **** #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 128:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 
 129:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	/* Generic helper function. */
 130:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitma
 131:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	{
 132:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	uint8_t ucReturn;
 133:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 
 134:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 135:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 		return ucReturn;
 136:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	}
 137:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 
 138:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	/* Check the configuration. */
 139:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	#if( configMAX_PRIORITIES > 32 )
 140:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 		#error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIORITIES is 
 141:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	#endif
 142:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 
 143:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	/* Store/clear the ready priorities in a bit map. */
 144:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	#define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) |= ( 1UL 
 145:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	#define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) &= ~( 1UL 
 146:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 
 147:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	/*-----------------------------------------------------------*/
 148:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 
 149:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	#define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities ) uxTopPriority = ( 31UL - ( ui
 150:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 
 151:../freertos/portable/GCC/ARM_CM3/portmacro.h **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
ARM GAS  /tmp/ccGXytas.s 			page 124


 152:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 
 153:../freertos/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 154:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 
 155:../freertos/portable/GCC/ARM_CM3/portmacro.h **** #ifdef configASSERT
 156:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	void vPortValidateInterruptPriority( void );
 157:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	#define portASSERT_IF_INTERRUPT_PRIORITY_INVALID() 	vPortValidateInterruptPriority()
 158:../freertos/portable/GCC/ARM_CM3/portmacro.h **** #endif
 159:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 
 160:../freertos/portable/GCC/ARM_CM3/portmacro.h **** /* portNOP() is not required by this port. */
 161:../freertos/portable/GCC/ARM_CM3/portmacro.h **** #define portNOP()
 162:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 
 163:../freertos/portable/GCC/ARM_CM3/portmacro.h **** #define portINLINE	__inline
 164:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 
 165:../freertos/portable/GCC/ARM_CM3/portmacro.h **** #ifndef portFORCE_INLINE
 166:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	#define portFORCE_INLINE inline __attribute__(( always_inline))
 167:../freertos/portable/GCC/ARM_CM3/portmacro.h **** #endif
 168:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 
 169:../freertos/portable/GCC/ARM_CM3/portmacro.h **** portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 170:../freertos/portable/GCC/ARM_CM3/portmacro.h **** {
 171:../freertos/portable/GCC/ARM_CM3/portmacro.h **** uint32_t ulCurrentInterrupt;
 172:../freertos/portable/GCC/ARM_CM3/portmacro.h **** BaseType_t xReturn;
 173:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 
 174:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	/* Obtain the number of the currently executing interrupt. */
 175:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 176:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 
 177:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	if( ulCurrentInterrupt == 0 )
 178:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	{
 179:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 		xReturn = pdFALSE;
 180:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	}
 181:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	else
 182:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	{
 183:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 		xReturn = pdTRUE;
 184:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	}
 185:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 
 186:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	return xReturn;
 187:../freertos/portable/GCC/ARM_CM3/portmacro.h **** }
 188:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 
 189:../freertos/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 190:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 
 191:../freertos/portable/GCC/ARM_CM3/portmacro.h **** portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 192:../freertos/portable/GCC/ARM_CM3/portmacro.h **** {
 193:../freertos/portable/GCC/ARM_CM3/portmacro.h **** uint32_t ulNewBASEPRI;
 194:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 
 195:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	__asm volatile
 196:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	(
 197:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 		"	mov %0, %1												\n" \
 198:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 		"	msr basepri, %0											\n" \
 199:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 		"	isb														\n" \
 200:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 		"	dsb														\n" \
 201:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
 202:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	);
 203:../freertos/portable/GCC/ARM_CM3/portmacro.h **** }
 204:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 
 205:../freertos/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 206:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 
 207:../freertos/portable/GCC/ARM_CM3/portmacro.h **** portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
 1324              		.loc 2 207 34 view .LVU368
ARM GAS  /tmp/ccGXytas.s 			page 125


 1325              	.LBB89:
 208:../freertos/portable/GCC/ARM_CM3/portmacro.h **** {
 209:../freertos/portable/GCC/ARM_CM3/portmacro.h **** uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
 1326              		.loc 2 209 1 view .LVU369
 210:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 
 211:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	__asm volatile
 1327              		.loc 2 211 2 view .LVU370
 1328              		.syntax unified
 1329              	@ 211 "../freertos/portable/GCC/ARM_CM3/portmacro.h" 1
 1330 0394 EFF31183 			mrs r3, basepri												@ ulOriginalBASEPRI
 1331 0398 4FF01002 		mov r2, #16													@ ulNewBASEPRI,
 1332 039c 82F31188 		msr basepri, r2												@ ulNewBASEPRI
 1333 03a0 BFF36F8F 		isb														
 1334 03a4 BFF34F8F 		dsb														
 1335              	
 1336              	@ 0 "" 2
 1337              	.LVL100:
 212:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	(
 213:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 		"	mrs %0, basepri											\n" \
 214:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 		"	mov %1, %2												\n" \
 215:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 		"	msr basepri, %1											\n" \
 216:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 		"	isb														\n" \
 217:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 		"	dsb														\n" \
 218:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "
 219:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	);
 220:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 
 221:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	/* This return will not be reached but is necessary to prevent compiler
 222:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	warnings. */
 223:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	return ulOriginalBASEPRI;
 1338              		.loc 2 223 2 view .LVU371
 1339              		.loc 2 223 2 is_stmt 0 view .LVU372
 1340              		.thumb
 1341              		.syntax unified
 1342              	.LBE89:
 1343              	.LBE88:
1519:../freertos/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1344              		.loc 1 1519 4 is_stmt 1 view .LVU373
 1345              	@ ../freertos/tasks.c:1519: 			pxTCB = prvGetTCBFromHandle( xTask );
1519:../freertos/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1346              		.loc 1 1519 12 is_stmt 0 view .LVU374
 1347 03a8 08B9     		cbnz	r0, .L88	@ xTask,
 1348              	@ ../freertos/tasks.c:1519: 			pxTCB = prvGetTCBFromHandle( xTask );
1519:../freertos/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1349              		.loc 1 1519 12 discriminator 1 view .LVU375
 1350 03aa 034A     		ldr	r2, .L89	@ tmp120,
 1351 03ac 5068     		ldr	r0, [r2, #4]	@ xTask, pxCurrentTCB
 1352              	.LVL101:
 1353              	.L88:
1520:../freertos/tasks.c **** 		}
 1354              		.loc 1 1520 4 is_stmt 1 view .LVU376
 1355              	@ ../freertos/tasks.c:1520: 			uxReturn = pxTCB->uxPriority;
1520:../freertos/tasks.c **** 		}
 1356              		.loc 1 1520 13 is_stmt 0 view .LVU377
 1357 03ae C06A     		ldr	r0, [r0, #44]	@ <retval>, iftmp.33_1->uxPriority
 1358              	.LVL102:
1522:../freertos/tasks.c **** 
 1359              		.loc 1 1522 3 is_stmt 1 view .LVU378
ARM GAS  /tmp/ccGXytas.s 			page 126


 1360              	.LBB90:
 1361              	.LBI90:
 224:../freertos/portable/GCC/ARM_CM3/portmacro.h **** }
 225:../freertos/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 226:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 
 227:../freertos/portable/GCC/ARM_CM3/portmacro.h **** portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
 1362              		.loc 2 227 30 view .LVU379
 1363              	.LBB91:
 228:../freertos/portable/GCC/ARM_CM3/portmacro.h **** {
 229:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	__asm volatile
 1364              		.loc 2 229 2 view .LVU380
 1365              		.syntax unified
 1366              	@ 229 "../freertos/portable/GCC/ARM_CM3/portmacro.h" 1
 1367 03b0 83F31188 			msr basepri, r3		@ ulOriginalBASEPRI
 1368              	@ 0 "" 2
 1369              	.LVL103:
 1370              		.loc 2 229 2 is_stmt 0 view .LVU381
 1371              		.thumb
 1372              		.syntax unified
 1373              	.LBE91:
 1374              	.LBE90:
1524:../freertos/tasks.c **** 	}
 1375              		.loc 1 1524 3 is_stmt 1 view .LVU382
 1376              	@ ../freertos/tasks.c:1525: 	}
1525:../freertos/tasks.c **** 
 1377              		.loc 1 1525 2 is_stmt 0 view .LVU383
 1378 03b4 7047     		bx	lr	@
 1379              	.L90:
 1380 03b6 00BF     		.align	2
 1381              	.L89:
 1382 03b8 00000000 		.word	.LANCHOR0
 1383              		.cfi_endproc
 1384              	.LFE13:
 1385              		.size	uxTaskPriorityGetFromISR, .-uxTaskPriorityGetFromISR
 1386              		.align	1
 1387              		.global	vTaskPrioritySet
 1388              		.syntax unified
 1389              		.thumb
 1390              		.thumb_func
 1391              		.type	vTaskPrioritySet, %function
 1392              	vTaskPrioritySet:
 1393              	.LVL104:
 1394              	.LFB14:
1533:../freertos/tasks.c **** 	TCB_t *pxTCB;
 1395              		.loc 1 1533 2 is_stmt 1 view -0
 1396              		.cfi_startproc
 1397              		@ args = 0, pretend = 0, frame = 0
 1398              		@ frame_needed = 0, uses_anonymous_args = 0
1534:../freertos/tasks.c **** 	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
 1399              		.loc 1 1534 2 view .LVU385
1535:../freertos/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
 1400              		.loc 1 1535 2 view .LVU386
1536:../freertos/tasks.c **** 
 1401              		.loc 1 1536 2 view .LVU387
1538:../freertos/tasks.c **** 
 1402              		.loc 1 1538 59 view .LVU388
1541:../freertos/tasks.c **** 		{
ARM GAS  /tmp/ccGXytas.s 			page 127


 1403              		.loc 1 1541 3 view .LVU389
 1404              	@ ../freertos/tasks.c:1541: 		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
1541:../freertos/tasks.c **** 		{
 1405              		.loc 1 1541 5 is_stmt 0 view .LVU390
 1406 03bc 0429     		cmp	r1, #4	@ tmp182,
 1407              	@ ../freertos/tasks.c:1533: 	{
1533:../freertos/tasks.c **** 	TCB_t *pxTCB;
 1408              		.loc 1 1533 2 view .LVU391
 1409 03be 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}	@
 1410              	.LCFI10:
 1411              		.cfi_def_cfa_offset 32
 1412              		.cfi_offset 3, -32
 1413              		.cfi_offset 4, -28
 1414              		.cfi_offset 5, -24
 1415              		.cfi_offset 6, -20
 1416              		.cfi_offset 7, -16
 1417              		.cfi_offset 8, -12
 1418              		.cfi_offset 9, -8
 1419              		.cfi_offset 14, -4
 1420              	@ ../freertos/tasks.c:1541: 		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
1541:../freertos/tasks.c **** 		{
 1421              		.loc 1 1541 5 view .LVU392
 1422 03c2 28BF     		it	cs
 1423 03c4 0421     		movcs	r1, #4	@ tmp182,
 1424              	.LVL105:
 1425              	@ ../freertos/tasks.c:1533: 	{
1533:../freertos/tasks.c **** 	TCB_t *pxTCB;
 1426              		.loc 1 1533 2 view .LVU393
 1427 03c6 0446     		mov	r4, r0	@ xTask, tmp181
 1428              	@ ../freertos/tasks.c:1541: 		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
1541:../freertos/tasks.c **** 		{
 1429              		.loc 1 1541 5 view .LVU394
 1430 03c8 0D46     		mov	r5, r1	@ _32, tmp182
 1431              	.LVL106:
1547:../freertos/tasks.c **** 		}
 1432              		.loc 1 1547 28 is_stmt 1 view .LVU395
1550:../freertos/tasks.c **** 		{
 1433              		.loc 1 1550 3 view .LVU396
 1434 03ca FFF7FEFF 		bl	vPortEnterCritical		@
 1435              	.LVL107:
1554:../freertos/tasks.c **** 
 1436              		.loc 1 1554 4 view .LVU397
 1437              	@ ../freertos/tasks.c:1554: 			pxTCB = prvGetTCBFromHandle( xTask );
1554:../freertos/tasks.c **** 
 1438              		.loc 1 1554 12 is_stmt 0 view .LVU398
 1439 03ce 0CB9     		cbnz	r4, .L92	@ xTask,
 1440              	@ ../freertos/tasks.c:1554: 			pxTCB = prvGetTCBFromHandle( xTask );
1554:../freertos/tasks.c **** 
 1441              		.loc 1 1554 12 discriminator 1 view .LVU399
 1442 03d0 294B     		ldr	r3, .L106	@ tmp144,
 1443 03d2 5C68     		ldr	r4, [r3, #4]	@ xTask, pxCurrentTCB
 1444              	.LVL108:
 1445              	.L92:
1556:../freertos/tasks.c **** 
 1446              		.loc 1 1556 50 is_stmt 1 view .LVU400
1560:../freertos/tasks.c **** 			}
 1447              		.loc 1 1560 5 view .LVU401
ARM GAS  /tmp/ccGXytas.s 			page 128


 1448              	@ ../freertos/tasks.c:1560: 				uxCurrentBasePriority = pxTCB->uxBasePriority;
1560:../freertos/tasks.c **** 			}
 1449              		.loc 1 1560 27 is_stmt 0 view .LVU402
 1450 03d4 E36C     		ldr	r3, [r4, #76]	@ uxCurrentBasePriority, iftmp.34_22->uxBasePriority
 1451              	.LVL109:
1568:../freertos/tasks.c **** 			{
 1452              		.loc 1 1568 4 is_stmt 1 view .LVU403
 1453              	@ ../freertos/tasks.c:1568: 			if( uxCurrentBasePriority != uxNewPriority )
1568:../freertos/tasks.c **** 			{
 1454              		.loc 1 1568 6 is_stmt 0 view .LVU404
 1455 03d6 9D42     		cmp	r5, r3	@ _32, uxCurrentBasePriority
 1456 03d8 42D0     		beq	.L94		@,
1572:../freertos/tasks.c **** 				{
 1457              		.loc 1 1572 5 is_stmt 1 view .LVU405
 1458 03da 274F     		ldr	r7, .L106	@ tmp177,
 1459              	@ ../freertos/tasks.c:1572: 				if( uxNewPriority > uxCurrentBasePriority )
1572:../freertos/tasks.c **** 				{
 1460              		.loc 1 1572 7 is_stmt 0 view .LVU406
 1461 03dc 44D9     		bls	.L95		@,
1574:../freertos/tasks.c **** 					{
 1462              		.loc 1 1574 6 is_stmt 1 view .LVU407
 1463              	@ ../freertos/tasks.c:1574: 					if( pxTCB != pxCurrentTCB )
1574:../freertos/tasks.c **** 					{
 1464              		.loc 1 1574 16 is_stmt 0 view .LVU408
 1465 03de 7A68     		ldr	r2, [r7, #4]	@ pxCurrentTCB.35_1, pxCurrentTCB
 1466              	@ ../freertos/tasks.c:1574: 					if( pxTCB != pxCurrentTCB )
1574:../freertos/tasks.c **** 					{
 1467              		.loc 1 1574 8 view .LVU409
 1468 03e0 A242     		cmp	r2, r4	@ pxCurrentTCB.35_1, xTask
 1469 03e2 46D0     		beq	.L102		@,
1579:../freertos/tasks.c **** 						{
 1470              		.loc 1 1579 7 is_stmt 1 view .LVU410
 1471              	@ ../freertos/tasks.c:1579: 						if( uxNewPriority >= pxCurrentTCB->uxPriority )
1579:../freertos/tasks.c **** 						{
 1472              		.loc 1 1579 40 is_stmt 0 view .LVU411
 1473 03e4 7A68     		ldr	r2, [r7, #4]	@ pxCurrentTCB.36_2, pxCurrentTCB
 1474              	@ ../freertos/tasks.c:1579: 						if( uxNewPriority >= pxCurrentTCB->uxPriority )
1579:../freertos/tasks.c **** 						{
 1475              		.loc 1 1579 9 view .LVU412
 1476 03e6 D66A     		ldr	r6, [r2, #44]	@ pxCurrentTCB.36_2->uxPriority, pxCurrentTCB.36_2->uxPriority
 1477 03e8 AE42     		cmp	r6, r5	@ pxCurrentTCB.36_2->uxPriority, _32
 1478 03ea 8CBF     		ite	hi
 1479 03ec 0026     		movhi	r6, #0	@ xYieldRequired,
 1480 03ee 0126     		movls	r6, #1	@ xYieldRequired,
 1481              	.L96:
 1482              	.LVL110:
1607:../freertos/tasks.c **** 
 1483              		.loc 1 1607 5 is_stmt 1 view .LVU413
1612:../freertos/tasks.c **** 
 1484              		.loc 1 1612 5 view .LVU414
 1485              	@ ../freertos/tasks.c:1612: 				uxPriorityUsedOnEntry = pxTCB->uxPriority;
1612:../freertos/tasks.c **** 
 1486              		.loc 1 1612 27 is_stmt 0 view .LVU415
 1487 03f0 D4F82C90 		ldr	r9, [r4, #44]	@ uxPriorityUsedOnEntry, iftmp.34_22->uxPriority
 1488              	.LVL111:
1618:../freertos/tasks.c **** 					{
 1489              		.loc 1 1618 6 is_stmt 1 view .LVU416
ARM GAS  /tmp/ccGXytas.s 			page 129


 1490              	@ ../freertos/tasks.c:1628: 					pxTCB->uxBasePriority = uxNewPriority;
1628:../freertos/tasks.c **** 				}
 1491              		.loc 1 1628 28 is_stmt 0 view .LVU417
 1492 03f4 E564     		str	r5, [r4, #76]	@ _32, iftmp.34_22->uxBasePriority
 1493              	@ ../freertos/tasks.c:1618: 					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
1618:../freertos/tasks.c **** 					{
 1494              		.loc 1 1618 8 view .LVU418
 1495 03f6 4B45     		cmp	r3, r9	@ uxCurrentBasePriority, uxPriorityUsedOnEntry
1620:../freertos/tasks.c **** 					}
 1496              		.loc 1 1620 7 is_stmt 1 view .LVU419
 1497              	@ ../freertos/tasks.c:1638: 				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskE
1638:../freertos/tasks.c **** 				{
 1498              		.loc 1 1638 7 is_stmt 0 view .LVU420
 1499 03f8 A369     		ldr	r3, [r4, #24]	@ iftmp.34_22->xEventListItem.xItemValue, iftmp.34_22->xEventListItem.xItemValue
 1500              	.LVL112:
 1501              	@ ../freertos/tasks.c:1620: 						pxTCB->uxPriority = uxNewPriority;
1620:../freertos/tasks.c **** 					}
 1502              		.loc 1 1620 25 view .LVU421
 1503 03fa 08BF     		it	eq
 1504 03fc E562     		streq	r5, [r4, #44]	@ _32, iftmp.34_22->uxPriority
1624:../freertos/tasks.c **** 					}
 1505              		.loc 1 1624 31 is_stmt 1 view .LVU422
1628:../freertos/tasks.c **** 				}
 1506              		.loc 1 1628 6 view .LVU423
1638:../freertos/tasks.c **** 				{
 1507              		.loc 1 1638 5 view .LVU424
 1508              	@ ../freertos/tasks.c:1638: 				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskE
1638:../freertos/tasks.c **** 				{
 1509              		.loc 1 1638 7 is_stmt 0 view .LVU425
 1510 03fe 002B     		cmp	r3, #0	@ iftmp.34_22->xEventListItem.xItemValue,
1640:../freertos/tasks.c **** 				}
 1511              		.loc 1 1640 6 is_stmt 1 view .LVU426
 1512              	@ ../freertos/tasks.c:1651: 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOn
1651:../freertos/tasks.c **** 				{
 1513              		.loc 1 1651 9 is_stmt 0 view .LVU427
 1514 0400 4FF01403 		mov	r3, #20	@ tmp158,
 1515              	@ ../freertos/tasks.c:1640: 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_
1640:../freertos/tasks.c **** 				}
 1516              		.loc 1 1640 6 view .LVU428
 1517 0404 A4BF     		itt	ge
 1518 0406 C5F10505 		rsbge	r5, r5, #5	@ tmp154, _32,
 1519              	.LVL113:
1640:../freertos/tasks.c **** 				}
 1520              		.loc 1 1640 6 view .LVU429
 1521 040a A561     		strge	r5, [r4, #24]	@ tmp154, iftmp.34_22->xEventListItem.xItemValue
1644:../freertos/tasks.c **** 				}
 1522              		.loc 1 1644 30 is_stmt 1 view .LVU430
1651:../freertos/tasks.c **** 				{
 1523              		.loc 1 1651 5 view .LVU431
 1524              	@ ../freertos/tasks.c:1651: 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOn
1651:../freertos/tasks.c **** 				{
 1525              		.loc 1 1651 9 is_stmt 0 view .LVU432
 1526 040c 1B4D     		ldr	r5, .L106+4	@ tmp156,
 1527              	@ ../freertos/tasks.c:1651: 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOn
1651:../freertos/tasks.c **** 				{
 1528              		.loc 1 1651 7 view .LVU433
 1529 040e 6269     		ldr	r2, [r4, #20]	@ iftmp.34_22->xStateListItem.pvContainer, iftmp.34_22->xStateListItem.pvContain
ARM GAS  /tmp/ccGXytas.s 			page 130


 1530              	@ ../freertos/tasks.c:1651: 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOn
1651:../freertos/tasks.c **** 				{
 1531              		.loc 1 1651 9 view .LVU434
 1532 0410 03FB0953 		mla	r3, r3, r9, r5	@ tmp159, tmp158, uxPriorityUsedOnEntry, tmp156
 1533              	@ ../freertos/tasks.c:1651: 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOn
1651:../freertos/tasks.c **** 				{
 1534              		.loc 1 1651 7 view .LVU435
 1535 0414 9A42     		cmp	r2, r3	@ iftmp.34_22->xStateListItem.pvContainer, tmp159
 1536 0416 18D1     		bne	.L99		@,
1656:../freertos/tasks.c **** 					{
 1537              		.loc 1 1656 6 is_stmt 1 view .LVU436
 1538              	@ ../freertos/tasks.c:1656: 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 
1656:../freertos/tasks.c **** 					{
 1539              		.loc 1 1656 10 is_stmt 0 view .LVU437
 1540 0418 04F10408 		add	r8, r4, #4	@ _10, xTask,
 1541 041c 4046     		mov	r0, r8	@, _10
 1542 041e FFF7FEFF 		bl	uxListRemove		@
 1543              	.LVL114:
 1544              	@ ../freertos/tasks.c:1656: 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 
1656:../freertos/tasks.c **** 					{
 1545              		.loc 1 1656 8 discriminator 1 view .LVU438
 1546 0422 30B9     		cbnz	r0, .L100	@ tmp183,
1661:../freertos/tasks.c **** 					}
 1547              		.loc 1 1661 7 is_stmt 1 view .LVU439
 1548 0424 0122     		movs	r2, #1	@ tmp163,
 1549 0426 BB68     		ldr	r3, [r7, #8]	@ uxTopReadyPriority.38_14, uxTopReadyPriority
 1550 0428 02FA09F2 		lsl	r2, r2, r9	@ tmp162, tmp163, uxPriorityUsedOnEntry
 1551 042c 23EA0203 		bic	r3, r3, r2	@ _15, uxTopReadyPriority.38_14, tmp162
 1552 0430 BB60     		str	r3, [r7, #8]	@ _15, uxTopReadyPriority
 1553              	.L100:
1665:../freertos/tasks.c **** 					}
 1554              		.loc 1 1665 31 view .LVU440
1667:../freertos/tasks.c **** 				}
 1555              		.loc 1 1667 6 view .LVU441
1667:../freertos/tasks.c **** 				}
 1556              		.loc 1 1667 6 view .LVU442
 1557 0432 0123     		movs	r3, #1	@ tmp168,
 1558 0434 1420     		movs	r0, #20	@ tmp173,
 1559 0436 E26A     		ldr	r2, [r4, #44]	@ _16, iftmp.34_22->uxPriority
 1560 0438 B968     		ldr	r1, [r7, #8]	@ uxTopReadyPriority.39_18, uxTopReadyPriority
 1561 043a 9340     		lsls	r3, r3, r2	@ tmp167, tmp168, _16
 1562 043c 0B43     		orrs	r3, r3, r1	@, _19, tmp167, uxTopReadyPriority.39_18
 1563 043e 00FB0250 		mla	r0, r0, r2, r5	@, tmp173, _16, tmp156
 1564 0442 4146     		mov	r1, r8	@, _10
 1565 0444 BB60     		str	r3, [r7, #8]	@ _19, uxTopReadyPriority
1667:../freertos/tasks.c **** 				}
 1566              		.loc 1 1667 6 view .LVU443
 1567 0446 FFF7FEFF 		bl	vListInsertEnd		@
 1568              	.LVL115:
1667:../freertos/tasks.c **** 				}
 1569              		.loc 1 1667 36 discriminator 1 view .LVU444
 1570              	.L99:
1671:../freertos/tasks.c **** 				}
 1571              		.loc 1 1671 30 view .LVU445
1674:../freertos/tasks.c **** 				{
 1572              		.loc 1 1674 5 view .LVU446
 1573              	@ ../freertos/tasks.c:1674: 				if( xYieldRequired != pdFALSE )
ARM GAS  /tmp/ccGXytas.s 			page 131


1674:../freertos/tasks.c **** 				{
 1574              		.loc 1 1674 7 is_stmt 0 view .LVU447
 1575 044a 4EB1     		cbz	r6, .L94	@ xYieldRequired,
1676:../freertos/tasks.c **** 				}
 1576              		.loc 1 1676 6 is_stmt 1 view .LVU448
 1577 044c 4FF0E023 		mov	r3, #-536813568	@ tmp175,
 1578 0450 4FF08052 		mov	r2, #268435456	@ tmp176,
 1579 0454 C3F8042D 		str	r2, [r3, #3332]	@ tmp176, MEM[(volatile uint32_t *)3758157060B]
1676:../freertos/tasks.c **** 				}
 1580              		.loc 1 1676 6 view .LVU449
 1581              		.syntax unified
 1582              	@ 1676 "../freertos/tasks.c" 1
 1583 0458 BFF34F8F 		dsb	
 1584              	@ 0 "" 2
1676:../freertos/tasks.c **** 				}
 1585              		.loc 1 1676 6 view .LVU450
 1586              	@ 1676 "../freertos/tasks.c" 1
 1587 045c BFF36F8F 		isb
 1588              	@ 0 "" 2
1676:../freertos/tasks.c **** 				}
 1589              		.loc 1 1676 37 view .LVU451
 1590              	.LVL116:
 1591              		.thumb
 1592              		.syntax unified
 1593              	.L94:
1680:../freertos/tasks.c **** 				}
 1594              		.loc 1 1680 30 view .LVU452
1685:../freertos/tasks.c **** 			}
 1595              		.loc 1 1685 5 view .LVU453
1688:../freertos/tasks.c **** 	}
 1596              		.loc 1 1688 3 view .LVU454
 1597              	@ ../freertos/tasks.c:1689: 	}
1689:../freertos/tasks.c **** 
 1598              		.loc 1 1689 2 is_stmt 0 view .LVU455
 1599 0460 BDE8F843 		pop	{r3, r4, r5, r6, r7, r8, r9, lr}	@
 1600              	.LCFI11:
 1601              		.cfi_remember_state
 1602              		.cfi_restore 14
 1603              		.cfi_restore 9
 1604              		.cfi_restore 8
 1605              		.cfi_restore 7
 1606              		.cfi_restore 6
 1607              		.cfi_restore 5
 1608              		.cfi_restore 4
 1609              		.cfi_restore 3
 1610              		.cfi_def_cfa_offset 0
 1611              	.LVL117:
 1612              	@ ../freertos/tasks.c:1688: 		taskEXIT_CRITICAL();
1688:../freertos/tasks.c **** 	}
 1613              		.loc 1 1688 3 view .LVU456
 1614 0464 FFF7FEBF 		b	vPortExitCritical		@
 1615              	.LVL118:
 1616              	.L95:
 1617              	.LCFI12:
 1618              		.cfi_restore_state
1595:../freertos/tasks.c **** 				{
 1619              		.loc 1 1595 10 is_stmt 1 view .LVU457
ARM GAS  /tmp/ccGXytas.s 			page 132


 1620              	@ ../freertos/tasks.c:1595: 				else if( pxTCB == pxCurrentTCB )
1595:../freertos/tasks.c **** 				{
 1621              		.loc 1 1595 20 is_stmt 0 view .LVU458
 1622 0468 7E68     		ldr	r6, [r7, #4]	@ pxCurrentTCB.37_4, pxCurrentTCB
 1623              	@ ../freertos/tasks.c:1595: 				else if( pxTCB == pxCurrentTCB )
1595:../freertos/tasks.c **** 				{
 1624              		.loc 1 1595 12 view .LVU459
 1625 046a 321B     		subs	r2, r6, r4	@, pxCurrentTCB.37_4, xTask
 1626 046c 5642     		rsbs	r6, r2, #0	@ xYieldRequired,,
 1627 046e 5641     		adcs	r6, r6, r2	@ xYieldRequired, xYieldRequired,
 1628 0470 BEE7     		b	.L96		@
 1629              	.L102:
 1630              	@ ../freertos/tasks.c:1536: 	BaseType_t xYieldRequired = pdFALSE;
1536:../freertos/tasks.c **** 
 1631              		.loc 1 1536 13 view .LVU460
 1632 0472 0026     		movs	r6, #0	@ xYieldRequired,
 1633 0474 BCE7     		b	.L96		@
 1634              	.L107:
 1635 0476 00BF     		.align	2
 1636              	.L106:
 1637 0478 00000000 		.word	.LANCHOR0
 1638 047c 48000000 		.word	.LANCHOR0+72
 1639              		.cfi_endproc
 1640              	.LFE14:
 1641              		.size	vTaskPrioritySet, .-vTaskPrioritySet
 1642              		.align	1
 1643              		.global	vTaskResume
 1644              		.syntax unified
 1645              		.thumb
 1646              		.thumb_func
 1647              		.type	vTaskResume, %function
 1648              	vTaskResume:
 1649              	.LVL119:
 1650              	.LFB17:
1844:../freertos/tasks.c **** 	TCB_t * const pxTCB = xTaskToResume;
 1651              		.loc 1 1844 2 is_stmt 1 view -0
 1652              		.cfi_startproc
 1653              		@ args = 0, pretend = 0, frame = 0
 1654              		@ frame_needed = 0, uses_anonymous_args = 0
1845:../freertos/tasks.c **** 
 1655              		.loc 1 1845 2 view .LVU462
1848:../freertos/tasks.c **** 
 1656              		.loc 1 1848 32 view .LVU463
1852:../freertos/tasks.c **** 		{
 1657              		.loc 1 1852 3 view .LVU464
 1658              	@ ../freertos/tasks.c:1844: 	{
1844:../freertos/tasks.c **** 	TCB_t * const pxTCB = xTaskToResume;
 1659              		.loc 1 1844 2 is_stmt 0 view .LVU465
 1660 0480 70B5     		push	{r4, r5, r6, lr}	@
 1661              	.LCFI13:
 1662              		.cfi_def_cfa_offset 16
 1663              		.cfi_offset 4, -16
 1664              		.cfi_offset 5, -12
 1665              		.cfi_offset 6, -8
 1666              		.cfi_offset 14, -4
 1667              	@ ../freertos/tasks.c:1852: 		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
1852:../freertos/tasks.c **** 		{
ARM GAS  /tmp/ccGXytas.s 			page 133


 1668              		.loc 1 1852 15 view .LVU466
 1669 0482 1C4D     		ldr	r5, .L116	@ tmp128,
 1670              	@ ../freertos/tasks.c:1844: 	{
1844:../freertos/tasks.c **** 	TCB_t * const pxTCB = xTaskToResume;
 1671              		.loc 1 1844 2 view .LVU467
 1672 0484 0446     		mov	r4, r0	@ xTaskToResume, tmp148
 1673              	@ ../freertos/tasks.c:1852: 		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
1852:../freertos/tasks.c **** 		{
 1674              		.loc 1 1852 15 view .LVU468
 1675 0486 6B68     		ldr	r3, [r5, #4]	@ pxCurrentTCB.46_1, pxCurrentTCB
 1676              	@ ../freertos/tasks.c:1852: 		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
1852:../freertos/tasks.c **** 		{
 1677              		.loc 1 1852 5 view .LVU469
 1678 0488 8342     		cmp	r3, r0	@ pxCurrentTCB.46_1, xTaskToResume
 1679 048a 32D0     		beq	.L108		@,
 1680              	@ ../freertos/tasks.c:1852: 		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
1852:../freertos/tasks.c **** 		{
 1681              		.loc 1 1852 33 discriminator 1 view .LVU470
 1682 048c 88B3     		cbz	r0, .L108	@ xTaskToResume,
1854:../freertos/tasks.c **** 			{
 1683              		.loc 1 1854 4 is_stmt 1 view .LVU471
 1684 048e FFF7FEFF 		bl	vPortEnterCritical		@
 1685              	.LVL120:
1856:../freertos/tasks.c **** 				{
 1686              		.loc 1 1856 5 view .LVU472
 1687              	.LBB94:
 1688              	.LBI94:
1797:../freertos/tasks.c **** 	{
 1689              		.loc 1 1797 20 view .LVU473
 1690              	.LBB95:
1799:../freertos/tasks.c **** 	const TCB_t * const pxTCB = xTask;
 1691              		.loc 1 1799 2 view .LVU474
1800:../freertos/tasks.c **** 
 1692              		.loc 1 1800 2 view .LVU475
1806:../freertos/tasks.c **** 
 1693              		.loc 1 1806 24 view .LVU476
1809:../freertos/tasks.c **** 		{
 1694              		.loc 1 1809 3 view .LVU477
 1695              	@ ../freertos/tasks.c:1809: 		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateLis
1809:../freertos/tasks.c **** 		{
 1696              		.loc 1 1809 5 is_stmt 0 view .LVU478
 1697 0492 6269     		ldr	r2, [r4, #20]	@ MEM[(const struct TCB_t *)xTaskToResume_14(D)].xStateListItem.pvContainer, MEM
 1698 0494 05F10C03 		add	r3, r5, #12	@ tmp130, tmp128,
 1699 0498 9A42     		cmp	r2, r3	@ MEM[(const struct TCB_t *)xTaskToResume_14(D)].xStateListItem.pvContainer, tmp130
 1700 049a 26D1     		bne	.L111		@,
1812:../freertos/tasks.c **** 			{
 1701              		.loc 1 1812 4 is_stmt 1 view .LVU479
 1702              	@ ../freertos/tasks.c:1812: 			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventLis
1812:../freertos/tasks.c **** 			{
 1703              		.loc 1 1812 8 is_stmt 0 view .LVU480
 1704 049c A36A     		ldr	r3, [r4, #40]	@ _25, MEM[(const struct TCB_t *)xTaskToResume_14(D)].xEventListItem.pvContainer
 1705              	@ ../freertos/tasks.c:1812: 			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventLis
1812:../freertos/tasks.c **** 			{
 1706              		.loc 1 1812 6 view .LVU481
 1707 049e 05F1D402 		add	r2, r5, #212	@ tmp133, tmp128,
 1708 04a2 9342     		cmp	r3, r2	@ _25, tmp133
 1709 04a4 21D0     		beq	.L111		@,
ARM GAS  /tmp/ccGXytas.s 			page 134


1816:../freertos/tasks.c **** 				{
 1710              		.loc 1 1816 5 is_stmt 1 view .LVU482
 1711              	@ ../freertos/tasks.c:1816: 				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != 
1816:../freertos/tasks.c **** 				{
 1712              		.loc 1 1816 7 is_stmt 0 view .LVU483
 1713 04a6 03BB     		cbnz	r3, .L111	@ _25,
 1714              	.LVL121:
1832:../freertos/tasks.c **** 		}
 1715              		.loc 1 1832 28 is_stmt 1 view .LVU484
1835:../freertos/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 1716              		.loc 1 1835 3 view .LVU485
1835:../freertos/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 1717              		.loc 1 1835 3 is_stmt 0 view .LVU486
 1718              	.LBE95:
 1719              	.LBE94:
1858:../freertos/tasks.c **** 
 1720              		.loc 1 1858 31 is_stmt 1 view .LVU487
1862:../freertos/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1721              		.loc 1 1862 6 view .LVU488
 1722              	@ ../freertos/tasks.c:1862: 					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
1862:../freertos/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1723              		.loc 1 1862 15 is_stmt 0 view .LVU489
 1724 04a8 261D     		adds	r6, r4, #4	@ _3, xTaskToResume,
 1725 04aa 3046     		mov	r0, r6	@, _3
 1726 04ac FFF7FEFF 		bl	uxListRemove		@
 1727              	.LVL122:
1863:../freertos/tasks.c **** 
 1728              		.loc 1 1863 6 is_stmt 1 view .LVU490
1863:../freertos/tasks.c **** 
 1729              		.loc 1 1863 6 view .LVU491
 1730 04b0 0123     		movs	r3, #1	@ tmp136,
 1731 04b2 1420     		movs	r0, #20	@ tmp141,
 1732 04b4 E26A     		ldr	r2, [r4, #44]	@ _4, MEM[(struct TCB_t *)xTaskToResume_14(D)].uxPriority
 1733 04b6 A968     		ldr	r1, [r5, #8]	@ uxTopReadyPriority.47_6, uxTopReadyPriority
 1734 04b8 9340     		lsls	r3, r3, r2	@ tmp135, tmp136, _4
 1735 04ba 0B43     		orrs	r3, r3, r1	@, _7, tmp135, uxTopReadyPriority.47_6
 1736 04bc AB60     		str	r3, [r5, #8]	@ _7, uxTopReadyPriority
1863:../freertos/tasks.c **** 
 1737              		.loc 1 1863 6 view .LVU492
 1738 04be 05F14803 		add	r3, r5, #72	@ tmp139, tmp128,
 1739 04c2 00FB0230 		mla	r0, r0, r2, r3	@, tmp141, _4, tmp139
 1740 04c6 3146     		mov	r1, r6	@, _3
 1741 04c8 FFF7FEFF 		bl	vListInsertEnd		@
 1742              	.LVL123:
1863:../freertos/tasks.c **** 
 1743              		.loc 1 1863 36 discriminator 1 view .LVU493
1866:../freertos/tasks.c **** 					{
 1744              		.loc 1 1866 6 view .LVU494
 1745              	@ ../freertos/tasks.c:1866: 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1866:../freertos/tasks.c **** 					{
 1746              		.loc 1 1866 43 is_stmt 0 view .LVU495
 1747 04cc 6B68     		ldr	r3, [r5, #4]	@ pxCurrentTCB.48_10, pxCurrentTCB
 1748              	@ ../freertos/tasks.c:1866: 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1866:../freertos/tasks.c **** 					{
 1749              		.loc 1 1866 8 view .LVU496
 1750 04ce E26A     		ldr	r2, [r4, #44]	@ MEM[(struct TCB_t *)xTaskToResume_14(D)].uxPriority, MEM[(struct TCB_t *)xTask
 1751 04d0 DB6A     		ldr	r3, [r3, #44]	@ pxCurrentTCB.48_10->uxPriority, pxCurrentTCB.48_10->uxPriority
ARM GAS  /tmp/ccGXytas.s 			page 135


 1752 04d2 9A42     		cmp	r2, r3	@ MEM[(struct TCB_t *)xTaskToResume_14(D)].uxPriority, pxCurrentTCB.48_10->uxPriority
 1753 04d4 09D3     		bcc	.L111		@,
1871:../freertos/tasks.c **** 					}
 1754              		.loc 1 1871 7 is_stmt 1 view .LVU497
 1755 04d6 4FF0E023 		mov	r3, #-536813568	@ tmp146,
 1756 04da 4FF08052 		mov	r2, #268435456	@ tmp147,
 1757 04de C3F8042D 		str	r2, [r3, #3332]	@ tmp147, MEM[(volatile uint32_t *)3758157060B]
1871:../freertos/tasks.c **** 					}
 1758              		.loc 1 1871 7 view .LVU498
 1759              		.syntax unified
 1760              	@ 1871 "../freertos/tasks.c" 1
 1761 04e2 BFF34F8F 		dsb	
 1762              	@ 0 "" 2
1871:../freertos/tasks.c **** 					}
 1763              		.loc 1 1871 7 view .LVU499
 1764              	@ 1871 "../freertos/tasks.c" 1
 1765 04e6 BFF36F8F 		isb
 1766              	@ 0 "" 2
1871:../freertos/tasks.c **** 					}
 1767              		.loc 1 1871 38 view .LVU500
 1768              		.thumb
 1769              		.syntax unified
 1770              	.L111:
1880:../freertos/tasks.c **** 				}
 1771              		.loc 1 1880 30 view .LVU501
1883:../freertos/tasks.c **** 		}
 1772              		.loc 1 1883 4 view .LVU502
 1773              	@ ../freertos/tasks.c:1889: 	}
1889:../freertos/tasks.c **** 
 1774              		.loc 1 1889 2 is_stmt 0 view .LVU503
 1775 04ea BDE87040 		pop	{r4, r5, r6, lr}	@
 1776              	.LCFI14:
 1777              		.cfi_remember_state
 1778              		.cfi_restore 14
 1779              		.cfi_restore 6
 1780              		.cfi_restore 5
 1781              		.cfi_restore 4
 1782              		.cfi_def_cfa_offset 0
 1783              	.LVL124:
 1784              	@ ../freertos/tasks.c:1883: 			taskEXIT_CRITICAL();
1883:../freertos/tasks.c **** 		}
 1785              		.loc 1 1883 4 view .LVU504
 1786 04ee FFF7FEBF 		b	vPortExitCritical		@
 1787              	.LVL125:
 1788              	.L108:
 1789              	.LCFI15:
 1790              		.cfi_restore_state
 1791              	@ ../freertos/tasks.c:1889: 	}
1889:../freertos/tasks.c **** 
 1792              		.loc 1 1889 2 view .LVU505
 1793 04f2 70BD     		pop	{r4, r5, r6, pc}	@
 1794              	.L117:
 1795              		.align	2
 1796              	.L116:
 1797 04f4 00000000 		.word	.LANCHOR0
 1798              		.cfi_endproc
 1799              	.LFE17:
ARM GAS  /tmp/ccGXytas.s 			page 136


 1800              		.size	vTaskResume, .-vTaskResume
 1801              		.align	1
 1802              		.global	xTaskResumeFromISR
 1803              		.syntax unified
 1804              		.thumb
 1805              		.thumb_func
 1806              		.type	xTaskResumeFromISR, %function
 1807              	xTaskResumeFromISR:
 1808              	.LVL126:
 1809              	.LFB18:
1898:../freertos/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
 1810              		.loc 1 1898 2 is_stmt 1 view -0
 1811              		.cfi_startproc
 1812              		@ args = 0, pretend = 0, frame = 0
 1813              		@ frame_needed = 0, uses_anonymous_args = 0
1899:../freertos/tasks.c **** 	TCB_t * const pxTCB = xTaskToResume;
 1814              		.loc 1 1899 2 view .LVU507
1900:../freertos/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 1815              		.loc 1 1900 2 view .LVU508
1901:../freertos/tasks.c **** 
 1816              		.loc 1 1901 2 view .LVU509
1903:../freertos/tasks.c **** 
 1817              		.loc 1 1903 32 view .LVU510
1921:../freertos/tasks.c **** 
 1818              		.loc 1 1921 45 view .LVU511
1923:../freertos/tasks.c **** 		{
 1819              		.loc 1 1923 3 view .LVU512
 1820              	.LBB102:
 1821              	.LBI102:
 207:../freertos/portable/GCC/ARM_CM3/portmacro.h **** {
 1822              		.loc 2 207 34 view .LVU513
 1823              	.LBB103:
 209:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 
 1824              		.loc 2 209 1 view .LVU514
 211:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	(
 1825              		.loc 2 211 2 view .LVU515
 1826              	.LBE103:
 1827              	.LBE102:
 1828              	@ ../freertos/tasks.c:1898: 	{
1898:../freertos/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
 1829              		.loc 1 1898 2 is_stmt 0 view .LVU516
 1830 04f8 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}	@
 1831              	.LCFI16:
 1832              		.cfi_def_cfa_offset 24
 1833              		.cfi_offset 4, -24
 1834              		.cfi_offset 5, -20
 1835              		.cfi_offset 6, -16
 1836              		.cfi_offset 7, -12
 1837              		.cfi_offset 8, -8
 1838              		.cfi_offset 14, -4
 1839              	@ ../freertos/tasks.c:1898: 	{
1898:../freertos/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
 1840              		.loc 1 1898 2 view .LVU517
 1841 04fc 0546     		mov	r5, r0	@ xTaskToResume, tmp159
 1842              	.LBB105:
 1843              	.LBB104:
 1844              	@ ../freertos/portable/GCC/ARM_CM3/portmacro.h:211: 	__asm volatile
ARM GAS  /tmp/ccGXytas.s 			page 137


 211:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	(
 1845              		.loc 2 211 2 view .LVU518
 1846              		.syntax unified
 1847              	@ 211 "../freertos/portable/GCC/ARM_CM3/portmacro.h" 1
 1848 04fe EFF31187 			mrs r7, basepri												@ ulOriginalBASEPRI
 1849 0502 4FF01003 		mov r3, #16													@ ulNewBASEPRI,
 1850 0506 83F31188 		msr basepri, r3												@ ulNewBASEPRI
 1851 050a BFF36F8F 		isb														
 1852 050e BFF34F8F 		dsb														
 1853              	
 1854              	@ 0 "" 2
 1855              	.LVL127:
 223:../freertos/portable/GCC/ARM_CM3/portmacro.h **** }
 1856              		.loc 2 223 2 is_stmt 1 view .LVU519
 223:../freertos/portable/GCC/ARM_CM3/portmacro.h **** }
 1857              		.loc 2 223 2 is_stmt 0 view .LVU520
 1858              		.thumb
 1859              		.syntax unified
 1860              	.LBE104:
 1861              	.LBE105:
1925:../freertos/tasks.c **** 			{
 1862              		.loc 1 1925 4 is_stmt 1 view .LVU521
 1863              	.LBB106:
 1864              	.LBI106:
1797:../freertos/tasks.c **** 	{
 1865              		.loc 1 1797 20 view .LVU522
 1866              	.LBB107:
1799:../freertos/tasks.c **** 	const TCB_t * const pxTCB = xTask;
 1867              		.loc 1 1799 2 view .LVU523
1800:../freertos/tasks.c **** 
 1868              		.loc 1 1800 2 view .LVU524
1806:../freertos/tasks.c **** 
 1869              		.loc 1 1806 24 view .LVU525
1809:../freertos/tasks.c **** 		{
 1870              		.loc 1 1809 3 view .LVU526
 1871              	@ ../freertos/tasks.c:1809: 		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateLis
1809:../freertos/tasks.c **** 		{
 1872              		.loc 1 1809 5 is_stmt 0 view .LVU527
 1873 0512 194C     		ldr	r4, .L122	@ tmp135,
 1874 0514 4269     		ldr	r2, [r0, #20]	@ MEM[(const struct TCB_t *)xTaskToResume_17(D)].xStateListItem.pvContainer, MEM
 1875 0516 04F10C03 		add	r3, r4, #12	@ tmp136, tmp135,
 1876 051a 9A42     		cmp	r2, r3	@ MEM[(const struct TCB_t *)xTaskToResume_17(D)].xStateListItem.pvContainer, tmp136
 1877 051c 2AD1     		bne	.L119		@,
1812:../freertos/tasks.c **** 			{
 1878              		.loc 1 1812 4 is_stmt 1 view .LVU528
 1879              	@ ../freertos/tasks.c:1812: 			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventLis
1812:../freertos/tasks.c **** 			{
 1880              		.loc 1 1812 8 is_stmt 0 view .LVU529
 1881 051e 836A     		ldr	r3, [r0, #40]	@ _28, MEM[(const struct TCB_t *)xTaskToResume_17(D)].xEventListItem.pvContainer
 1882              	@ ../freertos/tasks.c:1812: 			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventLis
1812:../freertos/tasks.c **** 			{
 1883              		.loc 1 1812 6 view .LVU530
 1884 0520 04F1D400 		add	r0, r4, #212	@ tmp139, tmp135,
 1885              	.LVL128:
1812:../freertos/tasks.c **** 			{
 1886              		.loc 1 1812 6 view .LVU531
 1887 0524 8342     		cmp	r3, r0	@ _28, tmp139
ARM GAS  /tmp/ccGXytas.s 			page 138


 1888 0526 25D0     		beq	.L119		@,
1816:../freertos/tasks.c **** 				{
 1889              		.loc 1 1816 5 is_stmt 1 view .LVU532
 1890              	@ ../freertos/tasks.c:1816: 				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != 
1816:../freertos/tasks.c **** 				{
 1891              		.loc 1 1816 7 is_stmt 0 view .LVU533
 1892 0528 23BB     		cbnz	r3, .L119	@ _28,
 1893              	.LVL129:
1832:../freertos/tasks.c **** 		}
 1894              		.loc 1 1832 28 is_stmt 1 view .LVU534
1835:../freertos/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 1895              		.loc 1 1835 3 view .LVU535
1835:../freertos/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 1896              		.loc 1 1835 3 is_stmt 0 view .LVU536
 1897              	.LBE107:
 1898              	.LBE106:
1927:../freertos/tasks.c **** 
 1899              		.loc 1 1927 39 is_stmt 1 view .LVU537
1930:../freertos/tasks.c **** 				{
 1900              		.loc 1 1930 5 view .LVU538
 1901              	@ ../freertos/tasks.c:1930: 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1930:../freertos/tasks.c **** 				{
 1902              		.loc 1 1930 30 is_stmt 0 view .LVU539
 1903 052a D4F8F030 		ldr	r3, [r4, #240]	@ uxSchedulerSuspended.49_2, uxSchedulerSuspended
 1904              	@ ../freertos/tasks.c:1930: 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1930:../freertos/tasks.c **** 				{
 1905              		.loc 1 1930 7 view .LVU540
 1906 052e EBB9     		cbnz	r3, .L120	@ uxSchedulerSuspended.49_2,
1934:../freertos/tasks.c **** 					{
 1907              		.loc 1 1934 6 is_stmt 1 view .LVU541
 1908              	@ ../freertos/tasks.c:1934: 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1934:../freertos/tasks.c **** 					{
 1909              		.loc 1 1934 43 is_stmt 0 view .LVU542
 1910 0530 6368     		ldr	r3, [r4, #4]	@ pxCurrentTCB.50_4, pxCurrentTCB
 1911              	@ ../freertos/tasks.c:1934: 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1934:../freertos/tasks.c **** 					{
 1912              		.loc 1 1934 8 view .LVU543
 1913 0532 EE6A     		ldr	r6, [r5, #44]	@ MEM[(struct TCB_t *)xTaskToResume_17(D)].uxPriority, MEM[(struct TCB_t *)xTask
 1914 0534 DB6A     		ldr	r3, [r3, #44]	@ pxCurrentTCB.50_4->uxPriority, pxCurrentTCB.50_4->uxPriority
 1915              	@ ../freertos/tasks.c:1943: 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1943:../freertos/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1916              		.loc 1 1943 15 view .LVU544
 1917 0536 05F10408 		add	r8, r5, #4	@ _6, xTaskToResume,
 1918              	@ ../freertos/tasks.c:1934: 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1934:../freertos/tasks.c **** 					{
 1919              		.loc 1 1934 8 view .LVU545
 1920 053a 9E42     		cmp	r6, r3	@ MEM[(struct TCB_t *)xTaskToResume_17(D)].uxPriority, pxCurrentTCB.50_4->uxPriority
 1921              	@ ../freertos/tasks.c:1943: 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1943:../freertos/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1922              		.loc 1 1943 15 view .LVU546
 1923 053c 4046     		mov	r0, r8	@, _6
 1924              	@ ../freertos/tasks.c:1934: 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1934:../freertos/tasks.c **** 					{
 1925              		.loc 1 1934 8 view .LVU547
 1926 053e 34BF     		ite	cc
 1927 0540 0026     		movcc	r6, #0	@ <retval>,
 1928 0542 0126     		movcs	r6, #1	@ <retval>,
ARM GAS  /tmp/ccGXytas.s 			page 139


 1929              	.LVL130:
1940:../freertos/tasks.c **** 					}
 1930              		.loc 1 1940 31 is_stmt 1 view .LVU548
1943:../freertos/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1931              		.loc 1 1943 6 view .LVU549
 1932              	@ ../freertos/tasks.c:1943: 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1943:../freertos/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1933              		.loc 1 1943 15 is_stmt 0 view .LVU550
 1934 0544 FFF7FEFF 		bl	uxListRemove		@
 1935              	.LVL131:
1944:../freertos/tasks.c **** 				}
 1936              		.loc 1 1944 6 is_stmt 1 view .LVU551
1944:../freertos/tasks.c **** 				}
 1937              		.loc 1 1944 6 view .LVU552
 1938 0548 0123     		movs	r3, #1	@ tmp148,
 1939 054a 1420     		movs	r0, #20	@ tmp153,
 1940 054c EA6A     		ldr	r2, [r5, #44]	@ _7, MEM[(struct TCB_t *)xTaskToResume_17(D)].uxPriority
 1941 054e A168     		ldr	r1, [r4, #8]	@ uxTopReadyPriority.51_9, uxTopReadyPriority
 1942 0550 9340     		lsls	r3, r3, r2	@ tmp147, tmp148, _7
 1943 0552 0B43     		orrs	r3, r3, r1	@, _10, tmp147, uxTopReadyPriority.51_9
 1944 0554 A360     		str	r3, [r4, #8]	@ _10, uxTopReadyPriority
1944:../freertos/tasks.c **** 				}
 1945              		.loc 1 1944 6 view .LVU553
 1946 0556 4834     		adds	r4, r4, #72	@ tmp151, tmp135,
 1947 0558 4146     		mov	r1, r8	@, _6
 1948 055a 00FB0240 		mla	r0, r0, r2, r4	@, tmp153, _7, tmp151
 1949 055e FFF7FEFF 		bl	vListInsertEnd		@
 1950              	.LVL132:
1944:../freertos/tasks.c **** 				}
 1951              		.loc 1 1944 36 discriminator 1 view .LVU554
 1952              	.L121:
1956:../freertos/tasks.c **** 			}
 1953              		.loc 1 1956 29 view .LVU555
1959:../freertos/tasks.c **** 
 1954              		.loc 1 1959 3 view .LVU556
 1955              	.LBB108:
 1956              	.LBI108:
 227:../freertos/portable/GCC/ARM_CM3/portmacro.h **** {
 1957              		.loc 2 227 30 view .LVU557
 1958              	.LBB109:
 1959              		.loc 2 229 2 view .LVU558
 1960              		.syntax unified
 1961              	@ 229 "../freertos/portable/GCC/ARM_CM3/portmacro.h" 1
 1962 0562 87F31188 			msr basepri, r7		@ ulOriginalBASEPRI
 1963              	@ 0 "" 2
 1964              	.LVL133:
 1965              		.loc 2 229 2 is_stmt 0 view .LVU559
 1966              		.thumb
 1967              		.syntax unified
 1968              	.LBE109:
 1969              	.LBE108:
1961:../freertos/tasks.c **** 	}
 1970              		.loc 1 1961 3 is_stmt 1 view .LVU560
 1971              	@ ../freertos/tasks.c:1962: 	}
1962:../freertos/tasks.c **** 
 1972              		.loc 1 1962 2 is_stmt 0 view .LVU561
 1973 0566 3046     		mov	r0, r6	@, <retval>
ARM GAS  /tmp/ccGXytas.s 			page 140


 1974 0568 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}	@
 1975              	.LVL134:
 1976              	.L120:
1951:../freertos/tasks.c **** 				}
 1977              		.loc 1 1951 6 is_stmt 1 view .LVU562
 1978 056c 05F11801 		add	r1, r5, #24	@, xTaskToResume,
 1979 0570 FFF7FEFF 		bl	vListInsertEnd		@
 1980              	.LVL135:
 1981              	.L119:
 1982              	@ ../freertos/tasks.c:1899: 	BaseType_t xYieldRequired = pdFALSE;
1899:../freertos/tasks.c **** 	TCB_t * const pxTCB = xTaskToResume;
 1983              		.loc 1 1899 13 is_stmt 0 view .LVU563
 1984 0574 0026     		movs	r6, #0	@ <retval>,
 1985 0576 F4E7     		b	.L121		@
 1986              	.L123:
 1987              		.align	2
 1988              	.L122:
 1989 0578 00000000 		.word	.LANCHOR0
 1990              		.cfi_endproc
 1991              	.LFE18:
 1992              		.size	xTaskResumeFromISR, .-xTaskResumeFromISR
 1993              		.section	.rodata.str1.1,"aMS",%progbits,1
 1994              	.LC0:
 1995 0000 49444C45 		.ascii	"IDLE\000"
 1995      00
 1996              		.text
 1997              		.align	1
 1998              		.global	vTaskStartScheduler
 1999              		.syntax unified
 2000              		.thumb
 2001              		.thumb_func
 2002              		.type	vTaskStartScheduler, %function
 2003              	vTaskStartScheduler:
 2004              	.LFB19:
1968:../freertos/tasks.c **** BaseType_t xReturn;
 2005              		.loc 1 1968 1 is_stmt 1 view -0
 2006              		.cfi_startproc
 2007              		@ args = 0, pretend = 0, frame = 0
 2008              		@ frame_needed = 0, uses_anonymous_args = 0
1969:../freertos/tasks.c **** 
 2009              		.loc 1 1969 1 view .LVU565
2001:../freertos/tasks.c **** 								configIDLE_TASK_NAME,
 2010              		.loc 1 2001 3 view .LVU566
 2011              	@ ../freertos/tasks.c:1968: {
1968:../freertos/tasks.c **** BaseType_t xReturn;
 2012              		.loc 1 1968 1 is_stmt 0 view .LVU567
 2013 057c 37B5     		push	{r0, r1, r2, r4, r5, lr}	@
 2014              	.LCFI17:
 2015              		.cfi_def_cfa_offset 24
 2016              		.cfi_offset 4, -12
 2017              		.cfi_offset 5, -8
 2018              		.cfi_offset 14, -4
 2019              	@ ../freertos/tasks.c:2001: 		xReturn = xTaskCreate(	prvIdleTask,
2001:../freertos/tasks.c **** 								configIDLE_TASK_NAME,
 2020              		.loc 1 2001 13 view .LVU568
 2021 057e 0025     		movs	r5, #0	@ tmp121,
 2022 0580 124C     		ldr	r4, .L128	@ tmp119,
ARM GAS  /tmp/ccGXytas.s 			page 141


 2023 0582 7822     		movs	r2, #120	@,
 2024 0584 04F1F403 		add	r3, r4, #244	@ tmp120, tmp119,
 2025 0588 0193     		str	r3, [sp, #4]	@ tmp120,
 2026 058a 1149     		ldr	r1, .L128+4	@,
 2027 058c 2B46     		mov	r3, r5	@, tmp121
 2028 058e 1148     		ldr	r0, .L128+8	@,
 2029 0590 0095     		str	r5, [sp]	@ tmp121,
 2030 0592 FFF7FEFF 		bl	xTaskCreate		@
 2031              	.LVL136:
2012:../freertos/tasks.c **** 		{
 2032              		.loc 1 2012 3 is_stmt 1 view .LVU569
 2033              	@ ../freertos/tasks.c:2012: 		if( xReturn == pdPASS )
2012:../freertos/tasks.c **** 		{
 2034              		.loc 1 2012 5 is_stmt 0 view .LVU570
 2035 0596 0128     		cmp	r0, #1	@ tmp129,
 2036 0598 16D1     		bne	.L124		@,
2014:../freertos/tasks.c **** 		}
 2037              		.loc 1 2014 4 is_stmt 1 view .LVU571
 2038              	@ ../freertos/tasks.c:2014: 			xReturn = xTimerCreateTimerTask();
2014:../freertos/tasks.c **** 		}
 2039              		.loc 1 2014 14 is_stmt 0 view .LVU572
 2040 059a FFF7FEFF 		bl	xTimerCreateTimerTask		@
 2041              	.LVL137:
2018:../freertos/tasks.c **** 		}
 2042              		.loc 1 2018 28 is_stmt 1 view .LVU573
2023:../freertos/tasks.c **** 	{
 2043              		.loc 1 2023 2 view .LVU574
 2044              	@ ../freertos/tasks.c:2023: 	if( xReturn == pdPASS )
2023:../freertos/tasks.c **** 	{
 2045              		.loc 1 2023 4 is_stmt 0 view .LVU575
 2046 059e 0128     		cmp	r0, #1	@ xReturn,
 2047 05a0 12D1     		bne	.L124		@,
2039:../freertos/tasks.c **** 
 2048              		.loc 1 2039 3 is_stmt 1 view .LVU576
 2049              	.LBB110:
 2050              	.LBI110:
 191:../freertos/portable/GCC/ARM_CM3/portmacro.h **** {
 2051              		.loc 2 191 30 view .LVU577
 2052              	.LBB111:
 193:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 
 2053              		.loc 2 193 1 view .LVU578
 195:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	(
 2054              		.loc 2 195 2 view .LVU579
 2055              		.syntax unified
 2056              	@ 195 "../freertos/portable/GCC/ARM_CM3/portmacro.h" 1
 2057 05a2 4FF01003 			mov r3, #16													@ ulNewBASEPRI,
 2058 05a6 83F31188 		msr basepri, r3												@ ulNewBASEPRI
 2059 05aa BFF36F8F 		isb														
 2060 05ae BFF34F8F 		dsb														
 2061              	
 2062              	@ 0 "" 2
 2063              		.thumb
 2064              		.syntax unified
 2065              	.LBE111:
 2066              	.LBE110:
2049:../freertos/tasks.c **** 		xSchedulerRunning = pdTRUE;
 2067              		.loc 1 2049 3 view .LVU580
ARM GAS  /tmp/ccGXytas.s 			page 142


 2068              	@ ../freertos/tasks.c:2049: 		xNextTaskUnblockTime = portMAX_DELAY;
2049:../freertos/tasks.c **** 		xSchedulerRunning = pdTRUE;
 2069              		.loc 1 2049 24 is_stmt 0 view .LVU581
 2070 05b2 4FF0FF33 		mov	r3, #-1	@ tmp124,
 2071 05b6 A362     		str	r3, [r4, #40]	@ tmp124, xNextTaskUnblockTime
2050:../freertos/tasks.c **** 		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 2072              		.loc 1 2050 3 is_stmt 1 view .LVU582
 2073              	@ ../freertos/tasks.c:2050: 		xSchedulerRunning = pdTRUE;
2050:../freertos/tasks.c **** 		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 2074              		.loc 1 2050 21 is_stmt 0 view .LVU583
 2075 05b8 C4F8E800 		str	r0, [r4, #232]	@ xReturn, xSchedulerRunning
2051:../freertos/tasks.c **** 
 2076              		.loc 1 2051 3 is_stmt 1 view .LVU584
 2077              	@ ../freertos/tasks.c:2051: 		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
2051:../freertos/tasks.c **** 
 2078              		.loc 1 2051 14 is_stmt 0 view .LVU585
 2079 05bc 2560     		str	r5, [r4]	@ tmp121, xTickCount
2059:../freertos/tasks.c **** 
 2080              		.loc 1 2059 43 is_stmt 1 view .LVU586
2061:../freertos/tasks.c **** 
 2081              		.loc 1 2061 26 view .LVU587
2065:../freertos/tasks.c **** 		{
 2082              		.loc 1 2065 3 view .LVU588
 2083              	@ ../freertos/tasks.c:2086: }
2086:../freertos/tasks.c **** /*-----------------------------------------------------------*/
 2084              		.loc 1 2086 1 is_stmt 0 view .LVU589
 2085 05be 03B0     		add	sp, sp, #12	@,,
 2086              	.LCFI18:
 2087              		.cfi_remember_state
 2088              		.cfi_def_cfa_offset 12
 2089              		@ sp needed	@
 2090 05c0 BDE83040 		pop	{r4, r5, lr}	@
 2091              	.LCFI19:
 2092              		.cfi_restore 14
 2093              		.cfi_restore 5
 2094              		.cfi_restore 4
 2095              		.cfi_def_cfa_offset 0
 2096              	@ ../freertos/tasks.c:2065: 		if( xPortStartScheduler() != pdFALSE )
2065:../freertos/tasks.c **** 		{
 2097              		.loc 1 2065 7 view .LVU590
 2098 05c4 FFF7FEBF 		b	xPortStartScheduler		@
 2099              	.LVL138:
 2100              	.L124:
 2101              	.LCFI20:
 2102              		.cfi_restore_state
 2103              	@ ../freertos/tasks.c:2086: }
2086:../freertos/tasks.c **** /*-----------------------------------------------------------*/
 2104              		.loc 1 2086 1 view .LVU591
 2105 05c8 03B0     		add	sp, sp, #12	@,,
 2106              	.LCFI21:
 2107              		.cfi_def_cfa_offset 12
 2108              		@ sp needed	@
 2109 05ca 30BD     		pop	{r4, r5, pc}	@
 2110              	.L129:
 2111              		.align	2
 2112              	.L128:
 2113 05cc 00000000 		.word	.LANCHOR0
ARM GAS  /tmp/ccGXytas.s 			page 143


 2114 05d0 00000000 		.word	.LC0
 2115 05d4 00000000 		.word	prvIdleTask
 2116              		.cfi_endproc
 2117              	.LFE19:
 2118              		.size	vTaskStartScheduler, .-vTaskStartScheduler
 2119              		.align	1
 2120              		.global	vTaskEndScheduler
 2121              		.syntax unified
 2122              		.thumb
 2123              		.thumb_func
 2124              		.type	vTaskEndScheduler, %function
 2125              	vTaskEndScheduler:
 2126              	.LFB20:
2090:../freertos/tasks.c **** 	/* Stop the scheduler interrupts and call the portable scheduler end
 2127              		.loc 1 2090 1 is_stmt 1 view -0
 2128              		.cfi_startproc
 2129              		@ args = 0, pretend = 0, frame = 0
 2130              		@ frame_needed = 0, uses_anonymous_args = 0
 2131              		@ link register save eliminated.
2094:../freertos/tasks.c **** 	xSchedulerRunning = pdFALSE;
 2132              		.loc 1 2094 2 view .LVU593
 2133              	.LBB112:
 2134              	.LBI112:
 191:../freertos/portable/GCC/ARM_CM3/portmacro.h **** {
 2135              		.loc 2 191 30 view .LVU594
 2136              	.LBB113:
 193:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 
 2137              		.loc 2 193 1 view .LVU595
 195:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	(
 2138              		.loc 2 195 2 view .LVU596
 2139              		.syntax unified
 2140              	@ 195 "../freertos/portable/GCC/ARM_CM3/portmacro.h" 1
 2141 05d8 4FF01003 			mov r3, #16													@ ulNewBASEPRI,
 2142 05dc 83F31188 		msr basepri, r3												@ ulNewBASEPRI
 2143 05e0 BFF36F8F 		isb														
 2144 05e4 BFF34F8F 		dsb														
 2145              	
 2146              	@ 0 "" 2
 2147              		.thumb
 2148              		.syntax unified
 2149              	.LBE113:
 2150              	.LBE112:
2095:../freertos/tasks.c **** 	vPortEndScheduler();
 2151              		.loc 1 2095 2 view .LVU597
 2152              	@ ../freertos/tasks.c:2095: 	xSchedulerRunning = pdFALSE;
2095:../freertos/tasks.c **** 	vPortEndScheduler();
 2153              		.loc 1 2095 20 is_stmt 0 view .LVU598
 2154 05e8 0022     		movs	r2, #0	@ tmp117,
 2155 05ea 024B     		ldr	r3, .L131	@ tmp116,
 2156 05ec C3F8E820 		str	r2, [r3, #232]	@ tmp117, xSchedulerRunning
2096:../freertos/tasks.c **** }
 2157              		.loc 1 2096 2 is_stmt 1 view .LVU599
 2158 05f0 FFF7FEBF 		b	vPortEndScheduler		@
 2159              	.LVL139:
 2160              	.L132:
 2161              		.align	2
 2162              	.L131:
ARM GAS  /tmp/ccGXytas.s 			page 144


 2163 05f4 00000000 		.word	.LANCHOR0
 2164              		.cfi_endproc
 2165              	.LFE20:
 2166              		.size	vTaskEndScheduler, .-vTaskEndScheduler
 2167              		.align	1
 2168              		.global	vTaskSuspendAll
 2169              		.syntax unified
 2170              		.thumb
 2171              		.thumb_func
 2172              		.type	vTaskSuspendAll, %function
 2173              	vTaskSuspendAll:
 2174              	.LFB21:
2101:../freertos/tasks.c **** 	/* A critical section is not required as the variable is of type
 2175              		.loc 1 2101 1 view -0
 2176              		.cfi_startproc
 2177              		@ args = 0, pretend = 0, frame = 0
 2178              		@ frame_needed = 0, uses_anonymous_args = 0
 2179              		@ link register save eliminated.
2106:../freertos/tasks.c **** 	portMEMORY_BARRIER();
 2180              		.loc 1 2106 2 view .LVU601
 2181 05f8 034A     		ldr	r2, .L134	@ tmp116,
 2182 05fa D2F8F030 		ldr	r3, [r2, #240]	@ uxSchedulerSuspended.55_1, uxSchedulerSuspended
 2183 05fe 0133     		adds	r3, r3, #1	@ _2, uxSchedulerSuspended.55_1,
 2184 0600 C2F8F030 		str	r3, [r2, #240]	@ _2, uxSchedulerSuspended
2107:../freertos/tasks.c **** }
 2185              		.loc 1 2107 2 view .LVU602
 2186              	@ ../freertos/tasks.c:2108: }
2108:../freertos/tasks.c **** /*----------------------------------------------------------*/
 2187              		.loc 1 2108 1 is_stmt 0 view .LVU603
 2188 0604 7047     		bx	lr	@
 2189              	.L135:
 2190 0606 00BF     		.align	2
 2191              	.L134:
 2192 0608 00000000 		.word	.LANCHOR0
 2193              		.cfi_endproc
 2194              	.LFE21:
 2195              		.size	vTaskSuspendAll, .-vTaskSuspendAll
 2196              		.align	1
 2197              		.global	xTaskGetTickCount
 2198              		.syntax unified
 2199              		.thumb
 2200              		.thumb_func
 2201              		.type	xTaskGetTickCount, %function
 2202              	xTaskGetTickCount:
 2203              	.LFB23:
2285:../freertos/tasks.c **** TickType_t xTicks;
 2204              		.loc 1 2285 1 is_stmt 1 view -0
 2205              		.cfi_startproc
 2206              		@ args = 0, pretend = 0, frame = 0
 2207              		@ frame_needed = 0, uses_anonymous_args = 0
 2208              		@ link register save eliminated.
2286:../freertos/tasks.c **** 
 2209              		.loc 1 2286 1 view .LVU605
2289:../freertos/tasks.c **** 	{
 2210              		.loc 1 2289 32 view .LVU606
2291:../freertos/tasks.c **** 	}
 2211              		.loc 1 2291 3 view .LVU607
ARM GAS  /tmp/ccGXytas.s 			page 145


 2212              	@ ../freertos/tasks.c:2291: 		xTicks = xTickCount;
2291:../freertos/tasks.c **** 	}
 2213              		.loc 1 2291 10 is_stmt 0 view .LVU608
 2214 060c 014B     		ldr	r3, .L137	@ tmp115,
 2215 060e 1868     		ldr	r0, [r3]	@ <retval>, xTickCount
 2216              	.LVL140:
2293:../freertos/tasks.c **** 
 2217              		.loc 1 2293 31 is_stmt 1 view .LVU609
2295:../freertos/tasks.c **** }
 2218              		.loc 1 2295 2 view .LVU610
 2219              	@ ../freertos/tasks.c:2296: }
2296:../freertos/tasks.c **** /*-----------------------------------------------------------*/
 2220              		.loc 1 2296 1 is_stmt 0 view .LVU611
 2221 0610 7047     		bx	lr	@
 2222              	.L138:
 2223 0612 00BF     		.align	2
 2224              	.L137:
 2225 0614 00000000 		.word	.LANCHOR0
 2226              		.cfi_endproc
 2227              	.LFE23:
 2228              		.size	xTaskGetTickCount, .-xTaskGetTickCount
 2229              		.align	1
 2230              		.global	xTaskGetTickCountFromISR
 2231              		.syntax unified
 2232              		.thumb
 2233              		.thumb_func
 2234              		.type	xTaskGetTickCountFromISR, %function
 2235              	xTaskGetTickCountFromISR:
 2236              	.LFB68:
 2237              		.cfi_startproc
2299:../freertos/tasks.c **** {
 2238              		.loc 1 2299 12 is_stmt 1 view .LVU612
 2239              		@ args = 0, pretend = 0, frame = 0
 2240              		@ frame_needed = 0, uses_anonymous_args = 0
 2241              		@ link register save eliminated.
 2242 0618 014B     		ldr	r3, .L140	@ tmp115,
 2243 061a 1868     		ldr	r0, [r3]	@ <retval>, xTickCount
 2244 061c 7047     		bx	lr	@
 2245              	.L141:
 2246 061e 00BF     		.align	2
 2247              	.L140:
 2248 0620 00000000 		.word	.LANCHOR0
 2249              		.cfi_endproc
 2250              	.LFE68:
 2251              		.size	xTaskGetTickCountFromISR, .-xTaskGetTickCountFromISR
 2252              		.align	1
 2253              		.global	uxTaskGetNumberOfTasks
 2254              		.syntax unified
 2255              		.thumb
 2256              		.thumb_func
 2257              		.type	uxTaskGetNumberOfTasks, %function
 2258              	uxTaskGetNumberOfTasks:
 2259              	.LFB25:
2331:../freertos/tasks.c **** 	/* A critical section is not required because the variables are of type
 2260              		.loc 1 2331 1 view -0
 2261              		.cfi_startproc
 2262              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccGXytas.s 			page 146


 2263              		@ frame_needed = 0, uses_anonymous_args = 0
 2264              		@ link register save eliminated.
2334:../freertos/tasks.c **** }
 2265              		.loc 1 2334 2 view .LVU614
 2266              	@ ../freertos/tasks.c:2334: 	return uxCurrentNumberOfTasks;
2334:../freertos/tasks.c **** }
 2267              		.loc 1 2334 9 is_stmt 0 view .LVU615
 2268 0624 014B     		ldr	r3, .L143	@ tmp115,
 2269 0626 186C     		ldr	r0, [r3, #64]	@ <retval>, uxCurrentNumberOfTasks
 2270              	@ ../freertos/tasks.c:2335: }
2335:../freertos/tasks.c **** /*-----------------------------------------------------------*/
 2271              		.loc 1 2335 1 view .LVU616
 2272 0628 7047     		bx	lr	@
 2273              	.L144:
 2274 062a 00BF     		.align	2
 2275              	.L143:
 2276 062c 00000000 		.word	.LANCHOR0
 2277              		.cfi_endproc
 2278              	.LFE25:
 2279              		.size	uxTaskGetNumberOfTasks, .-uxTaskGetNumberOfTasks
 2280              		.align	1
 2281              		.global	pcTaskGetName
 2282              		.syntax unified
 2283              		.thumb
 2284              		.thumb_func
 2285              		.type	pcTaskGetName, %function
 2286              	pcTaskGetName:
 2287              	.LVL141:
 2288              	.LFB26:
2339:../freertos/tasks.c **** TCB_t *pxTCB;
 2289              		.loc 1 2339 1 is_stmt 1 view -0
 2290              		.cfi_startproc
 2291              		@ args = 0, pretend = 0, frame = 0
 2292              		@ frame_needed = 0, uses_anonymous_args = 0
 2293              		@ link register save eliminated.
2340:../freertos/tasks.c **** 
 2294              		.loc 1 2340 1 view .LVU618
2344:../freertos/tasks.c **** 	configASSERT( pxTCB );
 2295              		.loc 1 2344 2 view .LVU619
 2296              	@ ../freertos/tasks.c:2344: 	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
2344:../freertos/tasks.c **** 	configASSERT( pxTCB );
 2297              		.loc 1 2344 10 is_stmt 0 view .LVU620
 2298 0630 08B9     		cbnz	r0, .L146	@ xTaskToQuery,
 2299              	@ ../freertos/tasks.c:2344: 	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
2344:../freertos/tasks.c **** 	configASSERT( pxTCB );
 2300              		.loc 1 2344 10 discriminator 1 view .LVU621
 2301 0632 024B     		ldr	r3, .L147	@ tmp116,
 2302 0634 5868     		ldr	r0, [r3, #4]	@ xTaskToQuery, pxCurrentTCB
 2303              	.LVL142:
 2304              	.L146:
2345:../freertos/tasks.c **** 	return &( pxTCB->pcTaskName[ 0 ] );
 2305              		.loc 1 2345 23 is_stmt 1 view .LVU622
2346:../freertos/tasks.c **** }
 2306              		.loc 1 2346 2 view .LVU623
 2307              	@ ../freertos/tasks.c:2347: }
2347:../freertos/tasks.c **** /*-----------------------------------------------------------*/
 2308              		.loc 1 2347 1 is_stmt 0 view .LVU624
ARM GAS  /tmp/ccGXytas.s 			page 147


 2309 0636 3430     		adds	r0, r0, #52	@, xTaskToQuery,
 2310              	.LVL143:
2347:../freertos/tasks.c **** /*-----------------------------------------------------------*/
 2311              		.loc 1 2347 1 view .LVU625
 2312 0638 7047     		bx	lr	@
 2313              	.L148:
 2314 063a 00BF     		.align	2
 2315              	.L147:
 2316 063c 00000000 		.word	.LANCHOR0
 2317              		.cfi_endproc
 2318              	.LFE26:
 2319              		.size	pcTaskGetName, .-pcTaskGetName
 2320              		.align	1
 2321              		.global	xTaskIncrementTick
 2322              		.syntax unified
 2323              		.thumb
 2324              		.thumb_func
 2325              		.type	xTaskIncrementTick, %function
 2326              	xTaskIncrementTick:
 2327              	.LFB28:
2666:../freertos/tasks.c **** TCB_t * pxTCB;
 2328              		.loc 1 2666 1 is_stmt 1 view -0
 2329              		.cfi_startproc
 2330              		@ args = 0, pretend = 0, frame = 0
 2331              		@ frame_needed = 0, uses_anonymous_args = 0
2667:../freertos/tasks.c **** TickType_t xItemValue;
 2332              		.loc 1 2667 1 view .LVU627
2668:../freertos/tasks.c **** BaseType_t xSwitchRequired = pdFALSE;
 2333              		.loc 1 2668 1 view .LVU628
2669:../freertos/tasks.c **** 
 2334              		.loc 1 2669 1 view .LVU629
 2335              	.LVL144:
2674:../freertos/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 2336              		.loc 1 2674 40 view .LVU630
2675:../freertos/tasks.c **** 	{
 2337              		.loc 1 2675 2 view .LVU631
 2338              	@ ../freertos/tasks.c:2666: {
2666:../freertos/tasks.c **** TCB_t * pxTCB;
 2339              		.loc 1 2666 1 is_stmt 0 view .LVU632
 2340 0640 2DE9F84F 		push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 2341              	.LCFI22:
 2342              		.cfi_def_cfa_offset 40
 2343              		.cfi_offset 3, -40
 2344              		.cfi_offset 4, -36
 2345              		.cfi_offset 5, -32
 2346              		.cfi_offset 6, -28
 2347              		.cfi_offset 7, -24
 2348              		.cfi_offset 8, -20
 2349              		.cfi_offset 9, -16
 2350              		.cfi_offset 10, -12
 2351              		.cfi_offset 11, -8
 2352              		.cfi_offset 14, -4
 2353              	@ ../freertos/tasks.c:2675: 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
2675:../freertos/tasks.c **** 	{
 2354              		.loc 1 2675 27 view .LVU633
 2355 0644 2F4C     		ldr	r4, .L170	@ tmp147,
 2356 0646 D4F8F030 		ldr	r3, [r4, #240]	@ uxSchedulerSuspended.66_1, uxSchedulerSuspended
ARM GAS  /tmp/ccGXytas.s 			page 148


 2357              	@ ../freertos/tasks.c:2675: 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
2675:../freertos/tasks.c **** 	{
 2358              		.loc 1 2675 4 view .LVU634
 2359 064a 002B     		cmp	r3, #0	@ uxSchedulerSuspended.66_1
 2360 064c 53D1     		bne	.L150	@
 2361              	.LBB114:
2679:../freertos/tasks.c **** 
 2362              		.loc 1 2679 3 is_stmt 1 view .LVU635
 2363              	@ ../freertos/tasks.c:2679: 		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
2679:../freertos/tasks.c **** 
 2364              		.loc 1 2679 49 is_stmt 0 view .LVU636
 2365 064e 2768     		ldr	r7, [r4]	@ xTickCount.67_2, xTickCount
 2366              	@ ../freertos/tasks.c:2679: 		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
2679:../freertos/tasks.c **** 
 2367              		.loc 1 2679 20 view .LVU637
 2368 0650 0137     		adds	r7, r7, #1	@ xConstTickCount, xTickCount.67_2,
 2369              	.LVL145:
2683:../freertos/tasks.c **** 
 2370              		.loc 1 2683 3 is_stmt 1 view .LVU638
 2371              	@ ../freertos/tasks.c:2683: 		xTickCount = xConstTickCount;
2683:../freertos/tasks.c **** 
 2372              		.loc 1 2683 14 is_stmt 0 view .LVU639
 2373 0652 2760     		str	r7, [r4]	@ xConstTickCount, xTickCount
2685:../freertos/tasks.c **** 		{
 2374              		.loc 1 2685 3 is_stmt 1 view .LVU640
 2375              	@ ../freertos/tasks.c:2685: 		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not
2685:../freertos/tasks.c **** 		{
 2376              		.loc 1 2685 5 is_stmt 0 view .LVU641
 2377 0654 57B9     		cbnz	r7, .L151	@ xConstTickCount,
 2378              	.LBB115:
2687:../freertos/tasks.c **** 		}
 2379              		.loc 1 2687 4 is_stmt 1 view .LVU642
2687:../freertos/tasks.c **** 		}
 2380              		.loc 1 2687 4 view .LVU643
2687:../freertos/tasks.c **** 		}
 2381              		.loc 1 2687 4 view .LVU644
 2382 0656 636A     		ldr	r3, [r4, #36]	@ pxTemp, pxDelayedTaskList
 2383              	.LVL146:
2687:../freertos/tasks.c **** 		}
 2384              		.loc 1 2687 4 view .LVU645
 2385 0658 226A     		ldr	r2, [r4, #32]	@ pxOverflowDelayedTaskList.68_3, pxOverflowDelayedTaskList
 2386 065a 6262     		str	r2, [r4, #36]	@ pxOverflowDelayedTaskList.68_3, pxDelayedTaskList
2687:../freertos/tasks.c **** 		}
 2387              		.loc 1 2687 4 view .LVU646
 2388 065c 2362     		str	r3, [r4, #32]	@ pxTemp, pxOverflowDelayedTaskList
2687:../freertos/tasks.c **** 		}
 2389              		.loc 1 2687 4 view .LVU647
 2390 065e D4F8F830 		ldr	r3, [r4, #248]	@ xNumOfOverflows.69_4, xNumOfOverflows
 2391              	.LVL147:
2687:../freertos/tasks.c **** 		}
 2392              		.loc 1 2687 4 is_stmt 0 view .LVU648
 2393 0662 0133     		adds	r3, r3, #1	@ _5, xNumOfOverflows.69_4,
 2394 0664 C4F8F830 		str	r3, [r4, #248]	@ _5, xNumOfOverflows
 2395              	.LVL148:
2687:../freertos/tasks.c **** 		}
 2396              		.loc 1 2687 4 is_stmt 1 view .LVU649
 2397 0668 FFF700FD 		bl	prvResetNextTaskUnblockTime		@
ARM GAS  /tmp/ccGXytas.s 			page 149


 2398              	.LVL149:
 2399              	.LBE115:
2687:../freertos/tasks.c **** 		}
 2400              		.loc 1 2687 30 discriminator 1 view .LVU650
 2401              	.L151:
2691:../freertos/tasks.c **** 		}
 2402              		.loc 1 2691 28 view .LVU651
2698:../freertos/tasks.c **** 		{
 2403              		.loc 1 2698 3 view .LVU652
 2404              	@ ../freertos/tasks.c:2698: 		if( xConstTickCount >= xNextTaskUnblockTime )
2698:../freertos/tasks.c **** 		{
 2405              		.loc 1 2698 23 is_stmt 0 view .LVU653
 2406 066c A36A     		ldr	r3, [r4, #40]	@ xNextTaskUnblockTime.70_6, xNextTaskUnblockTime
 2407              	.LBE114:
 2408              	@ ../freertos/tasks.c:2669: BaseType_t xSwitchRequired = pdFALSE;
2669:../freertos/tasks.c **** 
 2409              		.loc 1 2669 12 view .LVU654
 2410 066e 0025     		movs	r5, #0	@ <retval>,
 2411              	.LBB116:
 2412              	@ ../freertos/tasks.c:2698: 		if( xConstTickCount >= xNextTaskUnblockTime )
2698:../freertos/tasks.c **** 		{
 2413              		.loc 1 2698 5 view .LVU655
 2414 0670 BB42     		cmp	r3, r7	@ xNextTaskUnblockTime.70_6, xConstTickCount
 2415 0672 10D9     		bls	.L162		@,
 2416              	.LVL150:
 2417              	.L153:
2781:../freertos/tasks.c **** 			{
 2418              		.loc 1 2781 4 is_stmt 1 view .LVU656
 2419              	@ ../freertos/tasks.c:2781: 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxP
2781:../freertos/tasks.c **** 			{
 2420              		.loc 1 2781 8 is_stmt 0 view .LVU657
 2421 0674 1422     		movs	r2, #20	@ tmp180,
 2422 0676 6368     		ldr	r3, [r4, #4]	@ pxCurrentTCB.75_23, pxCurrentTCB
 2423 0678 DB6A     		ldr	r3, [r3, #44]	@ _24, pxCurrentTCB.75_23->uxPriority
 2424 067a 02FB0343 		mla	r3, r2, r3, r4	@ tmp181, tmp180, _24, tmp147
 2425 067e 9B6C     		ldr	r3, [r3, #72]	@ _25, pxReadyTasksLists[_24].uxNumberOfItems
 2426              	@ ../freertos/tasks.c:2783: 				xSwitchRequired = pdTRUE;
2783:../freertos/tasks.c **** 			}
 2427              		.loc 1 2783 21 view .LVU658
 2428 0680 022B     		cmp	r3, #2	@ _25,
 2429 0682 28BF     		it	cs
 2430 0684 0125     		movcs	r5, #1	@ <retval>,
 2431              	.LVL151:
 2432              	.L160:
2783:../freertos/tasks.c **** 			}
 2433              		.loc 1 2783 21 view .LVU659
 2434              	.LBE116:
2822:../freertos/tasks.c **** 		{
 2435              		.loc 1 2822 3 is_stmt 1 view .LVU660
 2436              	@ ../freertos/tasks.c:2822: 		if( xYieldPending != pdFALSE )
2822:../freertos/tasks.c **** 		{
 2437              		.loc 1 2822 21 is_stmt 0 view .LVU661
 2438 0686 D4F80031 		ldr	r3, [r4, #256]	@ xYieldPending.77_28, xYieldPending
 2439              	@ ../freertos/tasks.c:2824: 			xSwitchRequired = pdTRUE;
2824:../freertos/tasks.c **** 		}
 2440              		.loc 1 2824 20 view .LVU662
 2441 068a 002B     		cmp	r3, #0	@ xYieldPending.77_28,
ARM GAS  /tmp/ccGXytas.s 			page 150


 2442              	@ ../freertos/tasks.c:2834: }
2834:../freertos/tasks.c **** /*-----------------------------------------------------------*/
 2443              		.loc 1 2834 1 view .LVU663
 2444 068c 0CBF     		ite	eq
 2445 068e 2846     		moveq	r0, r5	@, <retval>
 2446 0690 0120     		movne	r0, #1	@,
 2447 0692 BDE8F88F 		pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 2448              	.LVL152:
 2449              	.L162:
 2450              	.LBB117:
 2451              	@ ../freertos/tasks.c:2752: 					prvAddTaskToReadyList( pxTCB );
2752:../freertos/tasks.c **** 
 2452              		.loc 1 2752 6 view .LVU664
 2453 0696 4FF0010B 		mov	fp, #1	@ tmp190,
 2454 069a 4FF0140A 		mov	r10, #20	@ tmp192,
 2455 069e DFF86890 		ldr	r9, .L170+4	@ tmp191,
 2456              	.LVL153:
 2457              	.L152:
2700:../freertos/tasks.c **** 			{
 2458              		.loc 1 2700 4 is_stmt 1 view .LVU665
2702:../freertos/tasks.c **** 				{
 2459              		.loc 1 2702 5 view .LVU666
 2460              	@ ../freertos/tasks.c:2702: 				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
2702:../freertos/tasks.c **** 				{
 2461              		.loc 1 2702 9 is_stmt 0 view .LVU667
 2462 06a2 636A     		ldr	r3, [r4, #36]	@ pxDelayedTaskList.71_7, pxDelayedTaskList
 2463 06a4 1B68     		ldr	r3, [r3]	@ _8, pxDelayedTaskList.71_7->uxNumberOfItems
 2464              	@ ../freertos/tasks.c:2702: 				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
2702:../freertos/tasks.c **** 				{
 2465              		.loc 1 2702 7 view .LVU668
 2466 06a6 1BB9     		cbnz	r3, .L154	@ _8,
2709:../freertos/tasks.c **** 					break;
 2467              		.loc 1 2709 6 is_stmt 1 view .LVU669
 2468              	@ ../freertos/tasks.c:2709: 					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception
2709:../freertos/tasks.c **** 					break;
 2469              		.loc 1 2709 27 is_stmt 0 view .LVU670
 2470 06a8 4FF0FF33 		mov	r3, #-1	@ tmp159,
 2471              	.L169:
2728:../freertos/tasks.c **** 						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks
 2472              		.loc 1 2728 7 is_stmt 1 view .LVU671
 2473              	@ ../freertos/tasks.c:2728: 						xNextTaskUnblockTime = xItemValue;
2728:../freertos/tasks.c **** 						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks
 2474              		.loc 1 2728 28 is_stmt 0 view .LVU672
 2475 06ac A362     		str	r3, [r4, #40]	@ xItemValue, xNextTaskUnblockTime
2729:../freertos/tasks.c **** 					}
 2476              		.loc 1 2729 7 is_stmt 1 view .LVU673
 2477 06ae E1E7     		b	.L153		@
 2478              	.L154:
2718:../freertos/tasks.c **** 					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 2479              		.loc 1 2718 6 view .LVU674
 2480              	@ ../freertos/tasks.c:2718: 					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !
2718:../freertos/tasks.c **** 					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 2481              		.loc 1 2718 14 is_stmt 0 view .LVU675
 2482 06b0 636A     		ldr	r3, [r4, #36]	@ pxDelayedTaskList.72_9, pxDelayedTaskList
 2483              	@ ../freertos/tasks.c:2718: 					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !
2718:../freertos/tasks.c **** 					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 2484              		.loc 1 2718 12 view .LVU676
ARM GAS  /tmp/ccGXytas.s 			page 151


 2485 06b2 DB68     		ldr	r3, [r3, #12]	@ pxDelayedTaskList.72_9->xListEnd.pxNext, pxDelayedTaskList.72_9->xListEnd.pxNe
 2486 06b4 DE68     		ldr	r6, [r3, #12]	@ pxTCB, _10->pvOwner
 2487              	.LVL154:
2719:../freertos/tasks.c **** 
 2488              		.loc 1 2719 6 is_stmt 1 view .LVU677
 2489              	@ ../freertos/tasks.c:2719: 					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) )
2719:../freertos/tasks.c **** 
 2490              		.loc 1 2719 17 is_stmt 0 view .LVU678
 2491 06b6 7368     		ldr	r3, [r6, #4]	@ xItemValue, pxTCB_48->xStateListItem.xItemValue
 2492              	.LVL155:
2721:../freertos/tasks.c **** 					{
 2493              		.loc 1 2721 6 is_stmt 1 view .LVU679
 2494              	@ ../freertos/tasks.c:2721: 					if( xConstTickCount < xItemValue )
2721:../freertos/tasks.c **** 					{
 2495              		.loc 1 2721 8 is_stmt 0 view .LVU680
 2496 06b8 9F42     		cmp	r7, r3	@ xConstTickCount, xItemValue
 2497 06ba F7D3     		bcc	.L169		@,
2733:../freertos/tasks.c **** 					}
 2498              		.loc 1 2733 31 is_stmt 1 view .LVU681
2737:../freertos/tasks.c **** 
 2499              		.loc 1 2737 6 view .LVU682
 2500              	@ ../freertos/tasks.c:2737: 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2737:../freertos/tasks.c **** 
 2501              		.loc 1 2737 15 is_stmt 0 view .LVU683
 2502 06bc 06F10408 		add	r8, r6, #4	@ _11, pxTCB,
 2503 06c0 4046     		mov	r0, r8	@, _11
 2504 06c2 FFF7FEFF 		bl	uxListRemove		@
 2505              	.LVL156:
2741:../freertos/tasks.c **** 					{
 2506              		.loc 1 2741 6 is_stmt 1 view .LVU684
 2507              	@ ../freertos/tasks.c:2741: 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL 
2741:../freertos/tasks.c **** 					{
 2508              		.loc 1 2741 8 is_stmt 0 view .LVU685
 2509 06c6 B36A     		ldr	r3, [r6, #40]	@ pxTCB_48->xEventListItem.pvContainer, pxTCB_48->xEventListItem.pvContainer
 2510 06c8 1BB1     		cbz	r3, .L157	@ pxTCB_48->xEventListItem.pvContainer,
2743:../freertos/tasks.c **** 					}
 2511              		.loc 1 2743 7 is_stmt 1 view .LVU686
 2512              	@ ../freertos/tasks.c:2743: 						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2743:../freertos/tasks.c **** 					}
 2513              		.loc 1 2743 16 is_stmt 0 view .LVU687
 2514 06ca 06F11800 		add	r0, r6, #24	@, pxTCB,
 2515 06ce FFF7FEFF 		bl	uxListRemove		@
 2516              	.LVL157:
 2517              	.L157:
2747:../freertos/tasks.c **** 					}
 2518              		.loc 1 2747 31 is_stmt 1 view .LVU688
2752:../freertos/tasks.c **** 
 2519              		.loc 1 2752 6 view .LVU689
2752:../freertos/tasks.c **** 
 2520              		.loc 1 2752 6 view .LVU690
 2521 06d2 F06A     		ldr	r0, [r6, #44]	@ _14, pxTCB_48->uxPriority
 2522 06d4 A268     		ldr	r2, [r4, #8]	@ uxTopReadyPriority.73_16, uxTopReadyPriority
 2523 06d6 0BFA00F3 		lsl	r3, fp, r0	@ tmp166, tmp190, _14
 2524 06da 1343     		orrs	r3, r3, r2	@, _17, tmp166, uxTopReadyPriority.73_16
 2525 06dc 4146     		mov	r1, r8	@, _11
 2526 06de 0AFB0090 		mla	r0, r10, r0, r9	@, tmp192, _14, tmp191
 2527 06e2 A360     		str	r3, [r4, #8]	@ _17, uxTopReadyPriority
ARM GAS  /tmp/ccGXytas.s 			page 152


2752:../freertos/tasks.c **** 
 2528              		.loc 1 2752 6 view .LVU691
 2529 06e4 FFF7FEFF 		bl	vListInsertEnd		@
 2530              	.LVL158:
2752:../freertos/tasks.c **** 
 2531              		.loc 1 2752 36 discriminator 1 view .LVU692
2762:../freertos/tasks.c **** 						{
 2532              		.loc 1 2762 7 view .LVU693
 2533              	@ ../freertos/tasks.c:2762: 						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
2762:../freertos/tasks.c **** 						{
 2534              		.loc 1 2762 44 is_stmt 0 view .LVU694
 2535 06e8 6368     		ldr	r3, [r4, #4]	@ pxCurrentTCB.74_21, pxCurrentTCB
 2536              	@ ../freertos/tasks.c:2762: 						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
2762:../freertos/tasks.c **** 						{
 2537              		.loc 1 2762 9 view .LVU695
 2538 06ea F26A     		ldr	r2, [r6, #44]	@ pxTCB_48->uxPriority, pxTCB_48->uxPriority
 2539 06ec DB6A     		ldr	r3, [r3, #44]	@ pxCurrentTCB.74_21->uxPriority, pxCurrentTCB.74_21->uxPriority
 2540              	@ ../freertos/tasks.c:2764: 							xSwitchRequired = pdTRUE;
2764:../freertos/tasks.c **** 						}
 2541              		.loc 1 2764 24 view .LVU696
 2542 06ee 9A42     		cmp	r2, r3	@ pxTCB_48->uxPriority, pxCurrentTCB.74_21->uxPriority
 2543 06f0 28BF     		it	cs		@
 2544 06f2 0125     		movcs	r5, #1	@, <retval>,
 2545              	.LVL159:
2764:../freertos/tasks.c **** 						}
 2546              		.loc 1 2764 24 view .LVU697
 2547 06f4 D5E7     		b	.L152		@
 2548              	.LVL160:
 2549              	.L150:
2764:../freertos/tasks.c **** 						}
 2550              		.loc 1 2764 24 view .LVU698
 2551              	.LBE117:
2809:../freertos/tasks.c **** 
 2552              		.loc 1 2809 3 is_stmt 1 view .LVU699
 2553 06f6 D4F8FC30 		ldr	r3, [r4, #252]	@ uxPendedTicks.76_26, uxPendedTicks
 2554              	@ ../freertos/tasks.c:2669: BaseType_t xSwitchRequired = pdFALSE;
2669:../freertos/tasks.c **** 
 2555              		.loc 1 2669 12 is_stmt 0 view .LVU700
 2556 06fa 0025     		movs	r5, #0	@ <retval>,
 2557              	@ ../freertos/tasks.c:2809: 		++uxPendedTicks;
2809:../freertos/tasks.c **** 
 2558              		.loc 1 2809 3 view .LVU701
 2559 06fc 0133     		adds	r3, r3, #1	@ _27, uxPendedTicks.76_26,
 2560 06fe C4F8FC30 		str	r3, [r4, #252]	@ _27, uxPendedTicks
 2561 0702 C0E7     		b	.L160		@
 2562              	.L171:
 2563              		.align	2
 2564              	.L170:
 2565 0704 00000000 		.word	.LANCHOR0
 2566 0708 48000000 		.word	.LANCHOR0+72
 2567              		.cfi_endproc
 2568              	.LFE28:
 2569              		.size	xTaskIncrementTick, .-xTaskIncrementTick
 2570              		.align	1
 2571              		.global	xTaskResumeAll
 2572              		.syntax unified
 2573              		.thumb
ARM GAS  /tmp/ccGXytas.s 			page 153


 2574              		.thumb_func
 2575              		.type	xTaskResumeAll, %function
 2576              	xTaskResumeAll:
 2577              	.LFB22:
2175:../freertos/tasks.c **** TCB_t *pxTCB = NULL;
 2578              		.loc 1 2175 1 is_stmt 1 view -0
 2579              		.cfi_startproc
 2580              		@ args = 0, pretend = 0, frame = 0
 2581              		@ frame_needed = 0, uses_anonymous_args = 0
2176:../freertos/tasks.c **** BaseType_t xAlreadyYielded = pdFALSE;
 2582              		.loc 1 2176 1 view .LVU703
 2583              	.LVL161:
2177:../freertos/tasks.c **** 
 2584              		.loc 1 2177 1 view .LVU704
2181:../freertos/tasks.c **** 
 2585              		.loc 1 2181 38 view .LVU705
2188:../freertos/tasks.c **** 	{
 2586              		.loc 1 2188 2 view .LVU706
 2587              	@ ../freertos/tasks.c:2175: {
2175:../freertos/tasks.c **** TCB_t *pxTCB = NULL;
 2588              		.loc 1 2175 1 is_stmt 0 view .LVU707
 2589 070c 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}	@
 2590              	.LCFI23:
 2591              		.cfi_def_cfa_offset 32
 2592              		.cfi_offset 3, -32
 2593              		.cfi_offset 4, -28
 2594              		.cfi_offset 5, -24
 2595              		.cfi_offset 6, -20
 2596              		.cfi_offset 7, -16
 2597              		.cfi_offset 8, -12
 2598              		.cfi_offset 9, -8
 2599              		.cfi_offset 14, -4
 2600              	@ ../freertos/tasks.c:2190: 		--uxSchedulerSuspended;
2190:../freertos/tasks.c **** 
 2601              		.loc 1 2190 3 view .LVU708
 2602 0710 2D4C     		ldr	r4, .L197	@ tmp136,
 2603              	@ ../freertos/tasks.c:2188: 	taskENTER_CRITICAL();
2188:../freertos/tasks.c **** 	{
 2604              		.loc 1 2188 2 view .LVU709
 2605 0712 FFF7FEFF 		bl	vPortEnterCritical		@
 2606              	.LVL162:
2190:../freertos/tasks.c **** 
 2607              		.loc 1 2190 3 is_stmt 1 view .LVU710
 2608 0716 D4F8F030 		ldr	r3, [r4, #240]	@ uxSchedulerSuspended.56_1, uxSchedulerSuspended
 2609 071a 013B     		subs	r3, r3, #1	@ _2, uxSchedulerSuspended.56_1,
 2610 071c C4F8F030 		str	r3, [r4, #240]	@ _2, uxSchedulerSuspended
2192:../freertos/tasks.c **** 		{
 2611              		.loc 1 2192 3 view .LVU711
 2612              	@ ../freertos/tasks.c:2192: 		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
2192:../freertos/tasks.c **** 		{
 2613              		.loc 1 2192 28 is_stmt 0 view .LVU712
 2614 0720 D4F8F050 		ldr	r5, [r4, #240]	@ uxSchedulerSuspended.57_3, uxSchedulerSuspended
 2615              	@ ../freertos/tasks.c:2192: 		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
2192:../freertos/tasks.c **** 		{
 2616              		.loc 1 2192 5 view .LVU713
 2617 0724 2DB1     		cbz	r5, .L173	@ uxSchedulerSuspended.57_3,
 2618              	.LVL163:
ARM GAS  /tmp/ccGXytas.s 			page 154


 2619              	.L176:
 2620              	@ ../freertos/tasks.c:2177: BaseType_t xAlreadyYielded = pdFALSE;
2177:../freertos/tasks.c **** 
 2621              		.loc 1 2177 12 view .LVU714
 2622 0726 0024     		movs	r4, #0	@ <retval>,
 2623              	.LVL164:
 2624              	.L174:
2275:../freertos/tasks.c **** 		}
 2625              		.loc 1 2275 28 is_stmt 1 view .LVU715
2278:../freertos/tasks.c **** 
 2626              		.loc 1 2278 2 view .LVU716
 2627 0728 FFF7FEFF 		bl	vPortExitCritical		@
 2628              	.LVL165:
2280:../freertos/tasks.c **** }
 2629              		.loc 1 2280 2 view .LVU717
 2630              	@ ../freertos/tasks.c:2281: }
2281:../freertos/tasks.c **** /*-----------------------------------------------------------*/
 2631              		.loc 1 2281 1 is_stmt 0 view .LVU718
 2632 072c 2046     		mov	r0, r4	@, <retval>
 2633 072e BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}	@
 2634              	.LVL166:
 2635              	.L173:
2194:../freertos/tasks.c **** 			{
 2636              		.loc 1 2194 4 is_stmt 1 view .LVU719
 2637              	@ ../freertos/tasks.c:2194: 			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
2194:../freertos/tasks.c **** 			{
 2638              		.loc 1 2194 31 is_stmt 0 view .LVU720
 2639 0732 236C     		ldr	r3, [r4, #64]	@ uxCurrentNumberOfTasks.58_4, uxCurrentNumberOfTasks
 2640              	@ ../freertos/tasks.c:2194: 			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
2194:../freertos/tasks.c **** 			{
 2641              		.loc 1 2194 6 view .LVU721
 2642 0734 002B     		cmp	r3, #0	@ uxCurrentNumberOfTasks.58_4
 2643 0736 F6D0     		beq	.L176	@
 2644              	@ ../freertos/tasks.c:2203: 					prvAddTaskToReadyList( pxTCB );
2203:../freertos/tasks.c **** 
 2645              		.loc 1 2203 6 view .LVU722
 2646 0738 0126     		movs	r6, #1	@ tmp169,
 2647 073a 4FF01408 		mov	r8, #20	@ tmp171,
 2648 073e 04F14807 		add	r7, r4, #72	@ tmp170, tmp136,
 2649 0742 1DE0     		b	.L175		@
 2650              	.LVL167:
 2651              	.L178:
2200:../freertos/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 2652              		.loc 1 2200 6 is_stmt 1 view .LVU723
 2653              	@ ../freertos/tasks.c:2200: 					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*l
2200:../freertos/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 2654              		.loc 1 2200 12 is_stmt 0 view .LVU724
 2655 0744 D4F8E030 		ldr	r3, [r4, #224]	@ xPendingReadyList.xListEnd.pxNext, xPendingReadyList.xListEnd.pxNext
 2656 0748 DD68     		ldr	r5, [r3, #12]	@ pxTCB, _5->pvOwner
 2657              	.LVL168:
2201:../freertos/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 2658              		.loc 1 2201 6 is_stmt 1 view .LVU725
 2659              	@ ../freertos/tasks.c:2202: 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2202:../freertos/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 2660              		.loc 1 2202 15 is_stmt 0 view .LVU726
 2661 074a 05F10409 		add	r9, r5, #4	@ _7, pxTCB,
 2662              	@ ../freertos/tasks.c:2201: 					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
ARM GAS  /tmp/ccGXytas.s 			page 155


2201:../freertos/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 2663              		.loc 1 2201 15 view .LVU727
 2664 074e 05F11800 		add	r0, r5, #24	@, pxTCB,
 2665 0752 FFF7FEFF 		bl	uxListRemove		@
 2666              	.LVL169:
2202:../freertos/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 2667              		.loc 1 2202 6 is_stmt 1 view .LVU728
 2668              	@ ../freertos/tasks.c:2202: 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2202:../freertos/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 2669              		.loc 1 2202 15 is_stmt 0 view .LVU729
 2670 0756 4846     		mov	r0, r9	@, _7
 2671 0758 FFF7FEFF 		bl	uxListRemove		@
 2672              	.LVL170:
2203:../freertos/tasks.c **** 
 2673              		.loc 1 2203 6 is_stmt 1 view .LVU730
2203:../freertos/tasks.c **** 
 2674              		.loc 1 2203 6 view .LVU731
 2675 075c E86A     		ldr	r0, [r5, #44]	@ _8, pxTCB_43->uxPriority
 2676 075e A268     		ldr	r2, [r4, #8]	@ uxTopReadyPriority.59_10, uxTopReadyPriority
 2677 0760 06FA00F3 		lsl	r3, r6, r0	@ tmp144, tmp169, _8
 2678 0764 1343     		orrs	r3, r3, r2	@, _11, tmp144, uxTopReadyPriority.59_10
 2679 0766 4946     		mov	r1, r9	@, _7
 2680 0768 08FB0070 		mla	r0, r8, r0, r7	@, tmp171, _8, tmp170
 2681 076c A360     		str	r3, [r4, #8]	@ _11, uxTopReadyPriority
2203:../freertos/tasks.c **** 
 2682              		.loc 1 2203 6 view .LVU732
 2683 076e FFF7FEFF 		bl	vListInsertEnd		@
 2684              	.LVL171:
2203:../freertos/tasks.c **** 
 2685              		.loc 1 2203 36 discriminator 1 view .LVU733
2207:../freertos/tasks.c **** 					{
 2686              		.loc 1 2207 6 view .LVU734
 2687              	@ ../freertos/tasks.c:2207: 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
2207:../freertos/tasks.c **** 					{
 2688              		.loc 1 2207 43 is_stmt 0 view .LVU735
 2689 0772 6368     		ldr	r3, [r4, #4]	@ pxCurrentTCB.60_16, pxCurrentTCB
 2690              	@ ../freertos/tasks.c:2207: 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
2207:../freertos/tasks.c **** 					{
 2691              		.loc 1 2207 8 view .LVU736
 2692 0774 EA6A     		ldr	r2, [r5, #44]	@ pxTCB_43->uxPriority, pxTCB_43->uxPriority
 2693 0776 DB6A     		ldr	r3, [r3, #44]	@ pxCurrentTCB.60_16->uxPriority, pxCurrentTCB.60_16->uxPriority
 2694 0778 9A42     		cmp	r2, r3	@ pxTCB_43->uxPriority, pxCurrentTCB.60_16->uxPriority
 2695 077a 01D3     		bcc	.L175		@,
2209:../freertos/tasks.c **** 					}
 2696              		.loc 1 2209 7 is_stmt 1 view .LVU737
 2697              	@ ../freertos/tasks.c:2209: 						xYieldPending = pdTRUE;
2209:../freertos/tasks.c **** 					}
 2698              		.loc 1 2209 21 is_stmt 0 view .LVU738
 2699 077c C4F80061 		str	r6, [r4, #256]	@ tmp169, xYieldPending
 2700              	.LVL172:
 2701              	.L175:
2213:../freertos/tasks.c **** 					}
 2702              		.loc 1 2213 31 is_stmt 1 view .LVU739
2198:../freertos/tasks.c **** 				{
 2703              		.loc 1 2198 52 view .LVU740
 2704              	@ ../freertos/tasks.c:2198: 				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
2198:../freertos/tasks.c **** 				{
ARM GAS  /tmp/ccGXytas.s 			page 156


 2705              		.loc 1 2198 12 is_stmt 0 view .LVU741
 2706 0780 D4F8D430 		ldr	r3, [r4, #212]	@ _18, xPendingReadyList.uxNumberOfItems
 2707              	@ ../freertos/tasks.c:2198: 				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
2198:../freertos/tasks.c **** 				{
 2708              		.loc 1 2198 52 view .LVU742
 2709 0784 002B     		cmp	r3, #0	@ _18
 2710 0786 DDD1     		bne	.L178	@
2217:../freertos/tasks.c **** 				{
 2711              		.loc 1 2217 5 is_stmt 1 view .LVU743
 2712              	@ ../freertos/tasks.c:2217: 				if( pxTCB != NULL )
2217:../freertos/tasks.c **** 				{
 2713              		.loc 1 2217 7 is_stmt 0 view .LVU744
 2714 0788 0DB1     		cbz	r5, .L179	@ pxTCB,
2225:../freertos/tasks.c **** 				}
 2715              		.loc 1 2225 6 is_stmt 1 view .LVU745
 2716 078a FFF76FFC 		bl	prvResetNextTaskUnblockTime		@
 2717              	.LVL173:
 2718              	.L179:
 2719              	.LBB118:
2233:../freertos/tasks.c **** 
 2720              		.loc 1 2233 6 view .LVU746
 2721              	@ ../freertos/tasks.c:2233: 					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. 
2233:../freertos/tasks.c **** 
 2722              		.loc 1 2233 18 is_stmt 0 view .LVU747
 2723 078e D4F8FC50 		ldr	r5, [r4, #252]	@ uxPendedCounts, uxPendedTicks
 2724              	.LVL174:
2235:../freertos/tasks.c **** 					{
 2725              		.loc 1 2235 6 is_stmt 1 view .LVU748
 2726              	@ ../freertos/tasks.c:2235: 					if( uxPendedCounts > ( UBaseType_t ) 0U )
2235:../freertos/tasks.c **** 					{
 2727              		.loc 1 2235 8 is_stmt 0 view .LVU749
 2728 0792 4DB1     		cbz	r5, .L180	@ uxPendedCounts,
 2729              	@ ../freertos/tasks.c:2241: 								xYieldPending = pdTRUE;
2241:../freertos/tasks.c **** 							}
 2730              		.loc 1 2241 23 view .LVU750
 2731 0794 0126     		movs	r6, #1	@ tmp168,
 2732              	.L182:
2237:../freertos/tasks.c **** 						{
 2733              		.loc 1 2237 7 is_stmt 1 view .LVU751
2239:../freertos/tasks.c **** 							{
 2734              		.loc 1 2239 8 view .LVU752
 2735              	@ ../freertos/tasks.c:2239: 							if( xTaskIncrementTick() != pdFALSE )
2239:../freertos/tasks.c **** 							{
 2736              		.loc 1 2239 12 is_stmt 0 view .LVU753
 2737 0796 FFF7FEFF 		bl	xTaskIncrementTick		@
 2738              	.LVL175:
 2739              	@ ../freertos/tasks.c:2239: 							if( xTaskIncrementTick() != pdFALSE )
2239:../freertos/tasks.c **** 							{
 2740              		.loc 1 2239 10 discriminator 1 view .LVU754
 2741 079a 08B1     		cbz	r0, .L181	@ tmp172,
2241:../freertos/tasks.c **** 							}
 2742              		.loc 1 2241 9 is_stmt 1 view .LVU755
 2743              	@ ../freertos/tasks.c:2241: 								xYieldPending = pdTRUE;
2241:../freertos/tasks.c **** 							}
 2744              		.loc 1 2241 23 is_stmt 0 view .LVU756
 2745 079c C4F80061 		str	r6, [r4, #256]	@ tmp168, xYieldPending
 2746              	.L181:
ARM GAS  /tmp/ccGXytas.s 			page 157


2245:../freertos/tasks.c **** 							}
 2747              		.loc 1 2245 33 is_stmt 1 view .LVU757
2247:../freertos/tasks.c **** 						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 2748              		.loc 1 2247 8 view .LVU758
 2749              	.LVL176:
2248:../freertos/tasks.c **** 
 2750              		.loc 1 2248 31 view .LVU759
 2751 07a0 013D     		subs	r5, r5, #1	@ uxPendedCounts, uxPendedCounts,
 2752              	.LVL177:
2248:../freertos/tasks.c **** 
 2753              		.loc 1 2248 31 is_stmt 0 view .LVU760
 2754 07a2 F8D1     		bne	.L182		@,
2250:../freertos/tasks.c **** 					}
 2755              		.loc 1 2250 7 is_stmt 1 view .LVU761
 2756              	@ ../freertos/tasks.c:2250: 						uxPendedTicks = 0;
2250:../freertos/tasks.c **** 					}
 2757              		.loc 1 2250 21 is_stmt 0 view .LVU762
 2758 07a4 C4F8FC50 		str	r5, [r4, #252]	@ uxPendedCounts, uxPendedTicks
 2759              	.L180:
2254:../freertos/tasks.c **** 					}
 2760              		.loc 1 2254 31 is_stmt 1 view .LVU763
 2761              	.LBE118:
2258:../freertos/tasks.c **** 				{
 2762              		.loc 1 2258 5 view .LVU764
 2763              	@ ../freertos/tasks.c:2258: 				if( xYieldPending != pdFALSE )
2258:../freertos/tasks.c **** 				{
 2764              		.loc 1 2258 23 is_stmt 0 view .LVU765
 2765 07a8 D4F80031 		ldr	r3, [r4, #256]	@ xYieldPending.61_20, xYieldPending
 2766              	@ ../freertos/tasks.c:2258: 				if( xYieldPending != pdFALSE )
2258:../freertos/tasks.c **** 				{
 2767              		.loc 1 2258 7 view .LVU766
 2768 07ac 002B     		cmp	r3, #0	@ xYieldPending.61_20
 2769 07ae BAD0     		beq	.L176	@
2262:../freertos/tasks.c **** 					}
 2770              		.loc 1 2262 7 is_stmt 1 view .LVU767
 2771              	.LVL178:
2265:../freertos/tasks.c **** 				}
 2772              		.loc 1 2265 6 view .LVU768
 2773 07b0 4FF0E023 		mov	r3, #-536813568	@ tmp164,
 2774 07b4 4FF08052 		mov	r2, #268435456	@ tmp165,
 2775 07b8 C3F8042D 		str	r2, [r3, #3332]	@ tmp165, MEM[(volatile uint32_t *)3758157060B]
2265:../freertos/tasks.c **** 				}
 2776              		.loc 1 2265 6 view .LVU769
 2777              		.syntax unified
 2778              	@ 2265 "../freertos/tasks.c" 1
 2779 07bc BFF34F8F 		dsb	
 2780              	@ 0 "" 2
2265:../freertos/tasks.c **** 				}
 2781              		.loc 1 2265 6 view .LVU770
 2782              	@ 2265 "../freertos/tasks.c" 1
 2783 07c0 BFF36F8F 		isb
 2784              	@ 0 "" 2
2265:../freertos/tasks.c **** 				}
 2785              		.loc 1 2265 37 view .LVU771
 2786              	@ ../freertos/tasks.c:2262: 						xAlreadyYielded = pdTRUE;
2262:../freertos/tasks.c **** 					}
 2787              		.loc 1 2262 23 is_stmt 0 view .LVU772
ARM GAS  /tmp/ccGXytas.s 			page 158


 2788              		.thumb
 2789              		.syntax unified
 2790 07c4 0124     		movs	r4, #1	@ <retval>,
 2791 07c6 AFE7     		b	.L174		@
 2792              	.L198:
 2793              		.align	2
 2794              	.L197:
 2795 07c8 00000000 		.word	.LANCHOR0
 2796              		.cfi_endproc
 2797              	.LFE22:
 2798              		.size	xTaskResumeAll, .-xTaskResumeAll
 2799              		.align	1
 2800              		.global	vTaskDelayUntil
 2801              		.syntax unified
 2802              		.thumb
 2803              		.thumb_func
 2804              		.type	vTaskDelayUntil, %function
 2805              	vTaskDelayUntil:
 2806              	.LVL179:
 2807              	.LFB9:
1250:../freertos/tasks.c **** 	TickType_t xTimeToWake;
 2808              		.loc 1 1250 2 is_stmt 1 view -0
 2809              		.cfi_startproc
 2810              		@ args = 0, pretend = 0, frame = 0
 2811              		@ frame_needed = 0, uses_anonymous_args = 0
1251:../freertos/tasks.c **** 	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 2812              		.loc 1 1251 2 view .LVU774
1252:../freertos/tasks.c **** 
 2813              		.loc 1 1252 2 view .LVU775
1254:../freertos/tasks.c **** 		configASSERT( ( xTimeIncrement > 0U ) );
 2814              		.loc 1 1254 37 view .LVU776
1255:../freertos/tasks.c **** 		configASSERT( uxSchedulerSuspended == 0 );
 2815              		.loc 1 1255 42 view .LVU777
1256:../freertos/tasks.c **** 
 2816              		.loc 1 1256 44 view .LVU778
1258:../freertos/tasks.c **** 		{
 2817              		.loc 1 1258 3 view .LVU779
 2818              	@ ../freertos/tasks.c:1250: 	{
1250:../freertos/tasks.c **** 	TickType_t xTimeToWake;
 2819              		.loc 1 1250 2 is_stmt 0 view .LVU780
 2820 07cc 10B5     		push	{r4, lr}	@
 2821              	.LCFI24:
 2822              		.cfi_def_cfa_offset 8
 2823              		.cfi_offset 4, -8
 2824              		.cfi_offset 14, -4
 2825              	@ ../freertos/tasks.c:1258: 		vTaskSuspendAll();
1258:../freertos/tasks.c **** 		{
 2826              		.loc 1 1258 3 view .LVU781
 2827 07ce FFF7FEFF 		bl	vTaskSuspendAll		@
 2828              	.LVL180:
 2829              	.LBB119:
1262:../freertos/tasks.c **** 
 2830              		.loc 1 1262 4 is_stmt 1 view .LVU782
 2831              	@ ../freertos/tasks.c:1262: 			const TickType_t xConstTickCount = xTickCount;
1262:../freertos/tasks.c **** 
 2832              		.loc 1 1262 21 is_stmt 0 view .LVU783
 2833 07d2 114B     		ldr	r3, .L210	@ tmp124,
ARM GAS  /tmp/ccGXytas.s 			page 159


 2834              	@ ../freertos/tasks.c:1265: 			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
1265:../freertos/tasks.c **** 
 2835              		.loc 1 1265 18 view .LVU784
 2836 07d4 0468     		ldr	r4, [r0]	@ _1, *pxPreviousWakeTime_9(D)
 2837              	@ ../freertos/tasks.c:1262: 			const TickType_t xConstTickCount = xTickCount;
1262:../freertos/tasks.c **** 
 2838              		.loc 1 1262 21 view .LVU785
 2839 07d6 1A68     		ldr	r2, [r3]	@ xConstTickCount, xTickCount
 2840              	.LVL181:
1265:../freertos/tasks.c **** 
 2841              		.loc 1 1265 4 is_stmt 1 view .LVU786
 2842 07d8 6318     		adds	r3, r4, r1	@ tmp125, _1, xTimeIncrement
 2843 07da 2CBF     		ite	cs
 2844 07dc 0121     		movcs	r1, #1	@ _23,
 2845              	.LVL182:
1265:../freertos/tasks.c **** 
 2846              		.loc 1 1265 4 is_stmt 0 view .LVU787
 2847 07de 0021     		movcc	r1, #0	@ _23,
 2848              	.LVL183:
1267:../freertos/tasks.c **** 			{
 2849              		.loc 1 1267 4 is_stmt 1 view .LVU788
 2850              	@ ../freertos/tasks.c:1267: 			if( xConstTickCount < *pxPreviousWakeTime )
1267:../freertos/tasks.c **** 			{
 2851              		.loc 1 1267 6 is_stmt 0 view .LVU789
 2852 07e0 9442     		cmp	r4, r2	@ _1, xConstTickCount
 2853 07e2 0FD9     		bls	.L202		@,
1274:../freertos/tasks.c **** 				{
 2854              		.loc 1 1274 5 is_stmt 1 view .LVU790
 2855              	@ ../freertos/tasks.c:1274: 				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConst
1274:../freertos/tasks.c **** 				{
 2856              		.loc 1 1274 7 is_stmt 0 view .LVU791
 2857 07e4 79B9     		cbnz	r1, .L209	@ _23,
 2858              	.L207:
1299:../freertos/tasks.c **** 
 2859              		.loc 1 1299 4 is_stmt 1 view .LVU792
 2860              	@ ../freertos/tasks.c:1299: 			*pxPreviousWakeTime = xTimeToWake;
1299:../freertos/tasks.c **** 
 2861              		.loc 1 1299 24 is_stmt 0 view .LVU793
 2862 07e6 0360     		str	r3, [r0]	@ tmp125, *pxPreviousWakeTime_9(D)
1301:../freertos/tasks.c **** 			{
 2863              		.loc 1 1301 4 is_stmt 1 view .LVU794
 2864              	.LVL184:
 2865              	.L204:
1311:../freertos/tasks.c **** 			}
 2866              		.loc 1 1311 29 view .LVU795
 2867              	.LBE119:
1314:../freertos/tasks.c **** 
 2868              		.loc 1 1314 3 view .LVU796
 2869              	@ ../freertos/tasks.c:1314: 		xAlreadyYielded = xTaskResumeAll();
1314:../freertos/tasks.c **** 
 2870              		.loc 1 1314 21 is_stmt 0 view .LVU797
 2871 07e8 FFF7FEFF 		bl	xTaskResumeAll		@
 2872              	.LVL185:
1318:../freertos/tasks.c **** 		{
 2873              		.loc 1 1318 3 is_stmt 1 view .LVU798
 2874              	@ ../freertos/tasks.c:1318: 		if( xAlreadyYielded == pdFALSE )
1318:../freertos/tasks.c **** 		{
ARM GAS  /tmp/ccGXytas.s 			page 160


 2875              		.loc 1 1318 5 is_stmt 0 view .LVU799
 2876 07ec 48B9     		cbnz	r0, .L199	@ tmp131,
1320:../freertos/tasks.c **** 		}
 2877              		.loc 1 1320 4 is_stmt 1 view .LVU800
 2878 07ee 4FF0E023 		mov	r3, #-536813568	@ tmp127,
 2879 07f2 4FF08052 		mov	r2, #268435456	@ tmp128,
 2880 07f6 C3F8042D 		str	r2, [r3, #3332]	@ tmp128, MEM[(volatile uint32_t *)3758157060B]
1320:../freertos/tasks.c **** 		}
 2881              		.loc 1 1320 4 view .LVU801
 2882              		.syntax unified
 2883              	@ 1320 "../freertos/tasks.c" 1
 2884 07fa BFF34F8F 		dsb	
 2885              	@ 0 "" 2
1320:../freertos/tasks.c **** 		}
 2886              		.loc 1 1320 4 view .LVU802
 2887              	@ 1320 "../freertos/tasks.c" 1
 2888 07fe BFF36F8F 		isb
 2889              	@ 0 "" 2
1320:../freertos/tasks.c **** 		}
 2890              		.loc 1 1320 26 view .LVU803
1324:../freertos/tasks.c **** 		}
 2891              		.loc 1 1324 28 view .LVU804
 2892              		.thumb
 2893              		.syntax unified
 2894              	.L199:
 2895              	@ ../freertos/tasks.c:1326: 	}
1326:../freertos/tasks.c **** 
 2896              		.loc 1 1326 2 is_stmt 0 view .LVU805
 2897 0802 10BD     		pop	{r4, pc}	@
 2898              	.LVL186:
 2899              	.L202:
 2900              	.LBB120:
1288:../freertos/tasks.c **** 				{
 2901              		.loc 1 1288 5 is_stmt 1 view .LVU806
 2902              	@ ../freertos/tasks.c:1288: 				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConst
1288:../freertos/tasks.c **** 				{
 2903              		.loc 1 1288 7 is_stmt 0 view .LVU807
 2904 0804 09B9     		cbnz	r1, .L205	@ _23,
 2905              	.L209:
 2906              	@ ../freertos/tasks.c:1288: 				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConst
1288:../freertos/tasks.c **** 				{
 2907              		.loc 1 1288 47 discriminator 1 view .LVU808
 2908 0806 9A42     		cmp	r2, r3	@ xConstTickCount, tmp125
 2909 0808 EDD2     		bcs	.L207		@,
 2910              	.L205:
 2911              	.LVL187:
 2912              	@ ../freertos/tasks.c:1299: 			*pxPreviousWakeTime = xTimeToWake;
1299:../freertos/tasks.c **** 
 2913              		.loc 1 1299 24 view .LVU809
 2914 080a 0360     		str	r3, [r0]	@ tmp125, *pxPreviousWakeTime_9(D)
1303:../freertos/tasks.c **** 
 2915              		.loc 1 1303 41 is_stmt 1 view .LVU810
1307:../freertos/tasks.c **** 			}
 2916              		.loc 1 1307 5 view .LVU811
 2917 080c 0021     		movs	r1, #0	@,
 2918 080e 981A     		subs	r0, r3, r2	@, tmp125, xConstTickCount
 2919              	.LVL188:
ARM GAS  /tmp/ccGXytas.s 			page 161


1307:../freertos/tasks.c **** 			}
 2920              		.loc 1 1307 5 is_stmt 0 view .LVU812
 2921 0810 FFF7F6FB 		bl	prvAddCurrentTaskToDelayedList		@
 2922              	.LVL189:
1307:../freertos/tasks.c **** 			}
 2923              		.loc 1 1307 5 view .LVU813
 2924 0814 E8E7     		b	.L204		@
 2925              	.L211:
 2926 0816 00BF     		.align	2
 2927              	.L210:
 2928 0818 00000000 		.word	.LANCHOR0
 2929              	.LBE120:
 2930              		.cfi_endproc
 2931              	.LFE9:
 2932              		.size	vTaskDelayUntil, .-vTaskDelayUntil
 2933              		.align	1
 2934              		.global	vTaskDelay
 2935              		.syntax unified
 2936              		.thumb
 2937              		.thumb_func
 2938              		.type	vTaskDelay, %function
 2939              	vTaskDelay:
 2940              	.LVL190:
 2941              	.LFB10:
1334:../freertos/tasks.c **** 	BaseType_t xAlreadyYielded = pdFALSE;
 2942              		.loc 1 1334 2 is_stmt 1 view -0
 2943              		.cfi_startproc
 2944              		@ args = 0, pretend = 0, frame = 0
 2945              		@ frame_needed = 0, uses_anonymous_args = 0
1335:../freertos/tasks.c **** 
 2946              		.loc 1 1335 2 view .LVU815
1338:../freertos/tasks.c **** 		{
 2947              		.loc 1 1338 3 view .LVU816
 2948              	@ ../freertos/tasks.c:1334: 	{
1334:../freertos/tasks.c **** 	BaseType_t xAlreadyYielded = pdFALSE;
 2949              		.loc 1 1334 2 is_stmt 0 view .LVU817
 2950 081c 08B5     		push	{r3, lr}	@
 2951              	.LCFI25:
 2952              		.cfi_def_cfa_offset 8
 2953              		.cfi_offset 3, -8
 2954              		.cfi_offset 14, -4
 2955              	@ ../freertos/tasks.c:1338: 		if( xTicksToDelay > ( TickType_t ) 0U )
1338:../freertos/tasks.c **** 		{
 2956              		.loc 1 1338 5 view .LVU818
 2957 081e 50B9     		cbnz	r0, .L213	@ tmp118,
 2958              	.LVL191:
 2959              	.L215:
1365:../freertos/tasks.c **** 		}
 2960              		.loc 1 1365 4 is_stmt 1 view .LVU819
 2961 0820 4FF0E023 		mov	r3, #-536813568	@ tmp116,
 2962 0824 4FF08052 		mov	r2, #268435456	@ tmp117,
 2963 0828 C3F8042D 		str	r2, [r3, #3332]	@ tmp117, MEM[(volatile uint32_t *)3758157060B]
1365:../freertos/tasks.c **** 		}
 2964              		.loc 1 1365 4 view .LVU820
 2965              		.syntax unified
 2966              	@ 1365 "../freertos/tasks.c" 1
 2967 082c BFF34F8F 		dsb	
ARM GAS  /tmp/ccGXytas.s 			page 162


 2968              	@ 0 "" 2
1365:../freertos/tasks.c **** 		}
 2969              		.loc 1 1365 4 view .LVU821
 2970              	@ 1365 "../freertos/tasks.c" 1
 2971 0830 BFF36F8F 		isb
 2972              	@ 0 "" 2
1365:../freertos/tasks.c **** 		}
 2973              		.loc 1 1365 26 view .LVU822
 2974              		.thumb
 2975              		.syntax unified
 2976              	.L212:
 2977              	@ ../freertos/tasks.c:1371: 	}
1371:../freertos/tasks.c **** 
 2978              		.loc 1 1371 2 is_stmt 0 view .LVU823
 2979 0834 08BD     		pop	{r3, pc}	@
 2980              	.LVL192:
 2981              	.L213:
1340:../freertos/tasks.c **** 			vTaskSuspendAll();
 2982              		.loc 1 1340 45 is_stmt 1 view .LVU824
1341:../freertos/tasks.c **** 			{
 2983              		.loc 1 1341 4 view .LVU825
 2984              	@ ../freertos/tasks.c:1352: 				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
1352:../freertos/tasks.c **** 			}
 2985              		.loc 1 1352 5 is_stmt 0 view .LVU826
 2986 0836 0021     		movs	r1, #0	@,
 2987              	@ ../freertos/tasks.c:1341: 			vTaskSuspendAll();
1341:../freertos/tasks.c **** 			{
 2988              		.loc 1 1341 4 view .LVU827
 2989 0838 FFF7FEFF 		bl	vTaskSuspendAll		@
 2990              	.LVL193:
1343:../freertos/tasks.c **** 
 2991              		.loc 1 1343 22 is_stmt 1 view .LVU828
1352:../freertos/tasks.c **** 			}
 2992              		.loc 1 1352 5 view .LVU829
 2993 083c FFF7E0FB 		bl	prvAddCurrentTaskToDelayedList		@
 2994              	.LVL194:
1354:../freertos/tasks.c **** 		}
 2995              		.loc 1 1354 4 view .LVU830
 2996              	@ ../freertos/tasks.c:1354: 			xAlreadyYielded = xTaskResumeAll();
1354:../freertos/tasks.c **** 		}
 2997              		.loc 1 1354 22 is_stmt 0 view .LVU831
 2998 0840 FFF7FEFF 		bl	xTaskResumeAll		@
 2999              	.LVL195:
1358:../freertos/tasks.c **** 		}
 3000              		.loc 1 1358 28 is_stmt 1 view .LVU832
1363:../freertos/tasks.c **** 		{
 3001              		.loc 1 1363 3 view .LVU833
 3002              	@ ../freertos/tasks.c:1363: 		if( xAlreadyYielded == pdFALSE )
1363:../freertos/tasks.c **** 		{
 3003              		.loc 1 1363 5 is_stmt 0 view .LVU834
 3004 0844 0028     		cmp	r0, #0	@ tmp119
 3005 0846 EBD0     		beq	.L215	@
 3006 0848 F4E7     		b	.L212		@
 3007              		.cfi_endproc
 3008              	.LFE10:
 3009              		.size	vTaskDelay, .-vTaskDelay
 3010              		.align	1
ARM GAS  /tmp/ccGXytas.s 			page 163


 3011              		.global	vTaskSwitchContext
 3012              		.syntax unified
 3013              		.thumb
 3014              		.thumb_func
 3015              		.type	vTaskSwitchContext, %function
 3016              	vTaskSwitchContext:
 3017              	.LFB29:
2948:../freertos/tasks.c **** 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 3018              		.loc 1 2948 1 is_stmt 1 view -0
 3019              		.cfi_startproc
 3020              		@ args = 0, pretend = 0, frame = 0
 3021              		@ frame_needed = 0, uses_anonymous_args = 0
2949:../freertos/tasks.c **** 	{
 3022              		.loc 1 2949 2 view .LVU836
 3023              	@ ../freertos/tasks.c:2949: 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
2949:../freertos/tasks.c **** 	{
 3024              		.loc 1 2949 27 is_stmt 0 view .LVU837
 3025 084a 124A     		ldr	r2, .L223	@ tmp127,
 3026              	@ ../freertos/tasks.c:2948: {
2948:../freertos/tasks.c **** 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 3027              		.loc 1 2948 1 view .LVU838
 3028 084c 30B5     		push	{r4, r5, lr}	@
 3029              	.LCFI26:
 3030              		.cfi_def_cfa_offset 12
 3031              		.cfi_offset 4, -12
 3032              		.cfi_offset 5, -8
 3033              		.cfi_offset 14, -4
 3034              	@ ../freertos/tasks.c:2949: 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
2949:../freertos/tasks.c **** 	{
 3035              		.loc 1 2949 27 view .LVU839
 3036 084e D2F8F030 		ldr	r3, [r2, #240]	@ uxSchedulerSuspended.78_1, uxSchedulerSuspended
 3037              	@ ../freertos/tasks.c:2949: 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
2949:../freertos/tasks.c **** 	{
 3038              		.loc 1 2949 4 view .LVU840
 3039 0852 1BB1     		cbz	r3, .L220	@ uxSchedulerSuspended.78_1,
2953:../freertos/tasks.c **** 	}
 3040              		.loc 1 2953 3 is_stmt 1 view .LVU841
 3041              	@ ../freertos/tasks.c:2953: 		xYieldPending = pdTRUE;
2953:../freertos/tasks.c **** 	}
 3042              		.loc 1 2953 17 is_stmt 0 view .LVU842
 3043 0854 0123     		movs	r3, #1	@ tmp129,
 3044 0856 C2F80031 		str	r3, [r2, #256]	@ tmp129, xYieldPending
 3045              	.L219:
 3046              	@ ../freertos/tasks.c:3017: }
3017:../freertos/tasks.c **** /*-----------------------------------------------------------*/
 3047              		.loc 1 3017 1 view .LVU843
 3048 085a 30BD     		pop	{r4, r5, pc}	@
 3049              	.L220:
 3050              	.LBB127:
 3051              	.LBI127:
2947:../freertos/tasks.c **** {
 3052              		.loc 1 2947 6 is_stmt 1 view .LVU844
 3053              	.LBB128:
2957:../freertos/tasks.c **** 		traceTASK_SWITCHED_OUT();
 3054              		.loc 1 2957 3 view .LVU845
 3055              	@ ../freertos/tasks.c:2957: 		xYieldPending = pdFALSE;
2957:../freertos/tasks.c **** 		traceTASK_SWITCHED_OUT();
ARM GAS  /tmp/ccGXytas.s 			page 164


 3056              		.loc 1 2957 17 is_stmt 0 view .LVU846
 3057 085c C2F80031 		str	r3, [r2, #256]	@ uxSchedulerSuspended.78_1, xYieldPending
2958:../freertos/tasks.c **** 
 3058              		.loc 1 2958 27 is_stmt 1 view .LVU847
2988:../freertos/tasks.c **** 
 3059              		.loc 1 2988 33 view .LVU848
 3060              	.LBB129:
2999:../freertos/tasks.c **** 		traceTASK_SWITCHED_IN();
 3061              		.loc 1 2999 3 view .LVU849
2999:../freertos/tasks.c **** 		traceTASK_SWITCHED_IN();
 3062              		.loc 1 2999 3 view .LVU850
 3063 0860 9368     		ldr	r3, [r2, #8]	@ uxTopReadyPriority.79_6, uxTopReadyPriority
 3064              	.LVL196:
 3065              	.LBB130:
 3066              	.LBI130:
 130:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	{
 3067              		.loc 2 130 59 view .LVU851
 3068              	.LBB131:
 132:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 
 3069              		.loc 2 132 2 view .LVU852
 134:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 		return ucReturn;
 3070              		.loc 2 134 3 view .LVU853
 3071              		.syntax unified
 3072              	@ 134 "../freertos/portable/GCC/ARM_CM3/portmacro.h" 1
 3073 0862 B3FA83F3 		clz r3, r3	@ ucReturn, uxTopReadyPriority.79_6
 3074              	@ 0 "" 2
 3075              	.LVL197:
 134:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 		return ucReturn;
 3076              		.loc 2 134 3 is_stmt 0 view .LVU854
 3077              		.thumb
 3078              		.syntax unified
 3079              	.LBE131:
 3080              	.LBE130:
 3081              	.LBB133:
 3082              	@ ../freertos/tasks.c:2999: 		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as t
2999:../freertos/tasks.c **** 		traceTASK_SWITCHED_IN();
 3083              		.loc 1 2999 3 discriminator 1 view .LVU855
 3084 0866 1425     		movs	r5, #20	@ tmp136,
 3085              	.LBE133:
 3086              	.LBB134:
 3087              	.LBB132:
 3088              	@ ../freertos/portable/GCC/ARM_CM3/portmacro.h:134: 		__asm volatile ( "clz %0, %1" : "=r" ( ucRetu
 134:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 		return ucReturn;
 3089              		.loc 2 134 3 view .LVU856
 3090 0868 DBB2     		uxtb	r3, r3	@ ucReturn, ucReturn
 3091              	.LVL198:
 135:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	}
 3092              		.loc 2 135 3 is_stmt 1 view .LVU857
 135:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	}
 3093              		.loc 2 135 3 is_stmt 0 view .LVU858
 3094              	.LBE132:
 3095              	.LBE134:
 3096              	@ ../freertos/tasks.c:2999: 		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as t
2999:../freertos/tasks.c **** 		traceTASK_SWITCHED_IN();
 3097              		.loc 1 2999 3 discriminator 1 view .LVU859
 3098 086a C3F11F03 		rsb	r3, r3, #31	@ uxTopPriority, ucReturn,
 3099              	.LVL199:
ARM GAS  /tmp/ccGXytas.s 			page 165


2999:../freertos/tasks.c **** 		traceTASK_SWITCHED_IN();
 3100              		.loc 1 2999 3 is_stmt 1 discriminator 1 view .LVU860
 3101              	.LBB135:
2999:../freertos/tasks.c **** 		traceTASK_SWITCHED_IN();
 3102              		.loc 1 2999 3 discriminator 1 view .LVU861
2999:../freertos/tasks.c **** 		traceTASK_SWITCHED_IN();
 3103              		.loc 1 2999 3 discriminator 1 view .LVU862
 3104 086e 05FB03F1 		mul	r1, r5, r3	@ tmp135, tmp136, uxTopPriority
 3105 0872 5018     		adds	r0, r2, r1	@ tmp137, tmp127, tmp135
 3106 0874 0146     		mov	r1, r0	@ tmp149, tmp137
 3107 0876 C46C     		ldr	r4, [r0, #76]	@ MEM <struct List_t[5]> [(struct List_t *)&pxReadyTasksLists][uxTopPriority_9].
 3108 0878 5031     		adds	r1, r1, #80	@ tmp150, tmp149,
 3109 087a 6468     		ldr	r4, [r4, #4]	@ _11, _10->pxNext
 3110              	@ ../freertos/tasks.c:2999: 		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as t
2999:../freertos/tasks.c **** 		traceTASK_SWITCHED_IN();
 3111              		.loc 1 2999 3 is_stmt 0 discriminator 3 view .LVU863
 3112 087c 05FB0323 		mla	r3, r5, r3, r2	@ tmp160, tmp136, uxTopPriority, tmp127
 3113              	.LVL200:
 3114              	@ ../freertos/tasks.c:2999: 		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as t
2999:../freertos/tasks.c **** 		traceTASK_SWITCHED_IN();
 3115              		.loc 1 2999 3 discriminator 1 view .LVU864
 3116 0880 8C42     		cmp	r4, r1	@ _11, tmp150
 3117 0882 08BF     		it	eq
 3118 0884 6168     		ldreq	r1, [r4, #4]	@ MEM[(struct ListItem_t *)_11].pxNext, MEM[(struct ListItem_t *)_11].pxNext
 3119 0886 C464     		str	r4, [r0, #76]	@ _11, MEM <struct List_t[5]> [(struct List_t *)&pxReadyTasksLists][uxTopPriorit
2999:../freertos/tasks.c **** 		traceTASK_SWITCHED_IN();
 3120              		.loc 1 2999 3 is_stmt 1 discriminator 1 view .LVU865
2999:../freertos/tasks.c **** 		traceTASK_SWITCHED_IN();
 3121              		.loc 1 2999 3 discriminator 1 view .LVU866
 3122 0888 08BF     		it	eq
 3123 088a C164     		streq	r1, [r0, #76]	@ MEM[(struct ListItem_t *)_11].pxNext, MEM <struct List_t[5]> [(struct List_t
2999:../freertos/tasks.c **** 		traceTASK_SWITCHED_IN();
 3124              		.loc 1 2999 3 discriminator 3 view .LVU867
 3125 088c DB6C     		ldr	r3, [r3, #76]	@ MEM <struct List_t[5]> [(struct List_t *)&pxReadyTasksLists][uxTopPriority_9].
 3126 088e DB68     		ldr	r3, [r3, #12]	@ _15, _14->pvOwner
 3127 0890 5360     		str	r3, [r2, #4]	@ _15, pxCurrentTCB
 3128              	.LBE135:
2999:../freertos/tasks.c **** 		traceTASK_SWITCHED_IN();
 3129              		.loc 1 2999 3 discriminator 4 view .LVU868
 3130              	.LBE129:
2999:../freertos/tasks.c **** 		traceTASK_SWITCHED_IN();
 3131              		.loc 1 2999 37 discriminator 4 view .LVU869
3000:../freertos/tasks.c **** 
 3132              		.loc 1 3000 26 view .LVU870
 3133              	.LVL201:
3000:../freertos/tasks.c **** 
 3134              		.loc 1 3000 26 is_stmt 0 view .LVU871
 3135              	.LBE128:
 3136              	.LBE127:
2999:../freertos/tasks.c **** 		traceTASK_SWITCHED_IN();
 3137              		.loc 1 2999 3 is_stmt 1 discriminator 4 view .LVU872
2999:../freertos/tasks.c **** 		traceTASK_SWITCHED_IN();
 3138              		.loc 1 2999 37 discriminator 4 view .LVU873
3000:../freertos/tasks.c **** 
 3139              		.loc 1 3000 26 view .LVU874
 3140              	@ ../freertos/tasks.c:3017: }
3017:../freertos/tasks.c **** /*-----------------------------------------------------------*/
ARM GAS  /tmp/ccGXytas.s 			page 166


 3141              		.loc 1 3017 1 is_stmt 0 view .LVU875
 3142 0892 E2E7     		b	.L219		@
 3143              	.L224:
 3144              		.align	2
 3145              	.L223:
 3146 0894 00000000 		.word	.LANCHOR0
 3147              		.cfi_endproc
 3148              	.LFE29:
 3149              		.size	vTaskSwitchContext, .-vTaskSwitchContext
 3150              		.align	1
 3151              		.global	vTaskSuspend
 3152              		.syntax unified
 3153              		.thumb
 3154              		.thumb_func
 3155              		.type	vTaskSuspend, %function
 3156              	vTaskSuspend:
 3157              	.LVL202:
 3158              	.LFB15:
1697:../freertos/tasks.c **** 	TCB_t *pxTCB;
 3159              		.loc 1 1697 2 is_stmt 1 view -0
 3160              		.cfi_startproc
 3161              		@ args = 0, pretend = 0, frame = 0
 3162              		@ frame_needed = 0, uses_anonymous_args = 0
1698:../freertos/tasks.c **** 
 3163              		.loc 1 1698 2 view .LVU877
1700:../freertos/tasks.c **** 		{
 3164              		.loc 1 1700 3 view .LVU878
 3165              	@ ../freertos/tasks.c:1697: 	{
1697:../freertos/tasks.c **** 	TCB_t *pxTCB;
 3166              		.loc 1 1697 2 is_stmt 0 view .LVU879
 3167 0898 70B5     		push	{r4, r5, r6, lr}	@
 3168              	.LCFI27:
 3169              		.cfi_def_cfa_offset 16
 3170              		.cfi_offset 4, -16
 3171              		.cfi_offset 5, -12
 3172              		.cfi_offset 6, -8
 3173              		.cfi_offset 14, -4
 3174              	@ ../freertos/tasks.c:1697: 	{
1697:../freertos/tasks.c **** 	TCB_t *pxTCB;
 3175              		.loc 1 1697 2 view .LVU880
 3176 089a 0446     		mov	r4, r0	@ xTaskToSuspend, tmp161
 3177 089c 264D     		ldr	r5, .L240	@ tmp160,
 3178              	@ ../freertos/tasks.c:1700: 		taskENTER_CRITICAL();
1700:../freertos/tasks.c **** 		{
 3179              		.loc 1 1700 3 view .LVU881
 3180 089e FFF7FEFF 		bl	vPortEnterCritical		@
 3181              	.LVL203:
1704:../freertos/tasks.c **** 
 3182              		.loc 1 1704 4 is_stmt 1 view .LVU882
 3183              	@ ../freertos/tasks.c:1704: 			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
1704:../freertos/tasks.c **** 
 3184              		.loc 1 1704 12 is_stmt 0 view .LVU883
 3185 08a2 04B9     		cbnz	r4, .L226	@ xTaskToSuspend,
 3186              	@ ../freertos/tasks.c:1704: 			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
1704:../freertos/tasks.c **** 
 3187              		.loc 1 1704 12 discriminator 1 view .LVU884
 3188 08a4 6C68     		ldr	r4, [r5, #4]	@ xTaskToSuspend, pxCurrentTCB
ARM GAS  /tmp/ccGXytas.s 			page 167


 3189              	.LVL204:
 3190              	.L226:
1706:../freertos/tasks.c **** 
 3191              		.loc 1 1706 30 is_stmt 1 view .LVU885
1710:../freertos/tasks.c **** 			{
 3192              		.loc 1 1710 4 view .LVU886
 3193              	@ ../freertos/tasks.c:1710: 			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 
1710:../freertos/tasks.c **** 			{
 3194              		.loc 1 1710 8 is_stmt 0 view .LVU887
 3195 08a6 261D     		adds	r6, r4, #4	@ _1, xTaskToSuspend,
 3196 08a8 3046     		mov	r0, r6	@, _1
 3197 08aa FFF7FEFF 		bl	uxListRemove		@
 3198              	.LVL205:
 3199              	@ ../freertos/tasks.c:1710: 			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 
1710:../freertos/tasks.c **** 			{
 3200              		.loc 1 1710 6 discriminator 1 view .LVU888
 3201 08ae 58B9     		cbnz	r0, .L227	@ tmp162,
1712:../freertos/tasks.c **** 			}
 3202              		.loc 1 1712 5 is_stmt 1 view .LVU889
 3203 08b0 1423     		movs	r3, #20	@ tmp134,
 3204 08b2 E16A     		ldr	r1, [r4, #44]	@ _3, iftmp.40_17->uxPriority
 3205 08b4 03FB0153 		mla	r3, r3, r1, r5	@ tmp135, tmp134, _3, tmp160
 3206 08b8 9B6C     		ldr	r3, [r3, #72]	@ _4, pxReadyTasksLists[_3].uxNumberOfItems
 3207 08ba 2BB9     		cbnz	r3, .L227	@ _4,
1712:../freertos/tasks.c **** 			}
 3208              		.loc 1 1712 5 discriminator 1 view .LVU890
 3209 08bc 0122     		movs	r2, #1	@ tmp139,
 3210 08be AB68     		ldr	r3, [r5, #8]	@ uxTopReadyPriority.41_7, uxTopReadyPriority
 3211 08c0 8A40     		lsls	r2, r2, r1	@ tmp138, tmp139, _3
 3212 08c2 23EA0203 		bic	r3, r3, r2	@ _8, uxTopReadyPriority.41_7, tmp138
 3213 08c6 AB60     		str	r3, [r5, #8]	@ _8, uxTopReadyPriority
 3214              	.L227:
1716:../freertos/tasks.c **** 			}
 3215              		.loc 1 1716 29 view .LVU891
1720:../freertos/tasks.c **** 			{
 3216              		.loc 1 1720 4 view .LVU892
 3217              	@ ../freertos/tasks.c:1720: 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1720:../freertos/tasks.c **** 			{
 3218              		.loc 1 1720 6 is_stmt 0 view .LVU893
 3219 08c8 A36A     		ldr	r3, [r4, #40]	@ iftmp.40_17->xEventListItem.pvContainer, iftmp.40_17->xEventListItem.pvContain
 3220 08ca 1BB1     		cbz	r3, .L228	@ iftmp.40_17->xEventListItem.pvContainer,
1722:../freertos/tasks.c **** 			}
 3221              		.loc 1 1722 5 is_stmt 1 view .LVU894
 3222              	@ ../freertos/tasks.c:1722: 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1722:../freertos/tasks.c **** 			}
 3223              		.loc 1 1722 14 is_stmt 0 view .LVU895
 3224 08cc 04F11800 		add	r0, r4, #24	@, xTaskToSuspend,
 3225 08d0 FFF7FEFF 		bl	uxListRemove		@
 3226              	.LVL206:
 3227              	.L228:
1726:../freertos/tasks.c **** 			}
 3228              		.loc 1 1726 29 is_stmt 1 view .LVU896
1729:../freertos/tasks.c **** 
 3229              		.loc 1 1729 4 view .LVU897
 3230 08d4 3146     		mov	r1, r6	@, _1
 3231 08d6 1948     		ldr	r0, .L240+4	@,
 3232 08d8 FFF7FEFF 		bl	vListInsertEnd		@
ARM GAS  /tmp/ccGXytas.s 			page 168


 3233              	.LVL207:
1733:../freertos/tasks.c **** 				{
 3234              		.loc 1 1733 5 view .LVU898
 3235              	@ ../freertos/tasks.c:1733: 				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
1733:../freertos/tasks.c **** 				{
 3236              		.loc 1 1733 14 is_stmt 0 view .LVU899
 3237 08dc 94F85830 		ldrb	r3, [r4, #88]	@ zero_extendqisi2	@ iftmp.40_17->ucNotifyState, iftmp.40_17->ucNotifyState
 3238              	@ ../freertos/tasks.c:1733: 				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
1733:../freertos/tasks.c **** 				{
 3239              		.loc 1 1733 7 view .LVU900
 3240 08e0 012B     		cmp	r3, #1	@ iftmp.40_17->ucNotifyState,
1737:../freertos/tasks.c **** 				}
 3241              		.loc 1 1737 6 is_stmt 1 view .LVU901
 3242              	@ ../freertos/tasks.c:1737: 					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
1737:../freertos/tasks.c **** 				}
 3243              		.loc 1 1737 27 is_stmt 0 view .LVU902
 3244 08e2 04BF     		itt	eq
 3245 08e4 0023     		moveq	r3, #0	@ tmp149,
 3246 08e6 84F85830 		strbeq	r3, [r4, #88]	@ tmp149, iftmp.40_17->ucNotifyState
1742:../freertos/tasks.c **** 
 3247              		.loc 1 1742 3 is_stmt 1 view .LVU903
 3248 08ea FFF7FEFF 		bl	vPortExitCritical		@
 3249              	.LVL208:
1744:../freertos/tasks.c **** 		{
 3250              		.loc 1 1744 3 view .LVU904
 3251              	@ ../freertos/tasks.c:1744: 		if( xSchedulerRunning != pdFALSE )
1744:../freertos/tasks.c **** 		{
 3252              		.loc 1 1744 25 is_stmt 0 view .LVU905
 3253 08ee D5F8E830 		ldr	r3, [r5, #232]	@ xSchedulerRunning.42_12, xSchedulerRunning
 3254              	@ ../freertos/tasks.c:1744: 		if( xSchedulerRunning != pdFALSE )
1744:../freertos/tasks.c **** 		{
 3255              		.loc 1 1744 5 view .LVU906
 3256 08f2 2BB1     		cbz	r3, .L230	@ xSchedulerRunning.42_12,
1748:../freertos/tasks.c **** 			{
 3257              		.loc 1 1748 4 is_stmt 1 view .LVU907
 3258 08f4 FFF7FEFF 		bl	vPortEnterCritical		@
 3259              	.LVL209:
1750:../freertos/tasks.c **** 			}
 3260              		.loc 1 1750 5 view .LVU908
 3261 08f8 FFF7B8FB 		bl	prvResetNextTaskUnblockTime		@
 3262              	.LVL210:
1752:../freertos/tasks.c **** 		}
 3263              		.loc 1 1752 4 view .LVU909
 3264 08fc FFF7FEFF 		bl	vPortExitCritical		@
 3265              	.LVL211:
 3266              	.L230:
1756:../freertos/tasks.c **** 		}
 3267              		.loc 1 1756 28 view .LVU910
1759:../freertos/tasks.c **** 		{
 3268              		.loc 1 1759 3 view .LVU911
 3269              	@ ../freertos/tasks.c:1759: 		if( pxTCB == pxCurrentTCB )
1759:../freertos/tasks.c **** 		{
 3270              		.loc 1 1759 13 is_stmt 0 view .LVU912
 3271 0900 6B68     		ldr	r3, [r5, #4]	@ pxCurrentTCB.43_13, pxCurrentTCB
 3272              	@ ../freertos/tasks.c:1759: 		if( pxTCB == pxCurrentTCB )
1759:../freertos/tasks.c **** 		{
 3273              		.loc 1 1759 5 view .LVU913
ARM GAS  /tmp/ccGXytas.s 			page 169


 3274 0902 A342     		cmp	r3, r4	@ pxCurrentTCB.43_13, xTaskToSuspend
 3275 0904 0CD1     		bne	.L225		@,
1761:../freertos/tasks.c **** 			{
 3276              		.loc 1 1761 4 is_stmt 1 view .LVU914
 3277              	@ ../freertos/tasks.c:1761: 			if( xSchedulerRunning != pdFALSE )
1761:../freertos/tasks.c **** 			{
 3278              		.loc 1 1761 26 is_stmt 0 view .LVU915
 3279 0906 D5F8E830 		ldr	r3, [r5, #232]	@ xSchedulerRunning.44_14, xSchedulerRunning
 3280              	@ ../freertos/tasks.c:1761: 			if( xSchedulerRunning != pdFALSE )
1761:../freertos/tasks.c **** 			{
 3281              		.loc 1 1761 6 view .LVU916
 3282 090a 53B1     		cbz	r3, .L232	@ xSchedulerRunning.44_14,
1764:../freertos/tasks.c **** 				portYIELD_WITHIN_API();
 3283              		.loc 1 1764 46 is_stmt 1 view .LVU917
1765:../freertos/tasks.c **** 			}
 3284              		.loc 1 1765 5 view .LVU918
 3285 090c 4FF0E023 		mov	r3, #-536813568	@ tmp154,
 3286 0910 4FF08052 		mov	r2, #268435456	@ tmp155,
 3287 0914 C3F8042D 		str	r2, [r3, #3332]	@ tmp155, MEM[(volatile uint32_t *)3758157060B]
1765:../freertos/tasks.c **** 			}
 3288              		.loc 1 1765 5 view .LVU919
 3289              		.syntax unified
 3290              	@ 1765 "../freertos/tasks.c" 1
 3291 0918 BFF34F8F 		dsb	
 3292              	@ 0 "" 2
1765:../freertos/tasks.c **** 			}
 3293              		.loc 1 1765 5 view .LVU920
 3294              	@ 1765 "../freertos/tasks.c" 1
 3295 091c BFF36F8F 		isb
 3296              	@ 0 "" 2
1765:../freertos/tasks.c **** 			}
 3297              		.loc 1 1765 27 view .LVU921
 3298              		.thumb
 3299              		.syntax unified
 3300              	.L225:
 3301              	@ ../freertos/tasks.c:1790: 	}
1790:../freertos/tasks.c **** 
 3302              		.loc 1 1790 2 is_stmt 0 view .LVU922
 3303 0920 70BD     		pop	{r4, r5, r6, pc}	@
 3304              	.LVL212:
 3305              	.L232:
1772:../freertos/tasks.c **** 				{
 3306              		.loc 1 1772 5 is_stmt 1 view .LVU923
 3307              	@ ../freertos/tasks.c:1772: 				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumb
1772:../freertos/tasks.c **** 				{
 3308              		.loc 1 1772 9 is_stmt 0 view .LVU924
 3309 0922 E968     		ldr	r1, [r5, #12]	@ _15, xSuspendedTaskList.uxNumberOfItems
 3310              	@ ../freertos/tasks.c:1772: 				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumb
1772:../freertos/tasks.c **** 				{
 3311              		.loc 1 1772 56 view .LVU925
 3312 0924 2A6C     		ldr	r2, [r5, #64]	@ uxCurrentNumberOfTasks.45_16, uxCurrentNumberOfTasks
 3313              	@ ../freertos/tasks.c:1772: 				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumb
1772:../freertos/tasks.c **** 				{
 3314              		.loc 1 1772 7 view .LVU926
 3315 0926 9142     		cmp	r1, r2	@ _15, uxCurrentNumberOfTasks.45_16
 3316 0928 01D1     		bne	.L233		@,
1778:../freertos/tasks.c **** 				}
ARM GAS  /tmp/ccGXytas.s 			page 170


 3317              		.loc 1 1778 6 is_stmt 1 view .LVU927
 3318              	@ ../freertos/tasks.c:1778: 					pxCurrentTCB = NULL;
1778:../freertos/tasks.c **** 				}
 3319              		.loc 1 1778 19 is_stmt 0 view .LVU928
 3320 092a 6B60     		str	r3, [r5, #4]	@ xSchedulerRunning.44_14, pxCurrentTCB
 3321 092c F8E7     		b	.L225		@
 3322              	.L233:
1782:../freertos/tasks.c **** 				}
 3323              		.loc 1 1782 6 is_stmt 1 view .LVU929
 3324              	@ ../freertos/tasks.c:1790: 	}
1790:../freertos/tasks.c **** 
 3325              		.loc 1 1790 2 is_stmt 0 view .LVU930
 3326 092e BDE87040 		pop	{r4, r5, r6, lr}	@
 3327              	.LCFI28:
 3328              		.cfi_restore 14
 3329              		.cfi_restore 6
 3330              		.cfi_restore 5
 3331              		.cfi_restore 4
 3332              		.cfi_def_cfa_offset 0
 3333              	.LVL213:
 3334              	@ ../freertos/tasks.c:1782: 					vTaskSwitchContext();
1782:../freertos/tasks.c **** 				}
 3335              		.loc 1 1782 6 view .LVU931
 3336 0932 FFF7FEBF 		b	vTaskSwitchContext		@
 3337              	.LVL214:
 3338              	.L241:
 3339 0936 00BF     		.align	2
 3340              	.L240:
 3341 0938 00000000 		.word	.LANCHOR0
 3342 093c 0C000000 		.word	.LANCHOR0+12
 3343              		.cfi_endproc
 3344              	.LFE15:
 3345              		.size	vTaskSuspend, .-vTaskSuspend
 3346              		.align	1
 3347              		.global	vTaskPlaceOnEventList
 3348              		.syntax unified
 3349              		.thumb
 3350              		.thumb_func
 3351              		.type	vTaskPlaceOnEventList, %function
 3352              	vTaskPlaceOnEventList:
 3353              	.LVL215:
 3354              	.LFB30:
3021:../freertos/tasks.c **** 	configASSERT( pxEventList );
 3355              		.loc 1 3021 1 is_stmt 1 view -0
 3356              		.cfi_startproc
 3357              		@ args = 0, pretend = 0, frame = 0
 3358              		@ frame_needed = 0, uses_anonymous_args = 0
3022:../freertos/tasks.c **** 
 3359              		.loc 1 3022 29 view .LVU933
3031:../freertos/tasks.c **** 
 3360              		.loc 1 3031 2 view .LVU934
 3361              	@ ../freertos/tasks.c:3021: {
3021:../freertos/tasks.c **** 	configASSERT( pxEventList );
 3362              		.loc 1 3021 1 is_stmt 0 view .LVU935
 3363 0940 10B5     		push	{r4, lr}	@
 3364              	.LCFI29:
 3365              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/ccGXytas.s 			page 171


 3366              		.cfi_offset 4, -8
 3367              		.cfi_offset 14, -4
 3368              	@ ../freertos/tasks.c:3021: {
3021:../freertos/tasks.c **** 	configASSERT( pxEventList );
 3369              		.loc 1 3021 1 view .LVU936
 3370 0942 0C46     		mov	r4, r1	@ xTicksToWait, tmp120
 3371              	@ ../freertos/tasks.c:3031: 	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
3031:../freertos/tasks.c **** 
 3372              		.loc 1 3031 43 view .LVU937
 3373 0944 054B     		ldr	r3, .L243	@ tmp118,
 3374 0946 5968     		ldr	r1, [r3, #4]	@ pxCurrentTCB.80_1, pxCurrentTCB
 3375              	.LVL216:
 3376              	@ ../freertos/tasks.c:3031: 	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
3031:../freertos/tasks.c **** 
 3377              		.loc 1 3031 2 view .LVU938
 3378 0948 1831     		adds	r1, r1, #24	@, pxCurrentTCB.80_1,
 3379 094a FFF7FEFF 		bl	vListInsert		@
 3380              	.LVL217:
3033:../freertos/tasks.c **** }
 3381              		.loc 1 3033 2 is_stmt 1 view .LVU939
 3382 094e 2046     		mov	r0, r4	@, xTicksToWait
 3383              	@ ../freertos/tasks.c:3034: }
3034:../freertos/tasks.c **** /*-----------------------------------------------------------*/
 3384              		.loc 1 3034 1 is_stmt 0 view .LVU940
 3385 0950 BDE81040 		pop	{r4, lr}	@
 3386              	.LCFI30:
 3387              		.cfi_restore 14
 3388              		.cfi_restore 4
 3389              		.cfi_def_cfa_offset 0
 3390              	.LVL218:
 3391              	@ ../freertos/tasks.c:3033: 	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
3033:../freertos/tasks.c **** }
 3392              		.loc 1 3033 2 view .LVU941
 3393 0954 0121     		movs	r1, #1	@,
 3394 0956 FFF753BB 		b	prvAddCurrentTaskToDelayedList		@
 3395              	.LVL219:
 3396              	.L244:
3033:../freertos/tasks.c **** }
 3397              		.loc 1 3033 2 view .LVU942
 3398 095a 00BF     		.align	2
 3399              	.L243:
 3400 095c 00000000 		.word	.LANCHOR0
 3401              		.cfi_endproc
 3402              	.LFE30:
 3403              		.size	vTaskPlaceOnEventList, .-vTaskPlaceOnEventList
 3404              		.align	1
 3405              		.global	vTaskPlaceOnUnorderedEventList
 3406              		.syntax unified
 3407              		.thumb
 3408              		.thumb_func
 3409              		.type	vTaskPlaceOnUnorderedEventList, %function
 3410              	vTaskPlaceOnUnorderedEventList:
 3411              	.LVL220:
 3412              	.LFB31:
3038:../freertos/tasks.c **** 	configASSERT( pxEventList );
 3413              		.loc 1 3038 1 is_stmt 1 view -0
 3414              		.cfi_startproc
ARM GAS  /tmp/ccGXytas.s 			page 172


 3415              		@ args = 0, pretend = 0, frame = 0
 3416              		@ frame_needed = 0, uses_anonymous_args = 0
3039:../freertos/tasks.c **** 
 3417              		.loc 1 3039 29 view .LVU944
3043:../freertos/tasks.c **** 
 3418              		.loc 1 3043 43 view .LVU945
3048:../freertos/tasks.c **** 
 3419              		.loc 1 3048 2 view .LVU946
 3420              	@ ../freertos/tasks.c:3038: {
3038:../freertos/tasks.c **** 	configASSERT( pxEventList );
 3421              		.loc 1 3038 1 is_stmt 0 view .LVU947
 3422 0960 10B5     		push	{r4, lr}	@
 3423              	.LCFI31:
 3424              		.cfi_def_cfa_offset 8
 3425              		.cfi_offset 4, -8
 3426              		.cfi_offset 14, -4
 3427              	@ ../freertos/tasks.c:3038: {
3038:../freertos/tasks.c **** 	configASSERT( pxEventList );
 3428              		.loc 1 3038 1 view .LVU948
 3429 0962 1446     		mov	r4, r2	@ xTicksToWait, tmp126
 3430              	@ ../freertos/tasks.c:3048: 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue
3048:../freertos/tasks.c **** 
 3431              		.loc 1 3048 2 view .LVU949
 3432 0964 074B     		ldr	r3, .L246	@ tmp121,
 3433 0966 41F00041 		orr	r1, r1, #-2147483648	@ tmp122, tmp125,
 3434              	.LVL221:
3048:../freertos/tasks.c **** 
 3435              		.loc 1 3048 2 view .LVU950
 3436 096a 5A68     		ldr	r2, [r3, #4]	@ pxCurrentTCB.81_1, pxCurrentTCB
 3437              	.LVL222:
3048:../freertos/tasks.c **** 
 3438              		.loc 1 3048 2 view .LVU951
 3439 096c 9161     		str	r1, [r2, #24]	@ tmp122, pxCurrentTCB.81_1->xEventListItem.xItemValue
3055:../freertos/tasks.c **** 
 3440              		.loc 1 3055 2 is_stmt 1 view .LVU952
 3441              	@ ../freertos/tasks.c:3055: 	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
3055:../freertos/tasks.c **** 
 3442              		.loc 1 3055 46 is_stmt 0 view .LVU953
 3443 096e 5968     		ldr	r1, [r3, #4]	@ pxCurrentTCB.82_3, pxCurrentTCB
 3444              	@ ../freertos/tasks.c:3055: 	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
3055:../freertos/tasks.c **** 
 3445              		.loc 1 3055 2 view .LVU954
 3446 0970 1831     		adds	r1, r1, #24	@, pxCurrentTCB.82_3,
 3447 0972 FFF7FEFF 		bl	vListInsertEnd		@
 3448              	.LVL223:
3057:../freertos/tasks.c **** }
 3449              		.loc 1 3057 2 is_stmt 1 view .LVU955
 3450 0976 2046     		mov	r0, r4	@, xTicksToWait
 3451              	@ ../freertos/tasks.c:3058: }
3058:../freertos/tasks.c **** /*-----------------------------------------------------------*/
 3452              		.loc 1 3058 1 is_stmt 0 view .LVU956
 3453 0978 BDE81040 		pop	{r4, lr}	@
 3454              	.LCFI32:
 3455              		.cfi_restore 14
 3456              		.cfi_restore 4
 3457              		.cfi_def_cfa_offset 0
 3458              	.LVL224:
ARM GAS  /tmp/ccGXytas.s 			page 173


 3459              	@ ../freertos/tasks.c:3057: 	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
3057:../freertos/tasks.c **** }
 3460              		.loc 1 3057 2 view .LVU957
 3461 097c 0121     		movs	r1, #1	@,
 3462 097e FFF73FBB 		b	prvAddCurrentTaskToDelayedList		@
 3463              	.LVL225:
 3464              	.L247:
3057:../freertos/tasks.c **** }
 3465              		.loc 1 3057 2 view .LVU958
 3466 0982 00BF     		.align	2
 3467              	.L246:
 3468 0984 00000000 		.word	.LANCHOR0
 3469              		.cfi_endproc
 3470              	.LFE31:
 3471              		.size	vTaskPlaceOnUnorderedEventList, .-vTaskPlaceOnUnorderedEventList
 3472              		.align	1
 3473              		.global	vTaskPlaceOnEventListRestricted
 3474              		.syntax unified
 3475              		.thumb
 3476              		.thumb_func
 3477              		.type	vTaskPlaceOnEventListRestricted, %function
 3478              	vTaskPlaceOnEventListRestricted:
 3479              	.LVL226:
 3480              	.LFB32:
3064:../freertos/tasks.c **** 		configASSERT( pxEventList );
 3481              		.loc 1 3064 2 is_stmt 1 view -0
 3482              		.cfi_startproc
 3483              		@ args = 0, pretend = 0, frame = 0
 3484              		@ frame_needed = 0, uses_anonymous_args = 0
3065:../freertos/tasks.c **** 
 3485              		.loc 1 3065 30 view .LVU960
3077:../freertos/tasks.c **** 
 3486              		.loc 1 3077 3 view .LVU961
 3487              	@ ../freertos/tasks.c:3064: 	{
3064:../freertos/tasks.c **** 		configASSERT( pxEventList );
 3488              		.loc 1 3064 2 is_stmt 0 view .LVU962
 3489 0988 38B5     		push	{r3, r4, r5, lr}	@
 3490              	.LCFI33:
 3491              		.cfi_def_cfa_offset 16
 3492              		.cfi_offset 3, -16
 3493              		.cfi_offset 4, -12
 3494              		.cfi_offset 5, -8
 3495              		.cfi_offset 14, -4
 3496              	@ ../freertos/tasks.c:3064: 	{
3064:../freertos/tasks.c **** 		configASSERT( pxEventList );
 3497              		.loc 1 3064 2 view .LVU963
 3498 098a 1446     		mov	r4, r2	@ xWaitIndefinitely, tmp122
 3499 098c 0D46     		mov	r5, r1	@ xTicksToWait, tmp121
 3500              	@ ../freertos/tasks.c:3077: 		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
3077:../freertos/tasks.c **** 
 3501              		.loc 1 3077 47 view .LVU964
 3502 098e 084B     		ldr	r3, .L251	@ tmp119,
 3503 0990 5968     		ldr	r1, [r3, #4]	@ pxCurrentTCB.83_1, pxCurrentTCB
 3504              	.LVL227:
 3505              	@ ../freertos/tasks.c:3077: 		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
3077:../freertos/tasks.c **** 
 3506              		.loc 1 3077 3 view .LVU965
ARM GAS  /tmp/ccGXytas.s 			page 174


 3507 0992 1831     		adds	r1, r1, #24	@, pxCurrentTCB.83_1,
 3508 0994 FFF7FEFF 		bl	vListInsertEnd		@
 3509              	.LVL228:
3082:../freertos/tasks.c **** 		{
 3510              		.loc 1 3082 3 is_stmt 1 view .LVU966
 3511              	@ ../freertos/tasks.c:3084: 			xTicksToWait = portMAX_DELAY;
3084:../freertos/tasks.c **** 		}
 3512              		.loc 1 3084 17 is_stmt 0 view .LVU967
 3513 0998 002C     		cmp	r4, #0	@ xWaitIndefinitely,
 3514              	.LVL229:
3087:../freertos/tasks.c **** 		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 3515              		.loc 1 3087 57 is_stmt 1 view .LVU968
3088:../freertos/tasks.c **** 	}
 3516              		.loc 1 3088 3 view .LVU969
 3517 099a 2146     		mov	r1, r4	@, xWaitIndefinitely
 3518 099c 08BF     		it	eq
 3519 099e 2846     		moveq	r0, r5	@, xTicksToWait
 3520              	@ ../freertos/tasks.c:3089: 	}
3089:../freertos/tasks.c **** 
 3521              		.loc 1 3089 2 is_stmt 0 view .LVU970
 3522 09a0 BDE83840 		pop	{r3, r4, r5, lr}	@
 3523              	.LCFI34:
 3524              		.cfi_restore 14
 3525              		.cfi_restore 5
 3526              		.cfi_restore 4
 3527              		.cfi_restore 3
 3528              		.cfi_def_cfa_offset 0
 3529              	.LVL230:
 3530              	@ ../freertos/tasks.c:3088: 		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
3088:../freertos/tasks.c **** 	}
 3531              		.loc 1 3088 3 view .LVU971
 3532 09a4 18BF     		it	ne
 3533 09a6 4FF0FF30 		movne	r0, #-1	@,
 3534 09aa FFF729BB 		b	prvAddCurrentTaskToDelayedList		@
 3535              	.LVL231:
 3536              	.L252:
3088:../freertos/tasks.c **** 	}
 3537              		.loc 1 3088 3 view .LVU972
 3538 09ae 00BF     		.align	2
 3539              	.L251:
 3540 09b0 00000000 		.word	.LANCHOR0
 3541              		.cfi_endproc
 3542              	.LFE32:
 3543              		.size	vTaskPlaceOnEventListRestricted, .-vTaskPlaceOnEventListRestricted
 3544              		.align	1
 3545              		.global	xTaskRemoveFromEventList
 3546              		.syntax unified
 3547              		.thumb
 3548              		.thumb_func
 3549              		.type	xTaskRemoveFromEventList, %function
 3550              	xTaskRemoveFromEventList:
 3551              	.LVL232:
 3552              	.LFB33:
3095:../freertos/tasks.c **** TCB_t *pxUnblockedTCB;
 3553              		.loc 1 3095 1 is_stmt 1 view -0
 3554              		.cfi_startproc
 3555              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccGXytas.s 			page 175


 3556              		@ frame_needed = 0, uses_anonymous_args = 0
3096:../freertos/tasks.c **** BaseType_t xReturn;
 3557              		.loc 1 3096 1 view .LVU974
3097:../freertos/tasks.c **** 
 3558              		.loc 1 3097 1 view .LVU975
3112:../freertos/tasks.c **** 	configASSERT( pxUnblockedTCB );
 3559              		.loc 1 3112 2 view .LVU976
 3560              	@ ../freertos/tasks.c:3112: 	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e
3112:../freertos/tasks.c **** 	configASSERT( pxUnblockedTCB );
 3561              		.loc 1 3112 17 is_stmt 0 view .LVU977
 3562 09b4 C368     		ldr	r3, [r0, #12]	@ pxEventList_17(D)->xListEnd.pxNext, pxEventList_17(D)->xListEnd.pxNext
 3563              	@ ../freertos/tasks.c:3095: {
3095:../freertos/tasks.c **** TCB_t *pxUnblockedTCB;
 3564              		.loc 1 3095 1 view .LVU978
 3565 09b6 70B5     		push	{r4, r5, r6, lr}	@
 3566              	.LCFI35:
 3567              		.cfi_def_cfa_offset 16
 3568              		.cfi_offset 4, -16
 3569              		.cfi_offset 5, -12
 3570              		.cfi_offset 6, -8
 3571              		.cfi_offset 14, -4
 3572              	@ ../freertos/tasks.c:3112: 	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e
3112:../freertos/tasks.c **** 	configASSERT( pxUnblockedTCB );
 3573              		.loc 1 3112 17 view .LVU979
 3574 09b8 DD68     		ldr	r5, [r3, #12]	@ pxUnblockedTCB, _1->pvOwner
 3575              	.LVL233:
3113:../freertos/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 3576              		.loc 1 3113 32 is_stmt 1 view .LVU980
3114:../freertos/tasks.c **** 
 3577              		.loc 1 3114 2 view .LVU981
 3578              	@ ../freertos/tasks.c:3116: 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
3116:../freertos/tasks.c **** 	{
 3579              		.loc 1 3116 27 is_stmt 0 view .LVU982
 3580 09ba 144C     		ldr	r4, .L259	@ tmp131,
 3581              	@ ../freertos/tasks.c:3114: 	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
3114:../freertos/tasks.c **** 
 3582              		.loc 1 3114 11 view .LVU983
 3583 09bc 05F11806 		add	r6, r5, #24	@ _2, pxUnblockedTCB,
 3584 09c0 3046     		mov	r0, r6	@, _2
 3585              	.LVL234:
3114:../freertos/tasks.c **** 
 3586              		.loc 1 3114 11 view .LVU984
 3587 09c2 FFF7FEFF 		bl	uxListRemove		@
 3588              	.LVL235:
3116:../freertos/tasks.c **** 	{
 3589              		.loc 1 3116 2 is_stmt 1 view .LVU985
 3590              	@ ../freertos/tasks.c:3116: 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
3116:../freertos/tasks.c **** 	{
 3591              		.loc 1 3116 27 is_stmt 0 view .LVU986
 3592 09c6 D4F8F030 		ldr	r3, [r4, #240]	@ uxSchedulerSuspended.84_3, uxSchedulerSuspended
 3593              	@ ../freertos/tasks.c:3116: 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
3116:../freertos/tasks.c **** 	{
 3594              		.loc 1 3116 4 view .LVU987
 3595 09ca DBB9     		cbnz	r3, .L254	@ uxSchedulerSuspended.84_3,
3118:../freertos/tasks.c **** 		prvAddTaskToReadyList( pxUnblockedTCB );
 3596              		.loc 1 3118 3 is_stmt 1 view .LVU988
 3597              	@ ../freertos/tasks.c:3118: 		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
ARM GAS  /tmp/ccGXytas.s 			page 176


3118:../freertos/tasks.c **** 		prvAddTaskToReadyList( pxUnblockedTCB );
 3598              		.loc 1 3118 12 is_stmt 0 view .LVU989
 3599 09cc 2E1D     		adds	r6, r5, #4	@ _4, pxUnblockedTCB,
 3600 09ce 3046     		mov	r0, r6	@, _4
 3601 09d0 FFF7FEFF 		bl	uxListRemove		@
 3602              	.LVL236:
3119:../freertos/tasks.c **** 
 3603              		.loc 1 3119 3 is_stmt 1 view .LVU990
3119:../freertos/tasks.c **** 
 3604              		.loc 1 3119 3 view .LVU991
 3605 09d4 0123     		movs	r3, #1	@ tmp134,
 3606 09d6 1420     		movs	r0, #20	@ tmp139,
 3607 09d8 EA6A     		ldr	r2, [r5, #44]	@ _5, pxUnblockedTCB_18->uxPriority
 3608 09da A168     		ldr	r1, [r4, #8]	@ uxTopReadyPriority.85_7, uxTopReadyPriority
 3609 09dc 9340     		lsls	r3, r3, r2	@ tmp133, tmp134, _5
 3610 09de 0B43     		orrs	r3, r3, r1	@, _8, tmp133, uxTopReadyPriority.85_7
 3611 09e0 3146     		mov	r1, r6	@, _4
 3612 09e2 A360     		str	r3, [r4, #8]	@ _8, uxTopReadyPriority
3119:../freertos/tasks.c **** 
 3613              		.loc 1 3119 3 view .LVU992
 3614 09e4 04F14803 		add	r3, r4, #72	@ tmp137, tmp131,
 3615 09e8 00FB0230 		mla	r0, r0, r2, r3	@, tmp139, _5, tmp137
 3616              	.L258:
 3617              	@ ../freertos/tasks.c:3139: 		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventList
3139:../freertos/tasks.c **** 	}
 3618              		.loc 1 3139 3 is_stmt 0 view .LVU993
 3619 09ec FFF7FEFF 		bl	vListInsertEnd		@
 3620              	.LVL237:
3142:../freertos/tasks.c **** 	{
 3621              		.loc 1 3142 2 is_stmt 1 view .LVU994
 3622              	@ ../freertos/tasks.c:3142: 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
3142:../freertos/tasks.c **** 	{
 3623              		.loc 1 3142 47 is_stmt 0 view .LVU995
 3624 09f0 6368     		ldr	r3, [r4, #4]	@ pxCurrentTCB.86_11, pxCurrentTCB
 3625              	@ ../freertos/tasks.c:3142: 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
3142:../freertos/tasks.c **** 	{
 3626              		.loc 1 3142 4 view .LVU996
 3627 09f2 EA6A     		ldr	r2, [r5, #44]	@ pxUnblockedTCB_18->uxPriority, pxUnblockedTCB_18->uxPriority
 3628 09f4 DB6A     		ldr	r3, [r3, #44]	@ pxCurrentTCB.86_11->uxPriority, pxCurrentTCB.86_11->uxPriority
 3629 09f6 9A42     		cmp	r2, r3	@ pxUnblockedTCB_18->uxPriority, pxCurrentTCB.86_11->uxPriority
3147:../freertos/tasks.c **** 
 3630              		.loc 1 3147 3 is_stmt 1 view .LVU997
 3631              	.LVL238:
3151:../freertos/tasks.c **** 	}
 3632              		.loc 1 3151 3 view .LVU998
 3633              	@ ../freertos/tasks.c:3151: 		xYieldPending = pdTRUE;
3151:../freertos/tasks.c **** 	}
 3634              		.loc 1 3151 17 is_stmt 0 view .LVU999
 3635 09f8 8ABF     		itet	hi
 3636 09fa 0120     		movhi	r0, #1	@ tmp147,
 3637              	@ ../freertos/tasks.c:3155: 		xReturn = pdFALSE;
3155:../freertos/tasks.c **** 	}
 3638              		.loc 1 3155 11 view .LVU1000
 3639 09fc 0020     		movls	r0, #0	@ <retval>,
 3640              	.LVL239:
3158:../freertos/tasks.c **** }
 3641              		.loc 1 3158 2 is_stmt 1 view .LVU1001
ARM GAS  /tmp/ccGXytas.s 			page 177


 3642              	@ ../freertos/tasks.c:3151: 		xYieldPending = pdTRUE;
3151:../freertos/tasks.c **** 	}
 3643              		.loc 1 3151 17 is_stmt 0 view .LVU1002
 3644 09fe C4F80001 		strhi	r0, [r4, #256]	@ tmp147, xYieldPending
 3645              	@ ../freertos/tasks.c:3159: }
3159:../freertos/tasks.c **** /*-----------------------------------------------------------*/
 3646              		.loc 1 3159 1 view .LVU1003
 3647 0a02 70BD     		pop	{r4, r5, r6, pc}	@
 3648              	.LVL240:
 3649              	.L254:
3139:../freertos/tasks.c **** 	}
 3650              		.loc 1 3139 3 is_stmt 1 view .LVU1004
 3651 0a04 3146     		mov	r1, r6	@, _2
 3652 0a06 04F1D400 		add	r0, r4, #212	@, tmp131,
 3653 0a0a EFE7     		b	.L258		@
 3654              	.L260:
 3655              		.align	2
 3656              	.L259:
 3657 0a0c 00000000 		.word	.LANCHOR0
 3658              		.cfi_endproc
 3659              	.LFE33:
 3660              		.size	xTaskRemoveFromEventList, .-xTaskRemoveFromEventList
 3661              		.align	1
 3662              		.global	vTaskRemoveFromUnorderedEventList
 3663              		.syntax unified
 3664              		.thumb
 3665              		.thumb_func
 3666              		.type	vTaskRemoveFromUnorderedEventList, %function
 3667              	vTaskRemoveFromUnorderedEventList:
 3668              	.LVL241:
 3669              	.LFB34:
3163:../freertos/tasks.c **** TCB_t *pxUnblockedTCB;
 3670              		.loc 1 3163 1 view -0
 3671              		.cfi_startproc
 3672              		@ args = 0, pretend = 0, frame = 0
 3673              		@ frame_needed = 0, uses_anonymous_args = 0
3164:../freertos/tasks.c **** 
 3674              		.loc 1 3164 1 view .LVU1006
3168:../freertos/tasks.c **** 
 3675              		.loc 1 3168 49 view .LVU1007
3171:../freertos/tasks.c **** 
 3676              		.loc 1 3171 2 view .LVU1008
 3677              	@ ../freertos/tasks.c:3163: {
3163:../freertos/tasks.c **** TCB_t *pxUnblockedTCB;
 3678              		.loc 1 3163 1 is_stmt 0 view .LVU1009
 3679 0a10 F8B5     		push	{r3, r4, r5, r6, r7, lr}	@
 3680              	.LCFI36:
 3681              		.cfi_def_cfa_offset 24
 3682              		.cfi_offset 3, -24
 3683              		.cfi_offset 4, -20
 3684              		.cfi_offset 5, -16
 3685              		.cfi_offset 6, -12
 3686              		.cfi_offset 7, -8
 3687              		.cfi_offset 14, -4
 3688              	@ ../freertos/tasks.c:3175: 	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e
3175:../freertos/tasks.c **** 	configASSERT( pxUnblockedTCB );
 3689              		.loc 1 3175 17 view .LVU1010
ARM GAS  /tmp/ccGXytas.s 			page 178


 3690 0a12 C568     		ldr	r5, [r0, #12]	@ pxUnblockedTCB, pxEventListItem_14(D)->pvOwner
 3691              	@ ../freertos/tasks.c:3171: 	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_
3171:../freertos/tasks.c **** 
 3692              		.loc 1 3171 2 view .LVU1011
 3693 0a14 41F00041 		orr	r1, r1, #-2147483648	@ tmp128, tmp144,
 3694              	.LVL242:
 3695              	@ ../freertos/tasks.c:3183: 	prvAddTaskToReadyList( pxUnblockedTCB );
3183:../freertos/tasks.c **** 
 3696              		.loc 1 3183 2 view .LVU1012
 3697 0a18 0126     		movs	r6, #1	@ tmp131,
 3698              	@ ../freertos/tasks.c:3171: 	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_
3171:../freertos/tasks.c **** 
 3699              		.loc 1 3171 2 view .LVU1013
 3700 0a1a 0160     		str	r1, [r0]	@ tmp128, pxEventListItem_14(D)->xItemValue
3175:../freertos/tasks.c **** 	configASSERT( pxUnblockedTCB );
 3701              		.loc 1 3175 2 is_stmt 1 view .LVU1014
 3702              	.LVL243:
3176:../freertos/tasks.c **** 	( void ) uxListRemove( pxEventListItem );
 3703              		.loc 1 3176 32 view .LVU1015
3177:../freertos/tasks.c **** 
 3704              		.loc 1 3177 2 view .LVU1016
 3705              	@ ../freertos/tasks.c:3182: 	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
3182:../freertos/tasks.c **** 	prvAddTaskToReadyList( pxUnblockedTCB );
 3706              		.loc 1 3182 11 is_stmt 0 view .LVU1017
 3707 0a1c 2F1D     		adds	r7, r5, #4	@ _2, pxUnblockedTCB,
 3708              	@ ../freertos/tasks.c:3177: 	( void ) uxListRemove( pxEventListItem );
3177:../freertos/tasks.c **** 
 3709              		.loc 1 3177 11 view .LVU1018
 3710 0a1e FFF7FEFF 		bl	uxListRemove		@
 3711              	.LVL244:
3182:../freertos/tasks.c **** 	prvAddTaskToReadyList( pxUnblockedTCB );
 3712              		.loc 1 3182 2 is_stmt 1 view .LVU1019
 3713              	@ ../freertos/tasks.c:3182: 	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
3182:../freertos/tasks.c **** 	prvAddTaskToReadyList( pxUnblockedTCB );
 3714              		.loc 1 3182 11 is_stmt 0 view .LVU1020
 3715 0a22 3846     		mov	r0, r7	@, _2
 3716 0a24 FFF7FEFF 		bl	uxListRemove		@
 3717              	.LVL245:
3183:../freertos/tasks.c **** 
 3718              		.loc 1 3183 2 is_stmt 1 view .LVU1021
3183:../freertos/tasks.c **** 
 3719              		.loc 1 3183 2 view .LVU1022
 3720 0a28 1420     		movs	r0, #20	@ tmp136,
 3721 0a2a 0B4C     		ldr	r4, .L263	@ tmp129,
 3722 0a2c EA6A     		ldr	r2, [r5, #44]	@ _3, pxUnblockedTCB_16->uxPriority
 3723 0a2e A168     		ldr	r1, [r4, #8]	@ uxTopReadyPriority.87_5, uxTopReadyPriority
 3724 0a30 06FA02F3 		lsl	r3, r6, r2	@ tmp130, tmp131, _3
 3725 0a34 0B43     		orrs	r3, r3, r1	@, _6, tmp130, uxTopReadyPriority.87_5
 3726 0a36 A360     		str	r3, [r4, #8]	@ _6, uxTopReadyPriority
3183:../freertos/tasks.c **** 
 3727              		.loc 1 3183 2 view .LVU1023
 3728 0a38 04F14803 		add	r3, r4, #72	@ tmp134, tmp129,
 3729 0a3c 00FB0230 		mla	r0, r0, r2, r3	@, tmp136, _3, tmp134
 3730 0a40 3946     		mov	r1, r7	@, _2
 3731 0a42 FFF7FEFF 		bl	vListInsertEnd		@
 3732              	.LVL246:
3183:../freertos/tasks.c **** 
ARM GAS  /tmp/ccGXytas.s 			page 179


 3733              		.loc 1 3183 41 discriminator 1 view .LVU1024
3185:../freertos/tasks.c **** 	{
 3734              		.loc 1 3185 2 view .LVU1025
 3735              	@ ../freertos/tasks.c:3185: 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
3185:../freertos/tasks.c **** 	{
 3736              		.loc 1 3185 47 is_stmt 0 view .LVU1026
 3737 0a46 6368     		ldr	r3, [r4, #4]	@ pxCurrentTCB.88_9, pxCurrentTCB
 3738              	@ ../freertos/tasks.c:3185: 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
3185:../freertos/tasks.c **** 	{
 3739              		.loc 1 3185 4 view .LVU1027
 3740 0a48 EA6A     		ldr	r2, [r5, #44]	@ pxUnblockedTCB_16->uxPriority, pxUnblockedTCB_16->uxPriority
 3741 0a4a DB6A     		ldr	r3, [r3, #44]	@ pxCurrentTCB.88_9->uxPriority, pxCurrentTCB.88_9->uxPriority
 3742 0a4c 9A42     		cmp	r2, r3	@ pxUnblockedTCB_16->uxPriority, pxCurrentTCB.88_9->uxPriority
3191:../freertos/tasks.c **** 	}
 3743              		.loc 1 3191 3 is_stmt 1 view .LVU1028
 3744              	@ ../freertos/tasks.c:3191: 		xYieldPending = pdTRUE;
3191:../freertos/tasks.c **** 	}
 3745              		.loc 1 3191 17 is_stmt 0 view .LVU1029
 3746 0a4e 88BF     		it	hi
 3747 0a50 C4F80061 		strhi	r6, [r4, #256]	@ tmp131, xYieldPending
 3748              	@ ../freertos/tasks.c:3193: }
3193:../freertos/tasks.c **** /*-----------------------------------------------------------*/
 3749              		.loc 1 3193 1 view .LVU1030
 3750 0a54 F8BD     		pop	{r3, r4, r5, r6, r7, pc}	@
 3751              	.LVL247:
 3752              	.L264:
3193:../freertos/tasks.c **** /*-----------------------------------------------------------*/
 3753              		.loc 1 3193 1 view .LVU1031
 3754 0a56 00BF     		.align	2
 3755              	.L263:
 3756 0a58 00000000 		.word	.LANCHOR0
 3757              		.cfi_endproc
 3758              	.LFE34:
 3759              		.size	vTaskRemoveFromUnorderedEventList, .-vTaskRemoveFromUnorderedEventList
 3760              		.align	1
 3761              		.global	vTaskSetTimeOutState
 3762              		.syntax unified
 3763              		.thumb
 3764              		.thumb_func
 3765              		.type	vTaskSetTimeOutState, %function
 3766              	vTaskSetTimeOutState:
 3767              	.LVL248:
 3768              	.LFB35:
3197:../freertos/tasks.c **** 	configASSERT( pxTimeOut );
 3769              		.loc 1 3197 1 is_stmt 1 view -0
 3770              		.cfi_startproc
 3771              		@ args = 0, pretend = 0, frame = 0
 3772              		@ frame_needed = 0, uses_anonymous_args = 0
3198:../freertos/tasks.c **** 	taskENTER_CRITICAL();
 3773              		.loc 1 3198 27 view .LVU1033
3199:../freertos/tasks.c **** 	{
 3774              		.loc 1 3199 2 view .LVU1034
 3775              	@ ../freertos/tasks.c:3197: {
3197:../freertos/tasks.c **** 	configASSERT( pxTimeOut );
 3776              		.loc 1 3197 1 is_stmt 0 view .LVU1035
 3777 0a5c 10B5     		push	{r4, lr}	@
 3778              	.LCFI37:
ARM GAS  /tmp/ccGXytas.s 			page 180


 3779              		.cfi_def_cfa_offset 8
 3780              		.cfi_offset 4, -8
 3781              		.cfi_offset 14, -4
 3782              	@ ../freertos/tasks.c:3197: {
3197:../freertos/tasks.c **** 	configASSERT( pxTimeOut );
 3783              		.loc 1 3197 1 view .LVU1036
 3784 0a5e 0446     		mov	r4, r0	@ pxTimeOut, tmp119
 3785              	@ ../freertos/tasks.c:3199: 	taskENTER_CRITICAL();
3199:../freertos/tasks.c **** 	{
 3786              		.loc 1 3199 2 view .LVU1037
 3787 0a60 FFF7FEFF 		bl	vPortEnterCritical		@
 3788              	.LVL249:
3201:../freertos/tasks.c **** 		pxTimeOut->xTimeOnEntering = xTickCount;
 3789              		.loc 1 3201 3 is_stmt 1 view .LVU1038
 3790              	@ ../freertos/tasks.c:3201: 		pxTimeOut->xOverflowCount = xNumOfOverflows;
3201:../freertos/tasks.c **** 		pxTimeOut->xTimeOnEntering = xTickCount;
 3791              		.loc 1 3201 29 is_stmt 0 view .LVU1039
 3792 0a64 044B     		ldr	r3, .L266	@ tmp117,
 3793 0a66 D3F8F820 		ldr	r2, [r3, #248]	@ xNumOfOverflows.89_1, xNumOfOverflows
 3794              	@ ../freertos/tasks.c:3202: 		pxTimeOut->xTimeOnEntering = xTickCount;
3202:../freertos/tasks.c **** 	}
 3795              		.loc 1 3202 30 view .LVU1040
 3796 0a6a 1B68     		ldr	r3, [r3]	@ xTickCount.90_2, xTickCount
 3797              	@ ../freertos/tasks.c:3201: 		pxTimeOut->xOverflowCount = xNumOfOverflows;
3201:../freertos/tasks.c **** 		pxTimeOut->xTimeOnEntering = xTickCount;
 3798              		.loc 1 3201 29 view .LVU1041
 3799 0a6c 2260     		str	r2, [r4]	@ xNumOfOverflows.89_1, pxTimeOut_5(D)->xOverflowCount
3202:../freertos/tasks.c **** 	}
 3800              		.loc 1 3202 3 is_stmt 1 view .LVU1042
 3801              	@ ../freertos/tasks.c:3202: 		pxTimeOut->xTimeOnEntering = xTickCount;
3202:../freertos/tasks.c **** 	}
 3802              		.loc 1 3202 30 is_stmt 0 view .LVU1043
 3803 0a6e 6360     		str	r3, [r4, #4]	@ xTickCount.90_2, pxTimeOut_5(D)->xTimeOnEntering
3204:../freertos/tasks.c **** }
 3804              		.loc 1 3204 2 is_stmt 1 view .LVU1044
 3805              	@ ../freertos/tasks.c:3205: }
3205:../freertos/tasks.c **** /*-----------------------------------------------------------*/
 3806              		.loc 1 3205 1 is_stmt 0 view .LVU1045
 3807 0a70 BDE81040 		pop	{r4, lr}	@
 3808              	.LCFI38:
 3809              		.cfi_restore 14
 3810              		.cfi_restore 4
 3811              		.cfi_def_cfa_offset 0
 3812              	.LVL250:
 3813              	@ ../freertos/tasks.c:3204: 	taskEXIT_CRITICAL();
3204:../freertos/tasks.c **** }
 3814              		.loc 1 3204 2 view .LVU1046
 3815 0a74 FFF7FEBF 		b	vPortExitCritical		@
 3816              	.LVL251:
 3817              	.L267:
 3818              		.align	2
 3819              	.L266:
 3820 0a78 00000000 		.word	.LANCHOR0
 3821              		.cfi_endproc
 3822              	.LFE35:
 3823              		.size	vTaskSetTimeOutState, .-vTaskSetTimeOutState
 3824              		.align	1
ARM GAS  /tmp/ccGXytas.s 			page 181


 3825              		.global	vTaskInternalSetTimeOutState
 3826              		.syntax unified
 3827              		.thumb
 3828              		.thumb_func
 3829              		.type	vTaskInternalSetTimeOutState, %function
 3830              	vTaskInternalSetTimeOutState:
 3831              	.LVL252:
 3832              	.LFB36:
3209:../freertos/tasks.c **** 	/* For internal use only as it does not use a critical section. */
 3833              		.loc 1 3209 1 is_stmt 1 view -0
 3834              		.cfi_startproc
 3835              		@ args = 0, pretend = 0, frame = 0
 3836              		@ frame_needed = 0, uses_anonymous_args = 0
 3837              		@ link register save eliminated.
3211:../freertos/tasks.c **** 	pxTimeOut->xTimeOnEntering = xTickCount;
 3838              		.loc 1 3211 2 view .LVU1048
 3839              	@ ../freertos/tasks.c:3211: 	pxTimeOut->xOverflowCount = xNumOfOverflows;
3211:../freertos/tasks.c **** 	pxTimeOut->xTimeOnEntering = xTickCount;
 3840              		.loc 1 3211 28 is_stmt 0 view .LVU1049
 3841 0a7c 034B     		ldr	r3, .L269	@ tmp117,
 3842 0a7e D3F8F820 		ldr	r2, [r3, #248]	@ xNumOfOverflows.91_1, xNumOfOverflows
 3843              	@ ../freertos/tasks.c:3212: 	pxTimeOut->xTimeOnEntering = xTickCount;
3212:../freertos/tasks.c **** }
 3844              		.loc 1 3212 29 view .LVU1050
 3845 0a82 1B68     		ldr	r3, [r3]	@ xTickCount.92_2, xTickCount
 3846              	@ ../freertos/tasks.c:3211: 	pxTimeOut->xOverflowCount = xNumOfOverflows;
3211:../freertos/tasks.c **** 	pxTimeOut->xTimeOnEntering = xTickCount;
 3847              		.loc 1 3211 28 view .LVU1051
 3848 0a84 0260     		str	r2, [r0]	@ xNumOfOverflows.91_1, pxTimeOut_4(D)->xOverflowCount
3212:../freertos/tasks.c **** }
 3849              		.loc 1 3212 2 is_stmt 1 view .LVU1052
 3850              	@ ../freertos/tasks.c:3212: 	pxTimeOut->xTimeOnEntering = xTickCount;
3212:../freertos/tasks.c **** }
 3851              		.loc 1 3212 29 is_stmt 0 view .LVU1053
 3852 0a86 4360     		str	r3, [r0, #4]	@ xTickCount.92_2, pxTimeOut_4(D)->xTimeOnEntering
 3853              	@ ../freertos/tasks.c:3213: }
3213:../freertos/tasks.c **** /*-----------------------------------------------------------*/
 3854              		.loc 1 3213 1 view .LVU1054
 3855 0a88 7047     		bx	lr	@
 3856              	.L270:
 3857 0a8a 00BF     		.align	2
 3858              	.L269:
 3859 0a8c 00000000 		.word	.LANCHOR0
 3860              		.cfi_endproc
 3861              	.LFE36:
 3862              		.size	vTaskInternalSetTimeOutState, .-vTaskInternalSetTimeOutState
 3863              		.align	1
 3864              		.global	xTaskCheckForTimeOut
 3865              		.syntax unified
 3866              		.thumb
 3867              		.thumb_func
 3868              		.type	xTaskCheckForTimeOut, %function
 3869              	xTaskCheckForTimeOut:
 3870              	.LVL253:
 3871              	.LFB37:
3217:../freertos/tasks.c **** BaseType_t xReturn;
 3872              		.loc 1 3217 1 is_stmt 1 view -0
ARM GAS  /tmp/ccGXytas.s 			page 182


 3873              		.cfi_startproc
 3874              		@ args = 0, pretend = 0, frame = 0
 3875              		@ frame_needed = 0, uses_anonymous_args = 0
3218:../freertos/tasks.c **** 
 3876              		.loc 1 3218 1 view .LVU1056
3220:../freertos/tasks.c **** 	configASSERT( pxTicksToWait );
 3877              		.loc 1 3220 27 view .LVU1057
3221:../freertos/tasks.c **** 
 3878              		.loc 1 3221 31 view .LVU1058
3223:../freertos/tasks.c **** 	{
 3879              		.loc 1 3223 2 view .LVU1059
 3880              	@ ../freertos/tasks.c:3217: {
3217:../freertos/tasks.c **** BaseType_t xReturn;
 3881              		.loc 1 3217 1 is_stmt 0 view .LVU1060
 3882 0a90 70B5     		push	{r4, r5, r6, lr}	@
 3883              	.LCFI39:
 3884              		.cfi_def_cfa_offset 16
 3885              		.cfi_offset 4, -16
 3886              		.cfi_offset 5, -12
 3887              		.cfi_offset 6, -8
 3888              		.cfi_offset 14, -4
 3889              	@ ../freertos/tasks.c:3217: {
3217:../freertos/tasks.c **** BaseType_t xReturn;
 3890              		.loc 1 3217 1 view .LVU1061
 3891 0a92 0C46     		mov	r4, r1	@ pxTicksToWait, tmp134
 3892 0a94 0546     		mov	r5, r0	@ pxTimeOut, tmp133
 3893              	@ ../freertos/tasks.c:3223: 	taskENTER_CRITICAL();
3223:../freertos/tasks.c **** 	{
 3894              		.loc 1 3223 2 view .LVU1062
 3895 0a96 FFF7FEFF 		bl	vPortEnterCritical		@
 3896              	.LVL254:
 3897              	.LBB136:
3226:../freertos/tasks.c **** 		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 3898              		.loc 1 3226 3 is_stmt 1 view .LVU1063
 3899              	@ ../freertos/tasks.c:3241: 			if( *pxTicksToWait == portMAX_DELAY )
3241:../freertos/tasks.c **** 			{
 3900              		.loc 1 3241 8 is_stmt 0 view .LVU1064
 3901 0a9a 2368     		ldr	r3, [r4]	@ _2, *pxTicksToWait_15(D)
 3902              	@ ../freertos/tasks.c:3226: 		const TickType_t xConstTickCount = xTickCount;
3226:../freertos/tasks.c **** 		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 3903              		.loc 1 3226 20 view .LVU1065
 3904 0a9c 0E48     		ldr	r0, .L280	@ tmp125,
 3905              	@ ../freertos/tasks.c:3241: 			if( *pxTicksToWait == portMAX_DELAY )
3241:../freertos/tasks.c **** 			{
 3906              		.loc 1 3241 6 view .LVU1066
 3907 0a9e 5A1C     		adds	r2, r3, #1	@, _2,
 3908              	@ ../freertos/tasks.c:3226: 		const TickType_t xConstTickCount = xTickCount;
3226:../freertos/tasks.c **** 		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 3909              		.loc 1 3226 20 view .LVU1067
 3910 0aa0 0168     		ldr	r1, [r0]	@ xConstTickCount, xTickCount
 3911              	.LVL255:
3227:../freertos/tasks.c **** 
 3912              		.loc 1 3227 3 is_stmt 1 view .LVU1068
3241:../freertos/tasks.c **** 			{
 3913              		.loc 1 3241 4 view .LVU1069
 3914              	@ ../freertos/tasks.c:3241: 			if( *pxTicksToWait == portMAX_DELAY )
3241:../freertos/tasks.c **** 			{
ARM GAS  /tmp/ccGXytas.s 			page 183


 3915              		.loc 1 3241 6 is_stmt 0 view .LVU1070
 3916 0aa2 10D0     		beq	.L272		@,
 3917              	@ ../freertos/tasks.c:3251: 		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickC
3251:../freertos/tasks.c **** 		{
 3918              		.loc 1 3251 25 view .LVU1071
 3919 0aa4 D0F8F800 		ldr	r0, [r0, #248]	@ xNumOfOverflows.93_4, xNumOfOverflows
 3920              	@ ../freertos/tasks.c:3251: 		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickC
3251:../freertos/tasks.c **** 		{
 3921              		.loc 1 3251 5 view .LVU1072
 3922 0aa8 2E68     		ldr	r6, [r5]	@ pxTimeOut_13(D)->xOverflowCount, pxTimeOut_13(D)->xOverflowCount
 3923              	@ ../freertos/tasks.c:3227: 		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnE
3227:../freertos/tasks.c **** 
 3924              		.loc 1 3227 62 view .LVU1073
 3925 0aaa 6A68     		ldr	r2, [r5, #4]	@ _1, pxTimeOut_13(D)->xTimeOnEntering
3251:../freertos/tasks.c **** 		{
 3926              		.loc 1 3251 3 is_stmt 1 view .LVU1074
 3927              	@ ../freertos/tasks.c:3251: 		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickC
3251:../freertos/tasks.c **** 		{
 3928              		.loc 1 3251 5 is_stmt 0 view .LVU1075
 3929 0aac 8642     		cmp	r6, r0	@ pxTimeOut_13(D)->xOverflowCount, xNumOfOverflows.93_4
 3930 0aae 01D0     		beq	.L273		@,
 3931              	@ ../freertos/tasks.c:3251: 		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickC
3251:../freertos/tasks.c **** 		{
 3932              		.loc 1 3251 56 discriminator 1 view .LVU1076
 3933 0ab0 8A42     		cmp	r2, r1	@ _1, xConstTickCount
 3934 0ab2 0FD9     		bls	.L274		@,
 3935              	.L273:
3260:../freertos/tasks.c **** 		{
 3936              		.loc 1 3260 8 is_stmt 1 view .LVU1077
 3937              	@ ../freertos/tasks.c:3227: 		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnE
3227:../freertos/tasks.c **** 
 3938              		.loc 1 3227 20 is_stmt 0 view .LVU1078
 3939 0ab4 881A     		subs	r0, r1, r2	@ xElapsedTime, xConstTickCount, _1
 3940              	@ ../freertos/tasks.c:3260: 		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit castin
3260:../freertos/tasks.c **** 		{
 3941              		.loc 1 3260 10 view .LVU1079
 3942 0ab6 8342     		cmp	r3, r0	@ _2, xElapsedTime
 3943 0ab8 0AD9     		bls	.L275		@,
3263:../freertos/tasks.c **** 			vTaskInternalSetTimeOutState( pxTimeOut );
 3944              		.loc 1 3263 4 is_stmt 1 view .LVU1080
 3945              	@ ../freertos/tasks.c:3263: 			*pxTicksToWait -= xElapsedTime;
3263:../freertos/tasks.c **** 			vTaskInternalSetTimeOutState( pxTimeOut );
 3946              		.loc 1 3263 19 is_stmt 0 view .LVU1081
 3947 0aba 5B1A     		subs	r3, r3, r1	@ tmp129, _2, xConstTickCount
 3948 0abc 1344     		add	r3, r3, r2	@ tmp130, _1
 3949              	@ ../freertos/tasks.c:3264: 			vTaskInternalSetTimeOutState( pxTimeOut );
3264:../freertos/tasks.c **** 			xReturn = pdFALSE;
 3950              		.loc 1 3264 4 view .LVU1082
 3951 0abe 2846     		mov	r0, r5	@, pxTimeOut
 3952              	@ ../freertos/tasks.c:3263: 			*pxTicksToWait -= xElapsedTime;
3263:../freertos/tasks.c **** 			vTaskInternalSetTimeOutState( pxTimeOut );
 3953              		.loc 1 3263 19 view .LVU1083
 3954 0ac0 2360     		str	r3, [r4]	@ tmp130, *pxTicksToWait_15(D)
 3955              	.LVL256:
3264:../freertos/tasks.c **** 			xReturn = pdFALSE;
 3956              		.loc 1 3264 4 is_stmt 1 view .LVU1084
 3957 0ac2 FFF7FEFF 		bl	vTaskInternalSetTimeOutState		@
ARM GAS  /tmp/ccGXytas.s 			page 184


 3958              	.LVL257:
3265:../freertos/tasks.c **** 		}
 3959              		.loc 1 3265 4 view .LVU1085
 3960              	.L272:
 3961              	@ ../freertos/tasks.c:3246: 				xReturn = pdFALSE;
3246:../freertos/tasks.c **** 			}
 3962              		.loc 1 3246 13 is_stmt 0 view .LVU1086
 3963 0ac6 0024     		movs	r4, #0	@ <retval>,
 3964              	.LVL258:
 3965              	.L276:
3246:../freertos/tasks.c **** 			}
 3966              		.loc 1 3246 13 view .LVU1087
 3967              	.LBE136:
3273:../freertos/tasks.c **** 
 3968              		.loc 1 3273 2 is_stmt 1 view .LVU1088
 3969 0ac8 FFF7FEFF 		bl	vPortExitCritical		@
 3970              	.LVL259:
3275:../freertos/tasks.c **** }
 3971              		.loc 1 3275 2 view .LVU1089
 3972              	@ ../freertos/tasks.c:3276: }
3276:../freertos/tasks.c **** /*-----------------------------------------------------------*/
 3973              		.loc 1 3276 1 is_stmt 0 view .LVU1090
 3974 0acc 2046     		mov	r0, r4	@, <retval>
 3975 0ace 70BD     		pop	{r4, r5, r6, pc}	@
 3976              	.LVL260:
 3977              	.L275:
 3978              	.LBB137:
3269:../freertos/tasks.c **** 			xReturn = pdTRUE;
 3979              		.loc 1 3269 4 is_stmt 1 view .LVU1091
 3980              	@ ../freertos/tasks.c:3269: 			*pxTicksToWait = 0;
3269:../freertos/tasks.c **** 			xReturn = pdTRUE;
 3981              		.loc 1 3269 19 is_stmt 0 view .LVU1092
 3982 0ad0 0023     		movs	r3, #0	@ tmp131,
 3983 0ad2 2360     		str	r3, [r4]	@ tmp131, *pxTicksToWait_15(D)
3270:../freertos/tasks.c **** 		}
 3984              		.loc 1 3270 4 is_stmt 1 view .LVU1093
 3985              	.LVL261:
 3986              	.L274:
 3987              	@ ../freertos/tasks.c:3258: 			xReturn = pdTRUE;
3258:../freertos/tasks.c **** 		}
 3988              		.loc 1 3258 12 is_stmt 0 view .LVU1094
 3989 0ad4 0124     		movs	r4, #1	@ <retval>,
 3990              	.LVL262:
3258:../freertos/tasks.c **** 		}
 3991              		.loc 1 3258 12 view .LVU1095
 3992 0ad6 F7E7     		b	.L276		@
 3993              	.L281:
 3994              		.align	2
 3995              	.L280:
 3996 0ad8 00000000 		.word	.LANCHOR0
 3997              	.LBE137:
 3998              		.cfi_endproc
 3999              	.LFE37:
 4000              		.size	xTaskCheckForTimeOut, .-xTaskCheckForTimeOut
 4001              		.align	1
 4002              		.global	vTaskMissedYield
 4003              		.syntax unified
ARM GAS  /tmp/ccGXytas.s 			page 185


 4004              		.thumb
 4005              		.thumb_func
 4006              		.type	vTaskMissedYield, %function
 4007              	vTaskMissedYield:
 4008              	.LFB38:
3280:../freertos/tasks.c **** 	xYieldPending = pdTRUE;
 4009              		.loc 1 3280 1 is_stmt 1 view -0
 4010              		.cfi_startproc
 4011              		@ args = 0, pretend = 0, frame = 0
 4012              		@ frame_needed = 0, uses_anonymous_args = 0
 4013              		@ link register save eliminated.
3281:../freertos/tasks.c **** }
 4014              		.loc 1 3281 2 view .LVU1097
 4015              	@ ../freertos/tasks.c:3281: 	xYieldPending = pdTRUE;
3281:../freertos/tasks.c **** }
 4016              		.loc 1 3281 16 is_stmt 0 view .LVU1098
 4017 0adc 0122     		movs	r2, #1	@ tmp115,
 4018 0ade 024B     		ldr	r3, .L283	@ tmp114,
 4019 0ae0 C3F80021 		str	r2, [r3, #256]	@ tmp115, xYieldPending
 4020              	@ ../freertos/tasks.c:3282: }
3282:../freertos/tasks.c **** /*-----------------------------------------------------------*/
 4021              		.loc 1 3282 1 view .LVU1099
 4022 0ae4 7047     		bx	lr	@
 4023              	.L284:
 4024 0ae6 00BF     		.align	2
 4025              	.L283:
 4026 0ae8 00000000 		.word	.LANCHOR0
 4027              		.cfi_endproc
 4028              	.LFE38:
 4029              		.size	vTaskMissedYield, .-vTaskMissedYield
 4030              		.align	1
 4031              		.global	uxTaskGetTaskNumber
 4032              		.syntax unified
 4033              		.thumb
 4034              		.thumb_func
 4035              		.type	uxTaskGetTaskNumber, %function
 4036              	uxTaskGetTaskNumber:
 4037              	.LVL263:
 4038              	.LFB39:
3288:../freertos/tasks.c **** 	UBaseType_t uxReturn;
 4039              		.loc 1 3288 2 is_stmt 1 view -0
 4040              		.cfi_startproc
 4041              		@ args = 0, pretend = 0, frame = 0
 4042              		@ frame_needed = 0, uses_anonymous_args = 0
 4043              		@ link register save eliminated.
3289:../freertos/tasks.c **** 	TCB_t const *pxTCB;
 4044              		.loc 1 3289 2 view .LVU1101
3290:../freertos/tasks.c **** 
 4045              		.loc 1 3290 2 view .LVU1102
3292:../freertos/tasks.c **** 		{
 4046              		.loc 1 3292 3 view .LVU1103
 4047              	@ ../freertos/tasks.c:3292: 		if( xTask != NULL )
3292:../freertos/tasks.c **** 		{
 4048              		.loc 1 3292 5 is_stmt 0 view .LVU1104
 4049 0aec 00B1     		cbz	r0, .L285	@ xTask,
3294:../freertos/tasks.c **** 			uxReturn = pxTCB->uxTaskNumber;
 4050              		.loc 1 3294 4 is_stmt 1 view .LVU1105
ARM GAS  /tmp/ccGXytas.s 			page 186


 4051              	.LVL264:
3295:../freertos/tasks.c **** 		}
 4052              		.loc 1 3295 4 view .LVU1106
 4053              	@ ../freertos/tasks.c:3295: 			uxReturn = pxTCB->uxTaskNumber;
3295:../freertos/tasks.c **** 		}
 4054              		.loc 1 3295 13 is_stmt 0 view .LVU1107
 4055 0aee 806C     		ldr	r0, [r0, #72]	@ <retval>, MEM[(const struct TCB_t *)xTask_2(D)].uxTaskNumber
 4056              	.LVL265:
 4057              	.L285:
 4058              	@ ../freertos/tasks.c:3303: 	}
3303:../freertos/tasks.c **** 
 4059              		.loc 1 3303 2 view .LVU1108
 4060 0af0 7047     		bx	lr	@
 4061              		.cfi_endproc
 4062              	.LFE39:
 4063              		.size	uxTaskGetTaskNumber, .-uxTaskGetTaskNumber
 4064              		.align	1
 4065              		.global	vTaskSetTaskNumber
 4066              		.syntax unified
 4067              		.thumb
 4068              		.thumb_func
 4069              		.type	vTaskSetTaskNumber, %function
 4070              	vTaskSetTaskNumber:
 4071              	.LVL266:
 4072              	.LFB40:
3311:../freertos/tasks.c **** 	TCB_t * pxTCB;
 4073              		.loc 1 3311 2 is_stmt 1 view -0
 4074              		.cfi_startproc
 4075              		@ args = 0, pretend = 0, frame = 0
 4076              		@ frame_needed = 0, uses_anonymous_args = 0
 4077              		@ link register save eliminated.
3312:../freertos/tasks.c **** 
 4078              		.loc 1 3312 2 view .LVU1110
3314:../freertos/tasks.c **** 		{
 4079              		.loc 1 3314 3 view .LVU1111
 4080              	@ ../freertos/tasks.c:3314: 		if( xTask != NULL )
3314:../freertos/tasks.c **** 		{
 4081              		.loc 1 3314 5 is_stmt 0 view .LVU1112
 4082 0af2 00B1     		cbz	r0, .L288	@ xTask,
3316:../freertos/tasks.c **** 			pxTCB->uxTaskNumber = uxHandle;
 4083              		.loc 1 3316 4 is_stmt 1 view .LVU1113
 4084              	.LVL267:
3317:../freertos/tasks.c **** 		}
 4085              		.loc 1 3317 4 view .LVU1114
 4086              	@ ../freertos/tasks.c:3317: 			pxTCB->uxTaskNumber = uxHandle;
3317:../freertos/tasks.c **** 		}
 4087              		.loc 1 3317 24 is_stmt 0 view .LVU1115
 4088 0af4 8164     		str	r1, [r0, #72]	@ uxHandle, MEM[(struct TCB_t *)xTask_2(D)].uxTaskNumber
 4089              	.LVL268:
 4090              	.L288:
 4091              	@ ../freertos/tasks.c:3319: 	}
3319:../freertos/tasks.c **** 
 4092              		.loc 1 3319 2 view .LVU1116
 4093 0af6 7047     		bx	lr	@
 4094              		.cfi_endproc
 4095              	.LFE40:
 4096              		.size	vTaskSetTaskNumber, .-vTaskSetTaskNumber
ARM GAS  /tmp/ccGXytas.s 			page 187


 4097              		.align	1
 4098              		.global	vTaskGetInfo
 4099              		.syntax unified
 4100              		.thumb
 4101              		.thumb_func
 4102              		.type	vTaskGetInfo, %function
 4103              	vTaskGetInfo:
 4104              	.LVL269:
 4105              	.LFB44:
3610:../freertos/tasks.c **** 	TCB_t *pxTCB;
 4106              		.loc 1 3610 2 is_stmt 1 view -0
 4107              		.cfi_startproc
 4108              		@ args = 0, pretend = 0, frame = 0
 4109              		@ frame_needed = 0, uses_anonymous_args = 0
3611:../freertos/tasks.c **** 
 4110              		.loc 1 3611 2 view .LVU1118
3614:../freertos/tasks.c **** 
 4111              		.loc 1 3614 3 view .LVU1119
 4112              	@ ../freertos/tasks.c:3610: 	{
3610:../freertos/tasks.c **** 	TCB_t *pxTCB;
 4113              		.loc 1 3610 2 is_stmt 0 view .LVU1120
 4114 0af8 70B5     		push	{r4, r5, r6, lr}	@
 4115              	.LCFI40:
 4116              		.cfi_def_cfa_offset 16
 4117              		.cfi_offset 4, -16
 4118              		.cfi_offset 5, -12
 4119              		.cfi_offset 6, -8
 4120              		.cfi_offset 14, -4
 4121              	@ ../freertos/tasks.c:3610: 	{
3610:../freertos/tasks.c **** 	TCB_t *pxTCB;
 4122              		.loc 1 3610 2 view .LVU1121
 4123 0afa 0C46     		mov	r4, r1	@ pxTaskStatus, tmp153
 4124 0afc 1646     		mov	r6, r2	@ xGetFreeStackSpace, tmp154
 4125              	@ ../freertos/tasks.c:3614: 		pxTCB = prvGetTCBFromHandle( xTask );
3614:../freertos/tasks.c **** 
 4126              		.loc 1 3614 11 view .LVU1122
 4127 0afe 0546     		mov	r5, r0	@ xTask, tmp152
 4128 0b00 08B9     		cbnz	r0, .L294	@ xTask,
 4129              	@ ../freertos/tasks.c:3614: 		pxTCB = prvGetTCBFromHandle( xTask );
3614:../freertos/tasks.c **** 
 4130              		.loc 1 3614 11 discriminator 1 view .LVU1123
 4131 0b02 1A4A     		ldr	r2, .L306	@ tmp131,
 4132              	.LVL270:
3614:../freertos/tasks.c **** 
 4133              		.loc 1 3614 11 discriminator 1 view .LVU1124
 4134 0b04 5568     		ldr	r5, [r2, #4]	@ xTask, pxCurrentTCB
 4135              	.LVL271:
 4136              	.L294:
3616:../freertos/tasks.c **** 		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 4137              		.loc 1 3616 3 is_stmt 1 view .LVU1125
 4138              	@ ../freertos/tasks.c:3617: 		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 
3617:../freertos/tasks.c **** 		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 4139              		.loc 1 3617 47 is_stmt 0 view .LVU1126
 4140 0b06 05F13402 		add	r2, r5, #52	@ tmp132, xTask,
 4141              	@ ../freertos/tasks.c:3617: 		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 
3617:../freertos/tasks.c **** 		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 4142              		.loc 1 3617 28 view .LVU1127
ARM GAS  /tmp/ccGXytas.s 			page 188


 4143 0b0a 6260     		str	r2, [r4, #4]	@ tmp132, pxTaskStatus_18(D)->pcTaskName
 4144              	@ ../freertos/tasks.c:3618: 		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
3618:../freertos/tasks.c **** 		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 4145              		.loc 1 3618 35 view .LVU1128
 4146 0b0c EA6A     		ldr	r2, [r5, #44]	@ iftmp.94_11->uxPriority, iftmp.94_11->uxPriority
 4147              	@ ../freertos/tasks.c:3645: 		if( eState != eInvalid )
3645:../freertos/tasks.c **** 		{
 4148              		.loc 1 3645 5 view .LVU1129
 4149 0b0e 052B     		cmp	r3, #5	@ eState,
 4150              	@ ../freertos/tasks.c:3618: 		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
3618:../freertos/tasks.c **** 		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 4151              		.loc 1 3618 35 view .LVU1130
 4152 0b10 2261     		str	r2, [r4, #16]	@ iftmp.94_11->uxPriority, pxTaskStatus_18(D)->uxCurrentPriority
 4153              	@ ../freertos/tasks.c:3619: 		pxTaskStatus->pxStackBase = pxTCB->pxStack;
3619:../freertos/tasks.c **** 		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 4154              		.loc 1 3619 29 view .LVU1131
 4155 0b12 2A6B     		ldr	r2, [r5, #48]	@ iftmp.94_11->pxStack, iftmp.94_11->pxStack
 4156              	@ ../freertos/tasks.c:3616: 		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
3616:../freertos/tasks.c **** 		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 4157              		.loc 1 3616 25 view .LVU1132
 4158 0b14 2560     		str	r5, [r4]	@ xTask, pxTaskStatus_18(D)->xHandle
3617:../freertos/tasks.c **** 		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 4159              		.loc 1 3617 3 is_stmt 1 view .LVU1133
3618:../freertos/tasks.c **** 		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 4160              		.loc 1 3618 3 view .LVU1134
3619:../freertos/tasks.c **** 		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 4161              		.loc 1 3619 3 view .LVU1135
 4162              	@ ../freertos/tasks.c:3619: 		pxTaskStatus->pxStackBase = pxTCB->pxStack;
3619:../freertos/tasks.c **** 		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 4163              		.loc 1 3619 29 is_stmt 0 view .LVU1136
 4164 0b16 E261     		str	r2, [r4, #28]	@ iftmp.94_11->pxStack, pxTaskStatus_18(D)->pxStackBase
3620:../freertos/tasks.c **** 
 4165              		.loc 1 3620 3 is_stmt 1 view .LVU1137
 4166              	@ ../freertos/tasks.c:3620: 		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
3620:../freertos/tasks.c **** 
 4167              		.loc 1 3620 29 is_stmt 0 view .LVU1138
 4168 0b18 6A6C     		ldr	r2, [r5, #68]	@ iftmp.94_11->uxTCBNumber, iftmp.94_11->uxTCBNumber
 4169 0b1a A260     		str	r2, [r4, #8]	@ iftmp.94_11->uxTCBNumber, pxTaskStatus_18(D)->xTaskNumber
3624:../freertos/tasks.c **** 		}
 4170              		.loc 1 3624 4 is_stmt 1 view .LVU1139
 4171              	@ ../freertos/tasks.c:3624: 			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
3624:../freertos/tasks.c **** 		}
 4172              		.loc 1 3624 33 is_stmt 0 view .LVU1140
 4173 0b1c EA6C     		ldr	r2, [r5, #76]	@ iftmp.94_11->uxBasePriority, iftmp.94_11->uxBasePriority
 4174 0b1e 6261     		str	r2, [r4, #20]	@ iftmp.94_11->uxBasePriority, pxTaskStatus_18(D)->uxBasePriority
3638:../freertos/tasks.c **** 		}
 4175              		.loc 1 3638 4 is_stmt 1 view .LVU1141
 4176              	@ ../freertos/tasks.c:3638: 			pxTaskStatus->ulRunTimeCounter = 0;
3638:../freertos/tasks.c **** 		}
 4177              		.loc 1 3638 35 is_stmt 0 view .LVU1142
 4178 0b20 4FF00002 		mov	r2, #0	@ tmp137,
 4179 0b24 A261     		str	r2, [r4, #24]	@ tmp137, pxTaskStatus_18(D)->ulRunTimeCounter
3645:../freertos/tasks.c **** 		{
 4180              		.loc 1 3645 3 is_stmt 1 view .LVU1143
 4181              	@ ../freertos/tasks.c:3645: 		if( eState != eInvalid )
3645:../freertos/tasks.c **** 		{
 4182              		.loc 1 3645 5 is_stmt 0 view .LVU1144
ARM GAS  /tmp/ccGXytas.s 			page 189


 4183 0b26 1AD0     		beq	.L295		@,
3647:../freertos/tasks.c **** 			{
 4184              		.loc 1 3647 4 is_stmt 1 view .LVU1145
 4185              	@ ../freertos/tasks.c:3647: 			if( pxTCB == pxCurrentTCB )
3647:../freertos/tasks.c **** 			{
 4186              		.loc 1 3647 14 is_stmt 0 view .LVU1146
 4187 0b28 1049     		ldr	r1, .L306	@ tmp138,
 4188              	.LVL272:
3647:../freertos/tasks.c **** 			{
 4189              		.loc 1 3647 14 view .LVU1147
 4190 0b2a 4968     		ldr	r1, [r1, #4]	@ pxCurrentTCB.95_6, pxCurrentTCB
 4191              	@ ../freertos/tasks.c:3647: 			if( pxTCB == pxCurrentTCB )
3647:../freertos/tasks.c **** 			{
 4192              		.loc 1 3647 6 view .LVU1148
 4193 0b2c A942     		cmp	r1, r5	@ pxCurrentTCB.95_6, xTask
 4194 0b2e 0AD1     		bne	.L296		@,
3649:../freertos/tasks.c **** 			}
 4195              		.loc 1 3649 5 is_stmt 1 view .LVU1149
 4196              	@ ../freertos/tasks.c:3649: 				pxTaskStatus->eCurrentState = eRunning;
3649:../freertos/tasks.c **** 			}
 4197              		.loc 1 3649 33 is_stmt 0 view .LVU1150
 4198 0b30 2273     		strb	r2, [r4, #12]	@ tmp137, pxTaskStatus_18(D)->eCurrentState
 4199              	.LVL273:
 4200              	.L297:
3682:../freertos/tasks.c **** 		{
 4201              		.loc 1 3682 3 is_stmt 1 view .LVU1151
 4202              	@ ../freertos/tasks.c:3682: 		if( xGetFreeStackSpace != pdFALSE )
3682:../freertos/tasks.c **** 		{
 4203              		.loc 1 3682 5 is_stmt 0 view .LVU1152
 4204 0b32 36B1     		cbz	r6, .L299	@ xGetFreeStackSpace,
3690:../freertos/tasks.c **** 			}
 4205              		.loc 1 3690 5 is_stmt 1 view .LVU1153
 4206              	.LBB140:
 4207              	.LBB141:
 4208              	@ ../freertos/tasks.c:3740: 	uint32_t ulCount = 0U;
3740:../freertos/tasks.c **** 
 4209              		.loc 1 3740 11 is_stmt 0 view .LVU1154
 4210 0b34 0022     		movs	r2, #0	@ ulCount,
 4211              	.LBE141:
 4212              	.LBE140:
 4213              	@ ../freertos/tasks.c:3690: 				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( 
3690:../freertos/tasks.c **** 			}
 4214              		.loc 1 3690 89 view .LVU1155
 4215 0b36 296B     		ldr	r1, [r5, #48]	@ _9, iftmp.94_11->pxStack
 4216              	.LVL274:
 4217              	.LBB144:
 4218              	.LBI140:
3738:../freertos/tasks.c **** 	{
 4219              		.loc 1 3738 32 is_stmt 1 view .LVU1156
 4220              	.LBB142:
3740:../freertos/tasks.c **** 
 4221              		.loc 1 3740 2 view .LVU1157
3742:../freertos/tasks.c **** 		{
 4222              		.loc 1 3742 3 view .LVU1158
 4223              	.L300:
3742:../freertos/tasks.c **** 		{
 4224              		.loc 1 3742 24 view .LVU1159
ARM GAS  /tmp/ccGXytas.s 			page 190


 4225 0b38 8B5C     		ldrb	r3, [r1, r2]	@ zero_extendqisi2	@ MEM[(const uint8_t *)_9 + ulCount_39 * 1], MEM[(const uint8
 4226 0b3a A52B     		cmp	r3, #165	@ MEM[(const uint8_t *)_9 + ulCount_39 * 1],
 4227 0b3c 14D0     		beq	.L301		@,
3748:../freertos/tasks.c **** 
 4228              		.loc 1 3748 3 view .LVU1160
 4229              	.LVL275:
3750:../freertos/tasks.c **** 	}
 4230              		.loc 1 3750 3 view .LVU1161
 4231              	@ ../freertos/tasks.c:3750: 		return ( configSTACK_DEPTH_TYPE ) ulCount;
3750:../freertos/tasks.c **** 	}
 4232              		.loc 1 3750 10 is_stmt 0 view .LVU1162
 4233 0b3e C2F38F06 		ubfx	r6, r2, #2, #16	@ _42, ulCount,,
 4234              	.LVL276:
 4235              	.L299:
3750:../freertos/tasks.c **** 	}
 4236              		.loc 1 3750 10 view .LVU1163
 4237              	.LBE142:
 4238              	.LBE144:
 4239              	@ ../freertos/tasks.c:3690: 				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( 
3690:../freertos/tasks.c **** 			}
 4240              		.loc 1 3690 40 discriminator 1 view .LVU1164
 4241 0b42 2684     		strh	r6, [r4, #32]	@ movhi	@ _42, pxTaskStatus_18(D)->usStackHighWaterMark
 4242              	@ ../freertos/tasks.c:3698: 	}
3698:../freertos/tasks.c **** 
 4243              		.loc 1 3698 2 view .LVU1165
 4244 0b44 70BD     		pop	{r4, r5, r6, pc}	@
 4245              	.LVL277:
 4246              	.L296:
3653:../freertos/tasks.c **** 
 4247              		.loc 1 3653 5 is_stmt 1 view .LVU1166
 4248              	@ ../freertos/tasks.c:3660: 					if( eState == eSuspended )
3660:../freertos/tasks.c **** 					{
 4249              		.loc 1 3660 8 is_stmt 0 view .LVU1167
 4250 0b46 032B     		cmp	r3, #3	@ eState,
 4251              	@ ../freertos/tasks.c:3653: 				pxTaskStatus->eCurrentState = eState;
3653:../freertos/tasks.c **** 
 4252              		.loc 1 3653 33 view .LVU1168
 4253 0b48 2373     		strb	r3, [r4, #12]	@ eState, pxTaskStatus_18(D)->eCurrentState
3660:../freertos/tasks.c **** 					{
 4254              		.loc 1 3660 6 is_stmt 1 view .LVU1169
 4255              	@ ../freertos/tasks.c:3660: 					if( eState == eSuspended )
3660:../freertos/tasks.c **** 					{
 4256              		.loc 1 3660 8 is_stmt 0 view .LVU1170
 4257 0b4a F2D1     		bne	.L297		@,
3662:../freertos/tasks.c **** 						{
 4258              		.loc 1 3662 7 is_stmt 1 view .LVU1171
 4259 0b4c FFF7FEFF 		bl	vTaskSuspendAll		@
 4260              	.LVL278:
3664:../freertos/tasks.c **** 							{
 4261              		.loc 1 3664 8 view .LVU1172
 4262              	@ ../freertos/tasks.c:3664: 							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NUL
3664:../freertos/tasks.c **** 							{
 4263              		.loc 1 3664 10 is_stmt 0 view .LVU1173
 4264 0b50 AB6A     		ldr	r3, [r5, #40]	@ iftmp.94_11->xEventListItem.pvContainer, iftmp.94_11->xEventListItem.pvContain
 4265 0b52 0BB1     		cbz	r3, .L298	@ iftmp.94_11->xEventListItem.pvContainer,
3666:../freertos/tasks.c **** 							}
 4266              		.loc 1 3666 9 is_stmt 1 view .LVU1174
ARM GAS  /tmp/ccGXytas.s 			page 191


 4267              	@ ../freertos/tasks.c:3666: 								pxTaskStatus->eCurrentState = eBlocked;
3666:../freertos/tasks.c **** 							}
 4268              		.loc 1 3666 37 is_stmt 0 view .LVU1175
 4269 0b54 0223     		movs	r3, #2	@ tmp143,
 4270 0b56 2373     		strb	r3, [r4, #12]	@ tmp143, pxTaskStatus_18(D)->eCurrentState
 4271              	.L298:
3669:../freertos/tasks.c **** 					}
 4272              		.loc 1 3669 7 is_stmt 1 view .LVU1176
 4273              	@ ../freertos/tasks.c:3669: 						( void ) xTaskResumeAll();
3669:../freertos/tasks.c **** 					}
 4274              		.loc 1 3669 16 is_stmt 0 view .LVU1177
 4275 0b58 FFF7FEFF 		bl	xTaskResumeAll		@
 4276              	.LVL279:
 4277 0b5c E9E7     		b	.L297		@
 4278              	.LVL280:
 4279              	.L295:
3677:../freertos/tasks.c **** 		}
 4280              		.loc 1 3677 4 is_stmt 1 view .LVU1178
 4281              	@ ../freertos/tasks.c:3677: 			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
3677:../freertos/tasks.c **** 		}
 4282              		.loc 1 3677 34 is_stmt 0 view .LVU1179
 4283 0b5e 2846     		mov	r0, r5	@, xTask
 4284 0b60 FFF7FEFF 		bl	eTaskGetState		@
 4285              	.LVL281:
 4286              	@ ../freertos/tasks.c:3677: 			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
3677:../freertos/tasks.c **** 		}
 4287              		.loc 1 3677 32 discriminator 1 view .LVU1180
 4288 0b64 2073     		strb	r0, [r4, #12]	@ tmp156, pxTaskStatus_18(D)->eCurrentState
 4289 0b66 E4E7     		b	.L297		@
 4290              	.LVL282:
 4291              	.L301:
 4292              	.LBB145:
 4293              	.LBB143:
3744:../freertos/tasks.c **** 			ulCount++;
 4294              		.loc 1 3744 4 is_stmt 1 view .LVU1181
3745:../freertos/tasks.c **** 		}
 4295              		.loc 1 3745 4 view .LVU1182
 4296              	@ ../freertos/tasks.c:3745: 			ulCount++;
3745:../freertos/tasks.c **** 		}
 4297              		.loc 1 3745 11 is_stmt 0 view .LVU1183
 4298 0b68 0132     		adds	r2, r2, #1	@ ulCount, ulCount,
 4299              	.LVL283:
3745:../freertos/tasks.c **** 		}
 4300              		.loc 1 3745 11 view .LVU1184
 4301 0b6a E5E7     		b	.L300		@
 4302              	.L307:
 4303              		.align	2
 4304              	.L306:
 4305 0b6c 00000000 		.word	.LANCHOR0
 4306              	.LBE143:
 4307              	.LBE145:
 4308              		.cfi_endproc
 4309              	.LFE44:
 4310              		.size	vTaskGetInfo, .-vTaskGetInfo
 4311              		.align	1
 4312              		.syntax unified
 4313              		.thumb
ARM GAS  /tmp/ccGXytas.s 			page 192


 4314              		.thumb_func
 4315              		.type	prvListTasksWithinSingleList, %function
 4316              	prvListTasksWithinSingleList:
 4317              	.LVL284:
 4318              	.LFB45:
3706:../freertos/tasks.c **** 	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
 4319              		.loc 1 3706 2 is_stmt 1 view -0
 4320              		.cfi_startproc
 4321              		@ args = 0, pretend = 0, frame = 0
 4322              		@ frame_needed = 0, uses_anonymous_args = 0
3707:../freertos/tasks.c **** 	UBaseType_t uxTask = 0;
 4323              		.loc 1 3707 22 view .LVU1186
3708:../freertos/tasks.c **** 
 4324              		.loc 1 3708 2 view .LVU1187
3710:../freertos/tasks.c **** 		{
 4325              		.loc 1 3710 3 view .LVU1188
 4326              	@ ../freertos/tasks.c:3706: 	{
3706:../freertos/tasks.c **** 	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
 4327              		.loc 1 3706 2 is_stmt 0 view .LVU1189
 4328 0b70 2DE9F84F 		push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 4329              	.LCFI41:
 4330              		.cfi_def_cfa_offset 40
 4331              		.cfi_offset 3, -40
 4332              		.cfi_offset 4, -36
 4333              		.cfi_offset 5, -32
 4334              		.cfi_offset 6, -28
 4335              		.cfi_offset 7, -24
 4336              		.cfi_offset 8, -20
 4337              		.cfi_offset 9, -16
 4338              		.cfi_offset 10, -12
 4339              		.cfi_offset 11, -8
 4340              		.cfi_offset 14, -4
 4341              	@ ../freertos/tasks.c:3710: 		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
3710:../freertos/tasks.c **** 		{
 4342              		.loc 1 3710 7 view .LVU1190
 4343 0b74 0D68     		ldr	r5, [r1]	@ <retval>, pxList_7(D)->uxNumberOfItems
 4344              	@ ../freertos/tasks.c:3706: 	{
3706:../freertos/tasks.c **** 	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
 4345              		.loc 1 3706 2 view .LVU1191
 4346 0b76 0646     		mov	r6, r0	@ pxTaskStatusArray, tmp144
 4347 0b78 0C46     		mov	r4, r1	@ pxList, tmp145
 4348 0b7a 1746     		mov	r7, r2	@ eState, tmp146
 4349              	@ ../freertos/tasks.c:3710: 		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
3710:../freertos/tasks.c **** 		{
 4350              		.loc 1 3710 5 view .LVU1192
 4351 0b7c 2DB3     		cbz	r5, .L308	@ <retval>,
 4352              	.LVL285:
 4353              	.LBB150:
 4354              	.LBI150:
3705:../freertos/tasks.c **** 	{
 4355              		.loc 1 3705 21 is_stmt 1 view .LVU1193
 4356              	.LBB151:
 4357              	.LBB152:
3712:../freertos/tasks.c **** 
 4358              		.loc 1 3712 4 view .LVU1194
3712:../freertos/tasks.c **** 
 4359              		.loc 1 3712 4 view .LVU1195
ARM GAS  /tmp/ccGXytas.s 			page 193


 4360              	.LBE152:
 4361              	@ ../freertos/tasks.c:3708: 	UBaseType_t uxTask = 0;
3708:../freertos/tasks.c **** 
 4362              		.loc 1 3708 14 is_stmt 0 view .LVU1196
 4363 0b7e 0025     		movs	r5, #0	@ <retval>,
 4364              	@ ../freertos/tasks.c:3721: 				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxT
3721:../freertos/tasks.c **** 				uxTask++;
 4365              		.loc 1 3721 5 view .LVU1197
 4366 0b80 4FF0240B 		mov	fp, #36	@ tmp140,
 4367              	.LBB153:
 4368              	@ ../freertos/tasks.c:3712: 			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 voi
3712:../freertos/tasks.c **** 
 4369              		.loc 1 3712 4 view .LVU1198
 4370 0b84 4B68     		ldr	r3, [r1, #4]	@ pxList_7(D)->pxIndex, pxList_7(D)->pxIndex
 4371 0b86 01F10808 		add	r8, r1, #8	@ _12, pxList,
 4372 0b8a 5B68     		ldr	r3, [r3, #4]	@ _11, _10->pxNext
 4373 0b8c 4345     		cmp	r3, r8	@ _11, _12
 4374 0b8e 4B60     		str	r3, [r1, #4]	@ _11, pxList_7(D)->pxIndex
3712:../freertos/tasks.c **** 
 4375              		.loc 1 3712 4 is_stmt 1 view .LVU1199
3712:../freertos/tasks.c **** 
 4376              		.loc 1 3712 4 discriminator 1 view .LVU1200
 4377 0b90 04BF     		itt	eq
 4378 0b92 CB68     		ldreq	r3, [r1, #12]	@ MEM[(struct ListItem_t *)pxList_7(D) + 8B].pxNext, MEM[(struct ListItem_t *)
 4379 0b94 4B60     		streq	r3, [r1, #4]	@ MEM[(struct ListItem_t *)pxList_7(D) + 8B].pxNext, pxList_7(D)->pxIndex
3712:../freertos/tasks.c **** 
 4380              		.loc 1 3712 4 discriminator 3 view .LVU1201
 4381 0b96 4B68     		ldr	r3, [r1, #4]	@ pxList_7(D)->pxIndex, pxList_7(D)->pxIndex
 4382 0b98 D3F80CA0 		ldr	r10, [r3, #12]	@ pxFirstTCB, _14->pvOwner
 4383              	.LVL286:
 4384              	.L312:
3712:../freertos/tasks.c **** 
 4385              		.loc 1 3712 4 is_stmt 0 discriminator 3 view .LVU1202
 4386              	.LBE153:
3712:../freertos/tasks.c **** 
 4387              		.loc 1 3712 53 is_stmt 1 discriminator 4 view .LVU1203
3718:../freertos/tasks.c **** 			{
 4388              		.loc 1 3718 4 view .LVU1204
 4389              	.LBB154:
3720:../freertos/tasks.c **** 				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 4390              		.loc 1 3720 5 view .LVU1205
3720:../freertos/tasks.c **** 				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 4391              		.loc 1 3720 5 view .LVU1206
 4392 0b9c 6368     		ldr	r3, [r4, #4]	@ pxList_7(D)->pxIndex, pxList_7(D)->pxIndex
 4393              	.LBE154:
 4394              	@ ../freertos/tasks.c:3721: 				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxT
3721:../freertos/tasks.c **** 				uxTask++;
 4395              		.loc 1 3721 5 is_stmt 0 view .LVU1207
 4396 0b9e 0BFB0561 		mla	r1, fp, r5, r6	@, tmp140, <retval>, pxTaskStatusArray
 4397              	.LBB155:
 4398              	@ ../freertos/tasks.c:3720: 				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 voi
3720:../freertos/tasks.c **** 				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 4399              		.loc 1 3720 5 view .LVU1208
 4400 0ba2 5B68     		ldr	r3, [r3, #4]	@ _17, _16->pxNext
 4401              	.LBE155:
 4402              	@ ../freertos/tasks.c:3721: 				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxT
3721:../freertos/tasks.c **** 				uxTask++;
ARM GAS  /tmp/ccGXytas.s 			page 194


 4403              		.loc 1 3721 5 view .LVU1209
 4404 0ba4 0122     		movs	r2, #1	@,
 4405              	.LBB156:
 4406              	@ ../freertos/tasks.c:3720: 				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 voi
3720:../freertos/tasks.c **** 				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 4407              		.loc 1 3720 5 view .LVU1210
 4408 0ba6 9845     		cmp	r8, r3	@ _12, _17
 4409 0ba8 6360     		str	r3, [r4, #4]	@ _17, pxList_7(D)->pxIndex
3720:../freertos/tasks.c **** 				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 4410              		.loc 1 3720 5 is_stmt 1 view .LVU1211
3720:../freertos/tasks.c **** 				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 4411              		.loc 1 3720 5 discriminator 1 view .LVU1212
 4412 0baa 08BF     		it	eq
 4413 0bac D8F80430 		ldreq	r3, [r8, #4]	@ MEM[(struct ListItem_t *)_17].pxNext, MEM[(struct ListItem_t *)_17].pxNext
 4414              	.LBE156:
 4415              	@ ../freertos/tasks.c:3722: 				uxTask++;
3722:../freertos/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
 4416              		.loc 1 3722 11 is_stmt 0 view .LVU1213
 4417 0bb0 05F10105 		add	r5, r5, #1	@ <retval>, <retval>,
 4418              	.LVL287:
 4419              	.LBB157:
 4420              	@ ../freertos/tasks.c:3720: 				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 voi
3720:../freertos/tasks.c **** 				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 4421              		.loc 1 3720 5 discriminator 1 view .LVU1214
 4422 0bb4 08BF     		it	eq
 4423 0bb6 6360     		streq	r3, [r4, #4]	@ MEM[(struct ListItem_t *)_17].pxNext, pxList_7(D)->pxIndex
3720:../freertos/tasks.c **** 				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 4424              		.loc 1 3720 5 is_stmt 1 discriminator 3 view .LVU1215
 4425 0bb8 6368     		ldr	r3, [r4, #4]	@ pxList_7(D)->pxIndex, pxList_7(D)->pxIndex
 4426 0bba D3F80C90 		ldr	r9, [r3, #12]	@ pxNextTCB, _19->pvOwner
 4427              	.LVL288:
3720:../freertos/tasks.c **** 				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 4428              		.loc 1 3720 5 is_stmt 0 discriminator 3 view .LVU1216
 4429              	.LBE157:
3720:../freertos/tasks.c **** 				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 4430              		.loc 1 3720 53 is_stmt 1 discriminator 3 view .LVU1217
3721:../freertos/tasks.c **** 				uxTask++;
 4431              		.loc 1 3721 5 view .LVU1218
 4432 0bbe 3B46     		mov	r3, r7	@, eState
 4433 0bc0 4846     		mov	r0, r9	@, pxNextTCB
 4434 0bc2 FFF7FEFF 		bl	vTaskGetInfo		@
 4435              	.LVL289:
3722:../freertos/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
 4436              		.loc 1 3722 5 view .LVU1219
3723:../freertos/tasks.c **** 		}
 4437              		.loc 1 3723 23 view .LVU1220
 4438 0bc6 CA45     		cmp	r10, r9	@ pxFirstTCB, pxNextTCB
 4439 0bc8 E8D1     		bne	.L312		@,
 4440              	.LVL290:
 4441              	.L308:
3723:../freertos/tasks.c **** 		}
 4442              		.loc 1 3723 23 is_stmt 0 view .LVU1221
 4443              	.LBE151:
 4444              	.LBE150:
 4445              	@ ../freertos/tasks.c:3731: 	}
3731:../freertos/tasks.c **** 
 4446              		.loc 1 3731 2 view .LVU1222
ARM GAS  /tmp/ccGXytas.s 			page 195


 4447 0bca 2846     		mov	r0, r5	@, <retval>
 4448 0bcc BDE8F88F 		pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
3731:../freertos/tasks.c **** 
 4449              		.loc 1 3731 2 view .LVU1223
 4450              		.cfi_endproc
 4451              	.LFE45:
 4452              		.size	prvListTasksWithinSingleList, .-prvListTasksWithinSingleList
 4453              		.align	1
 4454              		.global	uxTaskGetSystemState
 4455              		.syntax unified
 4456              		.thumb
 4457              		.thumb_func
 4458              		.type	uxTaskGetSystemState, %function
 4459              	uxTaskGetSystemState:
 4460              	.LVL291:
 4461              	.LFB27:
2486:../freertos/tasks.c **** 	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 4462              		.loc 1 2486 2 is_stmt 1 view -0
 4463              		.cfi_startproc
 4464              		@ args = 0, pretend = 0, frame = 0
 4465              		@ frame_needed = 0, uses_anonymous_args = 0
2487:../freertos/tasks.c **** 
 4466              		.loc 1 2487 2 view .LVU1225
2489:../freertos/tasks.c **** 		{
 4467              		.loc 1 2489 3 view .LVU1226
 4468              	@ ../freertos/tasks.c:2486: 	{
2486:../freertos/tasks.c **** 	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 4469              		.loc 1 2486 2 is_stmt 0 view .LVU1227
 4470 0bd0 2DE9F84F 		push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 4471              	.LCFI42:
 4472              		.cfi_def_cfa_offset 40
 4473              		.cfi_offset 3, -40
 4474              		.cfi_offset 4, -36
 4475              		.cfi_offset 5, -32
 4476              		.cfi_offset 6, -28
 4477              		.cfi_offset 7, -24
 4478              		.cfi_offset 8, -20
 4479              		.cfi_offset 9, -16
 4480              		.cfi_offset 10, -12
 4481              		.cfi_offset 11, -8
 4482              		.cfi_offset 14, -4
 4483              	@ ../freertos/tasks.c:2492: 			if( uxArraySize >= uxCurrentNumberOfTasks )
2492:../freertos/tasks.c **** 			{
 4484              		.loc 1 2492 20 view .LVU1228
 4485 0bd4 DFF88C90 		ldr	r9, .L324	@ tmp145,
 4486              	@ ../freertos/tasks.c:2486: 	{
2486:../freertos/tasks.c **** 	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 4487              		.loc 1 2486 2 view .LVU1229
 4488 0bd8 9046     		mov	r8, r2	@ pulTotalRunTime, tmp179
 4489              	@ ../freertos/tasks.c:2489: 		vTaskSuspendAll();
2489:../freertos/tasks.c **** 		{
 4490              		.loc 1 2489 3 view .LVU1230
 4491 0bda FFF7FEFF 		bl	vTaskSuspendAll		@
 4492              	.LVL292:
2492:../freertos/tasks.c **** 			{
 4493              		.loc 1 2492 4 is_stmt 1 view .LVU1231
 4494              	@ ../freertos/tasks.c:2492: 			if( uxArraySize >= uxCurrentNumberOfTasks )
ARM GAS  /tmp/ccGXytas.s 			page 196


2492:../freertos/tasks.c **** 			{
 4495              		.loc 1 2492 20 is_stmt 0 view .LVU1232
 4496 0bde D9F84030 		ldr	r3, [r9, #64]	@ uxCurrentNumberOfTasks.63_1, uxCurrentNumberOfTasks
 4497              	@ ../freertos/tasks.c:2486: 	{
2486:../freertos/tasks.c **** 	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 4498              		.loc 1 2486 2 view .LVU1233
 4499 0be2 0546     		mov	r5, r0	@ pxTaskStatusArray, tmp177
 4500              	@ ../freertos/tasks.c:2492: 			if( uxArraySize >= uxCurrentNumberOfTasks )
2492:../freertos/tasks.c **** 			{
 4501              		.loc 1 2492 6 view .LVU1234
 4502 0be4 8B42     		cmp	r3, r1	@ uxCurrentNumberOfTasks.63_1, uxArraySize
 4503 0be6 3AD8     		bhi	.L322		@,
 4504              	@ ../freertos/tasks.c:2487: 	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
2487:../freertos/tasks.c **** 
 4505              		.loc 1 2487 26 view .LVU1235
 4506 0be8 0526     		movs	r6, #5	@ uxQueue,
 4507              	@ ../freertos/tasks.c:2487: 	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
2487:../freertos/tasks.c **** 
 4508              		.loc 1 2487 14 view .LVU1236
 4509 0bea 0024     		movs	r4, #0	@ uxTask,
 4510              	@ ../freertos/tasks.c:2499: 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTa
2499:../freertos/tasks.c **** 
 4511              		.loc 1 2499 16 view .LVU1237
 4512 0bec 4FF0140B 		mov	fp, #20	@ tmp147,
 4513              	@ ../freertos/tasks.c:2499: 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTa
2499:../freertos/tasks.c **** 
 4514              		.loc 1 2499 66 view .LVU1238
 4515 0bf0 2427     		movs	r7, #36	@ tmp152,
 4516              	@ ../freertos/tasks.c:2499: 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTa
2499:../freertos/tasks.c **** 
 4517              		.loc 1 2499 16 view .LVU1239
 4518 0bf2 09F1480A 		add	r10, r9, #72	@ tmp149, tmp145,
 4519              	.LVL293:
 4520              	.L319:
2496:../freertos/tasks.c **** 				{
 4521              		.loc 1 2496 5 is_stmt 1 view .LVU1240
2498:../freertos/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists
 4522              		.loc 1 2498 6 view .LVU1241
 4523              	@ ../freertos/tasks.c:2498: 					uxQueue--;
2498:../freertos/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists
 4524              		.loc 1 2498 13 is_stmt 0 view .LVU1242
 4525 0bf6 013E     		subs	r6, r6, #1	@ uxQueue, uxQueue,
 4526              	.LVL294:
2499:../freertos/tasks.c **** 
 4527              		.loc 1 2499 6 is_stmt 1 view .LVU1243
 4528              	@ ../freertos/tasks.c:2499: 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTa
2499:../freertos/tasks.c **** 
 4529              		.loc 1 2499 16 is_stmt 0 view .LVU1244
 4530 0bf8 07FB0450 		mla	r0, r7, r4, r5	@, tmp152, uxTask, pxTaskStatusArray
 4531 0bfc 0122     		movs	r2, #1	@,
 4532 0bfe 0BFB06A1 		mla	r1, fp, r6, r10	@, tmp147, uxQueue, tmp149
 4533 0c02 FFF7B5FF 		bl	prvListTasksWithinSingleList		@
 4534              	.LVL295:
 4535              	@ ../freertos/tasks.c:2499: 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTa
2499:../freertos/tasks.c **** 
 4536              		.loc 1 2499 13 discriminator 1 view .LVU1245
 4537 0c06 0444     		add	r4, r4, r0	@ uxTask, tmp180
ARM GAS  /tmp/ccGXytas.s 			page 197


 4538              	.LVL296:
2501:../freertos/tasks.c **** 
 4539              		.loc 1 2501 22 is_stmt 1 discriminator 1 view .LVU1246
 4540 0c08 002E     		cmp	r6, #0	@ uxQueue
 4541 0c0a F4D1     		bne	.L319	@
2505:../freertos/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverfl
 4542              		.loc 1 2505 5 view .LVU1247
 4543              	@ ../freertos/tasks.c:2505: 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTas
2505:../freertos/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverfl
 4544              		.loc 1 2505 15 is_stmt 0 view .LVU1248
 4545 0c0c 0222     		movs	r2, #2	@,
 4546 0c0e 07FB0450 		mla	r0, r7, r4, r5	@, tmp152, uxTask, pxTaskStatusArray
 4547 0c12 D9F82410 		ldr	r1, [r9, #36]	@ pxDelayedTaskList.64_7, pxDelayedTaskList
 4548 0c16 FFF7ABFF 		bl	prvListTasksWithinSingleList		@
 4549              	.LVL297:
 4550              	@ ../freertos/tasks.c:2505: 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTas
2505:../freertos/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverfl
 4551              		.loc 1 2505 12 discriminator 1 view .LVU1249
 4552 0c1a 0444     		add	r4, r4, r0	@ uxTask, tmp181
 4553              	.LVL298:
2506:../freertos/tasks.c **** 
 4554              		.loc 1 2506 5 is_stmt 1 view .LVU1250
 4555              	@ ../freertos/tasks.c:2506: 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTas
2506:../freertos/tasks.c **** 
 4556              		.loc 1 2506 15 is_stmt 0 view .LVU1251
 4557 0c1c 0222     		movs	r2, #2	@,
 4558 0c1e 07FB0450 		mla	r0, r7, r4, r5	@, tmp152, uxTask, pxTaskStatusArray
 4559 0c22 D9F82010 		ldr	r1, [r9, #32]	@ pxOverflowDelayedTaskList.65_10, pxOverflowDelayedTaskList
 4560 0c26 FFF7A3FF 		bl	prvListTasksWithinSingleList		@
 4561              	.LVL299:
 4562              	@ ../freertos/tasks.c:2506: 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTas
2506:../freertos/tasks.c **** 
 4563              		.loc 1 2506 12 discriminator 1 view .LVU1252
 4564 0c2a 0444     		add	r4, r4, r0	@ uxTask, tmp182
 4565              	.LVL300:
2512:../freertos/tasks.c **** 				}
 4566              		.loc 1 2512 6 is_stmt 1 view .LVU1253
 4567              	@ ../freertos/tasks.c:2512: 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTa
2512:../freertos/tasks.c **** 				}
 4568              		.loc 1 2512 16 is_stmt 0 view .LVU1254
 4569 0c2c 0422     		movs	r2, #4	@,
 4570 0c2e 07FB0450 		mla	r0, r7, r4, r5	@, tmp152, uxTask, pxTaskStatusArray
 4571 0c32 0D49     		ldr	r1, .L324+4	@,
 4572 0c34 FFF79CFF 		bl	prvListTasksWithinSingleList		@
 4573              	.LVL301:
 4574              	@ ../freertos/tasks.c:2512: 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTa
2512:../freertos/tasks.c **** 				}
 4575              		.loc 1 2512 13 discriminator 1 view .LVU1255
 4576 0c38 0444     		add	r4, r4, r0	@ uxTask, tmp183
 4577              	.LVL302:
2520:../freertos/tasks.c **** 				}
 4578              		.loc 1 2520 6 is_stmt 1 view .LVU1256
 4579              	@ ../freertos/tasks.c:2520: 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTa
2520:../freertos/tasks.c **** 				}
 4580              		.loc 1 2520 16 is_stmt 0 view .LVU1257
 4581 0c3a 0322     		movs	r2, #3	@,
 4582 0c3c 07FB0450 		mla	r0, r7, r4, r5	@, tmp152, uxTask, pxTaskStatusArray
ARM GAS  /tmp/ccGXytas.s 			page 198


 4583 0c40 0A49     		ldr	r1, .L324+8	@,
 4584 0c42 FFF795FF 		bl	prvListTasksWithinSingleList		@
 4585              	.LVL303:
2537:../freertos/tasks.c **** 					{
 4586              		.loc 1 2537 6 is_stmt 1 view .LVU1258
 4587              	@ ../freertos/tasks.c:2537: 					if( pulTotalRunTime != NULL )
2537:../freertos/tasks.c **** 					{
 4588              		.loc 1 2537 8 is_stmt 0 view .LVU1259
 4589 0c46 B8F1000F 		cmp	r8, #0	@ pulTotalRunTime
 4590 0c4a 05D1     		bne	.L320	@
 4591              	.L321:
 4592              	@ ../freertos/tasks.c:2520: 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTa
2520:../freertos/tasks.c **** 				}
 4593              		.loc 1 2520 13 discriminator 1 view .LVU1260
 4594 0c4c 0444     		add	r4, r4, r0	@ <retval>, _39
 4595              	.LVL304:
 4596              	.L318:
2546:../freertos/tasks.c **** 			}
 4597              		.loc 1 2546 29 is_stmt 1 view .LVU1261
2549:../freertos/tasks.c **** 
 4598              		.loc 1 2549 3 view .LVU1262
 4599              	@ ../freertos/tasks.c:2549: 		( void ) xTaskResumeAll();
2549:../freertos/tasks.c **** 
 4600              		.loc 1 2549 12 is_stmt 0 view .LVU1263
 4601 0c4e FFF7FEFF 		bl	xTaskResumeAll		@
 4602              	.LVL305:
2551:../freertos/tasks.c **** 	}
 4603              		.loc 1 2551 3 is_stmt 1 view .LVU1264
 4604              	@ ../freertos/tasks.c:2552: 	}
2552:../freertos/tasks.c **** 
 4605              		.loc 1 2552 2 is_stmt 0 view .LVU1265
 4606 0c52 2046     		mov	r0, r4	@, <retval>
 4607 0c54 BDE8F88F 		pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 4608              	.LVL306:
 4609              	.L320:
2539:../freertos/tasks.c **** 					}
 4610              		.loc 1 2539 7 is_stmt 1 view .LVU1266
 4611              	@ ../freertos/tasks.c:2539: 						*pulTotalRunTime = 0;
2539:../freertos/tasks.c **** 					}
 4612              		.loc 1 2539 24 is_stmt 0 view .LVU1267
 4613 0c58 C8F80060 		str	r6, [r8]	@ uxQueue, *pulTotalRunTime_41(D)
 4614 0c5c F6E7     		b	.L321		@
 4615              	.LVL307:
 4616              	.L322:
 4617              	@ ../freertos/tasks.c:2487: 	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
2487:../freertos/tasks.c **** 
 4618              		.loc 1 2487 14 view .LVU1268
 4619 0c5e 0024     		movs	r4, #0	@ <retval>,
 4620 0c60 F5E7     		b	.L318		@
 4621              	.L325:
 4622 0c62 00BF     		.align	2
 4623              	.L324:
 4624 0c64 00000000 		.word	.LANCHOR0
 4625 0c68 2C000000 		.word	.LANCHOR0+44
 4626 0c6c 0C000000 		.word	.LANCHOR0+12
 4627              		.cfi_endproc
 4628              	.LFE27:
ARM GAS  /tmp/ccGXytas.s 			page 199


 4629              		.size	uxTaskGetSystemState, .-uxTaskGetSystemState
 4630              		.align	1
 4631              		.global	xTaskGetCurrentTaskHandle
 4632              		.syntax unified
 4633              		.thumb
 4634              		.thumb_func
 4635              		.type	xTaskGetCurrentTaskHandle, %function
 4636              	xTaskGetCurrentTaskHandle:
 4637              	.LFB49:
3907:../freertos/tasks.c **** 	TaskHandle_t xReturn;
 4638              		.loc 1 3907 2 is_stmt 1 view -0
 4639              		.cfi_startproc
 4640              		@ args = 0, pretend = 0, frame = 0
 4641              		@ frame_needed = 0, uses_anonymous_args = 0
 4642              		@ link register save eliminated.
3908:../freertos/tasks.c **** 
 4643              		.loc 1 3908 2 view .LVU1270
3913:../freertos/tasks.c **** 
 4644              		.loc 1 3913 3 view .LVU1271
 4645              	@ ../freertos/tasks.c:3913: 		xReturn = pxCurrentTCB;
3913:../freertos/tasks.c **** 
 4646              		.loc 1 3913 11 is_stmt 0 view .LVU1272
 4647 0c70 014B     		ldr	r3, .L327	@ tmp115,
 4648 0c72 5868     		ldr	r0, [r3, #4]	@ <retval>, pxCurrentTCB
 4649              	.LVL308:
3915:../freertos/tasks.c **** 	}
 4650              		.loc 1 3915 3 is_stmt 1 view .LVU1273
 4651              	@ ../freertos/tasks.c:3916: 	}
3916:../freertos/tasks.c **** 
 4652              		.loc 1 3916 2 is_stmt 0 view .LVU1274
 4653 0c74 7047     		bx	lr	@
 4654              	.L328:
 4655 0c76 00BF     		.align	2
 4656              	.L327:
 4657 0c78 00000000 		.word	.LANCHOR0
 4658              		.cfi_endproc
 4659              	.LFE49:
 4660              		.size	xTaskGetCurrentTaskHandle, .-xTaskGetCurrentTaskHandle
 4661              		.align	1
 4662              		.global	xTaskGetSchedulerState
 4663              		.syntax unified
 4664              		.thumb
 4665              		.thumb_func
 4666              		.type	xTaskGetSchedulerState, %function
 4667              	xTaskGetSchedulerState:
 4668              	.LFB50:
3924:../freertos/tasks.c **** 	BaseType_t xReturn;
 4669              		.loc 1 3924 2 is_stmt 1 view -0
 4670              		.cfi_startproc
 4671              		@ args = 0, pretend = 0, frame = 0
 4672              		@ frame_needed = 0, uses_anonymous_args = 0
 4673              		@ link register save eliminated.
3925:../freertos/tasks.c **** 
 4674              		.loc 1 3925 2 view .LVU1276
3927:../freertos/tasks.c **** 		{
 4675              		.loc 1 3927 3 view .LVU1277
 4676              	@ ../freertos/tasks.c:3927: 		if( xSchedulerRunning == pdFALSE )
ARM GAS  /tmp/ccGXytas.s 			page 200


3927:../freertos/tasks.c **** 		{
 4677              		.loc 1 3927 25 is_stmt 0 view .LVU1278
 4678 0c7c 064B     		ldr	r3, .L332	@ tmp119,
 4679 0c7e D3F8E820 		ldr	r2, [r3, #232]	@ xSchedulerRunning.96_1, xSchedulerRunning
 4680              	@ ../freertos/tasks.c:3927: 		if( xSchedulerRunning == pdFALSE )
3927:../freertos/tasks.c **** 		{
 4681              		.loc 1 3927 5 view .LVU1279
 4682 0c82 32B1     		cbz	r2, .L331	@ xSchedulerRunning.96_1,
3933:../freertos/tasks.c **** 			{
 4683              		.loc 1 3933 4 is_stmt 1 view .LVU1280
 4684              	@ ../freertos/tasks.c:3933: 			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
3933:../freertos/tasks.c **** 			{
 4685              		.loc 1 3933 29 is_stmt 0 view .LVU1281
 4686 0c84 D3F8F000 		ldr	r0, [r3, #240]	@ uxSchedulerSuspended.97_2, uxSchedulerSuspended
 4687              	@ ../freertos/tasks.c:3933: 			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
3933:../freertos/tasks.c **** 			{
 4688              		.loc 1 3933 6 view .LVU1282
 4689 0c88 B0FA80F0 		clz	r0, r0	@ tmp122, uxSchedulerSuspended.97_2
 4690 0c8c 4009     		lsrs	r0, r0, #5	@ tmp122, tmp122,
 4691 0c8e 4000     		lsls	r0, r0, #1	@ <retval>, tmp122,
 4692 0c90 7047     		bx	lr	@
 4693              	.L331:
 4694              	@ ../freertos/tasks.c:3929: 			xReturn = taskSCHEDULER_NOT_STARTED;
3929:../freertos/tasks.c **** 		}
 4695              		.loc 1 3929 12 view .LVU1283
 4696 0c92 0120     		movs	r0, #1	@ <retval>,
 4697              	.LVL309:
3943:../freertos/tasks.c **** 	}
 4698              		.loc 1 3943 3 is_stmt 1 view .LVU1284
 4699              	@ ../freertos/tasks.c:3944: 	}
3944:../freertos/tasks.c **** 
 4700              		.loc 1 3944 2 is_stmt 0 view .LVU1285
 4701 0c94 7047     		bx	lr	@
 4702              	.L333:
 4703 0c96 00BF     		.align	2
 4704              	.L332:
 4705 0c98 00000000 		.word	.LANCHOR0
 4706              		.cfi_endproc
 4707              	.LFE50:
 4708              		.size	xTaskGetSchedulerState, .-xTaskGetSchedulerState
 4709              		.align	1
 4710              		.global	xTaskPriorityInherit
 4711              		.syntax unified
 4712              		.thumb
 4713              		.thumb_func
 4714              		.type	xTaskPriorityInherit, %function
 4715              	xTaskPriorityInherit:
 4716              	.LVL310:
 4717              	.LFB51:
3952:../freertos/tasks.c **** 	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 4718              		.loc 1 3952 2 is_stmt 1 view -0
 4719              		.cfi_startproc
 4720              		@ args = 0, pretend = 0, frame = 0
 4721              		@ frame_needed = 0, uses_anonymous_args = 0
3953:../freertos/tasks.c **** 	BaseType_t xReturn = pdFALSE;
 4722              		.loc 1 3953 2 view .LVU1287
3954:../freertos/tasks.c **** 
ARM GAS  /tmp/ccGXytas.s 			page 201


 4723              		.loc 1 3954 2 view .LVU1288
3959:../freertos/tasks.c **** 		{
 4724              		.loc 1 3959 3 view .LVU1289
 4725              	@ ../freertos/tasks.c:3952: 	{
3952:../freertos/tasks.c **** 	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 4726              		.loc 1 3952 2 is_stmt 0 view .LVU1290
 4727 0c9c 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}	@
 4728              	.LCFI43:
 4729              		.cfi_def_cfa_offset 24
 4730              		.cfi_offset 4, -24
 4731              		.cfi_offset 5, -20
 4732              		.cfi_offset 6, -16
 4733              		.cfi_offset 7, -12
 4734              		.cfi_offset 8, -8
 4735              		.cfi_offset 14, -4
 4736              	@ ../freertos/tasks.c:3959: 		if( pxMutexHolder != NULL )
3959:../freertos/tasks.c **** 		{
 4737              		.loc 1 3959 5 view .LVU1291
 4738 0ca0 0446     		mov	r4, r0	@ pxMutexHolder, tmp189
 4739 0ca2 0028     		cmp	r0, #0	@ pxMutexHolder
 4740 0ca4 35D0     		beq	.L334	@
3964:../freertos/tasks.c **** 			{
 4741              		.loc 1 3964 4 is_stmt 1 view .LVU1292
 4742              	@ ../freertos/tasks.c:3964: 			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
3964:../freertos/tasks.c **** 			{
 4743              		.loc 1 3964 51 is_stmt 0 view .LVU1293
 4744 0ca6 224D     		ldr	r5, .L342	@ tmp148,
 4745              	@ ../freertos/tasks.c:3964: 			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
3964:../freertos/tasks.c **** 			{
 4746              		.loc 1 3964 24 view .LVU1294
 4747 0ca8 C36A     		ldr	r3, [r0, #44]	@ _1, MEM[(struct TCB_t *)pxMutexHolder_35(D)].uxPriority
 4748              	@ ../freertos/tasks.c:3964: 			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
3964:../freertos/tasks.c **** 			{
 4749              		.loc 1 3964 51 view .LVU1295
 4750 0caa 6A68     		ldr	r2, [r5, #4]	@ pxCurrentTCB.98_2, pxCurrentTCB
 4751              	@ ../freertos/tasks.c:3964: 			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
3964:../freertos/tasks.c **** 			{
 4752              		.loc 1 3964 6 view .LVU1296
 4753 0cac D26A     		ldr	r2, [r2, #44]	@ pxCurrentTCB.98_2->uxPriority, pxCurrentTCB.98_2->uxPriority
 4754 0cae 9342     		cmp	r3, r2	@ _1, pxCurrentTCB.98_2->uxPriority
 4755 0cb0 35D2     		bcs	.L336		@,
3969:../freertos/tasks.c **** 				{
 4756              		.loc 1 3969 5 is_stmt 1 view .LVU1297
 4757              	@ ../freertos/tasks.c:3980: 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB
3980:../freertos/tasks.c **** 				{
 4758              		.loc 1 3980 9 is_stmt 0 view .LVU1298
 4759 0cb2 1426     		movs	r6, #20	@ tmp157,
 4760              	@ ../freertos/tasks.c:3969: 				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem 
3969:../freertos/tasks.c **** 				{
 4761              		.loc 1 3969 7 view .LVU1299
 4762 0cb4 8269     		ldr	r2, [r0, #24]	@ MEM[(struct TCB_t *)pxMutexHolder_35(D)].xEventListItem.xItemValue, MEM[(struc
 4763              	@ ../freertos/tasks.c:3980: 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB
3980:../freertos/tasks.c **** 				{
 4764              		.loc 1 3980 9 view .LVU1300
 4765 0cb6 1F4F     		ldr	r7, .L342+4	@ tmp155,
 4766              	@ ../freertos/tasks.c:3969: 				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem 
3969:../freertos/tasks.c **** 				{
ARM GAS  /tmp/ccGXytas.s 			page 202


 4767              		.loc 1 3969 7 view .LVU1301
 4768 0cb8 002A     		cmp	r2, #0	@ MEM[(struct TCB_t *)pxMutexHolder_35(D)].xEventListItem.xItemValue,
3971:../freertos/tasks.c **** 				}
 4769              		.loc 1 3971 6 is_stmt 1 view .LVU1302
 4770 0cba A8BF     		it	ge
 4771 0cbc 6A68     		ldrge	r2, [r5, #4]	@ pxCurrentTCB.99_6, pxCurrentTCB
 4772              	@ ../freertos/tasks.c:3980: 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB
3980:../freertos/tasks.c **** 				{
 4773              		.loc 1 3980 9 is_stmt 0 view .LVU1303
 4774 0cbe 06FB0373 		mla	r3, r6, r3, r7	@ tmp158, tmp157, _1, tmp155
 4775              	@ ../freertos/tasks.c:3971: 					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( 
3971:../freertos/tasks.c **** 				}
 4776              		.loc 1 3971 6 view .LVU1304
 4777 0cc2 A2BF     		ittt	ge
 4778 0cc4 D26A     		ldrge	r2, [r2, #44]	@ pxCurrentTCB.99_6->uxPriority, pxCurrentTCB.99_6->uxPriority
 4779 0cc6 C2F10502 		rsbge	r2, r2, #5	@ tmp152, pxCurrentTCB.99_6->uxPriority,
 4780 0cca 8261     		strge	r2, [r0, #24]	@ tmp152, MEM[(struct TCB_t *)pxMutexHolder_35(D)].xEventListItem.xItemValue
3975:../freertos/tasks.c **** 				}
 4781              		.loc 1 3975 30 is_stmt 1 view .LVU1305
3980:../freertos/tasks.c **** 				{
 4782              		.loc 1 3980 5 view .LVU1306
 4783              	@ ../freertos/tasks.c:3980: 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB
3980:../freertos/tasks.c **** 				{
 4784              		.loc 1 3980 7 is_stmt 0 view .LVU1307
 4785 0ccc 4269     		ldr	r2, [r0, #20]	@ MEM[(struct TCB_t *)pxMutexHolder_35(D)].xStateListItem.pvContainer, MEM[(stru
 4786 0cce 9A42     		cmp	r2, r3	@ MEM[(struct TCB_t *)pxMutexHolder_35(D)].xStateListItem.pvContainer, tmp158
 4787 0cd0 21D1     		bne	.L338		@,
3982:../freertos/tasks.c **** 					{
 4788              		.loc 1 3982 6 is_stmt 1 view .LVU1308
 4789              	@ ../freertos/tasks.c:3982: 					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBa
3982:../freertos/tasks.c **** 					{
 4790              		.loc 1 3982 10 is_stmt 0 view .LVU1309
 4791 0cd2 00F10408 		add	r8, r0, #4	@ _12, pxMutexHolder,
 4792 0cd6 4046     		mov	r0, r8	@, _12
 4793              	.LVL311:
3982:../freertos/tasks.c **** 					{
 4794              		.loc 1 3982 10 view .LVU1310
 4795 0cd8 FFF7FEFF 		bl	uxListRemove		@
 4796              	.LVL312:
 4797              	@ ../freertos/tasks.c:3982: 					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBa
3982:../freertos/tasks.c **** 					{
 4798              		.loc 1 3982 8 discriminator 1 view .LVU1311
 4799 0cdc 50B9     		cbnz	r0, .L339	@ tmp190,
3984:../freertos/tasks.c **** 					}
 4800              		.loc 1 3984 7 is_stmt 1 view .LVU1312
 4801 0cde E16A     		ldr	r1, [r4, #44]	@ _14, MEM[(struct TCB_t *)pxMutexHolder_35(D)].uxPriority
 4802 0ce0 06FB0156 		mla	r6, r6, r1, r5	@ tmp163, tmp157, _14, tmp148
 4803 0ce4 B36C     		ldr	r3, [r6, #72]	@ _15, pxReadyTasksLists[_14].uxNumberOfItems
 4804 0ce6 2BB9     		cbnz	r3, .L339	@ _15,
3984:../freertos/tasks.c **** 					}
 4805              		.loc 1 3984 7 discriminator 1 view .LVU1313
 4806 0ce8 0122     		movs	r2, #1	@ tmp167,
 4807 0cea AB68     		ldr	r3, [r5, #8]	@ uxTopReadyPriority.100_18, uxTopReadyPriority
 4808 0cec 8A40     		lsls	r2, r2, r1	@ tmp166, tmp167, _14
 4809 0cee 23EA0203 		bic	r3, r3, r2	@ _19, uxTopReadyPriority.100_18, tmp166
 4810 0cf2 AB60     		str	r3, [r5, #8]	@ _19, uxTopReadyPriority
 4811              	.L339:
ARM GAS  /tmp/ccGXytas.s 			page 203


3988:../freertos/tasks.c **** 					}
 4812              		.loc 1 3988 31 view .LVU1314
3992:../freertos/tasks.c **** 					prvAddTaskToReadyList( pxMutexHolderTCB );
 4813              		.loc 1 3992 6 view .LVU1315
 4814              	@ ../freertos/tasks.c:3992: 					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
3992:../freertos/tasks.c **** 					prvAddTaskToReadyList( pxMutexHolderTCB );
 4815              		.loc 1 3992 49 is_stmt 0 view .LVU1316
 4816 0cf4 6B68     		ldr	r3, [r5, #4]	@ pxCurrentTCB.101_20, pxCurrentTCB
 4817              	@ ../freertos/tasks.c:3993: 					prvAddTaskToReadyList( pxMutexHolderTCB );
3993:../freertos/tasks.c **** 				}
 4818              		.loc 1 3993 6 view .LVU1317
 4819 0cf6 1420     		movs	r0, #20	@ tmp178,
 4820              	@ ../freertos/tasks.c:3992: 					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
3992:../freertos/tasks.c **** 					prvAddTaskToReadyList( pxMutexHolderTCB );
 4821              		.loc 1 3992 49 view .LVU1318
 4822 0cf8 DA6A     		ldr	r2, [r3, #44]	@ _21, pxCurrentTCB.101_20->uxPriority
 4823              	@ ../freertos/tasks.c:3993: 					prvAddTaskToReadyList( pxMutexHolderTCB );
3993:../freertos/tasks.c **** 				}
 4824              		.loc 1 3993 6 view .LVU1319
 4825 0cfa 0123     		movs	r3, #1	@ tmp173,
 4826 0cfc A968     		ldr	r1, [r5, #8]	@ uxTopReadyPriority.102_23, uxTopReadyPriority
 4827 0cfe 9340     		lsls	r3, r3, r2	@ tmp172, tmp173, _21
 4828 0d00 0B43     		orrs	r3, r3, r1	@, _24, tmp172, uxTopReadyPriority.102_23
 4829 0d02 00FB0270 		mla	r0, r0, r2, r7	@, tmp178, _21, tmp155
 4830 0d06 4146     		mov	r1, r8	@, _12
 4831              	@ ../freertos/tasks.c:3992: 					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
3992:../freertos/tasks.c **** 					prvAddTaskToReadyList( pxMutexHolderTCB );
 4832              		.loc 1 3992 35 view .LVU1320
 4833 0d08 E262     		str	r2, [r4, #44]	@ _21, MEM[(struct TCB_t *)pxMutexHolder_35(D)].uxPriority
3993:../freertos/tasks.c **** 				}
 4834              		.loc 1 3993 6 is_stmt 1 view .LVU1321
3993:../freertos/tasks.c **** 				}
 4835              		.loc 1 3993 6 view .LVU1322
 4836 0d0a AB60     		str	r3, [r5, #8]	@ _24, uxTopReadyPriority
3993:../freertos/tasks.c **** 				}
 4837              		.loc 1 3993 6 view .LVU1323
 4838 0d0c FFF7FEFF 		bl	vListInsertEnd		@
 4839              	.LVL313:
3993:../freertos/tasks.c **** 				}
 4840              		.loc 1 3993 47 discriminator 1 view .LVU1324
 4841              	.L340:
 4842              	@ ../freertos/tasks.c:4004: 				xReturn = pdTRUE;
4004:../freertos/tasks.c **** 			}
 4843              		.loc 1 4004 13 is_stmt 0 view .LVU1325
 4844 0d10 0120     		movs	r0, #1	@ <retval>,
 4845              	.L334:
 4846              	@ ../freertos/tasks.c:4031: 	}
4031:../freertos/tasks.c **** 
 4847              		.loc 1 4031 2 view .LVU1326
 4848 0d12 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}	@
 4849              	.LVL314:
 4850              	.L338:
3998:../freertos/tasks.c **** 				}
 4851              		.loc 1 3998 6 is_stmt 1 view .LVU1327
 4852              	@ ../freertos/tasks.c:3998: 					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
3998:../freertos/tasks.c **** 				}
 4853              		.loc 1 3998 49 is_stmt 0 view .LVU1328
ARM GAS  /tmp/ccGXytas.s 			page 204


 4854 0d16 6B68     		ldr	r3, [r5, #4]	@ pxCurrentTCB.103_26, pxCurrentTCB
 4855 0d18 DB6A     		ldr	r3, [r3, #44]	@ _27, pxCurrentTCB.103_26->uxPriority
 4856              	@ ../freertos/tasks.c:3998: 					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
3998:../freertos/tasks.c **** 				}
 4857              		.loc 1 3998 35 view .LVU1329
 4858 0d1a C362     		str	r3, [r0, #44]	@ _27, MEM[(struct TCB_t *)pxMutexHolder_35(D)].uxPriority
 4859 0d1c F8E7     		b	.L340		@
 4860              	.L336:
4008:../freertos/tasks.c **** 				{
 4861              		.loc 1 4008 5 is_stmt 1 view .LVU1330
 4862              	@ ../freertos/tasks.c:4008: 				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
4008:../freertos/tasks.c **** 				{
 4863              		.loc 1 4008 56 is_stmt 0 view .LVU1331
 4864 0d1e 6B68     		ldr	r3, [r5, #4]	@ pxCurrentTCB.104_29, pxCurrentTCB
 4865              	@ ../freertos/tasks.c:4008: 				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
4008:../freertos/tasks.c **** 				{
 4866              		.loc 1 4008 7 view .LVU1332
 4867 0d20 C06C     		ldr	r0, [r0, #76]	@ MEM[(struct TCB_t *)pxMutexHolder_35(D)].uxBasePriority, MEM[(struct TCB_t *)p
 4868              	.LVL315:
4008:../freertos/tasks.c **** 				{
 4869              		.loc 1 4008 7 view .LVU1333
 4870 0d22 DB6A     		ldr	r3, [r3, #44]	@ pxCurrentTCB.104_29->uxPriority, pxCurrentTCB.104_29->uxPriority
 4871 0d24 9842     		cmp	r0, r3	@ MEM[(struct TCB_t *)pxMutexHolder_35(D)].uxBasePriority, pxCurrentTCB.104_29->uxPrior
 4872 0d26 2CBF     		ite	cs
 4873 0d28 0020     		movcs	r0, #0	@ <retval>,
 4874 0d2a 0120     		movcc	r0, #1	@ <retval>,
 4875 0d2c F1E7     		b	.L334		@
 4876              	.L343:
 4877 0d2e 00BF     		.align	2
 4878              	.L342:
 4879 0d30 00000000 		.word	.LANCHOR0
 4880 0d34 48000000 		.word	.LANCHOR0+72
 4881              		.cfi_endproc
 4882              	.LFE51:
 4883              		.size	xTaskPriorityInherit, .-xTaskPriorityInherit
 4884              		.align	1
 4885              		.global	xTaskPriorityDisinherit
 4886              		.syntax unified
 4887              		.thumb
 4888              		.thumb_func
 4889              		.type	xTaskPriorityDisinherit, %function
 4890              	xTaskPriorityDisinherit:
 4891              	.LVL316:
 4892              	.LFB52:
4039:../freertos/tasks.c **** 	TCB_t * const pxTCB = pxMutexHolder;
 4893              		.loc 1 4039 2 is_stmt 1 view -0
 4894              		.cfi_startproc
 4895              		@ args = 0, pretend = 0, frame = 0
 4896              		@ frame_needed = 0, uses_anonymous_args = 0
4040:../freertos/tasks.c **** 	BaseType_t xReturn = pdFALSE;
 4897              		.loc 1 4040 2 view .LVU1335
4041:../freertos/tasks.c **** 
 4898              		.loc 1 4041 2 view .LVU1336
4043:../freertos/tasks.c **** 		{
 4899              		.loc 1 4043 3 view .LVU1337
 4900              	@ ../freertos/tasks.c:4039: 	{
4039:../freertos/tasks.c **** 	TCB_t * const pxTCB = pxMutexHolder;
ARM GAS  /tmp/ccGXytas.s 			page 205


 4901              		.loc 1 4039 2 is_stmt 0 view .LVU1338
 4902 0d38 38B5     		push	{r3, r4, r5, lr}	@
 4903              	.LCFI44:
 4904              		.cfi_def_cfa_offset 16
 4905              		.cfi_offset 3, -16
 4906              		.cfi_offset 4, -12
 4907              		.cfi_offset 5, -8
 4908              		.cfi_offset 14, -4
 4909              	@ ../freertos/tasks.c:4043: 		if( pxMutexHolder != NULL )
4043:../freertos/tasks.c **** 		{
 4910              		.loc 1 4043 5 view .LVU1339
 4911 0d3a 0446     		mov	r4, r0	@ pxMutexHolder, tmp160
 4912 0d3c 08B9     		cbnz	r0, .L345	@ pxMutexHolder,
 4913              	.L347:
 4914              	@ ../freertos/tasks.c:4041: 	BaseType_t xReturn = pdFALSE;
4041:../freertos/tasks.c **** 
 4915              		.loc 1 4041 13 view .LVU1340
 4916 0d3e 0020     		movs	r0, #0	@ <retval>,
 4917              	.LVL317:
 4918              	.L344:
 4919              	@ ../freertos/tasks.c:4111: 	}
4111:../freertos/tasks.c **** 
 4920              		.loc 1 4111 2 view .LVU1341
 4921 0d40 38BD     		pop	{r3, r4, r5, pc}	@
 4922              	.LVL318:
 4923              	.L345:
4049:../freertos/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
 4924              		.loc 1 4049 41 is_stmt 1 view .LVU1342
4050:../freertos/tasks.c **** 			( pxTCB->uxMutexesHeld )--;
 4925              		.loc 1 4050 40 view .LVU1343
4051:../freertos/tasks.c **** 
 4926              		.loc 1 4051 4 view .LVU1344
 4927              	@ ../freertos/tasks.c:4051: 			( pxTCB->uxMutexesHeld )--;
4051:../freertos/tasks.c **** 
 4928              		.loc 1 4051 28 is_stmt 0 view .LVU1345
 4929 0d42 036D     		ldr	r3, [r0, #80]	@ MEM[(struct TCB_t *)pxMutexHolder_23(D)].uxMutexesHeld, MEM[(struct TCB_t *)px
 4930              	@ ../freertos/tasks.c:4055: 			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
4055:../freertos/tasks.c **** 			{
 4931              		.loc 1 4055 6 view .LVU1346
 4932 0d44 C16A     		ldr	r1, [r0, #44]	@ MEM[(struct TCB_t *)pxMutexHolder_23(D)].uxPriority, MEM[(struct TCB_t *)pxMut
 4933 0d46 C26C     		ldr	r2, [r0, #76]	@ MEM[(struct TCB_t *)pxMutexHolder_23(D)].uxBasePriority, MEM[(struct TCB_t *)p
 4934              	@ ../freertos/tasks.c:4051: 			( pxTCB->uxMutexesHeld )--;
4051:../freertos/tasks.c **** 
 4935              		.loc 1 4051 28 view .LVU1347
 4936 0d48 013B     		subs	r3, r3, #1	@ _2, MEM[(struct TCB_t *)pxMutexHolder_23(D)].uxMutexesHeld,
 4937              	@ ../freertos/tasks.c:4055: 			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
4055:../freertos/tasks.c **** 			{
 4938              		.loc 1 4055 6 view .LVU1348
 4939 0d4a 9142     		cmp	r1, r2	@ MEM[(struct TCB_t *)pxMutexHolder_23(D)].uxPriority, MEM[(struct TCB_t *)pxMutexHolde
 4940              	@ ../freertos/tasks.c:4051: 			( pxTCB->uxMutexesHeld )--;
4051:../freertos/tasks.c **** 
 4941              		.loc 1 4051 28 view .LVU1349
 4942 0d4c 0365     		str	r3, [r0, #80]	@ _2, MEM[(struct TCB_t *)pxMutexHolder_23(D)].uxMutexesHeld
4055:../freertos/tasks.c **** 			{
 4943              		.loc 1 4055 4 is_stmt 1 view .LVU1350
 4944              	@ ../freertos/tasks.c:4055: 			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
4055:../freertos/tasks.c **** 			{
ARM GAS  /tmp/ccGXytas.s 			page 206


 4945              		.loc 1 4055 6 is_stmt 0 view .LVU1351
 4946 0d4e F6D0     		beq	.L347		@,
4058:../freertos/tasks.c **** 				{
 4947              		.loc 1 4058 5 is_stmt 1 view .LVU1352
 4948              	@ ../freertos/tasks.c:4058: 				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
4058:../freertos/tasks.c **** 				{
 4949              		.loc 1 4058 7 is_stmt 0 view .LVU1353
 4950 0d50 002B     		cmp	r3, #0	@ _2
 4951 0d52 F4D1     		bne	.L347	@
4065:../freertos/tasks.c **** 					{
 4952              		.loc 1 4065 6 is_stmt 1 view .LVU1354
 4953              	@ ../freertos/tasks.c:4065: 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 
4065:../freertos/tasks.c **** 					{
 4954              		.loc 1 4065 10 is_stmt 0 view .LVU1355
 4955 0d54 051D     		adds	r5, r0, #4	@ _6, pxMutexHolder,
 4956 0d56 2846     		mov	r0, r5	@, _6
 4957              	.LVL319:
4065:../freertos/tasks.c **** 					{
 4958              		.loc 1 4065 10 view .LVU1356
 4959 0d58 FFF7FEFF 		bl	uxListRemove		@
 4960              	.LVL320:
 4961 0d5c 104B     		ldr	r3, .L349	@ tmp159,
 4962              	@ ../freertos/tasks.c:4065: 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 
4065:../freertos/tasks.c **** 					{
 4963              		.loc 1 4065 8 discriminator 1 view .LVU1357
 4964 0d5e 58B9     		cbnz	r0, .L348	@ tmp161,
4067:../freertos/tasks.c **** 					}
 4965              		.loc 1 4067 7 is_stmt 1 view .LVU1358
 4966 0d60 1422     		movs	r2, #20	@ tmp140,
 4967 0d62 E16A     		ldr	r1, [r4, #44]	@ _8, MEM[(struct TCB_t *)pxMutexHolder_23(D)].uxPriority
 4968 0d64 02FB0132 		mla	r2, r2, r1, r3	@ tmp141, tmp140, _8, tmp159
 4969 0d68 926C     		ldr	r2, [r2, #72]	@ _9, pxReadyTasksLists[_8].uxNumberOfItems
 4970 0d6a 2AB9     		cbnz	r2, .L348	@ _9,
4067:../freertos/tasks.c **** 					}
 4971              		.loc 1 4067 7 discriminator 1 view .LVU1359
 4972 0d6c 0120     		movs	r0, #1	@ tmp145,
 4973 0d6e 9A68     		ldr	r2, [r3, #8]	@ uxTopReadyPriority.105_12, uxTopReadyPriority
 4974 0d70 8840     		lsls	r0, r0, r1	@ tmp144, tmp145, _8
 4975 0d72 22EA0002 		bic	r2, r2, r0	@ _13, uxTopReadyPriority.105_12, tmp144
 4976 0d76 9A60     		str	r2, [r3, #8]	@ _13, uxTopReadyPriority
 4977              	.L348:
4071:../freertos/tasks.c **** 					}
 4978              		.loc 1 4071 31 view .LVU1360
4076:../freertos/tasks.c **** 					pxTCB->uxPriority = pxTCB->uxBasePriority;
 4979              		.loc 1 4076 67 view .LVU1361
4077:../freertos/tasks.c **** 
 4980              		.loc 1 4077 6 view .LVU1362
 4981              	@ ../freertos/tasks.c:4077: 					pxTCB->uxPriority = pxTCB->uxBasePriority;
4077:../freertos/tasks.c **** 
 4982              		.loc 1 4077 31 is_stmt 0 view .LVU1363
 4983 0d78 E26C     		ldr	r2, [r4, #76]	@ _14, MEM[(struct TCB_t *)pxMutexHolder_23(D)].uxBasePriority
 4984              	@ ../freertos/tasks.c:4082: 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t 
4082:../freertos/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 4985              		.loc 1 4082 6 view .LVU1364
 4986 0d7a C2F10501 		rsb	r1, r2, #5	@ tmp148, _14,
 4987 0d7e A161     		str	r1, [r4, #24]	@ tmp148, MEM[(struct TCB_t *)pxMutexHolder_23(D)].xEventListItem.xItemValue
 4988              	@ ../freertos/tasks.c:4077: 					pxTCB->uxPriority = pxTCB->uxBasePriority;
ARM GAS  /tmp/ccGXytas.s 			page 207


4077:../freertos/tasks.c **** 
 4989              		.loc 1 4077 24 view .LVU1365
 4990 0d80 E262     		str	r2, [r4, #44]	@ _14, MEM[(struct TCB_t *)pxMutexHolder_23(D)].uxPriority
4082:../freertos/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 4991              		.loc 1 4082 6 is_stmt 1 view .LVU1366
4083:../freertos/tasks.c **** 
 4992              		.loc 1 4083 6 view .LVU1367
4083:../freertos/tasks.c **** 
 4993              		.loc 1 4083 6 view .LVU1368
 4994 0d82 0124     		movs	r4, #1	@ tmp151,
 4995              	.LVL321:
4083:../freertos/tasks.c **** 
 4996              		.loc 1 4083 6 is_stmt 0 view .LVU1369
 4997 0d84 9968     		ldr	r1, [r3, #8]	@ uxTopReadyPriority.106_17, uxTopReadyPriority
 4998 0d86 04FA02F0 		lsl	r0, r4, r2	@ tmp150, tmp151, _14
 4999 0d8a 0843     		orrs	r0, r0, r1	@, _18, tmp150, uxTopReadyPriority.106_17
 5000 0d8c 9860     		str	r0, [r3, #8]	@ _18, uxTopReadyPriority
4083:../freertos/tasks.c **** 
 5001              		.loc 1 4083 6 is_stmt 1 view .LVU1370
 5002 0d8e 1420     		movs	r0, #20	@ tmp156,
 5003 0d90 044B     		ldr	r3, .L349+4	@ tmp154,
 5004 0d92 2946     		mov	r1, r5	@, _6
 5005 0d94 00FB0230 		mla	r0, r0, r2, r3	@, tmp156, _14, tmp154
 5006 0d98 FFF7FEFF 		bl	vListInsertEnd		@
 5007              	.LVL322:
4083:../freertos/tasks.c **** 
 5008              		.loc 1 4083 36 discriminator 1 view .LVU1371
4093:../freertos/tasks.c **** 				}
 5009              		.loc 1 4093 6 view .LVU1372
 5010              	@ ../freertos/tasks.c:4093: 					xReturn = pdTRUE;
4093:../freertos/tasks.c **** 				}
 5011              		.loc 1 4093 14 is_stmt 0 view .LVU1373
 5012 0d9c 2046     		mov	r0, r4	@ <retval>, tmp151
4107:../freertos/tasks.c **** 		}
 5013              		.loc 1 4107 28 is_stmt 1 view .LVU1374
4110:../freertos/tasks.c **** 	}
 5014              		.loc 1 4110 3 view .LVU1375
 5015              	@ ../freertos/tasks.c:4110: 		return xReturn;
4110:../freertos/tasks.c **** 	}
 5016              		.loc 1 4110 10 is_stmt 0 view .LVU1376
 5017 0d9e CFE7     		b	.L344		@
 5018              	.L350:
 5019              		.align	2
 5020              	.L349:
 5021 0da0 00000000 		.word	.LANCHOR0
 5022 0da4 48000000 		.word	.LANCHOR0+72
 5023              		.cfi_endproc
 5024              	.LFE52:
 5025              		.size	xTaskPriorityDisinherit, .-xTaskPriorityDisinherit
 5026              		.align	1
 5027              		.global	vTaskPriorityDisinheritAfterTimeout
 5028              		.syntax unified
 5029              		.thumb
 5030              		.thumb_func
 5031              		.type	vTaskPriorityDisinheritAfterTimeout, %function
 5032              	vTaskPriorityDisinheritAfterTimeout:
 5033              	.LVL323:
ARM GAS  /tmp/ccGXytas.s 			page 208


 5034              	.LFB53:
4119:../freertos/tasks.c **** 	TCB_t * const pxTCB = pxMutexHolder;
 5035              		.loc 1 4119 2 is_stmt 1 view -0
 5036              		.cfi_startproc
 5037              		@ args = 0, pretend = 0, frame = 0
 5038              		@ frame_needed = 0, uses_anonymous_args = 0
4120:../freertos/tasks.c **** 	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
 5039              		.loc 1 4120 2 view .LVU1378
4121:../freertos/tasks.c **** 	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 5040              		.loc 1 4121 2 view .LVU1379
4122:../freertos/tasks.c **** 
 5041              		.loc 1 4122 2 view .LVU1380
4124:../freertos/tasks.c **** 		{
 5042              		.loc 1 4124 3 view .LVU1381
 5043              	@ ../freertos/tasks.c:4119: 	{
4119:../freertos/tasks.c **** 	TCB_t * const pxTCB = pxMutexHolder;
 5044              		.loc 1 4119 2 is_stmt 0 view .LVU1382
 5045 0da8 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}	@
 5046              	.LCFI45:
 5047              		.cfi_def_cfa_offset 24
 5048              		.cfi_offset 4, -24
 5049              		.cfi_offset 5, -20
 5050              		.cfi_offset 6, -16
 5051              		.cfi_offset 7, -12
 5052              		.cfi_offset 8, -8
 5053              		.cfi_offset 14, -4
 5054              	@ ../freertos/tasks.c:4124: 		if( pxMutexHolder != NULL )
4124:../freertos/tasks.c **** 		{
 5055              		.loc 1 4124 5 view .LVU1383
 5056 0dac 0446     		mov	r4, r0	@ pxMutexHolder, tmp173
 5057 0dae 0028     		cmp	r0, #0	@ pxMutexHolder
 5058 0db0 37D0     		beq	.L351	@
4128:../freertos/tasks.c **** 
 5059              		.loc 1 4128 40 is_stmt 1 view .LVU1384
4134:../freertos/tasks.c **** 			{
 5060              		.loc 1 4134 4 view .LVU1385
 5061              	@ ../freertos/tasks.c:4134: 			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
4134:../freertos/tasks.c **** 			{
 5062              		.loc 1 4134 6 is_stmt 0 view .LVU1386
 5063 0db2 C36C     		ldr	r3, [r0, #76]	@ MEM[(struct TCB_t *)pxMutexHolder_25(D)].uxBasePriority, MEM[(struct TCB_t *)p
 5064 0db4 9942     		cmp	r1, r3	@ uxHighestPriorityWaitingTask, MEM[(struct TCB_t *)pxMutexHolder_25(D)].uxBasePriority
 5065 0db6 38BF     		it	cc
 5066 0db8 1946     		movcc	r1, r3	@ _28, MEM[(struct TCB_t *)pxMutexHolder_25(D)].uxBasePriority
 5067              	.LVL324:
4144:../freertos/tasks.c **** 			{
 5068              		.loc 1 4144 4 is_stmt 1 view .LVU1387
 5069              	@ ../freertos/tasks.c:4144: 			if( pxTCB->uxPriority != uxPriorityToUse )
4144:../freertos/tasks.c **** 			{
 5070              		.loc 1 4144 13 is_stmt 0 view .LVU1388
 5071 0dba C36A     		ldr	r3, [r0, #44]	@ _2, MEM[(struct TCB_t *)pxMutexHolder_25(D)].uxPriority
 5072              	@ ../freertos/tasks.c:4144: 			if( pxTCB->uxPriority != uxPriorityToUse )
4144:../freertos/tasks.c **** 			{
 5073              		.loc 1 4144 6 view .LVU1389
 5074 0dbc 8B42     		cmp	r3, r1	@ _2, _28
 5075 0dbe 30D0     		beq	.L351		@,
4150:../freertos/tasks.c **** 				{
 5076              		.loc 1 4150 5 is_stmt 1 view .LVU1390
ARM GAS  /tmp/ccGXytas.s 			page 209


 5077              	@ ../freertos/tasks.c:4150: 				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
4150:../freertos/tasks.c **** 				{
 5078              		.loc 1 4150 7 is_stmt 0 view .LVU1391
 5079 0dc0 026D     		ldr	r2, [r0, #80]	@ MEM[(struct TCB_t *)pxMutexHolder_25(D)].uxMutexesHeld, MEM[(struct TCB_t *)px
 5080 0dc2 012A     		cmp	r2, #1	@ MEM[(struct TCB_t *)pxMutexHolder_25(D)].uxMutexesHeld,
 5081 0dc4 2DD1     		bne	.L351		@,
4155:../freertos/tasks.c **** 
 5082              		.loc 1 4155 43 is_stmt 1 view .LVU1392
4160:../freertos/tasks.c **** 					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 5083              		.loc 1 4160 67 view .LVU1393
4161:../freertos/tasks.c **** 					pxTCB->uxPriority = uxPriorityToUse;
 5084              		.loc 1 4161 6 view .LVU1394
 5085              	.LVL325:
4162:../freertos/tasks.c **** 
 5086              		.loc 1 4162 6 view .LVU1395
 5087              	@ ../freertos/tasks.c:4181: 					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedO
4181:../freertos/tasks.c **** 					{
 5088              		.loc 1 4181 10 is_stmt 0 view .LVU1396
 5089 0dc6 1426     		movs	r6, #20	@ tmp147,
 5090 0dc8 174D     		ldr	r5, .L357	@ tmp144,
 5091              	@ ../freertos/tasks.c:4166: 					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & task
4166:../freertos/tasks.c **** 					{
 5092              		.loc 1 4166 8 view .LVU1397
 5093 0dca 8269     		ldr	r2, [r0, #24]	@ MEM[(struct TCB_t *)pxMutexHolder_25(D)].xEventListItem.xItemValue, MEM[(struc
 5094              	@ ../freertos/tasks.c:4181: 					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedO
4181:../freertos/tasks.c **** 					{
 5095              		.loc 1 4181 10 view .LVU1398
 5096 0dcc 05F14807 		add	r7, r5, #72	@ tmp145, tmp144,
 5097 0dd0 06FB0373 		mla	r3, r6, r3, r7	@ tmp148, tmp147, _2, tmp145
 5098              	.LVL326:
 5099              	@ ../freertos/tasks.c:4166: 					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & task
4166:../freertos/tasks.c **** 					{
 5100              		.loc 1 4166 8 view .LVU1399
 5101 0dd4 002A     		cmp	r2, #0	@ MEM[(struct TCB_t *)pxMutexHolder_25(D)].xEventListItem.xItemValue,
 5102              	@ ../freertos/tasks.c:4181: 					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedO
4181:../freertos/tasks.c **** 					{
 5103              		.loc 1 4181 8 view .LVU1400
 5104 0dd6 4269     		ldr	r2, [r0, #20]	@ MEM[(struct TCB_t *)pxMutexHolder_25(D)].xStateListItem.pvContainer, MEM[(stru
 5105              	@ ../freertos/tasks.c:4162: 					pxTCB->uxPriority = uxPriorityToUse;
4162:../freertos/tasks.c **** 
 5106              		.loc 1 4162 24 view .LVU1401
 5107 0dd8 C162     		str	r1, [r0, #44]	@ _28, MEM[(struct TCB_t *)pxMutexHolder_25(D)].uxPriority
 5108              	.LVL327:
4166:../freertos/tasks.c **** 					{
 5109              		.loc 1 4166 6 is_stmt 1 view .LVU1402
4168:../freertos/tasks.c **** 					}
 5110              		.loc 1 4168 7 view .LVU1403
 5111 0dda A4BF     		itt	ge
 5112 0ddc C1F10501 		rsbge	r1, r1, #5	@ tmp143, _28,
 5113              	.LVL328:
4168:../freertos/tasks.c **** 					}
 5114              		.loc 1 4168 7 is_stmt 0 view .LVU1404
 5115 0de0 8161     		strge	r1, [r0, #24]	@ tmp143, MEM[(struct TCB_t *)pxMutexHolder_25(D)].xEventListItem.xItemValue
4172:../freertos/tasks.c **** 					}
 5116              		.loc 1 4172 31 is_stmt 1 view .LVU1405
4181:../freertos/tasks.c **** 					{
 5117              		.loc 1 4181 6 view .LVU1406
ARM GAS  /tmp/ccGXytas.s 			page 210


 5118              	@ ../freertos/tasks.c:4181: 					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedO
4181:../freertos/tasks.c **** 					{
 5119              		.loc 1 4181 8 is_stmt 0 view .LVU1407
 5120 0de2 9A42     		cmp	r2, r3	@ MEM[(struct TCB_t *)pxMutexHolder_25(D)].xStateListItem.pvContainer, tmp148
 5121 0de4 1DD1     		bne	.L351		@,
4183:../freertos/tasks.c **** 						{
 5122              		.loc 1 4183 7 is_stmt 1 view .LVU1408
 5123              	@ ../freertos/tasks.c:4183: 						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t )
4183:../freertos/tasks.c **** 						{
 5124              		.loc 1 4183 11 is_stmt 0 view .LVU1409
 5125 0de6 00F10408 		add	r8, r0, #4	@ _9, pxMutexHolder,
 5126 0dea 4046     		mov	r0, r8	@, _9
 5127              	.LVL329:
4183:../freertos/tasks.c **** 						{
 5128              		.loc 1 4183 11 view .LVU1410
 5129 0dec FFF7FEFF 		bl	uxListRemove		@
 5130              	.LVL330:
4183:../freertos/tasks.c **** 						{
 5131              		.loc 1 4183 11 view .LVU1411
 5132 0df0 E26A     		ldr	r2, [r4, #44]	@ _17, MEM[(struct TCB_t *)pxMutexHolder_25(D)].uxPriority
 5133              	@ ../freertos/tasks.c:4183: 						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t )
4183:../freertos/tasks.c **** 						{
 5134              		.loc 1 4183 9 discriminator 1 view .LVU1412
 5135 0df2 48B9     		cbnz	r0, .L356	@ tmp175,
4185:../freertos/tasks.c **** 						}
 5136              		.loc 1 4185 8 is_stmt 1 view .LVU1413
 5137 0df4 06FB0256 		mla	r6, r6, r2, r5	@ tmp153, tmp147, _17, tmp144
 5138 0df8 B36C     		ldr	r3, [r6, #72]	@ _12, pxReadyTasksLists[_11].uxNumberOfItems
 5139 0dfa 2BB9     		cbnz	r3, .L356	@ _12,
4185:../freertos/tasks.c **** 						}
 5140              		.loc 1 4185 8 discriminator 1 view .LVU1414
 5141 0dfc 0121     		movs	r1, #1	@ tmp157,
 5142 0dfe AB68     		ldr	r3, [r5, #8]	@ uxTopReadyPriority.107_15, uxTopReadyPriority
 5143 0e00 9140     		lsls	r1, r1, r2	@ tmp156, tmp157, _17
 5144 0e02 23EA0103 		bic	r3, r3, r1	@ _16, uxTopReadyPriority.107_15, tmp156
 5145 0e06 AB60     		str	r3, [r5, #8]	@ _16, uxTopReadyPriority
 5146              	.L356:
4189:../freertos/tasks.c **** 						}
 5147              		.loc 1 4189 32 view .LVU1415
4192:../freertos/tasks.c **** 					}
 5148              		.loc 1 4192 7 view .LVU1416
4192:../freertos/tasks.c **** 					}
 5149              		.loc 1 4192 7 view .LVU1417
 5150 0e08 0123     		movs	r3, #1	@ tmp162,
 5151 0e0a 1420     		movs	r0, #20	@ tmp167,
 5152 0e0c A968     		ldr	r1, [r5, #8]	@ uxTopReadyPriority.108_19, uxTopReadyPriority
 5153 0e0e 9340     		lsls	r3, r3, r2	@ tmp161, tmp162, _17
 5154 0e10 0B43     		orrs	r3, r3, r1	@, _20, tmp161, uxTopReadyPriority.108_19
 5155 0e12 00FB0270 		mla	r0, r0, r2, r7	@, tmp167, _17, tmp145
 5156 0e16 4146     		mov	r1, r8	@, _9
 5157 0e18 AB60     		str	r3, [r5, #8]	@ _20, uxTopReadyPriority
4192:../freertos/tasks.c **** 					}
 5158              		.loc 1 4192 7 view .LVU1418
 5159              	@ ../freertos/tasks.c:4213: 	}
4213:../freertos/tasks.c **** 
 5160              		.loc 1 4213 2 is_stmt 0 view .LVU1419
 5161 0e1a BDE8F041 		pop	{r4, r5, r6, r7, r8, lr}	@
ARM GAS  /tmp/ccGXytas.s 			page 211


 5162              	.LCFI46:
 5163              		.cfi_remember_state
 5164              		.cfi_restore 14
 5165              		.cfi_restore 8
 5166              		.cfi_restore 7
 5167              		.cfi_restore 6
 5168              		.cfi_restore 5
 5169              		.cfi_restore 4
 5170              		.cfi_def_cfa_offset 0
 5171              	.LVL331:
 5172              	@ ../freertos/tasks.c:4192: 						prvAddTaskToReadyList( pxTCB );
4192:../freertos/tasks.c **** 					}
 5173              		.loc 1 4192 7 view .LVU1420
 5174 0e1e FFF7FEBF 		b	vListInsertEnd		@
 5175              	.LVL332:
 5176              	.L351:
 5177              	.LCFI47:
 5178              		.cfi_restore_state
 5179              	@ ../freertos/tasks.c:4213: 	}
4213:../freertos/tasks.c **** 
 5180              		.loc 1 4213 2 view .LVU1421
 5181 0e22 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}	@
 5182              	.L358:
 5183 0e26 00BF     		.align	2
 5184              	.L357:
 5185 0e28 00000000 		.word	.LANCHOR0
 5186              		.cfi_endproc
 5187              	.LFE53:
 5188              		.size	vTaskPriorityDisinheritAfterTimeout, .-vTaskPriorityDisinheritAfterTimeout
 5189              		.align	1
 5190              		.global	uxTaskResetEventItemValue
 5191              		.syntax unified
 5192              		.thumb
 5193              		.thumb_func
 5194              		.type	uxTaskResetEventItemValue, %function
 5195              	uxTaskResetEventItemValue:
 5196              	.LFB54:
4534:../freertos/tasks.c **** TickType_t uxReturn;
 5197              		.loc 1 4534 1 is_stmt 1 view -0
 5198              		.cfi_startproc
 5199              		@ args = 0, pretend = 0, frame = 0
 5200              		@ frame_needed = 0, uses_anonymous_args = 0
 5201              		@ link register save eliminated.
4535:../freertos/tasks.c **** 
 5202              		.loc 1 4535 1 view .LVU1423
4537:../freertos/tasks.c **** 
 5203              		.loc 1 4537 2 view .LVU1424
 5204              	@ ../freertos/tasks.c:4537: 	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) 
4537:../freertos/tasks.c **** 
 5205              		.loc 1 4537 13 is_stmt 0 view .LVU1425
 5206 0e2c 044B     		ldr	r3, .L360	@ tmp120,
 5207 0e2e 5A68     		ldr	r2, [r3, #4]	@ pxCurrentTCB.109_1, pxCurrentTCB
 5208              	@ ../freertos/tasks.c:4541: 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickTy
4541:../freertos/tasks.c **** 
 5209              		.loc 1 4541 2 view .LVU1426
 5210 0e30 5968     		ldr	r1, [r3, #4]	@ pxCurrentTCB.110_2, pxCurrentTCB
 5211              	@ ../freertos/tasks.c:4537: 	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) 
ARM GAS  /tmp/ccGXytas.s 			page 212


4537:../freertos/tasks.c **** 
 5212              		.loc 1 4537 11 view .LVU1427
 5213 0e32 9069     		ldr	r0, [r2, #24]	@ <retval>, pxCurrentTCB.109_1->xEventListItem.xItemValue
 5214              	.LVL333:
4541:../freertos/tasks.c **** 
 5215              		.loc 1 4541 2 is_stmt 1 view .LVU1428
 5216 0e34 5A68     		ldr	r2, [r3, #4]	@ pxCurrentTCB.111_4, pxCurrentTCB
 5217 0e36 CB6A     		ldr	r3, [r1, #44]	@ pxCurrentTCB.110_2->uxPriority, pxCurrentTCB.110_2->uxPriority
 5218 0e38 C3F10503 		rsb	r3, r3, #5	@ tmp123, pxCurrentTCB.110_2->uxPriority,
 5219 0e3c 9361     		str	r3, [r2, #24]	@ tmp123, pxCurrentTCB.111_4->xEventListItem.xItemValue
4543:../freertos/tasks.c **** }
 5220              		.loc 1 4543 2 view .LVU1429
 5221              	@ ../freertos/tasks.c:4544: }
4544:../freertos/tasks.c **** /*-----------------------------------------------------------*/
 5222              		.loc 1 4544 1 is_stmt 0 view .LVU1430
 5223 0e3e 7047     		bx	lr	@
 5224              	.L361:
 5225              		.align	2
 5226              	.L360:
 5227 0e40 00000000 		.word	.LANCHOR0
 5228              		.cfi_endproc
 5229              	.LFE54:
 5230              		.size	uxTaskResetEventItemValue, .-uxTaskResetEventItemValue
 5231              		.align	1
 5232              		.global	pvTaskIncrementMutexHeldCount
 5233              		.syntax unified
 5234              		.thumb
 5235              		.thumb_func
 5236              		.type	pvTaskIncrementMutexHeldCount, %function
 5237              	pvTaskIncrementMutexHeldCount:
 5238              	.LFB55:
4550:../freertos/tasks.c **** 		/* If xSemaphoreCreateMutex() is called before any tasks have been created
 5239              		.loc 1 4550 2 is_stmt 1 view -0
 5240              		.cfi_startproc
 5241              		@ args = 0, pretend = 0, frame = 0
 5242              		@ frame_needed = 0, uses_anonymous_args = 0
 5243              		@ link register save eliminated.
4553:../freertos/tasks.c **** 		{
 5244              		.loc 1 4553 3 view .LVU1432
 5245              	@ ../freertos/tasks.c:4553: 		if( pxCurrentTCB != NULL )
4553:../freertos/tasks.c **** 		{
 5246              		.loc 1 4553 20 is_stmt 0 view .LVU1433
 5247 0e44 044B     		ldr	r3, .L367	@ tmp119,
 5248 0e46 5A68     		ldr	r2, [r3, #4]	@ pxCurrentTCB.112_1, pxCurrentTCB
 5249              	@ ../freertos/tasks.c:4553: 		if( pxCurrentTCB != NULL )
4553:../freertos/tasks.c **** 		{
 5250              		.loc 1 4553 5 view .LVU1434
 5251 0e48 1AB1     		cbz	r2, .L363	@ pxCurrentTCB.112_1,
4555:../freertos/tasks.c **** 		}
 5252              		.loc 1 4555 4 is_stmt 1 view .LVU1435
 5253              	@ ../freertos/tasks.c:4555: 			( pxCurrentTCB->uxMutexesHeld )++;
4555:../freertos/tasks.c **** 		}
 5254              		.loc 1 4555 18 is_stmt 0 view .LVU1436
 5255 0e4a 5968     		ldr	r1, [r3, #4]	@ pxCurrentTCB.113_2, pxCurrentTCB
 5256              	@ ../freertos/tasks.c:4555: 			( pxCurrentTCB->uxMutexesHeld )++;
4555:../freertos/tasks.c **** 		}
 5257              		.loc 1 4555 35 view .LVU1437
ARM GAS  /tmp/ccGXytas.s 			page 213


 5258 0e4c 0A6D     		ldr	r2, [r1, #80]	@ pxCurrentTCB.113_2->uxMutexesHeld, pxCurrentTCB.113_2->uxMutexesHeld
 5259 0e4e 0132     		adds	r2, r2, #1	@ tmp121, pxCurrentTCB.113_2->uxMutexesHeld,
 5260 0e50 0A65     		str	r2, [r1, #80]	@ tmp121, pxCurrentTCB.113_2->uxMutexesHeld
 5261              	.L363:
4558:../freertos/tasks.c **** 	}
 5262              		.loc 1 4558 3 is_stmt 1 view .LVU1438
 5263              	@ ../freertos/tasks.c:4558: 		return pxCurrentTCB;
4558:../freertos/tasks.c **** 	}
 5264              		.loc 1 4558 10 is_stmt 0 view .LVU1439
 5265 0e52 5868     		ldr	r0, [r3, #4]	@ <retval>, pxCurrentTCB
 5266              	@ ../freertos/tasks.c:4559: 	}
4559:../freertos/tasks.c **** 
 5267              		.loc 1 4559 2 view .LVU1440
 5268 0e54 7047     		bx	lr	@
 5269              	.L368:
 5270 0e56 00BF     		.align	2
 5271              	.L367:
 5272 0e58 00000000 		.word	.LANCHOR0
 5273              		.cfi_endproc
 5274              	.LFE55:
 5275              		.size	pvTaskIncrementMutexHeldCount, .-pvTaskIncrementMutexHeldCount
 5276              		.align	1
 5277              		.global	ulTaskNotifyTake
 5278              		.syntax unified
 5279              		.thumb
 5280              		.thumb_func
 5281              		.type	ulTaskNotifyTake, %function
 5282              	ulTaskNotifyTake:
 5283              	.LVL334:
 5284              	.LFB56:
4567:../freertos/tasks.c **** 	uint32_t ulReturn;
 5285              		.loc 1 4567 2 is_stmt 1 view -0
 5286              		.cfi_startproc
 5287              		@ args = 0, pretend = 0, frame = 0
 5288              		@ frame_needed = 0, uses_anonymous_args = 0
4568:../freertos/tasks.c **** 
 5289              		.loc 1 4568 2 view .LVU1442
4570:../freertos/tasks.c **** 		{
 5290              		.loc 1 4570 3 view .LVU1443
 5291              	@ ../freertos/tasks.c:4567: 	{
4567:../freertos/tasks.c **** 	uint32_t ulReturn;
 5292              		.loc 1 4567 2 is_stmt 0 view .LVU1444
 5293 0e5c 70B5     		push	{r4, r5, r6, lr}	@
 5294              	.LCFI48:
 5295              		.cfi_def_cfa_offset 16
 5296              		.cfi_offset 4, -16
 5297              		.cfi_offset 5, -12
 5298              		.cfi_offset 6, -8
 5299              		.cfi_offset 14, -4
 5300              	@ ../freertos/tasks.c:4573: 			if( pxCurrentTCB->ulNotifiedValue == 0UL )
4573:../freertos/tasks.c **** 			{
 5301              		.loc 1 4573 20 view .LVU1445
 5302 0e5e 174C     		ldr	r4, .L382	@ tmp125,
 5303              	@ ../freertos/tasks.c:4567: 	{
4567:../freertos/tasks.c **** 	uint32_t ulReturn;
 5304              		.loc 1 4567 2 view .LVU1446
 5305 0e60 0646     		mov	r6, r0	@ xClearCountOnExit, tmp140
ARM GAS  /tmp/ccGXytas.s 			page 214


 5306 0e62 0D46     		mov	r5, r1	@ xTicksToWait, tmp141
 5307              	@ ../freertos/tasks.c:4570: 		taskENTER_CRITICAL();
4570:../freertos/tasks.c **** 		{
 5308              		.loc 1 4570 3 view .LVU1447
 5309 0e64 FFF7FEFF 		bl	vPortEnterCritical		@
 5310              	.LVL335:
4573:../freertos/tasks.c **** 			{
 5311              		.loc 1 4573 4 is_stmt 1 view .LVU1448
 5312              	@ ../freertos/tasks.c:4573: 			if( pxCurrentTCB->ulNotifiedValue == 0UL )
4573:../freertos/tasks.c **** 			{
 5313              		.loc 1 4573 20 is_stmt 0 view .LVU1449
 5314 0e68 6368     		ldr	r3, [r4, #4]	@ pxCurrentTCB.114_1, pxCurrentTCB
 5315 0e6a 5B6D     		ldr	r3, [r3, #84]	@ _2, pxCurrentTCB.114_1->ulNotifiedValue
 5316              	@ ../freertos/tasks.c:4573: 			if( pxCurrentTCB->ulNotifiedValue == 0UL )
4573:../freertos/tasks.c **** 			{
 5317              		.loc 1 4573 6 view .LVU1450
 5318 0e6c 8BB9     		cbnz	r3, .L371	@ _2,
4576:../freertos/tasks.c **** 
 5319              		.loc 1 4576 5 is_stmt 1 view .LVU1451
 5320              	@ ../freertos/tasks.c:4576: 				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
4576:../freertos/tasks.c **** 
 5321              		.loc 1 4576 33 is_stmt 0 view .LVU1452
 5322 0e6e 0121     		movs	r1, #1	@ tmp127,
 5323              	@ ../freertos/tasks.c:4576: 				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
4576:../freertos/tasks.c **** 
 5324              		.loc 1 4576 17 view .LVU1453
 5325 0e70 6368     		ldr	r3, [r4, #4]	@ pxCurrentTCB.115_3, pxCurrentTCB
 5326              	@ ../freertos/tasks.c:4576: 				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
4576:../freertos/tasks.c **** 
 5327              		.loc 1 4576 33 view .LVU1454
 5328 0e72 83F85810 		strb	r1, [r3, #88]	@ tmp127, pxCurrentTCB.115_3->ucNotifyState
4578:../freertos/tasks.c **** 				{
 5329              		.loc 1 4578 5 is_stmt 1 view .LVU1455
 5330              	@ ../freertos/tasks.c:4578: 				if( xTicksToWait > ( TickType_t ) 0 )
4578:../freertos/tasks.c **** 				{
 5331              		.loc 1 4578 7 is_stmt 0 view .LVU1456
 5332 0e76 65B1     		cbz	r5, .L371	@ xTicksToWait,
4580:../freertos/tasks.c **** 					traceTASK_NOTIFY_TAKE_BLOCK();
 5333              		.loc 1 4580 6 is_stmt 1 view .LVU1457
 5334 0e78 2846     		mov	r0, r5	@, xTicksToWait
 5335 0e7a FFF7C1F8 		bl	prvAddCurrentTaskToDelayedList		@
 5336              	.LVL336:
4581:../freertos/tasks.c **** 
 5337              		.loc 1 4581 35 view .LVU1458
4587:../freertos/tasks.c **** 				}
 5338              		.loc 1 4587 6 view .LVU1459
 5339 0e7e 4FF0E023 		mov	r3, #-536813568	@ tmp129,
 5340 0e82 4FF08052 		mov	r2, #268435456	@ tmp130,
 5341 0e86 C3F8042D 		str	r2, [r3, #3332]	@ tmp130, MEM[(volatile uint32_t *)3758157060B]
4587:../freertos/tasks.c **** 				}
 5342              		.loc 1 4587 6 view .LVU1460
 5343              		.syntax unified
 5344              	@ 4587 "../freertos/tasks.c" 1
 5345 0e8a BFF34F8F 		dsb	
 5346              	@ 0 "" 2
4587:../freertos/tasks.c **** 				}
 5347              		.loc 1 4587 6 view .LVU1461
ARM GAS  /tmp/ccGXytas.s 			page 215


 5348              	@ 4587 "../freertos/tasks.c" 1
 5349 0e8e BFF36F8F 		isb
 5350              	@ 0 "" 2
4587:../freertos/tasks.c **** 				}
 5351              		.loc 1 4587 28 view .LVU1462
 5352              		.thumb
 5353              		.syntax unified
 5354              	.L371:
4596:../freertos/tasks.c **** 			}
 5355              		.loc 1 4596 29 view .LVU1463
4599:../freertos/tasks.c **** 
 5356              		.loc 1 4599 3 view .LVU1464
 5357 0e92 FFF7FEFF 		bl	vPortExitCritical		@
 5358              	.LVL337:
4601:../freertos/tasks.c **** 		{
 5359              		.loc 1 4601 3 view .LVU1465
 5360 0e96 FFF7FEFF 		bl	vPortEnterCritical		@
 5361              	.LVL338:
4603:../freertos/tasks.c **** 			ulReturn = pxCurrentTCB->ulNotifiedValue;
 5362              		.loc 1 4603 27 view .LVU1466
4604:../freertos/tasks.c **** 
 5363              		.loc 1 4604 4 view .LVU1467
 5364              	@ ../freertos/tasks.c:4604: 			ulReturn = pxCurrentTCB->ulNotifiedValue;
4604:../freertos/tasks.c **** 
 5365              		.loc 1 4604 27 is_stmt 0 view .LVU1468
 5366 0e9a 6368     		ldr	r3, [r4, #4]	@ pxCurrentTCB.116_4, pxCurrentTCB
 5367              	@ ../freertos/tasks.c:4604: 			ulReturn = pxCurrentTCB->ulNotifiedValue;
4604:../freertos/tasks.c **** 
 5368              		.loc 1 4604 13 view .LVU1469
 5369 0e9c 5D6D     		ldr	r5, [r3, #84]	@ <retval>, pxCurrentTCB.116_4->ulNotifiedValue
 5370              	.LVL339:
4606:../freertos/tasks.c **** 			{
 5371              		.loc 1 4606 4 is_stmt 1 view .LVU1470
 5372              	@ ../freertos/tasks.c:4606: 			if( ulReturn != 0UL )
4606:../freertos/tasks.c **** 			{
 5373              		.loc 1 4606 6 is_stmt 0 view .LVU1471
 5374 0e9e 1DB1     		cbz	r5, .L373	@ <retval>,
4608:../freertos/tasks.c **** 				{
 5375              		.loc 1 4608 5 is_stmt 1 view .LVU1472
 5376              	@ ../freertos/tasks.c:4610: 					pxCurrentTCB->ulNotifiedValue = 0UL;
4610:../freertos/tasks.c **** 				}
 5377              		.loc 1 4610 18 is_stmt 0 view .LVU1473
 5378 0ea0 6368     		ldr	r3, [r4, #4]	@ pxCurrentTCB.117_5, pxCurrentTCB
 5379              	@ ../freertos/tasks.c:4608: 				if( xClearCountOnExit != pdFALSE )
4608:../freertos/tasks.c **** 				{
 5380              		.loc 1 4608 7 view .LVU1474
 5381 0ea2 4EB1     		cbz	r6, .L374	@ xClearCountOnExit,
4610:../freertos/tasks.c **** 				}
 5382              		.loc 1 4610 6 is_stmt 1 view .LVU1475
 5383              	@ ../freertos/tasks.c:4610: 					pxCurrentTCB->ulNotifiedValue = 0UL;
4610:../freertos/tasks.c **** 				}
 5384              		.loc 1 4610 36 is_stmt 0 view .LVU1476
 5385 0ea4 0022     		movs	r2, #0	@ tmp133,
 5386              	.L381:
 5387              	@ ../freertos/tasks.c:4614: 					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
4614:../freertos/tasks.c **** 				}
 5388              		.loc 1 4614 36 view .LVU1477
ARM GAS  /tmp/ccGXytas.s 			page 216


 5389 0ea6 5A65     		str	r2, [r3, #84]	@ _7,
 5390              	.L373:
4619:../freertos/tasks.c **** 			}
 5391              		.loc 1 4619 29 is_stmt 1 view .LVU1478
4622:../freertos/tasks.c **** 		}
 5392              		.loc 1 4622 4 view .LVU1479
 5393              	@ ../freertos/tasks.c:4622: 			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
4622:../freertos/tasks.c **** 		}
 5394              		.loc 1 4622 32 is_stmt 0 view .LVU1480
 5395 0ea8 0022     		movs	r2, #0	@ tmp136,
 5396              	@ ../freertos/tasks.c:4622: 			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
4622:../freertos/tasks.c **** 		}
 5397              		.loc 1 4622 16 view .LVU1481
 5398 0eaa 6368     		ldr	r3, [r4, #4]	@ pxCurrentTCB.119_8, pxCurrentTCB
 5399              	@ ../freertos/tasks.c:4622: 			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
4622:../freertos/tasks.c **** 		}
 5400              		.loc 1 4622 32 view .LVU1482
 5401 0eac 83F85820 		strb	r2, [r3, #88]	@ tmp136, pxCurrentTCB.119_8->ucNotifyState
4624:../freertos/tasks.c **** 
 5402              		.loc 1 4624 3 is_stmt 1 view .LVU1483
 5403 0eb0 FFF7FEFF 		bl	vPortExitCritical		@
 5404              	.LVL340:
4626:../freertos/tasks.c **** 	}
 5405              		.loc 1 4626 3 view .LVU1484
 5406              	@ ../freertos/tasks.c:4627: 	}
4627:../freertos/tasks.c **** 
 5407              		.loc 1 4627 2 is_stmt 0 view .LVU1485
 5408 0eb4 2846     		mov	r0, r5	@, <retval>
 5409 0eb6 70BD     		pop	{r4, r5, r6, pc}	@
 5410              	.LVL341:
 5411              	.L374:
4614:../freertos/tasks.c **** 				}
 5412              		.loc 1 4614 6 is_stmt 1 view .LVU1486
 5413              	@ ../freertos/tasks.c:4614: 					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
4614:../freertos/tasks.c **** 				}
 5414              		.loc 1 4614 47 is_stmt 0 view .LVU1487
 5415 0eb8 6A1E     		subs	r2, r5, #1	@ _7, <retval>,
 5416 0eba F4E7     		b	.L381		@
 5417              	.L383:
 5418              		.align	2
 5419              	.L382:
 5420 0ebc 00000000 		.word	.LANCHOR0
 5421              		.cfi_endproc
 5422              	.LFE56:
 5423              		.size	ulTaskNotifyTake, .-ulTaskNotifyTake
 5424              		.align	1
 5425              		.global	xTaskNotifyWait
 5426              		.syntax unified
 5427              		.thumb
 5428              		.thumb_func
 5429              		.type	xTaskNotifyWait, %function
 5430              	xTaskNotifyWait:
 5431              	.LVL342:
 5432              	.LFB57:
4635:../freertos/tasks.c **** 	BaseType_t xReturn;
 5433              		.loc 1 4635 2 is_stmt 1 view -0
 5434              		.cfi_startproc
ARM GAS  /tmp/ccGXytas.s 			page 217


 5435              		@ args = 0, pretend = 0, frame = 0
 5436              		@ frame_needed = 0, uses_anonymous_args = 0
4636:../freertos/tasks.c **** 
 5437              		.loc 1 4636 2 view .LVU1489
4638:../freertos/tasks.c **** 		{
 5438              		.loc 1 4638 3 view .LVU1490
 5439              	@ ../freertos/tasks.c:4635: 	{
4635:../freertos/tasks.c **** 	BaseType_t xReturn;
 5440              		.loc 1 4635 2 is_stmt 0 view .LVU1491
 5441 0ec0 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}	@
 5442              	.LCFI49:
 5443              		.cfi_def_cfa_offset 24
 5444              		.cfi_offset 4, -24
 5445              		.cfi_offset 5, -20
 5446              		.cfi_offset 6, -16
 5447              		.cfi_offset 7, -12
 5448              		.cfi_offset 8, -8
 5449              		.cfi_offset 14, -4
 5450              	@ ../freertos/tasks.c:4641: 			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
4641:../freertos/tasks.c **** 			{
 5451              		.loc 1 4641 20 view .LVU1492
 5452 0ec4 1F4C     		ldr	r4, .L397	@ tmp135,
 5453              	@ ../freertos/tasks.c:4635: 	{
4635:../freertos/tasks.c **** 	BaseType_t xReturn;
 5454              		.loc 1 4635 2 view .LVU1493
 5455 0ec6 1E46     		mov	r6, r3	@ xTicksToWait, tmp161
 5456 0ec8 8046     		mov	r8, r0	@ ulBitsToClearOnEntry, tmp158
 5457 0eca 0F46     		mov	r7, r1	@ ulBitsToClearOnExit, tmp159
 5458 0ecc 1546     		mov	r5, r2	@ pulNotificationValue, tmp160
 5459              	@ ../freertos/tasks.c:4638: 		taskENTER_CRITICAL();
4638:../freertos/tasks.c **** 		{
 5460              		.loc 1 4638 3 view .LVU1494
 5461 0ece FFF7FEFF 		bl	vPortEnterCritical		@
 5462              	.LVL343:
4641:../freertos/tasks.c **** 			{
 5463              		.loc 1 4641 4 is_stmt 1 view .LVU1495
 5464              	@ ../freertos/tasks.c:4641: 			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
4641:../freertos/tasks.c **** 			{
 5465              		.loc 1 4641 20 is_stmt 0 view .LVU1496
 5466 0ed2 6368     		ldr	r3, [r4, #4]	@ pxCurrentTCB.120_1, pxCurrentTCB
 5467 0ed4 93F85830 		ldrb	r3, [r3, #88]	@ zero_extendqisi2	@ pxCurrentTCB.120_1->ucNotifyState, pxCurrentTCB.120_1->ucN
 5468              	@ ../freertos/tasks.c:4641: 			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
4641:../freertos/tasks.c **** 			{
 5469              		.loc 1 4641 6 view .LVU1497
 5470 0ed8 022B     		cmp	r3, #2	@ pxCurrentTCB.120_1->ucNotifyState,
 5471 0eda 16D0     		beq	.L386		@,
4646:../freertos/tasks.c **** 
 5472              		.loc 1 4646 5 is_stmt 1 view .LVU1498
 5473              	@ ../freertos/tasks.c:4649: 				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
4649:../freertos/tasks.c **** 
 5474              		.loc 1 4649 33 is_stmt 0 view .LVU1499
 5475 0edc 0121     		movs	r1, #1	@ tmp142,
 5476              	@ ../freertos/tasks.c:4646: 				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
4646:../freertos/tasks.c **** 
 5477              		.loc 1 4646 17 view .LVU1500
 5478 0ede 6268     		ldr	r2, [r4, #4]	@ pxCurrentTCB.121_21, pxCurrentTCB
 5479 0ee0 536D     		ldr	r3, [r2, #84]	@ _3, pxCurrentTCB.121_21->ulNotifiedValue
ARM GAS  /tmp/ccGXytas.s 			page 218


 5480              	@ ../freertos/tasks.c:4646: 				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
4646:../freertos/tasks.c **** 
 5481              		.loc 1 4646 35 view .LVU1501
 5482 0ee2 23EA0803 		bic	r3, r3, r8	@ _5, _3, ulBitsToClearOnEntry
 5483 0ee6 5365     		str	r3, [r2, #84]	@ _5, pxCurrentTCB.121_21->ulNotifiedValue
4649:../freertos/tasks.c **** 
 5484              		.loc 1 4649 5 is_stmt 1 view .LVU1502
 5485              	@ ../freertos/tasks.c:4649: 				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
4649:../freertos/tasks.c **** 
 5486              		.loc 1 4649 17 is_stmt 0 view .LVU1503
 5487 0ee8 6368     		ldr	r3, [r4, #4]	@ pxCurrentTCB.122_6, pxCurrentTCB
 5488              	@ ../freertos/tasks.c:4649: 				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
4649:../freertos/tasks.c **** 
 5489              		.loc 1 4649 33 view .LVU1504
 5490 0eea 83F85810 		strb	r1, [r3, #88]	@ tmp142, pxCurrentTCB.122_6->ucNotifyState
4651:../freertos/tasks.c **** 				{
 5491              		.loc 1 4651 5 is_stmt 1 view .LVU1505
 5492              	@ ../freertos/tasks.c:4651: 				if( xTicksToWait > ( TickType_t ) 0 )
4651:../freertos/tasks.c **** 				{
 5493              		.loc 1 4651 7 is_stmt 0 view .LVU1506
 5494 0eee 66B1     		cbz	r6, .L386	@ xTicksToWait,
4653:../freertos/tasks.c **** 					traceTASK_NOTIFY_WAIT_BLOCK();
 5495              		.loc 1 4653 6 is_stmt 1 view .LVU1507
 5496 0ef0 3046     		mov	r0, r6	@, xTicksToWait
 5497 0ef2 FFF785F8 		bl	prvAddCurrentTaskToDelayedList		@
 5498              	.LVL344:
4654:../freertos/tasks.c **** 
 5499              		.loc 1 4654 35 view .LVU1508
4660:../freertos/tasks.c **** 				}
 5500              		.loc 1 4660 6 view .LVU1509
 5501 0ef6 4FF0E023 		mov	r3, #-536813568	@ tmp144,
 5502 0efa 4FF08052 		mov	r2, #268435456	@ tmp145,
 5503 0efe C3F8042D 		str	r2, [r3, #3332]	@ tmp145, MEM[(volatile uint32_t *)3758157060B]
4660:../freertos/tasks.c **** 				}
 5504              		.loc 1 4660 6 view .LVU1510
 5505              		.syntax unified
 5506              	@ 4660 "../freertos/tasks.c" 1
 5507 0f02 BFF34F8F 		dsb	
 5508              	@ 0 "" 2
4660:../freertos/tasks.c **** 				}
 5509              		.loc 1 4660 6 view .LVU1511
 5510              	@ 4660 "../freertos/tasks.c" 1
 5511 0f06 BFF36F8F 		isb
 5512              	@ 0 "" 2
4660:../freertos/tasks.c **** 				}
 5513              		.loc 1 4660 28 view .LVU1512
 5514              		.thumb
 5515              		.syntax unified
 5516              	.L386:
4669:../freertos/tasks.c **** 			}
 5517              		.loc 1 4669 29 view .LVU1513
4672:../freertos/tasks.c **** 
 5518              		.loc 1 4672 3 view .LVU1514
 5519 0f0a FFF7FEFF 		bl	vPortExitCritical		@
 5520              	.LVL345:
4674:../freertos/tasks.c **** 		{
 5521              		.loc 1 4674 3 view .LVU1515
ARM GAS  /tmp/ccGXytas.s 			page 219


 5522 0f0e FFF7FEFF 		bl	vPortEnterCritical		@
 5523              	.LVL346:
4676:../freertos/tasks.c **** 
 5524              		.loc 1 4676 27 view .LVU1516
4678:../freertos/tasks.c **** 			{
 5525              		.loc 1 4678 4 view .LVU1517
 5526              	@ ../freertos/tasks.c:4678: 			if( pulNotificationValue != NULL )
4678:../freertos/tasks.c **** 			{
 5527              		.loc 1 4678 6 is_stmt 0 view .LVU1518
 5528 0f12 15B1     		cbz	r5, .L388	@ pulNotificationValue,
4682:../freertos/tasks.c **** 			}
 5529              		.loc 1 4682 5 is_stmt 1 view .LVU1519
 5530              	@ ../freertos/tasks.c:4682: 				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
4682:../freertos/tasks.c **** 			}
 5531              		.loc 1 4682 41 is_stmt 0 view .LVU1520
 5532 0f14 6368     		ldr	r3, [r4, #4]	@ pxCurrentTCB.123_7, pxCurrentTCB
 5533 0f16 5B6D     		ldr	r3, [r3, #84]	@ _8, pxCurrentTCB.123_7->ulNotifiedValue
 5534              	@ ../freertos/tasks.c:4682: 				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
4682:../freertos/tasks.c **** 			}
 5535              		.loc 1 4682 27 view .LVU1521
 5536 0f18 2B60     		str	r3, [r5]	@ _8, *pulNotificationValue_32(D)
 5537              	.L388:
4689:../freertos/tasks.c **** 			{
 5538              		.loc 1 4689 4 is_stmt 1 view .LVU1522
 5539              	@ ../freertos/tasks.c:4689: 			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
4689:../freertos/tasks.c **** 			{
 5540              		.loc 1 4689 20 is_stmt 0 view .LVU1523
 5541 0f1a 6368     		ldr	r3, [r4, #4]	@ pxCurrentTCB.124_9, pxCurrentTCB
 5542 0f1c 93F85830 		ldrb	r3, [r3, #88]	@ zero_extendqisi2	@ pxCurrentTCB.124_9->ucNotifyState, pxCurrentTCB.124_9->ucN
 5543              	@ ../freertos/tasks.c:4689: 			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
4689:../freertos/tasks.c **** 			{
 5544              		.loc 1 4689 6 view .LVU1524
 5545 0f20 022B     		cmp	r3, #2	@ pxCurrentTCB.124_9->ucNotifyState,
4698:../freertos/tasks.c **** 				xReturn = pdTRUE;
 5546              		.loc 1 4698 5 is_stmt 1 view .LVU1525
 5547              	@ ../freertos/tasks.c:4698: 				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
4698:../freertos/tasks.c **** 				xReturn = pdTRUE;
 5548              		.loc 1 4698 17 is_stmt 0 view .LVU1526
 5549 0f22 03BF     		ittte	eq
 5550 0f24 6268     		ldreq	r2, [r4, #4]	@ pxCurrentTCB.125_34, pxCurrentTCB
 5551              	@ ../freertos/tasks.c:4699: 				xReturn = pdTRUE;
4699:../freertos/tasks.c **** 			}
 5552              		.loc 1 4699 13 view .LVU1527
 5553 0f26 0125     		moveq	r5, #1	@ <retval>,
 5554              	.LVL347:
 5555              	@ ../freertos/tasks.c:4698: 				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
4698:../freertos/tasks.c **** 				xReturn = pdTRUE;
 5556              		.loc 1 4698 17 view .LVU1528
 5557 0f28 536D     		ldreq	r3, [r2, #84]	@ _11, pxCurrentTCB.125_34->ulNotifiedValue
 5558              	@ ../freertos/tasks.c:4692: 				xReturn = pdFALSE;
4692:../freertos/tasks.c **** 			}
 5559              		.loc 1 4692 13 view .LVU1529
 5560 0f2a 0025     		movne	r5, #0	@ <retval>,
 5561              	@ ../freertos/tasks.c:4698: 				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
4698:../freertos/tasks.c **** 				xReturn = pdTRUE;
 5562              		.loc 1 4698 35 view .LVU1530
 5563 0f2c 04BF     		itt	eq
ARM GAS  /tmp/ccGXytas.s 			page 220


 5564 0f2e BB43     		biceq	r3, r3, r7	@ _13, _11, ulBitsToClearOnExit
 5565 0f30 5365     		streq	r3, [r2, #84]	@ _13, pxCurrentTCB.125_34->ulNotifiedValue
4699:../freertos/tasks.c **** 			}
 5566              		.loc 1 4699 5 is_stmt 1 view .LVU1531
 5567              	.LVL348:
4702:../freertos/tasks.c **** 		}
 5568              		.loc 1 4702 4 view .LVU1532
 5569              	@ ../freertos/tasks.c:4702: 			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
4702:../freertos/tasks.c **** 		}
 5570              		.loc 1 4702 32 is_stmt 0 view .LVU1533
 5571 0f32 0022     		movs	r2, #0	@ tmp154,
 5572              	@ ../freertos/tasks.c:4702: 			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
4702:../freertos/tasks.c **** 		}
 5573              		.loc 1 4702 16 view .LVU1534
 5574 0f34 6368     		ldr	r3, [r4, #4]	@ pxCurrentTCB.126_14, pxCurrentTCB
 5575              	@ ../freertos/tasks.c:4702: 			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
4702:../freertos/tasks.c **** 		}
 5576              		.loc 1 4702 32 view .LVU1535
 5577 0f36 83F85820 		strb	r2, [r3, #88]	@ tmp154, pxCurrentTCB.126_14->ucNotifyState
4704:../freertos/tasks.c **** 
 5578              		.loc 1 4704 3 is_stmt 1 view .LVU1536
 5579 0f3a FFF7FEFF 		bl	vPortExitCritical		@
 5580              	.LVL349:
4706:../freertos/tasks.c **** 	}
 5581              		.loc 1 4706 3 view .LVU1537
 5582              	@ ../freertos/tasks.c:4707: 	}
4707:../freertos/tasks.c **** 
 5583              		.loc 1 4707 2 is_stmt 0 view .LVU1538
 5584 0f3e 2846     		mov	r0, r5	@, <retval>
 5585 0f40 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}	@
 5586              	.LVL350:
 5587              	.L398:
4707:../freertos/tasks.c **** 
 5588              		.loc 1 4707 2 view .LVU1539
 5589              		.align	2
 5590              	.L397:
 5591 0f44 00000000 		.word	.LANCHOR0
 5592              		.cfi_endproc
 5593              	.LFE57:
 5594              		.size	xTaskNotifyWait, .-xTaskNotifyWait
 5595              		.align	1
 5596              		.global	xTaskGenericNotify
 5597              		.syntax unified
 5598              		.thumb
 5599              		.thumb_func
 5600              		.type	xTaskGenericNotify, %function
 5601              	xTaskGenericNotify:
 5602              	.LVL351:
 5603              	.LFB58:
4715:../freertos/tasks.c **** 	TCB_t * pxTCB;
 5604              		.loc 1 4715 2 is_stmt 1 view -0
 5605              		.cfi_startproc
 5606              		@ args = 0, pretend = 0, frame = 0
 5607              		@ frame_needed = 0, uses_anonymous_args = 0
4716:../freertos/tasks.c **** 	BaseType_t xReturn = pdPASS;
 5608              		.loc 1 4716 2 view .LVU1541
4717:../freertos/tasks.c **** 	uint8_t ucOriginalNotifyState;
ARM GAS  /tmp/ccGXytas.s 			page 221


 5609              		.loc 1 4717 2 view .LVU1542
4718:../freertos/tasks.c **** 
 5610              		.loc 1 4718 2 view .LVU1543
4720:../freertos/tasks.c **** 		pxTCB = xTaskToNotify;
 5611              		.loc 1 4720 32 view .LVU1544
4721:../freertos/tasks.c **** 
 5612              		.loc 1 4721 3 view .LVU1545
 5613              	@ ../freertos/tasks.c:4715: 	{
4715:../freertos/tasks.c **** 	TCB_t * pxTCB;
 5614              		.loc 1 4715 2 is_stmt 0 view .LVU1546
 5615 0f48 F8B5     		push	{r3, r4, r5, r6, r7, lr}	@
 5616              	.LCFI50:
 5617              		.cfi_def_cfa_offset 24
 5618              		.cfi_offset 3, -24
 5619              		.cfi_offset 4, -20
 5620              		.cfi_offset 5, -16
 5621              		.cfi_offset 6, -12
 5622              		.cfi_offset 7, -8
 5623              		.cfi_offset 14, -4
 5624              	@ ../freertos/tasks.c:4715: 	{
4715:../freertos/tasks.c **** 	TCB_t * pxTCB;
 5625              		.loc 1 4715 2 view .LVU1547
 5626 0f4a 1D46     		mov	r5, r3	@ pulPreviousNotificationValue, tmp159
 5627 0f4c 0446     		mov	r4, r0	@ xTaskToNotify, tmp156
 5628              	.LVL352:
4723:../freertos/tasks.c **** 		{
 5629              		.loc 1 4723 3 is_stmt 1 view .LVU1548
 5630              	@ ../freertos/tasks.c:4715: 	{
4715:../freertos/tasks.c **** 	TCB_t * pxTCB;
 5631              		.loc 1 4715 2 is_stmt 0 view .LVU1549
 5632 0f4e 0F46     		mov	r7, r1	@ ulValue, tmp157
 5633 0f50 1646     		mov	r6, r2	@ eAction, tmp158
 5634              	@ ../freertos/tasks.c:4723: 		taskENTER_CRITICAL();
4723:../freertos/tasks.c **** 		{
 5635              		.loc 1 4723 3 view .LVU1550
 5636 0f52 FFF7FEFF 		bl	vPortEnterCritical		@
 5637              	.LVL353:
4725:../freertos/tasks.c **** 			{
 5638              		.loc 1 4725 4 is_stmt 1 view .LVU1551
 5639              	@ ../freertos/tasks.c:4725: 			if( pulPreviousNotificationValue != NULL )
4725:../freertos/tasks.c **** 			{
 5640              		.loc 1 4725 6 is_stmt 0 view .LVU1552
 5641 0f56 0DB1     		cbz	r5, .L400	@ pulPreviousNotificationValue,
4727:../freertos/tasks.c **** 			}
 5642              		.loc 1 4727 5 is_stmt 1 view .LVU1553
 5643              	@ ../freertos/tasks.c:4727: 				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
4727:../freertos/tasks.c **** 			}
 5644              		.loc 1 4727 42 is_stmt 0 view .LVU1554
 5645 0f58 636D     		ldr	r3, [r4, #84]	@ _1, MEM[(struct TCB_t *)xTaskToNotify_19(D)].ulNotifiedValue
 5646              	@ ../freertos/tasks.c:4727: 				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
4727:../freertos/tasks.c **** 			}
 5647              		.loc 1 4727 35 view .LVU1555
 5648 0f5a 2B60     		str	r3, [r5]	@ _1, *pulPreviousNotificationValue_23(D)
 5649              	.L400:
4730:../freertos/tasks.c **** 
 5650              		.loc 1 4730 4 is_stmt 1 view .LVU1556
 5651              	@ ../freertos/tasks.c:4732: 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
ARM GAS  /tmp/ccGXytas.s 			page 222


4732:../freertos/tasks.c **** 
 5652              		.loc 1 4732 25 is_stmt 0 view .LVU1557
 5653 0f5c 0223     		movs	r3, #2	@ tmp138,
 5654              	@ ../freertos/tasks.c:4730: 			ucOriginalNotifyState = pxTCB->ucNotifyState;
4730:../freertos/tasks.c **** 
 5655              		.loc 1 4730 26 view .LVU1558
 5656 0f5e 94F85850 		ldrb	r5, [r4, #88]	@ zero_extendqisi2	@ MEM[(struct TCB_t *)xTaskToNotify_19(D)].ucNotifyState, ME
 5657              	.LVL354:
 5658              	@ ../freertos/tasks.c:4734: 			switch( eAction )
4734:../freertos/tasks.c **** 			{
 5659              		.loc 1 4734 4 view .LVU1559
 5660 0f62 721E     		subs	r2, r6, #1	@ tmp140, eAction,
 5661              	@ ../freertos/tasks.c:4730: 			ucOriginalNotifyState = pxTCB->ucNotifyState;
4730:../freertos/tasks.c **** 
 5662              		.loc 1 4730 26 view .LVU1560
 5663 0f64 EDB2     		uxtb	r5, r5	@ ucOriginalNotifyState, MEM[(struct TCB_t *)xTaskToNotify_19(D)].ucNotifyState
 5664              	.LVL355:
4732:../freertos/tasks.c **** 
 5665              		.loc 1 4732 4 is_stmt 1 view .LVU1561
 5666              	@ ../freertos/tasks.c:4732: 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
4732:../freertos/tasks.c **** 
 5667              		.loc 1 4732 25 is_stmt 0 view .LVU1562
 5668 0f66 84F85830 		strb	r3, [r4, #88]	@ tmp138, MEM[(struct TCB_t *)xTaskToNotify_19(D)].ucNotifyState
4734:../freertos/tasks.c **** 			{
 5669              		.loc 1 4734 4 is_stmt 1 view .LVU1563
 5670 0f6a 032A     		cmp	r2, #3	@ tmp140,
 5671 0f6c 06D8     		bhi	.L401		@
 5672 0f6e DFE802F0 		tbb	[pc, r2]	@ tmp140
 5673              	.L403:
 5674 0f72 02       		.byte	(.L406-.L403)/2
 5675 0f73 2D       		.byte	(.L405-.L403)/2
 5676 0f74 32       		.byte	(.L417-.L403)/2
 5677 0f75 30       		.byte	(.L402-.L403)/2
 5678              		.p2align 1
 5679              	.L406:
4737:../freertos/tasks.c **** 					break;
 5680              		.loc 1 4737 6 view .LVU1564
 5681              	@ ../freertos/tasks.c:4737: 					pxTCB->ulNotifiedValue |= ulValue;
4737:../freertos/tasks.c **** 					break;
 5682              		.loc 1 4737 11 is_stmt 0 view .LVU1565
 5683 0f76 636D     		ldr	r3, [r4, #84]	@ _3, MEM[(struct TCB_t *)xTaskToNotify_19(D)].ulNotifiedValue
 5684              	@ ../freertos/tasks.c:4737: 					pxTCB->ulNotifiedValue |= ulValue;
4737:../freertos/tasks.c **** 					break;
 5685              		.loc 1 4737 29 view .LVU1566
 5686 0f78 3B43     		orrs	r3, r3, r7	@, _4, _3, ulValue
 5687              	.L416:
 5688              	@ ../freertos/tasks.c:4741: 					( pxTCB->ulNotifiedValue )++;
4741:../freertos/tasks.c **** 					break;
 5689              		.loc 1 4741 32 view .LVU1567
 5690 0f7a 6365     		str	r3, [r4, #84]	@ _6,
4742:../freertos/tasks.c **** 
 5691              		.loc 1 4742 6 is_stmt 1 view .LVU1568
 5692              	.L401:
4774:../freertos/tasks.c **** 
 5693              		.loc 1 4774 22 view .LVU1569
4778:../freertos/tasks.c **** 			{
 5694              		.loc 1 4778 4 view .LVU1570
ARM GAS  /tmp/ccGXytas.s 			page 223


 5695              	@ ../freertos/tasks.c:4778: 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
4778:../freertos/tasks.c **** 			{
 5696              		.loc 1 4778 6 is_stmt 0 view .LVU1571
 5697 0f7c 012D     		cmp	r5, #1	@ ucOriginalNotifyState,
 5698 0f7e 20D1     		bne	.L409		@,
4780:../freertos/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
 5699              		.loc 1 4780 5 is_stmt 1 view .LVU1572
 5700              	@ ../freertos/tasks.c:4780: 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
4780:../freertos/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
 5701              		.loc 1 4780 14 is_stmt 0 view .LVU1573
 5702 0f80 271D     		adds	r7, r4, #4	@ _7, xTaskToNotify,
 5703              	.LVL356:
4780:../freertos/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
 5704              		.loc 1 4780 14 view .LVU1574
 5705 0f82 3846     		mov	r0, r7	@, _7
 5706 0f84 FFF7FEFF 		bl	uxListRemove		@
 5707              	.LVL357:
4781:../freertos/tasks.c **** 
 5708              		.loc 1 4781 5 is_stmt 1 view .LVU1575
4781:../freertos/tasks.c **** 
 5709              		.loc 1 4781 5 view .LVU1576
 5710 0f88 1420     		movs	r0, #20	@ tmp148,
 5711 0f8a 154E     		ldr	r6, .L418	@ tmp141,
 5712              	.LVL358:
4781:../freertos/tasks.c **** 
 5713              		.loc 1 4781 5 is_stmt 0 view .LVU1577
 5714 0f8c E36A     		ldr	r3, [r4, #44]	@ _8, MEM[(struct TCB_t *)xTaskToNotify_19(D)].uxPriority
 5715 0f8e B268     		ldr	r2, [r6, #8]	@ uxTopReadyPriority.127_10, uxTopReadyPriority
 5716 0f90 9D40     		lsls	r5, r5, r3	@ tmp142, ucOriginalNotifyState, _8
 5717              	.LVL359:
4781:../freertos/tasks.c **** 
 5718              		.loc 1 4781 5 view .LVU1578
 5719 0f92 1543     		orrs	r5, r5, r2	@, _11, tmp142, uxTopReadyPriority.127_10
 5720 0f94 06F14802 		add	r2, r6, #72	@ tmp146, tmp141,
 5721 0f98 00FB0320 		mla	r0, r0, r3, r2	@, tmp148, _8, tmp146
 5722 0f9c 3946     		mov	r1, r7	@, _7
 5723 0f9e B560     		str	r5, [r6, #8]	@ _11, uxTopReadyPriority
4781:../freertos/tasks.c **** 
 5724              		.loc 1 4781 5 is_stmt 1 view .LVU1579
 5725 0fa0 FFF7FEFF 		bl	vListInsertEnd		@
 5726              	.LVL360:
4781:../freertos/tasks.c **** 
 5727              		.loc 1 4781 35 discriminator 1 view .LVU1580
4784:../freertos/tasks.c **** 
 5728              		.loc 1 4784 82 view .LVU1581
4802:../freertos/tasks.c **** 				{
 5729              		.loc 1 4802 5 view .LVU1582
 5730              	@ ../freertos/tasks.c:4802: 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
4802:../freertos/tasks.c **** 				{
 5731              		.loc 1 4802 41 is_stmt 0 view .LVU1583
 5732 0fa4 7368     		ldr	r3, [r6, #4]	@ pxCurrentTCB.128_14, pxCurrentTCB
 5733              	@ ../freertos/tasks.c:4802: 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
4802:../freertos/tasks.c **** 				{
 5734              		.loc 1 4802 7 view .LVU1584
 5735 0fa6 E26A     		ldr	r2, [r4, #44]	@ MEM[(struct TCB_t *)xTaskToNotify_19(D)].uxPriority, MEM[(struct TCB_t *)xTask
 5736 0fa8 DB6A     		ldr	r3, [r3, #44]	@ pxCurrentTCB.128_14->uxPriority, pxCurrentTCB.128_14->uxPriority
 5737 0faa 9A42     		cmp	r2, r3	@ MEM[(struct TCB_t *)xTaskToNotify_19(D)].uxPriority, pxCurrentTCB.128_14->uxPriority
ARM GAS  /tmp/ccGXytas.s 			page 224


 5738 0fac 09D9     		bls	.L409		@,
4806:../freertos/tasks.c **** 				}
 5739              		.loc 1 4806 6 is_stmt 1 view .LVU1585
 5740 0fae 4FF0E023 		mov	r3, #-536813568	@ tmp153,
 5741 0fb2 4FF08052 		mov	r2, #268435456	@ tmp154,
 5742 0fb6 C3F8042D 		str	r2, [r3, #3332]	@ tmp154, MEM[(volatile uint32_t *)3758157060B]
4806:../freertos/tasks.c **** 				}
 5743              		.loc 1 4806 6 view .LVU1586
 5744              		.syntax unified
 5745              	@ 4806 "../freertos/tasks.c" 1
 5746 0fba BFF34F8F 		dsb	
 5747              	@ 0 "" 2
4806:../freertos/tasks.c **** 				}
 5748              		.loc 1 4806 6 view .LVU1587
 5749              	@ 4806 "../freertos/tasks.c" 1
 5750 0fbe BFF36F8F 		isb
 5751              	@ 0 "" 2
4806:../freertos/tasks.c **** 				}
 5752              		.loc 1 4806 37 view .LVU1588
 5753              		.thumb
 5754              		.syntax unified
 5755              	.L409:
 5756              	@ ../freertos/tasks.c:4715: 	{
4715:../freertos/tasks.c **** 	TCB_t * pxTCB;
 5757              		.loc 1 4715 2 is_stmt 0 view .LVU1589
 5758 0fc2 0124     		movs	r4, #1	@ <retval>,
 5759              	.LVL361:
 5760              	.L407:
4815:../freertos/tasks.c **** 			}
 5761              		.loc 1 4815 29 is_stmt 1 view .LVU1590
4818:../freertos/tasks.c **** 
 5762              		.loc 1 4818 3 view .LVU1591
 5763 0fc4 FFF7FEFF 		bl	vPortExitCritical		@
 5764              	.LVL362:
4820:../freertos/tasks.c **** 	}
 5765              		.loc 1 4820 3 view .LVU1592
 5766              	@ ../freertos/tasks.c:4821: 	}
4821:../freertos/tasks.c **** 
 5767              		.loc 1 4821 2 is_stmt 0 view .LVU1593
 5768 0fc8 2046     		mov	r0, r4	@, <retval>
 5769 0fca F8BD     		pop	{r3, r4, r5, r6, r7, pc}	@
 5770              	.LVL363:
 5771              	.L405:
4741:../freertos/tasks.c **** 					break;
 5772              		.loc 1 4741 6 is_stmt 1 view .LVU1594
 5773              	@ ../freertos/tasks.c:4741: 					( pxTCB->ulNotifiedValue )++;
4741:../freertos/tasks.c **** 					break;
 5774              		.loc 1 4741 13 is_stmt 0 view .LVU1595
 5775 0fcc 636D     		ldr	r3, [r4, #84]	@ _5, MEM[(struct TCB_t *)xTaskToNotify_19(D)].ulNotifiedValue
 5776              	@ ../freertos/tasks.c:4741: 					( pxTCB->ulNotifiedValue )++;
4741:../freertos/tasks.c **** 					break;
 5777              		.loc 1 4741 32 view .LVU1596
 5778 0fce 0133     		adds	r3, r3, #1	@ _6, _5,
 5779 0fd0 D3E7     		b	.L416		@
 5780              	.L402:
4749:../freertos/tasks.c **** 					{
 5781              		.loc 1 4749 6 is_stmt 1 view .LVU1597
ARM GAS  /tmp/ccGXytas.s 			page 225


 5782              	@ ../freertos/tasks.c:4749: 					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
4749:../freertos/tasks.c **** 					{
 5783              		.loc 1 4749 8 is_stmt 0 view .LVU1598
 5784 0fd2 022D     		cmp	r5, #2	@ ucOriginalNotifyState,
 5785 0fd4 01D0     		beq	.L411		@,
 5786              	.L417:
4751:../freertos/tasks.c **** 					}
 5787              		.loc 1 4751 7 is_stmt 1 view .LVU1599
 5788              	@ ../freertos/tasks.c:4751: 						pxTCB->ulNotifiedValue = ulValue;
4751:../freertos/tasks.c **** 					}
 5789              		.loc 1 4751 30 is_stmt 0 view .LVU1600
 5790 0fd6 6765     		str	r7, [r4, #84]	@ ulValue,
 5791 0fd8 D0E7     		b	.L401		@
 5792              	.L411:
 5793              	@ ../freertos/tasks.c:4756: 						xReturn = pdFAIL;
4756:../freertos/tasks.c **** 					}
 5794              		.loc 1 4756 15 view .LVU1601
 5795 0fda 0024     		movs	r4, #0	@ <retval>,
 5796              	.LVL364:
4756:../freertos/tasks.c **** 					}
 5797              		.loc 1 4756 15 view .LVU1602
 5798 0fdc F2E7     		b	.L407		@
 5799              	.L419:
 5800 0fde 00BF     		.align	2
 5801              	.L418:
 5802 0fe0 00000000 		.word	.LANCHOR0
 5803              		.cfi_endproc
 5804              	.LFE58:
 5805              		.size	xTaskGenericNotify, .-xTaskGenericNotify
 5806              		.align	1
 5807              		.global	xTaskGenericNotifyFromISR
 5808              		.syntax unified
 5809              		.thumb
 5810              		.thumb_func
 5811              		.type	xTaskGenericNotifyFromISR, %function
 5812              	xTaskGenericNotifyFromISR:
 5813              	.LVL365:
 5814              	.LFB59:
4829:../freertos/tasks.c **** 	TCB_t * pxTCB;
 5815              		.loc 1 4829 2 is_stmt 1 view -0
 5816              		.cfi_startproc
 5817              		@ args = 4, pretend = 0, frame = 0
 5818              		@ frame_needed = 0, uses_anonymous_args = 0
4830:../freertos/tasks.c **** 	uint8_t ucOriginalNotifyState;
 5819              		.loc 1 4830 2 view .LVU1604
4831:../freertos/tasks.c **** 	BaseType_t xReturn = pdPASS;
 5820              		.loc 1 4831 2 view .LVU1605
4832:../freertos/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 5821              		.loc 1 4832 2 view .LVU1606
4833:../freertos/tasks.c **** 
 5822              		.loc 1 4833 2 view .LVU1607
4835:../freertos/tasks.c **** 
 5823              		.loc 1 4835 32 view .LVU1608
4853:../freertos/tasks.c **** 
 5824              		.loc 1 4853 45 view .LVU1609
4855:../freertos/tasks.c **** 
 5825              		.loc 1 4855 3 view .LVU1610
ARM GAS  /tmp/ccGXytas.s 			page 226


 5826              	@ ../freertos/tasks.c:4829: 	{
4829:../freertos/tasks.c **** 	TCB_t * pxTCB;
 5827              		.loc 1 4829 2 is_stmt 0 view .LVU1611
 5828 0fe4 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}	@
 5829              	.LCFI51:
 5830              		.cfi_def_cfa_offset 32
 5831              		.cfi_offset 3, -32
 5832              		.cfi_offset 4, -28
 5833              		.cfi_offset 5, -24
 5834              		.cfi_offset 6, -20
 5835              		.cfi_offset 7, -16
 5836              		.cfi_offset 8, -12
 5837              		.cfi_offset 9, -8
 5838              		.cfi_offset 14, -4
 5839              	@ ../freertos/tasks.c:4829: 	{
4829:../freertos/tasks.c **** 	TCB_t * pxTCB;
 5840              		.loc 1 4829 2 view .LVU1612
 5841 0fe8 089F     		ldr	r7, [sp, #32]	@ pxHigherPriorityTaskWoken, pxHigherPriorityTaskWoken
 5842 0fea 0446     		mov	r4, r0	@ xTaskToNotify, tmp171
 5843              	.LVL366:
4857:../freertos/tasks.c **** 		{
 5844              		.loc 1 4857 3 is_stmt 1 view .LVU1613
 5845              	.LBB158:
 5846              	.LBI158:
 207:../freertos/portable/GCC/ARM_CM3/portmacro.h **** {
 5847              		.loc 2 207 34 view .LVU1614
 5848              	.LBB159:
 209:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 
 5849              		.loc 2 209 1 view .LVU1615
 211:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	(
 5850              		.loc 2 211 2 view .LVU1616
 5851              		.syntax unified
 5852              	@ 211 "../freertos/portable/GCC/ARM_CM3/portmacro.h" 1
 5853 0fec EFF31188 			mrs r8, basepri												@ ulOriginalBASEPRI
 5854 0ff0 4FF01000 		mov r0, #16													@ ulNewBASEPRI,
 5855 0ff4 80F31188 		msr basepri, r0												@ ulNewBASEPRI
 5856 0ff8 BFF36F8F 		isb														
 5857 0ffc BFF34F8F 		dsb														
 5858              	
 5859              	@ 0 "" 2
 5860              	.LVL367:
 223:../freertos/portable/GCC/ARM_CM3/portmacro.h **** }
 5861              		.loc 2 223 2 view .LVU1617
 223:../freertos/portable/GCC/ARM_CM3/portmacro.h **** }
 5862              		.loc 2 223 2 is_stmt 0 view .LVU1618
 5863              		.thumb
 5864              		.syntax unified
 5865              	.LBE159:
 5866              	.LBE158:
4859:../freertos/tasks.c **** 			{
 5867              		.loc 1 4859 4 is_stmt 1 view .LVU1619
 5868              	@ ../freertos/tasks.c:4859: 			if( pulPreviousNotificationValue != NULL )
4859:../freertos/tasks.c **** 			{
 5869              		.loc 1 4859 6 is_stmt 0 view .LVU1620
 5870 1000 0BB1     		cbz	r3, .L421	@ pulPreviousNotificationValue,
4861:../freertos/tasks.c **** 			}
 5871              		.loc 1 4861 5 is_stmt 1 view .LVU1621
ARM GAS  /tmp/ccGXytas.s 			page 227


 5872              	@ ../freertos/tasks.c:4861: 				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
4861:../freertos/tasks.c **** 			}
 5873              		.loc 1 4861 42 is_stmt 0 view .LVU1622
 5874 1002 606D     		ldr	r0, [r4, #84]	@ _1, MEM[(struct TCB_t *)xTaskToNotify_23(D)].ulNotifiedValue
 5875              	@ ../freertos/tasks.c:4861: 				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
4861:../freertos/tasks.c **** 			}
 5876              		.loc 1 4861 35 view .LVU1623
 5877 1004 1860     		str	r0, [r3]	@ _1, *pulPreviousNotificationValue_26(D)
 5878              	.L421:
4864:../freertos/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 5879              		.loc 1 4864 4 is_stmt 1 view .LVU1624
 5880              	@ ../freertos/tasks.c:4865: 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
4865:../freertos/tasks.c **** 
 5881              		.loc 1 4865 25 is_stmt 0 view .LVU1625
 5882 1006 0223     		movs	r3, #2	@ tmp145,
 5883              	.LVL368:
 5884              	@ ../freertos/tasks.c:4864: 			ucOriginalNotifyState = pxTCB->ucNotifyState;
4864:../freertos/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 5885              		.loc 1 4864 26 view .LVU1626
 5886 1008 94F85850 		ldrb	r5, [r4, #88]	@ zero_extendqisi2	@ MEM[(struct TCB_t *)xTaskToNotify_23(D)].ucNotifyState, ME
 5887              	@ ../freertos/tasks.c:4867: 			switch( eAction )
4867:../freertos/tasks.c **** 			{
 5888              		.loc 1 4867 4 view .LVU1627
 5889 100c 013A     		subs	r2, r2, #1	@ tmp147, eAction,
 5890              	.LVL369:
 5891              	@ ../freertos/tasks.c:4864: 			ucOriginalNotifyState = pxTCB->ucNotifyState;
4864:../freertos/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 5892              		.loc 1 4864 26 view .LVU1628
 5893 100e EDB2     		uxtb	r5, r5	@ ucOriginalNotifyState, MEM[(struct TCB_t *)xTaskToNotify_23(D)].ucNotifyState
 5894              	.LVL370:
4865:../freertos/tasks.c **** 
 5895              		.loc 1 4865 4 is_stmt 1 view .LVU1629
 5896              	@ ../freertos/tasks.c:4865: 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
4865:../freertos/tasks.c **** 
 5897              		.loc 1 4865 25 is_stmt 0 view .LVU1630
 5898 1010 84F85830 		strb	r3, [r4, #88]	@ tmp145, MEM[(struct TCB_t *)xTaskToNotify_23(D)].ucNotifyState
4867:../freertos/tasks.c **** 			{
 5899              		.loc 1 4867 4 is_stmt 1 view .LVU1631
 5900 1014 032A     		cmp	r2, #3	@ tmp147,
 5901 1016 06D8     		bhi	.L422		@
 5902 1018 DFE802F0 		tbb	[pc, r2]	@ tmp147
 5903              	.L424:
 5904 101c 02       		.byte	(.L427-.L424)/2
 5905 101d 2C       		.byte	(.L426-.L424)/2
 5906 101e 31       		.byte	(.L444-.L424)/2
 5907 101f 2F       		.byte	(.L423-.L424)/2
 5908              		.p2align 1
 5909              	.L427:
4870:../freertos/tasks.c **** 					break;
 5910              		.loc 1 4870 6 view .LVU1632
 5911              	@ ../freertos/tasks.c:4870: 					pxTCB->ulNotifiedValue |= ulValue;
4870:../freertos/tasks.c **** 					break;
 5912              		.loc 1 4870 11 is_stmt 0 view .LVU1633
 5913 1020 636D     		ldr	r3, [r4, #84]	@ _3, MEM[(struct TCB_t *)xTaskToNotify_23(D)].ulNotifiedValue
 5914              	@ ../freertos/tasks.c:4870: 					pxTCB->ulNotifiedValue |= ulValue;
4870:../freertos/tasks.c **** 					break;
 5915              		.loc 1 4870 29 view .LVU1634
ARM GAS  /tmp/ccGXytas.s 			page 228


 5916 1022 0B43     		orrs	r3, r3, r1	@, _4, _3, ulValue
 5917              	.L443:
 5918              	@ ../freertos/tasks.c:4874: 					( pxTCB->ulNotifiedValue )++;
4874:../freertos/tasks.c **** 					break;
 5919              		.loc 1 4874 32 view .LVU1635
 5920 1024 6365     		str	r3, [r4, #84]	@ _6,
4875:../freertos/tasks.c **** 
 5921              		.loc 1 4875 6 is_stmt 1 view .LVU1636
 5922              	.L422:
4906:../freertos/tasks.c **** 
 5923              		.loc 1 4906 31 view .LVU1637
4910:../freertos/tasks.c **** 			{
 5924              		.loc 1 4910 4 view .LVU1638
 5925              	@ ../freertos/tasks.c:4910: 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
4910:../freertos/tasks.c **** 			{
 5926              		.loc 1 4910 6 is_stmt 0 view .LVU1639
 5927 1026 012D     		cmp	r5, #1	@ ucOriginalNotifyState,
 5928 1028 1FD1     		bne	.L430		@,
4913:../freertos/tasks.c **** 
 5929              		.loc 1 4913 82 is_stmt 1 view .LVU1640
4915:../freertos/tasks.c **** 				{
 5930              		.loc 1 4915 5 view .LVU1641
 5931              	@ ../freertos/tasks.c:4915: 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
4915:../freertos/tasks.c **** 				{
 5932              		.loc 1 4915 30 is_stmt 0 view .LVU1642
 5933 102a 194E     		ldr	r6, .L446	@ tmp148,
 5934 102c D6F8F030 		ldr	r3, [r6, #240]	@ uxSchedulerSuspended.129_7, uxSchedulerSuspended
 5935              	@ ../freertos/tasks.c:4915: 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
4915:../freertos/tasks.c **** 				{
 5936              		.loc 1 4915 7 view .LVU1643
 5937 1030 3BBB     		cbnz	r3, .L431	@ uxSchedulerSuspended.129_7,
4917:../freertos/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 5938              		.loc 1 4917 6 is_stmt 1 view .LVU1644
 5939              	@ ../freertos/tasks.c:4917: 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
4917:../freertos/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 5940              		.loc 1 4917 15 is_stmt 0 view .LVU1645
 5941 1032 04F10409 		add	r9, r4, #4	@ _8, xTaskToNotify,
 5942 1036 4846     		mov	r0, r9	@, _8
 5943 1038 FFF7FEFF 		bl	uxListRemove		@
 5944              	.LVL371:
4918:../freertos/tasks.c **** 				}
 5945              		.loc 1 4918 6 is_stmt 1 view .LVU1646
4918:../freertos/tasks.c **** 				}
 5946              		.loc 1 4918 6 view .LVU1647
 5947 103c 1420     		movs	r0, #20	@ tmp156,
 5948 103e 4946     		mov	r1, r9	@, _8
 5949 1040 E36A     		ldr	r3, [r4, #44]	@ _9, MEM[(struct TCB_t *)xTaskToNotify_23(D)].uxPriority
 5950 1042 B268     		ldr	r2, [r6, #8]	@ uxTopReadyPriority.130_11, uxTopReadyPriority
 5951 1044 9D40     		lsls	r5, r5, r3	@ tmp150, ucOriginalNotifyState, _9
 5952              	.LVL372:
4918:../freertos/tasks.c **** 				}
 5953              		.loc 1 4918 6 is_stmt 0 view .LVU1648
 5954 1046 1543     		orrs	r5, r5, r2	@, _12, tmp150, uxTopReadyPriority.130_11
 5955 1048 06F14802 		add	r2, r6, #72	@ tmp154, tmp148,
 5956 104c 00FB0320 		mla	r0, r0, r3, r2	@, tmp156, _9, tmp154
 5957 1050 B560     		str	r5, [r6, #8]	@ _12, uxTopReadyPriority
4918:../freertos/tasks.c **** 				}
ARM GAS  /tmp/ccGXytas.s 			page 229


 5958              		.loc 1 4918 6 is_stmt 1 view .LVU1649
 5959              	.L445:
 5960              	@ ../freertos/tasks.c:4924: 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem )
4924:../freertos/tasks.c **** 				}
 5961              		.loc 1 4924 6 is_stmt 0 view .LVU1650
 5962 1052 FFF7FEFF 		bl	vListInsertEnd		@
 5963              	.LVL373:
4927:../freertos/tasks.c **** 				{
 5964              		.loc 1 4927 5 is_stmt 1 view .LVU1651
 5965              	@ ../freertos/tasks.c:4927: 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
4927:../freertos/tasks.c **** 				{
 5966              		.loc 1 4927 41 is_stmt 0 view .LVU1652
 5967 1056 7368     		ldr	r3, [r6, #4]	@ pxCurrentTCB.131_16, pxCurrentTCB
 5968              	@ ../freertos/tasks.c:4927: 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
4927:../freertos/tasks.c **** 				{
 5969              		.loc 1 4927 7 view .LVU1653
 5970 1058 E26A     		ldr	r2, [r4, #44]	@ MEM[(struct TCB_t *)xTaskToNotify_23(D)].uxPriority, MEM[(struct TCB_t *)xTask
 5971 105a DB6A     		ldr	r3, [r3, #44]	@ pxCurrentTCB.131_16->uxPriority, pxCurrentTCB.131_16->uxPriority
 5972 105c 9A42     		cmp	r2, r3	@ MEM[(struct TCB_t *)xTaskToNotify_23(D)].uxPriority, pxCurrentTCB.131_16->uxPriority
 5973 105e 04D9     		bls	.L430		@,
4931:../freertos/tasks.c **** 					{
 5974              		.loc 1 4931 6 is_stmt 1 view .LVU1654
 5975 1060 0123     		movs	r3, #1	@ tmp169,
 5976              	@ ../freertos/tasks.c:4931: 					if( pxHigherPriorityTaskWoken != NULL )
4931:../freertos/tasks.c **** 					{
 5977              		.loc 1 4931 8 is_stmt 0 view .LVU1655
 5978 1062 07B1     		cbz	r7, .L434	@ pxHigherPriorityTaskWoken,
4933:../freertos/tasks.c **** 					}
 5979              		.loc 1 4933 7 is_stmt 1 view .LVU1656
 5980              	@ ../freertos/tasks.c:4933: 						*pxHigherPriorityTaskWoken = pdTRUE;
4933:../freertos/tasks.c **** 					}
 5981              		.loc 1 4933 34 is_stmt 0 view .LVU1657
 5982 1064 3B60     		str	r3, [r7]	@ tmp169, *pxHigherPriorityTaskWoken_40(D)
 5983              	.L434:
4939:../freertos/tasks.c **** 				}
 5984              		.loc 1 4939 6 is_stmt 1 view .LVU1658
 5985              	@ ../freertos/tasks.c:4939: 					xYieldPending = pdTRUE;
4939:../freertos/tasks.c **** 				}
 5986              		.loc 1 4939 20 is_stmt 0 view .LVU1659
 5987 1066 C6F80031 		str	r3, [r6, #256]	@ tmp169, xYieldPending
 5988              	.L430:
 5989              	@ ../freertos/tasks.c:4829: 	{
4829:../freertos/tasks.c **** 	TCB_t * pxTCB;
 5990              		.loc 1 4829 2 view .LVU1660
 5991 106a 0120     		movs	r0, #1	@ <retval>,
 5992              	.L428:
 5993              	.LVL374:
4943:../freertos/tasks.c **** 				}
 5994              		.loc 1 4943 30 is_stmt 1 view .LVU1661
4947:../freertos/tasks.c **** 
 5995              		.loc 1 4947 3 view .LVU1662
 5996              	.LBB160:
 5997              	.LBI160:
 227:../freertos/portable/GCC/ARM_CM3/portmacro.h **** {
 5998              		.loc 2 227 30 view .LVU1663
 5999              	.LBB161:
 6000              		.loc 2 229 2 view .LVU1664
ARM GAS  /tmp/ccGXytas.s 			page 230


 6001              		.syntax unified
 6002              	@ 229 "../freertos/portable/GCC/ARM_CM3/portmacro.h" 1
 6003 106c 88F31188 			msr basepri, r8		@ ulOriginalBASEPRI
 6004              	@ 0 "" 2
 6005              	.LVL375:
 6006              		.loc 2 229 2 is_stmt 0 view .LVU1665
 6007              		.thumb
 6008              		.syntax unified
 6009              	.LBE161:
 6010              	.LBE160:
4949:../freertos/tasks.c **** 	}
 6011              		.loc 1 4949 3 is_stmt 1 view .LVU1666
 6012              	@ ../freertos/tasks.c:4950: 	}
4950:../freertos/tasks.c **** 
 6013              		.loc 1 4950 2 is_stmt 0 view .LVU1667
 6014 1070 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}	@
 6015              	.LVL376:
 6016              	.L426:
4874:../freertos/tasks.c **** 					break;
 6017              		.loc 1 4874 6 is_stmt 1 view .LVU1668
 6018              	@ ../freertos/tasks.c:4874: 					( pxTCB->ulNotifiedValue )++;
4874:../freertos/tasks.c **** 					break;
 6019              		.loc 1 4874 13 is_stmt 0 view .LVU1669
 6020 1074 636D     		ldr	r3, [r4, #84]	@ _5, MEM[(struct TCB_t *)xTaskToNotify_23(D)].ulNotifiedValue
 6021              	@ ../freertos/tasks.c:4874: 					( pxTCB->ulNotifiedValue )++;
4874:../freertos/tasks.c **** 					break;
 6022              		.loc 1 4874 32 view .LVU1670
 6023 1076 0133     		adds	r3, r3, #1	@ _6, _5,
 6024 1078 D4E7     		b	.L443		@
 6025              	.L423:
4882:../freertos/tasks.c **** 					{
 6026              		.loc 1 4882 6 is_stmt 1 view .LVU1671
 6027              	@ ../freertos/tasks.c:4882: 					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
4882:../freertos/tasks.c **** 					{
 6028              		.loc 1 4882 8 is_stmt 0 view .LVU1672
 6029 107a 022D     		cmp	r5, #2	@ ucOriginalNotifyState,
 6030 107c 06D0     		beq	.L435		@,
 6031              	.L444:
4884:../freertos/tasks.c **** 					}
 6032              		.loc 1 4884 7 is_stmt 1 view .LVU1673
 6033              	@ ../freertos/tasks.c:4884: 						pxTCB->ulNotifiedValue = ulValue;
4884:../freertos/tasks.c **** 					}
 6034              		.loc 1 4884 30 is_stmt 0 view .LVU1674
 6035 107e 6165     		str	r1, [r4, #84]	@ ulValue,
 6036 1080 D1E7     		b	.L422		@
 6037              	.L431:
4924:../freertos/tasks.c **** 				}
 6038              		.loc 1 4924 6 is_stmt 1 view .LVU1675
 6039 1082 04F11801 		add	r1, r4, #24	@, xTaskToNotify,
 6040              	.LVL377:
4924:../freertos/tasks.c **** 				}
 6041              		.loc 1 4924 6 is_stmt 0 view .LVU1676
 6042 1086 06F1D400 		add	r0, r6, #212	@, tmp148,
 6043 108a E2E7     		b	.L445		@
 6044              	.LVL378:
 6045              	.L435:
 6046              	@ ../freertos/tasks.c:4889: 						xReturn = pdFAIL;
ARM GAS  /tmp/ccGXytas.s 			page 231


4889:../freertos/tasks.c **** 					}
 6047              		.loc 1 4889 15 view .LVU1677
 6048 108c 0020     		movs	r0, #0	@ <retval>,
 6049 108e EDE7     		b	.L428		@
 6050              	.L447:
 6051              		.align	2
 6052              	.L446:
 6053 1090 00000000 		.word	.LANCHOR0
 6054              		.cfi_endproc
 6055              	.LFE59:
 6056              		.size	xTaskGenericNotifyFromISR, .-xTaskGenericNotifyFromISR
 6057              		.align	1
 6058              		.global	vTaskNotifyGiveFromISR
 6059              		.syntax unified
 6060              		.thumb
 6061              		.thumb_func
 6062              		.type	vTaskNotifyGiveFromISR, %function
 6063              	vTaskNotifyGiveFromISR:
 6064              	.LVL379:
 6065              	.LFB60:
4958:../freertos/tasks.c **** 	TCB_t * pxTCB;
 6066              		.loc 1 4958 2 is_stmt 1 view -0
 6067              		.cfi_startproc
 6068              		@ args = 0, pretend = 0, frame = 0
 6069              		@ frame_needed = 0, uses_anonymous_args = 0
4959:../freertos/tasks.c **** 	uint8_t ucOriginalNotifyState;
 6070              		.loc 1 4959 2 view .LVU1679
4960:../freertos/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 6071              		.loc 1 4960 2 view .LVU1680
4961:../freertos/tasks.c **** 
 6072              		.loc 1 4961 2 view .LVU1681
4963:../freertos/tasks.c **** 
 6073              		.loc 1 4963 32 view .LVU1682
4981:../freertos/tasks.c **** 
 6074              		.loc 1 4981 45 view .LVU1683
4983:../freertos/tasks.c **** 
 6075              		.loc 1 4983 3 view .LVU1684
4985:../freertos/tasks.c **** 		{
 6076              		.loc 1 4985 3 view .LVU1685
 6077              	.LBB162:
 6078              	.LBI162:
 207:../freertos/portable/GCC/ARM_CM3/portmacro.h **** {
 6079              		.loc 2 207 34 view .LVU1686
 6080              	.LBB163:
 209:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 
 6081              		.loc 2 209 1 view .LVU1687
 211:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	(
 6082              		.loc 2 211 2 view .LVU1688
 6083              	.LBE163:
 6084              	.LBE162:
 6085              	@ ../freertos/tasks.c:4958: 	{
4958:../freertos/tasks.c **** 	TCB_t * pxTCB;
 6086              		.loc 1 4958 2 is_stmt 0 view .LVU1689
 6087 1094 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}	@
 6088              	.LCFI52:
 6089              		.cfi_def_cfa_offset 32
 6090              		.cfi_offset 3, -32
ARM GAS  /tmp/ccGXytas.s 			page 232


 6091              		.cfi_offset 4, -28
 6092              		.cfi_offset 5, -24
 6093              		.cfi_offset 6, -20
 6094              		.cfi_offset 7, -16
 6095              		.cfi_offset 8, -12
 6096              		.cfi_offset 9, -8
 6097              		.cfi_offset 14, -4
 6098              	@ ../freertos/tasks.c:4958: 	{
4958:../freertos/tasks.c **** 	TCB_t * pxTCB;
 6099              		.loc 1 4958 2 view .LVU1690
 6100 1098 0446     		mov	r4, r0	@ xTaskToNotify, tmp162
 6101 109a 0F46     		mov	r7, r1	@ pxHigherPriorityTaskWoken, tmp163
 6102              	.LBB165:
 6103              	.LBB164:
 6104              	@ ../freertos/portable/GCC/ARM_CM3/portmacro.h:211: 	__asm volatile
 211:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	(
 6105              		.loc 2 211 2 view .LVU1691
 6106              		.syntax unified
 6107              	@ 211 "../freertos/portable/GCC/ARM_CM3/portmacro.h" 1
 6108 109c EFF31188 			mrs r8, basepri												@ ulOriginalBASEPRI
 6109 10a0 4FF01003 		mov r3, #16													@ ulNewBASEPRI,
 6110 10a4 83F31188 		msr basepri, r3												@ ulNewBASEPRI
 6111 10a8 BFF36F8F 		isb														
 6112 10ac BFF34F8F 		dsb														
 6113              	
 6114              	@ 0 "" 2
 6115              	.LVL380:
 223:../freertos/portable/GCC/ARM_CM3/portmacro.h **** }
 6116              		.loc 2 223 2 is_stmt 1 view .LVU1692
 223:../freertos/portable/GCC/ARM_CM3/portmacro.h **** }
 6117              		.loc 2 223 2 is_stmt 0 view .LVU1693
 6118              		.thumb
 6119              		.syntax unified
 6120              	.LBE164:
 6121              	.LBE165:
4987:../freertos/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 6122              		.loc 1 4987 4 is_stmt 1 view .LVU1694
 6123              	@ ../freertos/tasks.c:4988: 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
4988:../freertos/tasks.c **** 
 6124              		.loc 1 4988 25 is_stmt 0 view .LVU1695
 6125 10b0 0223     		movs	r3, #2	@ tmp138,
 6126              	@ ../freertos/tasks.c:4987: 			ucOriginalNotifyState = pxTCB->ucNotifyState;
4987:../freertos/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 6127              		.loc 1 4987 26 view .LVU1696
 6128 10b2 90F85820 		ldrb	r2, [r0, #88]	@ zero_extendqisi2	@ MEM[(struct TCB_t *)xTaskToNotify_17(D)].ucNotifyState, ME
 6129              	@ ../freertos/tasks.c:4988: 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
4988:../freertos/tasks.c **** 
 6130              		.loc 1 4988 25 view .LVU1697
 6131 10b6 80F85830 		strb	r3, [r0, #88]	@ tmp138, MEM[(struct TCB_t *)xTaskToNotify_17(D)].ucNotifyState
 6132              	@ ../freertos/tasks.c:4992: 			( pxTCB->ulNotifiedValue )++;
4992:../freertos/tasks.c **** 
 6133              		.loc 1 4992 11 view .LVU1698
 6134 10ba 436D     		ldr	r3, [r0, #84]	@ _1, MEM[(struct TCB_t *)xTaskToNotify_17(D)].ulNotifiedValue
 6135              	@ ../freertos/tasks.c:4998: 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
4998:../freertos/tasks.c **** 			{
 6136              		.loc 1 4998 6 view .LVU1699
 6137 10bc 012A     		cmp	r2, #1	@ MEM[(struct TCB_t *)xTaskToNotify_17(D)].ucNotifyState,
ARM GAS  /tmp/ccGXytas.s 			page 233


 6138              	@ ../freertos/tasks.c:4992: 			( pxTCB->ulNotifiedValue )++;
4992:../freertos/tasks.c **** 
 6139              		.loc 1 4992 30 view .LVU1700
 6140 10be 03F10103 		add	r3, r3, #1	@ _2, _1,
 6141              	@ ../freertos/tasks.c:4987: 			ucOriginalNotifyState = pxTCB->ucNotifyState;
4987:../freertos/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 6142              		.loc 1 4987 26 view .LVU1701
 6143 10c2 D6B2     		uxtb	r6, r2	@ ucOriginalNotifyState, MEM[(struct TCB_t *)xTaskToNotify_17(D)].ucNotifyState
 6144              	.LVL381:
4988:../freertos/tasks.c **** 
 6145              		.loc 1 4988 4 is_stmt 1 view .LVU1702
4992:../freertos/tasks.c **** 
 6146              		.loc 1 4992 4 view .LVU1703
 6147              	@ ../freertos/tasks.c:4992: 			( pxTCB->ulNotifiedValue )++;
4992:../freertos/tasks.c **** 
 6148              		.loc 1 4992 30 is_stmt 0 view .LVU1704
 6149 10c4 4365     		str	r3, [r0, #84]	@ _2, MEM[(struct TCB_t *)xTaskToNotify_17(D)].ulNotifiedValue
4994:../freertos/tasks.c **** 
 6150              		.loc 1 4994 36 is_stmt 1 view .LVU1705
4998:../freertos/tasks.c **** 			{
 6151              		.loc 1 4998 4 view .LVU1706
 6152              	@ ../freertos/tasks.c:4998: 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
4998:../freertos/tasks.c **** 			{
 6153              		.loc 1 4998 6 is_stmt 0 view .LVU1707
 6154 10c6 1FD1     		bne	.L450		@,
5001:../freertos/tasks.c **** 
 6155              		.loc 1 5001 82 is_stmt 1 view .LVU1708
5003:../freertos/tasks.c **** 				{
 6156              		.loc 1 5003 5 view .LVU1709
 6157              	@ ../freertos/tasks.c:5003: 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
5003:../freertos/tasks.c **** 				{
 6158              		.loc 1 5003 30 is_stmt 0 view .LVU1710
 6159 10c8 144D     		ldr	r5, .L459	@ tmp140,
 6160 10ca D5F8F030 		ldr	r3, [r5, #240]	@ uxSchedulerSuspended.132_3, uxSchedulerSuspended
 6161              	@ ../freertos/tasks.c:5003: 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
5003:../freertos/tasks.c **** 				{
 6162              		.loc 1 5003 7 view .LVU1711
 6163 10ce FBB9     		cbnz	r3, .L451	@ uxSchedulerSuspended.132_3,
5005:../freertos/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 6164              		.loc 1 5005 6 is_stmt 1 view .LVU1712
 6165              	@ ../freertos/tasks.c:5005: 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
5005:../freertos/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 6166              		.loc 1 5005 15 is_stmt 0 view .LVU1713
 6167 10d0 00F10409 		add	r9, r0, #4	@ _4, xTaskToNotify,
 6168 10d4 4846     		mov	r0, r9	@, _4
 6169              	.LVL382:
5005:../freertos/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 6170              		.loc 1 5005 15 view .LVU1714
 6171 10d6 FFF7FEFF 		bl	uxListRemove		@
 6172              	.LVL383:
5006:../freertos/tasks.c **** 				}
 6173              		.loc 1 5006 6 is_stmt 1 view .LVU1715
5006:../freertos/tasks.c **** 				}
 6174              		.loc 1 5006 6 view .LVU1716
 6175 10da 1420     		movs	r0, #20	@ tmp148,
 6176 10dc 4946     		mov	r1, r9	@, _4
 6177 10de E36A     		ldr	r3, [r4, #44]	@ _5, MEM[(struct TCB_t *)xTaskToNotify_17(D)].uxPriority
ARM GAS  /tmp/ccGXytas.s 			page 234


 6178 10e0 AA68     		ldr	r2, [r5, #8]	@ uxTopReadyPriority.133_7, uxTopReadyPriority
 6179 10e2 9E40     		lsls	r6, r6, r3	@ tmp142, ucOriginalNotifyState, _5
 6180              	.LVL384:
5006:../freertos/tasks.c **** 				}
 6181              		.loc 1 5006 6 is_stmt 0 view .LVU1717
 6182 10e4 1643     		orrs	r6, r6, r2	@, _8, tmp142, uxTopReadyPriority.133_7
 6183 10e6 05F14802 		add	r2, r5, #72	@ tmp146, tmp140,
 6184 10ea 00FB0320 		mla	r0, r0, r3, r2	@, tmp148, _5, tmp146
 6185 10ee AE60     		str	r6, [r5, #8]	@ _8, uxTopReadyPriority
5006:../freertos/tasks.c **** 				}
 6186              		.loc 1 5006 6 is_stmt 1 view .LVU1718
 6187              	.L458:
 6188              	@ ../freertos/tasks.c:5012: 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem )
5012:../freertos/tasks.c **** 				}
 6189              		.loc 1 5012 6 is_stmt 0 view .LVU1719
 6190 10f0 FFF7FEFF 		bl	vListInsertEnd		@
 6191              	.LVL385:
5015:../freertos/tasks.c **** 				{
 6192              		.loc 1 5015 5 is_stmt 1 view .LVU1720
 6193              	@ ../freertos/tasks.c:5015: 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
5015:../freertos/tasks.c **** 				{
 6194              		.loc 1 5015 41 is_stmt 0 view .LVU1721
 6195 10f4 6B68     		ldr	r3, [r5, #4]	@ pxCurrentTCB.134_12, pxCurrentTCB
 6196              	@ ../freertos/tasks.c:5015: 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
5015:../freertos/tasks.c **** 				{
 6197              		.loc 1 5015 7 view .LVU1722
 6198 10f6 E26A     		ldr	r2, [r4, #44]	@ MEM[(struct TCB_t *)xTaskToNotify_17(D)].uxPriority, MEM[(struct TCB_t *)xTask
 6199 10f8 DB6A     		ldr	r3, [r3, #44]	@ pxCurrentTCB.134_12->uxPriority, pxCurrentTCB.134_12->uxPriority
 6200 10fa 9A42     		cmp	r2, r3	@ MEM[(struct TCB_t *)xTaskToNotify_17(D)].uxPriority, pxCurrentTCB.134_12->uxPriority
 6201 10fc 04D9     		bls	.L450		@,
5019:../freertos/tasks.c **** 					{
 6202              		.loc 1 5019 6 is_stmt 1 view .LVU1723
 6203 10fe 0123     		movs	r3, #1	@ tmp160,
 6204              	@ ../freertos/tasks.c:5019: 					if( pxHigherPriorityTaskWoken != NULL )
5019:../freertos/tasks.c **** 					{
 6205              		.loc 1 5019 8 is_stmt 0 view .LVU1724
 6206 1100 07B1     		cbz	r7, .L454	@ pxHigherPriorityTaskWoken,
5021:../freertos/tasks.c **** 					}
 6207              		.loc 1 5021 7 is_stmt 1 view .LVU1725
 6208              	@ ../freertos/tasks.c:5021: 						*pxHigherPriorityTaskWoken = pdTRUE;
5021:../freertos/tasks.c **** 					}
 6209              		.loc 1 5021 34 is_stmt 0 view .LVU1726
 6210 1102 3B60     		str	r3, [r7]	@ tmp160, *pxHigherPriorityTaskWoken_26(D)
 6211              	.L454:
5027:../freertos/tasks.c **** 				}
 6212              		.loc 1 5027 6 is_stmt 1 view .LVU1727
 6213              	@ ../freertos/tasks.c:5027: 					xYieldPending = pdTRUE;
5027:../freertos/tasks.c **** 				}
 6214              		.loc 1 5027 20 is_stmt 0 view .LVU1728
 6215 1104 C5F80031 		str	r3, [r5, #256]	@ tmp160, xYieldPending
 6216              	.L450:
5031:../freertos/tasks.c **** 				}
 6217              		.loc 1 5031 30 is_stmt 1 view .LVU1729
5035:../freertos/tasks.c **** 	}
 6218              		.loc 1 5035 3 view .LVU1730
 6219              	.LVL386:
 6220              	.LBB166:
ARM GAS  /tmp/ccGXytas.s 			page 235


 6221              	.LBI166:
 227:../freertos/portable/GCC/ARM_CM3/portmacro.h **** {
 6222              		.loc 2 227 30 view .LVU1731
 6223              	.LBB167:
 6224              		.loc 2 229 2 view .LVU1732
 6225              		.syntax unified
 6226              	@ 229 "../freertos/portable/GCC/ARM_CM3/portmacro.h" 1
 6227 1108 88F31188 			msr basepri, r8		@ ulOriginalBASEPRI
 6228              	@ 0 "" 2
 6229              	.LVL387:
 6230              		.loc 2 229 2 is_stmt 0 view .LVU1733
 6231              		.thumb
 6232              		.syntax unified
 6233              	.LBE167:
 6234              	.LBE166:
 6235              	@ ../freertos/tasks.c:5036: 	}
5036:../freertos/tasks.c **** 
 6236              		.loc 1 5036 2 view .LVU1734
 6237 110c BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}	@
 6238              	.LVL388:
 6239              	.L451:
5012:../freertos/tasks.c **** 				}
 6240              		.loc 1 5012 6 is_stmt 1 view .LVU1735
 6241 1110 00F11801 		add	r1, r0, #24	@, xTaskToNotify,
 6242              	.LVL389:
5012:../freertos/tasks.c **** 				}
 6243              		.loc 1 5012 6 is_stmt 0 view .LVU1736
 6244 1114 05F1D400 		add	r0, r5, #212	@, tmp140,
 6245              	.LVL390:
5012:../freertos/tasks.c **** 				}
 6246              		.loc 1 5012 6 view .LVU1737
 6247 1118 EAE7     		b	.L458		@
 6248              	.L460:
 6249 111a 00BF     		.align	2
 6250              	.L459:
 6251 111c 00000000 		.word	.LANCHOR0
 6252              		.cfi_endproc
 6253              	.LFE60:
 6254              		.size	vTaskNotifyGiveFromISR, .-vTaskNotifyGiveFromISR
 6255              		.align	1
 6256              		.global	xTaskNotifyStateClear
 6257              		.syntax unified
 6258              		.thumb
 6259              		.thumb_func
 6260              		.type	xTaskNotifyStateClear, %function
 6261              	xTaskNotifyStateClear:
 6262              	.LVL391:
 6263              	.LFB61:
5045:../freertos/tasks.c **** 	TCB_t *pxTCB;
 6264              		.loc 1 5045 2 is_stmt 1 view -0
 6265              		.cfi_startproc
 6266              		@ args = 0, pretend = 0, frame = 0
 6267              		@ frame_needed = 0, uses_anonymous_args = 0
5046:../freertos/tasks.c **** 	BaseType_t xReturn;
 6268              		.loc 1 5046 2 view .LVU1739
5047:../freertos/tasks.c **** 
 6269              		.loc 1 5047 2 view .LVU1740
ARM GAS  /tmp/ccGXytas.s 			page 236


5051:../freertos/tasks.c **** 
 6270              		.loc 1 5051 3 view .LVU1741
 6271              	@ ../freertos/tasks.c:5045: 	{
5045:../freertos/tasks.c **** 	TCB_t *pxTCB;
 6272              		.loc 1 5045 2 is_stmt 0 view .LVU1742
 6273 1120 10B5     		push	{r4, lr}	@
 6274              	.LCFI53:
 6275              		.cfi_def_cfa_offset 8
 6276              		.cfi_offset 4, -8
 6277              		.cfi_offset 14, -4
 6278              	@ ../freertos/tasks.c:5051: 		pxTCB = prvGetTCBFromHandle( xTask );
5051:../freertos/tasks.c **** 
 6279              		.loc 1 5051 11 view .LVU1743
 6280 1122 0446     		mov	r4, r0	@ xTask, tmp125
 6281 1124 08B9     		cbnz	r0, .L462	@ xTask,
 6282              	@ ../freertos/tasks.c:5051: 		pxTCB = prvGetTCBFromHandle( xTask );
5051:../freertos/tasks.c **** 
 6283              		.loc 1 5051 11 discriminator 1 view .LVU1744
 6284 1126 084B     		ldr	r3, .L465	@ tmp117,
 6285 1128 5C68     		ldr	r4, [r3, #4]	@ xTask, pxCurrentTCB
 6286              	.LVL392:
 6287              	.L462:
5053:../freertos/tasks.c **** 		{
 6288              		.loc 1 5053 3 is_stmt 1 view .LVU1745
 6289 112a FFF7FEFF 		bl	vPortEnterCritical		@
 6290              	.LVL393:
5055:../freertos/tasks.c **** 			{
 6291              		.loc 1 5055 4 view .LVU1746
 6292 112e 0020     		movs	r0, #0	@ <retval>,
5057:../freertos/tasks.c **** 				xReturn = pdPASS;
 6293              		.loc 1 5057 5 view .LVU1747
 6294              	@ ../freertos/tasks.c:5055: 			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
5055:../freertos/tasks.c **** 			{
 6295              		.loc 1 5055 13 is_stmt 0 view .LVU1748
 6296 1130 94F85830 		ldrb	r3, [r4, #88]	@ zero_extendqisi2	@ iftmp.135_3->ucNotifyState, iftmp.135_3->ucNotifyState
 6297              	@ ../freertos/tasks.c:5055: 			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
5055:../freertos/tasks.c **** 			{
 6298              		.loc 1 5055 6 view .LVU1749
 6299 1134 022B     		cmp	r3, #2	@ iftmp.135_3->ucNotifyState,
 6300              	@ ../freertos/tasks.c:5057: 				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
5057:../freertos/tasks.c **** 				xReturn = pdPASS;
 6301              		.loc 1 5057 26 view .LVU1750
 6302 1136 0ABF     		itet	eq
 6303 1138 84F85800 		strbeq	r0, [r4, #88]	@ <retval>, iftmp.135_3->ucNotifyState
5058:../freertos/tasks.c **** 			}
 6304              		.loc 1 5058 5 is_stmt 1 view .LVU1751
 6305              	.LVL394:
 6306              	@ ../freertos/tasks.c:5062: 				xReturn = pdFAIL;
5062:../freertos/tasks.c **** 			}
 6307              		.loc 1 5062 13 is_stmt 0 view .LVU1752
 6308 113c 0446     		movne	r4, r0	@ <retval>, <retval>
 6309              	.LVL395:
 6310              	@ ../freertos/tasks.c:5058: 				xReturn = pdPASS;
5058:../freertos/tasks.c **** 			}
 6311              		.loc 1 5058 13 view .LVU1753
 6312 113e 0124     		moveq	r4, #1	@ <retval>,
 6313              	.LVL396:
ARM GAS  /tmp/ccGXytas.s 			page 237


5065:../freertos/tasks.c **** 
 6314              		.loc 1 5065 3 is_stmt 1 view .LVU1754
 6315 1140 FFF7FEFF 		bl	vPortExitCritical		@
 6316              	.LVL397:
5067:../freertos/tasks.c **** 	}
 6317              		.loc 1 5067 3 view .LVU1755
 6318              	@ ../freertos/tasks.c:5068: 	}
5068:../freertos/tasks.c **** 
 6319              		.loc 1 5068 2 is_stmt 0 view .LVU1756
 6320 1144 2046     		mov	r0, r4	@, <retval>
 6321 1146 10BD     		pop	{r4, pc}	@
 6322              	.LVL398:
 6323              	.L466:
5068:../freertos/tasks.c **** 
 6324              		.loc 1 5068 2 view .LVU1757
 6325              		.align	2
 6326              	.L465:
 6327 1148 00000000 		.word	.LANCHOR0
 6328              		.cfi_endproc
 6329              	.LFE61:
 6330              		.size	xTaskNotifyStateClear, .-xTaskNotifyStateClear
 6331              		.global	pxCurrentTCB
 6332              		.bss
 6333              		.align	2
 6334              		.set	.LANCHOR0,. + 0
 6335              		.type	xTickCount, %object
 6336              		.size	xTickCount, 4
 6337              	xTickCount:
 6338 0000 00000000 		.space	4
 6339              		.type	pxCurrentTCB, %object
 6340              		.size	pxCurrentTCB, 4
 6341              	pxCurrentTCB:
 6342 0004 00000000 		.space	4
 6343              		.type	uxTopReadyPriority, %object
 6344              		.size	uxTopReadyPriority, 4
 6345              	uxTopReadyPriority:
 6346 0008 00000000 		.space	4
 6347              		.type	xSuspendedTaskList, %object
 6348              		.size	xSuspendedTaskList, 20
 6349              	xSuspendedTaskList:
 6350 000c 00000000 		.space	20
 6350      00000000 
 6350      00000000 
 6350      00000000 
 6350      00000000 
 6351              		.type	pxOverflowDelayedTaskList, %object
 6352              		.size	pxOverflowDelayedTaskList, 4
 6353              	pxOverflowDelayedTaskList:
 6354 0020 00000000 		.space	4
 6355              		.type	pxDelayedTaskList, %object
 6356              		.size	pxDelayedTaskList, 4
 6357              	pxDelayedTaskList:
 6358 0024 00000000 		.space	4
 6359              		.type	xNextTaskUnblockTime, %object
 6360              		.size	xNextTaskUnblockTime, 4
 6361              	xNextTaskUnblockTime:
 6362 0028 00000000 		.space	4
ARM GAS  /tmp/ccGXytas.s 			page 238


 6363              		.type	xTasksWaitingTermination, %object
 6364              		.size	xTasksWaitingTermination, 20
 6365              	xTasksWaitingTermination:
 6366 002c 00000000 		.space	20
 6366      00000000 
 6366      00000000 
 6366      00000000 
 6366      00000000 
 6367              		.type	uxCurrentNumberOfTasks, %object
 6368              		.size	uxCurrentNumberOfTasks, 4
 6369              	uxCurrentNumberOfTasks:
 6370 0040 00000000 		.space	4
 6371              		.type	uxDeletedTasksWaitingCleanUp, %object
 6372              		.size	uxDeletedTasksWaitingCleanUp, 4
 6373              	uxDeletedTasksWaitingCleanUp:
 6374 0044 00000000 		.space	4
 6375              		.type	pxReadyTasksLists, %object
 6376              		.size	pxReadyTasksLists, 100
 6377              	pxReadyTasksLists:
 6378 0048 00000000 		.space	100
 6378      00000000 
 6378      00000000 
 6378      00000000 
 6378      00000000 
 6379              		.type	xDelayedTaskList1, %object
 6380              		.size	xDelayedTaskList1, 20
 6381              	xDelayedTaskList1:
 6382 00ac 00000000 		.space	20
 6382      00000000 
 6382      00000000 
 6382      00000000 
 6382      00000000 
 6383              		.type	xDelayedTaskList2, %object
 6384              		.size	xDelayedTaskList2, 20
 6385              	xDelayedTaskList2:
 6386 00c0 00000000 		.space	20
 6386      00000000 
 6386      00000000 
 6386      00000000 
 6386      00000000 
 6387              		.type	xPendingReadyList, %object
 6388              		.size	xPendingReadyList, 20
 6389              	xPendingReadyList:
 6390 00d4 00000000 		.space	20
 6390      00000000 
 6390      00000000 
 6390      00000000 
 6390      00000000 
 6391              		.type	xSchedulerRunning, %object
 6392              		.size	xSchedulerRunning, 4
 6393              	xSchedulerRunning:
 6394 00e8 00000000 		.space	4
 6395              		.type	uxTaskNumber, %object
 6396              		.size	uxTaskNumber, 4
 6397              	uxTaskNumber:
 6398 00ec 00000000 		.space	4
 6399              		.type	uxSchedulerSuspended, %object
ARM GAS  /tmp/ccGXytas.s 			page 239


 6400              		.size	uxSchedulerSuspended, 4
 6401              	uxSchedulerSuspended:
 6402 00f0 00000000 		.space	4
 6403              		.type	xIdleTaskHandle, %object
 6404              		.size	xIdleTaskHandle, 4
 6405              	xIdleTaskHandle:
 6406 00f4 00000000 		.space	4
 6407              		.type	xNumOfOverflows, %object
 6408              		.size	xNumOfOverflows, 4
 6409              	xNumOfOverflows:
 6410 00f8 00000000 		.space	4
 6411              		.type	uxPendedTicks, %object
 6412              		.size	uxPendedTicks, 4
 6413              	uxPendedTicks:
 6414 00fc 00000000 		.space	4
 6415              		.type	xYieldPending, %object
 6416              		.size	xYieldPending, 4
 6417              	xYieldPending:
 6418 0100 00000000 		.space	4
 6419              		.text
 6420              	.Letext0:
 6421              		.file 3 "/usr/lib/gcc/arm-none-eabi/13.2.0/include/stddef.h"
 6422              		.file 4 "/usr/arm-none-eabi/include/machine/_default_types.h"
 6423              		.file 5 "/usr/arm-none-eabi/include/sys/_stdint.h"
 6424              		.file 6 "../freertos/include/projdefs.h"
 6425              		.file 7 "../freertos/include/list.h"
 6426              		.file 8 "../freertos/include/task.h"
 6427              		.file 9 "../freertos/include/portable.h"
 6428              		.file 10 "../freertos/include/timers.h"
 6429              		.file 11 "/usr/arm-none-eabi/include/string.h"
 6430              		.section	.debug_info,"",%progbits
 6431              	.Ldebug_info0:
 6432 0000 4E2B0000 		.4byte	0x2b4e
 6433 0004 0200     		.2byte	0x2
 6434 0006 00000000 		.4byte	.Ldebug_abbrev0
 6435 000a 04       		.byte	0x4
 6436 000b 01       		.uleb128 0x1
 6437 000c 66040000 		.4byte	.LASF151
 6438 0010 0C       		.byte	0xc
 6439 0011 E8010000 		.4byte	.LASF152
 6440 0015 7D050000 		.4byte	.LASF153
 6441 0019 00000000 		.4byte	.Ltext0
 6442 001d 4C110000 		.4byte	.Letext0
 6443 0021 00000000 		.4byte	.Ldebug_line0
 6444 0025 02       		.uleb128 0x2
 6445 0026 08       		.byte	0x8
 6446 0027 07       		.byte	0x7
 6447 0028 0B040000 		.4byte	.LASF0
 6448 002c 02       		.uleb128 0x2
 6449 002d 04       		.byte	0x4
 6450 002e 07       		.byte	0x7
 6451 002f 55010000 		.4byte	.LASF1
 6452 0033 02       		.uleb128 0x2
 6453 0034 01       		.byte	0x1
 6454 0035 08       		.byte	0x8
 6455 0036 1C0E0000 		.4byte	.LASF2
 6456 003a 02       		.uleb128 0x2
ARM GAS  /tmp/ccGXytas.s 			page 240


 6457 003b 02       		.byte	0x2
 6458 003c 07       		.byte	0x7
 6459 003d EF0F0000 		.4byte	.LASF3
 6460 0041 03       		.uleb128 0x3
 6461 0042 EE050000 		.4byte	.LASF7
 6462 0046 03       		.byte	0x3
 6463 0047 D6       		.byte	0xd6
 6464 0048 17       		.byte	0x17
 6465 0049 2C000000 		.4byte	0x2c
 6466 004d 04       		.uleb128 0x4
 6467 004e 04       		.byte	0x4
 6468 004f 05       		.byte	0x5
 6469 0050 696E7400 		.ascii	"int\000"
 6470 0054 02       		.uleb128 0x2
 6471 0055 08       		.byte	0x8
 6472 0056 05       		.byte	0x5
 6473 0057 D0080000 		.4byte	.LASF4
 6474 005b 02       		.uleb128 0x2
 6475 005c 08       		.byte	0x8
 6476 005d 04       		.byte	0x4
 6477 005e AC0A0000 		.4byte	.LASF5
 6478 0062 02       		.uleb128 0x2
 6479 0063 01       		.byte	0x1
 6480 0064 06       		.byte	0x6
 6481 0065 E30F0000 		.4byte	.LASF6
 6482 0069 03       		.uleb128 0x3
 6483 006a D80C0000 		.4byte	.LASF8
 6484 006e 04       		.byte	0x4
 6485 006f 2B       		.byte	0x2b
 6486 0070 18       		.byte	0x18
 6487 0071 33000000 		.4byte	0x33
 6488 0075 02       		.uleb128 0x2
 6489 0076 02       		.byte	0x2
 6490 0077 05       		.byte	0x5
 6491 0078 670B0000 		.4byte	.LASF9
 6492 007c 03       		.uleb128 0x3
 6493 007d 20050000 		.4byte	.LASF10
 6494 0081 04       		.byte	0x4
 6495 0082 39       		.byte	0x39
 6496 0083 19       		.byte	0x19
 6497 0084 3A000000 		.4byte	0x3a
 6498 0088 02       		.uleb128 0x2
 6499 0089 04       		.byte	0x4
 6500 008a 05       		.byte	0x5
 6501 008b C00B0000 		.4byte	.LASF11
 6502 008f 03       		.uleb128 0x3
 6503 0090 490E0000 		.4byte	.LASF12
 6504 0094 04       		.byte	0x4
 6505 0095 4F       		.byte	0x4f
 6506 0096 19       		.byte	0x19
 6507 0097 9B000000 		.4byte	0x9b
 6508 009b 02       		.uleb128 0x2
 6509 009c 04       		.byte	0x4
 6510 009d 07       		.byte	0x7
 6511 009e 4A0D0000 		.4byte	.LASF13
 6512 00a2 05       		.uleb128 0x5
 6513 00a3 04       		.byte	0x4
ARM GAS  /tmp/ccGXytas.s 			page 241


 6514 00a4 06       		.uleb128 0x6
 6515 00a5 A2000000 		.4byte	0xa2
 6516 00a9 07       		.uleb128 0x7
 6517 00aa 04       		.byte	0x4
 6518 00ab AF000000 		.4byte	0xaf
 6519 00af 02       		.uleb128 0x2
 6520 00b0 01       		.byte	0x1
 6521 00b1 08       		.byte	0x8
 6522 00b2 6F070000 		.4byte	.LASF14
 6523 00b6 06       		.uleb128 0x6
 6524 00b7 AF000000 		.4byte	0xaf
 6525 00bb 07       		.uleb128 0x7
 6526 00bc 04       		.byte	0x4
 6527 00bd B6000000 		.4byte	0xb6
 6528 00c1 06       		.uleb128 0x6
 6529 00c2 BB000000 		.4byte	0xbb
 6530 00c6 03       		.uleb128 0x3
 6531 00c7 4A080000 		.4byte	.LASF15
 6532 00cb 05       		.byte	0x5
 6533 00cc 18       		.byte	0x18
 6534 00cd 13       		.byte	0x13
 6535 00ce 69000000 		.4byte	0x69
 6536 00d2 08       		.uleb128 0x8
 6537 00d3 C6000000 		.4byte	0xc6
 6538 00d7 06       		.uleb128 0x6
 6539 00d8 C6000000 		.4byte	0xc6
 6540 00dc 03       		.uleb128 0x3
 6541 00dd C70A0000 		.4byte	.LASF16
 6542 00e1 05       		.byte	0x5
 6543 00e2 24       		.byte	0x24
 6544 00e3 14       		.byte	0x14
 6545 00e4 7C000000 		.4byte	0x7c
 6546 00e8 06       		.uleb128 0x6
 6547 00e9 DC000000 		.4byte	0xdc
 6548 00ed 03       		.uleb128 0x3
 6549 00ee 4F030000 		.4byte	.LASF17
 6550 00f2 05       		.byte	0x5
 6551 00f3 30       		.byte	0x30
 6552 00f4 14       		.byte	0x14
 6553 00f5 8F000000 		.4byte	0x8f
 6554 00f9 08       		.uleb128 0x8
 6555 00fa ED000000 		.4byte	0xed
 6556 00fe 06       		.uleb128 0x6
 6557 00ff ED000000 		.4byte	0xed
 6558 0103 03       		.uleb128 0x3
 6559 0104 76090000 		.4byte	.LASF18
 6560 0108 06       		.byte	0x6
 6561 0109 23       		.byte	0x23
 6562 010a 10       		.byte	0x10
 6563 010b 0F010000 		.4byte	0x10f
 6564 010f 07       		.uleb128 0x7
 6565 0110 04       		.byte	0x4
 6566 0111 15010000 		.4byte	0x115
 6567 0115 09       		.uleb128 0x9
 6568 0116 01       		.byte	0x1
 6569 0117 21010000 		.4byte	0x121
 6570 011b 0A       		.uleb128 0xa
ARM GAS  /tmp/ccGXytas.s 			page 242


 6571 011c A2000000 		.4byte	0xa2
 6572 0120 00       		.byte	0
 6573 0121 03       		.uleb128 0x3
 6574 0122 88010000 		.4byte	.LASF19
 6575 0126 02       		.byte	0x2
 6576 0127 37       		.byte	0x37
 6577 0128 18       		.byte	0x18
 6578 0129 ED000000 		.4byte	0xed
 6579 012d 08       		.uleb128 0x8
 6580 012e 21010000 		.4byte	0x121
 6581 0132 03       		.uleb128 0x3
 6582 0133 31090000 		.4byte	.LASF20
 6583 0137 02       		.byte	0x2
 6584 0138 38       		.byte	0x38
 6585 0139 0E       		.byte	0xe
 6586 013a 88000000 		.4byte	0x88
 6587 013e 08       		.uleb128 0x8
 6588 013f 32010000 		.4byte	0x132
 6589 0143 06       		.uleb128 0x6
 6590 0144 32010000 		.4byte	0x132
 6591 0148 03       		.uleb128 0x3
 6592 0149 B6070000 		.4byte	.LASF21
 6593 014d 02       		.byte	0x2
 6594 014e 39       		.byte	0x39
 6595 014f 17       		.byte	0x17
 6596 0150 9B000000 		.4byte	0x9b
 6597 0154 08       		.uleb128 0x8
 6598 0155 48010000 		.4byte	0x148
 6599 0159 06       		.uleb128 0x6
 6600 015a 48010000 		.4byte	0x148
 6601 015e 03       		.uleb128 0x3
 6602 015f 840A0000 		.4byte	.LASF22
 6603 0163 02       		.byte	0x2
 6604 0164 3F       		.byte	0x3f
 6605 0165 13       		.byte	0x13
 6606 0166 ED000000 		.4byte	0xed
 6607 016a 08       		.uleb128 0x8
 6608 016b 5E010000 		.4byte	0x15e
 6609 016f 06       		.uleb128 0x6
 6610 0170 5E010000 		.4byte	0x15e
 6611 0174 0B       		.uleb128 0xb
 6612 0175 BB010000 		.4byte	.LASF28
 6613 0179 14       		.byte	0x14
 6614 017a 07       		.byte	0x7
 6615 017b 8C       		.byte	0x8c
 6616 017c 08       		.byte	0x8
 6617 017d CD010000 		.4byte	0x1cd
 6618 0181 0C       		.uleb128 0xc
 6619 0182 B50B0000 		.4byte	.LASF23
 6620 0186 07       		.byte	0x7
 6621 0187 8F       		.byte	0x8f
 6622 0188 21       		.byte	0x21
 6623 0189 5E010000 		.4byte	0x15e
 6624 018d 02       		.byte	0x2
 6625 018e 23       		.byte	0x23
 6626 018f 00       		.uleb128 0
 6627 0190 0C       		.uleb128 0xc
ARM GAS  /tmp/ccGXytas.s 			page 243


 6628 0191 85090000 		.4byte	.LASF24
 6629 0195 07       		.byte	0x7
 6630 0196 90       		.byte	0x90
 6631 0197 2A       		.byte	0x2a
 6632 0198 CD010000 		.4byte	0x1cd
 6633 019c 02       		.byte	0x2
 6634 019d 23       		.byte	0x23
 6635 019e 04       		.uleb128 0x4
 6636 019f 0C       		.uleb128 0xc
 6637 01a0 FC040000 		.4byte	.LASF25
 6638 01a4 07       		.byte	0x7
 6639 01a5 91       		.byte	0x91
 6640 01a6 2A       		.byte	0x2a
 6641 01a7 CD010000 		.4byte	0x1cd
 6642 01ab 02       		.byte	0x2
 6643 01ac 23       		.byte	0x23
 6644 01ad 08       		.uleb128 0x8
 6645 01ae 0C       		.uleb128 0xc
 6646 01af E00E0000 		.4byte	.LASF26
 6647 01b3 07       		.byte	0x7
 6648 01b4 92       		.byte	0x92
 6649 01b5 09       		.byte	0x9
 6650 01b6 A2000000 		.4byte	0xa2
 6651 01ba 02       		.byte	0x2
 6652 01bb 23       		.byte	0x23
 6653 01bc 0C       		.uleb128 0xc
 6654 01bd 0C       		.uleb128 0xc
 6655 01be 0F0B0000 		.4byte	.LASF27
 6656 01c2 07       		.byte	0x7
 6657 01c3 93       		.byte	0x93
 6658 01c4 25       		.byte	0x25
 6659 01c5 0E020000 		.4byte	0x20e
 6660 01c9 02       		.byte	0x2
 6661 01ca 23       		.byte	0x23
 6662 01cb 10       		.uleb128 0x10
 6663 01cc 00       		.byte	0
 6664 01cd 07       		.uleb128 0x7
 6665 01ce 04       		.byte	0x4
 6666 01cf 74010000 		.4byte	0x174
 6667 01d3 0B       		.uleb128 0xb
 6668 01d4 42060000 		.4byte	.LASF29
 6669 01d8 14       		.byte	0x14
 6670 01d9 07       		.byte	0x7
 6671 01da A4       		.byte	0xa4
 6672 01db 10       		.byte	0x10
 6673 01dc 0E020000 		.4byte	0x20e
 6674 01e0 0C       		.uleb128 0xc
 6675 01e1 17000000 		.4byte	.LASF30
 6676 01e5 07       		.byte	0x7
 6677 01e6 A7       		.byte	0xa7
 6678 01e7 17       		.byte	0x17
 6679 01e8 54010000 		.4byte	0x154
 6680 01ec 02       		.byte	0x2
 6681 01ed 23       		.byte	0x23
 6682 01ee 00       		.uleb128 0
 6683 01ef 0C       		.uleb128 0xc
 6684 01f0 80010000 		.4byte	.LASF31
ARM GAS  /tmp/ccGXytas.s 			page 244


 6685 01f4 07       		.byte	0x7
 6686 01f5 A8       		.byte	0xa8
 6687 01f6 23       		.byte	0x23
 6688 01f7 67020000 		.4byte	0x267
 6689 01fb 02       		.byte	0x2
 6690 01fc 23       		.byte	0x23
 6691 01fd 04       		.uleb128 0x4
 6692 01fe 0C       		.uleb128 0xc
 6693 01ff E8070000 		.4byte	.LASF32
 6694 0203 07       		.byte	0x7
 6695 0204 A9       		.byte	0xa9
 6696 0205 11       		.byte	0x11
 6697 0206 5B020000 		.4byte	0x25b
 6698 020a 02       		.byte	0x2
 6699 020b 23       		.byte	0x23
 6700 020c 08       		.uleb128 0x8
 6701 020d 00       		.byte	0
 6702 020e 07       		.uleb128 0x7
 6703 020f 04       		.byte	0x4
 6704 0210 D3010000 		.4byte	0x1d3
 6705 0214 03       		.uleb128 0x3
 6706 0215 74070000 		.4byte	.LASF33
 6707 0219 07       		.byte	0x7
 6708 021a 96       		.byte	0x96
 6709 021b 1B       		.byte	0x1b
 6710 021c 74010000 		.4byte	0x174
 6711 0220 0B       		.uleb128 0xb
 6712 0221 15060000 		.4byte	.LASF34
 6713 0225 0C       		.byte	0xc
 6714 0226 07       		.byte	0x7
 6715 0227 98       		.byte	0x98
 6716 0228 08       		.byte	0x8
 6717 0229 5B020000 		.4byte	0x25b
 6718 022d 0C       		.uleb128 0xc
 6719 022e B50B0000 		.4byte	.LASF23
 6720 0232 07       		.byte	0x7
 6721 0233 9B       		.byte	0x9b
 6722 0234 21       		.byte	0x21
 6723 0235 5E010000 		.4byte	0x15e
 6724 0239 02       		.byte	0x2
 6725 023a 23       		.byte	0x23
 6726 023b 00       		.uleb128 0
 6727 023c 0C       		.uleb128 0xc
 6728 023d 85090000 		.4byte	.LASF24
 6729 0241 07       		.byte	0x7
 6730 0242 9C       		.byte	0x9c
 6731 0243 2A       		.byte	0x2a
 6732 0244 CD010000 		.4byte	0x1cd
 6733 0248 02       		.byte	0x2
 6734 0249 23       		.byte	0x23
 6735 024a 04       		.uleb128 0x4
 6736 024b 0C       		.uleb128 0xc
 6737 024c FC040000 		.4byte	.LASF25
 6738 0250 07       		.byte	0x7
 6739 0251 9D       		.byte	0x9d
 6740 0252 2A       		.byte	0x2a
 6741 0253 CD010000 		.4byte	0x1cd
ARM GAS  /tmp/ccGXytas.s 			page 245


 6742 0257 02       		.byte	0x2
 6743 0258 23       		.byte	0x23
 6744 0259 08       		.uleb128 0x8
 6745 025a 00       		.byte	0
 6746 025b 03       		.uleb128 0x3
 6747 025c 02080000 		.4byte	.LASF35
 6748 0260 07       		.byte	0x7
 6749 0261 9F       		.byte	0x9f
 6750 0262 20       		.byte	0x20
 6751 0263 20020000 		.4byte	0x220
 6752 0267 07       		.uleb128 0x7
 6753 0268 04       		.byte	0x4
 6754 0269 14020000 		.4byte	0x214
 6755 026d 06       		.uleb128 0x6
 6756 026e 67020000 		.4byte	0x267
 6757 0272 03       		.uleb128 0x3
 6758 0273 700A0000 		.4byte	.LASF36
 6759 0277 07       		.byte	0x7
 6760 0278 AB       		.byte	0xab
 6761 0279 03       		.byte	0x3
 6762 027a D3010000 		.4byte	0x1d3
 6763 027e 06       		.uleb128 0x6
 6764 027f 72020000 		.4byte	0x272
 6765 0283 03       		.uleb128 0x3
 6766 0284 0F0A0000 		.4byte	.LASF37
 6767 0288 08       		.byte	0x8
 6768 0289 46       		.byte	0x46
 6769 028a 25       		.byte	0x25
 6770 028b 94020000 		.4byte	0x294
 6771 028f 06       		.uleb128 0x6
 6772 0290 83020000 		.4byte	0x283
 6773 0294 07       		.uleb128 0x7
 6774 0295 04       		.byte	0x4
 6775 0296 9A020000 		.4byte	0x29a
 6776 029a 0B       		.uleb128 0xb
 6777 029b A7000000 		.4byte	.LASF38
 6778 029f 5C       		.byte	0x5c
 6779 02a0 01       		.byte	0x1
 6780 02a1 FC       		.byte	0xfc
 6781 02a2 10       		.byte	0x10
 6782 02a3 67030000 		.4byte	0x367
 6783 02a7 0C       		.uleb128 0xc
 6784 02a8 38100000 		.4byte	.LASF39
 6785 02ac 01       		.byte	0x1
 6786 02ad FE       		.byte	0xfe
 6787 02ae 18       		.byte	0x18
 6788 02af 0A050000 		.4byte	0x50a
 6789 02b3 02       		.byte	0x2
 6790 02b4 23       		.byte	0x23
 6791 02b5 00       		.uleb128 0
 6792 02b6 0D       		.uleb128 0xd
 6793 02b7 0E100000 		.4byte	.LASF40
 6794 02bb 01       		.byte	0x1
 6795 02bc 0401     		.2byte	0x104
 6796 02be 0F       		.byte	0xf
 6797 02bf 14020000 		.4byte	0x214
 6798 02c3 02       		.byte	0x2
ARM GAS  /tmp/ccGXytas.s 			page 246


 6799 02c4 23       		.byte	0x23
 6800 02c5 04       		.uleb128 0x4
 6801 02c6 0D       		.uleb128 0xd
 6802 02c7 A80E0000 		.4byte	.LASF41
 6803 02cb 01       		.byte	0x1
 6804 02cc 0501     		.2byte	0x105
 6805 02ce 0F       		.byte	0xf
 6806 02cf 14020000 		.4byte	0x214
 6807 02d3 02       		.byte	0x2
 6808 02d4 23       		.byte	0x23
 6809 02d5 18       		.uleb128 0x18
 6810 02d6 0D       		.uleb128 0xd
 6811 02d7 79000000 		.4byte	.LASF42
 6812 02db 01       		.byte	0x1
 6813 02dc 0601     		.2byte	0x106
 6814 02de 10       		.byte	0x10
 6815 02df 48010000 		.4byte	0x148
 6816 02e3 02       		.byte	0x2
 6817 02e4 23       		.byte	0x23
 6818 02e5 2C       		.uleb128 0x2c
 6819 02e6 0D       		.uleb128 0xd
 6820 02e7 7A0C0000 		.4byte	.LASF43
 6821 02eb 01       		.byte	0x1
 6822 02ec 0701     		.2byte	0x107
 6823 02ee 11       		.byte	0x11
 6824 02ef 63040000 		.4byte	0x463
 6825 02f3 02       		.byte	0x2
 6826 02f4 23       		.byte	0x23
 6827 02f5 30       		.uleb128 0x30
 6828 02f6 0D       		.uleb128 0xd
 6829 02f7 0C000000 		.4byte	.LASF44
 6830 02fb 01       		.byte	0x1
 6831 02fc 0801     		.2byte	0x108
 6832 02fe 0A       		.byte	0xa
 6833 02ff 10050000 		.4byte	0x510
 6834 0303 02       		.byte	0x2
 6835 0304 23       		.byte	0x23
 6836 0305 34       		.uleb128 0x34
 6837 0306 0D       		.uleb128 0xd
 6838 0307 E3020000 		.4byte	.LASF45
 6839 030b 01       		.byte	0x1
 6840 030c 1301     		.2byte	0x113
 6841 030e 10       		.byte	0x10
 6842 030f 48010000 		.4byte	0x148
 6843 0313 02       		.byte	0x2
 6844 0314 23       		.byte	0x23
 6845 0315 44       		.uleb128 0x44
 6846 0316 0D       		.uleb128 0xd
 6847 0317 020A0000 		.4byte	.LASF46
 6848 031b 01       		.byte	0x1
 6849 031c 1401     		.2byte	0x114
 6850 031e 10       		.byte	0x10
 6851 031f 48010000 		.4byte	0x148
 6852 0323 02       		.byte	0x2
 6853 0324 23       		.byte	0x23
 6854 0325 48       		.uleb128 0x48
 6855 0326 0D       		.uleb128 0xd
ARM GAS  /tmp/ccGXytas.s 			page 247


 6856 0327 890E0000 		.4byte	.LASF47
 6857 032b 01       		.byte	0x1
 6858 032c 1801     		.2byte	0x118
 6859 032e 10       		.byte	0x10
 6860 032f 48010000 		.4byte	0x148
 6861 0333 02       		.byte	0x2
 6862 0334 23       		.byte	0x23
 6863 0335 4C       		.uleb128 0x4c
 6864 0336 0D       		.uleb128 0xd
 6865 0337 30070000 		.4byte	.LASF48
 6866 033b 01       		.byte	0x1
 6867 033c 1901     		.2byte	0x119
 6868 033e 10       		.byte	0x10
 6869 033f 48010000 		.4byte	0x148
 6870 0343 02       		.byte	0x2
 6871 0344 23       		.byte	0x23
 6872 0345 50       		.uleb128 0x50
 6873 0346 0D       		.uleb128 0xd
 6874 0347 FE060000 		.4byte	.LASF49
 6875 034b 01       		.byte	0x1
 6876 034c 3401     		.2byte	0x134
 6877 034e 15       		.byte	0x15
 6878 034f F9000000 		.4byte	0xf9
 6879 0353 02       		.byte	0x2
 6880 0354 23       		.byte	0x23
 6881 0355 54       		.uleb128 0x54
 6882 0356 0D       		.uleb128 0xd
 6883 0357 58030000 		.4byte	.LASF50
 6884 035b 01       		.byte	0x1
 6885 035c 3501     		.2byte	0x135
 6886 035e 14       		.byte	0x14
 6887 035f D2000000 		.4byte	0xd2
 6888 0363 02       		.byte	0x2
 6889 0364 23       		.byte	0x23
 6890 0365 58       		.uleb128 0x58
 6891 0366 00       		.byte	0
 6892 0367 0E       		.uleb128 0xe
 6893 0368 07       		.byte	0x7
 6894 0369 01       		.byte	0x1
 6895 036a 33000000 		.4byte	0x33
 6896 036e 08       		.byte	0x8
 6897 036f 50       		.byte	0x50
 6898 0370 01       		.byte	0x1
 6899 0371 9A030000 		.4byte	0x39a
 6900 0375 0F       		.uleb128 0xf
 6901 0376 E60D0000 		.4byte	.LASF51
 6902 037a 00       		.byte	0
 6903 037b 0F       		.uleb128 0xf
 6904 037c 52080000 		.4byte	.LASF52
 6905 0380 01       		.byte	0x1
 6906 0381 0F       		.uleb128 0xf
 6907 0382 F50E0000 		.4byte	.LASF53
 6908 0386 02       		.byte	0x2
 6909 0387 0F       		.uleb128 0xf
 6910 0388 9C000000 		.4byte	.LASF54
 6911 038c 03       		.byte	0x3
 6912 038d 0F       		.uleb128 0xf
ARM GAS  /tmp/ccGXytas.s 			page 248


 6913 038e DE080000 		.4byte	.LASF55
 6914 0392 04       		.byte	0x4
 6915 0393 0F       		.uleb128 0xf
 6916 0394 720E0000 		.4byte	.LASF56
 6917 0398 05       		.byte	0x5
 6918 0399 00       		.byte	0
 6919 039a 03       		.uleb128 0x3
 6920 039b 650A0000 		.4byte	.LASF57
 6921 039f 08       		.byte	0x8
 6922 03a0 57       		.byte	0x57
 6923 03a1 03       		.byte	0x3
 6924 03a2 67030000 		.4byte	0x367
 6925 03a6 0E       		.uleb128 0xe
 6926 03a7 07       		.byte	0x7
 6927 03a8 01       		.byte	0x1
 6928 03a9 33000000 		.4byte	0x33
 6929 03ad 08       		.byte	0x8
 6930 03ae 5B       		.byte	0x5b
 6931 03af 01       		.byte	0x1
 6932 03b0 D3030000 		.4byte	0x3d3
 6933 03b4 0F       		.uleb128 0xf
 6934 03b5 2A010000 		.4byte	.LASF58
 6935 03b9 00       		.byte	0
 6936 03ba 0F       		.uleb128 0xf
 6937 03bb A30A0000 		.4byte	.LASF59
 6938 03bf 01       		.byte	0x1
 6939 03c0 0F       		.uleb128 0xf
 6940 03c1 0A060000 		.4byte	.LASF60
 6941 03c5 02       		.byte	0x2
 6942 03c6 0F       		.uleb128 0xf
 6943 03c7 F4030000 		.4byte	.LASF61
 6944 03cb 03       		.byte	0x3
 6945 03cc 0F       		.uleb128 0xf
 6946 03cd 8C070000 		.4byte	.LASF62
 6947 03d1 04       		.byte	0x4
 6948 03d2 00       		.byte	0
 6949 03d3 03       		.uleb128 0x3
 6950 03d4 CD050000 		.4byte	.LASF63
 6951 03d8 08       		.byte	0x8
 6952 03d9 61       		.byte	0x61
 6953 03da 03       		.byte	0x3
 6954 03db A6030000 		.4byte	0x3a6
 6955 03df 0B       		.uleb128 0xb
 6956 03e0 94010000 		.4byte	.LASF64
 6957 03e4 08       		.byte	0x8
 6958 03e5 08       		.byte	0x8
 6959 03e6 66       		.byte	0x66
 6960 03e7 10       		.byte	0x10
 6961 03e8 0B040000 		.4byte	0x40b
 6962 03ec 0C       		.uleb128 0xc
 6963 03ed 8D020000 		.4byte	.LASF65
 6964 03f1 08       		.byte	0x8
 6965 03f2 68       		.byte	0x68
 6966 03f3 0D       		.byte	0xd
 6967 03f4 32010000 		.4byte	0x132
 6968 03f8 02       		.byte	0x2
 6969 03f9 23       		.byte	0x23
ARM GAS  /tmp/ccGXytas.s 			page 249


 6970 03fa 00       		.uleb128 0
 6971 03fb 0C       		.uleb128 0xc
 6972 03fc 58090000 		.4byte	.LASF66
 6973 0400 08       		.byte	0x8
 6974 0401 69       		.byte	0x69
 6975 0402 0D       		.byte	0xd
 6976 0403 5E010000 		.4byte	0x15e
 6977 0407 02       		.byte	0x2
 6978 0408 23       		.byte	0x23
 6979 0409 04       		.uleb128 0x4
 6980 040a 00       		.byte	0
 6981 040b 03       		.uleb128 0x3
 6982 040c DB090000 		.4byte	.LASF67
 6983 0410 08       		.byte	0x8
 6984 0411 6A       		.byte	0x6a
 6985 0412 03       		.byte	0x3
 6986 0413 DF030000 		.4byte	0x3df
 6987 0417 0B       		.uleb128 0xb
 6988 0418 B80A0000 		.4byte	.LASF68
 6989 041c 0C       		.byte	0xc
 6990 041d 08       		.byte	0x8
 6991 041e 6F       		.byte	0x6f
 6992 041f 10       		.byte	0x10
 6993 0420 52040000 		.4byte	0x452
 6994 0424 0C       		.uleb128 0xc
 6995 0425 000E0000 		.4byte	.LASF69
 6996 0429 08       		.byte	0x8
 6997 042a 71       		.byte	0x71
 6998 042b 08       		.byte	0x8
 6999 042c A2000000 		.4byte	0xa2
 7000 0430 02       		.byte	0x2
 7001 0431 23       		.byte	0x23
 7002 0432 00       		.uleb128 0
 7003 0433 0C       		.uleb128 0xc
 7004 0434 21090000 		.4byte	.LASF70
 7005 0438 08       		.byte	0x8
 7006 0439 72       		.byte	0x72
 7007 043a 0B       		.byte	0xb
 7008 043b ED000000 		.4byte	0xed
 7009 043f 02       		.byte	0x2
 7010 0440 23       		.byte	0x23
 7011 0441 04       		.uleb128 0x4
 7012 0442 0C       		.uleb128 0xc
 7013 0443 EF020000 		.4byte	.LASF71
 7014 0447 08       		.byte	0x8
 7015 0448 73       		.byte	0x73
 7016 0449 0B       		.byte	0xb
 7017 044a ED000000 		.4byte	0xed
 7018 044e 02       		.byte	0x2
 7019 044f 23       		.byte	0x23
 7020 0450 08       		.uleb128 0x8
 7021 0451 00       		.byte	0
 7022 0452 03       		.uleb128 0x3
 7023 0453 83080000 		.4byte	.LASF72
 7024 0457 08       		.byte	0x8
 7025 0458 74       		.byte	0x74
 7026 0459 03       		.byte	0x3
ARM GAS  /tmp/ccGXytas.s 			page 250


 7027 045a 17040000 		.4byte	0x417
 7028 045e 06       		.uleb128 0x6
 7029 045f 52040000 		.4byte	0x452
 7030 0463 07       		.uleb128 0x7
 7031 0464 04       		.byte	0x4
 7032 0465 21010000 		.4byte	0x121
 7033 0469 0B       		.uleb128 0xb
 7034 046a C90B0000 		.4byte	.LASF73
 7035 046e 24       		.byte	0x24
 7036 046f 08       		.byte	0x8
 7037 0470 89       		.byte	0x89
 7038 0471 10       		.byte	0x10
 7039 0472 FE040000 		.4byte	0x4fe
 7040 0476 0C       		.uleb128 0xc
 7041 0477 F5050000 		.4byte	.LASF74
 7042 047b 08       		.byte	0x8
 7043 047c 8B       		.byte	0x8b
 7044 047d 0F       		.byte	0xf
 7045 047e 83020000 		.4byte	0x283
 7046 0482 02       		.byte	0x2
 7047 0483 23       		.byte	0x23
 7048 0484 00       		.uleb128 0
 7049 0485 0C       		.uleb128 0xc
 7050 0486 0C000000 		.4byte	.LASF44
 7051 048a 08       		.byte	0x8
 7052 048b 8C       		.byte	0x8c
 7053 048c 0E       		.byte	0xe
 7054 048d BB000000 		.4byte	0xbb
 7055 0491 02       		.byte	0x2
 7056 0492 23       		.byte	0x23
 7057 0493 04       		.uleb128 0x4
 7058 0494 0C       		.uleb128 0xc
 7059 0495 D7020000 		.4byte	.LASF75
 7060 0499 08       		.byte	0x8
 7061 049a 8D       		.byte	0x8d
 7062 049b 0E       		.byte	0xe
 7063 049c 48010000 		.4byte	0x148
 7064 04a0 02       		.byte	0x2
 7065 04a1 23       		.byte	0x23
 7066 04a2 08       		.uleb128 0x8
 7067 04a3 0C       		.uleb128 0xc
 7068 04a4 710B0000 		.4byte	.LASF76
 7069 04a8 08       		.byte	0x8
 7070 04a9 8E       		.byte	0x8e
 7071 04aa 0D       		.byte	0xd
 7072 04ab 9A030000 		.4byte	0x39a
 7073 04af 02       		.byte	0x2
 7074 04b0 23       		.byte	0x23
 7075 04b1 0C       		.uleb128 0xc
 7076 04b2 0C       		.uleb128 0xc
 7077 04b3 EC060000 		.4byte	.LASF77
 7078 04b7 08       		.byte	0x8
 7079 04b8 8F       		.byte	0x8f
 7080 04b9 0E       		.byte	0xe
 7081 04ba 48010000 		.4byte	0x148
 7082 04be 02       		.byte	0x2
 7083 04bf 23       		.byte	0x23
ARM GAS  /tmp/ccGXytas.s 			page 251


 7084 04c0 10       		.uleb128 0x10
 7085 04c1 0C       		.uleb128 0xc
 7086 04c2 890E0000 		.4byte	.LASF47
 7087 04c6 08       		.byte	0x8
 7088 04c7 90       		.byte	0x90
 7089 04c8 0E       		.byte	0xe
 7090 04c9 48010000 		.4byte	0x148
 7091 04cd 02       		.byte	0x2
 7092 04ce 23       		.byte	0x23
 7093 04cf 14       		.uleb128 0x14
 7094 04d0 0C       		.uleb128 0xc
 7095 04d1 EF0D0000 		.4byte	.LASF78
 7096 04d5 08       		.byte	0x8
 7097 04d6 91       		.byte	0x91
 7098 04d7 0B       		.byte	0xb
 7099 04d8 ED000000 		.4byte	0xed
 7100 04dc 02       		.byte	0x2
 7101 04dd 23       		.byte	0x23
 7102 04de 18       		.uleb128 0x18
 7103 04df 0C       		.uleb128 0xc
 7104 04e0 5B0B0000 		.4byte	.LASF79
 7105 04e4 08       		.byte	0x8
 7106 04e5 92       		.byte	0x92
 7107 04e6 0F       		.byte	0xf
 7108 04e7 63040000 		.4byte	0x463
 7109 04eb 02       		.byte	0x2
 7110 04ec 23       		.byte	0x23
 7111 04ed 1C       		.uleb128 0x1c
 7112 04ee 0C       		.uleb128 0xc
 7113 04ef A80F0000 		.4byte	.LASF80
 7114 04f3 08       		.byte	0x8
 7115 04f4 93       		.byte	0x93
 7116 04f5 19       		.byte	0x19
 7117 04f6 DC000000 		.4byte	0xdc
 7118 04fa 02       		.byte	0x2
 7119 04fb 23       		.byte	0x23
 7120 04fc 20       		.uleb128 0x20
 7121 04fd 00       		.byte	0
 7122 04fe 03       		.uleb128 0x3
 7123 04ff FD050000 		.4byte	.LASF81
 7124 0503 08       		.byte	0x8
 7125 0504 94       		.byte	0x94
 7126 0505 03       		.byte	0x3
 7127 0506 69040000 		.4byte	0x469
 7128 050a 07       		.uleb128 0x7
 7129 050b 04       		.byte	0x4
 7130 050c 2D010000 		.4byte	0x12d
 7131 0510 10       		.uleb128 0x10
 7132 0511 AF000000 		.4byte	0xaf
 7133 0515 20050000 		.4byte	0x520
 7134 0519 11       		.uleb128 0x11
 7135 051a 2C000000 		.4byte	0x2c
 7136 051e 0F       		.byte	0xf
 7137 051f 00       		.byte	0
 7138 0520 12       		.uleb128 0x12
 7139 0521 31030000 		.4byte	.LASF82
 7140 0525 01       		.byte	0x1
ARM GAS  /tmp/ccGXytas.s 			page 252


 7141 0526 4601     		.2byte	0x146
 7142 0528 03       		.byte	0x3
 7143 0529 9A020000 		.4byte	0x29a
 7144 052d 12       		.uleb128 0x12
 7145 052e CD0E0000 		.4byte	.LASF83
 7146 0532 01       		.byte	0x1
 7147 0533 4A01     		.2byte	0x14a
 7148 0535 10       		.byte	0x10
 7149 0536 20050000 		.4byte	0x520
 7150 053a 06       		.uleb128 0x6
 7151 053b 2D050000 		.4byte	0x52d
 7152 053f 13       		.uleb128 0x13
 7153 0540 1B0B0000 		.4byte	.LASF119
 7154 0544 01       		.byte	0x1
 7155 0545 4E01     		.2byte	0x14e
 7156 0547 22       		.byte	0x22
 7157 0548 59050000 		.4byte	0x559
 7158 054c 01       		.byte	0x1
 7159 054d 05       		.byte	0x5
 7160 054e 03       		.byte	0x3
 7161 054f 00000000 		.4byte	pxCurrentTCB
 7162 0553 07       		.uleb128 0x7
 7163 0554 04       		.byte	0x4
 7164 0555 2D050000 		.4byte	0x52d
 7165 0559 08       		.uleb128 0x8
 7166 055a 53050000 		.4byte	0x553
 7167 055e 06       		.uleb128 0x6
 7168 055f 53050000 		.4byte	0x553
 7169 0563 10       		.uleb128 0x10
 7170 0564 72020000 		.4byte	0x272
 7171 0568 73050000 		.4byte	0x573
 7172 056c 11       		.uleb128 0x11
 7173 056d 2C000000 		.4byte	0x2c
 7174 0571 04       		.byte	0x4
 7175 0572 00       		.byte	0
 7176 0573 14       		.uleb128 0x14
 7177 0574 C6010000 		.4byte	.LASF84
 7178 0578 01       		.byte	0x1
 7179 0579 5401     		.2byte	0x154
 7180 057b 1F       		.byte	0x1f
 7181 057c 63050000 		.4byte	0x563
 7182 0580 05       		.byte	0x5
 7183 0581 03       		.byte	0x3
 7184 0582 48000000 		.4byte	pxReadyTasksLists
 7185 0586 14       		.uleb128 0x14
 7186 0587 69020000 		.4byte	.LASF85
 7187 058b 01       		.byte	0x1
 7188 058c 5501     		.2byte	0x155
 7189 058e 1F       		.byte	0x1f
 7190 058f 72020000 		.4byte	0x272
 7191 0593 05       		.byte	0x5
 7192 0594 03       		.byte	0x3
 7193 0595 AC000000 		.4byte	xDelayedTaskList1
 7194 0599 14       		.uleb128 0x14
 7195 059a 7B020000 		.4byte	.LASF86
 7196 059e 01       		.byte	0x1
 7197 059f 5601     		.2byte	0x156
ARM GAS  /tmp/ccGXytas.s 			page 253


 7198 05a1 1F       		.byte	0x1f
 7199 05a2 72020000 		.4byte	0x272
 7200 05a6 05       		.byte	0x5
 7201 05a7 03       		.byte	0x3
 7202 05a8 C0000000 		.4byte	xDelayedTaskList2
 7203 05ac 14       		.uleb128 0x14
 7204 05ad FC0B0000 		.4byte	.LASF87
 7205 05b1 01       		.byte	0x1
 7206 05b2 5701     		.2byte	0x157
 7207 05b4 2A       		.byte	0x2a
 7208 05b5 C5050000 		.4byte	0x5c5
 7209 05b9 05       		.byte	0x5
 7210 05ba 03       		.byte	0x3
 7211 05bb 24000000 		.4byte	pxDelayedTaskList
 7212 05bf 07       		.uleb128 0x7
 7213 05c0 04       		.byte	0x4
 7214 05c1 72020000 		.4byte	0x272
 7215 05c5 08       		.uleb128 0x8
 7216 05c6 BF050000 		.4byte	0x5bf
 7217 05ca 06       		.uleb128 0x6
 7218 05cb BF050000 		.4byte	0x5bf
 7219 05cf 14       		.uleb128 0x14
 7220 05d0 93060000 		.4byte	.LASF88
 7221 05d4 01       		.byte	0x1
 7222 05d5 5801     		.2byte	0x158
 7223 05d7 2A       		.byte	0x2a
 7224 05d8 C5050000 		.4byte	0x5c5
 7225 05dc 05       		.byte	0x5
 7226 05dd 03       		.byte	0x3
 7227 05de 20000000 		.4byte	pxOverflowDelayedTaskList
 7228 05e2 14       		.uleb128 0x14
 7229 05e3 D3040000 		.4byte	.LASF89
 7230 05e7 01       		.byte	0x1
 7231 05e8 5901     		.2byte	0x159
 7232 05ea 1F       		.byte	0x1f
 7233 05eb 72020000 		.4byte	0x272
 7234 05ef 05       		.byte	0x5
 7235 05f0 03       		.byte	0x3
 7236 05f1 D4000000 		.4byte	xPendingReadyList
 7237 05f5 14       		.uleb128 0x14
 7238 05f6 07050000 		.4byte	.LASF90
 7239 05fa 01       		.byte	0x1
 7240 05fb 5D01     		.2byte	0x15d
 7241 05fd 20       		.byte	0x20
 7242 05fe 72020000 		.4byte	0x272
 7243 0602 05       		.byte	0x5
 7244 0603 03       		.byte	0x3
 7245 0604 2C000000 		.4byte	xTasksWaitingTermination
 7246 0608 14       		.uleb128 0x14
 7247 0609 9E010000 		.4byte	.LASF91
 7248 060d 01       		.byte	0x1
 7249 060e 5E01     		.2byte	0x15e
 7250 0610 2E       		.byte	0x2e
 7251 0611 54010000 		.4byte	0x154
 7252 0615 05       		.byte	0x5
 7253 0616 03       		.byte	0x3
 7254 0617 44000000 		.4byte	uxDeletedTasksWaitingCleanUp
ARM GAS  /tmp/ccGXytas.s 			page 254


 7255 061b 14       		.uleb128 0x14
 7256 061c 79060000 		.4byte	.LASF92
 7257 0620 01       		.byte	0x1
 7258 0621 6401     		.2byte	0x164
 7259 0623 20       		.byte	0x20
 7260 0624 72020000 		.4byte	0x272
 7261 0628 05       		.byte	0x5
 7262 0629 03       		.byte	0x3
 7263 062a 0C000000 		.4byte	xSuspendedTaskList
 7264 062e 14       		.uleb128 0x14
 7265 062f BD0F0000 		.4byte	.LASF93
 7266 0633 01       		.byte	0x1
 7267 0634 6F01     		.2byte	0x16f
 7268 0636 2D       		.byte	0x2d
 7269 0637 54010000 		.4byte	0x154
 7270 063b 05       		.byte	0x5
 7271 063c 03       		.byte	0x3
 7272 063d 40000000 		.4byte	uxCurrentNumberOfTasks
 7273 0641 14       		.uleb128 0x14
 7274 0642 37060000 		.4byte	.LASF94
 7275 0646 01       		.byte	0x1
 7276 0647 7001     		.2byte	0x170
 7277 0649 2C       		.byte	0x2c
 7278 064a 6A010000 		.4byte	0x16a
 7279 064e 05       		.byte	0x5
 7280 064f 03       		.byte	0x3
 7281 0650 00000000 		.4byte	xTickCount
 7282 0654 14       		.uleb128 0x14
 7283 0655 34010000 		.4byte	.LASF95
 7284 0659 01       		.byte	0x1
 7285 065a 7101     		.2byte	0x171
 7286 065c 2D       		.byte	0x2d
 7287 065d 54010000 		.4byte	0x154
 7288 0661 05       		.byte	0x5
 7289 0662 03       		.byte	0x3
 7290 0663 08000000 		.4byte	uxTopReadyPriority
 7291 0667 14       		.uleb128 0x14
 7292 0668 6E010000 		.4byte	.LASF96
 7293 066c 01       		.byte	0x1
 7294 066d 7201     		.2byte	0x172
 7295 066f 2C       		.byte	0x2c
 7296 0670 3E010000 		.4byte	0x13e
 7297 0674 05       		.byte	0x5
 7298 0675 03       		.byte	0x3
 7299 0676 E8000000 		.4byte	xSchedulerRunning
 7300 067a 14       		.uleb128 0x14
 7301 067b 3C0D0000 		.4byte	.LASF97
 7302 067f 01       		.byte	0x1
 7303 0680 7301     		.2byte	0x173
 7304 0682 2D       		.byte	0x2d
 7305 0683 54010000 		.4byte	0x154
 7306 0687 05       		.byte	0x5
 7307 0688 03       		.byte	0x3
 7308 0689 FC000000 		.4byte	uxPendedTicks
 7309 068d 14       		.uleb128 0x14
 7310 068e C7100000 		.4byte	.LASF98
 7311 0692 01       		.byte	0x1
ARM GAS  /tmp/ccGXytas.s 			page 255


 7312 0693 7401     		.2byte	0x174
 7313 0695 2C       		.byte	0x2c
 7314 0696 3E010000 		.4byte	0x13e
 7315 069a 05       		.byte	0x5
 7316 069b 03       		.byte	0x3
 7317 069c 00010000 		.4byte	xYieldPending
 7318 06a0 14       		.uleb128 0x14
 7319 06a1 FF0A0000 		.4byte	.LASF99
 7320 06a5 01       		.byte	0x1
 7321 06a6 7501     		.2byte	0x175
 7322 06a8 2C       		.byte	0x2c
 7323 06a9 3E010000 		.4byte	0x13e
 7324 06ad 05       		.byte	0x5
 7325 06ae 03       		.byte	0x3
 7326 06af F8000000 		.4byte	xNumOfOverflows
 7327 06b3 14       		.uleb128 0x14
 7328 06b4 020A0000 		.4byte	.LASF46
 7329 06b8 01       		.byte	0x1
 7330 06b9 7601     		.2byte	0x176
 7331 06bb 24       		.byte	0x24
 7332 06bc 48010000 		.4byte	0x148
 7333 06c0 05       		.byte	0x5
 7334 06c1 03       		.byte	0x3
 7335 06c2 EC000000 		.4byte	uxTaskNumber
 7336 06c6 14       		.uleb128 0x14
 7337 06c7 92080000 		.4byte	.LASF100
 7338 06cb 01       		.byte	0x1
 7339 06cc 7701     		.2byte	0x177
 7340 06ce 2C       		.byte	0x2c
 7341 06cf 6A010000 		.4byte	0x16a
 7342 06d3 05       		.byte	0x5
 7343 06d4 03       		.byte	0x3
 7344 06d5 28000000 		.4byte	xNextTaskUnblockTime
 7345 06d9 14       		.uleb128 0x14
 7346 06da E20C0000 		.4byte	.LASF101
 7347 06de 01       		.byte	0x1
 7348 06df 7801     		.2byte	0x178
 7349 06e1 25       		.byte	0x25
 7350 06e2 83020000 		.4byte	0x283
 7351 06e6 05       		.byte	0x5
 7352 06e7 03       		.byte	0x3
 7353 06e8 F4000000 		.4byte	xIdleTaskHandle
 7354 06ec 14       		.uleb128 0x14
 7355 06ed 23100000 		.4byte	.LASF102
 7356 06f1 01       		.byte	0x1
 7357 06f2 8201     		.2byte	0x182
 7358 06f4 2D       		.byte	0x2d
 7359 06f5 54010000 		.4byte	0x154
 7360 06f9 05       		.byte	0x5
 7361 06fa 03       		.byte	0x3
 7362 06fb F0000000 		.4byte	uxSchedulerSuspended
 7363 06ff 15       		.uleb128 0x15
 7364 0700 01       		.byte	0x1
 7365 0701 51100000 		.4byte	.LASF107
 7366 0705 09       		.byte	0x9
 7367 0706 A2       		.byte	0xa2
 7368 0707 06       		.byte	0x6
ARM GAS  /tmp/ccGXytas.s 			page 256


 7369 0708 01       		.byte	0x1
 7370 0709 01       		.byte	0x1
 7371 070a 16       		.uleb128 0x16
 7372 070b 01       		.byte	0x1
 7373 070c 65000000 		.4byte	.LASF103
 7374 0710 09       		.byte	0x9
 7375 0711 9B       		.byte	0x9b
 7376 0712 0C       		.byte	0xc
 7377 0713 01       		.byte	0x1
 7378 0714 32010000 		.4byte	0x132
 7379 0718 01       		.byte	0x1
 7380 0719 17       		.uleb128 0x17
 7381 071a 01       		.byte	0x1
 7382 071b 1B030000 		.4byte	.LASF104
 7383 071f 0A       		.byte	0xa
 7384 0720 0105     		.2byte	0x501
 7385 0722 0C       		.byte	0xc
 7386 0723 01       		.byte	0x1
 7387 0724 32010000 		.4byte	0x132
 7388 0728 01       		.byte	0x1
 7389 0729 18       		.uleb128 0x18
 7390 072a 01       		.byte	0x1
 7391 072b 00000000 		.4byte	.LASF105
 7392 072f 07       		.byte	0x7
 7393 0730 7101     		.2byte	0x171
 7394 0732 06       		.byte	0x6
 7395 0733 01       		.byte	0x1
 7396 0734 01       		.byte	0x1
 7397 0735 44070000 		.4byte	0x744
 7398 0739 0A       		.uleb128 0xa
 7399 073a CA050000 		.4byte	0x5ca
 7400 073e 0A       		.uleb128 0xa
 7401 073f 6D020000 		.4byte	0x26d
 7402 0743 00       		.byte	0
 7403 0744 19       		.uleb128 0x19
 7404 0745 01       		.byte	0x1
 7405 0746 66030000 		.4byte	.LASF111
 7406 074a 07       		.byte	0x7
 7407 074b 9501     		.2byte	0x195
 7408 074d 0D       		.byte	0xd
 7409 074e 01       		.byte	0x1
 7410 074f 48010000 		.4byte	0x148
 7411 0753 01       		.byte	0x1
 7412 0754 5E070000 		.4byte	0x75e
 7413 0758 0A       		.uleb128 0xa
 7414 0759 6D020000 		.4byte	0x26d
 7415 075d 00       		.byte	0
 7416 075e 18       		.uleb128 0x18
 7417 075f 01       		.byte	0x1
 7418 0760 540E0000 		.4byte	.LASF106
 7419 0764 07       		.byte	0x7
 7420 0765 5901     		.2byte	0x159
 7421 0767 06       		.byte	0x6
 7422 0768 01       		.byte	0x1
 7423 0769 01       		.byte	0x1
 7424 076a 74070000 		.4byte	0x774
 7425 076e 0A       		.uleb128 0xa
ARM GAS  /tmp/ccGXytas.s 			page 257


 7426 076f CA050000 		.4byte	0x5ca
 7427 0773 00       		.byte	0
 7428 0774 15       		.uleb128 0x15
 7429 0775 01       		.byte	0x1
 7430 0776 36000000 		.4byte	.LASF108
 7431 077a 02       		.byte	0x2
 7432 077b 62       		.byte	0x62
 7433 077c 0D       		.byte	0xd
 7434 077d 01       		.byte	0x1
 7435 077e 01       		.byte	0x1
 7436 077f 18       		.uleb128 0x18
 7437 0780 01       		.byte	0x1
 7438 0781 5A060000 		.4byte	.LASF109
 7439 0785 07       		.byte	0x7
 7440 0786 8601     		.2byte	0x186
 7441 0788 06       		.byte	0x6
 7442 0789 01       		.byte	0x1
 7443 078a 01       		.byte	0x1
 7444 078b 9A070000 		.4byte	0x79a
 7445 078f 0A       		.uleb128 0xa
 7446 0790 CA050000 		.4byte	0x5ca
 7447 0794 0A       		.uleb128 0xa
 7448 0795 6D020000 		.4byte	0x26d
 7449 0799 00       		.byte	0
 7450 079a 15       		.uleb128 0x15
 7451 079b 01       		.byte	0x1
 7452 079c AC020000 		.4byte	.LASF110
 7453 07a0 02       		.byte	0x2
 7454 07a1 61       		.byte	0x61
 7455 07a2 0D       		.byte	0xd
 7456 07a3 01       		.byte	0x1
 7457 07a4 01       		.byte	0x1
 7458 07a5 1A       		.uleb128 0x1a
 7459 07a6 01       		.byte	0x1
 7460 07a7 BA080000 		.4byte	.LASF112
 7461 07ab 09       		.byte	0x9
 7462 07ac 75       		.byte	0x75
 7463 07ad 10       		.byte	0x10
 7464 07ae 01       		.byte	0x1
 7465 07af 63040000 		.4byte	0x463
 7466 07b3 01       		.byte	0x1
 7467 07b4 C8070000 		.4byte	0x7c8
 7468 07b8 0A       		.uleb128 0xa
 7469 07b9 63040000 		.4byte	0x463
 7470 07bd 0A       		.uleb128 0xa
 7471 07be 03010000 		.4byte	0x103
 7472 07c2 0A       		.uleb128 0xa
 7473 07c3 A2000000 		.4byte	0xa2
 7474 07c7 00       		.byte	0
 7475 07c8 18       		.uleb128 0x18
 7476 07c9 01       		.byte	0x1
 7477 07ca 7F0B0000 		.4byte	.LASF113
 7478 07ce 07       		.byte	0x7
 7479 07cf 6401     		.2byte	0x164
 7480 07d1 06       		.byte	0x6
 7481 07d2 01       		.byte	0x1
 7482 07d3 01       		.byte	0x1
ARM GAS  /tmp/ccGXytas.s 			page 258


 7483 07d4 DE070000 		.4byte	0x7de
 7484 07d8 0A       		.uleb128 0xa
 7485 07d9 6D020000 		.4byte	0x26d
 7486 07dd 00       		.byte	0
 7487 07de 1A       		.uleb128 0x1a
 7488 07df 01       		.byte	0x1
 7489 07e0 A9090000 		.4byte	.LASF114
 7490 07e4 0B       		.byte	0xb
 7491 07e5 21       		.byte	0x21
 7492 07e6 09       		.byte	0x9
 7493 07e7 01       		.byte	0x1
 7494 07e8 A2000000 		.4byte	0xa2
 7495 07ec 01       		.byte	0x1
 7496 07ed 01080000 		.4byte	0x801
 7497 07f1 0A       		.uleb128 0xa
 7498 07f2 A2000000 		.4byte	0xa2
 7499 07f6 0A       		.uleb128 0xa
 7500 07f7 4D000000 		.4byte	0x4d
 7501 07fb 0A       		.uleb128 0xa
 7502 07fc 41000000 		.4byte	0x41
 7503 0800 00       		.byte	0
 7504 0801 1B       		.uleb128 0x1b
 7505 0802 01       		.byte	0x1
 7506 0803 BB0C0000 		.4byte	.LASF115
 7507 0807 09       		.byte	0x9
 7508 0808 92       		.byte	0x92
 7509 0809 06       		.byte	0x6
 7510 080a 01       		.byte	0x1
 7511 080b 01       		.byte	0x1
 7512 080c 16080000 		.4byte	0x816
 7513 0810 0A       		.uleb128 0xa
 7514 0811 A2000000 		.4byte	0xa2
 7515 0815 00       		.byte	0
 7516 0816 1A       		.uleb128 0x1a
 7517 0817 01       		.byte	0x1
 7518 0818 56050000 		.4byte	.LASF116
 7519 081c 09       		.byte	0x9
 7520 081d 91       		.byte	0x91
 7521 081e 07       		.byte	0x7
 7522 081f 01       		.byte	0x1
 7523 0820 A2000000 		.4byte	0xa2
 7524 0824 01       		.byte	0x1
 7525 0825 2F080000 		.4byte	0x82f
 7526 0829 0A       		.uleb128 0xa
 7527 082a 41000000 		.4byte	0x41
 7528 082e 00       		.byte	0
 7529 082f 1C       		.uleb128 0x1c
 7530 0830 890F0000 		.4byte	.LASF177
 7531 0834 01       		.byte	0x1
 7532 0835 D913     		.2byte	0x13d9
 7533 0837 0D       		.byte	0xd
 7534 0838 01       		.byte	0x1
 7535 0839 00000000 		.4byte	.LFB62
 7536 083d 6C000000 		.4byte	.LFE62
 7537 0841 00000000 		.4byte	.LLST0
 7538 0845 01       		.byte	0x1
 7539 0846 D3080000 		.4byte	0x8d3
ARM GAS  /tmp/ccGXytas.s 			page 259


 7540 084a 1D       		.uleb128 0x1d
 7541 084b D30E0000 		.4byte	.LASF117
 7542 084f 01       		.byte	0x1
 7543 0850 D913     		.2byte	0x13d9
 7544 0852 38       		.byte	0x38
 7545 0853 5E010000 		.4byte	0x15e
 7546 0857 5E000000 		.4byte	.LLST1
 7547 085b 50000000 		.4byte	.LVUS1
 7548 085f 1D       		.uleb128 0x1d
 7549 0860 D00D0000 		.4byte	.LASF118
 7550 0864 01       		.byte	0x1
 7551 0865 D913     		.2byte	0x13d9
 7552 0867 57       		.byte	0x57
 7553 0868 43010000 		.4byte	0x143
 7554 086c DC000000 		.4byte	.LLST2
 7555 0870 CE000000 		.4byte	.LVUS2
 7556 0874 1E       		.uleb128 0x1e
 7557 0875 02100000 		.4byte	.LASF120
 7558 0879 01       		.byte	0x1
 7559 087a DB13     		.2byte	0x13db
 7560 087c 0C       		.byte	0xc
 7561 087d 5E010000 		.4byte	0x15e
 7562 0881 50010000 		.4byte	.LLST3
 7563 0885 4C010000 		.4byte	.LVUS3
 7564 0889 1E       		.uleb128 0x1e
 7565 088a 69060000 		.4byte	.LASF121
 7566 088e 01       		.byte	0x1
 7567 088f DC13     		.2byte	0x13dc
 7568 0891 12       		.byte	0x12
 7569 0892 6F010000 		.4byte	0x16f
 7570 0896 72010000 		.4byte	.LLST4
 7571 089a 6E010000 		.4byte	.LVUS4
 7572 089e 1F       		.uleb128 0x1f
 7573 089f 12000000 		.4byte	.LVL3
 7574 08a3 44070000 		.4byte	0x744
 7575 08a7 20       		.uleb128 0x20
 7576 08a8 38000000 		.4byte	.LVL5
 7577 08ac 01       		.byte	0x1
 7578 08ad 7F070000 		.4byte	0x77f
 7579 08b1 BF080000 		.4byte	0x8bf
 7580 08b5 21       		.uleb128 0x21
 7581 08b6 01       		.byte	0x1
 7582 08b7 50       		.byte	0x50
 7583 08b8 05       		.byte	0x5
 7584 08b9 03       		.byte	0x3
 7585 08ba 0C000000 		.4byte	.LANCHOR0+12
 7586 08be 00       		.byte	0
 7587 08bf 22       		.uleb128 0x22
 7588 08c0 4E000000 		.4byte	.LVL8
 7589 08c4 01       		.byte	0x1
 7590 08c5 29070000 		.4byte	0x729
 7591 08c9 1F       		.uleb128 0x1f
 7592 08ca 58000000 		.4byte	.LVL9
 7593 08ce 29070000 		.4byte	0x729
 7594 08d2 00       		.byte	0
 7595 08d3 23       		.uleb128 0x23
 7596 08d4 01       		.byte	0x1
ARM GAS  /tmp/ccGXytas.s 			page 260


 7597 08d5 AD060000 		.4byte	.LASF128
 7598 08d9 01       		.byte	0x1
 7599 08da B413     		.2byte	0x13b4
 7600 08dc 0D       		.byte	0xd
 7601 08dd 01       		.byte	0x1
 7602 08de 32010000 		.4byte	0x132
 7603 08e2 20110000 		.4byte	.LFB61
 7604 08e6 4C110000 		.4byte	.LFE61
 7605 08ea 90010000 		.4byte	.LLST210
 7606 08ee 01       		.byte	0x1
 7607 08ef 45090000 		.4byte	0x945
 7608 08f3 1D       		.uleb128 0x1d
 7609 08f4 9D0A0000 		.4byte	.LASF122
 7610 08f8 01       		.byte	0x1
 7611 08f9 B413     		.2byte	0x13b4
 7612 08fb 31       		.byte	0x31
 7613 08fc 83020000 		.4byte	0x283
 7614 0900 B2010000 		.4byte	.LLST211
 7615 0904 B0010000 		.4byte	.LVUS211
 7616 0908 1E       		.uleb128 0x1e
 7617 0909 1D100000 		.4byte	.LASF123
 7618 090d 01       		.byte	0x1
 7619 090e B613     		.2byte	0x13b6
 7620 0910 09       		.byte	0x9
 7621 0911 53050000 		.4byte	0x553
 7622 0915 C7010000 		.4byte	.LLST212
 7623 0919 C5010000 		.4byte	.LVUS212
 7624 091d 1E       		.uleb128 0x1e
 7625 091e 230D0000 		.4byte	.LASF124
 7626 0922 01       		.byte	0x1
 7627 0923 B713     		.2byte	0x13b7
 7628 0925 0D       		.byte	0xd
 7629 0926 32010000 		.4byte	0x132
 7630 092a E0010000 		.4byte	.LLST213
 7631 092e DA010000 		.4byte	.LVUS213
 7632 0932 1F       		.uleb128 0x1f
 7633 0933 2E110000 		.4byte	.LVL393
 7634 0937 9A070000 		.4byte	0x79a
 7635 093b 1F       		.uleb128 0x1f
 7636 093c 44110000 		.4byte	.LVL397
 7637 0940 74070000 		.4byte	0x774
 7638 0944 00       		.byte	0
 7639 0945 24       		.uleb128 0x24
 7640 0946 01       		.byte	0x1
 7641 0947 E50B0000 		.4byte	.LASF144
 7642 094b 01       		.byte	0x1
 7643 094c 5D13     		.2byte	0x135d
 7644 094e 07       		.byte	0x7
 7645 094f 01       		.byte	0x1
 7646 0950 94100000 		.4byte	.LFB60
 7647 0954 20110000 		.4byte	.LFE60
 7648 0958 0A020000 		.4byte	.LLST205
 7649 095c 01       		.byte	0x1
 7650 095d 270A0000 		.4byte	0xa27
 7651 0961 1D       		.uleb128 0x1d
 7652 0962 8F0A0000 		.4byte	.LASF125
 7653 0966 01       		.byte	0x1
ARM GAS  /tmp/ccGXytas.s 			page 261


 7654 0967 5D13     		.2byte	0x135d
 7655 0969 2C       		.byte	0x2c
 7656 096a 83020000 		.4byte	0x283
 7657 096e 32020000 		.4byte	.LLST206
 7658 0972 2A020000 		.4byte	.LVUS206
 7659 0976 1D       		.uleb128 0x1d
 7660 0977 10010000 		.4byte	.LASF126
 7661 097b 01       		.byte	0x1
 7662 097c 5D13     		.2byte	0x135d
 7663 097e 47       		.byte	0x47
 7664 097f 270A0000 		.4byte	0xa27
 7665 0983 6E020000 		.4byte	.LLST207
 7666 0987 66020000 		.4byte	.LVUS207
 7667 098b 1E       		.uleb128 0x1e
 7668 098c 1D100000 		.4byte	.LASF123
 7669 0990 01       		.byte	0x1
 7670 0991 5F13     		.2byte	0x135f
 7671 0993 0A       		.byte	0xa
 7672 0994 53050000 		.4byte	0x553
 7673 0998 AA020000 		.4byte	.LLST208
 7674 099c A2020000 		.4byte	.LVUS208
 7675 09a0 1E       		.uleb128 0x1e
 7676 09a1 FC010000 		.4byte	.LASF127
 7677 09a5 01       		.byte	0x1
 7678 09a6 6013     		.2byte	0x1360
 7679 09a8 0A       		.byte	0xa
 7680 09a9 C6000000 		.4byte	0xc6
 7681 09ad E2020000 		.4byte	.LLST209
 7682 09b1 DE020000 		.4byte	.LVUS209
 7683 09b5 25       		.uleb128 0x25
 7684 09b6 38030000 		.4byte	.LASF133
 7685 09ba 01       		.byte	0x1
 7686 09bb 6113     		.2byte	0x1361
 7687 09bd 0E       		.byte	0xe
 7688 09be 48010000 		.4byte	0x148
 7689 09c2 26       		.uleb128 0x26
 7690 09c3 23280000 		.4byte	0x2823
 7691 09c7 94100000 		.4byte	.LBI162
 7692 09cb 08       		.byte	.LVU1686
 7693 09cc D0010000 		.4byte	.Ldebug_ranges0+0x1d0
 7694 09d0 01       		.byte	0x1
 7695 09d1 7913     		.2byte	0x1379
 7696 09d3 1C       		.byte	0x1c
 7697 09d4 E9090000 		.4byte	0x9e9
 7698 09d8 27       		.uleb128 0x27
 7699 09d9 D0010000 		.4byte	.Ldebug_ranges0+0x1d0
 7700 09dd 28       		.uleb128 0x28
 7701 09de 35280000 		.4byte	0x2835
 7702 09e2 28       		.uleb128 0x28
 7703 09e3 41280000 		.4byte	0x2841
 7704 09e7 00       		.byte	0
 7705 09e8 00       		.byte	0
 7706 09e9 29       		.uleb128 0x29
 7707 09ea 08280000 		.4byte	0x2808
 7708 09ee 08110000 		.4byte	.LBI166
 7709 09f2 02       		.byte	.LVU1731
 7710 09f3 08110000 		.4byte	.LBB166
ARM GAS  /tmp/ccGXytas.s 			page 262


 7711 09f7 0C110000 		.4byte	.LBE166
 7712 09fb 01       		.byte	0x1
 7713 09fc AB13     		.2byte	0x13ab
 7714 09fe 03       		.byte	0x3
 7715 09ff 090A0000 		.4byte	0xa09
 7716 0a03 2A       		.uleb128 0x2a
 7717 0a04 16280000 		.4byte	0x2816
 7718 0a08 00       		.byte	0
 7719 0a09 2B       		.uleb128 0x2b
 7720 0a0a DA100000 		.4byte	.LVL383
 7721 0a0e 44070000 		.4byte	0x744
 7722 0a12 1D0A0000 		.4byte	0xa1d
 7723 0a16 21       		.uleb128 0x21
 7724 0a17 01       		.byte	0x1
 7725 0a18 50       		.byte	0x50
 7726 0a19 02       		.byte	0x2
 7727 0a1a 79       		.byte	0x79
 7728 0a1b 00       		.sleb128 0
 7729 0a1c 00       		.byte	0
 7730 0a1d 1F       		.uleb128 0x1f
 7731 0a1e F4100000 		.4byte	.LVL385
 7732 0a22 7F070000 		.4byte	0x77f
 7733 0a26 00       		.byte	0
 7734 0a27 07       		.uleb128 0x7
 7735 0a28 04       		.byte	0x4
 7736 0a29 32010000 		.4byte	0x132
 7737 0a2d 23       		.uleb128 0x23
 7738 0a2e 01       		.byte	0x1
 7739 0a2f 27020000 		.4byte	.LASF129
 7740 0a33 01       		.byte	0x1
 7741 0a34 DC12     		.2byte	0x12dc
 7742 0a36 0D       		.byte	0xd
 7743 0a37 01       		.byte	0x1
 7744 0a38 32010000 		.4byte	0x132
 7745 0a3c E40F0000 		.4byte	.LFB59
 7746 0a40 94100000 		.4byte	.LFE59
 7747 0a44 00030000 		.4byte	.LLST196
 7748 0a48 01       		.byte	0x1
 7749 0a49 650B0000 		.4byte	0xb65
 7750 0a4d 1D       		.uleb128 0x1d
 7751 0a4e 8F0A0000 		.4byte	.LASF125
 7752 0a52 01       		.byte	0x1
 7753 0a53 DC12     		.2byte	0x12dc
 7754 0a55 35       		.byte	0x35
 7755 0a56 83020000 		.4byte	0x283
 7756 0a5a 24030000 		.4byte	.LLST197
 7757 0a5e 20030000 		.4byte	.LVUS197
 7758 0a62 1D       		.uleb128 0x1d
 7759 0a63 8F0C0000 		.4byte	.LASF130
 7760 0a67 01       		.byte	0x1
 7761 0a68 DC12     		.2byte	0x12dc
 7762 0a6a 4D       		.byte	0x4d
 7763 0a6b ED000000 		.4byte	0xed
 7764 0a6f 4C030000 		.4byte	.LLST198
 7765 0a73 42030000 		.4byte	.LVUS198
 7766 0a77 1D       		.uleb128 0x1d
 7767 0a78 1C0A0000 		.4byte	.LASF131
ARM GAS  /tmp/ccGXytas.s 			page 263


 7768 0a7c 01       		.byte	0x1
 7769 0a7d DC12     		.2byte	0x12dc
 7770 0a7f 64       		.byte	0x64
 7771 0a80 D3030000 		.4byte	0x3d3
 7772 0a84 A1030000 		.4byte	.LLST199
 7773 0a88 9D030000 		.4byte	.LVUS199
 7774 0a8c 1D       		.uleb128 0x1d
 7775 0a8d 8C090000 		.4byte	.LASF132
 7776 0a91 01       		.byte	0x1
 7777 0a92 DC12     		.2byte	0x12dc
 7778 0a94 77       		.byte	0x77
 7779 0a95 650B0000 		.4byte	0xb65
 7780 0a99 CC030000 		.4byte	.LLST200
 7781 0a9d C8030000 		.4byte	.LVUS200
 7782 0aa1 1D       		.uleb128 0x1d
 7783 0aa2 10010000 		.4byte	.LASF126
 7784 0aa6 01       		.byte	0x1
 7785 0aa7 DC12     		.2byte	0x12dc
 7786 0aa9 A1       		.byte	0xa1
 7787 0aaa 270A0000 		.4byte	0xa27
 7788 0aae F7030000 		.4byte	.LLST201
 7789 0ab2 F3030000 		.4byte	.LVUS201
 7790 0ab6 1E       		.uleb128 0x1e
 7791 0ab7 1D100000 		.4byte	.LASF123
 7792 0abb 01       		.byte	0x1
 7793 0abc DE12     		.2byte	0x12de
 7794 0abe 0A       		.byte	0xa
 7795 0abf 53050000 		.4byte	0x553
 7796 0ac3 1B040000 		.4byte	.LLST202
 7797 0ac7 17040000 		.4byte	.LVUS202
 7798 0acb 1E       		.uleb128 0x1e
 7799 0acc FC010000 		.4byte	.LASF127
 7800 0ad0 01       		.byte	0x1
 7801 0ad1 DF12     		.2byte	0x12df
 7802 0ad3 0A       		.byte	0xa
 7803 0ad4 C6000000 		.4byte	0xc6
 7804 0ad8 3D040000 		.4byte	.LLST203
 7805 0adc 39040000 		.4byte	.LVUS203
 7806 0ae0 1E       		.uleb128 0x1e
 7807 0ae1 230D0000 		.4byte	.LASF124
 7808 0ae5 01       		.byte	0x1
 7809 0ae6 E012     		.2byte	0x12e0
 7810 0ae8 0D       		.byte	0xd
 7811 0ae9 32010000 		.4byte	0x132
 7812 0aed 5F040000 		.4byte	.LLST204
 7813 0af1 5B040000 		.4byte	.LVUS204
 7814 0af5 25       		.uleb128 0x25
 7815 0af6 38030000 		.4byte	.LASF133
 7816 0afa 01       		.byte	0x1
 7817 0afb E112     		.2byte	0x12e1
 7818 0afd 0E       		.byte	0xe
 7819 0afe 48010000 		.4byte	0x148
 7820 0b02 29       		.uleb128 0x29
 7821 0b03 23280000 		.4byte	0x2823
 7822 0b07 EC0F0000 		.4byte	.LBI158
 7823 0b0b 01       		.byte	.LVU1614
 7824 0b0c EC0F0000 		.4byte	.LBB158
ARM GAS  /tmp/ccGXytas.s 			page 264


 7825 0b10 00100000 		.4byte	.LBE158
 7826 0b14 01       		.byte	0x1
 7827 0b15 F912     		.2byte	0x12f9
 7828 0b17 1C       		.byte	0x1c
 7829 0b18 270B0000 		.4byte	0xb27
 7830 0b1c 28       		.uleb128 0x28
 7831 0b1d 35280000 		.4byte	0x2835
 7832 0b21 28       		.uleb128 0x28
 7833 0b22 41280000 		.4byte	0x2841
 7834 0b26 00       		.byte	0
 7835 0b27 29       		.uleb128 0x29
 7836 0b28 08280000 		.4byte	0x2808
 7837 0b2c 6C100000 		.4byte	.LBI160
 7838 0b30 02       		.byte	.LVU1663
 7839 0b31 6C100000 		.4byte	.LBB160
 7840 0b35 70100000 		.4byte	.LBE160
 7841 0b39 01       		.byte	0x1
 7842 0b3a 5313     		.2byte	0x1353
 7843 0b3c 03       		.byte	0x3
 7844 0b3d 470B0000 		.4byte	0xb47
 7845 0b41 2A       		.uleb128 0x2a
 7846 0b42 16280000 		.4byte	0x2816
 7847 0b46 00       		.byte	0
 7848 0b47 2B       		.uleb128 0x2b
 7849 0b48 3C100000 		.4byte	.LVL371
 7850 0b4c 44070000 		.4byte	0x744
 7851 0b50 5B0B0000 		.4byte	0xb5b
 7852 0b54 21       		.uleb128 0x21
 7853 0b55 01       		.byte	0x1
 7854 0b56 50       		.byte	0x50
 7855 0b57 02       		.byte	0x2
 7856 0b58 79       		.byte	0x79
 7857 0b59 00       		.sleb128 0
 7858 0b5a 00       		.byte	0
 7859 0b5b 1F       		.uleb128 0x1f
 7860 0b5c 56100000 		.4byte	.LVL373
 7861 0b60 7F070000 		.4byte	0x77f
 7862 0b64 00       		.byte	0
 7863 0b65 07       		.uleb128 0x7
 7864 0b66 04       		.byte	0x4
 7865 0b67 ED000000 		.4byte	0xed
 7866 0b6b 06       		.uleb128 0x6
 7867 0b6c 650B0000 		.4byte	0xb65
 7868 0b70 23       		.uleb128 0x23
 7869 0b71 01       		.byte	0x1
 7870 0b72 A6030000 		.4byte	.LASF134
 7871 0b76 01       		.byte	0x1
 7872 0b77 6A12     		.2byte	0x126a
 7873 0b79 0D       		.byte	0xd
 7874 0b7a 01       		.byte	0x1
 7875 0b7b 32010000 		.4byte	0x132
 7876 0b7f 480F0000 		.4byte	.LFB58
 7877 0b83 E40F0000 		.4byte	.LFE58
 7878 0b87 7F040000 		.4byte	.LLST188
 7879 0b8b 01       		.byte	0x1
 7880 0b8c 5E0C0000 		.4byte	0xc5e
 7881 0b90 1D       		.uleb128 0x1d
ARM GAS  /tmp/ccGXytas.s 			page 265


 7882 0b91 8F0A0000 		.4byte	.LASF125
 7883 0b95 01       		.byte	0x1
 7884 0b96 6A12     		.2byte	0x126a
 7885 0b98 2E       		.byte	0x2e
 7886 0b99 83020000 		.4byte	0x283
 7887 0b9d A9040000 		.4byte	.LLST189
 7888 0ba1 9F040000 		.4byte	.LVUS189
 7889 0ba5 1D       		.uleb128 0x1d
 7890 0ba6 8F0C0000 		.4byte	.LASF130
 7891 0baa 01       		.byte	0x1
 7892 0bab 6A12     		.2byte	0x126a
 7893 0bad 46       		.byte	0x46
 7894 0bae ED000000 		.4byte	0xed
 7895 0bb2 02050000 		.4byte	.LLST190
 7896 0bb6 FA040000 		.4byte	.LVUS190
 7897 0bba 1D       		.uleb128 0x1d
 7898 0bbb 1C0A0000 		.4byte	.LASF131
 7899 0bbf 01       		.byte	0x1
 7900 0bc0 6A12     		.2byte	0x126a
 7901 0bc2 5D       		.byte	0x5d
 7902 0bc3 D3030000 		.4byte	0x3d3
 7903 0bc7 45050000 		.4byte	.LLST191
 7904 0bcb 3F050000 		.4byte	.LVUS191
 7905 0bcf 1D       		.uleb128 0x1d
 7906 0bd0 8C090000 		.4byte	.LASF132
 7907 0bd4 01       		.byte	0x1
 7908 0bd5 6A12     		.2byte	0x126a
 7909 0bd7 70       		.byte	0x70
 7910 0bd8 650B0000 		.4byte	0xb65
 7911 0bdc 7D050000 		.4byte	.LLST192
 7912 0be0 77050000 		.4byte	.LVUS192
 7913 0be4 1E       		.uleb128 0x1e
 7914 0be5 1D100000 		.4byte	.LASF123
 7915 0be9 01       		.byte	0x1
 7916 0bea 6C12     		.2byte	0x126c
 7917 0bec 0A       		.byte	0xa
 7918 0bed 53050000 		.4byte	0x553
 7919 0bf1 B9050000 		.4byte	.LLST193
 7920 0bf5 AF050000 		.4byte	.LVUS193
 7921 0bf9 1E       		.uleb128 0x1e
 7922 0bfa 230D0000 		.4byte	.LASF124
 7923 0bfe 01       		.byte	0x1
 7924 0bff 6D12     		.2byte	0x126d
 7925 0c01 0D       		.byte	0xd
 7926 0c02 32010000 		.4byte	0x132
 7927 0c06 0E060000 		.4byte	.LLST194
 7928 0c0a 0A060000 		.4byte	.LVUS194
 7929 0c0e 1E       		.uleb128 0x1e
 7930 0c0f FC010000 		.4byte	.LASF127
 7931 0c13 01       		.byte	0x1
 7932 0c14 6E12     		.2byte	0x126e
 7933 0c16 0A       		.byte	0xa
 7934 0c17 C6000000 		.4byte	0xc6
 7935 0c1b 32060000 		.4byte	.LLST195
 7936 0c1f 2E060000 		.4byte	.LVUS195
 7937 0c23 1F       		.uleb128 0x1f
 7938 0c24 560F0000 		.4byte	.LVL353
ARM GAS  /tmp/ccGXytas.s 			page 266


 7939 0c28 9A070000 		.4byte	0x79a
 7940 0c2c 2B       		.uleb128 0x2b
 7941 0c2d 880F0000 		.4byte	.LVL357
 7942 0c31 44070000 		.4byte	0x744
 7943 0c35 400C0000 		.4byte	0xc40
 7944 0c39 21       		.uleb128 0x21
 7945 0c3a 01       		.byte	0x1
 7946 0c3b 50       		.byte	0x50
 7947 0c3c 02       		.byte	0x2
 7948 0c3d 77       		.byte	0x77
 7949 0c3e 00       		.sleb128 0
 7950 0c3f 00       		.byte	0
 7951 0c40 2B       		.uleb128 0x2b
 7952 0c41 A40F0000 		.4byte	.LVL360
 7953 0c45 7F070000 		.4byte	0x77f
 7954 0c49 540C0000 		.4byte	0xc54
 7955 0c4d 21       		.uleb128 0x21
 7956 0c4e 01       		.byte	0x1
 7957 0c4f 51       		.byte	0x51
 7958 0c50 02       		.byte	0x2
 7959 0c51 77       		.byte	0x77
 7960 0c52 00       		.sleb128 0
 7961 0c53 00       		.byte	0
 7962 0c54 1F       		.uleb128 0x1f
 7963 0c55 C80F0000 		.4byte	.LVL362
 7964 0c59 74070000 		.4byte	0x774
 7965 0c5d 00       		.byte	0
 7966 0c5e 23       		.uleb128 0x23
 7967 0c5f 01       		.byte	0x1
 7968 0c60 A6070000 		.4byte	.LASF135
 7969 0c64 01       		.byte	0x1
 7970 0c65 1A12     		.2byte	0x121a
 7971 0c67 0D       		.byte	0xd
 7972 0c68 01       		.byte	0x1
 7973 0c69 32010000 		.4byte	0x132
 7974 0c6d C00E0000 		.4byte	.LFB57
 7975 0c71 480F0000 		.4byte	.LFE57
 7976 0c75 50060000 		.4byte	.LLST182
 7977 0c79 01       		.byte	0x1
 7978 0c7a 250D0000 		.4byte	0xd25
 7979 0c7e 1D       		.uleb128 0x1d
 7980 0c7f 51040000 		.4byte	.LASF136
 7981 0c83 01       		.byte	0x1
 7982 0c84 1A12     		.2byte	0x121a
 7983 0c86 27       		.byte	0x27
 7984 0c87 ED000000 		.4byte	0xed
 7985 0c8b 76060000 		.4byte	.LLST183
 7986 0c8f 70060000 		.4byte	.LVUS183
 7987 0c93 1D       		.uleb128 0x1d
 7988 0c94 CE000000 		.4byte	.LASF137
 7989 0c98 01       		.byte	0x1
 7990 0c99 1A12     		.2byte	0x121a
 7991 0c9b 46       		.byte	0x46
 7992 0c9c ED000000 		.4byte	0xed
 7993 0ca0 AE060000 		.4byte	.LLST184
 7994 0ca4 A8060000 		.4byte	.LVUS184
 7995 0ca8 1D       		.uleb128 0x1d
ARM GAS  /tmp/ccGXytas.s 			page 267


 7996 0ca9 0E0D0000 		.4byte	.LASF138
 7997 0cad 01       		.byte	0x1
 7998 0cae 1A12     		.2byte	0x121a
 7999 0cb0 65       		.byte	0x65
 8000 0cb1 650B0000 		.4byte	0xb65
 8001 0cb5 E6060000 		.4byte	.LLST185
 8002 0cb9 E0060000 		.4byte	.LVUS185
 8003 0cbd 1D       		.uleb128 0x1d
 8004 0cbe D30E0000 		.4byte	.LASF117
 8005 0cc2 01       		.byte	0x1
 8006 0cc3 1A12     		.2byte	0x121a
 8007 0cc5 86       		.byte	0x86
 8008 0cc6 5E010000 		.4byte	0x15e
 8009 0cca 1E070000 		.4byte	.LLST186
 8010 0cce 18070000 		.4byte	.LVUS186
 8011 0cd2 1E       		.uleb128 0x1e
 8012 0cd3 230D0000 		.4byte	.LASF124
 8013 0cd7 01       		.byte	0x1
 8014 0cd8 1C12     		.2byte	0x121c
 8015 0cda 0D       		.byte	0xd
 8016 0cdb 32010000 		.4byte	0x132
 8017 0cdf 54070000 		.4byte	.LLST187
 8018 0ce3 50070000 		.4byte	.LVUS187
 8019 0ce7 1F       		.uleb128 0x1f
 8020 0ce8 D20E0000 		.4byte	.LVL343
 8021 0cec 9A070000 		.4byte	0x79a
 8022 0cf0 2B       		.uleb128 0x2b
 8023 0cf1 F60E0000 		.4byte	.LVL344
 8024 0cf5 2F080000 		.4byte	0x82f
 8025 0cf9 090D0000 		.4byte	0xd09
 8026 0cfd 21       		.uleb128 0x21
 8027 0cfe 01       		.byte	0x1
 8028 0cff 50       		.byte	0x50
 8029 0d00 02       		.byte	0x2
 8030 0d01 76       		.byte	0x76
 8031 0d02 00       		.sleb128 0
 8032 0d03 21       		.uleb128 0x21
 8033 0d04 01       		.byte	0x1
 8034 0d05 51       		.byte	0x51
 8035 0d06 01       		.byte	0x1
 8036 0d07 31       		.byte	0x31
 8037 0d08 00       		.byte	0
 8038 0d09 1F       		.uleb128 0x1f
 8039 0d0a 0E0F0000 		.4byte	.LVL345
 8040 0d0e 74070000 		.4byte	0x774
 8041 0d12 1F       		.uleb128 0x1f
 8042 0d13 120F0000 		.4byte	.LVL346
 8043 0d17 9A070000 		.4byte	0x79a
 8044 0d1b 1F       		.uleb128 0x1f
 8045 0d1c 3E0F0000 		.4byte	.LVL349
 8046 0d20 74070000 		.4byte	0x774
 8047 0d24 00       		.byte	0
 8048 0d25 23       		.uleb128 0x23
 8049 0d26 01       		.byte	0x1
 8050 0d27 F1070000 		.4byte	.LASF139
 8051 0d2b 01       		.byte	0x1
 8052 0d2c D611     		.2byte	0x11d6
ARM GAS  /tmp/ccGXytas.s 			page 268


 8053 0d2e 0B       		.byte	0xb
 8054 0d2f 01       		.byte	0x1
 8055 0d30 ED000000 		.4byte	0xed
 8056 0d34 5C0E0000 		.4byte	.LFB56
 8057 0d38 C00E0000 		.4byte	.LFE56
 8058 0d3c 72070000 		.4byte	.LLST178
 8059 0d40 01       		.byte	0x1
 8060 0d41 C20D0000 		.4byte	0xdc2
 8061 0d45 1D       		.uleb128 0x1d
 8062 0d46 D5030000 		.4byte	.LASF140
 8063 0d4a 01       		.byte	0x1
 8064 0d4b D611     		.2byte	0x11d6
 8065 0d4d 28       		.byte	0x28
 8066 0d4e 32010000 		.4byte	0x132
 8067 0d52 96070000 		.4byte	.LLST179
 8068 0d56 92070000 		.4byte	.LVUS179
 8069 0d5a 1D       		.uleb128 0x1d
 8070 0d5b D30E0000 		.4byte	.LASF117
 8071 0d5f 01       		.byte	0x1
 8072 0d60 D611     		.2byte	0x11d6
 8073 0d62 46       		.byte	0x46
 8074 0d63 5E010000 		.4byte	0x15e
 8075 0d67 BA070000 		.4byte	.LLST180
 8076 0d6b B4070000 		.4byte	.LVUS180
 8077 0d6f 1E       		.uleb128 0x1e
 8078 0d70 A8100000 		.4byte	.LASF141
 8079 0d74 01       		.byte	0x1
 8080 0d75 D811     		.2byte	0x11d8
 8081 0d77 0B       		.byte	0xb
 8082 0d78 ED000000 		.4byte	0xed
 8083 0d7c EE070000 		.4byte	.LLST181
 8084 0d80 EC070000 		.4byte	.LVUS181
 8085 0d84 1F       		.uleb128 0x1f
 8086 0d85 680E0000 		.4byte	.LVL335
 8087 0d89 9A070000 		.4byte	0x79a
 8088 0d8d 2B       		.uleb128 0x2b
 8089 0d8e 7E0E0000 		.4byte	.LVL336
 8090 0d92 2F080000 		.4byte	0x82f
 8091 0d96 A60D0000 		.4byte	0xda6
 8092 0d9a 21       		.uleb128 0x21
 8093 0d9b 01       		.byte	0x1
 8094 0d9c 50       		.byte	0x50
 8095 0d9d 02       		.byte	0x2
 8096 0d9e 75       		.byte	0x75
 8097 0d9f 00       		.sleb128 0
 8098 0da0 21       		.uleb128 0x21
 8099 0da1 01       		.byte	0x1
 8100 0da2 51       		.byte	0x51
 8101 0da3 01       		.byte	0x1
 8102 0da4 31       		.byte	0x31
 8103 0da5 00       		.byte	0
 8104 0da6 1F       		.uleb128 0x1f
 8105 0da7 960E0000 		.4byte	.LVL337
 8106 0dab 74070000 		.4byte	0x774
 8107 0daf 1F       		.uleb128 0x1f
 8108 0db0 9A0E0000 		.4byte	.LVL338
 8109 0db4 9A070000 		.4byte	0x79a
ARM GAS  /tmp/ccGXytas.s 			page 269


 8110 0db8 1F       		.uleb128 0x1f
 8111 0db9 B40E0000 		.4byte	.LVL340
 8112 0dbd 74070000 		.4byte	0x774
 8113 0dc1 00       		.byte	0
 8114 0dc2 2C       		.uleb128 0x2c
 8115 0dc3 01       		.byte	0x1
 8116 0dc4 CE060000 		.4byte	.LASF209
 8117 0dc8 01       		.byte	0x1
 8118 0dc9 C511     		.2byte	0x11c5
 8119 0dcb 0F       		.byte	0xf
 8120 0dcc 01       		.byte	0x1
 8121 0dcd 83020000 		.4byte	0x283
 8122 0dd1 440E0000 		.4byte	.LFB55
 8123 0dd5 5C0E0000 		.4byte	.LFE55
 8124 0dd9 02       		.byte	0x2
 8125 0dda 7D       		.byte	0x7d
 8126 0ddb 00       		.sleb128 0
 8127 0ddc 01       		.byte	0x1
 8128 0ddd 2D       		.uleb128 0x2d
 8129 0dde 01       		.byte	0x1
 8130 0ddf 3A0A0000 		.4byte	.LASF142
 8131 0de3 01       		.byte	0x1
 8132 0de4 B511     		.2byte	0x11b5
 8133 0de6 0C       		.byte	0xc
 8134 0de7 01       		.byte	0x1
 8135 0de8 5E010000 		.4byte	0x15e
 8136 0dec 2C0E0000 		.4byte	.LFB54
 8137 0df0 440E0000 		.4byte	.LFE54
 8138 0df4 02       		.byte	0x2
 8139 0df5 7D       		.byte	0x7d
 8140 0df6 00       		.sleb128 0
 8141 0df7 01       		.byte	0x1
 8142 0df8 120E0000 		.4byte	0xe12
 8143 0dfc 1E       		.uleb128 0x1e
 8144 0dfd 12030000 		.4byte	.LASF143
 8145 0e01 01       		.byte	0x1
 8146 0e02 B711     		.2byte	0x11b7
 8147 0e04 0C       		.byte	0xc
 8148 0e05 5E010000 		.4byte	0x15e
 8149 0e09 03080000 		.4byte	.LLST177
 8150 0e0d 01080000 		.4byte	.LVUS177
 8151 0e11 00       		.byte	0
 8152 0e12 24       		.uleb128 0x24
 8153 0e13 01       		.byte	0x1
 8154 0e14 2B050000 		.4byte	.LASF145
 8155 0e18 01       		.byte	0x1
 8156 0e19 1610     		.2byte	0x1016
 8157 0e1b 07       		.byte	0x7
 8158 0e1c 01       		.byte	0x1
 8159 0e1d A80D0000 		.4byte	.LFB53
 8160 0e21 2C0E0000 		.4byte	.LFE53
 8161 0e25 16080000 		.4byte	.LLST171
 8162 0e29 01       		.byte	0x1
 8163 0e2a D40E0000 		.4byte	0xed4
 8164 0e2e 1D       		.uleb128 0x1d
 8165 0e2f 6C0C0000 		.4byte	.LASF146
 8166 0e33 01       		.byte	0x1
ARM GAS  /tmp/ccGXytas.s 			page 270


 8167 0e34 1610     		.2byte	0x1016
 8168 0e36 3F       		.byte	0x3f
 8169 0e37 8F020000 		.4byte	0x28f
 8170 0e3b 58080000 		.4byte	.LLST172
 8171 0e3f 4E080000 		.4byte	.LVUS172
 8172 0e43 1D       		.uleb128 0x1d
 8173 0e44 3E0B0000 		.4byte	.LASF147
 8174 0e48 01       		.byte	0x1
 8175 0e49 1610     		.2byte	0x1016
 8176 0e4b 5A       		.byte	0x5a
 8177 0e4c 48010000 		.4byte	0x148
 8178 0e50 A6080000 		.4byte	.LLST173
 8179 0e54 A2080000 		.4byte	.LVUS173
 8180 0e58 1E       		.uleb128 0x1e
 8181 0e59 1D100000 		.4byte	.LASF123
 8182 0e5d 01       		.byte	0x1
 8183 0e5e 1810     		.2byte	0x1018
 8184 0e60 10       		.byte	0x10
 8185 0e61 5E050000 		.4byte	0x55e
 8186 0e65 D7080000 		.4byte	.LLST174
 8187 0e69 CD080000 		.4byte	.LVUS174
 8188 0e6d 1E       		.uleb128 0x1e
 8189 0e6e B70E0000 		.4byte	.LASF148
 8190 0e72 01       		.byte	0x1
 8191 0e73 1910     		.2byte	0x1019
 8192 0e75 0E       		.byte	0xe
 8193 0e76 48010000 		.4byte	0x148
 8194 0e7a 25090000 		.4byte	.LLST175
 8195 0e7e 21090000 		.4byte	.LVUS175
 8196 0e82 1E       		.uleb128 0x1e
 8197 0e83 DC0A0000 		.4byte	.LASF149
 8198 0e87 01       		.byte	0x1
 8199 0e88 1910     		.2byte	0x1019
 8200 0e8a 25       		.byte	0x25
 8201 0e8b 48010000 		.4byte	0x148
 8202 0e8f 4A090000 		.4byte	.LLST176
 8203 0e93 44090000 		.4byte	.LVUS176
 8204 0e97 2E       		.uleb128 0x2e
 8205 0e98 BB000000 		.4byte	.LASF150
 8206 0e9c 01       		.byte	0x1
 8207 0e9d 1A10     		.2byte	0x101a
 8208 0e9f 14       		.byte	0x14
 8209 0ea0 59010000 		.4byte	0x159
 8210 0ea4 01       		.byte	0x1
 8211 0ea5 2B       		.uleb128 0x2b
 8212 0ea6 F00D0000 		.4byte	.LVL330
 8213 0eaa 44070000 		.4byte	0x744
 8214 0eae B90E0000 		.4byte	0xeb9
 8215 0eb2 21       		.uleb128 0x21
 8216 0eb3 01       		.byte	0x1
 8217 0eb4 50       		.byte	0x50
 8218 0eb5 02       		.byte	0x2
 8219 0eb6 78       		.byte	0x78
 8220 0eb7 00       		.sleb128 0
 8221 0eb8 00       		.byte	0
 8222 0eb9 2F       		.uleb128 0x2f
 8223 0eba 220E0000 		.4byte	.LVL332
ARM GAS  /tmp/ccGXytas.s 			page 271


 8224 0ebe 01       		.byte	0x1
 8225 0ebf 7F070000 		.4byte	0x77f
 8226 0ec3 21       		.uleb128 0x21
 8227 0ec4 01       		.byte	0x1
 8228 0ec5 51       		.byte	0x51
 8229 0ec6 0B       		.byte	0xb
 8230 0ec7 F3       		.byte	0xf3
 8231 0ec8 03       		.uleb128 0x3
 8232 0ec9 F5       		.byte	0xf5
 8233 0eca 00       		.uleb128 0
 8234 0ecb 25       		.uleb128 0x25
 8235 0ecc F7       		.byte	0xf7
 8236 0ecd 2C       		.uleb128 0x2c
 8237 0ece F7       		.byte	0xf7
 8238 0ecf 00       		.uleb128 0
 8239 0ed0 23       		.byte	0x23
 8240 0ed1 04       		.uleb128 0x4
 8241 0ed2 00       		.byte	0
 8242 0ed3 00       		.byte	0
 8243 0ed4 23       		.uleb128 0x23
 8244 0ed5 01       		.byte	0x1
 8245 0ed6 3E070000 		.4byte	.LASF154
 8246 0eda 01       		.byte	0x1
 8247 0edb C60F     		.2byte	0xfc6
 8248 0edd 0D       		.byte	0xd
 8249 0ede 01       		.byte	0x1
 8250 0edf 32010000 		.4byte	0x132
 8251 0ee3 380D0000 		.4byte	.LFB52
 8252 0ee7 A80D0000 		.4byte	.LFE52
 8253 0eeb 75090000 		.4byte	.LLST167
 8254 0eef 01       		.byte	0x1
 8255 0ef0 580F0000 		.4byte	0xf58
 8256 0ef4 1D       		.uleb128 0x1d
 8257 0ef5 6C0C0000 		.4byte	.LASF146
 8258 0ef9 01       		.byte	0x1
 8259 0efa C60F     		.2byte	0xfc6
 8260 0efc 39       		.byte	0x39
 8261 0efd 8F020000 		.4byte	0x28f
 8262 0f01 9F090000 		.4byte	.LLST168
 8263 0f05 95090000 		.4byte	.LVUS168
 8264 0f09 1E       		.uleb128 0x1e
 8265 0f0a 1D100000 		.4byte	.LASF123
 8266 0f0e 01       		.byte	0x1
 8267 0f0f C80F     		.2byte	0xfc8
 8268 0f11 10       		.byte	0x10
 8269 0f12 5E050000 		.4byte	0x55e
 8270 0f16 F3090000 		.4byte	.LLST169
 8271 0f1a E9090000 		.4byte	.LVUS169
 8272 0f1e 1E       		.uleb128 0x1e
 8273 0f1f 230D0000 		.4byte	.LASF124
 8274 0f23 01       		.byte	0x1
 8275 0f24 C90F     		.2byte	0xfc9
 8276 0f26 0D       		.byte	0xd
 8277 0f27 32010000 		.4byte	0x132
 8278 0f2b 430A0000 		.4byte	.LLST170
 8279 0f2f 3D0A0000 		.4byte	.LVUS170
 8280 0f33 2B       		.uleb128 0x2b
ARM GAS  /tmp/ccGXytas.s 			page 272


 8281 0f34 5C0D0000 		.4byte	.LVL320
 8282 0f38 44070000 		.4byte	0x744
 8283 0f3c 470F0000 		.4byte	0xf47
 8284 0f40 21       		.uleb128 0x21
 8285 0f41 01       		.byte	0x1
 8286 0f42 50       		.byte	0x50
 8287 0f43 02       		.byte	0x2
 8288 0f44 75       		.byte	0x75
 8289 0f45 00       		.sleb128 0
 8290 0f46 00       		.byte	0
 8291 0f47 30       		.uleb128 0x30
 8292 0f48 9C0D0000 		.4byte	.LVL322
 8293 0f4c 7F070000 		.4byte	0x77f
 8294 0f50 21       		.uleb128 0x21
 8295 0f51 01       		.byte	0x1
 8296 0f52 51       		.byte	0x51
 8297 0f53 02       		.byte	0x2
 8298 0f54 75       		.byte	0x75
 8299 0f55 00       		.sleb128 0
 8300 0f56 00       		.byte	0
 8301 0f57 00       		.byte	0
 8302 0f58 23       		.uleb128 0x23
 8303 0f59 01       		.byte	0x1
 8304 0f5a 750D0000 		.4byte	.LASF155
 8305 0f5e 01       		.byte	0x1
 8306 0f5f 6F0F     		.2byte	0xf6f
 8307 0f61 0D       		.byte	0xd
 8308 0f62 01       		.byte	0x1
 8309 0f63 32010000 		.4byte	0x132
 8310 0f67 9C0C0000 		.4byte	.LFB51
 8311 0f6b 380D0000 		.4byte	.LFE51
 8312 0f6f 6F0A0000 		.4byte	.LLST164
 8313 0f73 01       		.byte	0x1
 8314 0f74 D50F0000 		.4byte	0xfd5
 8315 0f78 1D       		.uleb128 0x1d
 8316 0f79 6C0C0000 		.4byte	.LASF146
 8317 0f7d 01       		.byte	0x1
 8318 0f7e 6F0F     		.2byte	0xf6f
 8319 0f80 36       		.byte	0x36
 8320 0f81 8F020000 		.4byte	0x28f
 8321 0f85 970A0000 		.4byte	.LLST165
 8322 0f89 8F0A0000 		.4byte	.LVUS165
 8323 0f8d 1E       		.uleb128 0x1e
 8324 0f8e 8A0D0000 		.4byte	.LASF156
 8325 0f92 01       		.byte	0x1
 8326 0f93 710F     		.2byte	0xf71
 8327 0f95 10       		.byte	0x10
 8328 0f96 5E050000 		.4byte	0x55e
 8329 0f9a D30A0000 		.4byte	.LLST166
 8330 0f9e CB0A0000 		.4byte	.LVUS166
 8331 0fa2 2E       		.uleb128 0x2e
 8332 0fa3 230D0000 		.4byte	.LASF124
 8333 0fa7 01       		.byte	0x1
 8334 0fa8 720F     		.2byte	0xf72
 8335 0faa 0D       		.byte	0xd
 8336 0fab 32010000 		.4byte	0x132
 8337 0faf 00       		.byte	0
ARM GAS  /tmp/ccGXytas.s 			page 273


 8338 0fb0 2B       		.uleb128 0x2b
 8339 0fb1 DC0C0000 		.4byte	.LVL312
 8340 0fb5 44070000 		.4byte	0x744
 8341 0fb9 C40F0000 		.4byte	0xfc4
 8342 0fbd 21       		.uleb128 0x21
 8343 0fbe 01       		.byte	0x1
 8344 0fbf 50       		.byte	0x50
 8345 0fc0 02       		.byte	0x2
 8346 0fc1 78       		.byte	0x78
 8347 0fc2 00       		.sleb128 0
 8348 0fc3 00       		.byte	0
 8349 0fc4 30       		.uleb128 0x30
 8350 0fc5 100D0000 		.4byte	.LVL313
 8351 0fc9 7F070000 		.4byte	0x77f
 8352 0fcd 21       		.uleb128 0x21
 8353 0fce 01       		.byte	0x1
 8354 0fcf 51       		.byte	0x51
 8355 0fd0 02       		.byte	0x2
 8356 0fd1 78       		.byte	0x78
 8357 0fd2 00       		.sleb128 0
 8358 0fd3 00       		.byte	0
 8359 0fd4 00       		.byte	0
 8360 0fd5 2D       		.uleb128 0x2d
 8361 0fd6 01       		.byte	0x1
 8362 0fd7 F9000000 		.4byte	.LASF157
 8363 0fdb 01       		.byte	0x1
 8364 0fdc 530F     		.2byte	0xf53
 8365 0fde 0D       		.byte	0xd
 8366 0fdf 01       		.byte	0x1
 8367 0fe0 32010000 		.4byte	0x132
 8368 0fe4 7C0C0000 		.4byte	.LFB50
 8369 0fe8 9C0C0000 		.4byte	.LFE50
 8370 0fec 02       		.byte	0x2
 8371 0fed 7D       		.byte	0x7d
 8372 0fee 00       		.sleb128 0
 8373 0fef 01       		.byte	0x1
 8374 0ff0 03100000 		.4byte	0x1003
 8375 0ff4 2E       		.uleb128 0x2e
 8376 0ff5 230D0000 		.4byte	.LASF124
 8377 0ff9 01       		.byte	0x1
 8378 0ffa 550F     		.2byte	0xf55
 8379 0ffc 0D       		.byte	0xd
 8380 0ffd 32010000 		.4byte	0x132
 8381 1001 01       		.byte	0x1
 8382 1002 00       		.byte	0
 8383 1003 2D       		.uleb128 0x2d
 8384 1004 01       		.byte	0x1
 8385 1005 1B0F0000 		.4byte	.LASF158
 8386 1009 01       		.byte	0x1
 8387 100a 420F     		.2byte	0xf42
 8388 100c 0F       		.byte	0xf
 8389 100d 01       		.byte	0x1
 8390 100e 83020000 		.4byte	0x283
 8391 1012 700C0000 		.4byte	.LFB49
 8392 1016 7C0C0000 		.4byte	.LFE49
 8393 101a 02       		.byte	0x2
 8394 101b 7D       		.byte	0x7d
ARM GAS  /tmp/ccGXytas.s 			page 274


 8395 101c 00       		.sleb128 0
 8396 101d 01       		.byte	0x1
 8397 101e 38100000 		.4byte	0x1038
 8398 1022 1E       		.uleb128 0x1e
 8399 1023 230D0000 		.4byte	.LASF124
 8400 1027 01       		.byte	0x1
 8401 1028 440F     		.2byte	0xf44
 8402 102a 0F       		.byte	0xf
 8403 102b 83020000 		.4byte	0x283
 8404 102f 090B0000 		.4byte	.LLST163
 8405 1033 070B0000 		.4byte	.LVUS163
 8406 1037 00       		.byte	0
 8407 1038 31       		.uleb128 0x31
 8408 1039 3C090000 		.4byte	.LASF159
 8409 103d 01       		.byte	0x1
 8410 103e 280F     		.2byte	0xf28
 8411 1040 0D       		.byte	0xd
 8412 1041 01       		.byte	0x1
 8413 1042 01       		.byte	0x1
 8414 1043 55100000 		.4byte	0x1055
 8415 1047 25       		.uleb128 0x25
 8416 1048 1D100000 		.4byte	.LASF123
 8417 104c 01       		.byte	0x1
 8418 104d 2A0F     		.2byte	0xf2a
 8419 104f 08       		.byte	0x8
 8420 1050 53050000 		.4byte	0x553
 8421 1054 00       		.byte	0
 8422 1055 31       		.uleb128 0x31
 8423 1056 E80E0000 		.4byte	.LASF160
 8424 105a 01       		.byte	0x1
 8425 105b F20E     		.2byte	0xef2
 8426 105d 0E       		.byte	0xe
 8427 105e 01       		.byte	0x1
 8428 105f 01       		.byte	0x1
 8429 1060 72100000 		.4byte	0x1072
 8430 1064 32       		.uleb128 0x32
 8431 1065 1D100000 		.4byte	.LASF123
 8432 1069 01       		.byte	0x1
 8433 106a F20E     		.2byte	0xef2
 8434 106c 23       		.byte	0x23
 8435 106d 53050000 		.4byte	0x553
 8436 1071 00       		.byte	0
 8437 1072 33       		.uleb128 0x33
 8438 1073 4C0F0000 		.4byte	.LASF163
 8439 1077 01       		.byte	0x1
 8440 1078 9A0E     		.2byte	0xe9a
 8441 107a 20       		.byte	0x20
 8442 107b 01       		.byte	0x1
 8443 107c DC000000 		.4byte	0xdc
 8444 1080 01       		.byte	0x1
 8445 1081 A0100000 		.4byte	0x10a0
 8446 1085 32       		.uleb128 0x32
 8447 1086 4A020000 		.4byte	.LASF161
 8448 108a 01       		.byte	0x1
 8449 108b 9A0E     		.2byte	0xe9a
 8450 108d 4C       		.byte	0x4c
 8451 108e A0100000 		.4byte	0x10a0
ARM GAS  /tmp/ccGXytas.s 			page 275


 8452 1092 25       		.uleb128 0x25
 8453 1093 D3090000 		.4byte	.LASF162
 8454 1097 01       		.byte	0x1
 8455 1098 9C0E     		.2byte	0xe9c
 8456 109a 0B       		.byte	0xb
 8457 109b ED000000 		.4byte	0xed
 8458 109f 00       		.byte	0
 8459 10a0 07       		.uleb128 0x7
 8460 10a1 04       		.byte	0x4
 8461 10a2 D7000000 		.4byte	0xd7
 8462 10a6 33       		.uleb128 0x33
 8463 10a7 48000000 		.4byte	.LASF164
 8464 10ab 01       		.byte	0x1
 8465 10ac 790E     		.2byte	0xe79
 8466 10ae 15       		.byte	0x15
 8467 10af 01       		.byte	0x1
 8468 10b0 48010000 		.4byte	0x148
 8469 10b4 01       		.byte	0x1
 8470 10b5 2A110000 		.4byte	0x112a
 8471 10b9 32       		.uleb128 0x32
 8472 10ba 630D0000 		.4byte	.LASF165
 8473 10be 01       		.byte	0x1
 8474 10bf 790E     		.2byte	0xe79
 8475 10c1 41       		.byte	0x41
 8476 10c2 2A110000 		.4byte	0x112a
 8477 10c6 32       		.uleb128 0x32
 8478 10c7 63100000 		.4byte	.LASF166
 8479 10cb 01       		.byte	0x1
 8480 10cc 790E     		.2byte	0xe79
 8481 10ce 5C       		.byte	0x5c
 8482 10cf BF050000 		.4byte	0x5bf
 8483 10d3 32       		.uleb128 0x32
 8484 10d4 5C0D0000 		.4byte	.LASF167
 8485 10d8 01       		.byte	0x1
 8486 10d9 790E     		.2byte	0xe79
 8487 10db 6F       		.byte	0x6f
 8488 10dc 9A030000 		.4byte	0x39a
 8489 10e0 25       		.uleb128 0x25
 8490 10e1 73050000 		.4byte	.LASF168
 8491 10e5 01       		.byte	0x1
 8492 10e6 7B0E     		.2byte	0xe7b
 8493 10e8 1D       		.byte	0x1d
 8494 10e9 53050000 		.4byte	0x553
 8495 10ed 25       		.uleb128 0x25
 8496 10ee 410F0000 		.4byte	.LASF169
 8497 10f2 01       		.byte	0x1
 8498 10f3 7B0E     		.2byte	0xe7b
 8499 10f5 29       		.byte	0x29
 8500 10f6 53050000 		.4byte	0x553
 8501 10fa 25       		.uleb128 0x25
 8502 10fb 330A0000 		.4byte	.LASF170
 8503 10ff 01       		.byte	0x1
 8504 1100 7C0E     		.2byte	0xe7c
 8505 1102 0E       		.byte	0xe
 8506 1103 48010000 		.4byte	0x148
 8507 1107 34       		.uleb128 0x34
 8508 1108 1A110000 		.4byte	0x111a
ARM GAS  /tmp/ccGXytas.s 			page 276


 8509 110c 25       		.uleb128 0x25
 8510 110d 84000000 		.4byte	.LASF171
 8511 1111 01       		.byte	0x1
 8512 1112 800E     		.2byte	0xe80
 8513 1114 04       		.byte	0x4
 8514 1115 CA050000 		.4byte	0x5ca
 8515 1119 00       		.byte	0
 8516 111a 35       		.uleb128 0x35
 8517 111b 25       		.uleb128 0x25
 8518 111c 84000000 		.4byte	.LASF171
 8519 1120 01       		.byte	0x1
 8520 1121 880E     		.2byte	0xe88
 8521 1123 05       		.byte	0x5
 8522 1124 CA050000 		.4byte	0x5ca
 8523 1128 00       		.byte	0
 8524 1129 00       		.byte	0
 8525 112a 07       		.uleb128 0x7
 8526 112b 04       		.byte	0x4
 8527 112c FE040000 		.4byte	0x4fe
 8528 1130 06       		.uleb128 0x6
 8529 1131 2A110000 		.4byte	0x112a
 8530 1135 24       		.uleb128 0x24
 8531 1136 01       		.byte	0x1
 8532 1137 820C0000 		.4byte	.LASF172
 8533 113b 01       		.byte	0x1
 8534 113c 190E     		.2byte	0xe19
 8535 113e 07       		.byte	0x7
 8536 113f 01       		.byte	0x1
 8537 1140 F80A0000 		.4byte	.LFB44
 8538 1144 700B0000 		.4byte	.LFE44
 8539 1148 1C0B0000 		.4byte	.LLST137
 8540 114c 01       		.byte	0x1
 8541 114d 14120000 		.4byte	0x1214
 8542 1151 1D       		.uleb128 0x1d
 8543 1152 9D0A0000 		.4byte	.LASF122
 8544 1156 01       		.byte	0x1
 8545 1157 190E     		.2byte	0xe19
 8546 1159 22       		.byte	0x22
 8547 115a 83020000 		.4byte	0x283
 8548 115e 3E0B0000 		.4byte	.LLST138
 8549 1162 3C0B0000 		.4byte	.LVUS138
 8550 1166 1D       		.uleb128 0x1d
 8551 1167 7F070000 		.4byte	.LASF173
 8552 116b 01       		.byte	0x1
 8553 116c 190E     		.2byte	0xe19
 8554 116e 37       		.byte	0x37
 8555 116f 2A110000 		.4byte	0x112a
 8556 1173 590B0000 		.4byte	.LLST139
 8557 1177 510B0000 		.4byte	.LVUS139
 8558 117b 1D       		.uleb128 0x1d
 8559 117c DB050000 		.4byte	.LASF174
 8560 1180 01       		.byte	0x1
 8561 1181 190E     		.2byte	0xe19
 8562 1183 50       		.byte	0x50
 8563 1184 32010000 		.4byte	0x132
 8564 1188 950B0000 		.4byte	.LLST140
 8565 118c 8D0B0000 		.4byte	.LVUS140
ARM GAS  /tmp/ccGXytas.s 			page 277


 8566 1190 1D       		.uleb128 0x1d
 8567 1191 5C0D0000 		.4byte	.LASF167
 8568 1195 01       		.byte	0x1
 8569 1196 190E     		.2byte	0xe19
 8570 1198 6F       		.byte	0x6f
 8571 1199 9A030000 		.4byte	0x39a
 8572 119d DE0B0000 		.4byte	.LLST141
 8573 11a1 D20B0000 		.4byte	.LVUS141
 8574 11a5 1E       		.uleb128 0x1e
 8575 11a6 1D100000 		.4byte	.LASF123
 8576 11aa 01       		.byte	0x1
 8577 11ab 1B0E     		.2byte	0xe1b
 8578 11ad 09       		.byte	0x9
 8579 11ae 53050000 		.4byte	0x553
 8580 11b2 450C0000 		.4byte	.LLST142
 8581 11b6 430C0000 		.4byte	.LVUS142
 8582 11ba 26       		.uleb128 0x26
 8583 11bb 72100000 		.4byte	0x1072
 8584 11bf 380B0000 		.4byte	.LBI140
 8585 11c3 00       		.byte	.LVU1156
 8586 11c4 70010000 		.4byte	.Ldebug_ranges0+0x170
 8587 11c8 01       		.byte	0x1
 8588 11c9 6A0E     		.2byte	0xe6a
 8589 11cb 2A       		.byte	0x2a
 8590 11cc F1110000 		.4byte	0x11f1
 8591 11d0 36       		.uleb128 0x36
 8592 11d1 85100000 		.4byte	0x1085
 8593 11d5 5E0C0000 		.4byte	.LLST143
 8594 11d9 580C0000 		.4byte	.LVUS143
 8595 11dd 27       		.uleb128 0x27
 8596 11de 70010000 		.4byte	.Ldebug_ranges0+0x170
 8597 11e2 37       		.uleb128 0x37
 8598 11e3 92100000 		.4byte	0x1092
 8599 11e7 990C0000 		.4byte	.LLST144
 8600 11eb 910C0000 		.4byte	.LVUS144
 8601 11ef 00       		.byte	0
 8602 11f0 00       		.byte	0
 8603 11f1 1F       		.uleb128 0x1f
 8604 11f2 500B0000 		.4byte	.LVL278
 8605 11f6 D01B0000 		.4byte	0x1bd0
 8606 11fa 1F       		.uleb128 0x1f
 8607 11fb 5C0B0000 		.4byte	.LVL279
 8608 11ff 021B0000 		.4byte	0x1b02
 8609 1203 30       		.uleb128 0x30
 8610 1204 640B0000 		.4byte	.LVL281
 8611 1208 CA210000 		.4byte	0x21ca
 8612 120c 21       		.uleb128 0x21
 8613 120d 01       		.byte	0x1
 8614 120e 50       		.byte	0x50
 8615 120f 02       		.byte	0x2
 8616 1210 75       		.byte	0x75
 8617 1211 00       		.sleb128 0
 8618 1212 00       		.byte	0
 8619 1213 00       		.byte	0
 8620 1214 31       		.uleb128 0x31
 8621 1215 88100000 		.4byte	.LASF175
 8622 1219 01       		.byte	0x1
ARM GAS  /tmp/ccGXytas.s 			page 278


 8623 121a FA0D     		.2byte	0xdfa
 8624 121c 0D       		.byte	0xd
 8625 121d 01       		.byte	0x1
 8626 121e 01       		.byte	0x1
 8627 121f 33120000 		.4byte	0x1233
 8628 1223 35       		.uleb128 0x35
 8629 1224 25       		.uleb128 0x25
 8630 1225 1D100000 		.4byte	.LASF123
 8631 1229 01       		.byte	0x1
 8632 122a 010E     		.2byte	0xe01
 8633 122c 0A       		.byte	0xa
 8634 122d 53050000 		.4byte	0x553
 8635 1231 00       		.byte	0
 8636 1232 00       		.byte	0
 8637 1233 31       		.uleb128 0x31
 8638 1234 E5040000 		.4byte	.LASF176
 8639 1238 01       		.byte	0x1
 8640 1239 DA0D     		.2byte	0xdda
 8641 123b 0D       		.byte	0xd
 8642 123c 01       		.byte	0x1
 8643 123d 01       		.byte	0x1
 8644 123e 50120000 		.4byte	0x1250
 8645 1242 25       		.uleb128 0x25
 8646 1243 79000000 		.4byte	.LASF42
 8647 1247 01       		.byte	0x1
 8648 1248 DC0D     		.2byte	0xddc
 8649 124a 0D       		.byte	0xd
 8650 124b 48010000 		.4byte	0x148
 8651 124f 00       		.byte	0
 8652 1250 1C       		.uleb128 0x1c
 8653 1251 DC070000 		.4byte	.LASF178
 8654 1255 01       		.byte	0x1
 8655 1256 060D     		.2byte	0xd06
 8656 1258 08       		.byte	0x8
 8657 1259 01       		.byte	0x1
 8658 125a 8C000000 		.4byte	.LFB41
 8659 125e E0000000 		.4byte	.LFE41
 8660 1262 D20C0000 		.4byte	.LLST6
 8661 1266 01       		.byte	0x1
 8662 1267 0D130000 		.4byte	0x130d
 8663 126b 1D       		.uleb128 0x1d
 8664 126c A80B0000 		.4byte	.LASF179
 8665 1270 01       		.byte	0x1
 8666 1271 060D     		.2byte	0xd06
 8667 1273 08       		.byte	0x8
 8668 1274 A2000000 		.4byte	0xa2
 8669 1278 F60C0000 		.4byte	.LLST7
 8670 127c F20C0000 		.4byte	.LVUS7
 8671 1280 38       		.uleb128 0x38
 8672 1281 14120000 		.4byte	0x1214
 8673 1285 18000000 		.4byte	.Ldebug_ranges0+0x18
 8674 1289 01       		.byte	0x1
 8675 128a 170D     		.2byte	0xd17
 8676 128c 03       		.byte	0x3
 8677 128d 39       		.uleb128 0x39
 8678 128e 23120000 		.4byte	0x1223
 8679 1292 18000000 		.4byte	.Ldebug_ranges0+0x18
ARM GAS  /tmp/ccGXytas.s 			page 279


 8680 1296 37       		.uleb128 0x37
 8681 1297 24120000 		.4byte	0x1224
 8682 129b 1F0D0000 		.4byte	.LLST8
 8683 129f 1D0D0000 		.4byte	.LVUS8
 8684 12a3 29       		.uleb128 0x29
 8685 12a4 55100000 		.4byte	0x1055
 8686 12a8 CE000000 		.4byte	.LBI45
 8687 12ac 01       		.byte	.LVU80
 8688 12ad CE000000 		.4byte	.LBB45
 8689 12b1 E0000000 		.4byte	.LBE45
 8690 12b5 01       		.byte	0x1
 8691 12b6 100E     		.2byte	0xe10
 8692 12b8 04       		.byte	0x4
 8693 12b9 E4120000 		.4byte	0x12e4
 8694 12bd 36       		.uleb128 0x36
 8695 12be 64100000 		.4byte	0x1064
 8696 12c2 340D0000 		.4byte	.LLST9
 8697 12c6 320D0000 		.4byte	.LVUS9
 8698 12ca 1F       		.uleb128 0x1f
 8699 12cb D4000000 		.4byte	.LVL21
 8700 12cf 01080000 		.4byte	0x801
 8701 12d3 30       		.uleb128 0x30
 8702 12d4 DA000000 		.4byte	.LVL22
 8703 12d8 01080000 		.4byte	0x801
 8704 12dc 21       		.uleb128 0x21
 8705 12dd 01       		.byte	0x1
 8706 12de 50       		.byte	0x50
 8707 12df 02       		.byte	0x2
 8708 12e0 75       		.byte	0x75
 8709 12e1 00       		.sleb128 0
 8710 12e2 00       		.byte	0
 8711 12e3 00       		.byte	0
 8712 12e4 1F       		.uleb128 0x1f
 8713 12e5 B4000000 		.4byte	.LVL17
 8714 12e9 9A070000 		.4byte	0x79a
 8715 12ed 2B       		.uleb128 0x2b
 8716 12ee BE000000 		.4byte	.LVL19
 8717 12f2 44070000 		.4byte	0x744
 8718 12f6 01130000 		.4byte	0x1301
 8719 12fa 21       		.uleb128 0x21
 8720 12fb 01       		.byte	0x1
 8721 12fc 50       		.byte	0x50
 8722 12fd 02       		.byte	0x2
 8723 12fe 75       		.byte	0x75
 8724 12ff 04       		.sleb128 4
 8725 1300 00       		.byte	0
 8726 1301 1F       		.uleb128 0x1f
 8727 1302 CE000000 		.4byte	.LVL20
 8728 1306 74070000 		.4byte	0x774
 8729 130a 00       		.byte	0
 8730 130b 00       		.byte	0
 8731 130c 00       		.byte	0
 8732 130d 3A       		.uleb128 0x3a
 8733 130e 01       		.byte	0x1
 8734 130f 490C0000 		.4byte	.LASF180
 8735 1313 01       		.byte	0x1
 8736 1314 EE0C     		.2byte	0xcee
ARM GAS  /tmp/ccGXytas.s 			page 280


 8737 1316 07       		.byte	0x7
 8738 1317 01       		.byte	0x1
 8739 1318 F20A0000 		.4byte	.LFB40
 8740 131c F80A0000 		.4byte	.LFE40
 8741 1320 02       		.byte	0x2
 8742 1321 7D       		.byte	0x7d
 8743 1322 00       		.sleb128 0
 8744 1323 01       		.byte	0x1
 8745 1324 5C130000 		.4byte	0x135c
 8746 1328 3B       		.uleb128 0x3b
 8747 1329 9D0A0000 		.4byte	.LASF122
 8748 132d 01       		.byte	0x1
 8749 132e EE0C     		.2byte	0xcee
 8750 1330 28       		.byte	0x28
 8751 1331 83020000 		.4byte	0x283
 8752 1335 01       		.byte	0x1
 8753 1336 50       		.byte	0x50
 8754 1337 3B       		.uleb128 0x3b
 8755 1338 60020000 		.4byte	.LASF181
 8756 133c 01       		.byte	0x1
 8757 133d EE0C     		.2byte	0xcee
 8758 133f 41       		.byte	0x41
 8759 1340 59010000 		.4byte	0x159
 8760 1344 01       		.byte	0x1
 8761 1345 51       		.byte	0x51
 8762 1346 1E       		.uleb128 0x1e
 8763 1347 1D100000 		.4byte	.LASF123
 8764 134b 01       		.byte	0x1
 8765 134c F00C     		.2byte	0xcf0
 8766 134e 0A       		.byte	0xa
 8767 134f 53050000 		.4byte	0x553
 8768 1353 490D0000 		.4byte	.LLST136
 8769 1357 470D0000 		.4byte	.LVUS136
 8770 135b 00       		.byte	0
 8771 135c 2D       		.uleb128 0x2d
 8772 135d 01       		.byte	0x1
 8773 135e 670F0000 		.4byte	.LASF182
 8774 1362 01       		.byte	0x1
 8775 1363 D70C     		.2byte	0xcd7
 8776 1365 0E       		.byte	0xe
 8777 1366 01       		.byte	0x1
 8778 1367 48010000 		.4byte	0x148
 8779 136b EC0A0000 		.4byte	.LFB39
 8780 136f F20A0000 		.4byte	.LFE39
 8781 1373 02       		.byte	0x2
 8782 1374 7D       		.byte	0x7d
 8783 1375 00       		.sleb128 0
 8784 1376 01       		.byte	0x1
 8785 1377 B3130000 		.4byte	0x13b3
 8786 137b 1D       		.uleb128 0x1d
 8787 137c 9D0A0000 		.4byte	.LASF122
 8788 1380 01       		.byte	0x1
 8789 1381 D70C     		.2byte	0xcd7
 8790 1383 30       		.byte	0x30
 8791 1384 83020000 		.4byte	0x283
 8792 1388 600D0000 		.4byte	.LLST134
 8793 138c 5C0D0000 		.4byte	.LVUS134
ARM GAS  /tmp/ccGXytas.s 			page 281


 8794 1390 25       		.uleb128 0x25
 8795 1391 12030000 		.4byte	.LASF143
 8796 1395 01       		.byte	0x1
 8797 1396 D90C     		.2byte	0xcd9
 8798 1398 0E       		.byte	0xe
 8799 1399 48010000 		.4byte	0x148
 8800 139d 1E       		.uleb128 0x1e
 8801 139e 1D100000 		.4byte	.LASF123
 8802 13a2 01       		.byte	0x1
 8803 13a3 DA0C     		.2byte	0xcda
 8804 13a5 0F       		.byte	0xf
 8805 13a6 B3130000 		.4byte	0x13b3
 8806 13aa 890D0000 		.4byte	.LLST135
 8807 13ae 870D0000 		.4byte	.LVUS135
 8808 13b2 00       		.byte	0
 8809 13b3 07       		.uleb128 0x7
 8810 13b4 04       		.byte	0x4
 8811 13b5 3A050000 		.4byte	0x53a
 8812 13b9 06       		.uleb128 0x6
 8813 13ba B3130000 		.4byte	0x13b3
 8814 13be 3C       		.uleb128 0x3c
 8815 13bf 01       		.byte	0x1
 8816 13c0 2B0D0000 		.4byte	.LASF217
 8817 13c4 01       		.byte	0x1
 8818 13c5 CF0C     		.2byte	0xccf
 8819 13c7 06       		.byte	0x6
 8820 13c8 01       		.byte	0x1
 8821 13c9 DC0A0000 		.4byte	.LFB38
 8822 13cd EC0A0000 		.4byte	.LFE38
 8823 13d1 02       		.byte	0x2
 8824 13d2 7D       		.byte	0x7d
 8825 13d3 00       		.sleb128 0
 8826 13d4 01       		.byte	0x1
 8827 13d5 23       		.uleb128 0x23
 8828 13d6 01       		.byte	0x1
 8829 13d7 A60C0000 		.4byte	.LASF183
 8830 13db 01       		.byte	0x1
 8831 13dc 900C     		.2byte	0xc90
 8832 13de 0C       		.byte	0xc
 8833 13df 01       		.byte	0x1
 8834 13e0 32010000 		.4byte	0x132
 8835 13e4 900A0000 		.4byte	.LFB37
 8836 13e8 DC0A0000 		.4byte	.LFE37
 8837 13ec 9C0D0000 		.4byte	.LLST128
 8838 13f0 01       		.byte	0x1
 8839 13f1 8B140000 		.4byte	0x148b
 8840 13f5 1D       		.uleb128 0x1d
 8841 13f6 B0090000 		.4byte	.LASF184
 8842 13fa 01       		.byte	0x1
 8843 13fb 900C     		.2byte	0xc90
 8844 13fd 34       		.byte	0x34
 8845 13fe 91140000 		.4byte	0x1491
 8846 1402 C00D0000 		.4byte	.LLST129
 8847 1406 BC0D0000 		.4byte	.LVUS129
 8848 140a 1D       		.uleb128 0x1d
 8849 140b 640E0000 		.4byte	.LASF185
 8850 140f 01       		.byte	0x1
ARM GAS  /tmp/ccGXytas.s 			page 282


 8851 1410 900C     		.2byte	0xc90
 8852 1412 52       		.byte	0x52
 8853 1413 9C140000 		.4byte	0x149c
 8854 1417 E80D0000 		.4byte	.LLST130
 8855 141b DE0D0000 		.4byte	.LVUS130
 8856 141f 1E       		.uleb128 0x1e
 8857 1420 230D0000 		.4byte	.LASF124
 8858 1424 01       		.byte	0x1
 8859 1425 920C     		.2byte	0xc92
 8860 1427 0C       		.byte	0xc
 8861 1428 32010000 		.4byte	0x132
 8862 142c 3B0E0000 		.4byte	.LLST131
 8863 1430 390E0000 		.4byte	.LVUS131
 8864 1434 3D       		.uleb128 0x3d
 8865 1435 58010000 		.4byte	.Ldebug_ranges0+0x158
 8866 1439 78140000 		.4byte	0x1478
 8867 143d 1E       		.uleb128 0x1e
 8868 143e 69060000 		.4byte	.LASF121
 8869 1442 01       		.byte	0x1
 8870 1443 9A0C     		.2byte	0xc9a
 8871 1445 14       		.byte	0x14
 8872 1446 6F010000 		.4byte	0x16f
 8873 144a 520E0000 		.4byte	.LLST132
 8874 144e 4E0E0000 		.4byte	.LVUS132
 8875 1452 1E       		.uleb128 0x1e
 8876 1453 E7030000 		.4byte	.LASF186
 8877 1457 01       		.byte	0x1
 8878 1458 9B0C     		.2byte	0xc9b
 8879 145a 14       		.byte	0x14
 8880 145b 6F010000 		.4byte	0x16f
 8881 145f 760E0000 		.4byte	.LLST133
 8882 1463 700E0000 		.4byte	.LVUS133
 8883 1467 30       		.uleb128 0x30
 8884 1468 C60A0000 		.4byte	.LVL257
 8885 146c A1140000 		.4byte	0x14a1
 8886 1470 21       		.uleb128 0x21
 8887 1471 01       		.byte	0x1
 8888 1472 50       		.byte	0x50
 8889 1473 02       		.byte	0x2
 8890 1474 70       		.byte	0x70
 8891 1475 00       		.sleb128 0
 8892 1476 00       		.byte	0
 8893 1477 00       		.byte	0
 8894 1478 1F       		.uleb128 0x1f
 8895 1479 9A0A0000 		.4byte	.LVL254
 8896 147d 9A070000 		.4byte	0x79a
 8897 1481 1F       		.uleb128 0x1f
 8898 1482 CC0A0000 		.4byte	.LVL259
 8899 1486 74070000 		.4byte	0x774
 8900 148a 00       		.byte	0
 8901 148b 07       		.uleb128 0x7
 8902 148c 04       		.byte	0x4
 8903 148d 0B040000 		.4byte	0x40b
 8904 1491 06       		.uleb128 0x6
 8905 1492 8B140000 		.4byte	0x148b
 8906 1496 07       		.uleb128 0x7
 8907 1497 04       		.byte	0x4
ARM GAS  /tmp/ccGXytas.s 			page 283


 8908 1498 5E010000 		.4byte	0x15e
 8909 149c 06       		.uleb128 0x6
 8910 149d 96140000 		.4byte	0x1496
 8911 14a1 3A       		.uleb128 0x3a
 8912 14a2 01       		.byte	0x1
 8913 14a3 E5090000 		.4byte	.LASF187
 8914 14a7 01       		.byte	0x1
 8915 14a8 880C     		.2byte	0xc88
 8916 14aa 06       		.byte	0x6
 8917 14ab 01       		.byte	0x1
 8918 14ac 7C0A0000 		.4byte	.LFB36
 8919 14b0 900A0000 		.4byte	.LFE36
 8920 14b4 02       		.byte	0x2
 8921 14b5 7D       		.byte	0x7d
 8922 14b6 00       		.sleb128 0
 8923 14b7 01       		.byte	0x1
 8924 14b8 CC140000 		.4byte	0x14cc
 8925 14bc 3B       		.uleb128 0x3b
 8926 14bd B0090000 		.4byte	.LASF184
 8927 14c1 01       		.byte	0x1
 8928 14c2 880C     		.2byte	0xc88
 8929 14c4 36       		.byte	0x36
 8930 14c5 91140000 		.4byte	0x1491
 8931 14c9 01       		.byte	0x1
 8932 14ca 50       		.byte	0x50
 8933 14cb 00       		.byte	0
 8934 14cc 24       		.uleb128 0x24
 8935 14cd 01       		.byte	0x1
 8936 14ce 12020000 		.4byte	.LASF188
 8937 14d2 01       		.byte	0x1
 8938 14d3 7C0C     		.2byte	0xc7c
 8939 14d5 06       		.byte	0x6
 8940 14d6 01       		.byte	0x1
 8941 14d7 5C0A0000 		.4byte	.LFB35
 8942 14db 7C0A0000 		.4byte	.LFE35
 8943 14df AF0E0000 		.4byte	.LLST126
 8944 14e3 01       		.byte	0x1
 8945 14e4 11150000 		.4byte	0x1511
 8946 14e8 1D       		.uleb128 0x1d
 8947 14e9 B0090000 		.4byte	.LASF184
 8948 14ed 01       		.byte	0x1
 8949 14ee 7C0C     		.2byte	0xc7c
 8950 14f0 2E       		.byte	0x2e
 8951 14f1 91140000 		.4byte	0x1491
 8952 14f5 E10E0000 		.4byte	.LLST127
 8953 14f9 DB0E0000 		.4byte	.LVUS127
 8954 14fd 1F       		.uleb128 0x1f
 8955 14fe 640A0000 		.4byte	.LVL249
 8956 1502 9A070000 		.4byte	0x79a
 8957 1506 22       		.uleb128 0x22
 8958 1507 780A0000 		.4byte	.LVL251
 8959 150b 01       		.byte	0x1
 8960 150c 74070000 		.4byte	0x774
 8961 1510 00       		.byte	0
 8962 1511 24       		.uleb128 0x24
 8963 1512 01       		.byte	0x1
 8964 1513 0E070000 		.4byte	.LASF189
ARM GAS  /tmp/ccGXytas.s 			page 284


 8965 1517 01       		.byte	0x1
 8966 1518 5A0C     		.2byte	0xc5a
 8967 151a 06       		.byte	0x6
 8968 151b 01       		.byte	0x1
 8969 151c 100A0000 		.4byte	.LFB34
 8970 1520 5C0A0000 		.4byte	.LFE34
 8971 1524 130F0000 		.4byte	.LLST122
 8972 1528 01       		.byte	0x1
 8973 1529 AC150000 		.4byte	0x15ac
 8974 152d 1D       		.uleb128 0x1d
 8975 152e 6A100000 		.4byte	.LASF190
 8976 1532 01       		.byte	0x1
 8977 1533 5A0C     		.2byte	0xc5a
 8978 1535 36       		.byte	0x36
 8979 1536 67020000 		.4byte	0x267
 8980 153a 370F0000 		.4byte	.LLST123
 8981 153e 330F0000 		.4byte	.LVUS123
 8982 1542 1D       		.uleb128 0x1d
 8983 1543 B50B0000 		.4byte	.LASF23
 8984 1547 01       		.byte	0x1
 8985 1548 5A0C     		.2byte	0xc5a
 8986 154a 58       		.byte	0x58
 8987 154b 6F010000 		.4byte	0x16f
 8988 154f 620F0000 		.4byte	.LLST124
 8989 1553 5E0F0000 		.4byte	.LVUS124
 8990 1557 1E       		.uleb128 0x1e
 8991 1558 B9030000 		.4byte	.LASF191
 8992 155c 01       		.byte	0x1
 8993 155d 5C0C     		.2byte	0xc5c
 8994 155f 08       		.byte	0x8
 8995 1560 53050000 		.4byte	0x553
 8996 1564 8B0F0000 		.4byte	.LLST125
 8997 1568 890F0000 		.4byte	.LVUS125
 8998 156c 2B       		.uleb128 0x2b
 8999 156d 220A0000 		.4byte	.LVL244
 9000 1571 44070000 		.4byte	0x744
 9001 1575 87150000 		.4byte	0x1587
 9002 1579 21       		.uleb128 0x21
 9003 157a 01       		.byte	0x1
 9004 157b 50       		.byte	0x50
 9005 157c 09       		.byte	0x9
 9006 157d F3       		.byte	0xf3
 9007 157e 03       		.uleb128 0x3
 9008 157f F5       		.byte	0xf5
 9009 1580 00       		.uleb128 0
 9010 1581 25       		.uleb128 0x25
 9011 1582 F7       		.byte	0xf7
 9012 1583 2C       		.uleb128 0x2c
 9013 1584 F7       		.byte	0xf7
 9014 1585 00       		.uleb128 0
 9015 1586 00       		.byte	0
 9016 1587 2B       		.uleb128 0x2b
 9017 1588 280A0000 		.4byte	.LVL245
 9018 158c 44070000 		.4byte	0x744
 9019 1590 9B150000 		.4byte	0x159b
 9020 1594 21       		.uleb128 0x21
 9021 1595 01       		.byte	0x1
ARM GAS  /tmp/ccGXytas.s 			page 285


 9022 1596 50       		.byte	0x50
 9023 1597 02       		.byte	0x2
 9024 1598 77       		.byte	0x77
 9025 1599 00       		.sleb128 0
 9026 159a 00       		.byte	0
 9027 159b 30       		.uleb128 0x30
 9028 159c 460A0000 		.4byte	.LVL246
 9029 15a0 7F070000 		.4byte	0x77f
 9030 15a4 21       		.uleb128 0x21
 9031 15a5 01       		.byte	0x1
 9032 15a6 51       		.byte	0x51
 9033 15a7 02       		.byte	0x2
 9034 15a8 77       		.byte	0x77
 9035 15a9 00       		.sleb128 0
 9036 15aa 00       		.byte	0
 9037 15ab 00       		.byte	0
 9038 15ac 23       		.uleb128 0x23
 9039 15ad 01       		.byte	0x1
 9040 15ae 56070000 		.4byte	.LASF192
 9041 15b2 01       		.byte	0x1
 9042 15b3 160C     		.2byte	0xc16
 9043 15b5 0C       		.byte	0xc
 9044 15b6 01       		.byte	0x1
 9045 15b7 32010000 		.4byte	0x132
 9046 15bb B4090000 		.4byte	.LFB33
 9047 15bf 100A0000 		.4byte	.LFE33
 9048 15c3 9E0F0000 		.4byte	.LLST118
 9049 15c7 01       		.byte	0x1
 9050 15c8 3D160000 		.4byte	0x163d
 9051 15cc 1D       		.uleb128 0x1d
 9052 15cd 62010000 		.4byte	.LASF193
 9053 15d1 01       		.byte	0x1
 9054 15d2 160C     		.2byte	0xc16
 9055 15d4 3B       		.byte	0x3b
 9056 15d5 43160000 		.4byte	0x1643
 9057 15d9 C20F0000 		.4byte	.LLST119
 9058 15dd BE0F0000 		.4byte	.LVUS119
 9059 15e1 1E       		.uleb128 0x1e
 9060 15e2 B9030000 		.4byte	.LASF191
 9061 15e6 01       		.byte	0x1
 9062 15e7 180C     		.2byte	0xc18
 9063 15e9 08       		.byte	0x8
 9064 15ea 53050000 		.4byte	0x553
 9065 15ee EB0F0000 		.4byte	.LLST120
 9066 15f2 E90F0000 		.4byte	.LVUS120
 9067 15f6 1E       		.uleb128 0x1e
 9068 15f7 230D0000 		.4byte	.LASF124
 9069 15fb 01       		.byte	0x1
 9070 15fc 190C     		.2byte	0xc19
 9071 15fe 0C       		.byte	0xc
 9072 15ff 32010000 		.4byte	0x132
 9073 1603 02100000 		.4byte	.LLST121
 9074 1607 FE0F0000 		.4byte	.LVUS121
 9075 160b 2B       		.uleb128 0x2b
 9076 160c C6090000 		.4byte	.LVL235
 9077 1610 44070000 		.4byte	0x744
 9078 1614 1F160000 		.4byte	0x161f
ARM GAS  /tmp/ccGXytas.s 			page 286


 9079 1618 21       		.uleb128 0x21
 9080 1619 01       		.byte	0x1
 9081 161a 50       		.byte	0x50
 9082 161b 02       		.byte	0x2
 9083 161c 76       		.byte	0x76
 9084 161d 00       		.sleb128 0
 9085 161e 00       		.byte	0
 9086 161f 2B       		.uleb128 0x2b
 9087 1620 D4090000 		.4byte	.LVL236
 9088 1624 44070000 		.4byte	0x744
 9089 1628 33160000 		.4byte	0x1633
 9090 162c 21       		.uleb128 0x21
 9091 162d 01       		.byte	0x1
 9092 162e 50       		.byte	0x50
 9093 162f 02       		.byte	0x2
 9094 1630 76       		.byte	0x76
 9095 1631 00       		.sleb128 0
 9096 1632 00       		.byte	0
 9097 1633 1F       		.uleb128 0x1f
 9098 1634 F0090000 		.4byte	.LVL237
 9099 1638 7F070000 		.4byte	0x77f
 9100 163c 00       		.byte	0
 9101 163d 07       		.uleb128 0x7
 9102 163e 04       		.byte	0x4
 9103 163f 7E020000 		.4byte	0x27e
 9104 1643 06       		.uleb128 0x6
 9105 1644 3D160000 		.4byte	0x163d
 9106 1648 24       		.uleb128 0x24
 9107 1649 01       		.byte	0x1
 9108 164a 11080000 		.4byte	.LASF194
 9109 164e 01       		.byte	0x1
 9110 164f F70B     		.2byte	0xbf7
 9111 1651 07       		.byte	0x7
 9112 1652 01       		.byte	0x1
 9113 1653 88090000 		.4byte	.LFB32
 9114 1657 B4090000 		.4byte	.LFE32
 9115 165b 22100000 		.4byte	.LLST114
 9116 165f 01       		.byte	0x1
 9117 1660 D7160000 		.4byte	0x16d7
 9118 1664 1D       		.uleb128 0x1d
 9119 1665 62010000 		.4byte	.LASF193
 9120 1669 01       		.byte	0x1
 9121 166a F70B     		.2byte	0xbf7
 9122 166c 37       		.byte	0x37
 9123 166d CA050000 		.4byte	0x5ca
 9124 1671 52100000 		.4byte	.LLST115
 9125 1675 4E100000 		.4byte	.LVUS115
 9126 1679 1D       		.uleb128 0x1d
 9127 167a D30E0000 		.4byte	.LASF117
 9128 167e 01       		.byte	0x1
 9129 167f F70B     		.2byte	0xbf7
 9130 1681 4F       		.byte	0x4f
 9131 1682 5E010000 		.4byte	0x15e
 9132 1686 7F100000 		.4byte	.LLST116
 9133 168a 79100000 		.4byte	.LVUS116
 9134 168e 1D       		.uleb128 0x1d
 9135 168f 25060000 		.4byte	.LASF195
ARM GAS  /tmp/ccGXytas.s 			page 287


 9136 1693 01       		.byte	0x1
 9137 1694 F70B     		.2byte	0xbf7
 9138 1696 6E       		.byte	0x6e
 9139 1697 43010000 		.4byte	0x143
 9140 169b CB100000 		.4byte	.LLST117
 9141 169f C3100000 		.4byte	.LVUS117
 9142 16a3 2B       		.uleb128 0x2b
 9143 16a4 98090000 		.4byte	.LVL228
 9144 16a8 7F070000 		.4byte	0x77f
 9145 16ac BE160000 		.4byte	0x16be
 9146 16b0 21       		.uleb128 0x21
 9147 16b1 01       		.byte	0x1
 9148 16b2 50       		.byte	0x50
 9149 16b3 09       		.byte	0x9
 9150 16b4 F3       		.byte	0xf3
 9151 16b5 03       		.uleb128 0x3
 9152 16b6 F5       		.byte	0xf5
 9153 16b7 00       		.uleb128 0
 9154 16b8 25       		.uleb128 0x25
 9155 16b9 F7       		.byte	0xf7
 9156 16ba 2C       		.uleb128 0x2c
 9157 16bb F7       		.byte	0xf7
 9158 16bc 00       		.uleb128 0
 9159 16bd 00       		.byte	0
 9160 16be 2F       		.uleb128 0x2f
 9161 16bf AE090000 		.4byte	.LVL231
 9162 16c3 01       		.byte	0x1
 9163 16c4 2F080000 		.4byte	0x82f
 9164 16c8 21       		.uleb128 0x21
 9165 16c9 01       		.byte	0x1
 9166 16ca 51       		.byte	0x51
 9167 16cb 09       		.byte	0x9
 9168 16cc F3       		.byte	0xf3
 9169 16cd 03       		.uleb128 0x3
 9170 16ce F5       		.byte	0xf5
 9171 16cf 02       		.uleb128 0x2
 9172 16d0 25       		.uleb128 0x25
 9173 16d1 F7       		.byte	0xf7
 9174 16d2 2C       		.uleb128 0x2c
 9175 16d3 F7       		.byte	0xf7
 9176 16d4 00       		.uleb128 0
 9177 16d5 00       		.byte	0
 9178 16d6 00       		.byte	0
 9179 16d7 24       		.uleb128 0x24
 9180 16d8 01       		.byte	0x1
 9181 16d9 2A0E0000 		.4byte	.LASF196
 9182 16dd 01       		.byte	0x1
 9183 16de DD0B     		.2byte	0xbdd
 9184 16e0 06       		.byte	0x6
 9185 16e1 01       		.byte	0x1
 9186 16e2 60090000 		.4byte	.LFB31
 9187 16e6 88090000 		.4byte	.LFE31
 9188 16ea 08110000 		.4byte	.LLST110
 9189 16ee 01       		.byte	0x1
 9190 16ef 6B170000 		.4byte	0x176b
 9191 16f3 1D       		.uleb128 0x1d
 9192 16f4 62010000 		.4byte	.LASF193
ARM GAS  /tmp/ccGXytas.s 			page 288


 9193 16f8 01       		.byte	0x1
 9194 16f9 DD0B     		.2byte	0xbdd
 9195 16fb 2F       		.byte	0x2f
 9196 16fc BF050000 		.4byte	0x5bf
 9197 1700 38110000 		.4byte	.LLST111
 9198 1704 34110000 		.4byte	.LVUS111
 9199 1708 1D       		.uleb128 0x1d
 9200 1709 B50B0000 		.4byte	.LASF23
 9201 170d 01       		.byte	0x1
 9202 170e DD0B     		.2byte	0xbdd
 9203 1710 4D       		.byte	0x4d
 9204 1711 6F010000 		.4byte	0x16f
 9205 1715 63110000 		.4byte	.LLST112
 9206 1719 5F110000 		.4byte	.LVUS112
 9207 171d 1D       		.uleb128 0x1d
 9208 171e D30E0000 		.4byte	.LASF117
 9209 1722 01       		.byte	0x1
 9210 1723 DD0B     		.2byte	0xbdd
 9211 1725 6A       		.byte	0x6a
 9212 1726 6F010000 		.4byte	0x16f
 9213 172a 92110000 		.4byte	.LLST113
 9214 172e 8A110000 		.4byte	.LVUS113
 9215 1732 2B       		.uleb128 0x2b
 9216 1733 76090000 		.4byte	.LVL223
 9217 1737 7F070000 		.4byte	0x77f
 9218 173b 4D170000 		.4byte	0x174d
 9219 173f 21       		.uleb128 0x21
 9220 1740 01       		.byte	0x1
 9221 1741 50       		.byte	0x50
 9222 1742 09       		.byte	0x9
 9223 1743 F3       		.byte	0xf3
 9224 1744 03       		.uleb128 0x3
 9225 1745 F5       		.byte	0xf5
 9226 1746 00       		.uleb128 0
 9227 1747 25       		.uleb128 0x25
 9228 1748 F7       		.byte	0xf7
 9229 1749 2C       		.uleb128 0x2c
 9230 174a F7       		.byte	0xf7
 9231 174b 00       		.uleb128 0
 9232 174c 00       		.byte	0
 9233 174d 2F       		.uleb128 0x2f
 9234 174e 82090000 		.4byte	.LVL225
 9235 1752 01       		.byte	0x1
 9236 1753 2F080000 		.4byte	0x82f
 9237 1757 21       		.uleb128 0x21
 9238 1758 01       		.byte	0x1
 9239 1759 50       		.byte	0x50
 9240 175a 09       		.byte	0x9
 9241 175b F3       		.byte	0xf3
 9242 175c 03       		.uleb128 0x3
 9243 175d F5       		.byte	0xf5
 9244 175e 02       		.uleb128 0x2
 9245 175f 25       		.uleb128 0x25
 9246 1760 F7       		.byte	0xf7
 9247 1761 2C       		.uleb128 0x2c
 9248 1762 F7       		.byte	0xf7
 9249 1763 00       		.uleb128 0
ARM GAS  /tmp/ccGXytas.s 			page 289


 9250 1764 21       		.uleb128 0x21
 9251 1765 01       		.byte	0x1
 9252 1766 51       		.byte	0x51
 9253 1767 01       		.byte	0x1
 9254 1768 31       		.byte	0x31
 9255 1769 00       		.byte	0
 9256 176a 00       		.byte	0
 9257 176b 24       		.uleb128 0x24
 9258 176c 01       		.byte	0x1
 9259 176d 280B0000 		.4byte	.LASF197
 9260 1771 01       		.byte	0x1
 9261 1772 CC0B     		.2byte	0xbcc
 9262 1774 06       		.byte	0x6
 9263 1775 01       		.byte	0x1
 9264 1776 40090000 		.4byte	.LFB30
 9265 177a 60090000 		.4byte	.LFE30
 9266 177e CF110000 		.4byte	.LLST107
 9267 1782 01       		.byte	0x1
 9268 1783 EA170000 		.4byte	0x17ea
 9269 1787 1D       		.uleb128 0x1d
 9270 1788 62010000 		.4byte	.LASF193
 9271 178c 01       		.byte	0x1
 9272 178d CC0B     		.2byte	0xbcc
 9273 178f 2C       		.byte	0x2c
 9274 1790 CA050000 		.4byte	0x5ca
 9275 1794 FF110000 		.4byte	.LLST108
 9276 1798 FB110000 		.4byte	.LVUS108
 9277 179c 1D       		.uleb128 0x1d
 9278 179d D30E0000 		.4byte	.LASF117
 9279 17a1 01       		.byte	0x1
 9280 17a2 CC0B     		.2byte	0xbcc
 9281 17a4 4A       		.byte	0x4a
 9282 17a5 6F010000 		.4byte	0x16f
 9283 17a9 2E120000 		.4byte	.LLST109
 9284 17ad 26120000 		.4byte	.LVUS109
 9285 17b1 2B       		.uleb128 0x2b
 9286 17b2 4E090000 		.4byte	.LVL217
 9287 17b6 29070000 		.4byte	0x729
 9288 17ba CC170000 		.4byte	0x17cc
 9289 17be 21       		.uleb128 0x21
 9290 17bf 01       		.byte	0x1
 9291 17c0 50       		.byte	0x50
 9292 17c1 09       		.byte	0x9
 9293 17c2 F3       		.byte	0xf3
 9294 17c3 03       		.uleb128 0x3
 9295 17c4 F5       		.byte	0xf5
 9296 17c5 00       		.uleb128 0
 9297 17c6 25       		.uleb128 0x25
 9298 17c7 F7       		.byte	0xf7
 9299 17c8 2C       		.uleb128 0x2c
 9300 17c9 F7       		.byte	0xf7
 9301 17ca 00       		.uleb128 0
 9302 17cb 00       		.byte	0
 9303 17cc 2F       		.uleb128 0x2f
 9304 17cd 5A090000 		.4byte	.LVL219
 9305 17d1 01       		.byte	0x1
 9306 17d2 2F080000 		.4byte	0x82f
ARM GAS  /tmp/ccGXytas.s 			page 290


 9307 17d6 21       		.uleb128 0x21
 9308 17d7 01       		.byte	0x1
 9309 17d8 50       		.byte	0x50
 9310 17d9 09       		.byte	0x9
 9311 17da F3       		.byte	0xf3
 9312 17db 03       		.uleb128 0x3
 9313 17dc F5       		.byte	0xf5
 9314 17dd 01       		.uleb128 0x1
 9315 17de 25       		.uleb128 0x25
 9316 17df F7       		.byte	0xf7
 9317 17e0 2C       		.uleb128 0x2c
 9318 17e1 F7       		.byte	0xf7
 9319 17e2 00       		.uleb128 0
 9320 17e3 21       		.uleb128 0x21
 9321 17e4 01       		.byte	0x1
 9322 17e5 51       		.byte	0x51
 9323 17e6 01       		.byte	0x1
 9324 17e7 31       		.byte	0x31
 9325 17e8 00       		.byte	0
 9326 17e9 00       		.byte	0
 9327 17ea 3E       		.uleb128 0x3e
 9328 17eb 01       		.byte	0x1
 9329 17ec EC0A0000 		.4byte	.LASF198
 9330 17f0 01       		.byte	0x1
 9331 17f1 830B     		.2byte	0xb83
 9332 17f3 06       		.byte	0x6
 9333 17f4 01       		.byte	0x1
 9334 17f5 01       		.byte	0x1
 9335 17f6 19180000 		.4byte	0x1819
 9336 17fa 35       		.uleb128 0x35
 9337 17fb 25       		.uleb128 0x25
 9338 17fc 7B0E0000 		.4byte	.LASF199
 9339 1800 01       		.byte	0x1
 9340 1801 B70B     		.2byte	0xbb7
 9341 1803 03       		.byte	0x3
 9342 1804 48010000 		.4byte	0x148
 9343 1808 35       		.uleb128 0x35
 9344 1809 25       		.uleb128 0x25
 9345 180a 84000000 		.4byte	.LASF171
 9346 180e 01       		.byte	0x1
 9347 180f B70B     		.2byte	0xbb7
 9348 1811 03       		.byte	0x3
 9349 1812 CA050000 		.4byte	0x5ca
 9350 1816 00       		.byte	0
 9351 1817 00       		.byte	0
 9352 1818 00       		.byte	0
 9353 1819 23       		.uleb128 0x23
 9354 181a 01       		.byte	0x1
 9355 181b BA050000 		.4byte	.LASF200
 9356 181f 01       		.byte	0x1
 9357 1820 690A     		.2byte	0xa69
 9358 1822 0C       		.byte	0xc
 9359 1823 01       		.byte	0x1
 9360 1824 32010000 		.4byte	0x132
 9361 1828 40060000 		.4byte	.LFB28
 9362 182c 0C070000 		.4byte	.LFE28
 9363 1830 6B120000 		.4byte	.LLST79
ARM GAS  /tmp/ccGXytas.s 			page 291


 9364 1834 01       		.byte	0x1
 9365 1835 F8180000 		.4byte	0x18f8
 9366 1839 1E       		.uleb128 0x1e
 9367 183a 1D100000 		.4byte	.LASF123
 9368 183e 01       		.byte	0x1
 9369 183f 6B0A     		.2byte	0xa6b
 9370 1841 09       		.byte	0x9
 9371 1842 53050000 		.4byte	0x553
 9372 1846 8D120000 		.4byte	.LLST80
 9373 184a 8B120000 		.4byte	.LVUS80
 9374 184e 1E       		.uleb128 0x1e
 9375 184f B50B0000 		.4byte	.LASF23
 9376 1853 01       		.byte	0x1
 9377 1854 6C0A     		.2byte	0xa6c
 9378 1856 0C       		.byte	0xc
 9379 1857 5E010000 		.4byte	0x15e
 9380 185b A2120000 		.4byte	.LLST81
 9381 185f A0120000 		.4byte	.LVUS81
 9382 1863 1E       		.uleb128 0x1e
 9383 1864 5C0C0000 		.4byte	.LASF201
 9384 1868 01       		.byte	0x1
 9385 1869 6D0A     		.2byte	0xa6d
 9386 186b 0C       		.byte	0xc
 9387 186c 32010000 		.4byte	0x132
 9388 1870 BF120000 		.4byte	.LLST82
 9389 1874 B5120000 		.4byte	.LVUS82
 9390 1878 27       		.uleb128 0x27
 9391 1879 F0000000 		.4byte	.Ldebug_ranges0+0xf0
 9392 187d 1E       		.uleb128 0x1e
 9393 187e 69060000 		.4byte	.LASF121
 9394 1882 01       		.byte	0x1
 9395 1883 770A     		.2byte	0xa77
 9396 1885 14       		.byte	0x14
 9397 1886 6F010000 		.4byte	0x16f
 9398 188a 05130000 		.4byte	.LLST83
 9399 188e 01130000 		.4byte	.LVUS83
 9400 1892 3F       		.uleb128 0x3f
 9401 1893 56060000 		.4byte	.LBB115
 9402 1897 6C060000 		.4byte	.LBE115
 9403 189b BE180000 		.4byte	0x18be
 9404 189f 1E       		.uleb128 0x1e
 9405 18a0 4F050000 		.4byte	.LASF202
 9406 18a4 01       		.byte	0x1
 9407 18a5 7F0A     		.2byte	0xa7f
 9408 18a7 04       		.byte	0x4
 9409 18a8 BF050000 		.4byte	0x5bf
 9410 18ac 27130000 		.4byte	.LLST84
 9411 18b0 23130000 		.4byte	.LVUS84
 9412 18b4 1F       		.uleb128 0x1f
 9413 18b5 6C060000 		.4byte	.LVL149
 9414 18b9 38100000 		.4byte	0x1038
 9415 18bd 00       		.byte	0
 9416 18be 2B       		.uleb128 0x2b
 9417 18bf C6060000 		.4byte	.LVL156
 9418 18c3 44070000 		.4byte	0x744
 9419 18c7 D2180000 		.4byte	0x18d2
 9420 18cb 21       		.uleb128 0x21
ARM GAS  /tmp/ccGXytas.s 			page 292


 9421 18cc 01       		.byte	0x1
 9422 18cd 50       		.byte	0x50
 9423 18ce 02       		.byte	0x2
 9424 18cf 78       		.byte	0x78
 9425 18d0 00       		.sleb128 0
 9426 18d1 00       		.byte	0
 9427 18d2 2B       		.uleb128 0x2b
 9428 18d3 D2060000 		.4byte	.LVL157
 9429 18d7 44070000 		.4byte	0x744
 9430 18db E6180000 		.4byte	0x18e6
 9431 18df 21       		.uleb128 0x21
 9432 18e0 01       		.byte	0x1
 9433 18e1 50       		.byte	0x50
 9434 18e2 02       		.byte	0x2
 9435 18e3 76       		.byte	0x76
 9436 18e4 18       		.sleb128 24
 9437 18e5 00       		.byte	0
 9438 18e6 30       		.uleb128 0x30
 9439 18e7 E8060000 		.4byte	.LVL158
 9440 18eb 7F070000 		.4byte	0x77f
 9441 18ef 21       		.uleb128 0x21
 9442 18f0 01       		.byte	0x1
 9443 18f1 51       		.byte	0x51
 9444 18f2 02       		.byte	0x2
 9445 18f3 78       		.byte	0x78
 9446 18f4 00       		.sleb128 0
 9447 18f5 00       		.byte	0
 9448 18f6 00       		.byte	0
 9449 18f7 00       		.byte	0
 9450 18f8 23       		.uleb128 0x23
 9451 18f9 01       		.byte	0x1
 9452 18fa E7080000 		.4byte	.LASF203
 9453 18fe 01       		.byte	0x1
 9454 18ff B509     		.2byte	0x9b5
 9455 1901 0E       		.byte	0xe
 9456 1902 01       		.byte	0x1
 9457 1903 48010000 		.4byte	0x148
 9458 1907 D00B0000 		.4byte	.LFB27
 9459 190b 700C0000 		.4byte	.LFE27
 9460 190f 49130000 		.4byte	.LLST157
 9461 1913 01       		.byte	0x1
 9462 1914 4D1A0000 		.4byte	0x1a4d
 9463 1918 1D       		.uleb128 0x1d
 9464 1919 630D0000 		.4byte	.LASF165
 9465 191d 01       		.byte	0x1
 9466 191e B509     		.2byte	0x9b5
 9467 1920 39       		.byte	0x39
 9468 1921 30110000 		.4byte	0x1130
 9469 1925 6F130000 		.4byte	.LLST158
 9470 1929 69130000 		.4byte	.LVUS158
 9471 192d 1D       		.uleb128 0x1d
 9472 192e C40D0000 		.4byte	.LASF204
 9473 1932 01       		.byte	0x1
 9474 1933 B509     		.2byte	0x9b5
 9475 1935 5E       		.byte	0x5e
 9476 1936 59010000 		.4byte	0x159
 9477 193a 9E130000 		.4byte	.LLST159
ARM GAS  /tmp/ccGXytas.s 			page 293


 9478 193e 98130000 		.4byte	.LVUS159
 9479 1942 1D       		.uleb128 0x1d
 9480 1943 D8010000 		.4byte	.LASF205
 9481 1947 01       		.byte	0x1
 9482 1948 B509     		.2byte	0x9b5
 9483 194a 7C       		.byte	0x7c
 9484 194b 6B0B0000 		.4byte	0xb6b
 9485 194f D4130000 		.4byte	.LLST160
 9486 1953 D0130000 		.4byte	.LVUS160
 9487 1957 1E       		.uleb128 0x1e
 9488 1958 330A0000 		.4byte	.LASF170
 9489 195c 01       		.byte	0x1
 9490 195d B709     		.2byte	0x9b7
 9491 195f 0E       		.byte	0xe
 9492 1960 48010000 		.4byte	0x148
 9493 1964 FE130000 		.4byte	.LLST161
 9494 1968 F2130000 		.4byte	.LVUS161
 9495 196c 1E       		.uleb128 0x1e
 9496 196d 70080000 		.4byte	.LASF206
 9497 1971 01       		.byte	0x1
 9498 1972 B709     		.2byte	0x9b7
 9499 1974 1A       		.byte	0x1a
 9500 1975 48010000 		.4byte	0x148
 9501 1979 5C140000 		.4byte	.LLST162
 9502 197d 54140000 		.4byte	.LVUS162
 9503 1981 1F       		.uleb128 0x1f
 9504 1982 DE0B0000 		.4byte	.LVL292
 9505 1986 D01B0000 		.4byte	0x1bd0
 9506 198a 2B       		.uleb128 0x2b
 9507 198b 060C0000 		.4byte	.LVL295
 9508 198f A6100000 		.4byte	0x10a6
 9509 1993 B5190000 		.4byte	0x19b5
 9510 1997 21       		.uleb128 0x21
 9511 1998 01       		.byte	0x1
 9512 1999 50       		.byte	0x50
 9513 199a 08       		.byte	0x8
 9514 199b 77       		.byte	0x77
 9515 199c 00       		.sleb128 0
 9516 199d 74       		.byte	0x74
 9517 199e 00       		.sleb128 0
 9518 199f 1E       		.byte	0x1e
 9519 19a0 75       		.byte	0x75
 9520 19a1 00       		.sleb128 0
 9521 19a2 22       		.byte	0x22
 9522 19a3 21       		.uleb128 0x21
 9523 19a4 01       		.byte	0x1
 9524 19a5 51       		.byte	0x51
 9525 19a6 08       		.byte	0x8
 9526 19a7 7B       		.byte	0x7b
 9527 19a8 00       		.sleb128 0
 9528 19a9 76       		.byte	0x76
 9529 19aa 00       		.sleb128 0
 9530 19ab 1E       		.byte	0x1e
 9531 19ac 7A       		.byte	0x7a
 9532 19ad 00       		.sleb128 0
 9533 19ae 22       		.byte	0x22
 9534 19af 21       		.uleb128 0x21
ARM GAS  /tmp/ccGXytas.s 			page 294


 9535 19b0 01       		.byte	0x1
 9536 19b1 52       		.byte	0x52
 9537 19b2 01       		.byte	0x1
 9538 19b3 31       		.byte	0x31
 9539 19b4 00       		.byte	0
 9540 19b5 2B       		.uleb128 0x2b
 9541 19b6 1A0C0000 		.4byte	.LVL297
 9542 19ba A6100000 		.4byte	0x10a6
 9543 19be D4190000 		.4byte	0x19d4
 9544 19c2 21       		.uleb128 0x21
 9545 19c3 01       		.byte	0x1
 9546 19c4 50       		.byte	0x50
 9547 19c5 08       		.byte	0x8
 9548 19c6 77       		.byte	0x77
 9549 19c7 00       		.sleb128 0
 9550 19c8 74       		.byte	0x74
 9551 19c9 00       		.sleb128 0
 9552 19ca 1E       		.byte	0x1e
 9553 19cb 75       		.byte	0x75
 9554 19cc 00       		.sleb128 0
 9555 19cd 22       		.byte	0x22
 9556 19ce 21       		.uleb128 0x21
 9557 19cf 01       		.byte	0x1
 9558 19d0 52       		.byte	0x52
 9559 19d1 01       		.byte	0x1
 9560 19d2 32       		.byte	0x32
 9561 19d3 00       		.byte	0
 9562 19d4 2B       		.uleb128 0x2b
 9563 19d5 2A0C0000 		.4byte	.LVL299
 9564 19d9 A6100000 		.4byte	0x10a6
 9565 19dd F3190000 		.4byte	0x19f3
 9566 19e1 21       		.uleb128 0x21
 9567 19e2 01       		.byte	0x1
 9568 19e3 50       		.byte	0x50
 9569 19e4 08       		.byte	0x8
 9570 19e5 77       		.byte	0x77
 9571 19e6 00       		.sleb128 0
 9572 19e7 74       		.byte	0x74
 9573 19e8 00       		.sleb128 0
 9574 19e9 1E       		.byte	0x1e
 9575 19ea 75       		.byte	0x75
 9576 19eb 00       		.sleb128 0
 9577 19ec 22       		.byte	0x22
 9578 19ed 21       		.uleb128 0x21
 9579 19ee 01       		.byte	0x1
 9580 19ef 52       		.byte	0x52
 9581 19f0 01       		.byte	0x1
 9582 19f1 32       		.byte	0x32
 9583 19f2 00       		.byte	0
 9584 19f3 2B       		.uleb128 0x2b
 9585 19f4 380C0000 		.4byte	.LVL301
 9586 19f8 A6100000 		.4byte	0x10a6
 9587 19fc 1B1A0000 		.4byte	0x1a1b
 9588 1a00 21       		.uleb128 0x21
 9589 1a01 01       		.byte	0x1
 9590 1a02 50       		.byte	0x50
 9591 1a03 08       		.byte	0x8
ARM GAS  /tmp/ccGXytas.s 			page 295


 9592 1a04 77       		.byte	0x77
 9593 1a05 00       		.sleb128 0
 9594 1a06 74       		.byte	0x74
 9595 1a07 00       		.sleb128 0
 9596 1a08 1E       		.byte	0x1e
 9597 1a09 75       		.byte	0x75
 9598 1a0a 00       		.sleb128 0
 9599 1a0b 22       		.byte	0x22
 9600 1a0c 21       		.uleb128 0x21
 9601 1a0d 01       		.byte	0x1
 9602 1a0e 51       		.byte	0x51
 9603 1a0f 05       		.byte	0x5
 9604 1a10 03       		.byte	0x3
 9605 1a11 2C000000 		.4byte	.LANCHOR0+44
 9606 1a15 21       		.uleb128 0x21
 9607 1a16 01       		.byte	0x1
 9608 1a17 52       		.byte	0x52
 9609 1a18 01       		.byte	0x1
 9610 1a19 34       		.byte	0x34
 9611 1a1a 00       		.byte	0
 9612 1a1b 2B       		.uleb128 0x2b
 9613 1a1c 460C0000 		.4byte	.LVL303
 9614 1a20 A6100000 		.4byte	0x10a6
 9615 1a24 431A0000 		.4byte	0x1a43
 9616 1a28 21       		.uleb128 0x21
 9617 1a29 01       		.byte	0x1
 9618 1a2a 50       		.byte	0x50
 9619 1a2b 08       		.byte	0x8
 9620 1a2c 77       		.byte	0x77
 9621 1a2d 00       		.sleb128 0
 9622 1a2e 74       		.byte	0x74
 9623 1a2f 00       		.sleb128 0
 9624 1a30 1E       		.byte	0x1e
 9625 1a31 75       		.byte	0x75
 9626 1a32 00       		.sleb128 0
 9627 1a33 22       		.byte	0x22
 9628 1a34 21       		.uleb128 0x21
 9629 1a35 01       		.byte	0x1
 9630 1a36 51       		.byte	0x51
 9631 1a37 05       		.byte	0x5
 9632 1a38 03       		.byte	0x3
 9633 1a39 0C000000 		.4byte	.LANCHOR0+12
 9634 1a3d 21       		.uleb128 0x21
 9635 1a3e 01       		.byte	0x1
 9636 1a3f 52       		.byte	0x52
 9637 1a40 01       		.byte	0x1
 9638 1a41 33       		.byte	0x33
 9639 1a42 00       		.byte	0
 9640 1a43 1F       		.uleb128 0x1f
 9641 1a44 520C0000 		.4byte	.LVL305
 9642 1a48 021B0000 		.4byte	0x1b02
 9643 1a4c 00       		.byte	0
 9644 1a4d 2D       		.uleb128 0x2d
 9645 1a4e 01       		.byte	0x1
 9646 1a4f 9B0D0000 		.4byte	.LASF207
 9647 1a53 01       		.byte	0x1
 9648 1a54 2209     		.2byte	0x922
ARM GAS  /tmp/ccGXytas.s 			page 296


 9649 1a56 07       		.byte	0x7
 9650 1a57 01       		.byte	0x1
 9651 1a58 A9000000 		.4byte	0xa9
 9652 1a5c 30060000 		.4byte	.LFB26
 9653 1a60 40060000 		.4byte	.LFE26
 9654 1a64 02       		.byte	0x2
 9655 1a65 7D       		.byte	0x7d
 9656 1a66 00       		.sleb128 0
 9657 1a67 01       		.byte	0x1
 9658 1a68 971A0000 		.4byte	0x1a97
 9659 1a6c 1D       		.uleb128 0x1d
 9660 1a6d 770A0000 		.4byte	.LASF208
 9661 1a71 01       		.byte	0x1
 9662 1a72 2209     		.2byte	0x922
 9663 1a74 23       		.byte	0x23
 9664 1a75 83020000 		.4byte	0x283
 9665 1a79 94140000 		.4byte	.LLST77
 9666 1a7d 92140000 		.4byte	.LVUS77
 9667 1a81 1E       		.uleb128 0x1e
 9668 1a82 1D100000 		.4byte	.LASF123
 9669 1a86 01       		.byte	0x1
 9670 1a87 2409     		.2byte	0x924
 9671 1a89 08       		.byte	0x8
 9672 1a8a 53050000 		.4byte	0x553
 9673 1a8e AB140000 		.4byte	.LLST78
 9674 1a92 A7140000 		.4byte	.LVUS78
 9675 1a96 00       		.byte	0
 9676 1a97 2C       		.uleb128 0x2c
 9677 1a98 01       		.byte	0x1
 9678 1a99 E2000000 		.4byte	.LASF210
 9679 1a9d 01       		.byte	0x1
 9680 1a9e 1A09     		.2byte	0x91a
 9681 1aa0 0D       		.byte	0xd
 9682 1aa1 01       		.byte	0x1
 9683 1aa2 48010000 		.4byte	0x148
 9684 1aa6 24060000 		.4byte	.LFB25
 9685 1aaa 30060000 		.4byte	.LFE25
 9686 1aae 02       		.byte	0x2
 9687 1aaf 7D       		.byte	0x7d
 9688 1ab0 00       		.sleb128 0
 9689 1ab1 01       		.byte	0x1
 9690 1ab2 40       		.uleb128 0x40
 9691 1ab3 01       		.byte	0x1
 9692 1ab4 22040000 		.4byte	.LASF211
 9693 1ab8 01       		.byte	0x1
 9694 1ab9 FB08     		.2byte	0x8fb
 9695 1abb 0C       		.byte	0xc
 9696 1abc 01       		.byte	0x1
 9697 1abd 5E010000 		.4byte	0x15e
 9698 1ac1 E01A0000 		.4byte	0x1ae0
 9699 1ac5 25       		.uleb128 0x25
 9700 1ac6 230D0000 		.4byte	.LASF124
 9701 1aca 01       		.byte	0x1
 9702 1acb FD08     		.2byte	0x8fd
 9703 1acd 0C       		.byte	0xc
 9704 1ace 5E010000 		.4byte	0x15e
 9705 1ad2 25       		.uleb128 0x25
ARM GAS  /tmp/ccGXytas.s 			page 297


 9706 1ad3 38030000 		.4byte	.LASF133
 9707 1ad7 01       		.byte	0x1
 9708 1ad8 FE08     		.2byte	0x8fe
 9709 1ada 0D       		.byte	0xd
 9710 1adb 48010000 		.4byte	0x148
 9711 1adf 00       		.byte	0
 9712 1ae0 41       		.uleb128 0x41
 9713 1ae1 01       		.byte	0x1
 9714 1ae2 0E0C0000 		.4byte	.LASF212
 9715 1ae6 01       		.byte	0x1
 9716 1ae7 EC08     		.2byte	0x8ec
 9717 1ae9 0C       		.byte	0xc
 9718 1aea 01       		.byte	0x1
 9719 1aeb 5E010000 		.4byte	0x15e
 9720 1aef 01       		.byte	0x1
 9721 1af0 021B0000 		.4byte	0x1b02
 9722 1af4 25       		.uleb128 0x25
 9723 1af5 A90D0000 		.4byte	.LASF213
 9724 1af9 01       		.byte	0x1
 9725 1afa EE08     		.2byte	0x8ee
 9726 1afc 0C       		.byte	0xc
 9727 1afd 5E010000 		.4byte	0x15e
 9728 1b01 00       		.byte	0
 9729 1b02 23       		.uleb128 0x23
 9730 1b03 01       		.byte	0x1
 9731 1b04 D60B0000 		.4byte	.LASF214
 9732 1b08 01       		.byte	0x1
 9733 1b09 7E08     		.2byte	0x87e
 9734 1b0b 0C       		.byte	0xc
 9735 1b0c 01       		.byte	0x1
 9736 1b0d 32010000 		.4byte	0x132
 9737 1b11 0C070000 		.4byte	.LFB22
 9738 1b15 CC070000 		.4byte	.LFE22
 9739 1b19 CB140000 		.4byte	.LLST85
 9740 1b1d 01       		.byte	0x1
 9741 1b1e D01B0000 		.4byte	0x1bd0
 9742 1b22 1E       		.uleb128 0x1e
 9743 1b23 1D100000 		.4byte	.LASF123
 9744 1b27 01       		.byte	0x1
 9745 1b28 8008     		.2byte	0x880
 9746 1b2a 08       		.byte	0x8
 9747 1b2b 53050000 		.4byte	0x553
 9748 1b2f F1140000 		.4byte	.LLST86
 9749 1b33 EB140000 		.4byte	.LVUS86
 9750 1b37 1E       		.uleb128 0x1e
 9751 1b38 0B0F0000 		.4byte	.LASF215
 9752 1b3c 01       		.byte	0x1
 9753 1b3d 8108     		.2byte	0x881
 9754 1b3f 0C       		.byte	0xc
 9755 1b40 32010000 		.4byte	0x132
 9756 1b44 24150000 		.4byte	.LLST87
 9757 1b48 1C150000 		.4byte	.LVUS87
 9758 1b4c 3F       		.uleb128 0x3f
 9759 1b4d 8E070000 		.4byte	.LBB118
 9760 1b51 A8070000 		.4byte	.LBE118
 9761 1b55 781B0000 		.4byte	0x1b78
 9762 1b59 1E       		.uleb128 0x1e
ARM GAS  /tmp/ccGXytas.s 			page 298


 9763 1b5a 27000000 		.4byte	.LASF216
 9764 1b5e 01       		.byte	0x1
 9765 1b5f B908     		.2byte	0x8b9
 9766 1b61 12       		.byte	0x12
 9767 1b62 48010000 		.4byte	0x148
 9768 1b66 61150000 		.4byte	.LLST88
 9769 1b6a 5B150000 		.4byte	.LVUS88
 9770 1b6e 1F       		.uleb128 0x1f
 9771 1b6f 9A070000 		.4byte	.LVL175
 9772 1b73 19180000 		.4byte	0x1819
 9773 1b77 00       		.byte	0
 9774 1b78 1F       		.uleb128 0x1f
 9775 1b79 16070000 		.4byte	.LVL162
 9776 1b7d 9A070000 		.4byte	0x79a
 9777 1b81 1F       		.uleb128 0x1f
 9778 1b82 2C070000 		.4byte	.LVL165
 9779 1b86 74070000 		.4byte	0x774
 9780 1b8a 2B       		.uleb128 0x2b
 9781 1b8b 56070000 		.4byte	.LVL169
 9782 1b8f 44070000 		.4byte	0x744
 9783 1b93 9E1B0000 		.4byte	0x1b9e
 9784 1b97 21       		.uleb128 0x21
 9785 1b98 01       		.byte	0x1
 9786 1b99 50       		.byte	0x50
 9787 1b9a 02       		.byte	0x2
 9788 1b9b 75       		.byte	0x75
 9789 1b9c 18       		.sleb128 24
 9790 1b9d 00       		.byte	0
 9791 1b9e 2B       		.uleb128 0x2b
 9792 1b9f 5C070000 		.4byte	.LVL170
 9793 1ba3 44070000 		.4byte	0x744
 9794 1ba7 B21B0000 		.4byte	0x1bb2
 9795 1bab 21       		.uleb128 0x21
 9796 1bac 01       		.byte	0x1
 9797 1bad 50       		.byte	0x50
 9798 1bae 02       		.byte	0x2
 9799 1baf 79       		.byte	0x79
 9800 1bb0 00       		.sleb128 0
 9801 1bb1 00       		.byte	0
 9802 1bb2 2B       		.uleb128 0x2b
 9803 1bb3 72070000 		.4byte	.LVL171
 9804 1bb7 7F070000 		.4byte	0x77f
 9805 1bbb C61B0000 		.4byte	0x1bc6
 9806 1bbf 21       		.uleb128 0x21
 9807 1bc0 01       		.byte	0x1
 9808 1bc1 51       		.byte	0x51
 9809 1bc2 02       		.byte	0x2
 9810 1bc3 79       		.byte	0x79
 9811 1bc4 00       		.sleb128 0
 9812 1bc5 00       		.byte	0
 9813 1bc6 1F       		.uleb128 0x1f
 9814 1bc7 8E070000 		.4byte	.LVL173
 9815 1bcb 38100000 		.4byte	0x1038
 9816 1bcf 00       		.byte	0
 9817 1bd0 3C       		.uleb128 0x3c
 9818 1bd1 01       		.byte	0x1
 9819 1bd2 63050000 		.4byte	.LASF218
ARM GAS  /tmp/ccGXytas.s 			page 299


 9820 1bd6 01       		.byte	0x1
 9821 1bd7 3408     		.2byte	0x834
 9822 1bd9 06       		.byte	0x6
 9823 1bda 01       		.byte	0x1
 9824 1bdb F8050000 		.4byte	.LFB21
 9825 1bdf 0C060000 		.4byte	.LFE21
 9826 1be3 02       		.byte	0x2
 9827 1be4 7D       		.byte	0x7d
 9828 1be5 00       		.sleb128 0
 9829 1be6 01       		.byte	0x1
 9830 1be7 3A       		.uleb128 0x3a
 9831 1be8 01       		.byte	0x1
 9832 1be9 48060000 		.4byte	.LASF219
 9833 1bed 01       		.byte	0x1
 9834 1bee 2908     		.2byte	0x829
 9835 1bf0 06       		.byte	0x6
 9836 1bf1 01       		.byte	0x1
 9837 1bf2 D8050000 		.4byte	.LFB20
 9838 1bf6 F8050000 		.4byte	.LFE20
 9839 1bfa 02       		.byte	0x2
 9840 1bfb 7D       		.byte	0x7d
 9841 1bfc 00       		.sleb128 0
 9842 1bfd 01       		.byte	0x1
 9843 1bfe 2D1C0000 		.4byte	0x1c2d
 9844 1c02 29       		.uleb128 0x29
 9845 1c03 4E280000 		.4byte	0x284e
 9846 1c07 D8050000 		.4byte	.LBI112
 9847 1c0b 02       		.byte	.LVU594
 9848 1c0c D8050000 		.4byte	.LBB112
 9849 1c10 E8050000 		.4byte	.LBE112
 9850 1c14 01       		.byte	0x1
 9851 1c15 2E08     		.2byte	0x82e
 9852 1c17 02       		.byte	0x2
 9853 1c18 221C0000 		.4byte	0x1c22
 9854 1c1c 28       		.uleb128 0x28
 9855 1c1d 5C280000 		.4byte	0x285c
 9856 1c21 00       		.byte	0
 9857 1c22 22       		.uleb128 0x22
 9858 1c23 F4050000 		.4byte	.LVL139
 9859 1c27 01       		.byte	0x1
 9860 1c28 FF060000 		.4byte	0x6ff
 9861 1c2c 00       		.byte	0
 9862 1c2d 24       		.uleb128 0x24
 9863 1c2e 01       		.byte	0x1
 9864 1c2f B00D0000 		.4byte	.LASF220
 9865 1c33 01       		.byte	0x1
 9866 1c34 AF07     		.2byte	0x7af
 9867 1c36 06       		.byte	0x6
 9868 1c37 01       		.byte	0x1
 9869 1c38 7C050000 		.4byte	.LFB19
 9870 1c3c D8050000 		.4byte	.LFE19
 9871 1c40 8C150000 		.4byte	.LLST74
 9872 1c44 01       		.byte	0x1
 9873 1c45 CD1C0000 		.4byte	0x1ccd
 9874 1c49 1E       		.uleb128 0x1e
 9875 1c4a 230D0000 		.4byte	.LASF124
 9876 1c4e 01       		.byte	0x1
ARM GAS  /tmp/ccGXytas.s 			page 300


 9877 1c4f B107     		.2byte	0x7b1
 9878 1c51 0C       		.byte	0xc
 9879 1c52 32010000 		.4byte	0x132
 9880 1c56 E2150000 		.4byte	.LLST75
 9881 1c5a DC150000 		.4byte	.LVUS75
 9882 1c5e 29       		.uleb128 0x29
 9883 1c5f 4E280000 		.4byte	0x284e
 9884 1c63 A2050000 		.4byte	.LBI110
 9885 1c67 01       		.byte	.LVU577
 9886 1c68 A2050000 		.4byte	.LBB110
 9887 1c6c B2050000 		.4byte	.LBE110
 9888 1c70 01       		.byte	0x1
 9889 1c71 F707     		.2byte	0x7f7
 9890 1c73 03       		.byte	0x3
 9891 1c74 7E1C0000 		.4byte	0x1c7e
 9892 1c78 28       		.uleb128 0x28
 9893 1c79 5C280000 		.4byte	0x285c
 9894 1c7d 00       		.byte	0
 9895 1c7e 2B       		.uleb128 0x2b
 9896 1c7f 96050000 		.4byte	.LVL136
 9897 1c83 06250000 		.4byte	0x2506
 9898 1c87 B91C0000 		.4byte	0x1cb9
 9899 1c8b 21       		.uleb128 0x21
 9900 1c8c 01       		.byte	0x1
 9901 1c8d 50       		.byte	0x50
 9902 1c8e 05       		.byte	0x5
 9903 1c8f 03       		.byte	0x3
 9904 1c90 00000000 		.4byte	prvIdleTask
 9905 1c94 21       		.uleb128 0x21
 9906 1c95 01       		.byte	0x1
 9907 1c96 51       		.byte	0x51
 9908 1c97 05       		.byte	0x5
 9909 1c98 03       		.byte	0x3
 9910 1c99 00000000 		.4byte	.LC0
 9911 1c9d 21       		.uleb128 0x21
 9912 1c9e 01       		.byte	0x1
 9913 1c9f 52       		.byte	0x52
 9914 1ca0 02       		.byte	0x2
 9915 1ca1 08       		.byte	0x8
 9916 1ca2 78       		.byte	0x78
 9917 1ca3 21       		.uleb128 0x21
 9918 1ca4 01       		.byte	0x1
 9919 1ca5 53       		.byte	0x53
 9920 1ca6 02       		.byte	0x2
 9921 1ca7 75       		.byte	0x75
 9922 1ca8 00       		.sleb128 0
 9923 1ca9 21       		.uleb128 0x21
 9924 1caa 02       		.byte	0x2
 9925 1cab 7D       		.byte	0x7d
 9926 1cac 00       		.sleb128 0
 9927 1cad 02       		.byte	0x2
 9928 1cae 75       		.byte	0x75
 9929 1caf 00       		.sleb128 0
 9930 1cb0 21       		.uleb128 0x21
 9931 1cb1 02       		.byte	0x2
 9932 1cb2 7D       		.byte	0x7d
 9933 1cb3 04       		.sleb128 4
ARM GAS  /tmp/ccGXytas.s 			page 301


 9934 1cb4 03       		.byte	0x3
 9935 1cb5 74       		.byte	0x74
 9936 1cb6 F401     		.sleb128 244
 9937 1cb8 00       		.byte	0
 9938 1cb9 1F       		.uleb128 0x1f
 9939 1cba 9E050000 		.4byte	.LVL137
 9940 1cbe 19070000 		.4byte	0x719
 9941 1cc2 22       		.uleb128 0x22
 9942 1cc3 C8050000 		.4byte	.LVL138
 9943 1cc7 01       		.byte	0x1
 9944 1cc8 0A070000 		.4byte	0x70a
 9945 1ccc 00       		.byte	0
 9946 1ccd 23       		.uleb128 0x23
 9947 1cce 01       		.byte	0x1
 9948 1ccf FB0C0000 		.4byte	.LASF221
 9949 1cd3 01       		.byte	0x1
 9950 1cd4 6907     		.2byte	0x769
 9951 1cd6 0D       		.byte	0xd
 9952 1cd7 01       		.byte	0x1
 9953 1cd8 32010000 		.4byte	0x132
 9954 1cdc F8040000 		.4byte	.LFB18
 9955 1ce0 7C050000 		.4byte	.LFE18
 9956 1ce4 0B160000 		.4byte	.LLST67
 9957 1ce8 01       		.byte	0x1
 9958 1ce9 FB1D0000 		.4byte	0x1dfb
 9959 1ced 1D       		.uleb128 0x1d
 9960 1cee 04030000 		.4byte	.LASF222
 9961 1cf2 01       		.byte	0x1
 9962 1cf3 6907     		.2byte	0x769
 9963 1cf5 2E       		.byte	0x2e
 9964 1cf6 83020000 		.4byte	0x283
 9965 1cfa 2F160000 		.4byte	.LLST68
 9966 1cfe 2B160000 		.4byte	.LVUS68
 9967 1d02 1E       		.uleb128 0x1e
 9968 1d03 73030000 		.4byte	.LASF223
 9969 1d07 01       		.byte	0x1
 9970 1d08 6B07     		.2byte	0x76b
 9971 1d0a 0D       		.byte	0xd
 9972 1d0b 32010000 		.4byte	0x132
 9973 1d0f 53160000 		.4byte	.LLST69
 9974 1d13 4D160000 		.4byte	.LVUS69
 9975 1d17 1E       		.uleb128 0x1e
 9976 1d18 1D100000 		.4byte	.LASF123
 9977 1d1c 01       		.byte	0x1
 9978 1d1d 6C07     		.2byte	0x76c
 9979 1d1f 10       		.byte	0x10
 9980 1d20 5E050000 		.4byte	0x55e
 9981 1d24 82160000 		.4byte	.LLST70
 9982 1d28 7E160000 		.4byte	.LVUS70
 9983 1d2c 25       		.uleb128 0x25
 9984 1d2d 38030000 		.4byte	.LASF133
 9985 1d31 01       		.byte	0x1
 9986 1d32 6D07     		.2byte	0x76d
 9987 1d34 0E       		.byte	0xe
 9988 1d35 48010000 		.4byte	0x148
 9989 1d39 26       		.uleb128 0x26
 9990 1d3a 23280000 		.4byte	0x2823
ARM GAS  /tmp/ccGXytas.s 			page 302


 9991 1d3e F8040000 		.4byte	.LBI102
 9992 1d42 07       		.byte	.LVU513
 9993 1d43 D8000000 		.4byte	.Ldebug_ranges0+0xd8
 9994 1d47 01       		.byte	0x1
 9995 1d48 8307     		.2byte	0x783
 9996 1d4a 1C       		.byte	0x1c
 9997 1d4b 601D0000 		.4byte	0x1d60
 9998 1d4f 27       		.uleb128 0x27
 9999 1d50 D8000000 		.4byte	.Ldebug_ranges0+0xd8
 10000 1d54 28       		.uleb128 0x28
 10001 1d55 35280000 		.4byte	0x2835
 10002 1d59 28       		.uleb128 0x28
 10003 1d5a 41280000 		.4byte	0x2841
 10004 1d5e 00       		.byte	0
 10005 1d5f 00       		.byte	0
 10006 1d60 29       		.uleb128 0x29
 10007 1d61 BF1E0000 		.4byte	0x1ebf
 10008 1d65 12050000 		.4byte	.LBI106
 10009 1d69 03       		.byte	.LVU522
 10010 1d6a 12050000 		.4byte	.LBB106
 10011 1d6e 2A050000 		.4byte	.LBE106
 10012 1d72 01       		.byte	0x1
 10013 1d73 8507     		.2byte	0x785
 10014 1d75 08       		.byte	0x8
 10015 1d76 A21D0000 		.4byte	0x1da2
 10016 1d7a 36       		.uleb128 0x36
 10017 1d7b D21E0000 		.4byte	0x1ed2
 10018 1d7f A4160000 		.4byte	.LLST71
 10019 1d83 A0160000 		.4byte	.LVUS71
 10020 1d87 37       		.uleb128 0x37
 10021 1d88 DF1E0000 		.4byte	0x1edf
 10022 1d8c C6160000 		.4byte	.LLST72
 10023 1d90 C2160000 		.4byte	.LVUS72
 10024 1d94 37       		.uleb128 0x37
 10025 1d95 EC1E0000 		.4byte	0x1eec
 10026 1d99 EA160000 		.4byte	.LLST73
 10027 1d9d E6160000 		.4byte	.LVUS73
 10028 1da1 00       		.byte	0
 10029 1da2 29       		.uleb128 0x29
 10030 1da3 08280000 		.4byte	0x2808
 10031 1da7 62050000 		.4byte	.LBI108
 10032 1dab 03       		.byte	.LVU557
 10033 1dac 62050000 		.4byte	.LBB108
 10034 1db0 66050000 		.4byte	.LBE108
 10035 1db4 01       		.byte	0x1
 10036 1db5 A707     		.2byte	0x7a7
 10037 1db7 03       		.byte	0x3
 10038 1db8 C21D0000 		.4byte	0x1dc2
 10039 1dbc 2A       		.uleb128 0x2a
 10040 1dbd 16280000 		.4byte	0x2816
 10041 1dc1 00       		.byte	0
 10042 1dc2 2B       		.uleb128 0x2b
 10043 1dc3 48050000 		.4byte	.LVL131
 10044 1dc7 44070000 		.4byte	0x744
 10045 1dcb D61D0000 		.4byte	0x1dd6
 10046 1dcf 21       		.uleb128 0x21
 10047 1dd0 01       		.byte	0x1
ARM GAS  /tmp/ccGXytas.s 			page 303


 10048 1dd1 50       		.byte	0x50
 10049 1dd2 02       		.byte	0x2
 10050 1dd3 78       		.byte	0x78
 10051 1dd4 00       		.sleb128 0
 10052 1dd5 00       		.byte	0
 10053 1dd6 2B       		.uleb128 0x2b
 10054 1dd7 62050000 		.4byte	.LVL132
 10055 1ddb 7F070000 		.4byte	0x77f
 10056 1ddf EA1D0000 		.4byte	0x1dea
 10057 1de3 21       		.uleb128 0x21
 10058 1de4 01       		.byte	0x1
 10059 1de5 51       		.byte	0x51
 10060 1de6 02       		.byte	0x2
 10061 1de7 78       		.byte	0x78
 10062 1de8 00       		.sleb128 0
 10063 1de9 00       		.byte	0
 10064 1dea 30       		.uleb128 0x30
 10065 1deb 74050000 		.4byte	.LVL135
 10066 1def 7F070000 		.4byte	0x77f
 10067 1df3 21       		.uleb128 0x21
 10068 1df4 01       		.byte	0x1
 10069 1df5 51       		.byte	0x51
 10070 1df6 02       		.byte	0x2
 10071 1df7 75       		.byte	0x75
 10072 1df8 18       		.sleb128 24
 10073 1df9 00       		.byte	0
 10074 1dfa 00       		.byte	0
 10075 1dfb 24       		.uleb128 0x24
 10076 1dfc 01       		.byte	0x1
 10077 1dfd 45100000 		.4byte	.LASF224
 10078 1e01 01       		.byte	0x1
 10079 1e02 3307     		.2byte	0x733
 10080 1e04 07       		.byte	0x7
 10081 1e05 01       		.byte	0x1
 10082 1e06 80040000 		.4byte	.LFB17
 10083 1e0a F8040000 		.4byte	.LFE17
 10084 1e0e 08170000 		.4byte	.LLST61
 10085 1e12 01       		.byte	0x1
 10086 1e13 BF1E0000 		.4byte	0x1ebf
 10087 1e17 1D       		.uleb128 0x1d
 10088 1e18 04030000 		.4byte	.LASF222
 10089 1e1c 01       		.byte	0x1
 10090 1e1d 3307     		.2byte	0x733
 10091 1e1f 21       		.byte	0x21
 10092 1e20 83020000 		.4byte	0x283
 10093 1e24 48170000 		.4byte	.LLST62
 10094 1e28 40170000 		.4byte	.LVUS62
 10095 1e2c 1E       		.uleb128 0x1e
 10096 1e2d 1D100000 		.4byte	.LASF123
 10097 1e31 01       		.byte	0x1
 10098 1e32 3507     		.2byte	0x735
 10099 1e34 10       		.byte	0x10
 10100 1e35 5E050000 		.4byte	0x55e
 10101 1e39 8D170000 		.4byte	.LLST63
 10102 1e3d 85170000 		.4byte	.LVUS63
 10103 1e41 29       		.uleb128 0x29
 10104 1e42 BF1E0000 		.4byte	0x1ebf
ARM GAS  /tmp/ccGXytas.s 			page 304


 10105 1e46 92040000 		.4byte	.LBI94
 10106 1e4a 01       		.byte	.LVU473
 10107 1e4b 92040000 		.4byte	.LBB94
 10108 1e4f A8040000 		.4byte	.LBE94
 10109 1e53 01       		.byte	0x1
 10110 1e54 4007     		.2byte	0x740
 10111 1e56 09       		.byte	0x9
 10112 1e57 831E0000 		.4byte	0x1e83
 10113 1e5b 36       		.uleb128 0x36
 10114 1e5c D21E0000 		.4byte	0x1ed2
 10115 1e60 CC170000 		.4byte	.LLST64
 10116 1e64 CA170000 		.4byte	.LVUS64
 10117 1e68 37       		.uleb128 0x37
 10118 1e69 DF1E0000 		.4byte	0x1edf
 10119 1e6d E3170000 		.4byte	.LLST65
 10120 1e71 DF170000 		.4byte	.LVUS65
 10121 1e75 37       		.uleb128 0x37
 10122 1e76 EC1E0000 		.4byte	0x1eec
 10123 1e7a 07180000 		.4byte	.LLST66
 10124 1e7e 03180000 		.4byte	.LVUS66
 10125 1e82 00       		.byte	0
 10126 1e83 1F       		.uleb128 0x1f
 10127 1e84 92040000 		.4byte	.LVL120
 10128 1e88 9A070000 		.4byte	0x79a
 10129 1e8c 2B       		.uleb128 0x2b
 10130 1e8d B0040000 		.4byte	.LVL122
 10131 1e91 44070000 		.4byte	0x744
 10132 1e95 A01E0000 		.4byte	0x1ea0
 10133 1e99 21       		.uleb128 0x21
 10134 1e9a 01       		.byte	0x1
 10135 1e9b 50       		.byte	0x50
 10136 1e9c 02       		.byte	0x2
 10137 1e9d 76       		.byte	0x76
 10138 1e9e 00       		.sleb128 0
 10139 1e9f 00       		.byte	0
 10140 1ea0 2B       		.uleb128 0x2b
 10141 1ea1 CC040000 		.4byte	.LVL123
 10142 1ea5 7F070000 		.4byte	0x77f
 10143 1ea9 B41E0000 		.4byte	0x1eb4
 10144 1ead 21       		.uleb128 0x21
 10145 1eae 01       		.byte	0x1
 10146 1eaf 51       		.byte	0x51
 10147 1eb0 02       		.byte	0x2
 10148 1eb1 76       		.byte	0x76
 10149 1eb2 00       		.sleb128 0
 10150 1eb3 00       		.byte	0
 10151 1eb4 22       		.uleb128 0x22
 10152 1eb5 F2040000 		.4byte	.LVL125
 10153 1eb9 01       		.byte	0x1
 10154 1eba 74070000 		.4byte	0x774
 10155 1ebe 00       		.byte	0
 10156 1ebf 33       		.uleb128 0x33
 10157 1ec0 320C0000 		.4byte	.LASF225
 10158 1ec4 01       		.byte	0x1
 10159 1ec5 0507     		.2byte	0x705
 10160 1ec7 14       		.byte	0x14
 10161 1ec8 01       		.byte	0x1
ARM GAS  /tmp/ccGXytas.s 			page 305


 10162 1ec9 32010000 		.4byte	0x132
 10163 1ecd 01       		.byte	0x1
 10164 1ece FA1E0000 		.4byte	0x1efa
 10165 1ed2 32       		.uleb128 0x32
 10166 1ed3 9D0A0000 		.4byte	.LASF122
 10167 1ed7 01       		.byte	0x1
 10168 1ed8 0507     		.2byte	0x705
 10169 1eda 3F       		.byte	0x3f
 10170 1edb 8F020000 		.4byte	0x28f
 10171 1edf 25       		.uleb128 0x25
 10172 1ee0 230D0000 		.4byte	.LASF124
 10173 1ee4 01       		.byte	0x1
 10174 1ee5 0707     		.2byte	0x707
 10175 1ee7 0D       		.byte	0xd
 10176 1ee8 32010000 		.4byte	0x132
 10177 1eec 25       		.uleb128 0x25
 10178 1eed 1D100000 		.4byte	.LASF123
 10179 1ef1 01       		.byte	0x1
 10180 1ef2 0807     		.2byte	0x708
 10181 1ef4 16       		.byte	0x16
 10182 1ef5 B9130000 		.4byte	0x13b9
 10183 1ef9 00       		.byte	0
 10184 1efa 24       		.uleb128 0x24
 10185 1efb 01       		.byte	0x1
 10186 1efc FE0E0000 		.4byte	.LASF226
 10187 1f00 01       		.byte	0x1
 10188 1f01 A006     		.2byte	0x6a0
 10189 1f03 07       		.byte	0x7
 10190 1f04 01       		.byte	0x1
 10191 1f05 98080000 		.4byte	.LFB15
 10192 1f09 40090000 		.4byte	.LFE15
 10193 1f0d 2E180000 		.4byte	.LLST104
 10194 1f11 01       		.byte	0x1
 10195 1f12 BD1F0000 		.4byte	0x1fbd
 10196 1f16 1D       		.uleb128 0x1d
 10197 1f17 970C0000 		.4byte	.LASF227
 10198 1f1b 01       		.byte	0x1
 10199 1f1c A006     		.2byte	0x6a0
 10200 1f1e 22       		.byte	0x22
 10201 1f1f 83020000 		.4byte	0x283
 10202 1f23 5E180000 		.4byte	.LLST105
 10203 1f27 5A180000 		.4byte	.LVUS105
 10204 1f2b 1E       		.uleb128 0x1e
 10205 1f2c 1D100000 		.4byte	.LASF123
 10206 1f30 01       		.byte	0x1
 10207 1f31 A206     		.2byte	0x6a2
 10208 1f33 09       		.byte	0x9
 10209 1f34 53050000 		.4byte	0x553
 10210 1f38 7E180000 		.4byte	.LLST106
 10211 1f3c 7C180000 		.4byte	.LVUS106
 10212 1f40 1F       		.uleb128 0x1f
 10213 1f41 A2080000 		.4byte	.LVL203
 10214 1f45 9A070000 		.4byte	0x79a
 10215 1f49 2B       		.uleb128 0x2b
 10216 1f4a AE080000 		.4byte	.LVL205
 10217 1f4e 44070000 		.4byte	0x744
 10218 1f52 5D1F0000 		.4byte	0x1f5d
ARM GAS  /tmp/ccGXytas.s 			page 306


 10219 1f56 21       		.uleb128 0x21
 10220 1f57 01       		.byte	0x1
 10221 1f58 50       		.byte	0x50
 10222 1f59 02       		.byte	0x2
 10223 1f5a 76       		.byte	0x76
 10224 1f5b 00       		.sleb128 0
 10225 1f5c 00       		.byte	0
 10226 1f5d 2B       		.uleb128 0x2b
 10227 1f5e D4080000 		.4byte	.LVL206
 10228 1f62 44070000 		.4byte	0x744
 10229 1f66 711F0000 		.4byte	0x1f71
 10230 1f6a 21       		.uleb128 0x21
 10231 1f6b 01       		.byte	0x1
 10232 1f6c 50       		.byte	0x50
 10233 1f6d 02       		.byte	0x2
 10234 1f6e 74       		.byte	0x74
 10235 1f6f 18       		.sleb128 24
 10236 1f70 00       		.byte	0
 10237 1f71 2B       		.uleb128 0x2b
 10238 1f72 DC080000 		.4byte	.LVL207
 10239 1f76 7F070000 		.4byte	0x77f
 10240 1f7a 8E1F0000 		.4byte	0x1f8e
 10241 1f7e 21       		.uleb128 0x21
 10242 1f7f 01       		.byte	0x1
 10243 1f80 50       		.byte	0x50
 10244 1f81 05       		.byte	0x5
 10245 1f82 03       		.byte	0x3
 10246 1f83 0C000000 		.4byte	.LANCHOR0+12
 10247 1f87 21       		.uleb128 0x21
 10248 1f88 01       		.byte	0x1
 10249 1f89 51       		.byte	0x51
 10250 1f8a 02       		.byte	0x2
 10251 1f8b 76       		.byte	0x76
 10252 1f8c 00       		.sleb128 0
 10253 1f8d 00       		.byte	0
 10254 1f8e 1F       		.uleb128 0x1f
 10255 1f8f EE080000 		.4byte	.LVL208
 10256 1f93 74070000 		.4byte	0x774
 10257 1f97 1F       		.uleb128 0x1f
 10258 1f98 F8080000 		.4byte	.LVL209
 10259 1f9c 9A070000 		.4byte	0x79a
 10260 1fa0 1F       		.uleb128 0x1f
 10261 1fa1 FC080000 		.4byte	.LVL210
 10262 1fa5 38100000 		.4byte	0x1038
 10263 1fa9 1F       		.uleb128 0x1f
 10264 1faa 00090000 		.4byte	.LVL211
 10265 1fae 74070000 		.4byte	0x774
 10266 1fb2 22       		.uleb128 0x22
 10267 1fb3 36090000 		.4byte	.LVL214
 10268 1fb7 01       		.byte	0x1
 10269 1fb8 EA170000 		.4byte	0x17ea
 10270 1fbc 00       		.byte	0
 10271 1fbd 24       		.uleb128 0x24
 10272 1fbe 01       		.byte	0x1
 10273 1fbf 540A0000 		.4byte	.LASF228
 10274 1fc3 01       		.byte	0x1
 10275 1fc4 FC05     		.2byte	0x5fc
ARM GAS  /tmp/ccGXytas.s 			page 307


 10276 1fc6 07       		.byte	0x7
 10277 1fc7 01       		.byte	0x1
 10278 1fc8 BC030000 		.4byte	.LFB14
 10279 1fcc 80040000 		.4byte	.LFE14
 10280 1fd0 91180000 		.4byte	.LLST54
 10281 1fd4 01       		.byte	0x1
 10282 1fd5 93200000 		.4byte	0x2093
 10283 1fd9 1D       		.uleb128 0x1d
 10284 1fda 9D0A0000 		.4byte	.LASF122
 10285 1fde 01       		.byte	0x1
 10286 1fdf FC05     		.2byte	0x5fc
 10287 1fe1 26       		.byte	0x26
 10288 1fe2 83020000 		.4byte	0x283
 10289 1fe6 CD180000 		.4byte	.LLST55
 10290 1fea C9180000 		.4byte	.LVUS55
 10291 1fee 1D       		.uleb128 0x1d
 10292 1fef 68090000 		.4byte	.LASF229
 10293 1ff3 01       		.byte	0x1
 10294 1ff4 FC05     		.2byte	0x5fc
 10295 1ff6 39       		.byte	0x39
 10296 1ff7 48010000 		.4byte	0x148
 10297 1ffb F9180000 		.4byte	.LLST56
 10298 1fff EB180000 		.4byte	.LVUS56
 10299 2003 1E       		.uleb128 0x1e
 10300 2004 1D100000 		.4byte	.LASF123
 10301 2008 01       		.byte	0x1
 10302 2009 FE05     		.2byte	0x5fe
 10303 200b 09       		.byte	0x9
 10304 200c 53050000 		.4byte	0x553
 10305 2010 7F190000 		.4byte	.LLST57
 10306 2014 7B190000 		.4byte	.LVUS57
 10307 2018 1E       		.uleb128 0x1e
 10308 2019 B1100000 		.4byte	.LASF230
 10309 201d 01       		.byte	0x1
 10310 201e FF05     		.2byte	0x5ff
 10311 2020 0E       		.byte	0xe
 10312 2021 48010000 		.4byte	0x148
 10313 2025 A1190000 		.4byte	.LLST58
 10314 2029 9D190000 		.4byte	.LVUS58
 10315 202d 1E       		.uleb128 0x1e
 10316 202e B70E0000 		.4byte	.LASF148
 10317 2032 01       		.byte	0x1
 10318 2033 FF05     		.2byte	0x5ff
 10319 2035 25       		.byte	0x25
 10320 2036 48010000 		.4byte	0x148
 10321 203a C1190000 		.4byte	.LLST59
 10322 203e BF190000 		.4byte	.LVUS59
 10323 2042 1E       		.uleb128 0x1e
 10324 2043 73030000 		.4byte	.LASF223
 10325 2047 01       		.byte	0x1
 10326 2048 0006     		.2byte	0x600
 10327 204a 0D       		.byte	0xd
 10328 204b 32010000 		.4byte	0x132
 10329 204f DA190000 		.4byte	.LLST60
 10330 2053 D4190000 		.4byte	.LVUS60
 10331 2057 1F       		.uleb128 0x1f
 10332 2058 CE030000 		.4byte	.LVL107
ARM GAS  /tmp/ccGXytas.s 			page 308


 10333 205c 9A070000 		.4byte	0x79a
 10334 2060 2B       		.uleb128 0x2b
 10335 2061 22040000 		.4byte	.LVL114
 10336 2065 44070000 		.4byte	0x744
 10337 2069 74200000 		.4byte	0x2074
 10338 206d 21       		.uleb128 0x21
 10339 206e 01       		.byte	0x1
 10340 206f 50       		.byte	0x50
 10341 2070 02       		.byte	0x2
 10342 2071 78       		.byte	0x78
 10343 2072 00       		.sleb128 0
 10344 2073 00       		.byte	0
 10345 2074 2B       		.uleb128 0x2b
 10346 2075 4A040000 		.4byte	.LVL115
 10347 2079 7F070000 		.4byte	0x77f
 10348 207d 88200000 		.4byte	0x2088
 10349 2081 21       		.uleb128 0x21
 10350 2082 01       		.byte	0x1
 10351 2083 51       		.byte	0x51
 10352 2084 02       		.byte	0x2
 10353 2085 78       		.byte	0x78
 10354 2086 00       		.sleb128 0
 10355 2087 00       		.byte	0
 10356 2088 22       		.uleb128 0x22
 10357 2089 68040000 		.4byte	.LVL118
 10358 208d 01       		.byte	0x1
 10359 208e 74070000 		.4byte	0x774
 10360 2092 00       		.byte	0
 10361 2093 2D       		.uleb128 0x2d
 10362 2094 01       		.byte	0x1
 10363 2095 BA090000 		.4byte	.LASF231
 10364 2099 01       		.byte	0x1
 10365 209a D405     		.2byte	0x5d4
 10366 209c 0E       		.byte	0xe
 10367 209d 01       		.byte	0x1
 10368 209e 48010000 		.4byte	0x148
 10369 20a2 94030000 		.4byte	.LFB13
 10370 20a6 BC030000 		.4byte	.LFE13
 10371 20aa 02       		.byte	0x2
 10372 20ab 7D       		.byte	0x7d
 10373 20ac 00       		.sleb128 0
 10374 20ad 01       		.byte	0x1
 10375 20ae 58210000 		.4byte	0x2158
 10376 20b2 1D       		.uleb128 0x1d
 10377 20b3 9D0A0000 		.4byte	.LASF122
 10378 20b7 01       		.byte	0x1
 10379 20b8 D405     		.2byte	0x5d4
 10380 20ba 3B       		.byte	0x3b
 10381 20bb 8F020000 		.4byte	0x28f
 10382 20bf 071A0000 		.4byte	.LLST48
 10383 20c3 051A0000 		.4byte	.LVUS48
 10384 20c7 1E       		.uleb128 0x1e
 10385 20c8 1D100000 		.4byte	.LASF123
 10386 20cc 01       		.byte	0x1
 10387 20cd D605     		.2byte	0x5d6
 10388 20cf 0F       		.byte	0xf
 10389 20d0 B3130000 		.4byte	0x13b3
ARM GAS  /tmp/ccGXytas.s 			page 309


 10390 20d4 1C1A0000 		.4byte	.LLST49
 10391 20d8 1A1A0000 		.4byte	.LVUS49
 10392 20dc 1E       		.uleb128 0x1e
 10393 20dd 12030000 		.4byte	.LASF143
 10394 20e1 01       		.byte	0x1
 10395 20e2 D705     		.2byte	0x5d7
 10396 20e4 0E       		.byte	0xe
 10397 20e5 48010000 		.4byte	0x148
 10398 20e9 311A0000 		.4byte	.LLST50
 10399 20ed 2F1A0000 		.4byte	.LVUS50
 10400 20f1 1E       		.uleb128 0x1e
 10401 20f2 3B040000 		.4byte	.LASF232
 10402 20f6 01       		.byte	0x1
 10403 20f7 D705     		.2byte	0x5d7
 10404 20f9 18       		.byte	0x18
 10405 20fa 48010000 		.4byte	0x148
 10406 20fe 461A0000 		.4byte	.LLST51
 10407 2102 441A0000 		.4byte	.LVUS51
 10408 2106 29       		.uleb128 0x29
 10409 2107 23280000 		.4byte	0x2823
 10410 210b 94030000 		.4byte	.LBI88
 10411 210f 05       		.byte	.LVU368
 10412 2110 94030000 		.4byte	.LBB88
 10413 2114 A8030000 		.4byte	.LBE88
 10414 2118 01       		.byte	0x1
 10415 2119 EB05     		.2byte	0x5eb
 10416 211b 1B       		.byte	0x1b
 10417 211c 33210000 		.4byte	0x2133
 10418 2120 37       		.uleb128 0x37
 10419 2121 35280000 		.4byte	0x2835
 10420 2125 5B1A0000 		.4byte	.LLST52
 10421 2129 591A0000 		.4byte	.LVUS52
 10422 212d 28       		.uleb128 0x28
 10423 212e 41280000 		.4byte	0x2841
 10424 2132 00       		.byte	0
 10425 2133 42       		.uleb128 0x42
 10426 2134 08280000 		.4byte	0x2808
 10427 2138 B0030000 		.4byte	.LBI90
 10428 213c 01       		.byte	.LVU379
 10429 213d B0030000 		.4byte	.LBB90
 10430 2141 B4030000 		.4byte	.LBE90
 10431 2145 01       		.byte	0x1
 10432 2146 F205     		.2byte	0x5f2
 10433 2148 03       		.byte	0x3
 10434 2149 36       		.uleb128 0x36
 10435 214a 16280000 		.4byte	0x2816
 10436 214e 701A0000 		.4byte	.LLST53
 10437 2152 6E1A0000 		.4byte	.LVUS53
 10438 2156 00       		.byte	0
 10439 2157 00       		.byte	0
 10440 2158 23       		.uleb128 0x23
 10441 2159 01       		.byte	0x1
 10442 215a 94030000 		.4byte	.LASF233
 10443 215e 01       		.byte	0x1
 10444 215f BE05     		.2byte	0x5be
 10445 2161 0E       		.byte	0xe
 10446 2162 01       		.byte	0x1
ARM GAS  /tmp/ccGXytas.s 			page 310


 10447 2163 48010000 		.4byte	0x148
 10448 2167 78030000 		.4byte	.LFB12
 10449 216b 94030000 		.4byte	.LFE12
 10450 216f 831A0000 		.4byte	.LLST44
 10451 2173 01       		.byte	0x1
 10452 2174 CA210000 		.4byte	0x21ca
 10453 2178 1D       		.uleb128 0x1d
 10454 2179 9D0A0000 		.4byte	.LASF122
 10455 217d 01       		.byte	0x1
 10456 217e BE05     		.2byte	0x5be
 10457 2180 34       		.byte	0x34
 10458 2181 8F020000 		.4byte	0x28f
 10459 2185 A71A0000 		.4byte	.LLST45
 10460 2189 A31A0000 		.4byte	.LVUS45
 10461 218d 1E       		.uleb128 0x1e
 10462 218e 1D100000 		.4byte	.LASF123
 10463 2192 01       		.byte	0x1
 10464 2193 C005     		.2byte	0x5c0
 10465 2195 0F       		.byte	0xf
 10466 2196 B3130000 		.4byte	0x13b3
 10467 219a C71A0000 		.4byte	.LLST46
 10468 219e C51A0000 		.4byte	.LVUS46
 10469 21a2 1E       		.uleb128 0x1e
 10470 21a3 12030000 		.4byte	.LASF143
 10471 21a7 01       		.byte	0x1
 10472 21a8 C105     		.2byte	0x5c1
 10473 21aa 0E       		.byte	0xe
 10474 21ab 48010000 		.4byte	0x148
 10475 21af DE1A0000 		.4byte	.LLST47
 10476 21b3 DA1A0000 		.4byte	.LVUS47
 10477 21b7 1F       		.uleb128 0x1f
 10478 21b8 80030000 		.4byte	.LVL94
 10479 21bc 9A070000 		.4byte	0x79a
 10480 21c0 1F       		.uleb128 0x1f
 10481 21c1 8C030000 		.4byte	.LVL97
 10482 21c5 74070000 		.4byte	0x774
 10483 21c9 00       		.byte	0
 10484 21ca 41       		.uleb128 0x41
 10485 21cb 01       		.byte	0x1
 10486 21cc 59080000 		.4byte	.LASF234
 10487 21d0 01       		.byte	0x1
 10488 21d1 6205     		.2byte	0x562
 10489 21d3 0D       		.byte	0xd
 10490 21d4 01       		.byte	0x1
 10491 21d5 9A030000 		.4byte	0x39a
 10492 21d9 01       		.byte	0x1
 10493 21da 2D220000 		.4byte	0x222d
 10494 21de 32       		.uleb128 0x32
 10495 21df 9D0A0000 		.4byte	.LASF122
 10496 21e3 01       		.byte	0x1
 10497 21e4 6205     		.2byte	0x562
 10498 21e6 29       		.byte	0x29
 10499 21e7 83020000 		.4byte	0x283
 10500 21eb 25       		.uleb128 0x25
 10501 21ec FC020000 		.4byte	.LASF235
 10502 21f0 01       		.byte	0x1
 10503 21f1 6405     		.2byte	0x564
ARM GAS  /tmp/ccGXytas.s 			page 311


 10504 21f3 0D       		.byte	0xd
 10505 21f4 9A030000 		.4byte	0x39a
 10506 21f8 25       		.uleb128 0x25
 10507 21f9 90000000 		.4byte	.LASF236
 10508 21fd 01       		.byte	0x1
 10509 21fe 6505     		.2byte	0x565
 10510 2200 11       		.byte	0x11
 10511 2201 3D160000 		.4byte	0x163d
 10512 2205 25       		.uleb128 0x25
 10513 2206 47010000 		.4byte	.LASF237
 10514 220a 01       		.byte	0x1
 10515 220b 6505     		.2byte	0x565
 10516 220d 1F       		.byte	0x1f
 10517 220e 3D160000 		.4byte	0x163d
 10518 2212 25       		.uleb128 0x25
 10519 2213 BF020000 		.4byte	.LASF238
 10520 2217 01       		.byte	0x1
 10521 2218 6505     		.2byte	0x565
 10522 221a 2F       		.byte	0x2f
 10523 221b 3D160000 		.4byte	0x163d
 10524 221f 25       		.uleb128 0x25
 10525 2220 1D100000 		.4byte	.LASF123
 10526 2224 01       		.byte	0x1
 10527 2225 6605     		.2byte	0x566
 10528 2227 16       		.byte	0x16
 10529 2228 B9130000 		.4byte	0x13b9
 10530 222c 00       		.byte	0
 10531 222d 24       		.uleb128 0x24
 10532 222e 01       		.byte	0x1
 10533 222f C3060000 		.4byte	.LASF239
 10534 2233 01       		.byte	0x1
 10535 2234 3505     		.2byte	0x535
 10536 2236 07       		.byte	0x7
 10537 2237 01       		.byte	0x1
 10538 2238 1C080000 		.4byte	.LFB10
 10539 223c 4A080000 		.4byte	.LFE10
 10540 2240 FC1A0000 		.4byte	.LLST96
 10541 2244 01       		.byte	0x1
 10542 2245 99220000 		.4byte	0x2299
 10543 2249 1D       		.uleb128 0x1d
 10544 224a 0E0E0000 		.4byte	.LASF240
 10545 224e 01       		.byte	0x1
 10546 224f 3505     		.2byte	0x535
 10547 2251 24       		.byte	0x24
 10548 2252 6F010000 		.4byte	0x16f
 10549 2256 241B0000 		.4byte	.LLST97
 10550 225a 1C1B0000 		.4byte	.LVUS97
 10551 225e 1E       		.uleb128 0x1e
 10552 225f 0B0F0000 		.4byte	.LASF215
 10553 2263 01       		.byte	0x1
 10554 2264 3705     		.2byte	0x537
 10555 2266 0D       		.byte	0xd
 10556 2267 32010000 		.4byte	0x132
 10557 226b 701B0000 		.4byte	.LLST98
 10558 226f 6A1B0000 		.4byte	.LVUS98
 10559 2273 1F       		.uleb128 0x1f
 10560 2274 3C080000 		.4byte	.LVL193
ARM GAS  /tmp/ccGXytas.s 			page 312


 10561 2278 D01B0000 		.4byte	0x1bd0
 10562 227c 2B       		.uleb128 0x2b
 10563 227d 40080000 		.4byte	.LVL194
 10564 2281 2F080000 		.4byte	0x82f
 10565 2285 8F220000 		.4byte	0x228f
 10566 2289 21       		.uleb128 0x21
 10567 228a 01       		.byte	0x1
 10568 228b 51       		.byte	0x51
 10569 228c 01       		.byte	0x1
 10570 228d 30       		.byte	0x30
 10571 228e 00       		.byte	0
 10572 228f 1F       		.uleb128 0x1f
 10573 2290 44080000 		.4byte	.LVL195
 10574 2294 021B0000 		.4byte	0x1b02
 10575 2298 00       		.byte	0
 10576 2299 24       		.uleb128 0x24
 10577 229a 01       		.byte	0x1
 10578 229b 980E0000 		.4byte	.LASF241
 10579 229f 01       		.byte	0x1
 10580 22a0 E104     		.2byte	0x4e1
 10581 22a2 07       		.byte	0x7
 10582 22a3 01       		.byte	0x1
 10583 22a4 CC070000 		.4byte	.LFB9
 10584 22a8 1C080000 		.4byte	.LFE9
 10585 22ac 9B1B0000 		.4byte	.LLST89
 10586 22b0 01       		.byte	0x1
 10587 22b1 5F230000 		.4byte	0x235f
 10588 22b5 1D       		.uleb128 0x1d
 10589 22b6 C50C0000 		.4byte	.LASF242
 10590 22ba 01       		.byte	0x1
 10591 22bb E104     		.2byte	0x4e1
 10592 22bd 2B       		.byte	0x2b
 10593 22be 9C140000 		.4byte	0x149c
 10594 22c2 C31B0000 		.4byte	.LLST90
 10595 22c6 BB1B0000 		.4byte	.LVUS90
 10596 22ca 1D       		.uleb128 0x1d
 10597 22cb D40F0000 		.4byte	.LASF243
 10598 22cf 01       		.byte	0x1
 10599 22d0 E104     		.2byte	0x4e1
 10600 22d2 50       		.byte	0x50
 10601 22d3 6F010000 		.4byte	0x16f
 10602 22d7 0D1C0000 		.4byte	.LLST91
 10603 22db 091C0000 		.4byte	.LVUS91
 10604 22df 1E       		.uleb128 0x1e
 10605 22e0 02100000 		.4byte	.LASF120
 10606 22e4 01       		.byte	0x1
 10607 22e5 E304     		.2byte	0x4e3
 10608 22e7 0D       		.byte	0xd
 10609 22e8 5E010000 		.4byte	0x15e
 10610 22ec 3C1C0000 		.4byte	.LLST92
 10611 22f0 341C0000 		.4byte	.LVUS92
 10612 22f4 1E       		.uleb128 0x1e
 10613 22f5 0B0F0000 		.4byte	.LASF215
 10614 22f9 01       		.byte	0x1
 10615 22fa E404     		.2byte	0x4e4
 10616 22fc 0D       		.byte	0xd
 10617 22fd 32010000 		.4byte	0x132
ARM GAS  /tmp/ccGXytas.s 			page 313


 10618 2301 8A1C0000 		.4byte	.LLST93
 10619 2305 881C0000 		.4byte	.LVUS93
 10620 2309 1E       		.uleb128 0x1e
 10621 230a CF070000 		.4byte	.LASF244
 10622 230e 01       		.byte	0x1
 10623 230f E404     		.2byte	0x4e4
 10624 2311 1E       		.byte	0x1e
 10625 2312 32010000 		.4byte	0x132
 10626 2316 A11C0000 		.4byte	.LLST94
 10627 231a 9D1C0000 		.4byte	.LVUS94
 10628 231e 3D       		.uleb128 0x3d
 10629 231f 10010000 		.4byte	.Ldebug_ranges0+0x110
 10630 2323 4C230000 		.4byte	0x234c
 10631 2327 1E       		.uleb128 0x1e
 10632 2328 69060000 		.4byte	.LASF121
 10633 232c 01       		.byte	0x1
 10634 232d EE04     		.2byte	0x4ee
 10635 232f 15       		.byte	0x15
 10636 2330 6F010000 		.4byte	0x16f
 10637 2334 C51C0000 		.4byte	.LLST95
 10638 2338 C11C0000 		.4byte	.LVUS95
 10639 233c 30       		.uleb128 0x30
 10640 233d 14080000 		.4byte	.LVL189
 10641 2341 2F080000 		.4byte	0x82f
 10642 2345 21       		.uleb128 0x21
 10643 2346 01       		.byte	0x1
 10644 2347 51       		.byte	0x51
 10645 2348 01       		.byte	0x1
 10646 2349 30       		.byte	0x30
 10647 234a 00       		.byte	0
 10648 234b 00       		.byte	0
 10649 234c 1F       		.uleb128 0x1f
 10650 234d D2070000 		.4byte	.LVL180
 10651 2351 D01B0000 		.4byte	0x1bd0
 10652 2355 1F       		.uleb128 0x1f
 10653 2356 EC070000 		.4byte	.LVL185
 10654 235a 021B0000 		.4byte	0x1b02
 10655 235e 00       		.byte	0
 10656 235f 24       		.uleb128 0x24
 10657 2360 01       		.byte	0x1
 10658 2361 D00A0000 		.4byte	.LASF245
 10659 2365 01       		.byte	0x1
 10660 2366 8504     		.2byte	0x485
 10661 2368 07       		.byte	0x7
 10662 2369 01       		.byte	0x1
 10663 236a 74020000 		.4byte	.LFB8
 10664 236e 14030000 		.4byte	.LFE8
 10665 2372 E31C0000 		.4byte	.LLST32
 10666 2376 01       		.byte	0x1
 10667 2377 43240000 		.4byte	0x2443
 10668 237b 1D       		.uleb128 0x1d
 10669 237c 7B0F0000 		.4byte	.LASF246
 10670 2380 01       		.byte	0x1
 10671 2381 8504     		.2byte	0x485
 10672 2383 21       		.byte	0x21
 10673 2384 83020000 		.4byte	0x283
 10674 2388 071D0000 		.4byte	.LLST33
ARM GAS  /tmp/ccGXytas.s 			page 314


 10675 238c 031D0000 		.4byte	.LVUS33
 10676 2390 1E       		.uleb128 0x1e
 10677 2391 1D100000 		.4byte	.LASF123
 10678 2395 01       		.byte	0x1
 10679 2396 8704     		.2byte	0x487
 10680 2398 09       		.byte	0x9
 10681 2399 53050000 		.4byte	0x553
 10682 239d 271D0000 		.4byte	.LLST34
 10683 23a1 251D0000 		.4byte	.LVUS34
 10684 23a5 26       		.uleb128 0x26
 10685 23a6 55100000 		.4byte	0x1055
 10686 23aa FC020000 		.4byte	.LBI76
 10687 23ae 01       		.byte	.LVU300
 10688 23af A0000000 		.4byte	.Ldebug_ranges0+0xa0
 10689 23b3 01       		.byte	0x1
 10690 23b4 C104     		.2byte	0x4c1
 10691 23b6 05       		.byte	0x5
 10692 23b7 E2230000 		.4byte	0x23e2
 10693 23bb 36       		.uleb128 0x36
 10694 23bc 64100000 		.4byte	0x1064
 10695 23c0 3C1D0000 		.4byte	.LLST35
 10696 23c4 3A1D0000 		.4byte	.LVUS35
 10697 23c8 1F       		.uleb128 0x1f
 10698 23c9 00030000 		.4byte	.LVL79
 10699 23cd 01080000 		.4byte	0x801
 10700 23d1 30       		.uleb128 0x30
 10701 23d2 06030000 		.4byte	.LVL80
 10702 23d6 01080000 		.4byte	0x801
 10703 23da 21       		.uleb128 0x21
 10704 23db 01       		.byte	0x1
 10705 23dc 50       		.byte	0x50
 10706 23dd 02       		.byte	0x2
 10707 23de 75       		.byte	0x75
 10708 23df 00       		.sleb128 0
 10709 23e0 00       		.byte	0
 10710 23e1 00       		.byte	0
 10711 23e2 1F       		.uleb128 0x1f
 10712 23e3 7E020000 		.4byte	.LVL71
 10713 23e7 9A070000 		.4byte	0x79a
 10714 23eb 2B       		.uleb128 0x2b
 10715 23ec 8A020000 		.4byte	.LVL73
 10716 23f0 44070000 		.4byte	0x744
 10717 23f4 FF230000 		.4byte	0x23ff
 10718 23f8 21       		.uleb128 0x21
 10719 23f9 01       		.byte	0x1
 10720 23fa 50       		.byte	0x50
 10721 23fb 02       		.byte	0x2
 10722 23fc 76       		.byte	0x76
 10723 23fd 00       		.sleb128 0
 10724 23fe 00       		.byte	0
 10725 23ff 2B       		.uleb128 0x2b
 10726 2400 B0020000 		.4byte	.LVL74
 10727 2404 44070000 		.4byte	0x744
 10728 2408 13240000 		.4byte	0x2413
 10729 240c 21       		.uleb128 0x21
 10730 240d 01       		.byte	0x1
 10731 240e 50       		.byte	0x50
ARM GAS  /tmp/ccGXytas.s 			page 315


 10732 240f 02       		.byte	0x2
 10733 2410 75       		.byte	0x75
 10734 2411 18       		.sleb128 24
 10735 2412 00       		.byte	0
 10736 2413 2B       		.uleb128 0x2b
 10737 2414 C8020000 		.4byte	.LVL75
 10738 2418 7F070000 		.4byte	0x77f
 10739 241c 30240000 		.4byte	0x2430
 10740 2420 21       		.uleb128 0x21
 10741 2421 01       		.byte	0x1
 10742 2422 50       		.byte	0x50
 10743 2423 05       		.byte	0x5
 10744 2424 03       		.byte	0x3
 10745 2425 2C000000 		.4byte	.LANCHOR0+44
 10746 2429 21       		.uleb128 0x21
 10747 242a 01       		.byte	0x1
 10748 242b 51       		.byte	0x51
 10749 242c 02       		.byte	0x2
 10750 242d 76       		.byte	0x76
 10751 242e 00       		.sleb128 0
 10752 242f 00       		.byte	0
 10753 2430 1F       		.uleb128 0x1f
 10754 2431 D2020000 		.4byte	.LVL76
 10755 2435 74070000 		.4byte	0x774
 10756 2439 1F       		.uleb128 0x1f
 10757 243a 0A030000 		.4byte	.LVL81
 10758 243e 38100000 		.4byte	0x1038
 10759 2442 00       		.byte	0
 10760 2443 31       		.uleb128 0x31
 10761 2444 31080000 		.4byte	.LASF247
 10762 2448 01       		.byte	0x1
 10763 2449 3004     		.2byte	0x430
 10764 244b 0D       		.byte	0xd
 10765 244c 01       		.byte	0x1
 10766 244d 01       		.byte	0x1
 10767 244e 60240000 		.4byte	0x2460
 10768 2452 32       		.uleb128 0x32
 10769 2453 67080000 		.4byte	.LASF248
 10770 2457 01       		.byte	0x1
 10771 2458 3004     		.2byte	0x430
 10772 245a 2E       		.byte	0x2e
 10773 245b 53050000 		.4byte	0x553
 10774 245f 00       		.byte	0
 10775 2460 31       		.uleb128 0x31
 10776 2461 930B0000 		.4byte	.LASF249
 10777 2465 01       		.byte	0x1
 10778 2466 3503     		.2byte	0x335
 10779 2468 0D       		.byte	0xd
 10780 2469 01       		.byte	0x1
 10781 246a 01       		.byte	0x1
 10782 246b F0240000 		.4byte	0x24f0
 10783 246f 32       		.uleb128 0x32
 10784 2470 78080000 		.4byte	.LASF250
 10785 2474 01       		.byte	0x1
 10786 2475 3503     		.2byte	0x335
 10787 2477 33       		.byte	0x33
 10788 2478 03010000 		.4byte	0x103
ARM GAS  /tmp/ccGXytas.s 			page 316


 10789 247c 32       		.uleb128 0x32
 10790 247d 8C060000 		.4byte	.LASF251
 10791 2481 01       		.byte	0x1
 10792 2482 3603     		.2byte	0x336
 10793 2484 1D       		.byte	0x1d
 10794 2485 C1000000 		.4byte	0xc1
 10795 2489 32       		.uleb128 0x32
 10796 248a C2070000 		.4byte	.LASF252
 10797 248e 01       		.byte	0x1
 10798 248f 3703     		.2byte	0x337
 10799 2491 19       		.byte	0x19
 10800 2492 FE000000 		.4byte	0xfe
 10801 2496 32       		.uleb128 0x32
 10802 2497 A80B0000 		.4byte	.LASF179
 10803 249b 01       		.byte	0x1
 10804 249c 3803     		.2byte	0x338
 10805 249e 17       		.byte	0x17
 10806 249f A4000000 		.4byte	0xa4
 10807 24a3 32       		.uleb128 0x32
 10808 24a4 79000000 		.4byte	.LASF42
 10809 24a8 01       		.byte	0x1
 10810 24a9 3903     		.2byte	0x339
 10811 24ab 16       		.byte	0x16
 10812 24ac 48010000 		.4byte	0x148
 10813 24b0 32       		.uleb128 0x32
 10814 24b1 7A100000 		.4byte	.LASF253
 10815 24b5 01       		.byte	0x1
 10816 24b6 3A03     		.2byte	0x33a
 10817 24b8 1F       		.byte	0x1f
 10818 24b9 F6240000 		.4byte	0x24f6
 10819 24bd 32       		.uleb128 0x32
 10820 24be 67080000 		.4byte	.LASF248
 10821 24c2 01       		.byte	0x1
 10822 24c3 3B03     		.2byte	0x33b
 10823 24c5 11       		.byte	0x11
 10824 24c6 53050000 		.4byte	0x553
 10825 24ca 32       		.uleb128 0x32
 10826 24cb 41020000 		.4byte	.LASF254
 10827 24cf 01       		.byte	0x1
 10828 24d0 3C03     		.2byte	0x33c
 10829 24d2 27       		.byte	0x27
 10830 24d3 01250000 		.4byte	0x2501
 10831 24d7 25       		.uleb128 0x25
 10832 24d8 38100000 		.4byte	.LASF39
 10833 24dc 01       		.byte	0x1
 10834 24dd 3E03     		.2byte	0x33e
 10835 24df 0E       		.byte	0xe
 10836 24e0 63040000 		.4byte	0x463
 10837 24e4 43       		.uleb128 0x43
 10838 24e5 7800     		.ascii	"x\000"
 10839 24e7 01       		.byte	0x1
 10840 24e8 3F03     		.2byte	0x33f
 10841 24ea 0D       		.byte	0xd
 10842 24eb 48010000 		.4byte	0x148
 10843 24ef 00       		.byte	0
 10844 24f0 07       		.uleb128 0x7
 10845 24f1 04       		.byte	0x4
ARM GAS  /tmp/ccGXytas.s 			page 317


 10846 24f2 83020000 		.4byte	0x283
 10847 24f6 06       		.uleb128 0x6
 10848 24f7 F0240000 		.4byte	0x24f0
 10849 24fb 07       		.uleb128 0x7
 10850 24fc 04       		.byte	0x4
 10851 24fd 5E040000 		.4byte	0x45e
 10852 2501 06       		.uleb128 0x6
 10853 2502 FB240000 		.4byte	0x24fb
 10854 2506 23       		.uleb128 0x23
 10855 2507 01       		.byte	0x1
 10856 2508 350F0000 		.4byte	.LASF255
 10857 250c 01       		.byte	0x1
 10858 250d DA02     		.2byte	0x2da
 10859 250f 0D       		.byte	0xd
 10860 2510 01       		.byte	0x1
 10861 2511 32010000 		.4byte	0x132
 10862 2515 E0000000 		.4byte	.LFB5
 10863 2519 74020000 		.4byte	.LFE5
 10864 251d 4F1D0000 		.4byte	.LLST10
 10865 2521 01       		.byte	0x1
 10866 2522 08280000 		.4byte	0x2808
 10867 2526 1D       		.uleb128 0x1d
 10868 2527 78080000 		.4byte	.LASF250
 10869 252b 01       		.byte	0x1
 10870 252c DA02     		.2byte	0x2da
 10871 252e 29       		.byte	0x29
 10872 252f 03010000 		.4byte	0x103
 10873 2533 7F1D0000 		.4byte	.LLST11
 10874 2537 6F1D0000 		.4byte	.LVUS11
 10875 253b 1D       		.uleb128 0x1d
 10876 253c 8C060000 		.4byte	.LASF251
 10877 2540 01       		.byte	0x1
 10878 2541 DB02     		.2byte	0x2db
 10879 2543 1B       		.byte	0x1b
 10880 2544 C1000000 		.4byte	0xc1
 10881 2548 0C1E0000 		.4byte	.LLST12
 10882 254c FA1D0000 		.4byte	.LVUS12
 10883 2550 1D       		.uleb128 0x1d
 10884 2551 C8030000 		.4byte	.LASF256
 10885 2555 01       		.byte	0x1
 10886 2556 DC02     		.2byte	0x2dc
 10887 2558 25       		.byte	0x25
 10888 2559 E8000000 		.4byte	0xe8
 10889 255d 981E0000 		.4byte	.LLST13
 10890 2561 941E0000 		.4byte	.LVUS13
 10891 2565 1D       		.uleb128 0x1d
 10892 2566 A80B0000 		.4byte	.LASF179
 10893 256a 01       		.byte	0x1
 10894 256b DD02     		.2byte	0x2dd
 10895 256d 15       		.byte	0x15
 10896 256e A4000000 		.4byte	0xa4
 10897 2572 CB1E0000 		.4byte	.LLST14
 10898 2576 BF1E0000 		.4byte	.LVUS14
 10899 257a 1D       		.uleb128 0x1d
 10900 257b 79000000 		.4byte	.LASF42
 10901 257f 01       		.byte	0x1
 10902 2580 DE02     		.2byte	0x2de
ARM GAS  /tmp/ccGXytas.s 			page 318


 10903 2582 14       		.byte	0x14
 10904 2583 48010000 		.4byte	0x148
 10905 2587 2D1F0000 		.4byte	.LLST15
 10906 258b 271F0000 		.4byte	.LVUS15
 10907 258f 1D       		.uleb128 0x1d
 10908 2590 7A100000 		.4byte	.LASF253
 10909 2594 01       		.byte	0x1
 10910 2595 DF02     		.2byte	0x2df
 10911 2597 1D       		.byte	0x1d
 10912 2598 F6240000 		.4byte	0x24f6
 10913 259c 5D1F0000 		.4byte	.LLST16
 10914 25a0 591F0000 		.4byte	.LVUS16
 10915 25a4 1E       		.uleb128 0x1e
 10916 25a5 67080000 		.4byte	.LASF248
 10917 25a9 01       		.byte	0x1
 10918 25aa E102     		.2byte	0x2e1
 10919 25ac 09       		.byte	0x9
 10920 25ad 53050000 		.4byte	0x553
 10921 25b1 891F0000 		.4byte	.LLST17
 10922 25b5 7D1F0000 		.4byte	.LVUS17
 10923 25b9 1E       		.uleb128 0x1e
 10924 25ba 230D0000 		.4byte	.LASF124
 10925 25be 01       		.byte	0x1
 10926 25bf E202     		.2byte	0x2e2
 10927 25c1 0D       		.byte	0xd
 10928 25c2 32010000 		.4byte	0x132
 10929 25c6 D61F0000 		.4byte	.LLST18
 10930 25ca D41F0000 		.4byte	.LVUS18
 10931 25ce 3D       		.uleb128 0x3d
 10932 25cf 30000000 		.4byte	.Ldebug_ranges0+0x30
 10933 25d3 25260000 		.4byte	0x2625
 10934 25d7 1E       		.uleb128 0x1e
 10935 25d8 7A0C0000 		.4byte	.LASF43
 10936 25dc 01       		.byte	0x1
 10937 25dd FF02     		.2byte	0x2ff
 10938 25df 10       		.byte	0x10
 10939 25e0 63040000 		.4byte	0x463
 10940 25e4 F61F0000 		.4byte	.LLST19
 10941 25e8 EA1F0000 		.4byte	.LVUS19
 10942 25ec 2B       		.uleb128 0x2b
 10943 25ed F6000000 		.4byte	.LVL25
 10944 25f1 16080000 		.4byte	0x816
 10945 25f5 00260000 		.4byte	0x2600
 10946 25f9 21       		.uleb128 0x21
 10947 25fa 01       		.byte	0x1
 10948 25fb 50       		.byte	0x50
 10949 25fc 02       		.byte	0x2
 10950 25fd 76       		.byte	0x76
 10951 25fe 00       		.sleb128 0
 10952 25ff 00       		.byte	0
 10953 2600 2B       		.uleb128 0x2b
 10954 2601 08010000 		.4byte	.LVL30
 10955 2605 16080000 		.4byte	0x816
 10956 2609 14260000 		.4byte	0x2614
 10957 260d 21       		.uleb128 0x21
 10958 260e 01       		.byte	0x1
 10959 260f 50       		.byte	0x50
ARM GAS  /tmp/ccGXytas.s 			page 319


 10960 2610 02       		.byte	0x2
 10961 2611 08       		.byte	0x8
 10962 2612 5C       		.byte	0x5c
 10963 2613 00       		.byte	0
 10964 2614 30       		.uleb128 0x30
 10965 2615 6A020000 		.4byte	.LVL69
 10966 2619 01080000 		.4byte	0x801
 10967 261d 21       		.uleb128 0x21
 10968 261e 01       		.byte	0x1
 10969 261f 50       		.byte	0x50
 10970 2620 02       		.byte	0x2
 10971 2621 7A       		.byte	0x7a
 10972 2622 00       		.sleb128 0
 10973 2623 00       		.byte	0
 10974 2624 00       		.byte	0
 10975 2625 26       		.uleb128 0x26
 10976 2626 60240000 		.4byte	0x2460
 10977 262a 16010000 		.4byte	.LBI60
 10978 262e 03       		.byte	.LVU113
 10979 262f 68000000 		.4byte	.Ldebug_ranges0+0x68
 10980 2633 01       		.byte	0x1
 10981 2634 2603     		.2byte	0x326
 10982 2636 04       		.byte	0x4
 10983 2637 28270000 		.4byte	0x2728
 10984 263b 36       		.uleb128 0x36
 10985 263c CA240000 		.4byte	0x24ca
 10986 2640 44200000 		.4byte	.LLST20
 10987 2644 40200000 		.4byte	.LVUS20
 10988 2648 36       		.uleb128 0x36
 10989 2649 BD240000 		.4byte	0x24bd
 10990 264d 6A200000 		.4byte	.LLST21
 10991 2651 64200000 		.4byte	.LVUS21
 10992 2655 36       		.uleb128 0x36
 10993 2656 B0240000 		.4byte	0x24b0
 10994 265a 97200000 		.4byte	.LLST22
 10995 265e 93200000 		.4byte	.LVUS22
 10996 2662 36       		.uleb128 0x36
 10997 2663 A3240000 		.4byte	0x24a3
 10998 2667 BD200000 		.4byte	.LLST23
 10999 266b B5200000 		.4byte	.LVUS23
 11000 266f 36       		.uleb128 0x36
 11001 2670 96240000 		.4byte	0x2496
 11002 2674 0D210000 		.4byte	.LLST24
 11003 2678 09210000 		.4byte	.LVUS24
 11004 267c 36       		.uleb128 0x36
 11005 267d 89240000 		.4byte	0x2489
 11006 2681 2F210000 		.4byte	.LLST25
 11007 2685 2B210000 		.4byte	.LVUS25
 11008 2689 36       		.uleb128 0x36
 11009 268a 7C240000 		.4byte	0x247c
 11010 268e 67210000 		.4byte	.LLST26
 11011 2692 5F210000 		.4byte	.LVUS26
 11012 2696 36       		.uleb128 0x36
 11013 2697 6F240000 		.4byte	0x246f
 11014 269b AA210000 		.4byte	.LLST27
 11015 269f A6210000 		.4byte	.LVUS27
 11016 26a3 27       		.uleb128 0x27
ARM GAS  /tmp/ccGXytas.s 			page 320


 11017 26a4 68000000 		.4byte	.Ldebug_ranges0+0x68
 11018 26a8 37       		.uleb128 0x37
 11019 26a9 D7240000 		.4byte	0x24d7
 11020 26ad D2210000 		.4byte	.LLST28
 11021 26b1 C8210000 		.4byte	.LVUS28
 11022 26b5 37       		.uleb128 0x37
 11023 26b6 E4240000 		.4byte	0x24e4
 11024 26ba 36220000 		.4byte	.LLST29
 11025 26be 30220000 		.4byte	.LVUS29
 11026 26c2 2B       		.uleb128 0x2b
 11027 26c3 1E010000 		.4byte	.LVL33
 11028 26c7 DE070000 		.4byte	0x7de
 11029 26cb E2260000 		.4byte	0x26e2
 11030 26cf 21       		.uleb128 0x21
 11031 26d0 01       		.byte	0x1
 11032 26d1 50       		.byte	0x50
 11033 26d2 02       		.byte	0x2
 11034 26d3 7A       		.byte	0x7a
 11035 26d4 00       		.sleb128 0
 11036 26d5 21       		.uleb128 0x21
 11037 26d6 01       		.byte	0x1
 11038 26d7 51       		.byte	0x51
 11039 26d8 02       		.byte	0x2
 11040 26d9 08       		.byte	0x8
 11041 26da A5       		.byte	0xa5
 11042 26db 21       		.uleb128 0x21
 11043 26dc 01       		.byte	0x1
 11044 26dd 52       		.byte	0x52
 11045 26de 02       		.byte	0x2
 11046 26df 76       		.byte	0x76
 11047 26e0 00       		.sleb128 0
 11048 26e1 00       		.byte	0
 11049 26e2 2B       		.uleb128 0x2b
 11050 26e3 68010000 		.4byte	.LVL44
 11051 26e7 C8070000 		.4byte	0x7c8
 11052 26eb F6260000 		.4byte	0x26f6
 11053 26ef 21       		.uleb128 0x21
 11054 26f0 01       		.byte	0x1
 11055 26f1 50       		.byte	0x50
 11056 26f2 02       		.byte	0x2
 11057 26f3 7A       		.byte	0x7a
 11058 26f4 00       		.sleb128 0
 11059 26f5 00       		.byte	0
 11060 26f6 2B       		.uleb128 0x2b
 11061 26f7 74010000 		.4byte	.LVL46
 11062 26fb C8070000 		.4byte	0x7c8
 11063 26ff 0A270000 		.4byte	0x270a
 11064 2703 21       		.uleb128 0x21
 11065 2704 01       		.byte	0x1
 11066 2705 50       		.byte	0x50
 11067 2706 02       		.byte	0x2
 11068 2707 74       		.byte	0x74
 11069 2708 18       		.sleb128 24
 11070 2709 00       		.byte	0
 11071 270a 30       		.uleb128 0x30
 11072 270b 8C010000 		.4byte	.LVL47
 11073 270f A5070000 		.4byte	0x7a5
ARM GAS  /tmp/ccGXytas.s 			page 321


 11074 2713 21       		.uleb128 0x21
 11075 2714 01       		.byte	0x1
 11076 2715 50       		.byte	0x50
 11077 2716 02       		.byte	0x2
 11078 2717 76       		.byte	0x76
 11079 2718 00       		.sleb128 0
 11080 2719 21       		.uleb128 0x21
 11081 271a 01       		.byte	0x1
 11082 271b 51       		.byte	0x51
 11083 271c 02       		.byte	0x2
 11084 271d 77       		.byte	0x77
 11085 271e 00       		.sleb128 0
 11086 271f 21       		.uleb128 0x21
 11087 2720 01       		.byte	0x1
 11088 2721 52       		.byte	0x52
 11089 2722 02       		.byte	0x2
 11090 2723 78       		.byte	0x78
 11091 2724 00       		.sleb128 0
 11092 2725 00       		.byte	0
 11093 2726 00       		.byte	0
 11094 2727 00       		.byte	0
 11095 2728 44       		.uleb128 0x44
 11096 2729 43240000 		.4byte	0x2443
 11097 272d 98010000 		.4byte	.LBI66
 11098 2731 03       		.byte	.LVU175
 11099 2732 88000000 		.4byte	.Ldebug_ranges0+0x88
 11100 2736 01       		.byte	0x1
 11101 2737 2703     		.2byte	0x327
 11102 2739 04       		.byte	0x4
 11103 273a 36       		.uleb128 0x36
 11104 273b 52240000 		.4byte	0x2452
 11105 273f 78220000 		.4byte	.LLST30
 11106 2743 74220000 		.4byte	.LVUS30
 11107 2747 45       		.uleb128 0x45
 11108 2748 33120000 		.4byte	0x1233
 11109 274c B8010000 		.4byte	.LBB68
 11110 2750 F8010000 		.4byte	.LBE68
 11111 2754 01       		.byte	0x1
 11112 2755 4204     		.2byte	0x442
 11113 2757 05       		.byte	0x5
 11114 2758 E0270000 		.4byte	0x27e0
 11115 275c 37       		.uleb128 0x37
 11116 275d 42120000 		.4byte	0x1242
 11117 2761 9C220000 		.4byte	.LLST31
 11118 2765 96220000 		.4byte	.LVUS31
 11119 2769 2B       		.uleb128 0x2b
 11120 276a C0010000 		.4byte	.LVL53
 11121 276e 5E070000 		.4byte	0x75e
 11122 2772 7D270000 		.4byte	0x277d
 11123 2776 21       		.uleb128 0x21
 11124 2777 01       		.byte	0x1
 11125 2778 50       		.byte	0x50
 11126 2779 02       		.byte	0x2
 11127 277a 78       		.byte	0x78
 11128 277b 00       		.sleb128 0
 11129 277c 00       		.byte	0
 11130 277d 2B       		.uleb128 0x2b
ARM GAS  /tmp/ccGXytas.s 			page 322


 11131 277e D4010000 		.4byte	.LVL55
 11132 2782 5E070000 		.4byte	0x75e
 11133 2786 91270000 		.4byte	0x2791
 11134 278a 21       		.uleb128 0x21
 11135 278b 01       		.byte	0x1
 11136 278c 50       		.byte	0x50
 11137 278d 02       		.byte	0x2
 11138 278e 76       		.byte	0x76
 11139 278f 00       		.sleb128 0
 11140 2790 00       		.byte	0
 11141 2791 2B       		.uleb128 0x2b
 11142 2792 DA010000 		.4byte	.LVL56
 11143 2796 5E070000 		.4byte	0x75e
 11144 279a A5270000 		.4byte	0x27a5
 11145 279e 21       		.uleb128 0x21
 11146 279f 01       		.byte	0x1
 11147 27a0 50       		.byte	0x50
 11148 27a1 02       		.byte	0x2
 11149 27a2 78       		.byte	0x78
 11150 27a3 00       		.sleb128 0
 11151 27a4 00       		.byte	0
 11152 27a5 2B       		.uleb128 0x2b
 11153 27a6 E2010000 		.4byte	.LVL57
 11154 27aa 5E070000 		.4byte	0x75e
 11155 27ae B9270000 		.4byte	0x27b9
 11156 27b2 21       		.uleb128 0x21
 11157 27b3 01       		.byte	0x1
 11158 27b4 50       		.byte	0x50
 11159 27b5 02       		.byte	0x2
 11160 27b6 76       		.byte	0x76
 11161 27b7 28       		.sleb128 40
 11162 27b8 00       		.byte	0
 11163 27b9 2B       		.uleb128 0x2b
 11164 27ba EA010000 		.4byte	.LVL58
 11165 27be 5E070000 		.4byte	0x75e
 11166 27c2 CE270000 		.4byte	0x27ce
 11167 27c6 21       		.uleb128 0x21
 11168 27c7 01       		.byte	0x1
 11169 27c8 50       		.byte	0x50
 11170 27c9 03       		.byte	0x3
 11171 27ca 76       		.byte	0x76
 11172 27cb 807F     		.sleb128 -128
 11173 27cd 00       		.byte	0
 11174 27ce 30       		.uleb128 0x30
 11175 27cf F2010000 		.4byte	.LVL59
 11176 27d3 5E070000 		.4byte	0x75e
 11177 27d7 21       		.uleb128 0x21
 11178 27d8 01       		.byte	0x1
 11179 27d9 50       		.byte	0x50
 11180 27da 03       		.byte	0x3
 11181 27db 76       		.byte	0x76
 11182 27dc E07E     		.sleb128 -160
 11183 27de 00       		.byte	0
 11184 27df 00       		.byte	0
 11185 27e0 1F       		.uleb128 0x1f
 11186 27e1 9E010000 		.4byte	.LVL49
 11187 27e5 9A070000 		.4byte	0x79a
ARM GAS  /tmp/ccGXytas.s 			page 323


 11188 27e9 2B       		.uleb128 0x2b
 11189 27ea 1C020000 		.4byte	.LVL61
 11190 27ee 7F070000 		.4byte	0x77f
 11191 27f2 FD270000 		.4byte	0x27fd
 11192 27f6 21       		.uleb128 0x21
 11193 27f7 01       		.byte	0x1
 11194 27f8 51       		.byte	0x51
 11195 27f9 02       		.byte	0x2
 11196 27fa 7A       		.byte	0x7a
 11197 27fb 00       		.sleb128 0
 11198 27fc 00       		.byte	0
 11199 27fd 1F       		.uleb128 0x1f
 11200 27fe 20020000 		.4byte	.LVL62
 11201 2802 74070000 		.4byte	0x774
 11202 2806 00       		.byte	0
 11203 2807 00       		.byte	0
 11204 2808 46       		.uleb128 0x46
 11205 2809 9C020000 		.4byte	.LASF257
 11206 280d 02       		.byte	0x2
 11207 280e E3       		.byte	0xe3
 11208 280f 1E       		.byte	0x1e
 11209 2810 01       		.byte	0x1
 11210 2811 03       		.byte	0x3
 11211 2812 23280000 		.4byte	0x2823
 11212 2816 47       		.uleb128 0x47
 11213 2817 240A0000 		.4byte	.LASF258
 11214 281b 02       		.byte	0x2
 11215 281c E3       		.byte	0xe3
 11216 281d 38       		.byte	0x38
 11217 281e ED000000 		.4byte	0xed
 11218 2822 00       		.byte	0
 11219 2823 48       		.uleb128 0x48
 11220 2824 A7080000 		.4byte	.LASF259
 11221 2828 02       		.byte	0x2
 11222 2829 CF       		.byte	0xcf
 11223 282a 22       		.byte	0x22
 11224 282b 01       		.byte	0x1
 11225 282c ED000000 		.4byte	0xed
 11226 2830 03       		.byte	0x3
 11227 2831 4E280000 		.4byte	0x284e
 11228 2835 49       		.uleb128 0x49
 11229 2836 82030000 		.4byte	.LASF260
 11230 283a 02       		.byte	0x2
 11231 283b D1       		.byte	0xd1
 11232 283c 0A       		.byte	0xa
 11233 283d ED000000 		.4byte	0xed
 11234 2841 49       		.uleb128 0x49
 11235 2842 14090000 		.4byte	.LASF261
 11236 2846 02       		.byte	0x2
 11237 2847 D1       		.byte	0xd1
 11238 2848 1D       		.byte	0x1d
 11239 2849 ED000000 		.4byte	0xed
 11240 284d 00       		.byte	0
 11241 284e 46       		.uleb128 0x46
 11242 284f 200C0000 		.4byte	.LASF262
 11243 2853 02       		.byte	0x2
 11244 2854 BF       		.byte	0xbf
ARM GAS  /tmp/ccGXytas.s 			page 324


 11245 2855 1E       		.byte	0x1e
 11246 2856 01       		.byte	0x1
 11247 2857 03       		.byte	0x3
 11248 2858 69280000 		.4byte	0x2869
 11249 285c 49       		.uleb128 0x49
 11250 285d 14090000 		.4byte	.LASF261
 11251 2861 02       		.byte	0x2
 11252 2862 C1       		.byte	0xc1
 11253 2863 0A       		.byte	0xa
 11254 2864 ED000000 		.4byte	0xed
 11255 2868 00       		.byte	0
 11256 2869 48       		.uleb128 0x48
 11257 286a FC080000 		.4byte	.LASF263
 11258 286e 02       		.byte	0x2
 11259 286f 82       		.byte	0x82
 11260 2870 3B       		.byte	0x3b
 11261 2871 01       		.byte	0x1
 11262 2872 C6000000 		.4byte	0xc6
 11263 2876 03       		.byte	0x3
 11264 2877 94280000 		.4byte	0x2894
 11265 287b 47       		.uleb128 0x47
 11266 287c 57020000 		.4byte	.LASF264
 11267 2880 02       		.byte	0x2
 11268 2881 82       		.byte	0x82
 11269 2882 5D       		.byte	0x5d
 11270 2883 ED000000 		.4byte	0xed
 11271 2887 49       		.uleb128 0x49
 11272 2888 F20C0000 		.4byte	.LASF265
 11273 288c 02       		.byte	0x2
 11274 288d 84       		.byte	0x84
 11275 288e 0A       		.byte	0xa
 11276 288f C6000000 		.4byte	0xc6
 11277 2893 00       		.byte	0
 11278 2894 4A       		.uleb128 0x4a
 11279 2895 38100000 		.4byte	0x1038
 11280 2899 6C000000 		.4byte	.LFB48
 11281 289d 8C000000 		.4byte	.LFE48
 11282 28a1 02       		.byte	0x2
 11283 28a2 7D       		.byte	0x7d
 11284 28a3 00       		.sleb128 0
 11285 28a4 01       		.byte	0x1
 11286 28a5 D5280000 		.4byte	0x28d5
 11287 28a9 28       		.uleb128 0x28
 11288 28aa 47100000 		.4byte	0x1047
 11289 28ae 44       		.uleb128 0x44
 11290 28af 38100000 		.4byte	0x1038
 11291 28b3 7C000000 		.4byte	.LBI34
 11292 28b7 00       		.byte	.LVU51
 11293 28b8 00000000 		.4byte	.Ldebug_ranges0+0
 11294 28bc 01       		.byte	0x1
 11295 28bd 280F     		.2byte	0xf28
 11296 28bf 0D       		.byte	0xd
 11297 28c0 27       		.uleb128 0x27
 11298 28c1 00000000 		.4byte	.Ldebug_ranges0+0
 11299 28c5 37       		.uleb128 0x37
 11300 28c6 47100000 		.4byte	0x1047
 11301 28ca CD220000 		.4byte	.LLST5
ARM GAS  /tmp/ccGXytas.s 			page 325


 11302 28ce C7220000 		.4byte	.LVUS5
 11303 28d2 00       		.byte	0
 11304 28d3 00       		.byte	0
 11305 28d4 00       		.byte	0
 11306 28d5 4B       		.uleb128 0x4b
 11307 28d6 CA210000 		.4byte	0x21ca
 11308 28da 14030000 		.4byte	.LFB11
 11309 28de 78030000 		.4byte	.LFE11
 11310 28e2 FB220000 		.4byte	.LLST36
 11311 28e6 01       		.byte	0x1
 11312 28e7 8B290000 		.4byte	0x298b
 11313 28eb 36       		.uleb128 0x36
 11314 28ec DE210000 		.4byte	0x21de
 11315 28f0 23230000 		.4byte	.LLST37
 11316 28f4 1B230000 		.4byte	.LVUS37
 11317 28f8 37       		.uleb128 0x37
 11318 28f9 EB210000 		.4byte	0x21eb
 11319 28fd 59230000 		.4byte	.LLST38
 11320 2901 57230000 		.4byte	.LVUS38
 11321 2905 28       		.uleb128 0x28
 11322 2906 F8210000 		.4byte	0x21f8
 11323 290a 28       		.uleb128 0x28
 11324 290b 05220000 		.4byte	0x2205
 11325 290f 28       		.uleb128 0x28
 11326 2910 12220000 		.4byte	0x2212
 11327 2914 37       		.uleb128 0x37
 11328 2915 1F220000 		.4byte	0x221f
 11329 2919 74230000 		.4byte	.LLST39
 11330 291d 6C230000 		.4byte	.LVUS39
 11331 2921 44       		.uleb128 0x44
 11332 2922 CA210000 		.4byte	0x21ca
 11333 2926 22030000 		.4byte	.LBI82
 11334 292a 00       		.byte	.LVU317
 11335 292b B8000000 		.4byte	.Ldebug_ranges0+0xb8
 11336 292f 01       		.byte	0x1
 11337 2930 6205     		.2byte	0x562
 11338 2932 0D       		.byte	0xd
 11339 2933 36       		.uleb128 0x36
 11340 2934 DE210000 		.4byte	0x21de
 11341 2938 B0230000 		.4byte	.LLST40
 11342 293c A8230000 		.4byte	.LVUS40
 11343 2940 27       		.uleb128 0x27
 11344 2941 B8000000 		.4byte	.Ldebug_ranges0+0xb8
 11345 2945 28       		.uleb128 0x28
 11346 2946 EB210000 		.4byte	0x21eb
 11347 294a 37       		.uleb128 0x37
 11348 294b F8210000 		.4byte	0x21f8
 11349 294f EA230000 		.4byte	.LLST41
 11350 2953 E4230000 		.4byte	.LVUS41
 11351 2957 37       		.uleb128 0x37
 11352 2958 05220000 		.4byte	0x2205
 11353 295c 19240000 		.4byte	.LLST42
 11354 2960 13240000 		.4byte	.LVUS42
 11355 2964 37       		.uleb128 0x37
 11356 2965 12220000 		.4byte	0x2212
 11357 2969 48240000 		.4byte	.LLST43
 11358 296d 42240000 		.4byte	.LVUS43
ARM GAS  /tmp/ccGXytas.s 			page 326


 11359 2971 28       		.uleb128 0x28
 11360 2972 1F220000 		.4byte	0x221f
 11361 2976 1F       		.uleb128 0x1f
 11362 2977 26030000 		.4byte	.LVL84
 11363 297b 9A070000 		.4byte	0x79a
 11364 297f 1F       		.uleb128 0x1f
 11365 2980 32030000 		.4byte	.LVL87
 11366 2984 74070000 		.4byte	0x774
 11367 2988 00       		.byte	0
 11368 2989 00       		.byte	0
 11369 298a 00       		.byte	0
 11370 298b 4A       		.uleb128 0x4a
 11371 298c E01A0000 		.4byte	0x1ae0
 11372 2990 0C060000 		.4byte	.LFB23
 11373 2994 18060000 		.4byte	.LFE23
 11374 2998 02       		.byte	0x2
 11375 2999 7D       		.byte	0x7d
 11376 299a 00       		.sleb128 0
 11377 299b 01       		.byte	0x1
 11378 299c AE290000 		.4byte	0x29ae
 11379 29a0 37       		.uleb128 0x37
 11380 29a1 F41A0000 		.4byte	0x1af4
 11381 29a5 73240000 		.4byte	.LLST76
 11382 29a9 71240000 		.4byte	.LVUS76
 11383 29ad 00       		.byte	0
 11384 29ae 4B       		.uleb128 0x4b
 11385 29af EA170000 		.4byte	0x17ea
 11386 29b3 4A080000 		.4byte	.LFB29
 11387 29b7 98080000 		.4byte	.LFE29
 11388 29bb 86240000 		.4byte	.LLST99
 11389 29bf 01       		.byte	0x1
 11390 29c0 452A0000 		.4byte	0x2a45
 11391 29c4 42       		.uleb128 0x42
 11392 29c5 EA170000 		.4byte	0x17ea
 11393 29c9 5C080000 		.4byte	.LBI127
 11394 29cd 00       		.byte	.LVU844
 11395 29ce 5C080000 		.4byte	.LBB127
 11396 29d2 92080000 		.4byte	.LBE127
 11397 29d6 01       		.byte	0x1
 11398 29d7 830B     		.2byte	0xb83
 11399 29d9 06       		.byte	0x6
 11400 29da 4C       		.uleb128 0x4c
 11401 29db FA170000 		.4byte	0x17fa
 11402 29df 60080000 		.4byte	.LBB129
 11403 29e3 92080000 		.4byte	.LBE129
 11404 29e7 37       		.uleb128 0x37
 11405 29e8 FB170000 		.4byte	0x17fb
 11406 29ec A8240000 		.4byte	.LLST100
 11407 29f0 A6240000 		.4byte	.LVUS100
 11408 29f4 26       		.uleb128 0x26
 11409 29f5 69280000 		.4byte	0x2869
 11410 29f9 62080000 		.4byte	.LBI130
 11411 29fd 00       		.byte	.LVU851
 11412 29fe 28010000 		.4byte	.Ldebug_ranges0+0x128
 11413 2a02 01       		.byte	0x1
 11414 2a03 B70B     		.2byte	0xbb7
 11415 2a05 03       		.byte	0x3
ARM GAS  /tmp/ccGXytas.s 			page 327


 11416 2a06 2B2A0000 		.4byte	0x2a2b
 11417 2a0a 36       		.uleb128 0x36
 11418 2a0b 7B280000 		.4byte	0x287b
 11419 2a0f BD240000 		.4byte	.LLST101
 11420 2a13 BB240000 		.4byte	.LVUS101
 11421 2a17 27       		.uleb128 0x27
 11422 2a18 28010000 		.4byte	.Ldebug_ranges0+0x128
 11423 2a1c 37       		.uleb128 0x37
 11424 2a1d 87280000 		.4byte	0x2887
 11425 2a21 D2240000 		.4byte	.LLST102
 11426 2a25 D0240000 		.4byte	.LVUS102
 11427 2a29 00       		.byte	0
 11428 2a2a 00       		.byte	0
 11429 2a2b 39       		.uleb128 0x39
 11430 2a2c 08180000 		.4byte	0x1808
 11431 2a30 40010000 		.4byte	.Ldebug_ranges0+0x140
 11432 2a34 37       		.uleb128 0x37
 11433 2a35 09180000 		.4byte	0x1809
 11434 2a39 E7240000 		.4byte	.LLST103
 11435 2a3d E5240000 		.4byte	.LVUS103
 11436 2a41 00       		.byte	0
 11437 2a42 00       		.byte	0
 11438 2a43 00       		.byte	0
 11439 2a44 00       		.byte	0
 11440 2a45 4D       		.uleb128 0x4d
 11441 2a46 A6100000 		.4byte	0x10a6
 11442 2a4a 700B0000 		.4byte	.LFB45
 11443 2a4e D00B0000 		.4byte	.LFE45
 11444 2a52 04250000 		.4byte	.LLST145
 11445 2a56 01       		.byte	0x1
 11446 2a57 36       		.uleb128 0x36
 11447 2a58 B9100000 		.4byte	0x10b9
 11448 2a5c 28250000 		.4byte	.LLST146
 11449 2a60 24250000 		.4byte	.LVUS146
 11450 2a64 36       		.uleb128 0x36
 11451 2a65 C6100000 		.4byte	0x10c6
 11452 2a69 4A250000 		.4byte	.LLST147
 11453 2a6d 46250000 		.4byte	.LVUS147
 11454 2a71 36       		.uleb128 0x36
 11455 2a72 D3100000 		.4byte	0x10d3
 11456 2a76 6C250000 		.4byte	.LLST148
 11457 2a7a 68250000 		.4byte	.LVUS148
 11458 2a7e 28       		.uleb128 0x28
 11459 2a7f E0100000 		.4byte	0x10e0
 11460 2a83 28       		.uleb128 0x28
 11461 2a84 ED100000 		.4byte	0x10ed
 11462 2a88 4E       		.uleb128 0x4e
 11463 2a89 FA100000 		.4byte	0x10fa
 11464 2a8d 00       		.byte	0
 11465 2a8e 42       		.uleb128 0x42
 11466 2a8f A6100000 		.4byte	0x10a6
 11467 2a93 7E0B0000 		.4byte	.LBI150
 11468 2a97 00       		.byte	.LVU1193
 11469 2a98 7E0B0000 		.4byte	.LBB150
 11470 2a9c CA0B0000 		.4byte	.LBE150
 11471 2aa0 01       		.byte	0x1
 11472 2aa1 790E     		.2byte	0xe79
ARM GAS  /tmp/ccGXytas.s 			page 328


 11473 2aa3 15       		.byte	0x15
 11474 2aa4 36       		.uleb128 0x36
 11475 2aa5 D3100000 		.4byte	0x10d3
 11476 2aa9 8C250000 		.4byte	.LLST149
 11477 2aad 8A250000 		.4byte	.LVUS149
 11478 2ab1 36       		.uleb128 0x36
 11479 2ab2 C6100000 		.4byte	0x10c6
 11480 2ab6 A3250000 		.4byte	.LLST150
 11481 2aba 9F250000 		.4byte	.LVUS150
 11482 2abe 36       		.uleb128 0x36
 11483 2abf B9100000 		.4byte	0x10b9
 11484 2ac3 C5250000 		.4byte	.LLST151
 11485 2ac7 C1250000 		.4byte	.LVUS151
 11486 2acb 37       		.uleb128 0x37
 11487 2acc E0100000 		.4byte	0x10e0
 11488 2ad0 E5250000 		.4byte	.LLST152
 11489 2ad4 E3250000 		.4byte	.LVUS152
 11490 2ad8 37       		.uleb128 0x37
 11491 2ad9 ED100000 		.4byte	0x10ed
 11492 2add FA250000 		.4byte	.LLST153
 11493 2ae1 F8250000 		.4byte	.LVUS153
 11494 2ae5 37       		.uleb128 0x37
 11495 2ae6 FA100000 		.4byte	0x10fa
 11496 2aea 13260000 		.4byte	.LLST154
 11497 2aee 0D260000 		.4byte	.LVUS154
 11498 2af2 4F       		.uleb128 0x4f
 11499 2af3 07110000 		.4byte	0x1107
 11500 2af7 90010000 		.4byte	.Ldebug_ranges0+0x190
 11501 2afb 0D2B0000 		.4byte	0x2b0d
 11502 2aff 37       		.uleb128 0x37
 11503 2b00 0C110000 		.4byte	0x110c
 11504 2b04 42260000 		.4byte	.LLST155
 11505 2b08 3E260000 		.4byte	.LVUS155
 11506 2b0c 00       		.byte	0
 11507 2b0d 4F       		.uleb128 0x4f
 11508 2b0e 1A110000 		.4byte	0x111a
 11509 2b12 A8010000 		.4byte	.Ldebug_ranges0+0x1a8
 11510 2b16 282B0000 		.4byte	0x2b28
 11511 2b1a 37       		.uleb128 0x37
 11512 2b1b 1B110000 		.4byte	0x111b
 11513 2b1f 62260000 		.4byte	.LLST156
 11514 2b23 60260000 		.4byte	.LVUS156
 11515 2b27 00       		.byte	0
 11516 2b28 30       		.uleb128 0x30
 11517 2b29 C60B0000 		.4byte	.LVL289
 11518 2b2d 35110000 		.4byte	0x1135
 11519 2b31 21       		.uleb128 0x21
 11520 2b32 01       		.byte	0x1
 11521 2b33 50       		.byte	0x50
 11522 2b34 02       		.byte	0x2
 11523 2b35 79       		.byte	0x79
 11524 2b36 00       		.sleb128 0
 11525 2b37 21       		.uleb128 0x21
 11526 2b38 01       		.byte	0x1
 11527 2b39 51       		.byte	0x51
 11528 2b3a 08       		.byte	0x8
 11529 2b3b 75       		.byte	0x75
ARM GAS  /tmp/ccGXytas.s 			page 329


 11530 2b3c 7F       		.sleb128 -1
 11531 2b3d 7B       		.byte	0x7b
 11532 2b3e 00       		.sleb128 0
 11533 2b3f 1E       		.byte	0x1e
 11534 2b40 76       		.byte	0x76
 11535 2b41 00       		.sleb128 0
 11536 2b42 22       		.byte	0x22
 11537 2b43 21       		.uleb128 0x21
 11538 2b44 01       		.byte	0x1
 11539 2b45 52       		.byte	0x52
 11540 2b46 01       		.byte	0x1
 11541 2b47 31       		.byte	0x31
 11542 2b48 21       		.uleb128 0x21
 11543 2b49 01       		.byte	0x1
 11544 2b4a 53       		.byte	0x53
 11545 2b4b 02       		.byte	0x2
 11546 2b4c 77       		.byte	0x77
 11547 2b4d 00       		.sleb128 0
 11548 2b4e 00       		.byte	0
 11549 2b4f 00       		.byte	0
 11550 2b50 00       		.byte	0
 11551 2b51 00       		.byte	0
 11552              		.section	.debug_abbrev,"",%progbits
 11553              	.Ldebug_abbrev0:
 11554 0000 01       		.uleb128 0x1
 11555 0001 11       		.uleb128 0x11
 11556 0002 01       		.byte	0x1
 11557 0003 25       		.uleb128 0x25
 11558 0004 0E       		.uleb128 0xe
 11559 0005 13       		.uleb128 0x13
 11560 0006 0B       		.uleb128 0xb
 11561 0007 03       		.uleb128 0x3
 11562 0008 0E       		.uleb128 0xe
 11563 0009 1B       		.uleb128 0x1b
 11564 000a 0E       		.uleb128 0xe
 11565 000b 11       		.uleb128 0x11
 11566 000c 01       		.uleb128 0x1
 11567 000d 12       		.uleb128 0x12
 11568 000e 01       		.uleb128 0x1
 11569 000f 10       		.uleb128 0x10
 11570 0010 06       		.uleb128 0x6
 11571 0011 00       		.byte	0
 11572 0012 00       		.byte	0
 11573 0013 02       		.uleb128 0x2
 11574 0014 24       		.uleb128 0x24
 11575 0015 00       		.byte	0
 11576 0016 0B       		.uleb128 0xb
 11577 0017 0B       		.uleb128 0xb
 11578 0018 3E       		.uleb128 0x3e
 11579 0019 0B       		.uleb128 0xb
 11580 001a 03       		.uleb128 0x3
 11581 001b 0E       		.uleb128 0xe
 11582 001c 00       		.byte	0
 11583 001d 00       		.byte	0
 11584 001e 03       		.uleb128 0x3
 11585 001f 16       		.uleb128 0x16
 11586 0020 00       		.byte	0
ARM GAS  /tmp/ccGXytas.s 			page 330


 11587 0021 03       		.uleb128 0x3
 11588 0022 0E       		.uleb128 0xe
 11589 0023 3A       		.uleb128 0x3a
 11590 0024 0B       		.uleb128 0xb
 11591 0025 3B       		.uleb128 0x3b
 11592 0026 0B       		.uleb128 0xb
 11593 0027 39       		.uleb128 0x39
 11594 0028 0B       		.uleb128 0xb
 11595 0029 49       		.uleb128 0x49
 11596 002a 13       		.uleb128 0x13
 11597 002b 00       		.byte	0
 11598 002c 00       		.byte	0
 11599 002d 04       		.uleb128 0x4
 11600 002e 24       		.uleb128 0x24
 11601 002f 00       		.byte	0
 11602 0030 0B       		.uleb128 0xb
 11603 0031 0B       		.uleb128 0xb
 11604 0032 3E       		.uleb128 0x3e
 11605 0033 0B       		.uleb128 0xb
 11606 0034 03       		.uleb128 0x3
 11607 0035 08       		.uleb128 0x8
 11608 0036 00       		.byte	0
 11609 0037 00       		.byte	0
 11610 0038 05       		.uleb128 0x5
 11611 0039 0F       		.uleb128 0xf
 11612 003a 00       		.byte	0
 11613 003b 0B       		.uleb128 0xb
 11614 003c 0B       		.uleb128 0xb
 11615 003d 00       		.byte	0
 11616 003e 00       		.byte	0
 11617 003f 06       		.uleb128 0x6
 11618 0040 26       		.uleb128 0x26
 11619 0041 00       		.byte	0
 11620 0042 49       		.uleb128 0x49
 11621 0043 13       		.uleb128 0x13
 11622 0044 00       		.byte	0
 11623 0045 00       		.byte	0
 11624 0046 07       		.uleb128 0x7
 11625 0047 0F       		.uleb128 0xf
 11626 0048 00       		.byte	0
 11627 0049 0B       		.uleb128 0xb
 11628 004a 0B       		.uleb128 0xb
 11629 004b 49       		.uleb128 0x49
 11630 004c 13       		.uleb128 0x13
 11631 004d 00       		.byte	0
 11632 004e 00       		.byte	0
 11633 004f 08       		.uleb128 0x8
 11634 0050 35       		.uleb128 0x35
 11635 0051 00       		.byte	0
 11636 0052 49       		.uleb128 0x49
 11637 0053 13       		.uleb128 0x13
 11638 0054 00       		.byte	0
 11639 0055 00       		.byte	0
 11640 0056 09       		.uleb128 0x9
 11641 0057 15       		.uleb128 0x15
 11642 0058 01       		.byte	0x1
 11643 0059 27       		.uleb128 0x27
ARM GAS  /tmp/ccGXytas.s 			page 331


 11644 005a 0C       		.uleb128 0xc
 11645 005b 01       		.uleb128 0x1
 11646 005c 13       		.uleb128 0x13
 11647 005d 00       		.byte	0
 11648 005e 00       		.byte	0
 11649 005f 0A       		.uleb128 0xa
 11650 0060 05       		.uleb128 0x5
 11651 0061 00       		.byte	0
 11652 0062 49       		.uleb128 0x49
 11653 0063 13       		.uleb128 0x13
 11654 0064 00       		.byte	0
 11655 0065 00       		.byte	0
 11656 0066 0B       		.uleb128 0xb
 11657 0067 13       		.uleb128 0x13
 11658 0068 01       		.byte	0x1
 11659 0069 03       		.uleb128 0x3
 11660 006a 0E       		.uleb128 0xe
 11661 006b 0B       		.uleb128 0xb
 11662 006c 0B       		.uleb128 0xb
 11663 006d 3A       		.uleb128 0x3a
 11664 006e 0B       		.uleb128 0xb
 11665 006f 3B       		.uleb128 0x3b
 11666 0070 0B       		.uleb128 0xb
 11667 0071 39       		.uleb128 0x39
 11668 0072 0B       		.uleb128 0xb
 11669 0073 01       		.uleb128 0x1
 11670 0074 13       		.uleb128 0x13
 11671 0075 00       		.byte	0
 11672 0076 00       		.byte	0
 11673 0077 0C       		.uleb128 0xc
 11674 0078 0D       		.uleb128 0xd
 11675 0079 00       		.byte	0
 11676 007a 03       		.uleb128 0x3
 11677 007b 0E       		.uleb128 0xe
 11678 007c 3A       		.uleb128 0x3a
 11679 007d 0B       		.uleb128 0xb
 11680 007e 3B       		.uleb128 0x3b
 11681 007f 0B       		.uleb128 0xb
 11682 0080 39       		.uleb128 0x39
 11683 0081 0B       		.uleb128 0xb
 11684 0082 49       		.uleb128 0x49
 11685 0083 13       		.uleb128 0x13
 11686 0084 38       		.uleb128 0x38
 11687 0085 0A       		.uleb128 0xa
 11688 0086 00       		.byte	0
 11689 0087 00       		.byte	0
 11690 0088 0D       		.uleb128 0xd
 11691 0089 0D       		.uleb128 0xd
 11692 008a 00       		.byte	0
 11693 008b 03       		.uleb128 0x3
 11694 008c 0E       		.uleb128 0xe
 11695 008d 3A       		.uleb128 0x3a
 11696 008e 0B       		.uleb128 0xb
 11697 008f 3B       		.uleb128 0x3b
 11698 0090 05       		.uleb128 0x5
 11699 0091 39       		.uleb128 0x39
 11700 0092 0B       		.uleb128 0xb
ARM GAS  /tmp/ccGXytas.s 			page 332


 11701 0093 49       		.uleb128 0x49
 11702 0094 13       		.uleb128 0x13
 11703 0095 38       		.uleb128 0x38
 11704 0096 0A       		.uleb128 0xa
 11705 0097 00       		.byte	0
 11706 0098 00       		.byte	0
 11707 0099 0E       		.uleb128 0xe
 11708 009a 04       		.uleb128 0x4
 11709 009b 01       		.byte	0x1
 11710 009c 3E       		.uleb128 0x3e
 11711 009d 0B       		.uleb128 0xb
 11712 009e 0B       		.uleb128 0xb
 11713 009f 0B       		.uleb128 0xb
 11714 00a0 49       		.uleb128 0x49
 11715 00a1 13       		.uleb128 0x13
 11716 00a2 3A       		.uleb128 0x3a
 11717 00a3 0B       		.uleb128 0xb
 11718 00a4 3B       		.uleb128 0x3b
 11719 00a5 0B       		.uleb128 0xb
 11720 00a6 39       		.uleb128 0x39
 11721 00a7 0B       		.uleb128 0xb
 11722 00a8 01       		.uleb128 0x1
 11723 00a9 13       		.uleb128 0x13
 11724 00aa 00       		.byte	0
 11725 00ab 00       		.byte	0
 11726 00ac 0F       		.uleb128 0xf
 11727 00ad 28       		.uleb128 0x28
 11728 00ae 00       		.byte	0
 11729 00af 03       		.uleb128 0x3
 11730 00b0 0E       		.uleb128 0xe
 11731 00b1 1C       		.uleb128 0x1c
 11732 00b2 0B       		.uleb128 0xb
 11733 00b3 00       		.byte	0
 11734 00b4 00       		.byte	0
 11735 00b5 10       		.uleb128 0x10
 11736 00b6 01       		.uleb128 0x1
 11737 00b7 01       		.byte	0x1
 11738 00b8 49       		.uleb128 0x49
 11739 00b9 13       		.uleb128 0x13
 11740 00ba 01       		.uleb128 0x1
 11741 00bb 13       		.uleb128 0x13
 11742 00bc 00       		.byte	0
 11743 00bd 00       		.byte	0
 11744 00be 11       		.uleb128 0x11
 11745 00bf 21       		.uleb128 0x21
 11746 00c0 00       		.byte	0
 11747 00c1 49       		.uleb128 0x49
 11748 00c2 13       		.uleb128 0x13
 11749 00c3 2F       		.uleb128 0x2f
 11750 00c4 0B       		.uleb128 0xb
 11751 00c5 00       		.byte	0
 11752 00c6 00       		.byte	0
 11753 00c7 12       		.uleb128 0x12
 11754 00c8 16       		.uleb128 0x16
 11755 00c9 00       		.byte	0
 11756 00ca 03       		.uleb128 0x3
 11757 00cb 0E       		.uleb128 0xe
ARM GAS  /tmp/ccGXytas.s 			page 333


 11758 00cc 3A       		.uleb128 0x3a
 11759 00cd 0B       		.uleb128 0xb
 11760 00ce 3B       		.uleb128 0x3b
 11761 00cf 05       		.uleb128 0x5
 11762 00d0 39       		.uleb128 0x39
 11763 00d1 0B       		.uleb128 0xb
 11764 00d2 49       		.uleb128 0x49
 11765 00d3 13       		.uleb128 0x13
 11766 00d4 00       		.byte	0
 11767 00d5 00       		.byte	0
 11768 00d6 13       		.uleb128 0x13
 11769 00d7 34       		.uleb128 0x34
 11770 00d8 00       		.byte	0
 11771 00d9 03       		.uleb128 0x3
 11772 00da 0E       		.uleb128 0xe
 11773 00db 3A       		.uleb128 0x3a
 11774 00dc 0B       		.uleb128 0xb
 11775 00dd 3B       		.uleb128 0x3b
 11776 00de 05       		.uleb128 0x5
 11777 00df 39       		.uleb128 0x39
 11778 00e0 0B       		.uleb128 0xb
 11779 00e1 49       		.uleb128 0x49
 11780 00e2 13       		.uleb128 0x13
 11781 00e3 3F       		.uleb128 0x3f
 11782 00e4 0C       		.uleb128 0xc
 11783 00e5 02       		.uleb128 0x2
 11784 00e6 0A       		.uleb128 0xa
 11785 00e7 00       		.byte	0
 11786 00e8 00       		.byte	0
 11787 00e9 14       		.uleb128 0x14
 11788 00ea 34       		.uleb128 0x34
 11789 00eb 00       		.byte	0
 11790 00ec 03       		.uleb128 0x3
 11791 00ed 0E       		.uleb128 0xe
 11792 00ee 3A       		.uleb128 0x3a
 11793 00ef 0B       		.uleb128 0xb
 11794 00f0 3B       		.uleb128 0x3b
 11795 00f1 05       		.uleb128 0x5
 11796 00f2 39       		.uleb128 0x39
 11797 00f3 0B       		.uleb128 0xb
 11798 00f4 49       		.uleb128 0x49
 11799 00f5 13       		.uleb128 0x13
 11800 00f6 02       		.uleb128 0x2
 11801 00f7 0A       		.uleb128 0xa
 11802 00f8 00       		.byte	0
 11803 00f9 00       		.byte	0
 11804 00fa 15       		.uleb128 0x15
 11805 00fb 2E       		.uleb128 0x2e
 11806 00fc 00       		.byte	0
 11807 00fd 3F       		.uleb128 0x3f
 11808 00fe 0C       		.uleb128 0xc
 11809 00ff 03       		.uleb128 0x3
 11810 0100 0E       		.uleb128 0xe
 11811 0101 3A       		.uleb128 0x3a
 11812 0102 0B       		.uleb128 0xb
 11813 0103 3B       		.uleb128 0x3b
 11814 0104 0B       		.uleb128 0xb
ARM GAS  /tmp/ccGXytas.s 			page 334


 11815 0105 39       		.uleb128 0x39
 11816 0106 0B       		.uleb128 0xb
 11817 0107 27       		.uleb128 0x27
 11818 0108 0C       		.uleb128 0xc
 11819 0109 3C       		.uleb128 0x3c
 11820 010a 0C       		.uleb128 0xc
 11821 010b 00       		.byte	0
 11822 010c 00       		.byte	0
 11823 010d 16       		.uleb128 0x16
 11824 010e 2E       		.uleb128 0x2e
 11825 010f 00       		.byte	0
 11826 0110 3F       		.uleb128 0x3f
 11827 0111 0C       		.uleb128 0xc
 11828 0112 03       		.uleb128 0x3
 11829 0113 0E       		.uleb128 0xe
 11830 0114 3A       		.uleb128 0x3a
 11831 0115 0B       		.uleb128 0xb
 11832 0116 3B       		.uleb128 0x3b
 11833 0117 0B       		.uleb128 0xb
 11834 0118 39       		.uleb128 0x39
 11835 0119 0B       		.uleb128 0xb
 11836 011a 27       		.uleb128 0x27
 11837 011b 0C       		.uleb128 0xc
 11838 011c 49       		.uleb128 0x49
 11839 011d 13       		.uleb128 0x13
 11840 011e 3C       		.uleb128 0x3c
 11841 011f 0C       		.uleb128 0xc
 11842 0120 00       		.byte	0
 11843 0121 00       		.byte	0
 11844 0122 17       		.uleb128 0x17
 11845 0123 2E       		.uleb128 0x2e
 11846 0124 00       		.byte	0
 11847 0125 3F       		.uleb128 0x3f
 11848 0126 0C       		.uleb128 0xc
 11849 0127 03       		.uleb128 0x3
 11850 0128 0E       		.uleb128 0xe
 11851 0129 3A       		.uleb128 0x3a
 11852 012a 0B       		.uleb128 0xb
 11853 012b 3B       		.uleb128 0x3b
 11854 012c 05       		.uleb128 0x5
 11855 012d 39       		.uleb128 0x39
 11856 012e 0B       		.uleb128 0xb
 11857 012f 27       		.uleb128 0x27
 11858 0130 0C       		.uleb128 0xc
 11859 0131 49       		.uleb128 0x49
 11860 0132 13       		.uleb128 0x13
 11861 0133 3C       		.uleb128 0x3c
 11862 0134 0C       		.uleb128 0xc
 11863 0135 00       		.byte	0
 11864 0136 00       		.byte	0
 11865 0137 18       		.uleb128 0x18
 11866 0138 2E       		.uleb128 0x2e
 11867 0139 01       		.byte	0x1
 11868 013a 3F       		.uleb128 0x3f
 11869 013b 0C       		.uleb128 0xc
 11870 013c 03       		.uleb128 0x3
 11871 013d 0E       		.uleb128 0xe
ARM GAS  /tmp/ccGXytas.s 			page 335


 11872 013e 3A       		.uleb128 0x3a
 11873 013f 0B       		.uleb128 0xb
 11874 0140 3B       		.uleb128 0x3b
 11875 0141 05       		.uleb128 0x5
 11876 0142 39       		.uleb128 0x39
 11877 0143 0B       		.uleb128 0xb
 11878 0144 27       		.uleb128 0x27
 11879 0145 0C       		.uleb128 0xc
 11880 0146 3C       		.uleb128 0x3c
 11881 0147 0C       		.uleb128 0xc
 11882 0148 01       		.uleb128 0x1
 11883 0149 13       		.uleb128 0x13
 11884 014a 00       		.byte	0
 11885 014b 00       		.byte	0
 11886 014c 19       		.uleb128 0x19
 11887 014d 2E       		.uleb128 0x2e
 11888 014e 01       		.byte	0x1
 11889 014f 3F       		.uleb128 0x3f
 11890 0150 0C       		.uleb128 0xc
 11891 0151 03       		.uleb128 0x3
 11892 0152 0E       		.uleb128 0xe
 11893 0153 3A       		.uleb128 0x3a
 11894 0154 0B       		.uleb128 0xb
 11895 0155 3B       		.uleb128 0x3b
 11896 0156 05       		.uleb128 0x5
 11897 0157 39       		.uleb128 0x39
 11898 0158 0B       		.uleb128 0xb
 11899 0159 27       		.uleb128 0x27
 11900 015a 0C       		.uleb128 0xc
 11901 015b 49       		.uleb128 0x49
 11902 015c 13       		.uleb128 0x13
 11903 015d 3C       		.uleb128 0x3c
 11904 015e 0C       		.uleb128 0xc
 11905 015f 01       		.uleb128 0x1
 11906 0160 13       		.uleb128 0x13
 11907 0161 00       		.byte	0
 11908 0162 00       		.byte	0
 11909 0163 1A       		.uleb128 0x1a
 11910 0164 2E       		.uleb128 0x2e
 11911 0165 01       		.byte	0x1
 11912 0166 3F       		.uleb128 0x3f
 11913 0167 0C       		.uleb128 0xc
 11914 0168 03       		.uleb128 0x3
 11915 0169 0E       		.uleb128 0xe
 11916 016a 3A       		.uleb128 0x3a
 11917 016b 0B       		.uleb128 0xb
 11918 016c 3B       		.uleb128 0x3b
 11919 016d 0B       		.uleb128 0xb
 11920 016e 39       		.uleb128 0x39
 11921 016f 0B       		.uleb128 0xb
 11922 0170 27       		.uleb128 0x27
 11923 0171 0C       		.uleb128 0xc
 11924 0172 49       		.uleb128 0x49
 11925 0173 13       		.uleb128 0x13
 11926 0174 3C       		.uleb128 0x3c
 11927 0175 0C       		.uleb128 0xc
 11928 0176 01       		.uleb128 0x1
ARM GAS  /tmp/ccGXytas.s 			page 336


 11929 0177 13       		.uleb128 0x13
 11930 0178 00       		.byte	0
 11931 0179 00       		.byte	0
 11932 017a 1B       		.uleb128 0x1b
 11933 017b 2E       		.uleb128 0x2e
 11934 017c 01       		.byte	0x1
 11935 017d 3F       		.uleb128 0x3f
 11936 017e 0C       		.uleb128 0xc
 11937 017f 03       		.uleb128 0x3
 11938 0180 0E       		.uleb128 0xe
 11939 0181 3A       		.uleb128 0x3a
 11940 0182 0B       		.uleb128 0xb
 11941 0183 3B       		.uleb128 0x3b
 11942 0184 0B       		.uleb128 0xb
 11943 0185 39       		.uleb128 0x39
 11944 0186 0B       		.uleb128 0xb
 11945 0187 27       		.uleb128 0x27
 11946 0188 0C       		.uleb128 0xc
 11947 0189 3C       		.uleb128 0x3c
 11948 018a 0C       		.uleb128 0xc
 11949 018b 01       		.uleb128 0x1
 11950 018c 13       		.uleb128 0x13
 11951 018d 00       		.byte	0
 11952 018e 00       		.byte	0
 11953 018f 1C       		.uleb128 0x1c
 11954 0190 2E       		.uleb128 0x2e
 11955 0191 01       		.byte	0x1
 11956 0192 03       		.uleb128 0x3
 11957 0193 0E       		.uleb128 0xe
 11958 0194 3A       		.uleb128 0x3a
 11959 0195 0B       		.uleb128 0xb
 11960 0196 3B       		.uleb128 0x3b
 11961 0197 05       		.uleb128 0x5
 11962 0198 39       		.uleb128 0x39
 11963 0199 0B       		.uleb128 0xb
 11964 019a 27       		.uleb128 0x27
 11965 019b 0C       		.uleb128 0xc
 11966 019c 11       		.uleb128 0x11
 11967 019d 01       		.uleb128 0x1
 11968 019e 12       		.uleb128 0x12
 11969 019f 01       		.uleb128 0x1
 11970 01a0 40       		.uleb128 0x40
 11971 01a1 06       		.uleb128 0x6
 11972 01a2 9742     		.uleb128 0x2117
 11973 01a4 0C       		.uleb128 0xc
 11974 01a5 01       		.uleb128 0x1
 11975 01a6 13       		.uleb128 0x13
 11976 01a7 00       		.byte	0
 11977 01a8 00       		.byte	0
 11978 01a9 1D       		.uleb128 0x1d
 11979 01aa 05       		.uleb128 0x5
 11980 01ab 00       		.byte	0
 11981 01ac 03       		.uleb128 0x3
 11982 01ad 0E       		.uleb128 0xe
 11983 01ae 3A       		.uleb128 0x3a
 11984 01af 0B       		.uleb128 0xb
 11985 01b0 3B       		.uleb128 0x3b
ARM GAS  /tmp/ccGXytas.s 			page 337


 11986 01b1 05       		.uleb128 0x5
 11987 01b2 39       		.uleb128 0x39
 11988 01b3 0B       		.uleb128 0xb
 11989 01b4 49       		.uleb128 0x49
 11990 01b5 13       		.uleb128 0x13
 11991 01b6 02       		.uleb128 0x2
 11992 01b7 06       		.uleb128 0x6
 11993 01b8 B742     		.uleb128 0x2137
 11994 01ba 06       		.uleb128 0x6
 11995 01bb 00       		.byte	0
 11996 01bc 00       		.byte	0
 11997 01bd 1E       		.uleb128 0x1e
 11998 01be 34       		.uleb128 0x34
 11999 01bf 00       		.byte	0
 12000 01c0 03       		.uleb128 0x3
 12001 01c1 0E       		.uleb128 0xe
 12002 01c2 3A       		.uleb128 0x3a
 12003 01c3 0B       		.uleb128 0xb
 12004 01c4 3B       		.uleb128 0x3b
 12005 01c5 05       		.uleb128 0x5
 12006 01c6 39       		.uleb128 0x39
 12007 01c7 0B       		.uleb128 0xb
 12008 01c8 49       		.uleb128 0x49
 12009 01c9 13       		.uleb128 0x13
 12010 01ca 02       		.uleb128 0x2
 12011 01cb 06       		.uleb128 0x6
 12012 01cc B742     		.uleb128 0x2137
 12013 01ce 06       		.uleb128 0x6
 12014 01cf 00       		.byte	0
 12015 01d0 00       		.byte	0
 12016 01d1 1F       		.uleb128 0x1f
 12017 01d2 898201   		.uleb128 0x4109
 12018 01d5 00       		.byte	0
 12019 01d6 11       		.uleb128 0x11
 12020 01d7 01       		.uleb128 0x1
 12021 01d8 31       		.uleb128 0x31
 12022 01d9 13       		.uleb128 0x13
 12023 01da 00       		.byte	0
 12024 01db 00       		.byte	0
 12025 01dc 20       		.uleb128 0x20
 12026 01dd 898201   		.uleb128 0x4109
 12027 01e0 01       		.byte	0x1
 12028 01e1 11       		.uleb128 0x11
 12029 01e2 01       		.uleb128 0x1
 12030 01e3 9542     		.uleb128 0x2115
 12031 01e5 0C       		.uleb128 0xc
 12032 01e6 31       		.uleb128 0x31
 12033 01e7 13       		.uleb128 0x13
 12034 01e8 01       		.uleb128 0x1
 12035 01e9 13       		.uleb128 0x13
 12036 01ea 00       		.byte	0
 12037 01eb 00       		.byte	0
 12038 01ec 21       		.uleb128 0x21
 12039 01ed 8A8201   		.uleb128 0x410a
 12040 01f0 00       		.byte	0
 12041 01f1 02       		.uleb128 0x2
 12042 01f2 0A       		.uleb128 0xa
ARM GAS  /tmp/ccGXytas.s 			page 338


 12043 01f3 9142     		.uleb128 0x2111
 12044 01f5 0A       		.uleb128 0xa
 12045 01f6 00       		.byte	0
 12046 01f7 00       		.byte	0
 12047 01f8 22       		.uleb128 0x22
 12048 01f9 898201   		.uleb128 0x4109
 12049 01fc 00       		.byte	0
 12050 01fd 11       		.uleb128 0x11
 12051 01fe 01       		.uleb128 0x1
 12052 01ff 9542     		.uleb128 0x2115
 12053 0201 0C       		.uleb128 0xc
 12054 0202 31       		.uleb128 0x31
 12055 0203 13       		.uleb128 0x13
 12056 0204 00       		.byte	0
 12057 0205 00       		.byte	0
 12058 0206 23       		.uleb128 0x23
 12059 0207 2E       		.uleb128 0x2e
 12060 0208 01       		.byte	0x1
 12061 0209 3F       		.uleb128 0x3f
 12062 020a 0C       		.uleb128 0xc
 12063 020b 03       		.uleb128 0x3
 12064 020c 0E       		.uleb128 0xe
 12065 020d 3A       		.uleb128 0x3a
 12066 020e 0B       		.uleb128 0xb
 12067 020f 3B       		.uleb128 0x3b
 12068 0210 05       		.uleb128 0x5
 12069 0211 39       		.uleb128 0x39
 12070 0212 0B       		.uleb128 0xb
 12071 0213 27       		.uleb128 0x27
 12072 0214 0C       		.uleb128 0xc
 12073 0215 49       		.uleb128 0x49
 12074 0216 13       		.uleb128 0x13
 12075 0217 11       		.uleb128 0x11
 12076 0218 01       		.uleb128 0x1
 12077 0219 12       		.uleb128 0x12
 12078 021a 01       		.uleb128 0x1
 12079 021b 40       		.uleb128 0x40
 12080 021c 06       		.uleb128 0x6
 12081 021d 9742     		.uleb128 0x2117
 12082 021f 0C       		.uleb128 0xc
 12083 0220 01       		.uleb128 0x1
 12084 0221 13       		.uleb128 0x13
 12085 0222 00       		.byte	0
 12086 0223 00       		.byte	0
 12087 0224 24       		.uleb128 0x24
 12088 0225 2E       		.uleb128 0x2e
 12089 0226 01       		.byte	0x1
 12090 0227 3F       		.uleb128 0x3f
 12091 0228 0C       		.uleb128 0xc
 12092 0229 03       		.uleb128 0x3
 12093 022a 0E       		.uleb128 0xe
 12094 022b 3A       		.uleb128 0x3a
 12095 022c 0B       		.uleb128 0xb
 12096 022d 3B       		.uleb128 0x3b
 12097 022e 05       		.uleb128 0x5
 12098 022f 39       		.uleb128 0x39
 12099 0230 0B       		.uleb128 0xb
ARM GAS  /tmp/ccGXytas.s 			page 339


 12100 0231 27       		.uleb128 0x27
 12101 0232 0C       		.uleb128 0xc
 12102 0233 11       		.uleb128 0x11
 12103 0234 01       		.uleb128 0x1
 12104 0235 12       		.uleb128 0x12
 12105 0236 01       		.uleb128 0x1
 12106 0237 40       		.uleb128 0x40
 12107 0238 06       		.uleb128 0x6
 12108 0239 9742     		.uleb128 0x2117
 12109 023b 0C       		.uleb128 0xc
 12110 023c 01       		.uleb128 0x1
 12111 023d 13       		.uleb128 0x13
 12112 023e 00       		.byte	0
 12113 023f 00       		.byte	0
 12114 0240 25       		.uleb128 0x25
 12115 0241 34       		.uleb128 0x34
 12116 0242 00       		.byte	0
 12117 0243 03       		.uleb128 0x3
 12118 0244 0E       		.uleb128 0xe
 12119 0245 3A       		.uleb128 0x3a
 12120 0246 0B       		.uleb128 0xb
 12121 0247 3B       		.uleb128 0x3b
 12122 0248 05       		.uleb128 0x5
 12123 0249 39       		.uleb128 0x39
 12124 024a 0B       		.uleb128 0xb
 12125 024b 49       		.uleb128 0x49
 12126 024c 13       		.uleb128 0x13
 12127 024d 00       		.byte	0
 12128 024e 00       		.byte	0
 12129 024f 26       		.uleb128 0x26
 12130 0250 1D       		.uleb128 0x1d
 12131 0251 01       		.byte	0x1
 12132 0252 31       		.uleb128 0x31
 12133 0253 13       		.uleb128 0x13
 12134 0254 52       		.uleb128 0x52
 12135 0255 01       		.uleb128 0x1
 12136 0256 B842     		.uleb128 0x2138
 12137 0258 0B       		.uleb128 0xb
 12138 0259 55       		.uleb128 0x55
 12139 025a 06       		.uleb128 0x6
 12140 025b 58       		.uleb128 0x58
 12141 025c 0B       		.uleb128 0xb
 12142 025d 59       		.uleb128 0x59
 12143 025e 05       		.uleb128 0x5
 12144 025f 57       		.uleb128 0x57
 12145 0260 0B       		.uleb128 0xb
 12146 0261 01       		.uleb128 0x1
 12147 0262 13       		.uleb128 0x13
 12148 0263 00       		.byte	0
 12149 0264 00       		.byte	0
 12150 0265 27       		.uleb128 0x27
 12151 0266 0B       		.uleb128 0xb
 12152 0267 01       		.byte	0x1
 12153 0268 55       		.uleb128 0x55
 12154 0269 06       		.uleb128 0x6
 12155 026a 00       		.byte	0
 12156 026b 00       		.byte	0
ARM GAS  /tmp/ccGXytas.s 			page 340


 12157 026c 28       		.uleb128 0x28
 12158 026d 34       		.uleb128 0x34
 12159 026e 00       		.byte	0
 12160 026f 31       		.uleb128 0x31
 12161 0270 13       		.uleb128 0x13
 12162 0271 00       		.byte	0
 12163 0272 00       		.byte	0
 12164 0273 29       		.uleb128 0x29
 12165 0274 1D       		.uleb128 0x1d
 12166 0275 01       		.byte	0x1
 12167 0276 31       		.uleb128 0x31
 12168 0277 13       		.uleb128 0x13
 12169 0278 52       		.uleb128 0x52
 12170 0279 01       		.uleb128 0x1
 12171 027a B842     		.uleb128 0x2138
 12172 027c 0B       		.uleb128 0xb
 12173 027d 11       		.uleb128 0x11
 12174 027e 01       		.uleb128 0x1
 12175 027f 12       		.uleb128 0x12
 12176 0280 01       		.uleb128 0x1
 12177 0281 58       		.uleb128 0x58
 12178 0282 0B       		.uleb128 0xb
 12179 0283 59       		.uleb128 0x59
 12180 0284 05       		.uleb128 0x5
 12181 0285 57       		.uleb128 0x57
 12182 0286 0B       		.uleb128 0xb
 12183 0287 01       		.uleb128 0x1
 12184 0288 13       		.uleb128 0x13
 12185 0289 00       		.byte	0
 12186 028a 00       		.byte	0
 12187 028b 2A       		.uleb128 0x2a
 12188 028c 05       		.uleb128 0x5
 12189 028d 00       		.byte	0
 12190 028e 31       		.uleb128 0x31
 12191 028f 13       		.uleb128 0x13
 12192 0290 00       		.byte	0
 12193 0291 00       		.byte	0
 12194 0292 2B       		.uleb128 0x2b
 12195 0293 898201   		.uleb128 0x4109
 12196 0296 01       		.byte	0x1
 12197 0297 11       		.uleb128 0x11
 12198 0298 01       		.uleb128 0x1
 12199 0299 31       		.uleb128 0x31
 12200 029a 13       		.uleb128 0x13
 12201 029b 01       		.uleb128 0x1
 12202 029c 13       		.uleb128 0x13
 12203 029d 00       		.byte	0
 12204 029e 00       		.byte	0
 12205 029f 2C       		.uleb128 0x2c
 12206 02a0 2E       		.uleb128 0x2e
 12207 02a1 00       		.byte	0
 12208 02a2 3F       		.uleb128 0x3f
 12209 02a3 0C       		.uleb128 0xc
 12210 02a4 03       		.uleb128 0x3
 12211 02a5 0E       		.uleb128 0xe
 12212 02a6 3A       		.uleb128 0x3a
 12213 02a7 0B       		.uleb128 0xb
ARM GAS  /tmp/ccGXytas.s 			page 341


 12214 02a8 3B       		.uleb128 0x3b
 12215 02a9 05       		.uleb128 0x5
 12216 02aa 39       		.uleb128 0x39
 12217 02ab 0B       		.uleb128 0xb
 12218 02ac 27       		.uleb128 0x27
 12219 02ad 0C       		.uleb128 0xc
 12220 02ae 49       		.uleb128 0x49
 12221 02af 13       		.uleb128 0x13
 12222 02b0 11       		.uleb128 0x11
 12223 02b1 01       		.uleb128 0x1
 12224 02b2 12       		.uleb128 0x12
 12225 02b3 01       		.uleb128 0x1
 12226 02b4 40       		.uleb128 0x40
 12227 02b5 0A       		.uleb128 0xa
 12228 02b6 9742     		.uleb128 0x2117
 12229 02b8 0C       		.uleb128 0xc
 12230 02b9 00       		.byte	0
 12231 02ba 00       		.byte	0
 12232 02bb 2D       		.uleb128 0x2d
 12233 02bc 2E       		.uleb128 0x2e
 12234 02bd 01       		.byte	0x1
 12235 02be 3F       		.uleb128 0x3f
 12236 02bf 0C       		.uleb128 0xc
 12237 02c0 03       		.uleb128 0x3
 12238 02c1 0E       		.uleb128 0xe
 12239 02c2 3A       		.uleb128 0x3a
 12240 02c3 0B       		.uleb128 0xb
 12241 02c4 3B       		.uleb128 0x3b
 12242 02c5 05       		.uleb128 0x5
 12243 02c6 39       		.uleb128 0x39
 12244 02c7 0B       		.uleb128 0xb
 12245 02c8 27       		.uleb128 0x27
 12246 02c9 0C       		.uleb128 0xc
 12247 02ca 49       		.uleb128 0x49
 12248 02cb 13       		.uleb128 0x13
 12249 02cc 11       		.uleb128 0x11
 12250 02cd 01       		.uleb128 0x1
 12251 02ce 12       		.uleb128 0x12
 12252 02cf 01       		.uleb128 0x1
 12253 02d0 40       		.uleb128 0x40
 12254 02d1 0A       		.uleb128 0xa
 12255 02d2 9742     		.uleb128 0x2117
 12256 02d4 0C       		.uleb128 0xc
 12257 02d5 01       		.uleb128 0x1
 12258 02d6 13       		.uleb128 0x13
 12259 02d7 00       		.byte	0
 12260 02d8 00       		.byte	0
 12261 02d9 2E       		.uleb128 0x2e
 12262 02da 34       		.uleb128 0x34
 12263 02db 00       		.byte	0
 12264 02dc 03       		.uleb128 0x3
 12265 02dd 0E       		.uleb128 0xe
 12266 02de 3A       		.uleb128 0x3a
 12267 02df 0B       		.uleb128 0xb
 12268 02e0 3B       		.uleb128 0x3b
 12269 02e1 05       		.uleb128 0x5
 12270 02e2 39       		.uleb128 0x39
ARM GAS  /tmp/ccGXytas.s 			page 342


 12271 02e3 0B       		.uleb128 0xb
 12272 02e4 49       		.uleb128 0x49
 12273 02e5 13       		.uleb128 0x13
 12274 02e6 1C       		.uleb128 0x1c
 12275 02e7 0B       		.uleb128 0xb
 12276 02e8 00       		.byte	0
 12277 02e9 00       		.byte	0
 12278 02ea 2F       		.uleb128 0x2f
 12279 02eb 898201   		.uleb128 0x4109
 12280 02ee 01       		.byte	0x1
 12281 02ef 11       		.uleb128 0x11
 12282 02f0 01       		.uleb128 0x1
 12283 02f1 9542     		.uleb128 0x2115
 12284 02f3 0C       		.uleb128 0xc
 12285 02f4 31       		.uleb128 0x31
 12286 02f5 13       		.uleb128 0x13
 12287 02f6 00       		.byte	0
 12288 02f7 00       		.byte	0
 12289 02f8 30       		.uleb128 0x30
 12290 02f9 898201   		.uleb128 0x4109
 12291 02fc 01       		.byte	0x1
 12292 02fd 11       		.uleb128 0x11
 12293 02fe 01       		.uleb128 0x1
 12294 02ff 31       		.uleb128 0x31
 12295 0300 13       		.uleb128 0x13
 12296 0301 00       		.byte	0
 12297 0302 00       		.byte	0
 12298 0303 31       		.uleb128 0x31
 12299 0304 2E       		.uleb128 0x2e
 12300 0305 01       		.byte	0x1
 12301 0306 03       		.uleb128 0x3
 12302 0307 0E       		.uleb128 0xe
 12303 0308 3A       		.uleb128 0x3a
 12304 0309 0B       		.uleb128 0xb
 12305 030a 3B       		.uleb128 0x3b
 12306 030b 05       		.uleb128 0x5
 12307 030c 39       		.uleb128 0x39
 12308 030d 0B       		.uleb128 0xb
 12309 030e 27       		.uleb128 0x27
 12310 030f 0C       		.uleb128 0xc
 12311 0310 20       		.uleb128 0x20
 12312 0311 0B       		.uleb128 0xb
 12313 0312 01       		.uleb128 0x1
 12314 0313 13       		.uleb128 0x13
 12315 0314 00       		.byte	0
 12316 0315 00       		.byte	0
 12317 0316 32       		.uleb128 0x32
 12318 0317 05       		.uleb128 0x5
 12319 0318 00       		.byte	0
 12320 0319 03       		.uleb128 0x3
 12321 031a 0E       		.uleb128 0xe
 12322 031b 3A       		.uleb128 0x3a
 12323 031c 0B       		.uleb128 0xb
 12324 031d 3B       		.uleb128 0x3b
 12325 031e 05       		.uleb128 0x5
 12326 031f 39       		.uleb128 0x39
 12327 0320 0B       		.uleb128 0xb
ARM GAS  /tmp/ccGXytas.s 			page 343


 12328 0321 49       		.uleb128 0x49
 12329 0322 13       		.uleb128 0x13
 12330 0323 00       		.byte	0
 12331 0324 00       		.byte	0
 12332 0325 33       		.uleb128 0x33
 12333 0326 2E       		.uleb128 0x2e
 12334 0327 01       		.byte	0x1
 12335 0328 03       		.uleb128 0x3
 12336 0329 0E       		.uleb128 0xe
 12337 032a 3A       		.uleb128 0x3a
 12338 032b 0B       		.uleb128 0xb
 12339 032c 3B       		.uleb128 0x3b
 12340 032d 05       		.uleb128 0x5
 12341 032e 39       		.uleb128 0x39
 12342 032f 0B       		.uleb128 0xb
 12343 0330 27       		.uleb128 0x27
 12344 0331 0C       		.uleb128 0xc
 12345 0332 49       		.uleb128 0x49
 12346 0333 13       		.uleb128 0x13
 12347 0334 20       		.uleb128 0x20
 12348 0335 0B       		.uleb128 0xb
 12349 0336 01       		.uleb128 0x1
 12350 0337 13       		.uleb128 0x13
 12351 0338 00       		.byte	0
 12352 0339 00       		.byte	0
 12353 033a 34       		.uleb128 0x34
 12354 033b 0B       		.uleb128 0xb
 12355 033c 01       		.byte	0x1
 12356 033d 01       		.uleb128 0x1
 12357 033e 13       		.uleb128 0x13
 12358 033f 00       		.byte	0
 12359 0340 00       		.byte	0
 12360 0341 35       		.uleb128 0x35
 12361 0342 0B       		.uleb128 0xb
 12362 0343 01       		.byte	0x1
 12363 0344 00       		.byte	0
 12364 0345 00       		.byte	0
 12365 0346 36       		.uleb128 0x36
 12366 0347 05       		.uleb128 0x5
 12367 0348 00       		.byte	0
 12368 0349 31       		.uleb128 0x31
 12369 034a 13       		.uleb128 0x13
 12370 034b 02       		.uleb128 0x2
 12371 034c 06       		.uleb128 0x6
 12372 034d B742     		.uleb128 0x2137
 12373 034f 06       		.uleb128 0x6
 12374 0350 00       		.byte	0
 12375 0351 00       		.byte	0
 12376 0352 37       		.uleb128 0x37
 12377 0353 34       		.uleb128 0x34
 12378 0354 00       		.byte	0
 12379 0355 31       		.uleb128 0x31
 12380 0356 13       		.uleb128 0x13
 12381 0357 02       		.uleb128 0x2
 12382 0358 06       		.uleb128 0x6
 12383 0359 B742     		.uleb128 0x2137
 12384 035b 06       		.uleb128 0x6
ARM GAS  /tmp/ccGXytas.s 			page 344


 12385 035c 00       		.byte	0
 12386 035d 00       		.byte	0
 12387 035e 38       		.uleb128 0x38
 12388 035f 1D       		.uleb128 0x1d
 12389 0360 01       		.byte	0x1
 12390 0361 31       		.uleb128 0x31
 12391 0362 13       		.uleb128 0x13
 12392 0363 55       		.uleb128 0x55
 12393 0364 06       		.uleb128 0x6
 12394 0365 58       		.uleb128 0x58
 12395 0366 0B       		.uleb128 0xb
 12396 0367 59       		.uleb128 0x59
 12397 0368 05       		.uleb128 0x5
 12398 0369 57       		.uleb128 0x57
 12399 036a 0B       		.uleb128 0xb
 12400 036b 00       		.byte	0
 12401 036c 00       		.byte	0
 12402 036d 39       		.uleb128 0x39
 12403 036e 0B       		.uleb128 0xb
 12404 036f 01       		.byte	0x1
 12405 0370 31       		.uleb128 0x31
 12406 0371 13       		.uleb128 0x13
 12407 0372 55       		.uleb128 0x55
 12408 0373 06       		.uleb128 0x6
 12409 0374 00       		.byte	0
 12410 0375 00       		.byte	0
 12411 0376 3A       		.uleb128 0x3a
 12412 0377 2E       		.uleb128 0x2e
 12413 0378 01       		.byte	0x1
 12414 0379 3F       		.uleb128 0x3f
 12415 037a 0C       		.uleb128 0xc
 12416 037b 03       		.uleb128 0x3
 12417 037c 0E       		.uleb128 0xe
 12418 037d 3A       		.uleb128 0x3a
 12419 037e 0B       		.uleb128 0xb
 12420 037f 3B       		.uleb128 0x3b
 12421 0380 05       		.uleb128 0x5
 12422 0381 39       		.uleb128 0x39
 12423 0382 0B       		.uleb128 0xb
 12424 0383 27       		.uleb128 0x27
 12425 0384 0C       		.uleb128 0xc
 12426 0385 11       		.uleb128 0x11
 12427 0386 01       		.uleb128 0x1
 12428 0387 12       		.uleb128 0x12
 12429 0388 01       		.uleb128 0x1
 12430 0389 40       		.uleb128 0x40
 12431 038a 0A       		.uleb128 0xa
 12432 038b 9742     		.uleb128 0x2117
 12433 038d 0C       		.uleb128 0xc
 12434 038e 01       		.uleb128 0x1
 12435 038f 13       		.uleb128 0x13
 12436 0390 00       		.byte	0
 12437 0391 00       		.byte	0
 12438 0392 3B       		.uleb128 0x3b
 12439 0393 05       		.uleb128 0x5
 12440 0394 00       		.byte	0
 12441 0395 03       		.uleb128 0x3
ARM GAS  /tmp/ccGXytas.s 			page 345


 12442 0396 0E       		.uleb128 0xe
 12443 0397 3A       		.uleb128 0x3a
 12444 0398 0B       		.uleb128 0xb
 12445 0399 3B       		.uleb128 0x3b
 12446 039a 05       		.uleb128 0x5
 12447 039b 39       		.uleb128 0x39
 12448 039c 0B       		.uleb128 0xb
 12449 039d 49       		.uleb128 0x49
 12450 039e 13       		.uleb128 0x13
 12451 039f 02       		.uleb128 0x2
 12452 03a0 0A       		.uleb128 0xa
 12453 03a1 00       		.byte	0
 12454 03a2 00       		.byte	0
 12455 03a3 3C       		.uleb128 0x3c
 12456 03a4 2E       		.uleb128 0x2e
 12457 03a5 00       		.byte	0
 12458 03a6 3F       		.uleb128 0x3f
 12459 03a7 0C       		.uleb128 0xc
 12460 03a8 03       		.uleb128 0x3
 12461 03a9 0E       		.uleb128 0xe
 12462 03aa 3A       		.uleb128 0x3a
 12463 03ab 0B       		.uleb128 0xb
 12464 03ac 3B       		.uleb128 0x3b
 12465 03ad 05       		.uleb128 0x5
 12466 03ae 39       		.uleb128 0x39
 12467 03af 0B       		.uleb128 0xb
 12468 03b0 27       		.uleb128 0x27
 12469 03b1 0C       		.uleb128 0xc
 12470 03b2 11       		.uleb128 0x11
 12471 03b3 01       		.uleb128 0x1
 12472 03b4 12       		.uleb128 0x12
 12473 03b5 01       		.uleb128 0x1
 12474 03b6 40       		.uleb128 0x40
 12475 03b7 0A       		.uleb128 0xa
 12476 03b8 9742     		.uleb128 0x2117
 12477 03ba 0C       		.uleb128 0xc
 12478 03bb 00       		.byte	0
 12479 03bc 00       		.byte	0
 12480 03bd 3D       		.uleb128 0x3d
 12481 03be 0B       		.uleb128 0xb
 12482 03bf 01       		.byte	0x1
 12483 03c0 55       		.uleb128 0x55
 12484 03c1 06       		.uleb128 0x6
 12485 03c2 01       		.uleb128 0x1
 12486 03c3 13       		.uleb128 0x13
 12487 03c4 00       		.byte	0
 12488 03c5 00       		.byte	0
 12489 03c6 3E       		.uleb128 0x3e
 12490 03c7 2E       		.uleb128 0x2e
 12491 03c8 01       		.byte	0x1
 12492 03c9 3F       		.uleb128 0x3f
 12493 03ca 0C       		.uleb128 0xc
 12494 03cb 03       		.uleb128 0x3
 12495 03cc 0E       		.uleb128 0xe
 12496 03cd 3A       		.uleb128 0x3a
 12497 03ce 0B       		.uleb128 0xb
 12498 03cf 3B       		.uleb128 0x3b
ARM GAS  /tmp/ccGXytas.s 			page 346


 12499 03d0 05       		.uleb128 0x5
 12500 03d1 39       		.uleb128 0x39
 12501 03d2 0B       		.uleb128 0xb
 12502 03d3 27       		.uleb128 0x27
 12503 03d4 0C       		.uleb128 0xc
 12504 03d5 20       		.uleb128 0x20
 12505 03d6 0B       		.uleb128 0xb
 12506 03d7 01       		.uleb128 0x1
 12507 03d8 13       		.uleb128 0x13
 12508 03d9 00       		.byte	0
 12509 03da 00       		.byte	0
 12510 03db 3F       		.uleb128 0x3f
 12511 03dc 0B       		.uleb128 0xb
 12512 03dd 01       		.byte	0x1
 12513 03de 11       		.uleb128 0x11
 12514 03df 01       		.uleb128 0x1
 12515 03e0 12       		.uleb128 0x12
 12516 03e1 01       		.uleb128 0x1
 12517 03e2 01       		.uleb128 0x1
 12518 03e3 13       		.uleb128 0x13
 12519 03e4 00       		.byte	0
 12520 03e5 00       		.byte	0
 12521 03e6 40       		.uleb128 0x40
 12522 03e7 2E       		.uleb128 0x2e
 12523 03e8 01       		.byte	0x1
 12524 03e9 3F       		.uleb128 0x3f
 12525 03ea 0C       		.uleb128 0xc
 12526 03eb 03       		.uleb128 0x3
 12527 03ec 0E       		.uleb128 0xe
 12528 03ed 3A       		.uleb128 0x3a
 12529 03ee 0B       		.uleb128 0xb
 12530 03ef 3B       		.uleb128 0x3b
 12531 03f0 05       		.uleb128 0x5
 12532 03f1 39       		.uleb128 0x39
 12533 03f2 0B       		.uleb128 0xb
 12534 03f3 27       		.uleb128 0x27
 12535 03f4 0C       		.uleb128 0xc
 12536 03f5 49       		.uleb128 0x49
 12537 03f6 13       		.uleb128 0x13
 12538 03f7 01       		.uleb128 0x1
 12539 03f8 13       		.uleb128 0x13
 12540 03f9 00       		.byte	0
 12541 03fa 00       		.byte	0
 12542 03fb 41       		.uleb128 0x41
 12543 03fc 2E       		.uleb128 0x2e
 12544 03fd 01       		.byte	0x1
 12545 03fe 3F       		.uleb128 0x3f
 12546 03ff 0C       		.uleb128 0xc
 12547 0400 03       		.uleb128 0x3
 12548 0401 0E       		.uleb128 0xe
 12549 0402 3A       		.uleb128 0x3a
 12550 0403 0B       		.uleb128 0xb
 12551 0404 3B       		.uleb128 0x3b
 12552 0405 05       		.uleb128 0x5
 12553 0406 39       		.uleb128 0x39
 12554 0407 0B       		.uleb128 0xb
 12555 0408 27       		.uleb128 0x27
ARM GAS  /tmp/ccGXytas.s 			page 347


 12556 0409 0C       		.uleb128 0xc
 12557 040a 49       		.uleb128 0x49
 12558 040b 13       		.uleb128 0x13
 12559 040c 20       		.uleb128 0x20
 12560 040d 0B       		.uleb128 0xb
 12561 040e 01       		.uleb128 0x1
 12562 040f 13       		.uleb128 0x13
 12563 0410 00       		.byte	0
 12564 0411 00       		.byte	0
 12565 0412 42       		.uleb128 0x42
 12566 0413 1D       		.uleb128 0x1d
 12567 0414 01       		.byte	0x1
 12568 0415 31       		.uleb128 0x31
 12569 0416 13       		.uleb128 0x13
 12570 0417 52       		.uleb128 0x52
 12571 0418 01       		.uleb128 0x1
 12572 0419 B842     		.uleb128 0x2138
 12573 041b 0B       		.uleb128 0xb
 12574 041c 11       		.uleb128 0x11
 12575 041d 01       		.uleb128 0x1
 12576 041e 12       		.uleb128 0x12
 12577 041f 01       		.uleb128 0x1
 12578 0420 58       		.uleb128 0x58
 12579 0421 0B       		.uleb128 0xb
 12580 0422 59       		.uleb128 0x59
 12581 0423 05       		.uleb128 0x5
 12582 0424 57       		.uleb128 0x57
 12583 0425 0B       		.uleb128 0xb
 12584 0426 00       		.byte	0
 12585 0427 00       		.byte	0
 12586 0428 43       		.uleb128 0x43
 12587 0429 34       		.uleb128 0x34
 12588 042a 00       		.byte	0
 12589 042b 03       		.uleb128 0x3
 12590 042c 08       		.uleb128 0x8
 12591 042d 3A       		.uleb128 0x3a
 12592 042e 0B       		.uleb128 0xb
 12593 042f 3B       		.uleb128 0x3b
 12594 0430 05       		.uleb128 0x5
 12595 0431 39       		.uleb128 0x39
 12596 0432 0B       		.uleb128 0xb
 12597 0433 49       		.uleb128 0x49
 12598 0434 13       		.uleb128 0x13
 12599 0435 00       		.byte	0
 12600 0436 00       		.byte	0
 12601 0437 44       		.uleb128 0x44
 12602 0438 1D       		.uleb128 0x1d
 12603 0439 01       		.byte	0x1
 12604 043a 31       		.uleb128 0x31
 12605 043b 13       		.uleb128 0x13
 12606 043c 52       		.uleb128 0x52
 12607 043d 01       		.uleb128 0x1
 12608 043e B842     		.uleb128 0x2138
 12609 0440 0B       		.uleb128 0xb
 12610 0441 55       		.uleb128 0x55
 12611 0442 06       		.uleb128 0x6
 12612 0443 58       		.uleb128 0x58
ARM GAS  /tmp/ccGXytas.s 			page 348


 12613 0444 0B       		.uleb128 0xb
 12614 0445 59       		.uleb128 0x59
 12615 0446 05       		.uleb128 0x5
 12616 0447 57       		.uleb128 0x57
 12617 0448 0B       		.uleb128 0xb
 12618 0449 00       		.byte	0
 12619 044a 00       		.byte	0
 12620 044b 45       		.uleb128 0x45
 12621 044c 1D       		.uleb128 0x1d
 12622 044d 01       		.byte	0x1
 12623 044e 31       		.uleb128 0x31
 12624 044f 13       		.uleb128 0x13
 12625 0450 11       		.uleb128 0x11
 12626 0451 01       		.uleb128 0x1
 12627 0452 12       		.uleb128 0x12
 12628 0453 01       		.uleb128 0x1
 12629 0454 58       		.uleb128 0x58
 12630 0455 0B       		.uleb128 0xb
 12631 0456 59       		.uleb128 0x59
 12632 0457 05       		.uleb128 0x5
 12633 0458 57       		.uleb128 0x57
 12634 0459 0B       		.uleb128 0xb
 12635 045a 01       		.uleb128 0x1
 12636 045b 13       		.uleb128 0x13
 12637 045c 00       		.byte	0
 12638 045d 00       		.byte	0
 12639 045e 46       		.uleb128 0x46
 12640 045f 2E       		.uleb128 0x2e
 12641 0460 01       		.byte	0x1
 12642 0461 03       		.uleb128 0x3
 12643 0462 0E       		.uleb128 0xe
 12644 0463 3A       		.uleb128 0x3a
 12645 0464 0B       		.uleb128 0xb
 12646 0465 3B       		.uleb128 0x3b
 12647 0466 0B       		.uleb128 0xb
 12648 0467 39       		.uleb128 0x39
 12649 0468 0B       		.uleb128 0xb
 12650 0469 27       		.uleb128 0x27
 12651 046a 0C       		.uleb128 0xc
 12652 046b 20       		.uleb128 0x20
 12653 046c 0B       		.uleb128 0xb
 12654 046d 01       		.uleb128 0x1
 12655 046e 13       		.uleb128 0x13
 12656 046f 00       		.byte	0
 12657 0470 00       		.byte	0
 12658 0471 47       		.uleb128 0x47
 12659 0472 05       		.uleb128 0x5
 12660 0473 00       		.byte	0
 12661 0474 03       		.uleb128 0x3
 12662 0475 0E       		.uleb128 0xe
 12663 0476 3A       		.uleb128 0x3a
 12664 0477 0B       		.uleb128 0xb
 12665 0478 3B       		.uleb128 0x3b
 12666 0479 0B       		.uleb128 0xb
 12667 047a 39       		.uleb128 0x39
 12668 047b 0B       		.uleb128 0xb
 12669 047c 49       		.uleb128 0x49
ARM GAS  /tmp/ccGXytas.s 			page 349


 12670 047d 13       		.uleb128 0x13
 12671 047e 00       		.byte	0
 12672 047f 00       		.byte	0
 12673 0480 48       		.uleb128 0x48
 12674 0481 2E       		.uleb128 0x2e
 12675 0482 01       		.byte	0x1
 12676 0483 03       		.uleb128 0x3
 12677 0484 0E       		.uleb128 0xe
 12678 0485 3A       		.uleb128 0x3a
 12679 0486 0B       		.uleb128 0xb
 12680 0487 3B       		.uleb128 0x3b
 12681 0488 0B       		.uleb128 0xb
 12682 0489 39       		.uleb128 0x39
 12683 048a 0B       		.uleb128 0xb
 12684 048b 27       		.uleb128 0x27
 12685 048c 0C       		.uleb128 0xc
 12686 048d 49       		.uleb128 0x49
 12687 048e 13       		.uleb128 0x13
 12688 048f 20       		.uleb128 0x20
 12689 0490 0B       		.uleb128 0xb
 12690 0491 01       		.uleb128 0x1
 12691 0492 13       		.uleb128 0x13
 12692 0493 00       		.byte	0
 12693 0494 00       		.byte	0
 12694 0495 49       		.uleb128 0x49
 12695 0496 34       		.uleb128 0x34
 12696 0497 00       		.byte	0
 12697 0498 03       		.uleb128 0x3
 12698 0499 0E       		.uleb128 0xe
 12699 049a 3A       		.uleb128 0x3a
 12700 049b 0B       		.uleb128 0xb
 12701 049c 3B       		.uleb128 0x3b
 12702 049d 0B       		.uleb128 0xb
 12703 049e 39       		.uleb128 0x39
 12704 049f 0B       		.uleb128 0xb
 12705 04a0 49       		.uleb128 0x49
 12706 04a1 13       		.uleb128 0x13
 12707 04a2 00       		.byte	0
 12708 04a3 00       		.byte	0
 12709 04a4 4A       		.uleb128 0x4a
 12710 04a5 2E       		.uleb128 0x2e
 12711 04a6 01       		.byte	0x1
 12712 04a7 31       		.uleb128 0x31
 12713 04a8 13       		.uleb128 0x13
 12714 04a9 11       		.uleb128 0x11
 12715 04aa 01       		.uleb128 0x1
 12716 04ab 12       		.uleb128 0x12
 12717 04ac 01       		.uleb128 0x1
 12718 04ad 40       		.uleb128 0x40
 12719 04ae 0A       		.uleb128 0xa
 12720 04af 9742     		.uleb128 0x2117
 12721 04b1 0C       		.uleb128 0xc
 12722 04b2 01       		.uleb128 0x1
 12723 04b3 13       		.uleb128 0x13
 12724 04b4 00       		.byte	0
 12725 04b5 00       		.byte	0
 12726 04b6 4B       		.uleb128 0x4b
ARM GAS  /tmp/ccGXytas.s 			page 350


 12727 04b7 2E       		.uleb128 0x2e
 12728 04b8 01       		.byte	0x1
 12729 04b9 31       		.uleb128 0x31
 12730 04ba 13       		.uleb128 0x13
 12731 04bb 11       		.uleb128 0x11
 12732 04bc 01       		.uleb128 0x1
 12733 04bd 12       		.uleb128 0x12
 12734 04be 01       		.uleb128 0x1
 12735 04bf 40       		.uleb128 0x40
 12736 04c0 06       		.uleb128 0x6
 12737 04c1 9742     		.uleb128 0x2117
 12738 04c3 0C       		.uleb128 0xc
 12739 04c4 01       		.uleb128 0x1
 12740 04c5 13       		.uleb128 0x13
 12741 04c6 00       		.byte	0
 12742 04c7 00       		.byte	0
 12743 04c8 4C       		.uleb128 0x4c
 12744 04c9 0B       		.uleb128 0xb
 12745 04ca 01       		.byte	0x1
 12746 04cb 31       		.uleb128 0x31
 12747 04cc 13       		.uleb128 0x13
 12748 04cd 11       		.uleb128 0x11
 12749 04ce 01       		.uleb128 0x1
 12750 04cf 12       		.uleb128 0x12
 12751 04d0 01       		.uleb128 0x1
 12752 04d1 00       		.byte	0
 12753 04d2 00       		.byte	0
 12754 04d3 4D       		.uleb128 0x4d
 12755 04d4 2E       		.uleb128 0x2e
 12756 04d5 01       		.byte	0x1
 12757 04d6 31       		.uleb128 0x31
 12758 04d7 13       		.uleb128 0x13
 12759 04d8 11       		.uleb128 0x11
 12760 04d9 01       		.uleb128 0x1
 12761 04da 12       		.uleb128 0x12
 12762 04db 01       		.uleb128 0x1
 12763 04dc 40       		.uleb128 0x40
 12764 04dd 06       		.uleb128 0x6
 12765 04de 9742     		.uleb128 0x2117
 12766 04e0 0C       		.uleb128 0xc
 12767 04e1 00       		.byte	0
 12768 04e2 00       		.byte	0
 12769 04e3 4E       		.uleb128 0x4e
 12770 04e4 34       		.uleb128 0x34
 12771 04e5 00       		.byte	0
 12772 04e6 31       		.uleb128 0x31
 12773 04e7 13       		.uleb128 0x13
 12774 04e8 1C       		.uleb128 0x1c
 12775 04e9 0B       		.uleb128 0xb
 12776 04ea 00       		.byte	0
 12777 04eb 00       		.byte	0
 12778 04ec 4F       		.uleb128 0x4f
 12779 04ed 0B       		.uleb128 0xb
 12780 04ee 01       		.byte	0x1
 12781 04ef 31       		.uleb128 0x31
 12782 04f0 13       		.uleb128 0x13
 12783 04f1 55       		.uleb128 0x55
ARM GAS  /tmp/ccGXytas.s 			page 351


 12784 04f2 06       		.uleb128 0x6
 12785 04f3 01       		.uleb128 0x1
 12786 04f4 13       		.uleb128 0x13
 12787 04f5 00       		.byte	0
 12788 04f6 00       		.byte	0
 12789 04f7 00       		.byte	0
 12790              		.section	.debug_loc,"",%progbits
 12791              	.Ldebug_loc0:
 12792              	.LLST0:
 12793 0000 00000000 		.4byte	.LFB62-.Ltext0
 12794 0004 02000000 		.4byte	.LCFI0-.Ltext0
 12795 0008 0200     		.2byte	0x2
 12796 000a 7D       		.byte	0x7d
 12797 000b 00       		.sleb128 0
 12798 000c 02000000 		.4byte	.LCFI0-.Ltext0
 12799 0010 34000000 		.4byte	.LCFI1-.Ltext0
 12800 0014 0200     		.2byte	0x2
 12801 0016 7D       		.byte	0x7d
 12802 0017 18       		.sleb128 24
 12803 0018 34000000 		.4byte	.LCFI1-.Ltext0
 12804 001c 38000000 		.4byte	.LCFI2-.Ltext0
 12805 0020 0200     		.2byte	0x2
 12806 0022 7D       		.byte	0x7d
 12807 0023 00       		.sleb128 0
 12808 0024 38000000 		.4byte	.LCFI2-.Ltext0
 12809 0028 48000000 		.4byte	.LCFI3-.Ltext0
 12810 002c 0200     		.2byte	0x2
 12811 002e 7D       		.byte	0x7d
 12812 002f 18       		.sleb128 24
 12813 0030 48000000 		.4byte	.LCFI3-.Ltext0
 12814 0034 4E000000 		.4byte	.LCFI4-.Ltext0
 12815 0038 0200     		.2byte	0x2
 12816 003a 7D       		.byte	0x7d
 12817 003b 00       		.sleb128 0
 12818 003c 4E000000 		.4byte	.LCFI4-.Ltext0
 12819 0040 6C000000 		.4byte	.LFE62-.Ltext0
 12820 0044 0200     		.2byte	0x2
 12821 0046 7D       		.byte	0x7d
 12822 0047 18       		.sleb128 24
 12823 0048 00000000 		.4byte	0
 12824 004c 00000000 		.4byte	0
 12825              	.LVUS1:
 12826 0050 00       		.uleb128 0
 12827 0051 00       		.uleb128 .LVU9
 12828 0052 00       		.uleb128 .LVU9
 12829 0053 00       		.uleb128 .LVU21
 12830 0054 00       		.uleb128 .LVU21
 12831 0055 00       		.uleb128 .LVU22
 12832 0056 00       		.uleb128 .LVU22
 12833 0057 00       		.uleb128 .LVU30
 12834 0058 00       		.uleb128 .LVU30
 12835 0059 00       		.uleb128 .LVU31
 12836 005a 00       		.uleb128 .LVU31
 12837 005b 00       		.uleb128 .LVU41
 12838 005c 00       		.uleb128 .LVU41
 12839 005d 00       		.uleb128 0
 12840              	.LLST1:
ARM GAS  /tmp/ccGXytas.s 			page 352


 12841 005e 00000000 		.4byte	.LVL0-.Ltext0
 12842 0062 0A000000 		.4byte	.LVL2-.Ltext0
 12843 0066 0100     		.2byte	0x1
 12844 0068 50       		.byte	0x50
 12845 0069 0A000000 		.4byte	.LVL2-.Ltext0
 12846 006d 34000000 		.4byte	.LVL4-.Ltext0
 12847 0071 0100     		.2byte	0x1
 12848 0073 56       		.byte	0x56
 12849 0074 34000000 		.4byte	.LVL4-.Ltext0
 12850 0078 38000000 		.4byte	.LVL5-.Ltext0
 12851 007c 0A00     		.2byte	0xa
 12852 007e F3       		.byte	0xf3
 12853 007f 03       		.uleb128 0x3
 12854 0080 F5       		.byte	0xf5
 12855 0081 00       		.uleb128 0
 12856 0082 25       		.uleb128 0x25
 12857 0083 F7       		.byte	0xf7
 12858 0084 2C       		.uleb128 0x2c
 12859 0085 F7       		.byte	0xf7
 12860 0086 00       		.uleb128 0
 12861 0087 9F       		.byte	0x9f
 12862 0088 38000000 		.4byte	.LVL5-.Ltext0
 12863 008c 48000000 		.4byte	.LVL7-.Ltext0
 12864 0090 0100     		.2byte	0x1
 12865 0092 56       		.byte	0x56
 12866 0093 48000000 		.4byte	.LVL7-.Ltext0
 12867 0097 4E000000 		.4byte	.LVL8-.Ltext0
 12868 009b 0A00     		.2byte	0xa
 12869 009d F3       		.byte	0xf3
 12870 009e 03       		.uleb128 0x3
 12871 009f F5       		.byte	0xf5
 12872 00a0 00       		.uleb128 0
 12873 00a1 25       		.uleb128 0x25
 12874 00a2 F7       		.byte	0xf7
 12875 00a3 2C       		.uleb128 0x2c
 12876 00a4 F7       		.byte	0xf7
 12877 00a5 00       		.uleb128 0
 12878 00a6 9F       		.byte	0x9f
 12879 00a7 4E000000 		.4byte	.LVL8-.Ltext0
 12880 00ab 62000000 		.4byte	.LVL10-.Ltext0
 12881 00af 0100     		.2byte	0x1
 12882 00b1 56       		.byte	0x56
 12883 00b2 62000000 		.4byte	.LVL10-.Ltext0
 12884 00b6 6C000000 		.4byte	.LFE62-.Ltext0
 12885 00ba 0A00     		.2byte	0xa
 12886 00bc F3       		.byte	0xf3
 12887 00bd 03       		.uleb128 0x3
 12888 00be F5       		.byte	0xf5
 12889 00bf 00       		.uleb128 0
 12890 00c0 25       		.uleb128 0x25
 12891 00c1 F7       		.byte	0xf7
 12892 00c2 2C       		.uleb128 0x2c
 12893 00c3 F7       		.byte	0xf7
 12894 00c4 00       		.uleb128 0
 12895 00c5 9F       		.byte	0x9f
 12896 00c6 00000000 		.4byte	0
 12897 00ca 00000000 		.4byte	0
ARM GAS  /tmp/ccGXytas.s 			page 353


 12898              	.LVUS2:
 12899 00ce 00       		.uleb128 0
 12900 00cf 00       		.uleb128 .LVU11
 12901 00d0 00       		.uleb128 .LVU11
 12902 00d1 00       		.uleb128 .LVU21
 12903 00d2 00       		.uleb128 .LVU21
 12904 00d3 00       		.uleb128 .LVU22
 12905 00d4 00       		.uleb128 .LVU22
 12906 00d5 00       		.uleb128 .LVU30
 12907 00d6 00       		.uleb128 .LVU30
 12908 00d7 00       		.uleb128 .LVU31
 12909 00d8 00       		.uleb128 .LVU31
 12910 00d9 00       		.uleb128 .LVU41
 12911 00da 00       		.uleb128 .LVU41
 12912 00db 00       		.uleb128 0
 12913              	.LLST2:
 12914 00dc 00000000 		.4byte	.LVL0-.Ltext0
 12915 00e0 11000000 		.4byte	.LVL3-1-.Ltext0
 12916 00e4 0100     		.2byte	0x1
 12917 00e6 51       		.byte	0x51
 12918 00e7 11000000 		.4byte	.LVL3-1-.Ltext0
 12919 00eb 34000000 		.4byte	.LVL4-.Ltext0
 12920 00ef 0100     		.2byte	0x1
 12921 00f1 57       		.byte	0x57
 12922 00f2 34000000 		.4byte	.LVL4-.Ltext0
 12923 00f6 38000000 		.4byte	.LVL5-.Ltext0
 12924 00fa 0A00     		.2byte	0xa
 12925 00fc F3       		.byte	0xf3
 12926 00fd 03       		.uleb128 0x3
 12927 00fe F5       		.byte	0xf5
 12928 00ff 01       		.uleb128 0x1
 12929 0100 25       		.uleb128 0x25
 12930 0101 F7       		.byte	0xf7
 12931 0102 2C       		.uleb128 0x2c
 12932 0103 F7       		.byte	0xf7
 12933 0104 00       		.uleb128 0
 12934 0105 9F       		.byte	0x9f
 12935 0106 38000000 		.4byte	.LVL5-.Ltext0
 12936 010a 48000000 		.4byte	.LVL7-.Ltext0
 12937 010e 0100     		.2byte	0x1
 12938 0110 57       		.byte	0x57
 12939 0111 48000000 		.4byte	.LVL7-.Ltext0
 12940 0115 4E000000 		.4byte	.LVL8-.Ltext0
 12941 0119 0A00     		.2byte	0xa
 12942 011b F3       		.byte	0xf3
 12943 011c 03       		.uleb128 0x3
 12944 011d F5       		.byte	0xf5
 12945 011e 01       		.uleb128 0x1
 12946 011f 25       		.uleb128 0x25
 12947 0120 F7       		.byte	0xf7
 12948 0121 2C       		.uleb128 0x2c
 12949 0122 F7       		.byte	0xf7
 12950 0123 00       		.uleb128 0
 12951 0124 9F       		.byte	0x9f
 12952 0125 4E000000 		.4byte	.LVL8-.Ltext0
 12953 0129 62000000 		.4byte	.LVL10-.Ltext0
 12954 012d 0100     		.2byte	0x1
ARM GAS  /tmp/ccGXytas.s 			page 354


 12955 012f 57       		.byte	0x57
 12956 0130 62000000 		.4byte	.LVL10-.Ltext0
 12957 0134 6C000000 		.4byte	.LFE62-.Ltext0
 12958 0138 0A00     		.2byte	0xa
 12959 013a F3       		.byte	0xf3
 12960 013b 03       		.uleb128 0x3
 12961 013c F5       		.byte	0xf5
 12962 013d 01       		.uleb128 0x1
 12963 013e 25       		.uleb128 0x25
 12964 013f F7       		.byte	0xf7
 12965 0140 2C       		.uleb128 0x2c
 12966 0141 F7       		.byte	0xf7
 12967 0142 00       		.uleb128 0
 12968 0143 9F       		.byte	0x9f
 12969 0144 00000000 		.4byte	0
 12970 0148 00000000 		.4byte	0
 12971              	.LVUS3:
 12972 014c 00       		.uleb128 .LVU24
 12973 014d 00       		.uleb128 .LVU30
 12974 014e 00       		.uleb128 .LVU31
 12975 014f 00       		.uleb128 .LVU41
 12976              	.LLST3:
 12977 0150 3C000000 		.4byte	.LVL6-.Ltext0
 12978 0154 48000000 		.4byte	.LVL7-.Ltext0
 12979 0158 0100     		.2byte	0x1
 12980 015a 55       		.byte	0x55
 12981 015b 4E000000 		.4byte	.LVL8-.Ltext0
 12982 015f 62000000 		.4byte	.LVL10-.Ltext0
 12983 0163 0100     		.2byte	0x1
 12984 0165 55       		.byte	0x55
 12985 0166 00000000 		.4byte	0
 12986 016a 00000000 		.4byte	0
 12987              	.LVUS4:
 12988 016e 00       		.uleb128 .LVU7
 12989 016f 00       		.uleb128 .LVU21
 12990 0170 00       		.uleb128 .LVU22
 12991 0171 00       		.uleb128 .LVU24
 12992              	.LLST4:
 12993 0172 08000000 		.4byte	.LVL1-.Ltext0
 12994 0176 34000000 		.4byte	.LVL4-.Ltext0
 12995 017a 0100     		.2byte	0x1
 12996 017c 55       		.byte	0x55
 12997 017d 38000000 		.4byte	.LVL5-.Ltext0
 12998 0181 3C000000 		.4byte	.LVL6-.Ltext0
 12999 0185 0100     		.2byte	0x1
 13000 0187 55       		.byte	0x55
 13001 0188 00000000 		.4byte	0
 13002 018c 00000000 		.4byte	0
 13003              	.LLST210:
 13004 0190 20110000 		.4byte	.LFB61-.Ltext0
 13005 0194 22110000 		.4byte	.LCFI53-.Ltext0
 13006 0198 0200     		.2byte	0x2
 13007 019a 7D       		.byte	0x7d
 13008 019b 00       		.sleb128 0
 13009 019c 22110000 		.4byte	.LCFI53-.Ltext0
 13010 01a0 4C110000 		.4byte	.LFE61-.Ltext0
 13011 01a4 0200     		.2byte	0x2
ARM GAS  /tmp/ccGXytas.s 			page 355


 13012 01a6 7D       		.byte	0x7d
 13013 01a7 08       		.sleb128 8
 13014 01a8 00000000 		.4byte	0
 13015 01ac 00000000 		.4byte	0
 13016              	.LVUS211:
 13017 01b0 00       		.uleb128 0
 13018 01b1 00       		.uleb128 .LVU1745
 13019              	.LLST211:
 13020 01b2 20110000 		.4byte	.LVL391-.Ltext0
 13021 01b6 2A110000 		.4byte	.LVL392-.Ltext0
 13022 01ba 0100     		.2byte	0x1
 13023 01bc 50       		.byte	0x50
 13024 01bd 00000000 		.4byte	0
 13025 01c1 00000000 		.4byte	0
 13026              	.LVUS212:
 13027 01c5 00       		.uleb128 .LVU1745
 13028 01c6 00       		.uleb128 .LVU1753
 13029              	.LLST212:
 13030 01c7 2A110000 		.4byte	.LVL392-.Ltext0
 13031 01cb 3E110000 		.4byte	.LVL395-.Ltext0
 13032 01cf 0100     		.2byte	0x1
 13033 01d1 54       		.byte	0x54
 13034 01d2 00000000 		.4byte	0
 13035 01d6 00000000 		.4byte	0
 13036              	.LVUS213:
 13037 01da 01       		.uleb128 .LVU1752
 13038 01db 00       		.uleb128 .LVU1754
 13039 01dc 00       		.uleb128 .LVU1754
 13040 01dd 00       		.uleb128 .LVU1757
 13041 01de 00       		.uleb128 .LVU1757
 13042 01df 00       		.uleb128 0
 13043              	.LLST213:
 13044 01e0 3C110000 		.4byte	.LVL394-.Ltext0
 13045 01e4 40110000 		.4byte	.LVL396-.Ltext0
 13046 01e8 0200     		.2byte	0x2
 13047 01ea 31       		.byte	0x31
 13048 01eb 9F       		.byte	0x9f
 13049 01ec 40110000 		.4byte	.LVL396-.Ltext0
 13050 01f0 48110000 		.4byte	.LVL398-.Ltext0
 13051 01f4 0100     		.2byte	0x1
 13052 01f6 54       		.byte	0x54
 13053 01f7 48110000 		.4byte	.LVL398-.Ltext0
 13054 01fb 4C110000 		.4byte	.LFE61-.Ltext0
 13055 01ff 0100     		.2byte	0x1
 13056 0201 50       		.byte	0x50
 13057 0202 00000000 		.4byte	0
 13058 0206 00000000 		.4byte	0
 13059              	.LLST205:
 13060 020a 94100000 		.4byte	.LFB60-.Ltext0
 13061 020e 98100000 		.4byte	.LCFI52-.Ltext0
 13062 0212 0200     		.2byte	0x2
 13063 0214 7D       		.byte	0x7d
 13064 0215 00       		.sleb128 0
 13065 0216 98100000 		.4byte	.LCFI52-.Ltext0
 13066 021a 20110000 		.4byte	.LFE60-.Ltext0
 13067 021e 0200     		.2byte	0x2
 13068 0220 7D       		.byte	0x7d
ARM GAS  /tmp/ccGXytas.s 			page 356


 13069 0221 20       		.sleb128 32
 13070 0222 00000000 		.4byte	0
 13071 0226 00000000 		.4byte	0
 13072              	.LVUS206:
 13073 022a 00       		.uleb128 0
 13074 022b 00       		.uleb128 .LVU1714
 13075 022c 00       		.uleb128 .LVU1714
 13076 022d 00       		.uleb128 .LVU1735
 13077 022e 00       		.uleb128 .LVU1735
 13078 022f 00       		.uleb128 .LVU1737
 13079 0230 00       		.uleb128 .LVU1737
 13080 0231 00       		.uleb128 0
 13081              	.LLST206:
 13082 0232 94100000 		.4byte	.LVL379-.Ltext0
 13083 0236 D6100000 		.4byte	.LVL382-.Ltext0
 13084 023a 0100     		.2byte	0x1
 13085 023c 50       		.byte	0x50
 13086 023d D6100000 		.4byte	.LVL382-.Ltext0
 13087 0241 10110000 		.4byte	.LVL388-.Ltext0
 13088 0245 0100     		.2byte	0x1
 13089 0247 54       		.byte	0x54
 13090 0248 10110000 		.4byte	.LVL388-.Ltext0
 13091 024c 18110000 		.4byte	.LVL390-.Ltext0
 13092 0250 0100     		.2byte	0x1
 13093 0252 50       		.byte	0x50
 13094 0253 18110000 		.4byte	.LVL390-.Ltext0
 13095 0257 20110000 		.4byte	.LFE60-.Ltext0
 13096 025b 0100     		.2byte	0x1
 13097 025d 54       		.byte	0x54
 13098 025e 00000000 		.4byte	0
 13099 0262 00000000 		.4byte	0
 13100              	.LVUS207:
 13101 0266 00       		.uleb128 0
 13102 0267 00       		.uleb128 .LVU1715
 13103 0268 00       		.uleb128 .LVU1715
 13104 0269 00       		.uleb128 .LVU1735
 13105 026a 00       		.uleb128 .LVU1735
 13106 026b 00       		.uleb128 .LVU1736
 13107 026c 00       		.uleb128 .LVU1736
 13108 026d 00       		.uleb128 0
 13109              	.LLST207:
 13110 026e 94100000 		.4byte	.LVL379-.Ltext0
 13111 0272 D9100000 		.4byte	.LVL383-1-.Ltext0
 13112 0276 0100     		.2byte	0x1
 13113 0278 51       		.byte	0x51
 13114 0279 D9100000 		.4byte	.LVL383-1-.Ltext0
 13115 027d 10110000 		.4byte	.LVL388-.Ltext0
 13116 0281 0100     		.2byte	0x1
 13117 0283 57       		.byte	0x57
 13118 0284 10110000 		.4byte	.LVL388-.Ltext0
 13119 0288 14110000 		.4byte	.LVL389-.Ltext0
 13120 028c 0100     		.2byte	0x1
 13121 028e 51       		.byte	0x51
 13122 028f 14110000 		.4byte	.LVL389-.Ltext0
 13123 0293 20110000 		.4byte	.LFE60-.Ltext0
 13124 0297 0100     		.2byte	0x1
 13125 0299 57       		.byte	0x57
ARM GAS  /tmp/ccGXytas.s 			page 357


 13126 029a 00000000 		.4byte	0
 13127 029e 00000000 		.4byte	0
 13128              	.LVUS208:
 13129 02a2 07       		.uleb128 .LVU1685
 13130 02a3 00       		.uleb128 .LVU1714
 13131 02a4 00       		.uleb128 .LVU1714
 13132 02a5 00       		.uleb128 .LVU1735
 13133 02a6 00       		.uleb128 .LVU1735
 13134 02a7 00       		.uleb128 .LVU1737
 13135 02a8 00       		.uleb128 .LVU1737
 13136 02a9 00       		.uleb128 0
 13137              	.LLST208:
 13138 02aa 94100000 		.4byte	.LVL379-.Ltext0
 13139 02ae D6100000 		.4byte	.LVL382-.Ltext0
 13140 02b2 0100     		.2byte	0x1
 13141 02b4 50       		.byte	0x50
 13142 02b5 D6100000 		.4byte	.LVL382-.Ltext0
 13143 02b9 10110000 		.4byte	.LVL388-.Ltext0
 13144 02bd 0100     		.2byte	0x1
 13145 02bf 54       		.byte	0x54
 13146 02c0 10110000 		.4byte	.LVL388-.Ltext0
 13147 02c4 18110000 		.4byte	.LVL390-.Ltext0
 13148 02c8 0100     		.2byte	0x1
 13149 02ca 50       		.byte	0x50
 13150 02cb 18110000 		.4byte	.LVL390-.Ltext0
 13151 02cf 20110000 		.4byte	.LFE60-.Ltext0
 13152 02d3 0100     		.2byte	0x1
 13153 02d5 54       		.byte	0x54
 13154 02d6 00000000 		.4byte	0
 13155 02da 00000000 		.4byte	0
 13156              	.LVUS209:
 13157 02de 00       		.uleb128 .LVU1702
 13158 02df 00       		.uleb128 .LVU1717
 13159 02e0 00       		.uleb128 .LVU1735
 13160 02e1 00       		.uleb128 0
 13161              	.LLST209:
 13162 02e2 C4100000 		.4byte	.LVL381-.Ltext0
 13163 02e6 E4100000 		.4byte	.LVL384-.Ltext0
 13164 02ea 0100     		.2byte	0x1
 13165 02ec 56       		.byte	0x56
 13166 02ed 10110000 		.4byte	.LVL388-.Ltext0
 13167 02f1 20110000 		.4byte	.LFE60-.Ltext0
 13168 02f5 0100     		.2byte	0x1
 13169 02f7 56       		.byte	0x56
 13170 02f8 00000000 		.4byte	0
 13171 02fc 00000000 		.4byte	0
 13172              	.LLST196:
 13173 0300 E40F0000 		.4byte	.LFB59-.Ltext0
 13174 0304 E80F0000 		.4byte	.LCFI51-.Ltext0
 13175 0308 0200     		.2byte	0x2
 13176 030a 7D       		.byte	0x7d
 13177 030b 00       		.sleb128 0
 13178 030c E80F0000 		.4byte	.LCFI51-.Ltext0
 13179 0310 94100000 		.4byte	.LFE59-.Ltext0
 13180 0314 0200     		.2byte	0x2
 13181 0316 7D       		.byte	0x7d
 13182 0317 20       		.sleb128 32
ARM GAS  /tmp/ccGXytas.s 			page 358


 13183 0318 00000000 		.4byte	0
 13184 031c 00000000 		.4byte	0
 13185              	.LVUS197:
 13186 0320 00       		.uleb128 0
 13187 0321 00       		.uleb128 .LVU1617
 13188 0322 00       		.uleb128 .LVU1617
 13189 0323 00       		.uleb128 0
 13190              	.LLST197:
 13191 0324 E40F0000 		.4byte	.LVL365-.Ltext0
 13192 0328 00100000 		.4byte	.LVL367-.Ltext0
 13193 032c 0100     		.2byte	0x1
 13194 032e 50       		.byte	0x50
 13195 032f 00100000 		.4byte	.LVL367-.Ltext0
 13196 0333 94100000 		.4byte	.LFE59-.Ltext0
 13197 0337 0100     		.2byte	0x1
 13198 0339 54       		.byte	0x54
 13199 033a 00000000 		.4byte	0
 13200 033e 00000000 		.4byte	0
 13201              	.LVUS198:
 13202 0342 00       		.uleb128 0
 13203 0343 00       		.uleb128 .LVU1646
 13204 0344 00       		.uleb128 .LVU1646
 13205 0345 00       		.uleb128 .LVU1668
 13206 0346 00       		.uleb128 .LVU1668
 13207 0347 00       		.uleb128 .LVU1676
 13208 0348 00       		.uleb128 .LVU1676
 13209 0349 00       		.uleb128 .LVU1677
 13210 034a 00       		.uleb128 .LVU1677
 13211 034b 00       		.uleb128 0
 13212              	.LLST198:
 13213 034c E40F0000 		.4byte	.LVL365-.Ltext0
 13214 0350 3B100000 		.4byte	.LVL371-1-.Ltext0
 13215 0354 0100     		.2byte	0x1
 13216 0356 51       		.byte	0x51
 13217 0357 3B100000 		.4byte	.LVL371-1-.Ltext0
 13218 035b 74100000 		.4byte	.LVL376-.Ltext0
 13219 035f 0A00     		.2byte	0xa
 13220 0361 F3       		.byte	0xf3
 13221 0362 03       		.uleb128 0x3
 13222 0363 F5       		.byte	0xf5
 13223 0364 01       		.uleb128 0x1
 13224 0365 25       		.uleb128 0x25
 13225 0366 F7       		.byte	0xf7
 13226 0367 2C       		.uleb128 0x2c
 13227 0368 F7       		.byte	0xf7
 13228 0369 00       		.uleb128 0
 13229 036a 9F       		.byte	0x9f
 13230 036b 74100000 		.4byte	.LVL376-.Ltext0
 13231 036f 86100000 		.4byte	.LVL377-.Ltext0
 13232 0373 0100     		.2byte	0x1
 13233 0375 51       		.byte	0x51
 13234 0376 86100000 		.4byte	.LVL377-.Ltext0
 13235 037a 8C100000 		.4byte	.LVL378-.Ltext0
 13236 037e 0A00     		.2byte	0xa
 13237 0380 F3       		.byte	0xf3
 13238 0381 03       		.uleb128 0x3
 13239 0382 F5       		.byte	0xf5
ARM GAS  /tmp/ccGXytas.s 			page 359


 13240 0383 01       		.uleb128 0x1
 13241 0384 25       		.uleb128 0x25
 13242 0385 F7       		.byte	0xf7
 13243 0386 2C       		.uleb128 0x2c
 13244 0387 F7       		.byte	0xf7
 13245 0388 00       		.uleb128 0
 13246 0389 9F       		.byte	0x9f
 13247 038a 8C100000 		.4byte	.LVL378-.Ltext0
 13248 038e 94100000 		.4byte	.LFE59-.Ltext0
 13249 0392 0100     		.2byte	0x1
 13250 0394 51       		.byte	0x51
 13251 0395 00000000 		.4byte	0
 13252 0399 00000000 		.4byte	0
 13253              	.LVUS199:
 13254 039d 00       		.uleb128 0
 13255 039e 00       		.uleb128 .LVU1628
 13256 039f 00       		.uleb128 .LVU1628
 13257 03a0 00       		.uleb128 0
 13258              	.LLST199:
 13259 03a1 E40F0000 		.4byte	.LVL365-.Ltext0
 13260 03a5 0E100000 		.4byte	.LVL369-.Ltext0
 13261 03a9 0100     		.2byte	0x1
 13262 03ab 52       		.byte	0x52
 13263 03ac 0E100000 		.4byte	.LVL369-.Ltext0
 13264 03b0 94100000 		.4byte	.LFE59-.Ltext0
 13265 03b4 0A00     		.2byte	0xa
 13266 03b6 F3       		.byte	0xf3
 13267 03b7 03       		.uleb128 0x3
 13268 03b8 F5       		.byte	0xf5
 13269 03b9 02       		.uleb128 0x2
 13270 03ba 25       		.uleb128 0x25
 13271 03bb F7       		.byte	0xf7
 13272 03bc 33       		.uleb128 0x33
 13273 03bd F7       		.byte	0xf7
 13274 03be 00       		.uleb128 0
 13275 03bf 9F       		.byte	0x9f
 13276 03c0 00000000 		.4byte	0
 13277 03c4 00000000 		.4byte	0
 13278              	.LVUS200:
 13279 03c8 00       		.uleb128 0
 13280 03c9 00       		.uleb128 .LVU1626
 13281 03ca 00       		.uleb128 .LVU1626
 13282 03cb 00       		.uleb128 0
 13283              	.LLST200:
 13284 03cc E40F0000 		.4byte	.LVL365-.Ltext0
 13285 03d0 08100000 		.4byte	.LVL368-.Ltext0
 13286 03d4 0100     		.2byte	0x1
 13287 03d6 53       		.byte	0x53
 13288 03d7 08100000 		.4byte	.LVL368-.Ltext0
 13289 03db 94100000 		.4byte	.LFE59-.Ltext0
 13290 03df 0A00     		.2byte	0xa
 13291 03e1 F3       		.byte	0xf3
 13292 03e2 03       		.uleb128 0x3
 13293 03e3 F5       		.byte	0xf5
 13294 03e4 03       		.uleb128 0x3
 13295 03e5 25       		.uleb128 0x25
 13296 03e6 F7       		.byte	0xf7
ARM GAS  /tmp/ccGXytas.s 			page 360


 13297 03e7 2C       		.uleb128 0x2c
 13298 03e8 F7       		.byte	0xf7
 13299 03e9 00       		.uleb128 0
 13300 03ea 9F       		.byte	0x9f
 13301 03eb 00000000 		.4byte	0
 13302 03ef 00000000 		.4byte	0
 13303              	.LVUS201:
 13304 03f3 00       		.uleb128 0
 13305 03f4 00       		.uleb128 .LVU1668
 13306 03f5 00       		.uleb128 .LVU1668
 13307 03f6 00       		.uleb128 0
 13308              	.LLST201:
 13309 03f7 E40F0000 		.4byte	.LVL365-.Ltext0
 13310 03fb 74100000 		.4byte	.LVL376-.Ltext0
 13311 03ff 0200     		.2byte	0x2
 13312 0401 91       		.byte	0x91
 13313 0402 00       		.sleb128 0
 13314 0403 74100000 		.4byte	.LVL376-.Ltext0
 13315 0407 94100000 		.4byte	.LFE59-.Ltext0
 13316 040b 0200     		.2byte	0x2
 13317 040d 91       		.byte	0x91
 13318 040e 00       		.sleb128 0
 13319 040f 00000000 		.4byte	0
 13320 0413 00000000 		.4byte	0
 13321              	.LVUS202:
 13322 0417 00       		.uleb128 .LVU1613
 13323 0418 00       		.uleb128 .LVU1617
 13324 0419 00       		.uleb128 .LVU1617
 13325 041a 00       		.uleb128 0
 13326              	.LLST202:
 13327 041b EC0F0000 		.4byte	.LVL366-.Ltext0
 13328 041f 00100000 		.4byte	.LVL367-.Ltext0
 13329 0423 0100     		.2byte	0x1
 13330 0425 50       		.byte	0x50
 13331 0426 00100000 		.4byte	.LVL367-.Ltext0
 13332 042a 94100000 		.4byte	.LFE59-.Ltext0
 13333 042e 0100     		.2byte	0x1
 13334 0430 54       		.byte	0x54
 13335 0431 00000000 		.4byte	0
 13336 0435 00000000 		.4byte	0
 13337              	.LVUS203:
 13338 0439 00       		.uleb128 .LVU1629
 13339 043a 00       		.uleb128 .LVU1648
 13340 043b 00       		.uleb128 .LVU1668
 13341 043c 00       		.uleb128 0
 13342              	.LLST203:
 13343 043d 10100000 		.4byte	.LVL370-.Ltext0
 13344 0441 46100000 		.4byte	.LVL372-.Ltext0
 13345 0445 0100     		.2byte	0x1
 13346 0447 55       		.byte	0x55
 13347 0448 74100000 		.4byte	.LVL376-.Ltext0
 13348 044c 94100000 		.4byte	.LFE59-.Ltext0
 13349 0450 0100     		.2byte	0x1
 13350 0452 55       		.byte	0x55
 13351 0453 00000000 		.4byte	0
 13352 0457 00000000 		.4byte	0
 13353              	.LVUS204:
ARM GAS  /tmp/ccGXytas.s 			page 361


 13354 045b 04       		.uleb128 .LVU1607
 13355 045c 00       		.uleb128 .LVU1661
 13356 045d 00       		.uleb128 .LVU1668
 13357 045e 00       		.uleb128 0
 13358              	.LLST204:
 13359 045f E40F0000 		.4byte	.LVL365-.Ltext0
 13360 0463 6C100000 		.4byte	.LVL374-.Ltext0
 13361 0467 0200     		.2byte	0x2
 13362 0469 31       		.byte	0x31
 13363 046a 9F       		.byte	0x9f
 13364 046b 74100000 		.4byte	.LVL376-.Ltext0
 13365 046f 94100000 		.4byte	.LFE59-.Ltext0
 13366 0473 0200     		.2byte	0x2
 13367 0475 31       		.byte	0x31
 13368 0476 9F       		.byte	0x9f
 13369 0477 00000000 		.4byte	0
 13370 047b 00000000 		.4byte	0
 13371              	.LLST188:
 13372 047f 480F0000 		.4byte	.LFB58-.Ltext0
 13373 0483 4A0F0000 		.4byte	.LCFI50-.Ltext0
 13374 0487 0200     		.2byte	0x2
 13375 0489 7D       		.byte	0x7d
 13376 048a 00       		.sleb128 0
 13377 048b 4A0F0000 		.4byte	.LCFI50-.Ltext0
 13378 048f E40F0000 		.4byte	.LFE58-.Ltext0
 13379 0493 0200     		.2byte	0x2
 13380 0495 7D       		.byte	0x7d
 13381 0496 18       		.sleb128 24
 13382 0497 00000000 		.4byte	0
 13383 049b 00000000 		.4byte	0
 13384              	.LVUS189:
 13385 049f 00       		.uleb128 0
 13386 04a0 00       		.uleb128 .LVU1551
 13387 04a1 00       		.uleb128 .LVU1551
 13388 04a2 00       		.uleb128 .LVU1590
 13389 04a3 00       		.uleb128 .LVU1590
 13390 04a4 00       		.uleb128 .LVU1594
 13391 04a5 00       		.uleb128 .LVU1594
 13392 04a6 00       		.uleb128 .LVU1602
 13393 04a7 00       		.uleb128 .LVU1602
 13394 04a8 00       		.uleb128 0
 13395              	.LLST189:
 13396 04a9 480F0000 		.4byte	.LVL351-.Ltext0
 13397 04ad 550F0000 		.4byte	.LVL353-1-.Ltext0
 13398 04b1 0100     		.2byte	0x1
 13399 04b3 50       		.byte	0x50
 13400 04b4 550F0000 		.4byte	.LVL353-1-.Ltext0
 13401 04b8 C40F0000 		.4byte	.LVL361-.Ltext0
 13402 04bc 0100     		.2byte	0x1
 13403 04be 54       		.byte	0x54
 13404 04bf C40F0000 		.4byte	.LVL361-.Ltext0
 13405 04c3 CC0F0000 		.4byte	.LVL363-.Ltext0
 13406 04c7 0A00     		.2byte	0xa
 13407 04c9 F3       		.byte	0xf3
 13408 04ca 03       		.uleb128 0x3
 13409 04cb F5       		.byte	0xf5
 13410 04cc 00       		.uleb128 0
ARM GAS  /tmp/ccGXytas.s 			page 362


 13411 04cd 25       		.uleb128 0x25
 13412 04ce F7       		.byte	0xf7
 13413 04cf 2C       		.uleb128 0x2c
 13414 04d0 F7       		.byte	0xf7
 13415 04d1 00       		.uleb128 0
 13416 04d2 9F       		.byte	0x9f
 13417 04d3 CC0F0000 		.4byte	.LVL363-.Ltext0
 13418 04d7 DC0F0000 		.4byte	.LVL364-.Ltext0
 13419 04db 0100     		.2byte	0x1
 13420 04dd 54       		.byte	0x54
 13421 04de DC0F0000 		.4byte	.LVL364-.Ltext0
 13422 04e2 E40F0000 		.4byte	.LFE58-.Ltext0
 13423 04e6 0A00     		.2byte	0xa
 13424 04e8 F3       		.byte	0xf3
 13425 04e9 03       		.uleb128 0x3
 13426 04ea F5       		.byte	0xf5
 13427 04eb 00       		.uleb128 0
 13428 04ec 25       		.uleb128 0x25
 13429 04ed F7       		.byte	0xf7
 13430 04ee 2C       		.uleb128 0x2c
 13431 04ef F7       		.byte	0xf7
 13432 04f0 00       		.uleb128 0
 13433 04f1 9F       		.byte	0x9f
 13434 04f2 00000000 		.4byte	0
 13435 04f6 00000000 		.4byte	0
 13436              	.LVUS190:
 13437 04fa 00       		.uleb128 0
 13438 04fb 00       		.uleb128 .LVU1551
 13439 04fc 00       		.uleb128 .LVU1551
 13440 04fd 00       		.uleb128 .LVU1574
 13441 04fe 00       		.uleb128 .LVU1574
 13442 04ff 00       		.uleb128 .LVU1594
 13443 0500 00       		.uleb128 .LVU1594
 13444 0501 00       		.uleb128 0
 13445              	.LLST190:
 13446 0502 480F0000 		.4byte	.LVL351-.Ltext0
 13447 0506 550F0000 		.4byte	.LVL353-1-.Ltext0
 13448 050a 0100     		.2byte	0x1
 13449 050c 51       		.byte	0x51
 13450 050d 550F0000 		.4byte	.LVL353-1-.Ltext0
 13451 0511 820F0000 		.4byte	.LVL356-.Ltext0
 13452 0515 0100     		.2byte	0x1
 13453 0517 57       		.byte	0x57
 13454 0518 820F0000 		.4byte	.LVL356-.Ltext0
 13455 051c CC0F0000 		.4byte	.LVL363-.Ltext0
 13456 0520 0A00     		.2byte	0xa
 13457 0522 F3       		.byte	0xf3
 13458 0523 03       		.uleb128 0x3
 13459 0524 F5       		.byte	0xf5
 13460 0525 01       		.uleb128 0x1
 13461 0526 25       		.uleb128 0x25
 13462 0527 F7       		.byte	0xf7
 13463 0528 2C       		.uleb128 0x2c
 13464 0529 F7       		.byte	0xf7
 13465 052a 00       		.uleb128 0
 13466 052b 9F       		.byte	0x9f
 13467 052c CC0F0000 		.4byte	.LVL363-.Ltext0
ARM GAS  /tmp/ccGXytas.s 			page 363


 13468 0530 E40F0000 		.4byte	.LFE58-.Ltext0
 13469 0534 0100     		.2byte	0x1
 13470 0536 57       		.byte	0x57
 13471 0537 00000000 		.4byte	0
 13472 053b 00000000 		.4byte	0
 13473              	.LVUS191:
 13474 053f 00       		.uleb128 0
 13475 0540 00       		.uleb128 .LVU1551
 13476 0541 00       		.uleb128 .LVU1551
 13477 0542 00       		.uleb128 .LVU1577
 13478 0543 00       		.uleb128 .LVU1577
 13479 0544 00       		.uleb128 0
 13480              	.LLST191:
 13481 0545 480F0000 		.4byte	.LVL351-.Ltext0
 13482 0549 550F0000 		.4byte	.LVL353-1-.Ltext0
 13483 054d 0100     		.2byte	0x1
 13484 054f 52       		.byte	0x52
 13485 0550 550F0000 		.4byte	.LVL353-1-.Ltext0
 13486 0554 8C0F0000 		.4byte	.LVL358-.Ltext0
 13487 0558 0100     		.2byte	0x1
 13488 055a 56       		.byte	0x56
 13489 055b 8C0F0000 		.4byte	.LVL358-.Ltext0
 13490 055f E40F0000 		.4byte	.LFE58-.Ltext0
 13491 0563 0A00     		.2byte	0xa
 13492 0565 F3       		.byte	0xf3
 13493 0566 03       		.uleb128 0x3
 13494 0567 F5       		.byte	0xf5
 13495 0568 02       		.uleb128 0x2
 13496 0569 25       		.uleb128 0x25
 13497 056a F7       		.byte	0xf7
 13498 056b 33       		.uleb128 0x33
 13499 056c F7       		.byte	0xf7
 13500 056d 00       		.uleb128 0
 13501 056e 9F       		.byte	0x9f
 13502 056f 00000000 		.4byte	0
 13503 0573 00000000 		.4byte	0
 13504              	.LVUS192:
 13505 0577 00       		.uleb128 0
 13506 0578 00       		.uleb128 .LVU1551
 13507 0579 00       		.uleb128 .LVU1551
 13508 057a 00       		.uleb128 .LVU1559
 13509 057b 00       		.uleb128 .LVU1559
 13510 057c 00       		.uleb128 0
 13511              	.LLST192:
 13512 057d 480F0000 		.4byte	.LVL351-.Ltext0
 13513 0581 550F0000 		.4byte	.LVL353-1-.Ltext0
 13514 0585 0100     		.2byte	0x1
 13515 0587 53       		.byte	0x53
 13516 0588 550F0000 		.4byte	.LVL353-1-.Ltext0
 13517 058c 620F0000 		.4byte	.LVL354-.Ltext0
 13518 0590 0100     		.2byte	0x1
 13519 0592 55       		.byte	0x55
 13520 0593 620F0000 		.4byte	.LVL354-.Ltext0
 13521 0597 E40F0000 		.4byte	.LFE58-.Ltext0
 13522 059b 0A00     		.2byte	0xa
 13523 059d F3       		.byte	0xf3
 13524 059e 03       		.uleb128 0x3
ARM GAS  /tmp/ccGXytas.s 			page 364


 13525 059f F5       		.byte	0xf5
 13526 05a0 03       		.uleb128 0x3
 13527 05a1 25       		.uleb128 0x25
 13528 05a2 F7       		.byte	0xf7
 13529 05a3 2C       		.uleb128 0x2c
 13530 05a4 F7       		.byte	0xf7
 13531 05a5 00       		.uleb128 0
 13532 05a6 9F       		.byte	0x9f
 13533 05a7 00000000 		.4byte	0
 13534 05ab 00000000 		.4byte	0
 13535              	.LVUS193:
 13536 05af 00       		.uleb128 .LVU1548
 13537 05b0 00       		.uleb128 .LVU1551
 13538 05b1 00       		.uleb128 .LVU1551
 13539 05b2 00       		.uleb128 .LVU1590
 13540 05b3 00       		.uleb128 .LVU1590
 13541 05b4 00       		.uleb128 .LVU1594
 13542 05b5 00       		.uleb128 .LVU1594
 13543 05b6 00       		.uleb128 .LVU1602
 13544 05b7 00       		.uleb128 .LVU1602
 13545 05b8 00       		.uleb128 0
 13546              	.LLST193:
 13547 05b9 4E0F0000 		.4byte	.LVL352-.Ltext0
 13548 05bd 550F0000 		.4byte	.LVL353-1-.Ltext0
 13549 05c1 0100     		.2byte	0x1
 13550 05c3 50       		.byte	0x50
 13551 05c4 550F0000 		.4byte	.LVL353-1-.Ltext0
 13552 05c8 C40F0000 		.4byte	.LVL361-.Ltext0
 13553 05cc 0100     		.2byte	0x1
 13554 05ce 54       		.byte	0x54
 13555 05cf C40F0000 		.4byte	.LVL361-.Ltext0
 13556 05d3 CC0F0000 		.4byte	.LVL363-.Ltext0
 13557 05d7 0A00     		.2byte	0xa
 13558 05d9 F3       		.byte	0xf3
 13559 05da 03       		.uleb128 0x3
 13560 05db F5       		.byte	0xf5
 13561 05dc 00       		.uleb128 0
 13562 05dd 25       		.uleb128 0x25
 13563 05de F7       		.byte	0xf7
 13564 05df 2C       		.uleb128 0x2c
 13565 05e0 F7       		.byte	0xf7
 13566 05e1 00       		.uleb128 0
 13567 05e2 9F       		.byte	0x9f
 13568 05e3 CC0F0000 		.4byte	.LVL363-.Ltext0
 13569 05e7 DC0F0000 		.4byte	.LVL364-.Ltext0
 13570 05eb 0100     		.2byte	0x1
 13571 05ed 54       		.byte	0x54
 13572 05ee DC0F0000 		.4byte	.LVL364-.Ltext0
 13573 05f2 E40F0000 		.4byte	.LFE58-.Ltext0
 13574 05f6 0A00     		.2byte	0xa
 13575 05f8 F3       		.byte	0xf3
 13576 05f9 03       		.uleb128 0x3
 13577 05fa F5       		.byte	0xf5
 13578 05fb 00       		.uleb128 0
 13579 05fc 25       		.uleb128 0x25
 13580 05fd F7       		.byte	0xf7
 13581 05fe 2C       		.uleb128 0x2c
ARM GAS  /tmp/ccGXytas.s 			page 365


 13582 05ff F7       		.byte	0xf7
 13583 0600 00       		.uleb128 0
 13584 0601 9F       		.byte	0x9f
 13585 0602 00000000 		.4byte	0
 13586 0606 00000000 		.4byte	0
 13587              	.LVUS194:
 13588 060a 03       		.uleb128 .LVU1543
 13589 060b 00       		.uleb128 .LVU1590
 13590 060c 00       		.uleb128 .LVU1594
 13591 060d 00       		.uleb128 0
 13592              	.LLST194:
 13593 060e 480F0000 		.4byte	.LVL351-.Ltext0
 13594 0612 C40F0000 		.4byte	.LVL361-.Ltext0
 13595 0616 0200     		.2byte	0x2
 13596 0618 31       		.byte	0x31
 13597 0619 9F       		.byte	0x9f
 13598 061a CC0F0000 		.4byte	.LVL363-.Ltext0
 13599 061e E40F0000 		.4byte	.LFE58-.Ltext0
 13600 0622 0200     		.2byte	0x2
 13601 0624 31       		.byte	0x31
 13602 0625 9F       		.byte	0x9f
 13603 0626 00000000 		.4byte	0
 13604 062a 00000000 		.4byte	0
 13605              	.LVUS195:
 13606 062e 00       		.uleb128 .LVU1561
 13607 062f 00       		.uleb128 .LVU1578
 13608 0630 00       		.uleb128 .LVU1594
 13609 0631 00       		.uleb128 0
 13610              	.LLST195:
 13611 0632 660F0000 		.4byte	.LVL355-.Ltext0
 13612 0636 920F0000 		.4byte	.LVL359-.Ltext0
 13613 063a 0100     		.2byte	0x1
 13614 063c 55       		.byte	0x55
 13615 063d CC0F0000 		.4byte	.LVL363-.Ltext0
 13616 0641 E40F0000 		.4byte	.LFE58-.Ltext0
 13617 0645 0100     		.2byte	0x1
 13618 0647 55       		.byte	0x55
 13619 0648 00000000 		.4byte	0
 13620 064c 00000000 		.4byte	0
 13621              	.LLST182:
 13622 0650 C00E0000 		.4byte	.LFB57-.Ltext0
 13623 0654 C40E0000 		.4byte	.LCFI49-.Ltext0
 13624 0658 0200     		.2byte	0x2
 13625 065a 7D       		.byte	0x7d
 13626 065b 00       		.sleb128 0
 13627 065c C40E0000 		.4byte	.LCFI49-.Ltext0
 13628 0660 480F0000 		.4byte	.LFE57-.Ltext0
 13629 0664 0200     		.2byte	0x2
 13630 0666 7D       		.byte	0x7d
 13631 0667 18       		.sleb128 24
 13632 0668 00000000 		.4byte	0
 13633 066c 00000000 		.4byte	0
 13634              	.LVUS183:
 13635 0670 00       		.uleb128 0
 13636 0671 00       		.uleb128 .LVU1495
 13637 0672 00       		.uleb128 .LVU1495
 13638 0673 00       		.uleb128 .LVU1539
ARM GAS  /tmp/ccGXytas.s 			page 366


 13639 0674 00       		.uleb128 .LVU1539
 13640 0675 00       		.uleb128 0
 13641              	.LLST183:
 13642 0676 C00E0000 		.4byte	.LVL342-.Ltext0
 13643 067a D10E0000 		.4byte	.LVL343-1-.Ltext0
 13644 067e 0100     		.2byte	0x1
 13645 0680 50       		.byte	0x50
 13646 0681 D10E0000 		.4byte	.LVL343-1-.Ltext0
 13647 0685 440F0000 		.4byte	.LVL350-.Ltext0
 13648 0689 0100     		.2byte	0x1
 13649 068b 58       		.byte	0x58
 13650 068c 440F0000 		.4byte	.LVL350-.Ltext0
 13651 0690 480F0000 		.4byte	.LFE57-.Ltext0
 13652 0694 0A00     		.2byte	0xa
 13653 0696 F3       		.byte	0xf3
 13654 0697 03       		.uleb128 0x3
 13655 0698 F5       		.byte	0xf5
 13656 0699 00       		.uleb128 0
 13657 069a 25       		.uleb128 0x25
 13658 069b F7       		.byte	0xf7
 13659 069c 2C       		.uleb128 0x2c
 13660 069d F7       		.byte	0xf7
 13661 069e 00       		.uleb128 0
 13662 069f 9F       		.byte	0x9f
 13663 06a0 00000000 		.4byte	0
 13664 06a4 00000000 		.4byte	0
 13665              	.LVUS184:
 13666 06a8 00       		.uleb128 0
 13667 06a9 00       		.uleb128 .LVU1495
 13668 06aa 00       		.uleb128 .LVU1495
 13669 06ab 00       		.uleb128 .LVU1539
 13670 06ac 00       		.uleb128 .LVU1539
 13671 06ad 00       		.uleb128 0
 13672              	.LLST184:
 13673 06ae C00E0000 		.4byte	.LVL342-.Ltext0
 13674 06b2 D10E0000 		.4byte	.LVL343-1-.Ltext0
 13675 06b6 0100     		.2byte	0x1
 13676 06b8 51       		.byte	0x51
 13677 06b9 D10E0000 		.4byte	.LVL343-1-.Ltext0
 13678 06bd 440F0000 		.4byte	.LVL350-.Ltext0
 13679 06c1 0100     		.2byte	0x1
 13680 06c3 57       		.byte	0x57
 13681 06c4 440F0000 		.4byte	.LVL350-.Ltext0
 13682 06c8 480F0000 		.4byte	.LFE57-.Ltext0
 13683 06cc 0A00     		.2byte	0xa
 13684 06ce F3       		.byte	0xf3
 13685 06cf 03       		.uleb128 0x3
 13686 06d0 F5       		.byte	0xf5
 13687 06d1 01       		.uleb128 0x1
 13688 06d2 25       		.uleb128 0x25
 13689 06d3 F7       		.byte	0xf7
 13690 06d4 2C       		.uleb128 0x2c
 13691 06d5 F7       		.byte	0xf7
 13692 06d6 00       		.uleb128 0
 13693 06d7 9F       		.byte	0x9f
 13694 06d8 00000000 		.4byte	0
 13695 06dc 00000000 		.4byte	0
ARM GAS  /tmp/ccGXytas.s 			page 367


 13696              	.LVUS185:
 13697 06e0 00       		.uleb128 0
 13698 06e1 00       		.uleb128 .LVU1495
 13699 06e2 00       		.uleb128 .LVU1495
 13700 06e3 00       		.uleb128 .LVU1528
 13701 06e4 00       		.uleb128 .LVU1528
 13702 06e5 00       		.uleb128 0
 13703              	.LLST185:
 13704 06e6 C00E0000 		.4byte	.LVL342-.Ltext0
 13705 06ea D10E0000 		.4byte	.LVL343-1-.Ltext0
 13706 06ee 0100     		.2byte	0x1
 13707 06f0 52       		.byte	0x52
 13708 06f1 D10E0000 		.4byte	.LVL343-1-.Ltext0
 13709 06f5 280F0000 		.4byte	.LVL347-.Ltext0
 13710 06f9 0100     		.2byte	0x1
 13711 06fb 55       		.byte	0x55
 13712 06fc 280F0000 		.4byte	.LVL347-.Ltext0
 13713 0700 480F0000 		.4byte	.LFE57-.Ltext0
 13714 0704 0A00     		.2byte	0xa
 13715 0706 F3       		.byte	0xf3
 13716 0707 03       		.uleb128 0x3
 13717 0708 F5       		.byte	0xf5
 13718 0709 02       		.uleb128 0x2
 13719 070a 25       		.uleb128 0x25
 13720 070b F7       		.byte	0xf7
 13721 070c 2C       		.uleb128 0x2c
 13722 070d F7       		.byte	0xf7
 13723 070e 00       		.uleb128 0
 13724 070f 9F       		.byte	0x9f
 13725 0710 00000000 		.4byte	0
 13726 0714 00000000 		.4byte	0
 13727              	.LVUS186:
 13728 0718 00       		.uleb128 0
 13729 0719 00       		.uleb128 .LVU1495
 13730 071a 00       		.uleb128 .LVU1495
 13731 071b 00       		.uleb128 .LVU1539
 13732 071c 00       		.uleb128 .LVU1539
 13733 071d 00       		.uleb128 0
 13734              	.LLST186:
 13735 071e C00E0000 		.4byte	.LVL342-.Ltext0
 13736 0722 D10E0000 		.4byte	.LVL343-1-.Ltext0
 13737 0726 0100     		.2byte	0x1
 13738 0728 53       		.byte	0x53
 13739 0729 D10E0000 		.4byte	.LVL343-1-.Ltext0
 13740 072d 440F0000 		.4byte	.LVL350-.Ltext0
 13741 0731 0100     		.2byte	0x1
 13742 0733 56       		.byte	0x56
 13743 0734 440F0000 		.4byte	.LVL350-.Ltext0
 13744 0738 480F0000 		.4byte	.LFE57-.Ltext0
 13745 073c 0A00     		.2byte	0xa
 13746 073e F3       		.byte	0xf3
 13747 073f 03       		.uleb128 0x3
 13748 0740 F5       		.byte	0xf5
 13749 0741 03       		.uleb128 0x3
 13750 0742 25       		.uleb128 0x25
 13751 0743 F7       		.byte	0xf7
 13752 0744 2C       		.uleb128 0x2c
ARM GAS  /tmp/ccGXytas.s 			page 368


 13753 0745 F7       		.byte	0xf7
 13754 0746 00       		.uleb128 0
 13755 0747 9F       		.byte	0x9f
 13756 0748 00000000 		.4byte	0
 13757 074c 00000000 		.4byte	0
 13758              	.LVUS187:
 13759 0750 01       		.uleb128 .LVU1532
 13760 0751 00       		.uleb128 .LVU1539
 13761 0752 00       		.uleb128 .LVU1539
 13762 0753 00       		.uleb128 0
 13763              	.LLST187:
 13764 0754 320F0000 		.4byte	.LVL348-.Ltext0
 13765 0758 440F0000 		.4byte	.LVL350-.Ltext0
 13766 075c 0100     		.2byte	0x1
 13767 075e 55       		.byte	0x55
 13768 075f 440F0000 		.4byte	.LVL350-.Ltext0
 13769 0763 480F0000 		.4byte	.LFE57-.Ltext0
 13770 0767 0100     		.2byte	0x1
 13771 0769 50       		.byte	0x50
 13772 076a 00000000 		.4byte	0
 13773 076e 00000000 		.4byte	0
 13774              	.LLST178:
 13775 0772 5C0E0000 		.4byte	.LFB56-.Ltext0
 13776 0776 5E0E0000 		.4byte	.LCFI48-.Ltext0
 13777 077a 0200     		.2byte	0x2
 13778 077c 7D       		.byte	0x7d
 13779 077d 00       		.sleb128 0
 13780 077e 5E0E0000 		.4byte	.LCFI48-.Ltext0
 13781 0782 C00E0000 		.4byte	.LFE56-.Ltext0
 13782 0786 0200     		.2byte	0x2
 13783 0788 7D       		.byte	0x7d
 13784 0789 10       		.sleb128 16
 13785 078a 00000000 		.4byte	0
 13786 078e 00000000 		.4byte	0
 13787              	.LVUS179:
 13788 0792 00       		.uleb128 0
 13789 0793 00       		.uleb128 .LVU1448
 13790 0794 00       		.uleb128 .LVU1448
 13791 0795 00       		.uleb128 0
 13792              	.LLST179:
 13793 0796 5C0E0000 		.4byte	.LVL334-.Ltext0
 13794 079a 670E0000 		.4byte	.LVL335-1-.Ltext0
 13795 079e 0100     		.2byte	0x1
 13796 07a0 50       		.byte	0x50
 13797 07a1 670E0000 		.4byte	.LVL335-1-.Ltext0
 13798 07a5 C00E0000 		.4byte	.LFE56-.Ltext0
 13799 07a9 0100     		.2byte	0x1
 13800 07ab 56       		.byte	0x56
 13801 07ac 00000000 		.4byte	0
 13802 07b0 00000000 		.4byte	0
 13803              	.LVUS180:
 13804 07b4 00       		.uleb128 0
 13805 07b5 00       		.uleb128 .LVU1448
 13806 07b6 00       		.uleb128 .LVU1448
 13807 07b7 00       		.uleb128 .LVU1470
 13808 07b8 00       		.uleb128 .LVU1470
 13809 07b9 00       		.uleb128 0
ARM GAS  /tmp/ccGXytas.s 			page 369


 13810              	.LLST180:
 13811 07ba 5C0E0000 		.4byte	.LVL334-.Ltext0
 13812 07be 670E0000 		.4byte	.LVL335-1-.Ltext0
 13813 07c2 0100     		.2byte	0x1
 13814 07c4 51       		.byte	0x51
 13815 07c5 670E0000 		.4byte	.LVL335-1-.Ltext0
 13816 07c9 9E0E0000 		.4byte	.LVL339-.Ltext0
 13817 07cd 0100     		.2byte	0x1
 13818 07cf 55       		.byte	0x55
 13819 07d0 9E0E0000 		.4byte	.LVL339-.Ltext0
 13820 07d4 C00E0000 		.4byte	.LFE56-.Ltext0
 13821 07d8 0A00     		.2byte	0xa
 13822 07da F3       		.byte	0xf3
 13823 07db 03       		.uleb128 0x3
 13824 07dc F5       		.byte	0xf5
 13825 07dd 01       		.uleb128 0x1
 13826 07de 25       		.uleb128 0x25
 13827 07df F7       		.byte	0xf7
 13828 07e0 2C       		.uleb128 0x2c
 13829 07e1 F7       		.byte	0xf7
 13830 07e2 00       		.uleb128 0
 13831 07e3 9F       		.byte	0x9f
 13832 07e4 00000000 		.4byte	0
 13833 07e8 00000000 		.4byte	0
 13834              	.LVUS181:
 13835 07ec 00       		.uleb128 .LVU1470
 13836 07ed 00       		.uleb128 0
 13837              	.LLST181:
 13838 07ee 9E0E0000 		.4byte	.LVL339-.Ltext0
 13839 07f2 C00E0000 		.4byte	.LFE56-.Ltext0
 13840 07f6 0100     		.2byte	0x1
 13841 07f8 55       		.byte	0x55
 13842 07f9 00000000 		.4byte	0
 13843 07fd 00000000 		.4byte	0
 13844              	.LVUS177:
 13845 0801 00       		.uleb128 .LVU1428
 13846 0802 00       		.uleb128 0
 13847              	.LLST177:
 13848 0803 340E0000 		.4byte	.LVL333-.Ltext0
 13849 0807 440E0000 		.4byte	.LFE54-.Ltext0
 13850 080b 0100     		.2byte	0x1
 13851 080d 50       		.byte	0x50
 13852 080e 00000000 		.4byte	0
 13853 0812 00000000 		.4byte	0
 13854              	.LLST171:
 13855 0816 A80D0000 		.4byte	.LFB53-.Ltext0
 13856 081a AC0D0000 		.4byte	.LCFI45-.Ltext0
 13857 081e 0200     		.2byte	0x2
 13858 0820 7D       		.byte	0x7d
 13859 0821 00       		.sleb128 0
 13860 0822 AC0D0000 		.4byte	.LCFI45-.Ltext0
 13861 0826 1E0E0000 		.4byte	.LCFI46-.Ltext0
 13862 082a 0200     		.2byte	0x2
 13863 082c 7D       		.byte	0x7d
 13864 082d 18       		.sleb128 24
 13865 082e 1E0E0000 		.4byte	.LCFI46-.Ltext0
 13866 0832 220E0000 		.4byte	.LCFI47-.Ltext0
ARM GAS  /tmp/ccGXytas.s 			page 370


 13867 0836 0200     		.2byte	0x2
 13868 0838 7D       		.byte	0x7d
 13869 0839 00       		.sleb128 0
 13870 083a 220E0000 		.4byte	.LCFI47-.Ltext0
 13871 083e 2C0E0000 		.4byte	.LFE53-.Ltext0
 13872 0842 0200     		.2byte	0x2
 13873 0844 7D       		.byte	0x7d
 13874 0845 18       		.sleb128 24
 13875 0846 00000000 		.4byte	0
 13876 084a 00000000 		.4byte	0
 13877              	.LVUS172:
 13878 084e 00       		.uleb128 0
 13879 084f 00       		.uleb128 .LVU1410
 13880 0850 00       		.uleb128 .LVU1410
 13881 0851 00       		.uleb128 .LVU1420
 13882 0852 00       		.uleb128 .LVU1420
 13883 0853 00       		.uleb128 .LVU1421
 13884 0854 00       		.uleb128 .LVU1421
 13885 0855 00       		.uleb128 .LVU1421
 13886 0856 00       		.uleb128 .LVU1421
 13887 0857 00       		.uleb128 0
 13888              	.LLST172:
 13889 0858 A80D0000 		.4byte	.LVL323-.Ltext0
 13890 085c EC0D0000 		.4byte	.LVL329-.Ltext0
 13891 0860 0100     		.2byte	0x1
 13892 0862 50       		.byte	0x50
 13893 0863 EC0D0000 		.4byte	.LVL329-.Ltext0
 13894 0867 1E0E0000 		.4byte	.LVL331-.Ltext0
 13895 086b 0100     		.2byte	0x1
 13896 086d 54       		.byte	0x54
 13897 086e 1E0E0000 		.4byte	.LVL331-.Ltext0
 13898 0872 210E0000 		.4byte	.LVL332-1-.Ltext0
 13899 0876 0300     		.2byte	0x3
 13900 0878 71       		.byte	0x71
 13901 0879 7C       		.sleb128 -4
 13902 087a 9F       		.byte	0x9f
 13903 087b 210E0000 		.4byte	.LVL332-1-.Ltext0
 13904 087f 220E0000 		.4byte	.LVL332-.Ltext0
 13905 0883 0A00     		.2byte	0xa
 13906 0885 F3       		.byte	0xf3
 13907 0886 03       		.uleb128 0x3
 13908 0887 F5       		.byte	0xf5
 13909 0888 00       		.uleb128 0
 13910 0889 25       		.uleb128 0x25
 13911 088a F7       		.byte	0xf7
 13912 088b 2C       		.uleb128 0x2c
 13913 088c F7       		.byte	0xf7
 13914 088d 00       		.uleb128 0
 13915 088e 9F       		.byte	0x9f
 13916 088f 220E0000 		.4byte	.LVL332-.Ltext0
 13917 0893 2C0E0000 		.4byte	.LFE53-.Ltext0
 13918 0897 0100     		.2byte	0x1
 13919 0899 50       		.byte	0x50
 13920 089a 00000000 		.4byte	0
 13921 089e 00000000 		.4byte	0
 13922              	.LVUS173:
 13923 08a2 00       		.uleb128 0
ARM GAS  /tmp/ccGXytas.s 			page 371


 13924 08a3 00       		.uleb128 .LVU1387
 13925 08a4 00       		.uleb128 .LVU1387
 13926 08a5 00       		.uleb128 0
 13927              	.LLST173:
 13928 08a6 A80D0000 		.4byte	.LVL323-.Ltext0
 13929 08aa BA0D0000 		.4byte	.LVL324-.Ltext0
 13930 08ae 0100     		.2byte	0x1
 13931 08b0 51       		.byte	0x51
 13932 08b1 BA0D0000 		.4byte	.LVL324-.Ltext0
 13933 08b5 2C0E0000 		.4byte	.LFE53-.Ltext0
 13934 08b9 0A00     		.2byte	0xa
 13935 08bb F3       		.byte	0xf3
 13936 08bc 03       		.uleb128 0x3
 13937 08bd F5       		.byte	0xf5
 13938 08be 01       		.uleb128 0x1
 13939 08bf 25       		.uleb128 0x25
 13940 08c0 F7       		.byte	0xf7
 13941 08c1 2C       		.uleb128 0x2c
 13942 08c2 F7       		.byte	0xf7
 13943 08c3 00       		.uleb128 0
 13944 08c4 9F       		.byte	0x9f
 13945 08c5 00000000 		.4byte	0
 13946 08c9 00000000 		.4byte	0
 13947              	.LVUS174:
 13948 08cd 02       		.uleb128 .LVU1379
 13949 08ce 00       		.uleb128 .LVU1410
 13950 08cf 00       		.uleb128 .LVU1410
 13951 08d0 00       		.uleb128 .LVU1420
 13952 08d1 00       		.uleb128 .LVU1420
 13953 08d2 00       		.uleb128 .LVU1421
 13954 08d3 00       		.uleb128 .LVU1421
 13955 08d4 00       		.uleb128 .LVU1421
 13956 08d5 00       		.uleb128 .LVU1421
 13957 08d6 00       		.uleb128 0
 13958              	.LLST174:
 13959 08d7 A80D0000 		.4byte	.LVL323-.Ltext0
 13960 08db EC0D0000 		.4byte	.LVL329-.Ltext0
 13961 08df 0100     		.2byte	0x1
 13962 08e1 50       		.byte	0x50
 13963 08e2 EC0D0000 		.4byte	.LVL329-.Ltext0
 13964 08e6 1E0E0000 		.4byte	.LVL331-.Ltext0
 13965 08ea 0100     		.2byte	0x1
 13966 08ec 54       		.byte	0x54
 13967 08ed 1E0E0000 		.4byte	.LVL331-.Ltext0
 13968 08f1 210E0000 		.4byte	.LVL332-1-.Ltext0
 13969 08f5 0300     		.2byte	0x3
 13970 08f7 71       		.byte	0x71
 13971 08f8 7C       		.sleb128 -4
 13972 08f9 9F       		.byte	0x9f
 13973 08fa 210E0000 		.4byte	.LVL332-1-.Ltext0
 13974 08fe 220E0000 		.4byte	.LVL332-.Ltext0
 13975 0902 0A00     		.2byte	0xa
 13976 0904 F3       		.byte	0xf3
 13977 0905 03       		.uleb128 0x3
 13978 0906 F5       		.byte	0xf5
 13979 0907 00       		.uleb128 0
 13980 0908 25       		.uleb128 0x25
ARM GAS  /tmp/ccGXytas.s 			page 372


 13981 0909 F7       		.byte	0xf7
 13982 090a 2C       		.uleb128 0x2c
 13983 090b F7       		.byte	0xf7
 13984 090c 00       		.uleb128 0
 13985 090d 9F       		.byte	0x9f
 13986 090e 220E0000 		.4byte	.LVL332-.Ltext0
 13987 0912 2C0E0000 		.4byte	.LFE53-.Ltext0
 13988 0916 0100     		.2byte	0x1
 13989 0918 50       		.byte	0x50
 13990 0919 00000000 		.4byte	0
 13991 091d 00000000 		.4byte	0
 13992              	.LVUS175:
 13993 0921 03       		.uleb128 .LVU1395
 13994 0922 00       		.uleb128 .LVU1399
 13995 0923 00       		.uleb128 .LVU1399
 13996 0924 00       		.uleb128 .LVU1402
 13997              	.LLST175:
 13998 0925 C60D0000 		.4byte	.LVL325-.Ltext0
 13999 0929 D40D0000 		.4byte	.LVL326-.Ltext0
 14000 092d 0100     		.2byte	0x1
 14001 092f 53       		.byte	0x53
 14002 0930 D40D0000 		.4byte	.LVL326-.Ltext0
 14003 0934 DA0D0000 		.4byte	.LVL327-.Ltext0
 14004 0938 0200     		.2byte	0x2
 14005 093a 70       		.byte	0x70
 14006 093b 2C       		.sleb128 44
 14007 093c 00000000 		.4byte	0
 14008 0940 00000000 		.4byte	0
 14009              	.LVUS176:
 14010 0944 00       		.uleb128 .LVU1387
 14011 0945 00       		.uleb128 .LVU1404
 14012 0946 00       		.uleb128 .LVU1404
 14013 0947 00       		.uleb128 .LVU1410
 14014 0948 00       		.uleb128 .LVU1410
 14015 0949 00       		.uleb128 .LVU1411
 14016              	.LLST176:
 14017 094a BA0D0000 		.4byte	.LVL324-.Ltext0
 14018 094e E00D0000 		.4byte	.LVL328-.Ltext0
 14019 0952 0100     		.2byte	0x1
 14020 0954 51       		.byte	0x51
 14021 0955 E00D0000 		.4byte	.LVL328-.Ltext0
 14022 0959 EC0D0000 		.4byte	.LVL329-.Ltext0
 14023 095d 0200     		.2byte	0x2
 14024 095f 70       		.byte	0x70
 14025 0960 2C       		.sleb128 44
 14026 0961 EC0D0000 		.4byte	.LVL329-.Ltext0
 14027 0965 EF0D0000 		.4byte	.LVL330-1-.Ltext0
 14028 0969 0200     		.2byte	0x2
 14029 096b 74       		.byte	0x74
 14030 096c 2C       		.sleb128 44
 14031 096d 00000000 		.4byte	0
 14032 0971 00000000 		.4byte	0
 14033              	.LLST167:
 14034 0975 380D0000 		.4byte	.LFB52-.Ltext0
 14035 0979 3A0D0000 		.4byte	.LCFI44-.Ltext0
 14036 097d 0200     		.2byte	0x2
 14037 097f 7D       		.byte	0x7d
ARM GAS  /tmp/ccGXytas.s 			page 373


 14038 0980 00       		.sleb128 0
 14039 0981 3A0D0000 		.4byte	.LCFI44-.Ltext0
 14040 0985 A80D0000 		.4byte	.LFE52-.Ltext0
 14041 0989 0200     		.2byte	0x2
 14042 098b 7D       		.byte	0x7d
 14043 098c 10       		.sleb128 16
 14044 098d 00000000 		.4byte	0
 14045 0991 00000000 		.4byte	0
 14046              	.LVUS168:
 14047 0995 00       		.uleb128 0
 14048 0996 00       		.uleb128 .LVU1341
 14049 0997 00       		.uleb128 .LVU1341
 14050 0998 00       		.uleb128 .LVU1342
 14051 0999 00       		.uleb128 .LVU1342
 14052 099a 00       		.uleb128 .LVU1356
 14053 099b 00       		.uleb128 .LVU1356
 14054 099c 00       		.uleb128 .LVU1369
 14055 099d 00       		.uleb128 .LVU1369
 14056 099e 00       		.uleb128 0
 14057              	.LLST168:
 14058 099f 380D0000 		.4byte	.LVL316-.Ltext0
 14059 09a3 400D0000 		.4byte	.LVL317-.Ltext0
 14060 09a7 0100     		.2byte	0x1
 14061 09a9 50       		.byte	0x50
 14062 09aa 400D0000 		.4byte	.LVL317-.Ltext0
 14063 09ae 420D0000 		.4byte	.LVL318-.Ltext0
 14064 09b2 0A00     		.2byte	0xa
 14065 09b4 F3       		.byte	0xf3
 14066 09b5 03       		.uleb128 0x3
 14067 09b6 F5       		.byte	0xf5
 14068 09b7 00       		.uleb128 0
 14069 09b8 25       		.uleb128 0x25
 14070 09b9 F7       		.byte	0xf7
 14071 09ba 2C       		.uleb128 0x2c
 14072 09bb F7       		.byte	0xf7
 14073 09bc 00       		.uleb128 0
 14074 09bd 9F       		.byte	0x9f
 14075 09be 420D0000 		.4byte	.LVL318-.Ltext0
 14076 09c2 580D0000 		.4byte	.LVL319-.Ltext0
 14077 09c6 0100     		.2byte	0x1
 14078 09c8 50       		.byte	0x50
 14079 09c9 580D0000 		.4byte	.LVL319-.Ltext0
 14080 09cd 840D0000 		.4byte	.LVL321-.Ltext0
 14081 09d1 0100     		.2byte	0x1
 14082 09d3 54       		.byte	0x54
 14083 09d4 840D0000 		.4byte	.LVL321-.Ltext0
 14084 09d8 A80D0000 		.4byte	.LFE52-.Ltext0
 14085 09dc 0300     		.2byte	0x3
 14086 09de 75       		.byte	0x75
 14087 09df 7C       		.sleb128 -4
 14088 09e0 9F       		.byte	0x9f
 14089 09e1 00000000 		.4byte	0
 14090 09e5 00000000 		.4byte	0
 14091              	.LVUS169:
 14092 09e9 02       		.uleb128 .LVU1336
 14093 09ea 00       		.uleb128 .LVU1341
 14094 09eb 00       		.uleb128 .LVU1341
ARM GAS  /tmp/ccGXytas.s 			page 374


 14095 09ec 00       		.uleb128 .LVU1342
 14096 09ed 00       		.uleb128 .LVU1342
 14097 09ee 00       		.uleb128 .LVU1356
 14098 09ef 00       		.uleb128 .LVU1356
 14099 09f0 00       		.uleb128 .LVU1369
 14100 09f1 00       		.uleb128 .LVU1369
 14101 09f2 00       		.uleb128 0
 14102              	.LLST169:
 14103 09f3 380D0000 		.4byte	.LVL316-.Ltext0
 14104 09f7 400D0000 		.4byte	.LVL317-.Ltext0
 14105 09fb 0100     		.2byte	0x1
 14106 09fd 50       		.byte	0x50
 14107 09fe 400D0000 		.4byte	.LVL317-.Ltext0
 14108 0a02 420D0000 		.4byte	.LVL318-.Ltext0
 14109 0a06 0A00     		.2byte	0xa
 14110 0a08 F3       		.byte	0xf3
 14111 0a09 03       		.uleb128 0x3
 14112 0a0a F5       		.byte	0xf5
 14113 0a0b 00       		.uleb128 0
 14114 0a0c 25       		.uleb128 0x25
 14115 0a0d F7       		.byte	0xf7
 14116 0a0e 2C       		.uleb128 0x2c
 14117 0a0f F7       		.byte	0xf7
 14118 0a10 00       		.uleb128 0
 14119 0a11 9F       		.byte	0x9f
 14120 0a12 420D0000 		.4byte	.LVL318-.Ltext0
 14121 0a16 580D0000 		.4byte	.LVL319-.Ltext0
 14122 0a1a 0100     		.2byte	0x1
 14123 0a1c 50       		.byte	0x50
 14124 0a1d 580D0000 		.4byte	.LVL319-.Ltext0
 14125 0a21 840D0000 		.4byte	.LVL321-.Ltext0
 14126 0a25 0100     		.2byte	0x1
 14127 0a27 54       		.byte	0x54
 14128 0a28 840D0000 		.4byte	.LVL321-.Ltext0
 14129 0a2c A80D0000 		.4byte	.LFE52-.Ltext0
 14130 0a30 0300     		.2byte	0x3
 14131 0a32 75       		.byte	0x75
 14132 0a33 7C       		.sleb128 -4
 14133 0a34 9F       		.byte	0x9f
 14134 0a35 00000000 		.4byte	0
 14135 0a39 00000000 		.4byte	0
 14136              	.LVUS170:
 14137 0a3d 03       		.uleb128 .LVU1337
 14138 0a3e 00       		.uleb128 .LVU1341
 14139 0a3f 00       		.uleb128 .LVU1342
 14140 0a40 02       		.uleb128 .LVU1373
 14141 0a41 02       		.uleb128 .LVU1373
 14142 0a42 00       		.uleb128 0
 14143              	.LLST170:
 14144 0a43 380D0000 		.4byte	.LVL316-.Ltext0
 14145 0a47 400D0000 		.4byte	.LVL317-.Ltext0
 14146 0a4b 0200     		.2byte	0x2
 14147 0a4d 30       		.byte	0x30
 14148 0a4e 9F       		.byte	0x9f
 14149 0a4f 420D0000 		.4byte	.LVL318-.Ltext0
 14150 0a53 9C0D0000 		.4byte	.LVL322-.Ltext0
 14151 0a57 0200     		.2byte	0x2
ARM GAS  /tmp/ccGXytas.s 			page 375


 14152 0a59 30       		.byte	0x30
 14153 0a5a 9F       		.byte	0x9f
 14154 0a5b 9C0D0000 		.4byte	.LVL322-.Ltext0
 14155 0a5f A80D0000 		.4byte	.LFE52-.Ltext0
 14156 0a63 0200     		.2byte	0x2
 14157 0a65 31       		.byte	0x31
 14158 0a66 9F       		.byte	0x9f
 14159 0a67 00000000 		.4byte	0
 14160 0a6b 00000000 		.4byte	0
 14161              	.LLST164:
 14162 0a6f 9C0C0000 		.4byte	.LFB51-.Ltext0
 14163 0a73 A00C0000 		.4byte	.LCFI43-.Ltext0
 14164 0a77 0200     		.2byte	0x2
 14165 0a79 7D       		.byte	0x7d
 14166 0a7a 00       		.sleb128 0
 14167 0a7b A00C0000 		.4byte	.LCFI43-.Ltext0
 14168 0a7f 380D0000 		.4byte	.LFE51-.Ltext0
 14169 0a83 0200     		.2byte	0x2
 14170 0a85 7D       		.byte	0x7d
 14171 0a86 18       		.sleb128 24
 14172 0a87 00000000 		.4byte	0
 14173 0a8b 00000000 		.4byte	0
 14174              	.LVUS165:
 14175 0a8f 00       		.uleb128 0
 14176 0a90 00       		.uleb128 .LVU1310
 14177 0a91 00       		.uleb128 .LVU1310
 14178 0a92 00       		.uleb128 .LVU1327
 14179 0a93 00       		.uleb128 .LVU1327
 14180 0a94 00       		.uleb128 .LVU1333
 14181 0a95 00       		.uleb128 .LVU1333
 14182 0a96 00       		.uleb128 0
 14183              	.LLST165:
 14184 0a97 9C0C0000 		.4byte	.LVL310-.Ltext0
 14185 0a9b D80C0000 		.4byte	.LVL311-.Ltext0
 14186 0a9f 0100     		.2byte	0x1
 14187 0aa1 50       		.byte	0x50
 14188 0aa2 D80C0000 		.4byte	.LVL311-.Ltext0
 14189 0aa6 160D0000 		.4byte	.LVL314-.Ltext0
 14190 0aaa 0100     		.2byte	0x1
 14191 0aac 54       		.byte	0x54
 14192 0aad 160D0000 		.4byte	.LVL314-.Ltext0
 14193 0ab1 220D0000 		.4byte	.LVL315-.Ltext0
 14194 0ab5 0100     		.2byte	0x1
 14195 0ab7 50       		.byte	0x50
 14196 0ab8 220D0000 		.4byte	.LVL315-.Ltext0
 14197 0abc 380D0000 		.4byte	.LFE51-.Ltext0
 14198 0ac0 0100     		.2byte	0x1
 14199 0ac2 54       		.byte	0x54
 14200 0ac3 00000000 		.4byte	0
 14201 0ac7 00000000 		.4byte	0
 14202              	.LVUS166:
 14203 0acb 02       		.uleb128 .LVU1288
 14204 0acc 00       		.uleb128 .LVU1310
 14205 0acd 00       		.uleb128 .LVU1310
 14206 0ace 00       		.uleb128 .LVU1327
 14207 0acf 00       		.uleb128 .LVU1327
 14208 0ad0 00       		.uleb128 .LVU1333
ARM GAS  /tmp/ccGXytas.s 			page 376


 14209 0ad1 00       		.uleb128 .LVU1333
 14210 0ad2 00       		.uleb128 0
 14211              	.LLST166:
 14212 0ad3 9C0C0000 		.4byte	.LVL310-.Ltext0
 14213 0ad7 D80C0000 		.4byte	.LVL311-.Ltext0
 14214 0adb 0100     		.2byte	0x1
 14215 0add 50       		.byte	0x50
 14216 0ade D80C0000 		.4byte	.LVL311-.Ltext0
 14217 0ae2 160D0000 		.4byte	.LVL314-.Ltext0
 14218 0ae6 0100     		.2byte	0x1
 14219 0ae8 54       		.byte	0x54
 14220 0ae9 160D0000 		.4byte	.LVL314-.Ltext0
 14221 0aed 220D0000 		.4byte	.LVL315-.Ltext0
 14222 0af1 0100     		.2byte	0x1
 14223 0af3 50       		.byte	0x50
 14224 0af4 220D0000 		.4byte	.LVL315-.Ltext0
 14225 0af8 380D0000 		.4byte	.LFE51-.Ltext0
 14226 0afc 0100     		.2byte	0x1
 14227 0afe 54       		.byte	0x54
 14228 0aff 00000000 		.4byte	0
 14229 0b03 00000000 		.4byte	0
 14230              	.LVUS163:
 14231 0b07 00       		.uleb128 .LVU1273
 14232 0b08 00       		.uleb128 0
 14233              	.LLST163:
 14234 0b09 740C0000 		.4byte	.LVL308-.Ltext0
 14235 0b0d 7C0C0000 		.4byte	.LFE49-.Ltext0
 14236 0b11 0100     		.2byte	0x1
 14237 0b13 50       		.byte	0x50
 14238 0b14 00000000 		.4byte	0
 14239 0b18 00000000 		.4byte	0
 14240              	.LLST137:
 14241 0b1c F80A0000 		.4byte	.LFB44-.Ltext0
 14242 0b20 FA0A0000 		.4byte	.LCFI40-.Ltext0
 14243 0b24 0200     		.2byte	0x2
 14244 0b26 7D       		.byte	0x7d
 14245 0b27 00       		.sleb128 0
 14246 0b28 FA0A0000 		.4byte	.LCFI40-.Ltext0
 14247 0b2c 700B0000 		.4byte	.LFE44-.Ltext0
 14248 0b30 0200     		.2byte	0x2
 14249 0b32 7D       		.byte	0x7d
 14250 0b33 10       		.sleb128 16
 14251 0b34 00000000 		.4byte	0
 14252 0b38 00000000 		.4byte	0
 14253              	.LVUS138:
 14254 0b3c 00       		.uleb128 0
 14255 0b3d 00       		.uleb128 .LVU1125
 14256              	.LLST138:
 14257 0b3e F80A0000 		.4byte	.LVL269-.Ltext0
 14258 0b42 060B0000 		.4byte	.LVL271-.Ltext0
 14259 0b46 0100     		.2byte	0x1
 14260 0b48 50       		.byte	0x50
 14261 0b49 00000000 		.4byte	0
 14262 0b4d 00000000 		.4byte	0
 14263              	.LVUS139:
 14264 0b51 00       		.uleb128 0
 14265 0b52 00       		.uleb128 .LVU1147
ARM GAS  /tmp/ccGXytas.s 			page 377


 14266 0b53 00       		.uleb128 .LVU1147
 14267 0b54 00       		.uleb128 .LVU1178
 14268 0b55 00       		.uleb128 .LVU1178
 14269 0b56 00       		.uleb128 .LVU1180
 14270 0b57 00       		.uleb128 .LVU1180
 14271 0b58 00       		.uleb128 0
 14272              	.LLST139:
 14273 0b59 F80A0000 		.4byte	.LVL269-.Ltext0
 14274 0b5d 2A0B0000 		.4byte	.LVL272-.Ltext0
 14275 0b61 0100     		.2byte	0x1
 14276 0b63 51       		.byte	0x51
 14277 0b64 2A0B0000 		.4byte	.LVL272-.Ltext0
 14278 0b68 5E0B0000 		.4byte	.LVL280-.Ltext0
 14279 0b6c 0100     		.2byte	0x1
 14280 0b6e 54       		.byte	0x54
 14281 0b6f 5E0B0000 		.4byte	.LVL280-.Ltext0
 14282 0b73 630B0000 		.4byte	.LVL281-1-.Ltext0
 14283 0b77 0100     		.2byte	0x1
 14284 0b79 51       		.byte	0x51
 14285 0b7a 630B0000 		.4byte	.LVL281-1-.Ltext0
 14286 0b7e 700B0000 		.4byte	.LFE44-.Ltext0
 14287 0b82 0100     		.2byte	0x1
 14288 0b84 54       		.byte	0x54
 14289 0b85 00000000 		.4byte	0
 14290 0b89 00000000 		.4byte	0
 14291              	.LVUS140:
 14292 0b8d 00       		.uleb128 0
 14293 0b8e 00       		.uleb128 .LVU1124
 14294 0b8f 00       		.uleb128 .LVU1124
 14295 0b90 00       		.uleb128 .LVU1163
 14296 0b91 00       		.uleb128 .LVU1163
 14297 0b92 00       		.uleb128 .LVU1166
 14298 0b93 00       		.uleb128 .LVU1166
 14299 0b94 00       		.uleb128 0
 14300              	.LLST140:
 14301 0b95 F80A0000 		.4byte	.LVL269-.Ltext0
 14302 0b99 040B0000 		.4byte	.LVL270-.Ltext0
 14303 0b9d 0100     		.2byte	0x1
 14304 0b9f 52       		.byte	0x52
 14305 0ba0 040B0000 		.4byte	.LVL270-.Ltext0
 14306 0ba4 420B0000 		.4byte	.LVL276-.Ltext0
 14307 0ba8 0100     		.2byte	0x1
 14308 0baa 56       		.byte	0x56
 14309 0bab 420B0000 		.4byte	.LVL276-.Ltext0
 14310 0baf 460B0000 		.4byte	.LVL277-.Ltext0
 14311 0bb3 0A00     		.2byte	0xa
 14312 0bb5 F3       		.byte	0xf3
 14313 0bb6 03       		.uleb128 0x3
 14314 0bb7 F5       		.byte	0xf5
 14315 0bb8 02       		.uleb128 0x2
 14316 0bb9 25       		.uleb128 0x25
 14317 0bba F7       		.byte	0xf7
 14318 0bbb 2C       		.uleb128 0x2c
 14319 0bbc F7       		.byte	0xf7
 14320 0bbd 00       		.uleb128 0
 14321 0bbe 9F       		.byte	0x9f
 14322 0bbf 460B0000 		.4byte	.LVL277-.Ltext0
ARM GAS  /tmp/ccGXytas.s 			page 378


 14323 0bc3 700B0000 		.4byte	.LFE44-.Ltext0
 14324 0bc7 0100     		.2byte	0x1
 14325 0bc9 56       		.byte	0x56
 14326 0bca 00000000 		.4byte	0
 14327 0bce 00000000 		.4byte	0
 14328              	.LVUS141:
 14329 0bd2 00       		.uleb128 0
 14330 0bd3 00       		.uleb128 .LVU1151
 14331 0bd4 00       		.uleb128 .LVU1151
 14332 0bd5 00       		.uleb128 .LVU1166
 14333 0bd6 00       		.uleb128 .LVU1166
 14334 0bd7 00       		.uleb128 .LVU1172
 14335 0bd8 00       		.uleb128 .LVU1172
 14336 0bd9 00       		.uleb128 .LVU1178
 14337 0bda 00       		.uleb128 .LVU1178
 14338 0bdb 00       		.uleb128 .LVU1180
 14339 0bdc 00       		.uleb128 .LVU1180
 14340 0bdd 00       		.uleb128 0
 14341              	.LLST141:
 14342 0bde F80A0000 		.4byte	.LVL269-.Ltext0
 14343 0be2 320B0000 		.4byte	.LVL273-.Ltext0
 14344 0be6 0100     		.2byte	0x1
 14345 0be8 53       		.byte	0x53
 14346 0be9 320B0000 		.4byte	.LVL273-.Ltext0
 14347 0bed 460B0000 		.4byte	.LVL277-.Ltext0
 14348 0bf1 0A00     		.2byte	0xa
 14349 0bf3 F3       		.byte	0xf3
 14350 0bf4 03       		.uleb128 0x3
 14351 0bf5 F5       		.byte	0xf5
 14352 0bf6 03       		.uleb128 0x3
 14353 0bf7 25       		.uleb128 0x25
 14354 0bf8 F7       		.byte	0xf7
 14355 0bf9 33       		.uleb128 0x33
 14356 0bfa F7       		.byte	0xf7
 14357 0bfb 00       		.uleb128 0
 14358 0bfc 9F       		.byte	0x9f
 14359 0bfd 460B0000 		.4byte	.LVL277-.Ltext0
 14360 0c01 4F0B0000 		.4byte	.LVL278-1-.Ltext0
 14361 0c05 0100     		.2byte	0x1
 14362 0c07 53       		.byte	0x53
 14363 0c08 4F0B0000 		.4byte	.LVL278-1-.Ltext0
 14364 0c0c 5E0B0000 		.4byte	.LVL280-.Ltext0
 14365 0c10 0A00     		.2byte	0xa
 14366 0c12 F3       		.byte	0xf3
 14367 0c13 03       		.uleb128 0x3
 14368 0c14 F5       		.byte	0xf5
 14369 0c15 03       		.uleb128 0x3
 14370 0c16 25       		.uleb128 0x25
 14371 0c17 F7       		.byte	0xf7
 14372 0c18 33       		.uleb128 0x33
 14373 0c19 F7       		.byte	0xf7
 14374 0c1a 00       		.uleb128 0
 14375 0c1b 9F       		.byte	0x9f
 14376 0c1c 5E0B0000 		.4byte	.LVL280-.Ltext0
 14377 0c20 630B0000 		.4byte	.LVL281-1-.Ltext0
 14378 0c24 0100     		.2byte	0x1
 14379 0c26 53       		.byte	0x53
ARM GAS  /tmp/ccGXytas.s 			page 379


 14380 0c27 630B0000 		.4byte	.LVL281-1-.Ltext0
 14381 0c2b 700B0000 		.4byte	.LFE44-.Ltext0
 14382 0c2f 0A00     		.2byte	0xa
 14383 0c31 F3       		.byte	0xf3
 14384 0c32 03       		.uleb128 0x3
 14385 0c33 F5       		.byte	0xf5
 14386 0c34 03       		.uleb128 0x3
 14387 0c35 25       		.uleb128 0x25
 14388 0c36 F7       		.byte	0xf7
 14389 0c37 33       		.uleb128 0x33
 14390 0c38 F7       		.byte	0xf7
 14391 0c39 00       		.uleb128 0
 14392 0c3a 9F       		.byte	0x9f
 14393 0c3b 00000000 		.4byte	0
 14394 0c3f 00000000 		.4byte	0
 14395              	.LVUS142:
 14396 0c43 00       		.uleb128 .LVU1125
 14397 0c44 00       		.uleb128 0
 14398              	.LLST142:
 14399 0c45 060B0000 		.4byte	.LVL271-.Ltext0
 14400 0c49 700B0000 		.4byte	.LFE44-.Ltext0
 14401 0c4d 0100     		.2byte	0x1
 14402 0c4f 55       		.byte	0x55
 14403 0c50 00000000 		.4byte	0
 14404 0c54 00000000 		.4byte	0
 14405              	.LVUS143:
 14406 0c58 00       		.uleb128 .LVU1156
 14407 0c59 03       		.uleb128 .LVU1159
 14408 0c5a 03       		.uleb128 .LVU1159
 14409 0c5b 00       		.uleb128 .LVU1163
 14410 0c5c 00       		.uleb128 .LVU1181
 14411 0c5d 01       		.uleb128 .LVU1182
 14412              	.LLST143:
 14413 0c5e 380B0000 		.4byte	.LVL274-.Ltext0
 14414 0c62 380B0000 		.4byte	.LVL274-.Ltext0
 14415 0c66 0100     		.2byte	0x1
 14416 0c68 51       		.byte	0x51
 14417 0c69 380B0000 		.4byte	.LVL274-.Ltext0
 14418 0c6d 420B0000 		.4byte	.LVL276-.Ltext0
 14419 0c71 0600     		.2byte	0x6
 14420 0c73 71       		.byte	0x71
 14421 0c74 00       		.sleb128 0
 14422 0c75 72       		.byte	0x72
 14423 0c76 00       		.sleb128 0
 14424 0c77 22       		.byte	0x22
 14425 0c78 9F       		.byte	0x9f
 14426 0c79 680B0000 		.4byte	.LVL282-.Ltext0
 14427 0c7d 680B0000 		.4byte	.LVL282-.Ltext0
 14428 0c81 0600     		.2byte	0x6
 14429 0c83 71       		.byte	0x71
 14430 0c84 00       		.sleb128 0
 14431 0c85 72       		.byte	0x72
 14432 0c86 00       		.sleb128 0
 14433 0c87 22       		.byte	0x22
 14434 0c88 9F       		.byte	0x9f
 14435 0c89 00000000 		.4byte	0
 14436 0c8d 00000000 		.4byte	0
ARM GAS  /tmp/ccGXytas.s 			page 380


 14437              	.LVUS144:
 14438 0c91 02       		.uleb128 .LVU1158
 14439 0c92 03       		.uleb128 .LVU1159
 14440 0c93 03       		.uleb128 .LVU1159
 14441 0c94 01       		.uleb128 .LVU1161
 14442 0c95 01       		.uleb128 .LVU1161
 14443 0c96 00       		.uleb128 .LVU1163
 14444 0c97 00       		.uleb128 .LVU1181
 14445 0c98 00       		.uleb128 0
 14446              	.LLST144:
 14447 0c99 380B0000 		.4byte	.LVL274-.Ltext0
 14448 0c9d 380B0000 		.4byte	.LVL274-.Ltext0
 14449 0ca1 0200     		.2byte	0x2
 14450 0ca3 30       		.byte	0x30
 14451 0ca4 9F       		.byte	0x9f
 14452 0ca5 380B0000 		.4byte	.LVL274-.Ltext0
 14453 0ca9 3E0B0000 		.4byte	.LVL275-.Ltext0
 14454 0cad 0100     		.2byte	0x1
 14455 0caf 52       		.byte	0x52
 14456 0cb0 3E0B0000 		.4byte	.LVL275-.Ltext0
 14457 0cb4 420B0000 		.4byte	.LVL276-.Ltext0
 14458 0cb8 0500     		.2byte	0x5
 14459 0cba 72       		.byte	0x72
 14460 0cbb 00       		.sleb128 0
 14461 0cbc 32       		.byte	0x32
 14462 0cbd 25       		.byte	0x25
 14463 0cbe 9F       		.byte	0x9f
 14464 0cbf 680B0000 		.4byte	.LVL282-.Ltext0
 14465 0cc3 700B0000 		.4byte	.LFE44-.Ltext0
 14466 0cc7 0100     		.2byte	0x1
 14467 0cc9 52       		.byte	0x52
 14468 0cca 00000000 		.4byte	0
 14469 0cce 00000000 		.4byte	0
 14470              	.LLST6:
 14471 0cd2 8C000000 		.4byte	.LFB41-.Ltext0
 14472 0cd6 8E000000 		.4byte	.LCFI5-.Ltext0
 14473 0cda 0200     		.2byte	0x2
 14474 0cdc 7D       		.byte	0x7d
 14475 0cdd 00       		.sleb128 0
 14476 0cde 8E000000 		.4byte	.LCFI5-.Ltext0
 14477 0ce2 E0000000 		.4byte	.LFE41-.Ltext0
 14478 0ce6 0200     		.2byte	0x2
 14479 0ce8 7D       		.byte	0x7d
 14480 0ce9 08       		.sleb128 8
 14481 0cea 00000000 		.4byte	0
 14482 0cee 00000000 		.4byte	0
 14483              	.LVUS7:
 14484 0cf2 00       		.uleb128 0
 14485 0cf3 00       		.uleb128 .LVU63
 14486 0cf4 00       		.uleb128 .LVU63
 14487 0cf5 00       		.uleb128 0
 14488              	.LLST7:
 14489 0cf6 8C000000 		.4byte	.LVL15-.Ltext0
 14490 0cfa 98000000 		.4byte	.LVL16-.Ltext0
 14491 0cfe 0100     		.2byte	0x1
 14492 0d00 50       		.byte	0x50
 14493 0d01 98000000 		.4byte	.LVL16-.Ltext0
ARM GAS  /tmp/ccGXytas.s 			page 381


 14494 0d05 E0000000 		.4byte	.LFE41-.Ltext0
 14495 0d09 0A00     		.2byte	0xa
 14496 0d0b F3       		.byte	0xf3
 14497 0d0c 03       		.uleb128 0x3
 14498 0d0d F5       		.byte	0xf5
 14499 0d0e 00       		.uleb128 0
 14500 0d0f 25       		.uleb128 0x25
 14501 0d10 F7       		.byte	0xf7
 14502 0d11 2C       		.uleb128 0x2c
 14503 0d12 F7       		.byte	0xf7
 14504 0d13 00       		.uleb128 0
 14505 0d14 9F       		.byte	0x9f
 14506 0d15 00000000 		.4byte	0
 14507 0d19 00000000 		.4byte	0
 14508              	.LVUS8:
 14509 0d1d 00       		.uleb128 .LVU74
 14510 0d1e 00       		.uleb128 0
 14511              	.LLST8:
 14512 0d1f B8000000 		.4byte	.LVL18-.Ltext0
 14513 0d23 E0000000 		.4byte	.LFE41-.Ltext0
 14514 0d27 0100     		.2byte	0x1
 14515 0d29 55       		.byte	0x55
 14516 0d2a 00000000 		.4byte	0
 14517 0d2e 00000000 		.4byte	0
 14518              	.LVUS9:
 14519 0d32 01       		.uleb128 .LVU80
 14520 0d33 00       		.uleb128 .LVU84
 14521              	.LLST9:
 14522 0d34 CE000000 		.4byte	.LVL20-.Ltext0
 14523 0d38 DA000000 		.4byte	.LVL22-.Ltext0
 14524 0d3c 0100     		.2byte	0x1
 14525 0d3e 55       		.byte	0x55
 14526 0d3f 00000000 		.4byte	0
 14527 0d43 00000000 		.4byte	0
 14528              	.LVUS136:
 14529 0d47 01       		.uleb128 .LVU1114
 14530 0d48 00       		.uleb128 .LVU1116
 14531              	.LLST136:
 14532 0d49 F40A0000 		.4byte	.LVL267-.Ltext0
 14533 0d4d F60A0000 		.4byte	.LVL268-.Ltext0
 14534 0d51 0100     		.2byte	0x1
 14535 0d53 50       		.byte	0x50
 14536 0d54 00000000 		.4byte	0
 14537 0d58 00000000 		.4byte	0
 14538              	.LVUS134:
 14539 0d5c 00       		.uleb128 0
 14540 0d5d 00       		.uleb128 .LVU1108
 14541 0d5e 00       		.uleb128 .LVU1108
 14542 0d5f 00       		.uleb128 0
 14543              	.LLST134:
 14544 0d60 EC0A0000 		.4byte	.LVL263-.Ltext0
 14545 0d64 F00A0000 		.4byte	.LVL265-.Ltext0
 14546 0d68 0100     		.2byte	0x1
 14547 0d6a 50       		.byte	0x50
 14548 0d6b F00A0000 		.4byte	.LVL265-.Ltext0
 14549 0d6f F20A0000 		.4byte	.LFE39-.Ltext0
 14550 0d73 0A00     		.2byte	0xa
ARM GAS  /tmp/ccGXytas.s 			page 382


 14551 0d75 F3       		.byte	0xf3
 14552 0d76 03       		.uleb128 0x3
 14553 0d77 F5       		.byte	0xf5
 14554 0d78 00       		.uleb128 0
 14555 0d79 25       		.uleb128 0x25
 14556 0d7a F7       		.byte	0xf7
 14557 0d7b 2C       		.uleb128 0x2c
 14558 0d7c F7       		.byte	0xf7
 14559 0d7d 00       		.uleb128 0
 14560 0d7e 9F       		.byte	0x9f
 14561 0d7f 00000000 		.4byte	0
 14562 0d83 00000000 		.4byte	0
 14563              	.LVUS135:
 14564 0d87 01       		.uleb128 .LVU1106
 14565 0d88 00       		.uleb128 .LVU1108
 14566              	.LLST135:
 14567 0d89 EE0A0000 		.4byte	.LVL264-.Ltext0
 14568 0d8d F00A0000 		.4byte	.LVL265-.Ltext0
 14569 0d91 0100     		.2byte	0x1
 14570 0d93 50       		.byte	0x50
 14571 0d94 00000000 		.4byte	0
 14572 0d98 00000000 		.4byte	0
 14573              	.LLST128:
 14574 0d9c 900A0000 		.4byte	.LFB37-.Ltext0
 14575 0da0 920A0000 		.4byte	.LCFI39-.Ltext0
 14576 0da4 0200     		.2byte	0x2
 14577 0da6 7D       		.byte	0x7d
 14578 0da7 00       		.sleb128 0
 14579 0da8 920A0000 		.4byte	.LCFI39-.Ltext0
 14580 0dac DC0A0000 		.4byte	.LFE37-.Ltext0
 14581 0db0 0200     		.2byte	0x2
 14582 0db2 7D       		.byte	0x7d
 14583 0db3 10       		.sleb128 16
 14584 0db4 00000000 		.4byte	0
 14585 0db8 00000000 		.4byte	0
 14586              	.LVUS129:
 14587 0dbc 00       		.uleb128 0
 14588 0dbd 00       		.uleb128 .LVU1063
 14589 0dbe 00       		.uleb128 .LVU1063
 14590 0dbf 00       		.uleb128 0
 14591              	.LLST129:
 14592 0dc0 900A0000 		.4byte	.LVL253-.Ltext0
 14593 0dc4 990A0000 		.4byte	.LVL254-1-.Ltext0
 14594 0dc8 0100     		.2byte	0x1
 14595 0dca 50       		.byte	0x50
 14596 0dcb 990A0000 		.4byte	.LVL254-1-.Ltext0
 14597 0dcf DC0A0000 		.4byte	.LFE37-.Ltext0
 14598 0dd3 0100     		.2byte	0x1
 14599 0dd5 55       		.byte	0x55
 14600 0dd6 00000000 		.4byte	0
 14601 0dda 00000000 		.4byte	0
 14602              	.LVUS130:
 14603 0dde 00       		.uleb128 0
 14604 0ddf 00       		.uleb128 .LVU1063
 14605 0de0 00       		.uleb128 .LVU1063
 14606 0de1 00       		.uleb128 .LVU1087
 14607 0de2 00       		.uleb128 .LVU1087
ARM GAS  /tmp/ccGXytas.s 			page 383


 14608 0de3 00       		.uleb128 .LVU1091
 14609 0de4 00       		.uleb128 .LVU1091
 14610 0de5 00       		.uleb128 .LVU1095
 14611 0de6 00       		.uleb128 .LVU1095
 14612 0de7 00       		.uleb128 0
 14613              	.LLST130:
 14614 0de8 900A0000 		.4byte	.LVL253-.Ltext0
 14615 0dec 990A0000 		.4byte	.LVL254-1-.Ltext0
 14616 0df0 0100     		.2byte	0x1
 14617 0df2 51       		.byte	0x51
 14618 0df3 990A0000 		.4byte	.LVL254-1-.Ltext0
 14619 0df7 C80A0000 		.4byte	.LVL258-.Ltext0
 14620 0dfb 0100     		.2byte	0x1
 14621 0dfd 54       		.byte	0x54
 14622 0dfe C80A0000 		.4byte	.LVL258-.Ltext0
 14623 0e02 D00A0000 		.4byte	.LVL260-.Ltext0
 14624 0e06 0A00     		.2byte	0xa
 14625 0e08 F3       		.byte	0xf3
 14626 0e09 03       		.uleb128 0x3
 14627 0e0a F5       		.byte	0xf5
 14628 0e0b 01       		.uleb128 0x1
 14629 0e0c 25       		.uleb128 0x25
 14630 0e0d F7       		.byte	0xf7
 14631 0e0e 2C       		.uleb128 0x2c
 14632 0e0f F7       		.byte	0xf7
 14633 0e10 00       		.uleb128 0
 14634 0e11 9F       		.byte	0x9f
 14635 0e12 D00A0000 		.4byte	.LVL260-.Ltext0
 14636 0e16 D60A0000 		.4byte	.LVL262-.Ltext0
 14637 0e1a 0100     		.2byte	0x1
 14638 0e1c 54       		.byte	0x54
 14639 0e1d D60A0000 		.4byte	.LVL262-.Ltext0
 14640 0e21 DC0A0000 		.4byte	.LFE37-.Ltext0
 14641 0e25 0A00     		.2byte	0xa
 14642 0e27 F3       		.byte	0xf3
 14643 0e28 03       		.uleb128 0x3
 14644 0e29 F5       		.byte	0xf5
 14645 0e2a 01       		.uleb128 0x1
 14646 0e2b 25       		.uleb128 0x25
 14647 0e2c F7       		.byte	0xf7
 14648 0e2d 2C       		.uleb128 0x2c
 14649 0e2e F7       		.byte	0xf7
 14650 0e2f 00       		.uleb128 0
 14651 0e30 9F       		.byte	0x9f
 14652 0e31 00000000 		.4byte	0
 14653 0e35 00000000 		.4byte	0
 14654              	.LVUS131:
 14655 0e39 00       		.uleb128 .LVU1087
 14656 0e3a 00       		.uleb128 .LVU1091
 14657              	.LLST131:
 14658 0e3b C80A0000 		.4byte	.LVL258-.Ltext0
 14659 0e3f D00A0000 		.4byte	.LVL260-.Ltext0
 14660 0e43 0100     		.2byte	0x1
 14661 0e45 54       		.byte	0x54
 14662 0e46 00000000 		.4byte	0
 14663 0e4a 00000000 		.4byte	0
 14664              	.LVUS132:
ARM GAS  /tmp/ccGXytas.s 			page 384


 14665 0e4e 00       		.uleb128 .LVU1068
 14666 0e4f 00       		.uleb128 .LVU1089
 14667 0e50 00       		.uleb128 .LVU1091
 14668 0e51 00       		.uleb128 0
 14669              	.LLST132:
 14670 0e52 A20A0000 		.4byte	.LVL255-.Ltext0
 14671 0e56 CB0A0000 		.4byte	.LVL259-1-.Ltext0
 14672 0e5a 0100     		.2byte	0x1
 14673 0e5c 51       		.byte	0x51
 14674 0e5d D00A0000 		.4byte	.LVL260-.Ltext0
 14675 0e61 DC0A0000 		.4byte	.LFE37-.Ltext0
 14676 0e65 0100     		.2byte	0x1
 14677 0e67 51       		.byte	0x51
 14678 0e68 00000000 		.4byte	0
 14679 0e6c 00000000 		.4byte	0
 14680              	.LVUS133:
 14681 0e70 01       		.uleb128 .LVU1069
 14682 0e71 00       		.uleb128 .LVU1084
 14683 0e72 00       		.uleb128 .LVU1084
 14684 0e73 00       		.uleb128 .LVU1085
 14685 0e74 00       		.uleb128 .LVU1091
 14686 0e75 00       		.uleb128 0
 14687              	.LLST133:
 14688 0e76 A20A0000 		.4byte	.LVL255-.Ltext0
 14689 0e7a C20A0000 		.4byte	.LVL256-.Ltext0
 14690 0e7e 0700     		.2byte	0x7
 14691 0e80 71       		.byte	0x71
 14692 0e81 00       		.sleb128 0
 14693 0e82 75       		.byte	0x75
 14694 0e83 04       		.sleb128 4
 14695 0e84 06       		.byte	0x6
 14696 0e85 1C       		.byte	0x1c
 14697 0e86 9F       		.byte	0x9f
 14698 0e87 C20A0000 		.4byte	.LVL256-.Ltext0
 14699 0e8b C50A0000 		.4byte	.LVL257-1-.Ltext0
 14700 0e8f 0600     		.2byte	0x6
 14701 0e91 71       		.byte	0x71
 14702 0e92 00       		.sleb128 0
 14703 0e93 72       		.byte	0x72
 14704 0e94 00       		.sleb128 0
 14705 0e95 1C       		.byte	0x1c
 14706 0e96 9F       		.byte	0x9f
 14707 0e97 D00A0000 		.4byte	.LVL260-.Ltext0
 14708 0e9b DC0A0000 		.4byte	.LFE37-.Ltext0
 14709 0e9f 0600     		.2byte	0x6
 14710 0ea1 71       		.byte	0x71
 14711 0ea2 00       		.sleb128 0
 14712 0ea3 72       		.byte	0x72
 14713 0ea4 00       		.sleb128 0
 14714 0ea5 1C       		.byte	0x1c
 14715 0ea6 9F       		.byte	0x9f
 14716 0ea7 00000000 		.4byte	0
 14717 0eab 00000000 		.4byte	0
 14718              	.LLST126:
 14719 0eaf 5C0A0000 		.4byte	.LFB35-.Ltext0
 14720 0eb3 5E0A0000 		.4byte	.LCFI37-.Ltext0
 14721 0eb7 0200     		.2byte	0x2
ARM GAS  /tmp/ccGXytas.s 			page 385


 14722 0eb9 7D       		.byte	0x7d
 14723 0eba 00       		.sleb128 0
 14724 0ebb 5E0A0000 		.4byte	.LCFI37-.Ltext0
 14725 0ebf 740A0000 		.4byte	.LCFI38-.Ltext0
 14726 0ec3 0200     		.2byte	0x2
 14727 0ec5 7D       		.byte	0x7d
 14728 0ec6 08       		.sleb128 8
 14729 0ec7 740A0000 		.4byte	.LCFI38-.Ltext0
 14730 0ecb 7C0A0000 		.4byte	.LFE35-.Ltext0
 14731 0ecf 0200     		.2byte	0x2
 14732 0ed1 7D       		.byte	0x7d
 14733 0ed2 00       		.sleb128 0
 14734 0ed3 00000000 		.4byte	0
 14735 0ed7 00000000 		.4byte	0
 14736              	.LVUS127:
 14737 0edb 00       		.uleb128 0
 14738 0edc 00       		.uleb128 .LVU1038
 14739 0edd 00       		.uleb128 .LVU1038
 14740 0ede 00       		.uleb128 .LVU1046
 14741 0edf 00       		.uleb128 .LVU1046
 14742 0ee0 00       		.uleb128 0
 14743              	.LLST127:
 14744 0ee1 5C0A0000 		.4byte	.LVL248-.Ltext0
 14745 0ee5 630A0000 		.4byte	.LVL249-1-.Ltext0
 14746 0ee9 0100     		.2byte	0x1
 14747 0eeb 50       		.byte	0x50
 14748 0eec 630A0000 		.4byte	.LVL249-1-.Ltext0
 14749 0ef0 740A0000 		.4byte	.LVL250-.Ltext0
 14750 0ef4 0100     		.2byte	0x1
 14751 0ef6 54       		.byte	0x54
 14752 0ef7 740A0000 		.4byte	.LVL250-.Ltext0
 14753 0efb 7C0A0000 		.4byte	.LFE35-.Ltext0
 14754 0eff 0A00     		.2byte	0xa
 14755 0f01 F3       		.byte	0xf3
 14756 0f02 03       		.uleb128 0x3
 14757 0f03 F5       		.byte	0xf5
 14758 0f04 00       		.uleb128 0
 14759 0f05 25       		.uleb128 0x25
 14760 0f06 F7       		.byte	0xf7
 14761 0f07 2C       		.uleb128 0x2c
 14762 0f08 F7       		.byte	0xf7
 14763 0f09 00       		.uleb128 0
 14764 0f0a 9F       		.byte	0x9f
 14765 0f0b 00000000 		.4byte	0
 14766 0f0f 00000000 		.4byte	0
 14767              	.LLST122:
 14768 0f13 100A0000 		.4byte	.LFB34-.Ltext0
 14769 0f17 120A0000 		.4byte	.LCFI36-.Ltext0
 14770 0f1b 0200     		.2byte	0x2
 14771 0f1d 7D       		.byte	0x7d
 14772 0f1e 00       		.sleb128 0
 14773 0f1f 120A0000 		.4byte	.LCFI36-.Ltext0
 14774 0f23 5C0A0000 		.4byte	.LFE34-.Ltext0
 14775 0f27 0200     		.2byte	0x2
 14776 0f29 7D       		.byte	0x7d
 14777 0f2a 18       		.sleb128 24
 14778 0f2b 00000000 		.4byte	0
ARM GAS  /tmp/ccGXytas.s 			page 386


 14779 0f2f 00000000 		.4byte	0
 14780              	.LVUS123:
 14781 0f33 00       		.uleb128 0
 14782 0f34 00       		.uleb128 .LVU1019
 14783 0f35 00       		.uleb128 .LVU1019
 14784 0f36 00       		.uleb128 0
 14785              	.LLST123:
 14786 0f37 100A0000 		.4byte	.LVL241-.Ltext0
 14787 0f3b 210A0000 		.4byte	.LVL244-1-.Ltext0
 14788 0f3f 0100     		.2byte	0x1
 14789 0f41 50       		.byte	0x50
 14790 0f42 210A0000 		.4byte	.LVL244-1-.Ltext0
 14791 0f46 5C0A0000 		.4byte	.LFE34-.Ltext0
 14792 0f4a 0A00     		.2byte	0xa
 14793 0f4c F3       		.byte	0xf3
 14794 0f4d 03       		.uleb128 0x3
 14795 0f4e F5       		.byte	0xf5
 14796 0f4f 00       		.uleb128 0
 14797 0f50 25       		.uleb128 0x25
 14798 0f51 F7       		.byte	0xf7
 14799 0f52 2C       		.uleb128 0x2c
 14800 0f53 F7       		.byte	0xf7
 14801 0f54 00       		.uleb128 0
 14802 0f55 9F       		.byte	0x9f
 14803 0f56 00000000 		.4byte	0
 14804 0f5a 00000000 		.4byte	0
 14805              	.LVUS124:
 14806 0f5e 00       		.uleb128 0
 14807 0f5f 00       		.uleb128 .LVU1012
 14808 0f60 00       		.uleb128 .LVU1012
 14809 0f61 00       		.uleb128 0
 14810              	.LLST124:
 14811 0f62 100A0000 		.4byte	.LVL241-.Ltext0
 14812 0f66 180A0000 		.4byte	.LVL242-.Ltext0
 14813 0f6a 0100     		.2byte	0x1
 14814 0f6c 51       		.byte	0x51
 14815 0f6d 180A0000 		.4byte	.LVL242-.Ltext0
 14816 0f71 5C0A0000 		.4byte	.LFE34-.Ltext0
 14817 0f75 0A00     		.2byte	0xa
 14818 0f77 F3       		.byte	0xf3
 14819 0f78 03       		.uleb128 0x3
 14820 0f79 F5       		.byte	0xf5
 14821 0f7a 01       		.uleb128 0x1
 14822 0f7b 25       		.uleb128 0x25
 14823 0f7c F7       		.byte	0xf7
 14824 0f7d 2C       		.uleb128 0x2c
 14825 0f7e F7       		.byte	0xf7
 14826 0f7f 00       		.uleb128 0
 14827 0f80 9F       		.byte	0x9f
 14828 0f81 00000000 		.4byte	0
 14829 0f85 00000000 		.4byte	0
 14830              	.LVUS125:
 14831 0f89 01       		.uleb128 .LVU1015
 14832 0f8a 00       		.uleb128 .LVU1031
 14833              	.LLST125:
 14834 0f8b 1C0A0000 		.4byte	.LVL243-.Ltext0
 14835 0f8f 560A0000 		.4byte	.LVL247-.Ltext0
ARM GAS  /tmp/ccGXytas.s 			page 387


 14836 0f93 0100     		.2byte	0x1
 14837 0f95 55       		.byte	0x55
 14838 0f96 00000000 		.4byte	0
 14839 0f9a 00000000 		.4byte	0
 14840              	.LLST118:
 14841 0f9e B4090000 		.4byte	.LFB33-.Ltext0
 14842 0fa2 B8090000 		.4byte	.LCFI35-.Ltext0
 14843 0fa6 0200     		.2byte	0x2
 14844 0fa8 7D       		.byte	0x7d
 14845 0fa9 00       		.sleb128 0
 14846 0faa B8090000 		.4byte	.LCFI35-.Ltext0
 14847 0fae 100A0000 		.4byte	.LFE33-.Ltext0
 14848 0fb2 0200     		.2byte	0x2
 14849 0fb4 7D       		.byte	0x7d
 14850 0fb5 10       		.sleb128 16
 14851 0fb6 00000000 		.4byte	0
 14852 0fba 00000000 		.4byte	0
 14853              	.LVUS119:
 14854 0fbe 00       		.uleb128 0
 14855 0fbf 00       		.uleb128 .LVU984
 14856 0fc0 00       		.uleb128 .LVU984
 14857 0fc1 00       		.uleb128 0
 14858              	.LLST119:
 14859 0fc2 B4090000 		.4byte	.LVL232-.Ltext0
 14860 0fc6 C2090000 		.4byte	.LVL234-.Ltext0
 14861 0fca 0100     		.2byte	0x1
 14862 0fcc 50       		.byte	0x50
 14863 0fcd C2090000 		.4byte	.LVL234-.Ltext0
 14864 0fd1 100A0000 		.4byte	.LFE33-.Ltext0
 14865 0fd5 0A00     		.2byte	0xa
 14866 0fd7 F3       		.byte	0xf3
 14867 0fd8 03       		.uleb128 0x3
 14868 0fd9 F5       		.byte	0xf5
 14869 0fda 00       		.uleb128 0
 14870 0fdb 25       		.uleb128 0x25
 14871 0fdc F7       		.byte	0xf7
 14872 0fdd 2C       		.uleb128 0x2c
 14873 0fde F7       		.byte	0xf7
 14874 0fdf 00       		.uleb128 0
 14875 0fe0 9F       		.byte	0x9f
 14876 0fe1 00000000 		.4byte	0
 14877 0fe5 00000000 		.4byte	0
 14878              	.LVUS120:
 14879 0fe9 00       		.uleb128 .LVU980
 14880 0fea 00       		.uleb128 0
 14881              	.LLST120:
 14882 0feb BA090000 		.4byte	.LVL233-.Ltext0
 14883 0fef 100A0000 		.4byte	.LFE33-.Ltext0
 14884 0ff3 0100     		.2byte	0x1
 14885 0ff5 55       		.byte	0x55
 14886 0ff6 00000000 		.4byte	0
 14887 0ffa 00000000 		.4byte	0
 14888              	.LVUS121:
 14889 0ffe 01       		.uleb128 .LVU998
 14890 0fff 00       		.uleb128 .LVU1001
 14891 1000 00       		.uleb128 .LVU1001
 14892 1001 00       		.uleb128 .LVU1004
ARM GAS  /tmp/ccGXytas.s 			page 388


 14893              	.LLST121:
 14894 1002 F8090000 		.4byte	.LVL238-.Ltext0
 14895 1006 FE090000 		.4byte	.LVL239-.Ltext0
 14896 100a 0200     		.2byte	0x2
 14897 100c 31       		.byte	0x31
 14898 100d 9F       		.byte	0x9f
 14899 100e FE090000 		.4byte	.LVL239-.Ltext0
 14900 1012 040A0000 		.4byte	.LVL240-.Ltext0
 14901 1016 0200     		.2byte	0x2
 14902 1018 30       		.byte	0x30
 14903 1019 9F       		.byte	0x9f
 14904 101a 00000000 		.4byte	0
 14905 101e 00000000 		.4byte	0
 14906              	.LLST114:
 14907 1022 88090000 		.4byte	.LFB32-.Ltext0
 14908 1026 8A090000 		.4byte	.LCFI33-.Ltext0
 14909 102a 0200     		.2byte	0x2
 14910 102c 7D       		.byte	0x7d
 14911 102d 00       		.sleb128 0
 14912 102e 8A090000 		.4byte	.LCFI33-.Ltext0
 14913 1032 A4090000 		.4byte	.LCFI34-.Ltext0
 14914 1036 0200     		.2byte	0x2
 14915 1038 7D       		.byte	0x7d
 14916 1039 10       		.sleb128 16
 14917 103a A4090000 		.4byte	.LCFI34-.Ltext0
 14918 103e B4090000 		.4byte	.LFE32-.Ltext0
 14919 1042 0200     		.2byte	0x2
 14920 1044 7D       		.byte	0x7d
 14921 1045 00       		.sleb128 0
 14922 1046 00000000 		.4byte	0
 14923 104a 00000000 		.4byte	0
 14924              	.LVUS115:
 14925 104e 00       		.uleb128 0
 14926 104f 00       		.uleb128 .LVU966
 14927 1050 00       		.uleb128 .LVU966
 14928 1051 00       		.uleb128 0
 14929              	.LLST115:
 14930 1052 88090000 		.4byte	.LVL226-.Ltext0
 14931 1056 97090000 		.4byte	.LVL228-1-.Ltext0
 14932 105a 0100     		.2byte	0x1
 14933 105c 50       		.byte	0x50
 14934 105d 97090000 		.4byte	.LVL228-1-.Ltext0
 14935 1061 B4090000 		.4byte	.LFE32-.Ltext0
 14936 1065 0A00     		.2byte	0xa
 14937 1067 F3       		.byte	0xf3
 14938 1068 03       		.uleb128 0x3
 14939 1069 F5       		.byte	0xf5
 14940 106a 00       		.uleb128 0
 14941 106b 25       		.uleb128 0x25
 14942 106c F7       		.byte	0xf7
 14943 106d 2C       		.uleb128 0x2c
 14944 106e F7       		.byte	0xf7
 14945 106f 00       		.uleb128 0
 14946 1070 9F       		.byte	0x9f
 14947 1071 00000000 		.4byte	0
 14948 1075 00000000 		.4byte	0
 14949              	.LVUS116:
ARM GAS  /tmp/ccGXytas.s 			page 389


 14950 1079 00       		.uleb128 0
 14951 107a 00       		.uleb128 .LVU965
 14952 107b 00       		.uleb128 .LVU965
 14953 107c 00       		.uleb128 .LVU968
 14954 107d 00       		.uleb128 .LVU972
 14955 107e 00       		.uleb128 0
 14956              	.LLST116:
 14957 107f 88090000 		.4byte	.LVL226-.Ltext0
 14958 1083 92090000 		.4byte	.LVL227-.Ltext0
 14959 1087 0100     		.2byte	0x1
 14960 1089 51       		.byte	0x51
 14961 108a 92090000 		.4byte	.LVL227-.Ltext0
 14962 108e 9A090000 		.4byte	.LVL229-.Ltext0
 14963 1092 0100     		.2byte	0x1
 14964 1094 55       		.byte	0x55
 14965 1095 AD090000 		.4byte	.LVL231-1-.Ltext0
 14966 1099 B4090000 		.4byte	.LFE32-.Ltext0
 14967 109d 1C00     		.2byte	0x1c
 14968 109f F3       		.byte	0xf3
 14969 10a0 03       		.uleb128 0x3
 14970 10a1 F5       		.byte	0xf5
 14971 10a2 01       		.uleb128 0x1
 14972 10a3 25       		.uleb128 0x25
 14973 10a4 F7       		.byte	0xf7
 14974 10a5 2C       		.uleb128 0x2c
 14975 10a6 F7       		.byte	0xf7
 14976 10a7 00       		.uleb128 0
 14977 10a8 09       		.byte	0x9
 14978 10a9 FF       		.byte	0xff
 14979 10aa F3       		.byte	0xf3
 14980 10ab 03       		.uleb128 0x3
 14981 10ac F5       		.byte	0xf5
 14982 10ad 02       		.uleb128 0x2
 14983 10ae 25       		.uleb128 0x25
 14984 10af F7       		.byte	0xf7
 14985 10b0 2C       		.uleb128 0x2c
 14986 10b1 F7       		.byte	0xf7
 14987 10b2 00       		.uleb128 0
 14988 10b3 30       		.byte	0x30
 14989 10b4 29       		.byte	0x29
 14990 10b5 28       		.byte	0x28
 14991 10b6 0100     		.2byte	0x1
 14992 10b8 16       		.byte	0x16
 14993 10b9 13       		.byte	0x13
 14994 10ba 9F       		.byte	0x9f
 14995 10bb 00000000 		.4byte	0
 14996 10bf 00000000 		.4byte	0
 14997              	.LVUS117:
 14998 10c3 00       		.uleb128 0
 14999 10c4 00       		.uleb128 .LVU966
 15000 10c5 00       		.uleb128 .LVU966
 15001 10c6 00       		.uleb128 .LVU971
 15002 10c7 00       		.uleb128 .LVU971
 15003 10c8 00       		.uleb128 .LVU972
 15004 10c9 00       		.uleb128 .LVU972
 15005 10ca 00       		.uleb128 0
 15006              	.LLST117:
ARM GAS  /tmp/ccGXytas.s 			page 390


 15007 10cb 88090000 		.4byte	.LVL226-.Ltext0
 15008 10cf 97090000 		.4byte	.LVL228-1-.Ltext0
 15009 10d3 0100     		.2byte	0x1
 15010 10d5 52       		.byte	0x52
 15011 10d6 97090000 		.4byte	.LVL228-1-.Ltext0
 15012 10da A4090000 		.4byte	.LVL230-.Ltext0
 15013 10de 0100     		.2byte	0x1
 15014 10e0 54       		.byte	0x54
 15015 10e1 A4090000 		.4byte	.LVL230-.Ltext0
 15016 10e5 AD090000 		.4byte	.LVL231-1-.Ltext0
 15017 10e9 0100     		.2byte	0x1
 15018 10eb 51       		.byte	0x51
 15019 10ec AD090000 		.4byte	.LVL231-1-.Ltext0
 15020 10f0 B4090000 		.4byte	.LFE32-.Ltext0
 15021 10f4 0A00     		.2byte	0xa
 15022 10f6 F3       		.byte	0xf3
 15023 10f7 03       		.uleb128 0x3
 15024 10f8 F5       		.byte	0xf5
 15025 10f9 02       		.uleb128 0x2
 15026 10fa 25       		.uleb128 0x25
 15027 10fb F7       		.byte	0xf7
 15028 10fc 2C       		.uleb128 0x2c
 15029 10fd F7       		.byte	0xf7
 15030 10fe 00       		.uleb128 0
 15031 10ff 9F       		.byte	0x9f
 15032 1100 00000000 		.4byte	0
 15033 1104 00000000 		.4byte	0
 15034              	.LLST110:
 15035 1108 60090000 		.4byte	.LFB31-.Ltext0
 15036 110c 62090000 		.4byte	.LCFI31-.Ltext0
 15037 1110 0200     		.2byte	0x2
 15038 1112 7D       		.byte	0x7d
 15039 1113 00       		.sleb128 0
 15040 1114 62090000 		.4byte	.LCFI31-.Ltext0
 15041 1118 7C090000 		.4byte	.LCFI32-.Ltext0
 15042 111c 0200     		.2byte	0x2
 15043 111e 7D       		.byte	0x7d
 15044 111f 08       		.sleb128 8
 15045 1120 7C090000 		.4byte	.LCFI32-.Ltext0
 15046 1124 88090000 		.4byte	.LFE31-.Ltext0
 15047 1128 0200     		.2byte	0x2
 15048 112a 7D       		.byte	0x7d
 15049 112b 00       		.sleb128 0
 15050 112c 00000000 		.4byte	0
 15051 1130 00000000 		.4byte	0
 15052              	.LVUS111:
 15053 1134 00       		.uleb128 0
 15054 1135 00       		.uleb128 .LVU955
 15055 1136 00       		.uleb128 .LVU955
 15056 1137 00       		.uleb128 0
 15057              	.LLST111:
 15058 1138 60090000 		.4byte	.LVL220-.Ltext0
 15059 113c 75090000 		.4byte	.LVL223-1-.Ltext0
 15060 1140 0100     		.2byte	0x1
 15061 1142 50       		.byte	0x50
 15062 1143 75090000 		.4byte	.LVL223-1-.Ltext0
 15063 1147 88090000 		.4byte	.LFE31-.Ltext0
ARM GAS  /tmp/ccGXytas.s 			page 391


 15064 114b 0A00     		.2byte	0xa
 15065 114d F3       		.byte	0xf3
 15066 114e 03       		.uleb128 0x3
 15067 114f F5       		.byte	0xf5
 15068 1150 00       		.uleb128 0
 15069 1151 25       		.uleb128 0x25
 15070 1152 F7       		.byte	0xf7
 15071 1153 2C       		.uleb128 0x2c
 15072 1154 F7       		.byte	0xf7
 15073 1155 00       		.uleb128 0
 15074 1156 9F       		.byte	0x9f
 15075 1157 00000000 		.4byte	0
 15076 115b 00000000 		.4byte	0
 15077              	.LVUS112:
 15078 115f 00       		.uleb128 0
 15079 1160 00       		.uleb128 .LVU950
 15080 1161 00       		.uleb128 .LVU950
 15081 1162 00       		.uleb128 0
 15082              	.LLST112:
 15083 1163 60090000 		.4byte	.LVL220-.Ltext0
 15084 1167 6A090000 		.4byte	.LVL221-.Ltext0
 15085 116b 0100     		.2byte	0x1
 15086 116d 51       		.byte	0x51
 15087 116e 6A090000 		.4byte	.LVL221-.Ltext0
 15088 1172 88090000 		.4byte	.LFE31-.Ltext0
 15089 1176 0A00     		.2byte	0xa
 15090 1178 F3       		.byte	0xf3
 15091 1179 03       		.uleb128 0x3
 15092 117a F5       		.byte	0xf5
 15093 117b 01       		.uleb128 0x1
 15094 117c 25       		.uleb128 0x25
 15095 117d F7       		.byte	0xf7
 15096 117e 2C       		.uleb128 0x2c
 15097 117f F7       		.byte	0xf7
 15098 1180 00       		.uleb128 0
 15099 1181 9F       		.byte	0x9f
 15100 1182 00000000 		.4byte	0
 15101 1186 00000000 		.4byte	0
 15102              	.LVUS113:
 15103 118a 00       		.uleb128 0
 15104 118b 00       		.uleb128 .LVU951
 15105 118c 00       		.uleb128 .LVU951
 15106 118d 00       		.uleb128 .LVU957
 15107 118e 00       		.uleb128 .LVU957
 15108 118f 00       		.uleb128 .LVU958
 15109 1190 00       		.uleb128 .LVU958
 15110 1191 00       		.uleb128 0
 15111              	.LLST113:
 15112 1192 60090000 		.4byte	.LVL220-.Ltext0
 15113 1196 6C090000 		.4byte	.LVL222-.Ltext0
 15114 119a 0100     		.2byte	0x1
 15115 119c 52       		.byte	0x52
 15116 119d 6C090000 		.4byte	.LVL222-.Ltext0
 15117 11a1 7C090000 		.4byte	.LVL224-.Ltext0
 15118 11a5 0100     		.2byte	0x1
 15119 11a7 54       		.byte	0x54
 15120 11a8 7C090000 		.4byte	.LVL224-.Ltext0
ARM GAS  /tmp/ccGXytas.s 			page 392


 15121 11ac 81090000 		.4byte	.LVL225-1-.Ltext0
 15122 11b0 0100     		.2byte	0x1
 15123 11b2 50       		.byte	0x50
 15124 11b3 81090000 		.4byte	.LVL225-1-.Ltext0
 15125 11b7 88090000 		.4byte	.LFE31-.Ltext0
 15126 11bb 0A00     		.2byte	0xa
 15127 11bd F3       		.byte	0xf3
 15128 11be 03       		.uleb128 0x3
 15129 11bf F5       		.byte	0xf5
 15130 11c0 02       		.uleb128 0x2
 15131 11c1 25       		.uleb128 0x25
 15132 11c2 F7       		.byte	0xf7
 15133 11c3 2C       		.uleb128 0x2c
 15134 11c4 F7       		.byte	0xf7
 15135 11c5 00       		.uleb128 0
 15136 11c6 9F       		.byte	0x9f
 15137 11c7 00000000 		.4byte	0
 15138 11cb 00000000 		.4byte	0
 15139              	.LLST107:
 15140 11cf 40090000 		.4byte	.LFB30-.Ltext0
 15141 11d3 42090000 		.4byte	.LCFI29-.Ltext0
 15142 11d7 0200     		.2byte	0x2
 15143 11d9 7D       		.byte	0x7d
 15144 11da 00       		.sleb128 0
 15145 11db 42090000 		.4byte	.LCFI29-.Ltext0
 15146 11df 54090000 		.4byte	.LCFI30-.Ltext0
 15147 11e3 0200     		.2byte	0x2
 15148 11e5 7D       		.byte	0x7d
 15149 11e6 08       		.sleb128 8
 15150 11e7 54090000 		.4byte	.LCFI30-.Ltext0
 15151 11eb 60090000 		.4byte	.LFE30-.Ltext0
 15152 11ef 0200     		.2byte	0x2
 15153 11f1 7D       		.byte	0x7d
 15154 11f2 00       		.sleb128 0
 15155 11f3 00000000 		.4byte	0
 15156 11f7 00000000 		.4byte	0
 15157              	.LVUS108:
 15158 11fb 00       		.uleb128 0
 15159 11fc 00       		.uleb128 .LVU939
 15160 11fd 00       		.uleb128 .LVU939
 15161 11fe 00       		.uleb128 0
 15162              	.LLST108:
 15163 11ff 40090000 		.4byte	.LVL215-.Ltext0
 15164 1203 4D090000 		.4byte	.LVL217-1-.Ltext0
 15165 1207 0100     		.2byte	0x1
 15166 1209 50       		.byte	0x50
 15167 120a 4D090000 		.4byte	.LVL217-1-.Ltext0
 15168 120e 60090000 		.4byte	.LFE30-.Ltext0
 15169 1212 0A00     		.2byte	0xa
 15170 1214 F3       		.byte	0xf3
 15171 1215 03       		.uleb128 0x3
 15172 1216 F5       		.byte	0xf5
 15173 1217 00       		.uleb128 0
 15174 1218 25       		.uleb128 0x25
 15175 1219 F7       		.byte	0xf7
 15176 121a 2C       		.uleb128 0x2c
 15177 121b F7       		.byte	0xf7
ARM GAS  /tmp/ccGXytas.s 			page 393


 15178 121c 00       		.uleb128 0
 15179 121d 9F       		.byte	0x9f
 15180 121e 00000000 		.4byte	0
 15181 1222 00000000 		.4byte	0
 15182              	.LVUS109:
 15183 1226 00       		.uleb128 0
 15184 1227 00       		.uleb128 .LVU938
 15185 1228 00       		.uleb128 .LVU938
 15186 1229 00       		.uleb128 .LVU941
 15187 122a 00       		.uleb128 .LVU941
 15188 122b 00       		.uleb128 .LVU942
 15189 122c 00       		.uleb128 .LVU942
 15190 122d 00       		.uleb128 0
 15191              	.LLST109:
 15192 122e 40090000 		.4byte	.LVL215-.Ltext0
 15193 1232 48090000 		.4byte	.LVL216-.Ltext0
 15194 1236 0100     		.2byte	0x1
 15195 1238 51       		.byte	0x51
 15196 1239 48090000 		.4byte	.LVL216-.Ltext0
 15197 123d 54090000 		.4byte	.LVL218-.Ltext0
 15198 1241 0100     		.2byte	0x1
 15199 1243 54       		.byte	0x54
 15200 1244 54090000 		.4byte	.LVL218-.Ltext0
 15201 1248 59090000 		.4byte	.LVL219-1-.Ltext0
 15202 124c 0100     		.2byte	0x1
 15203 124e 50       		.byte	0x50
 15204 124f 59090000 		.4byte	.LVL219-1-.Ltext0
 15205 1253 60090000 		.4byte	.LFE30-.Ltext0
 15206 1257 0A00     		.2byte	0xa
 15207 1259 F3       		.byte	0xf3
 15208 125a 03       		.uleb128 0x3
 15209 125b F5       		.byte	0xf5
 15210 125c 01       		.uleb128 0x1
 15211 125d 25       		.uleb128 0x25
 15212 125e F7       		.byte	0xf7
 15213 125f 2C       		.uleb128 0x2c
 15214 1260 F7       		.byte	0xf7
 15215 1261 00       		.uleb128 0
 15216 1262 9F       		.byte	0x9f
 15217 1263 00000000 		.4byte	0
 15218 1267 00000000 		.4byte	0
 15219              	.LLST79:
 15220 126b 40060000 		.4byte	.LFB28-.Ltext0
 15221 126f 44060000 		.4byte	.LCFI22-.Ltext0
 15222 1273 0200     		.2byte	0x2
 15223 1275 7D       		.byte	0x7d
 15224 1276 00       		.sleb128 0
 15225 1277 44060000 		.4byte	.LCFI22-.Ltext0
 15226 127b 0C070000 		.4byte	.LFE28-.Ltext0
 15227 127f 0200     		.2byte	0x2
 15228 1281 7D       		.byte	0x7d
 15229 1282 28       		.sleb128 40
 15230 1283 00000000 		.4byte	0
 15231 1287 00000000 		.4byte	0
 15232              	.LVUS80:
 15233 128b 00       		.uleb128 .LVU677
 15234 128c 00       		.uleb128 .LVU698
ARM GAS  /tmp/ccGXytas.s 			page 394


 15235              	.LLST80:
 15236 128d B6060000 		.4byte	.LVL154-.Ltext0
 15237 1291 F6060000 		.4byte	.LVL160-.Ltext0
 15238 1295 0100     		.2byte	0x1
 15239 1297 56       		.byte	0x56
 15240 1298 00000000 		.4byte	0
 15241 129c 00000000 		.4byte	0
 15242              	.LVUS81:
 15243 12a0 00       		.uleb128 .LVU679
 15244 12a1 00       		.uleb128 .LVU684
 15245              	.LLST81:
 15246 12a2 B8060000 		.4byte	.LVL155-.Ltext0
 15247 12a6 C5060000 		.4byte	.LVL156-1-.Ltext0
 15248 12aa 0100     		.2byte	0x1
 15249 12ac 53       		.byte	0x53
 15250 12ad 00000000 		.4byte	0
 15251 12b1 00000000 		.4byte	0
 15252              	.LVUS82:
 15253 12b5 04       		.uleb128 .LVU630
 15254 12b6 00       		.uleb128 .LVU656
 15255 12b7 00       		.uleb128 .LVU656
 15256 12b8 00       		.uleb128 .LVU664
 15257 12b9 00       		.uleb128 .LVU664
 15258 12ba 00       		.uleb128 .LVU665
 15259 12bb 00       		.uleb128 .LVU665
 15260 12bc 00       		.uleb128 .LVU697
 15261 12bd 00       		.uleb128 .LVU698
 15262 12be 00       		.uleb128 0
 15263              	.LLST82:
 15264 12bf 40060000 		.4byte	.LVL144-.Ltext0
 15265 12c3 74060000 		.4byte	.LVL150-.Ltext0
 15266 12c7 0200     		.2byte	0x2
 15267 12c9 30       		.byte	0x30
 15268 12ca 9F       		.byte	0x9f
 15269 12cb 74060000 		.4byte	.LVL150-.Ltext0
 15270 12cf 96060000 		.4byte	.LVL152-.Ltext0
 15271 12d3 0100     		.2byte	0x1
 15272 12d5 55       		.byte	0x55
 15273 12d6 96060000 		.4byte	.LVL152-.Ltext0
 15274 12da A2060000 		.4byte	.LVL153-.Ltext0
 15275 12de 0200     		.2byte	0x2
 15276 12e0 30       		.byte	0x30
 15277 12e1 9F       		.byte	0x9f
 15278 12e2 A2060000 		.4byte	.LVL153-.Ltext0
 15279 12e6 F4060000 		.4byte	.LVL159-.Ltext0
 15280 12ea 0100     		.2byte	0x1
 15281 12ec 55       		.byte	0x55
 15282 12ed F6060000 		.4byte	.LVL160-.Ltext0
 15283 12f1 0C070000 		.4byte	.LFE28-.Ltext0
 15284 12f5 0200     		.2byte	0x2
 15285 12f7 30       		.byte	0x30
 15286 12f8 9F       		.byte	0x9f
 15287 12f9 00000000 		.4byte	0
 15288 12fd 00000000 		.4byte	0
 15289              	.LVUS83:
 15290 1301 00       		.uleb128 .LVU638
 15291 1302 00       		.uleb128 .LVU659
ARM GAS  /tmp/ccGXytas.s 			page 395


 15292 1303 00       		.uleb128 .LVU664
 15293 1304 00       		.uleb128 .LVU698
 15294              	.LLST83:
 15295 1305 52060000 		.4byte	.LVL145-.Ltext0
 15296 1309 86060000 		.4byte	.LVL151-.Ltext0
 15297 130d 0100     		.2byte	0x1
 15298 130f 57       		.byte	0x57
 15299 1310 96060000 		.4byte	.LVL152-.Ltext0
 15300 1314 F6060000 		.4byte	.LVL160-.Ltext0
 15301 1318 0100     		.2byte	0x1
 15302 131a 57       		.byte	0x57
 15303 131b 00000000 		.4byte	0
 15304 131f 00000000 		.4byte	0
 15305              	.LVUS84:
 15306 1323 00       		.uleb128 .LVU645
 15307 1324 00       		.uleb128 .LVU648
 15308 1325 00       		.uleb128 .LVU648
 15309 1326 00       		.uleb128 .LVU649
 15310              	.LLST84:
 15311 1327 58060000 		.4byte	.LVL146-.Ltext0
 15312 132b 62060000 		.4byte	.LVL147-.Ltext0
 15313 132f 0100     		.2byte	0x1
 15314 1331 53       		.byte	0x53
 15315 1332 62060000 		.4byte	.LVL147-.Ltext0
 15316 1336 68060000 		.4byte	.LVL148-.Ltext0
 15317 133a 0500     		.2byte	0x5
 15318 133c 03       		.byte	0x3
 15319 133d 20000000 		.4byte	pxOverflowDelayedTaskList
 15320 1341 00000000 		.4byte	0
 15321 1345 00000000 		.4byte	0
 15322              	.LLST157:
 15323 1349 D00B0000 		.4byte	.LFB27-.Ltext0
 15324 134d D40B0000 		.4byte	.LCFI42-.Ltext0
 15325 1351 0200     		.2byte	0x2
 15326 1353 7D       		.byte	0x7d
 15327 1354 00       		.sleb128 0
 15328 1355 D40B0000 		.4byte	.LCFI42-.Ltext0
 15329 1359 700C0000 		.4byte	.LFE27-.Ltext0
 15330 135d 0200     		.2byte	0x2
 15331 135f 7D       		.byte	0x7d
 15332 1360 28       		.sleb128 40
 15333 1361 00000000 		.4byte	0
 15334 1365 00000000 		.4byte	0
 15335              	.LVUS158:
 15336 1369 00       		.uleb128 0
 15337 136a 00       		.uleb128 .LVU1240
 15338 136b 00       		.uleb128 .LVU1240
 15339 136c 00       		.uleb128 .LVU1268
 15340 136d 00       		.uleb128 .LVU1268
 15341 136e 00       		.uleb128 0
 15342              	.LLST158:
 15343 136f D00B0000 		.4byte	.LVL291-.Ltext0
 15344 1373 F60B0000 		.4byte	.LVL293-.Ltext0
 15345 1377 0100     		.2byte	0x1
 15346 1379 50       		.byte	0x50
 15347 137a F60B0000 		.4byte	.LVL293-.Ltext0
 15348 137e 5E0C0000 		.4byte	.LVL307-.Ltext0
ARM GAS  /tmp/ccGXytas.s 			page 396


 15349 1382 0100     		.2byte	0x1
 15350 1384 55       		.byte	0x55
 15351 1385 5E0C0000 		.4byte	.LVL307-.Ltext0
 15352 1389 700C0000 		.4byte	.LFE27-.Ltext0
 15353 138d 0100     		.2byte	0x1
 15354 138f 50       		.byte	0x50
 15355 1390 00000000 		.4byte	0
 15356 1394 00000000 		.4byte	0
 15357              	.LVUS159:
 15358 1398 00       		.uleb128 0
 15359 1399 00       		.uleb128 .LVU1240
 15360 139a 00       		.uleb128 .LVU1240
 15361 139b 00       		.uleb128 .LVU1268
 15362 139c 00       		.uleb128 .LVU1268
 15363 139d 00       		.uleb128 0
 15364              	.LLST159:
 15365 139e D00B0000 		.4byte	.LVL291-.Ltext0
 15366 13a2 F60B0000 		.4byte	.LVL293-.Ltext0
 15367 13a6 0100     		.2byte	0x1
 15368 13a8 51       		.byte	0x51
 15369 13a9 F60B0000 		.4byte	.LVL293-.Ltext0
 15370 13ad 5E0C0000 		.4byte	.LVL307-.Ltext0
 15371 13b1 0A00     		.2byte	0xa
 15372 13b3 F3       		.byte	0xf3
 15373 13b4 03       		.uleb128 0x3
 15374 13b5 F5       		.byte	0xf5
 15375 13b6 01       		.uleb128 0x1
 15376 13b7 25       		.uleb128 0x25
 15377 13b8 F7       		.byte	0xf7
 15378 13b9 2C       		.uleb128 0x2c
 15379 13ba F7       		.byte	0xf7
 15380 13bb 00       		.uleb128 0
 15381 13bc 9F       		.byte	0x9f
 15382 13bd 5E0C0000 		.4byte	.LVL307-.Ltext0
 15383 13c1 700C0000 		.4byte	.LFE27-.Ltext0
 15384 13c5 0100     		.2byte	0x1
 15385 13c7 51       		.byte	0x51
 15386 13c8 00000000 		.4byte	0
 15387 13cc 00000000 		.4byte	0
 15388              	.LVUS160:
 15389 13d0 00       		.uleb128 0
 15390 13d1 00       		.uleb128 .LVU1231
 15391 13d2 00       		.uleb128 .LVU1231
 15392 13d3 00       		.uleb128 0
 15393              	.LLST160:
 15394 13d4 D00B0000 		.4byte	.LVL291-.Ltext0
 15395 13d8 DD0B0000 		.4byte	.LVL292-1-.Ltext0
 15396 13dc 0100     		.2byte	0x1
 15397 13de 52       		.byte	0x52
 15398 13df DD0B0000 		.4byte	.LVL292-1-.Ltext0
 15399 13e3 700C0000 		.4byte	.LFE27-.Ltext0
 15400 13e7 0100     		.2byte	0x1
 15401 13e9 58       		.byte	0x58
 15402 13ea 00000000 		.4byte	0
 15403 13ee 00000000 		.4byte	0
 15404              	.LVUS161:
 15405 13f2 02       		.uleb128 .LVU1226
ARM GAS  /tmp/ccGXytas.s 			page 397


 15406 13f3 00       		.uleb128 .LVU1240
 15407 13f4 00       		.uleb128 .LVU1240
 15408 13f5 00       		.uleb128 .LVU1258
 15409 13f6 00       		.uleb128 .LVU1258
 15410 13f7 00       		.uleb128 .LVU1261
 15411 13f8 00       		.uleb128 .LVU1261
 15412 13f9 00       		.uleb128 .LVU1266
 15413 13fa 00       		.uleb128 .LVU1266
 15414 13fb 00       		.uleb128 .LVU1268
 15415 13fc 00       		.uleb128 .LVU1268
 15416 13fd 00       		.uleb128 0
 15417              	.LLST161:
 15418 13fe D00B0000 		.4byte	.LVL291-.Ltext0
 15419 1402 F60B0000 		.4byte	.LVL293-.Ltext0
 15420 1406 0200     		.2byte	0x2
 15421 1408 30       		.byte	0x30
 15422 1409 9F       		.byte	0x9f
 15423 140a F60B0000 		.4byte	.LVL293-.Ltext0
 15424 140e 460C0000 		.4byte	.LVL303-.Ltext0
 15425 1412 0100     		.2byte	0x1
 15426 1414 54       		.byte	0x54
 15427 1415 460C0000 		.4byte	.LVL303-.Ltext0
 15428 1419 4E0C0000 		.4byte	.LVL304-.Ltext0
 15429 141d 0600     		.2byte	0x6
 15430 141f 74       		.byte	0x74
 15431 1420 00       		.sleb128 0
 15432 1421 70       		.byte	0x70
 15433 1422 00       		.sleb128 0
 15434 1423 22       		.byte	0x22
 15435 1424 9F       		.byte	0x9f
 15436 1425 4E0C0000 		.4byte	.LVL304-.Ltext0
 15437 1429 580C0000 		.4byte	.LVL306-.Ltext0
 15438 142d 0100     		.2byte	0x1
 15439 142f 54       		.byte	0x54
 15440 1430 580C0000 		.4byte	.LVL306-.Ltext0
 15441 1434 5E0C0000 		.4byte	.LVL307-.Ltext0
 15442 1438 0600     		.2byte	0x6
 15443 143a 74       		.byte	0x74
 15444 143b 00       		.sleb128 0
 15445 143c 70       		.byte	0x70
 15446 143d 00       		.sleb128 0
 15447 143e 22       		.byte	0x22
 15448 143f 9F       		.byte	0x9f
 15449 1440 5E0C0000 		.4byte	.LVL307-.Ltext0
 15450 1444 700C0000 		.4byte	.LFE27-.Ltext0
 15451 1448 0200     		.2byte	0x2
 15452 144a 30       		.byte	0x30
 15453 144b 9F       		.byte	0x9f
 15454 144c 00000000 		.4byte	0
 15455 1450 00000000 		.4byte	0
 15456              	.LVUS162:
 15457 1454 02       		.uleb128 .LVU1226
 15458 1455 00       		.uleb128 .LVU1240
 15459 1456 00       		.uleb128 .LVU1240
 15460 1457 00       		.uleb128 .LVU1261
 15461 1458 00       		.uleb128 .LVU1266
 15462 1459 00       		.uleb128 .LVU1268
ARM GAS  /tmp/ccGXytas.s 			page 398


 15463 145a 00       		.uleb128 .LVU1268
 15464 145b 00       		.uleb128 0
 15465              	.LLST162:
 15466 145c D00B0000 		.4byte	.LVL291-.Ltext0
 15467 1460 F60B0000 		.4byte	.LVL293-.Ltext0
 15468 1464 0200     		.2byte	0x2
 15469 1466 35       		.byte	0x35
 15470 1467 9F       		.byte	0x9f
 15471 1468 F60B0000 		.4byte	.LVL293-.Ltext0
 15472 146c 4E0C0000 		.4byte	.LVL304-.Ltext0
 15473 1470 0100     		.2byte	0x1
 15474 1472 56       		.byte	0x56
 15475 1473 580C0000 		.4byte	.LVL306-.Ltext0
 15476 1477 5E0C0000 		.4byte	.LVL307-.Ltext0
 15477 147b 0100     		.2byte	0x1
 15478 147d 56       		.byte	0x56
 15479 147e 5E0C0000 		.4byte	.LVL307-.Ltext0
 15480 1482 700C0000 		.4byte	.LFE27-.Ltext0
 15481 1486 0200     		.2byte	0x2
 15482 1488 35       		.byte	0x35
 15483 1489 9F       		.byte	0x9f
 15484 148a 00000000 		.4byte	0
 15485 148e 00000000 		.4byte	0
 15486              	.LVUS77:
 15487 1492 00       		.uleb128 0
 15488 1493 00       		.uleb128 .LVU622
 15489              	.LLST77:
 15490 1494 30060000 		.4byte	.LVL141-.Ltext0
 15491 1498 36060000 		.4byte	.LVL142-.Ltext0
 15492 149c 0100     		.2byte	0x1
 15493 149e 50       		.byte	0x50
 15494 149f 00000000 		.4byte	0
 15495 14a3 00000000 		.4byte	0
 15496              	.LVUS78:
 15497 14a7 00       		.uleb128 .LVU622
 15498 14a8 00       		.uleb128 .LVU625
 15499 14a9 00       		.uleb128 .LVU625
 15500 14aa 00       		.uleb128 0
 15501              	.LLST78:
 15502 14ab 36060000 		.4byte	.LVL142-.Ltext0
 15503 14af 38060000 		.4byte	.LVL143-.Ltext0
 15504 14b3 0100     		.2byte	0x1
 15505 14b5 50       		.byte	0x50
 15506 14b6 38060000 		.4byte	.LVL143-.Ltext0
 15507 14ba 40060000 		.4byte	.LFE26-.Ltext0
 15508 14be 0300     		.2byte	0x3
 15509 14c0 70       		.byte	0x70
 15510 14c1 4C       		.sleb128 -52
 15511 14c2 9F       		.byte	0x9f
 15512 14c3 00000000 		.4byte	0
 15513 14c7 00000000 		.4byte	0
 15514              	.LLST85:
 15515 14cb 0C070000 		.4byte	.LFB22-.Ltext0
 15516 14cf 10070000 		.4byte	.LCFI23-.Ltext0
 15517 14d3 0200     		.2byte	0x2
 15518 14d5 7D       		.byte	0x7d
 15519 14d6 00       		.sleb128 0
ARM GAS  /tmp/ccGXytas.s 			page 399


 15520 14d7 10070000 		.4byte	.LCFI23-.Ltext0
 15521 14db CC070000 		.4byte	.LFE22-.Ltext0
 15522 14df 0200     		.2byte	0x2
 15523 14e1 7D       		.byte	0x7d
 15524 14e2 20       		.sleb128 32
 15525 14e3 00000000 		.4byte	0
 15526 14e7 00000000 		.4byte	0
 15527              	.LVUS86:
 15528 14eb 02       		.uleb128 .LVU704
 15529 14ec 00       		.uleb128 .LVU714
 15530 14ed 00       		.uleb128 .LVU719
 15531 14ee 00       		.uleb128 .LVU723
 15532 14ef 00       		.uleb128 .LVU725
 15533 14f0 00       		.uleb128 .LVU739
 15534              	.LLST86:
 15535 14f1 0C070000 		.4byte	.LVL161-.Ltext0
 15536 14f5 26070000 		.4byte	.LVL163-.Ltext0
 15537 14f9 0200     		.2byte	0x2
 15538 14fb 30       		.byte	0x30
 15539 14fc 9F       		.byte	0x9f
 15540 14fd 32070000 		.4byte	.LVL166-.Ltext0
 15541 1501 44070000 		.4byte	.LVL167-.Ltext0
 15542 1505 0200     		.2byte	0x2
 15543 1507 30       		.byte	0x30
 15544 1508 9F       		.byte	0x9f
 15545 1509 4A070000 		.4byte	.LVL168-.Ltext0
 15546 150d 80070000 		.4byte	.LVL172-.Ltext0
 15547 1511 0100     		.2byte	0x1
 15548 1513 55       		.byte	0x55
 15549 1514 00000000 		.4byte	0
 15550 1518 00000000 		.4byte	0
 15551              	.LVUS87:
 15552 151c 03       		.uleb128 .LVU705
 15553 151d 00       		.uleb128 .LVU715
 15554 151e 00       		.uleb128 .LVU715
 15555 151f 00       		.uleb128 .LVU719
 15556 1520 00       		.uleb128 .LVU719
 15557 1521 01       		.uleb128 .LVU768
 15558 1522 01       		.uleb128 .LVU768
 15559 1523 00       		.uleb128 0
 15560              	.LLST87:
 15561 1524 0C070000 		.4byte	.LVL161-.Ltext0
 15562 1528 28070000 		.4byte	.LVL164-.Ltext0
 15563 152c 0200     		.2byte	0x2
 15564 152e 30       		.byte	0x30
 15565 152f 9F       		.byte	0x9f
 15566 1530 28070000 		.4byte	.LVL164-.Ltext0
 15567 1534 32070000 		.4byte	.LVL166-.Ltext0
 15568 1538 0100     		.2byte	0x1
 15569 153a 54       		.byte	0x54
 15570 153b 32070000 		.4byte	.LVL166-.Ltext0
 15571 153f B0070000 		.4byte	.LVL178-.Ltext0
 15572 1543 0200     		.2byte	0x2
 15573 1545 30       		.byte	0x30
 15574 1546 9F       		.byte	0x9f
 15575 1547 B0070000 		.4byte	.LVL178-.Ltext0
 15576 154b CC070000 		.4byte	.LFE22-.Ltext0
ARM GAS  /tmp/ccGXytas.s 			page 400


 15577 154f 0200     		.2byte	0x2
 15578 1551 31       		.byte	0x31
 15579 1552 9F       		.byte	0x9f
 15580 1553 00000000 		.4byte	0
 15581 1557 00000000 		.4byte	0
 15582              	.LVUS88:
 15583 155b 00       		.uleb128 .LVU748
 15584 155c 02       		.uleb128 .LVU759
 15585 155d 02       		.uleb128 .LVU759
 15586 155e 00       		.uleb128 .LVU760
 15587 155f 00       		.uleb128 .LVU760
 15588 1560 00       		.uleb128 0
 15589              	.LLST88:
 15590 1561 92070000 		.4byte	.LVL174-.Ltext0
 15591 1565 A0070000 		.4byte	.LVL176-.Ltext0
 15592 1569 0100     		.2byte	0x1
 15593 156b 55       		.byte	0x55
 15594 156c A0070000 		.4byte	.LVL176-.Ltext0
 15595 1570 A2070000 		.4byte	.LVL177-.Ltext0
 15596 1574 0300     		.2byte	0x3
 15597 1576 75       		.byte	0x75
 15598 1577 7F       		.sleb128 -1
 15599 1578 9F       		.byte	0x9f
 15600 1579 A2070000 		.4byte	.LVL177-.Ltext0
 15601 157d CC070000 		.4byte	.LFE22-.Ltext0
 15602 1581 0100     		.2byte	0x1
 15603 1583 55       		.byte	0x55
 15604 1584 00000000 		.4byte	0
 15605 1588 00000000 		.4byte	0
 15606              	.LLST74:
 15607 158c 7C050000 		.4byte	.LFB19-.Ltext0
 15608 1590 7E050000 		.4byte	.LCFI17-.Ltext0
 15609 1594 0200     		.2byte	0x2
 15610 1596 7D       		.byte	0x7d
 15611 1597 00       		.sleb128 0
 15612 1598 7E050000 		.4byte	.LCFI17-.Ltext0
 15613 159c C0050000 		.4byte	.LCFI18-.Ltext0
 15614 15a0 0200     		.2byte	0x2
 15615 15a2 7D       		.byte	0x7d
 15616 15a3 18       		.sleb128 24
 15617 15a4 C0050000 		.4byte	.LCFI18-.Ltext0
 15618 15a8 C4050000 		.4byte	.LCFI19-.Ltext0
 15619 15ac 0200     		.2byte	0x2
 15620 15ae 7D       		.byte	0x7d
 15621 15af 0C       		.sleb128 12
 15622 15b0 C4050000 		.4byte	.LCFI19-.Ltext0
 15623 15b4 C8050000 		.4byte	.LCFI20-.Ltext0
 15624 15b8 0200     		.2byte	0x2
 15625 15ba 7D       		.byte	0x7d
 15626 15bb 00       		.sleb128 0
 15627 15bc C8050000 		.4byte	.LCFI20-.Ltext0
 15628 15c0 CA050000 		.4byte	.LCFI21-.Ltext0
 15629 15c4 0200     		.2byte	0x2
 15630 15c6 7D       		.byte	0x7d
 15631 15c7 18       		.sleb128 24
 15632 15c8 CA050000 		.4byte	.LCFI21-.Ltext0
 15633 15cc D8050000 		.4byte	.LFE19-.Ltext0
ARM GAS  /tmp/ccGXytas.s 			page 401


 15634 15d0 0200     		.2byte	0x2
 15635 15d2 7D       		.byte	0x7d
 15636 15d3 0C       		.sleb128 12
 15637 15d4 00000000 		.4byte	0
 15638 15d8 00000000 		.4byte	0
 15639              	.LVUS75:
 15640 15dc 00       		.uleb128 .LVU569
 15641 15dd 00       		.uleb128 .LVU573
 15642 15de 00       		.uleb128 .LVU573
 15643 15df 00       		.uleb128 .LVU591
 15644 15e0 00       		.uleb128 .LVU591
 15645 15e1 00       		.uleb128 0
 15646              	.LLST75:
 15647 15e2 96050000 		.4byte	.LVL136-.Ltext0
 15648 15e6 9D050000 		.4byte	.LVL137-1-.Ltext0
 15649 15ea 0100     		.2byte	0x1
 15650 15ec 50       		.byte	0x50
 15651 15ed 9E050000 		.4byte	.LVL137-.Ltext0
 15652 15f1 C7050000 		.4byte	.LVL138-1-.Ltext0
 15653 15f5 0100     		.2byte	0x1
 15654 15f7 50       		.byte	0x50
 15655 15f8 C8050000 		.4byte	.LVL138-.Ltext0
 15656 15fc D8050000 		.4byte	.LFE19-.Ltext0
 15657 1600 0100     		.2byte	0x1
 15658 1602 50       		.byte	0x50
 15659 1603 00000000 		.4byte	0
 15660 1607 00000000 		.4byte	0
 15661              	.LLST67:
 15662 160b F8040000 		.4byte	.LFB18-.Ltext0
 15663 160f FC040000 		.4byte	.LCFI16-.Ltext0
 15664 1613 0200     		.2byte	0x2
 15665 1615 7D       		.byte	0x7d
 15666 1616 00       		.sleb128 0
 15667 1617 FC040000 		.4byte	.LCFI16-.Ltext0
 15668 161b 7C050000 		.4byte	.LFE18-.Ltext0
 15669 161f 0200     		.2byte	0x2
 15670 1621 7D       		.byte	0x7d
 15671 1622 18       		.sleb128 24
 15672 1623 00000000 		.4byte	0
 15673 1627 00000000 		.4byte	0
 15674              	.LVUS68:
 15675 162b 00       		.uleb128 0
 15676 162c 00       		.uleb128 .LVU531
 15677 162d 00       		.uleb128 .LVU531
 15678 162e 00       		.uleb128 0
 15679              	.LLST68:
 15680 162f F8040000 		.4byte	.LVL126-.Ltext0
 15681 1633 24050000 		.4byte	.LVL128-.Ltext0
 15682 1637 0100     		.2byte	0x1
 15683 1639 50       		.byte	0x50
 15684 163a 24050000 		.4byte	.LVL128-.Ltext0
 15685 163e 7C050000 		.4byte	.LFE18-.Ltext0
 15686 1642 0100     		.2byte	0x1
 15687 1644 55       		.byte	0x55
 15688 1645 00000000 		.4byte	0
 15689 1649 00000000 		.4byte	0
 15690              	.LVUS69:
ARM GAS  /tmp/ccGXytas.s 			page 402


 15691 164d 02       		.uleb128 .LVU508
 15692 164e 00       		.uleb128 .LVU548
 15693 164f 00       		.uleb128 .LVU548
 15694 1650 00       		.uleb128 .LVU562
 15695 1651 00       		.uleb128 .LVU562
 15696 1652 00       		.uleb128 0
 15697              	.LLST69:
 15698 1653 F8040000 		.4byte	.LVL126-.Ltext0
 15699 1657 44050000 		.4byte	.LVL130-.Ltext0
 15700 165b 0200     		.2byte	0x2
 15701 165d 30       		.byte	0x30
 15702 165e 9F       		.byte	0x9f
 15703 165f 44050000 		.4byte	.LVL130-.Ltext0
 15704 1663 6C050000 		.4byte	.LVL134-.Ltext0
 15705 1667 0100     		.2byte	0x1
 15706 1669 56       		.byte	0x56
 15707 166a 6C050000 		.4byte	.LVL134-.Ltext0
 15708 166e 7C050000 		.4byte	.LFE18-.Ltext0
 15709 1672 0200     		.2byte	0x2
 15710 1674 30       		.byte	0x30
 15711 1675 9F       		.byte	0x9f
 15712 1676 00000000 		.4byte	0
 15713 167a 00000000 		.4byte	0
 15714              	.LVUS70:
 15715 167e 03       		.uleb128 .LVU509
 15716 167f 00       		.uleb128 .LVU531
 15717 1680 00       		.uleb128 .LVU531
 15718 1681 00       		.uleb128 0
 15719              	.LLST70:
 15720 1682 F8040000 		.4byte	.LVL126-.Ltext0
 15721 1686 24050000 		.4byte	.LVL128-.Ltext0
 15722 168a 0100     		.2byte	0x1
 15723 168c 50       		.byte	0x50
 15724 168d 24050000 		.4byte	.LVL128-.Ltext0
 15725 1691 7C050000 		.4byte	.LFE18-.Ltext0
 15726 1695 0100     		.2byte	0x1
 15727 1697 55       		.byte	0x55
 15728 1698 00000000 		.4byte	0
 15729 169c 00000000 		.4byte	0
 15730              	.LVUS71:
 15731 16a0 03       		.uleb128 .LVU522
 15732 16a1 00       		.uleb128 .LVU531
 15733 16a2 00       		.uleb128 .LVU531
 15734 16a3 02       		.uleb128 .LVU536
 15735              	.LLST71:
 15736 16a4 12050000 		.4byte	.LVL127-.Ltext0
 15737 16a8 24050000 		.4byte	.LVL128-.Ltext0
 15738 16ac 0100     		.2byte	0x1
 15739 16ae 50       		.byte	0x50
 15740 16af 24050000 		.4byte	.LVL128-.Ltext0
 15741 16b3 2A050000 		.4byte	.LVL129-.Ltext0
 15742 16b7 0100     		.2byte	0x1
 15743 16b9 55       		.byte	0x55
 15744 16ba 00000000 		.4byte	0
 15745 16be 00000000 		.4byte	0
 15746              	.LVUS72:
 15747 16c2 05       		.uleb128 .LVU524
ARM GAS  /tmp/ccGXytas.s 			page 403


 15748 16c3 00       		.uleb128 .LVU534
 15749 16c4 00       		.uleb128 .LVU534
 15750 16c5 02       		.uleb128 .LVU536
 15751              	.LLST72:
 15752 16c6 12050000 		.4byte	.LVL127-.Ltext0
 15753 16ca 2A050000 		.4byte	.LVL129-.Ltext0
 15754 16ce 0200     		.2byte	0x2
 15755 16d0 30       		.byte	0x30
 15756 16d1 9F       		.byte	0x9f
 15757 16d2 2A050000 		.4byte	.LVL129-.Ltext0
 15758 16d6 2A050000 		.4byte	.LVL129-.Ltext0
 15759 16da 0200     		.2byte	0x2
 15760 16dc 31       		.byte	0x31
 15761 16dd 9F       		.byte	0x9f
 15762 16de 00000000 		.4byte	0
 15763 16e2 00000000 		.4byte	0
 15764              	.LVUS73:
 15765 16e6 06       		.uleb128 .LVU525
 15766 16e7 00       		.uleb128 .LVU531
 15767 16e8 00       		.uleb128 .LVU531
 15768 16e9 00       		.uleb128 0
 15769              	.LLST73:
 15770 16ea 12050000 		.4byte	.LVL127-.Ltext0
 15771 16ee 24050000 		.4byte	.LVL128-.Ltext0
 15772 16f2 0100     		.2byte	0x1
 15773 16f4 50       		.byte	0x50
 15774 16f5 24050000 		.4byte	.LVL128-.Ltext0
 15775 16f9 7C050000 		.4byte	.LFE18-.Ltext0
 15776 16fd 0100     		.2byte	0x1
 15777 16ff 55       		.byte	0x55
 15778 1700 00000000 		.4byte	0
 15779 1704 00000000 		.4byte	0
 15780              	.LLST61:
 15781 1708 80040000 		.4byte	.LFB17-.Ltext0
 15782 170c 82040000 		.4byte	.LCFI13-.Ltext0
 15783 1710 0200     		.2byte	0x2
 15784 1712 7D       		.byte	0x7d
 15785 1713 00       		.sleb128 0
 15786 1714 82040000 		.4byte	.LCFI13-.Ltext0
 15787 1718 EE040000 		.4byte	.LCFI14-.Ltext0
 15788 171c 0200     		.2byte	0x2
 15789 171e 7D       		.byte	0x7d
 15790 171f 10       		.sleb128 16
 15791 1720 EE040000 		.4byte	.LCFI14-.Ltext0
 15792 1724 F2040000 		.4byte	.LCFI15-.Ltext0
 15793 1728 0200     		.2byte	0x2
 15794 172a 7D       		.byte	0x7d
 15795 172b 00       		.sleb128 0
 15796 172c F2040000 		.4byte	.LCFI15-.Ltext0
 15797 1730 F8040000 		.4byte	.LFE17-.Ltext0
 15798 1734 0200     		.2byte	0x2
 15799 1736 7D       		.byte	0x7d
 15800 1737 10       		.sleb128 16
 15801 1738 00000000 		.4byte	0
 15802 173c 00000000 		.4byte	0
 15803              	.LVUS62:
 15804 1740 00       		.uleb128 0
ARM GAS  /tmp/ccGXytas.s 			page 404


 15805 1741 00       		.uleb128 .LVU472
 15806 1742 00       		.uleb128 .LVU472
 15807 1743 00       		.uleb128 .LVU504
 15808 1744 00       		.uleb128 .LVU504
 15809 1745 00       		.uleb128 .LVU505
 15810 1746 00       		.uleb128 .LVU505
 15811 1747 00       		.uleb128 0
 15812              	.LLST62:
 15813 1748 80040000 		.4byte	.LVL119-.Ltext0
 15814 174c 91040000 		.4byte	.LVL120-1-.Ltext0
 15815 1750 0100     		.2byte	0x1
 15816 1752 50       		.byte	0x50
 15817 1753 91040000 		.4byte	.LVL120-1-.Ltext0
 15818 1757 EE040000 		.4byte	.LVL124-.Ltext0
 15819 175b 0100     		.2byte	0x1
 15820 175d 54       		.byte	0x54
 15821 175e EE040000 		.4byte	.LVL124-.Ltext0
 15822 1762 F2040000 		.4byte	.LVL125-.Ltext0
 15823 1766 0A00     		.2byte	0xa
 15824 1768 F3       		.byte	0xf3
 15825 1769 03       		.uleb128 0x3
 15826 176a F5       		.byte	0xf5
 15827 176b 00       		.uleb128 0
 15828 176c 25       		.uleb128 0x25
 15829 176d F7       		.byte	0xf7
 15830 176e 2C       		.uleb128 0x2c
 15831 176f F7       		.byte	0xf7
 15832 1770 00       		.uleb128 0
 15833 1771 9F       		.byte	0x9f
 15834 1772 F2040000 		.4byte	.LVL125-.Ltext0
 15835 1776 F8040000 		.4byte	.LFE17-.Ltext0
 15836 177a 0100     		.2byte	0x1
 15837 177c 50       		.byte	0x50
 15838 177d 00000000 		.4byte	0
 15839 1781 00000000 		.4byte	0
 15840              	.LVUS63:
 15841 1785 02       		.uleb128 .LVU463
 15842 1786 00       		.uleb128 .LVU472
 15843 1787 00       		.uleb128 .LVU472
 15844 1788 00       		.uleb128 .LVU504
 15845 1789 00       		.uleb128 .LVU504
 15846 178a 00       		.uleb128 .LVU505
 15847 178b 00       		.uleb128 .LVU505
 15848 178c 00       		.uleb128 0
 15849              	.LLST63:
 15850 178d 80040000 		.4byte	.LVL119-.Ltext0
 15851 1791 91040000 		.4byte	.LVL120-1-.Ltext0
 15852 1795 0100     		.2byte	0x1
 15853 1797 50       		.byte	0x50
 15854 1798 91040000 		.4byte	.LVL120-1-.Ltext0
 15855 179c EE040000 		.4byte	.LVL124-.Ltext0
 15856 17a0 0100     		.2byte	0x1
 15857 17a2 54       		.byte	0x54
 15858 17a3 EE040000 		.4byte	.LVL124-.Ltext0
 15859 17a7 F2040000 		.4byte	.LVL125-.Ltext0
 15860 17ab 0A00     		.2byte	0xa
 15861 17ad F3       		.byte	0xf3
ARM GAS  /tmp/ccGXytas.s 			page 405


 15862 17ae 03       		.uleb128 0x3
 15863 17af F5       		.byte	0xf5
 15864 17b0 00       		.uleb128 0
 15865 17b1 25       		.uleb128 0x25
 15866 17b2 F7       		.byte	0xf7
 15867 17b3 2C       		.uleb128 0x2c
 15868 17b4 F7       		.byte	0xf7
 15869 17b5 00       		.uleb128 0
 15870 17b6 9F       		.byte	0x9f
 15871 17b7 F2040000 		.4byte	.LVL125-.Ltext0
 15872 17bb F8040000 		.4byte	.LFE17-.Ltext0
 15873 17bf 0100     		.2byte	0x1
 15874 17c1 50       		.byte	0x50
 15875 17c2 00000000 		.4byte	0
 15876 17c6 00000000 		.4byte	0
 15877              	.LVUS64:
 15878 17ca 01       		.uleb128 .LVU473
 15879 17cb 02       		.uleb128 .LVU486
 15880              	.LLST64:
 15881 17cc 92040000 		.4byte	.LVL120-.Ltext0
 15882 17d0 A8040000 		.4byte	.LVL121-.Ltext0
 15883 17d4 0100     		.2byte	0x1
 15884 17d6 54       		.byte	0x54
 15885 17d7 00000000 		.4byte	0
 15886 17db 00000000 		.4byte	0
 15887              	.LVUS65:
 15888 17df 03       		.uleb128 .LVU475
 15889 17e0 00       		.uleb128 .LVU484
 15890 17e1 00       		.uleb128 .LVU484
 15891 17e2 02       		.uleb128 .LVU486
 15892              	.LLST65:
 15893 17e3 92040000 		.4byte	.LVL120-.Ltext0
 15894 17e7 A8040000 		.4byte	.LVL121-.Ltext0
 15895 17eb 0200     		.2byte	0x2
 15896 17ed 30       		.byte	0x30
 15897 17ee 9F       		.byte	0x9f
 15898 17ef A8040000 		.4byte	.LVL121-.Ltext0
 15899 17f3 A8040000 		.4byte	.LVL121-.Ltext0
 15900 17f7 0200     		.2byte	0x2
 15901 17f9 31       		.byte	0x31
 15902 17fa 9F       		.byte	0x9f
 15903 17fb 00000000 		.4byte	0
 15904 17ff 00000000 		.4byte	0
 15905              	.LVUS66:
 15906 1803 04       		.uleb128 .LVU476
 15907 1804 00       		.uleb128 .LVU504
 15908 1805 00       		.uleb128 .LVU504
 15909 1806 00       		.uleb128 .LVU505
 15910              	.LLST66:
 15911 1807 92040000 		.4byte	.LVL120-.Ltext0
 15912 180b EE040000 		.4byte	.LVL124-.Ltext0
 15913 180f 0100     		.2byte	0x1
 15914 1811 54       		.byte	0x54
 15915 1812 EE040000 		.4byte	.LVL124-.Ltext0
 15916 1816 F2040000 		.4byte	.LVL125-.Ltext0
 15917 181a 0A00     		.2byte	0xa
 15918 181c F3       		.byte	0xf3
ARM GAS  /tmp/ccGXytas.s 			page 406


 15919 181d 03       		.uleb128 0x3
 15920 181e F5       		.byte	0xf5
 15921 181f 00       		.uleb128 0
 15922 1820 25       		.uleb128 0x25
 15923 1821 F7       		.byte	0xf7
 15924 1822 2C       		.uleb128 0x2c
 15925 1823 F7       		.byte	0xf7
 15926 1824 00       		.uleb128 0
 15927 1825 9F       		.byte	0x9f
 15928 1826 00000000 		.4byte	0
 15929 182a 00000000 		.4byte	0
 15930              	.LLST104:
 15931 182e 98080000 		.4byte	.LFB15-.Ltext0
 15932 1832 9A080000 		.4byte	.LCFI27-.Ltext0
 15933 1836 0200     		.2byte	0x2
 15934 1838 7D       		.byte	0x7d
 15935 1839 00       		.sleb128 0
 15936 183a 9A080000 		.4byte	.LCFI27-.Ltext0
 15937 183e 32090000 		.4byte	.LCFI28-.Ltext0
 15938 1842 0200     		.2byte	0x2
 15939 1844 7D       		.byte	0x7d
 15940 1845 10       		.sleb128 16
 15941 1846 32090000 		.4byte	.LCFI28-.Ltext0
 15942 184a 40090000 		.4byte	.LFE15-.Ltext0
 15943 184e 0200     		.2byte	0x2
 15944 1850 7D       		.byte	0x7d
 15945 1851 00       		.sleb128 0
 15946 1852 00000000 		.4byte	0
 15947 1856 00000000 		.4byte	0
 15948              	.LVUS105:
 15949 185a 00       		.uleb128 0
 15950 185b 00       		.uleb128 .LVU882
 15951 185c 00       		.uleb128 .LVU882
 15952 185d 00       		.uleb128 .LVU885
 15953              	.LLST105:
 15954 185e 98080000 		.4byte	.LVL202-.Ltext0
 15955 1862 A1080000 		.4byte	.LVL203-1-.Ltext0
 15956 1866 0100     		.2byte	0x1
 15957 1868 50       		.byte	0x50
 15958 1869 A1080000 		.4byte	.LVL203-1-.Ltext0
 15959 186d A6080000 		.4byte	.LVL204-.Ltext0
 15960 1871 0100     		.2byte	0x1
 15961 1873 54       		.byte	0x54
 15962 1874 00000000 		.4byte	0
 15963 1878 00000000 		.4byte	0
 15964              	.LVUS106:
 15965 187c 00       		.uleb128 .LVU885
 15966 187d 00       		.uleb128 .LVU931
 15967              	.LLST106:
 15968 187e A6080000 		.4byte	.LVL204-.Ltext0
 15969 1882 32090000 		.4byte	.LVL213-.Ltext0
 15970 1886 0100     		.2byte	0x1
 15971 1888 54       		.byte	0x54
 15972 1889 00000000 		.4byte	0
 15973 188d 00000000 		.4byte	0
 15974              	.LLST54:
 15975 1891 BC030000 		.4byte	.LFB14-.Ltext0
ARM GAS  /tmp/ccGXytas.s 			page 407


 15976 1895 C2030000 		.4byte	.LCFI10-.Ltext0
 15977 1899 0200     		.2byte	0x2
 15978 189b 7D       		.byte	0x7d
 15979 189c 00       		.sleb128 0
 15980 189d C2030000 		.4byte	.LCFI10-.Ltext0
 15981 18a1 64040000 		.4byte	.LCFI11-.Ltext0
 15982 18a5 0200     		.2byte	0x2
 15983 18a7 7D       		.byte	0x7d
 15984 18a8 20       		.sleb128 32
 15985 18a9 64040000 		.4byte	.LCFI11-.Ltext0
 15986 18ad 68040000 		.4byte	.LCFI12-.Ltext0
 15987 18b1 0200     		.2byte	0x2
 15988 18b3 7D       		.byte	0x7d
 15989 18b4 00       		.sleb128 0
 15990 18b5 68040000 		.4byte	.LCFI12-.Ltext0
 15991 18b9 80040000 		.4byte	.LFE14-.Ltext0
 15992 18bd 0200     		.2byte	0x2
 15993 18bf 7D       		.byte	0x7d
 15994 18c0 20       		.sleb128 32
 15995 18c1 00000000 		.4byte	0
 15996 18c5 00000000 		.4byte	0
 15997              	.LVUS55:
 15998 18c9 00       		.uleb128 0
 15999 18ca 00       		.uleb128 .LVU397
 16000 18cb 00       		.uleb128 .LVU397
 16001 18cc 00       		.uleb128 .LVU400
 16002              	.LLST55:
 16003 18cd BC030000 		.4byte	.LVL104-.Ltext0
 16004 18d1 CD030000 		.4byte	.LVL107-1-.Ltext0
 16005 18d5 0100     		.2byte	0x1
 16006 18d7 50       		.byte	0x50
 16007 18d8 CD030000 		.4byte	.LVL107-1-.Ltext0
 16008 18dc D4030000 		.4byte	.LVL108-.Ltext0
 16009 18e0 0100     		.2byte	0x1
 16010 18e2 54       		.byte	0x54
 16011 18e3 00000000 		.4byte	0
 16012 18e7 00000000 		.4byte	0
 16013              	.LVUS56:
 16014 18eb 00       		.uleb128 0
 16015 18ec 00       		.uleb128 .LVU393
 16016 18ed 00       		.uleb128 .LVU393
 16017 18ee 00       		.uleb128 .LVU395
 16018 18ef 00       		.uleb128 .LVU395
 16019 18f0 00       		.uleb128 .LVU397
 16020 18f1 00       		.uleb128 .LVU397
 16021 18f2 00       		.uleb128 .LVU429
 16022 18f3 00       		.uleb128 .LVU429
 16023 18f4 00       		.uleb128 .LVU438
 16024 18f5 00       		.uleb128 .LVU438
 16025 18f6 00       		.uleb128 .LVU457
 16026 18f7 00       		.uleb128 .LVU457
 16027 18f8 00       		.uleb128 0
 16028              	.LLST56:
 16029 18f9 BC030000 		.4byte	.LVL104-.Ltext0
 16030 18fd C6030000 		.4byte	.LVL105-.Ltext0
 16031 1901 0100     		.2byte	0x1
 16032 1903 51       		.byte	0x51
ARM GAS  /tmp/ccGXytas.s 			page 408


 16033 1904 C6030000 		.4byte	.LVL105-.Ltext0
 16034 1908 CA030000 		.4byte	.LVL106-.Ltext0
 16035 190c 0A00     		.2byte	0xa
 16036 190e F3       		.byte	0xf3
 16037 190f 03       		.uleb128 0x3
 16038 1910 F5       		.byte	0xf5
 16039 1911 01       		.uleb128 0x1
 16040 1912 25       		.uleb128 0x25
 16041 1913 F7       		.byte	0xf7
 16042 1914 2C       		.uleb128 0x2c
 16043 1915 F7       		.byte	0xf7
 16044 1916 00       		.uleb128 0
 16045 1917 9F       		.byte	0x9f
 16046 1918 CA030000 		.4byte	.LVL106-.Ltext0
 16047 191c CD030000 		.4byte	.LVL107-1-.Ltext0
 16048 1920 0100     		.2byte	0x1
 16049 1922 51       		.byte	0x51
 16050 1923 CD030000 		.4byte	.LVL107-1-.Ltext0
 16051 1927 0A040000 		.4byte	.LVL113-.Ltext0
 16052 192b 0100     		.2byte	0x1
 16053 192d 55       		.byte	0x55
 16054 192e 0A040000 		.4byte	.LVL113-.Ltext0
 16055 1932 21040000 		.4byte	.LVL114-1-.Ltext0
 16056 1936 0300     		.2byte	0x3
 16057 1938 74       		.byte	0x74
 16058 1939 CC00     		.sleb128 76
 16059 193b 21040000 		.4byte	.LVL114-1-.Ltext0
 16060 193f 68040000 		.4byte	.LVL118-.Ltext0
 16061 1943 2300     		.2byte	0x23
 16062 1945 34       		.byte	0x34
 16063 1946 F3       		.byte	0xf3
 16064 1947 03       		.uleb128 0x3
 16065 1948 F5       		.byte	0xf5
 16066 1949 01       		.uleb128 0x1
 16067 194a 25       		.uleb128 0x25
 16068 194b F7       		.byte	0xf7
 16069 194c 2C       		.uleb128 0x2c
 16070 194d F7       		.byte	0xf7
 16071 194e 00       		.uleb128 0
 16072 194f F3       		.byte	0xf3
 16073 1950 03       		.uleb128 0x3
 16074 1951 F5       		.byte	0xf5
 16075 1952 01       		.uleb128 0x1
 16076 1953 25       		.uleb128 0x25
 16077 1954 F7       		.byte	0xf7
 16078 1955 2C       		.uleb128 0x2c
 16079 1956 F7       		.byte	0xf7
 16080 1957 00       		.uleb128 0
 16081 1958 40       		.byte	0x40
 16082 1959 4B       		.byte	0x4b
 16083 195a 24       		.byte	0x24
 16084 195b 22       		.byte	0x22
 16085 195c 0C       		.byte	0xc
 16086 195d 04000080 		.4byte	0x80000004
 16087 1961 2A       		.byte	0x2a
 16088 1962 28       		.byte	0x28
 16089 1963 0100     		.2byte	0x1
ARM GAS  /tmp/ccGXytas.s 			page 409


 16090 1965 16       		.byte	0x16
 16091 1966 13       		.byte	0x13
 16092 1967 9F       		.byte	0x9f
 16093 1968 68040000 		.4byte	.LVL118-.Ltext0
 16094 196c 80040000 		.4byte	.LFE14-.Ltext0
 16095 1970 0100     		.2byte	0x1
 16096 1972 55       		.byte	0x55
 16097 1973 00000000 		.4byte	0
 16098 1977 00000000 		.4byte	0
 16099              	.LVUS57:
 16100 197b 00       		.uleb128 .LVU400
 16101 197c 00       		.uleb128 .LVU456
 16102 197d 00       		.uleb128 .LVU457
 16103 197e 00       		.uleb128 0
 16104              	.LLST57:
 16105 197f D4030000 		.4byte	.LVL108-.Ltext0
 16106 1983 64040000 		.4byte	.LVL117-.Ltext0
 16107 1987 0100     		.2byte	0x1
 16108 1989 54       		.byte	0x54
 16109 198a 68040000 		.4byte	.LVL118-.Ltext0
 16110 198e 80040000 		.4byte	.LFE14-.Ltext0
 16111 1992 0100     		.2byte	0x1
 16112 1994 54       		.byte	0x54
 16113 1995 00000000 		.4byte	0
 16114 1999 00000000 		.4byte	0
 16115              	.LVUS58:
 16116 199d 00       		.uleb128 .LVU403
 16117 199e 00       		.uleb128 .LVU421
 16118 199f 00       		.uleb128 .LVU457
 16119 19a0 00       		.uleb128 0
 16120              	.LLST58:
 16121 19a1 D6030000 		.4byte	.LVL109-.Ltext0
 16122 19a5 FA030000 		.4byte	.LVL112-.Ltext0
 16123 19a9 0100     		.2byte	0x1
 16124 19ab 53       		.byte	0x53
 16125 19ac 68040000 		.4byte	.LVL118-.Ltext0
 16126 19b0 80040000 		.4byte	.LFE14-.Ltext0
 16127 19b4 0100     		.2byte	0x1
 16128 19b6 53       		.byte	0x53
 16129 19b7 00000000 		.4byte	0
 16130 19bb 00000000 		.4byte	0
 16131              	.LVUS59:
 16132 19bf 00       		.uleb128 .LVU416
 16133 19c0 01       		.uleb128 .LVU452
 16134              	.LLST59:
 16135 19c1 F4030000 		.4byte	.LVL111-.Ltext0
 16136 19c5 60040000 		.4byte	.LVL116-.Ltext0
 16137 19c9 0100     		.2byte	0x1
 16138 19cb 59       		.byte	0x59
 16139 19cc 00000000 		.4byte	0
 16140 19d0 00000000 		.4byte	0
 16141              	.LVUS60:
 16142 19d4 04       		.uleb128 .LVU388
 16143 19d5 00       		.uleb128 .LVU413
 16144 19d6 00       		.uleb128 .LVU413
 16145 19d7 01       		.uleb128 .LVU452
 16146 19d8 00       		.uleb128 .LVU457
ARM GAS  /tmp/ccGXytas.s 			page 410


 16147 19d9 00       		.uleb128 0
 16148              	.LLST60:
 16149 19da BC030000 		.4byte	.LVL104-.Ltext0
 16150 19de F0030000 		.4byte	.LVL110-.Ltext0
 16151 19e2 0200     		.2byte	0x2
 16152 19e4 30       		.byte	0x30
 16153 19e5 9F       		.byte	0x9f
 16154 19e6 F0030000 		.4byte	.LVL110-.Ltext0
 16155 19ea 60040000 		.4byte	.LVL116-.Ltext0
 16156 19ee 0100     		.2byte	0x1
 16157 19f0 56       		.byte	0x56
 16158 19f1 68040000 		.4byte	.LVL118-.Ltext0
 16159 19f5 80040000 		.4byte	.LFE14-.Ltext0
 16160 19f9 0200     		.2byte	0x2
 16161 19fb 30       		.byte	0x30
 16162 19fc 9F       		.byte	0x9f
 16163 19fd 00000000 		.4byte	0
 16164 1a01 00000000 		.4byte	0
 16165              	.LVUS48:
 16166 1a05 00       		.uleb128 0
 16167 1a06 00       		.uleb128 .LVU376
 16168              	.LLST48:
 16169 1a07 94030000 		.4byte	.LVL99-.Ltext0
 16170 1a0b AE030000 		.4byte	.LVL101-.Ltext0
 16171 1a0f 0100     		.2byte	0x1
 16172 1a11 50       		.byte	0x50
 16173 1a12 00000000 		.4byte	0
 16174 1a16 00000000 		.4byte	0
 16175              	.LVUS49:
 16176 1a1a 00       		.uleb128 .LVU376
 16177 1a1b 00       		.uleb128 .LVU378
 16178              	.LLST49:
 16179 1a1c AE030000 		.4byte	.LVL101-.Ltext0
 16180 1a20 B0030000 		.4byte	.LVL102-.Ltext0
 16181 1a24 0100     		.2byte	0x1
 16182 1a26 50       		.byte	0x50
 16183 1a27 00000000 		.4byte	0
 16184 1a2b 00000000 		.4byte	0
 16185              	.LVUS50:
 16186 1a2f 00       		.uleb128 .LVU378
 16187 1a30 00       		.uleb128 0
 16188              	.LLST50:
 16189 1a31 B0030000 		.4byte	.LVL102-.Ltext0
 16190 1a35 BC030000 		.4byte	.LFE13-.Ltext0
 16191 1a39 0100     		.2byte	0x1
 16192 1a3b 50       		.byte	0x50
 16193 1a3c 00000000 		.4byte	0
 16194 1a40 00000000 		.4byte	0
 16195              	.LVUS51:
 16196 1a44 01       		.uleb128 .LVU372
 16197 1a45 00       		.uleb128 0
 16198              	.LLST51:
 16199 1a46 A8030000 		.4byte	.LVL100-.Ltext0
 16200 1a4a BC030000 		.4byte	.LFE13-.Ltext0
 16201 1a4e 0100     		.2byte	0x1
 16202 1a50 53       		.byte	0x53
 16203 1a51 00000000 		.4byte	0
ARM GAS  /tmp/ccGXytas.s 			page 411


 16204 1a55 00000000 		.4byte	0
 16205              	.LVUS52:
 16206 1a59 00       		.uleb128 .LVU371
 16207 1a5a 01       		.uleb128 .LVU372
 16208              	.LLST52:
 16209 1a5b A8030000 		.4byte	.LVL100-.Ltext0
 16210 1a5f A8030000 		.4byte	.LVL100-.Ltext0
 16211 1a63 0100     		.2byte	0x1
 16212 1a65 53       		.byte	0x53
 16213 1a66 00000000 		.4byte	0
 16214 1a6a 00000000 		.4byte	0
 16215              	.LVUS53:
 16216 1a6e 01       		.uleb128 .LVU379
 16217 1a6f 00       		.uleb128 .LVU381
 16218              	.LLST53:
 16219 1a70 B0030000 		.4byte	.LVL102-.Ltext0
 16220 1a74 B4030000 		.4byte	.LVL103-.Ltext0
 16221 1a78 0100     		.2byte	0x1
 16222 1a7a 53       		.byte	0x53
 16223 1a7b 00000000 		.4byte	0
 16224 1a7f 00000000 		.4byte	0
 16225              	.LLST44:
 16226 1a83 78030000 		.4byte	.LFB12-.Ltext0
 16227 1a87 7A030000 		.4byte	.LCFI9-.Ltext0
 16228 1a8b 0200     		.2byte	0x2
 16229 1a8d 7D       		.byte	0x7d
 16230 1a8e 00       		.sleb128 0
 16231 1a8f 7A030000 		.4byte	.LCFI9-.Ltext0
 16232 1a93 94030000 		.4byte	.LFE12-.Ltext0
 16233 1a97 0200     		.2byte	0x2
 16234 1a99 7D       		.byte	0x7d
 16235 1a9a 08       		.sleb128 8
 16236 1a9b 00000000 		.4byte	0
 16237 1a9f 00000000 		.4byte	0
 16238              	.LVUS45:
 16239 1aa3 00       		.uleb128 0
 16240 1aa4 00       		.uleb128 .LVU354
 16241 1aa5 00       		.uleb128 .LVU354
 16242 1aa6 00       		.uleb128 .LVU357
 16243              	.LLST45:
 16244 1aa7 78030000 		.4byte	.LVL93-.Ltext0
 16245 1aab 7F030000 		.4byte	.LVL94-1-.Ltext0
 16246 1aaf 0100     		.2byte	0x1
 16247 1ab1 50       		.byte	0x50
 16248 1ab2 7F030000 		.4byte	.LVL94-1-.Ltext0
 16249 1ab6 86030000 		.4byte	.LVL95-.Ltext0
 16250 1aba 0100     		.2byte	0x1
 16251 1abc 54       		.byte	0x54
 16252 1abd 00000000 		.4byte	0
 16253 1ac1 00000000 		.4byte	0
 16254              	.LVUS46:
 16255 1ac5 00       		.uleb128 .LVU357
 16256 1ac6 00       		.uleb128 .LVU359
 16257              	.LLST46:
 16258 1ac7 86030000 		.4byte	.LVL95-.Ltext0
 16259 1acb 88030000 		.4byte	.LVL96-.Ltext0
 16260 1acf 0100     		.2byte	0x1
ARM GAS  /tmp/ccGXytas.s 			page 412


 16261 1ad1 54       		.byte	0x54
 16262 1ad2 00000000 		.4byte	0
 16263 1ad6 00000000 		.4byte	0
 16264              	.LVUS47:
 16265 1ada 00       		.uleb128 .LVU359
 16266 1adb 00       		.uleb128 .LVU362
 16267 1adc 00       		.uleb128 .LVU362
 16268 1add 00       		.uleb128 0
 16269              	.LLST47:
 16270 1ade 88030000 		.4byte	.LVL96-.Ltext0
 16271 1ae2 90030000 		.4byte	.LVL98-.Ltext0
 16272 1ae6 0100     		.2byte	0x1
 16273 1ae8 54       		.byte	0x54
 16274 1ae9 90030000 		.4byte	.LVL98-.Ltext0
 16275 1aed 94030000 		.4byte	.LFE12-.Ltext0
 16276 1af1 0100     		.2byte	0x1
 16277 1af3 50       		.byte	0x50
 16278 1af4 00000000 		.4byte	0
 16279 1af8 00000000 		.4byte	0
 16280              	.LLST96:
 16281 1afc 1C080000 		.4byte	.LFB10-.Ltext0
 16282 1b00 1E080000 		.4byte	.LCFI25-.Ltext0
 16283 1b04 0200     		.2byte	0x2
 16284 1b06 7D       		.byte	0x7d
 16285 1b07 00       		.sleb128 0
 16286 1b08 1E080000 		.4byte	.LCFI25-.Ltext0
 16287 1b0c 4A080000 		.4byte	.LFE10-.Ltext0
 16288 1b10 0200     		.2byte	0x2
 16289 1b12 7D       		.byte	0x7d
 16290 1b13 08       		.sleb128 8
 16291 1b14 00000000 		.4byte	0
 16292 1b18 00000000 		.4byte	0
 16293              	.LVUS97:
 16294 1b1c 00       		.uleb128 0
 16295 1b1d 00       		.uleb128 .LVU819
 16296 1b1e 00       		.uleb128 .LVU819
 16297 1b1f 00       		.uleb128 .LVU824
 16298 1b20 00       		.uleb128 .LVU824
 16299 1b21 00       		.uleb128 .LVU830
 16300 1b22 00       		.uleb128 .LVU830
 16301 1b23 00       		.uleb128 0
 16302              	.LLST97:
 16303 1b24 1C080000 		.4byte	.LVL190-.Ltext0
 16304 1b28 20080000 		.4byte	.LVL191-.Ltext0
 16305 1b2c 0100     		.2byte	0x1
 16306 1b2e 50       		.byte	0x50
 16307 1b2f 20080000 		.4byte	.LVL191-.Ltext0
 16308 1b33 36080000 		.4byte	.LVL192-.Ltext0
 16309 1b37 0A00     		.2byte	0xa
 16310 1b39 F3       		.byte	0xf3
 16311 1b3a 03       		.uleb128 0x3
 16312 1b3b F5       		.byte	0xf5
 16313 1b3c 00       		.uleb128 0
 16314 1b3d 25       		.uleb128 0x25
 16315 1b3e F7       		.byte	0xf7
 16316 1b3f 2C       		.uleb128 0x2c
 16317 1b40 F7       		.byte	0xf7
ARM GAS  /tmp/ccGXytas.s 			page 413


 16318 1b41 00       		.uleb128 0
 16319 1b42 9F       		.byte	0x9f
 16320 1b43 36080000 		.4byte	.LVL192-.Ltext0
 16321 1b47 3F080000 		.4byte	.LVL194-1-.Ltext0
 16322 1b4b 0100     		.2byte	0x1
 16323 1b4d 50       		.byte	0x50
 16324 1b4e 3F080000 		.4byte	.LVL194-1-.Ltext0
 16325 1b52 4A080000 		.4byte	.LFE10-.Ltext0
 16326 1b56 0A00     		.2byte	0xa
 16327 1b58 F3       		.byte	0xf3
 16328 1b59 03       		.uleb128 0x3
 16329 1b5a F5       		.byte	0xf5
 16330 1b5b 00       		.uleb128 0
 16331 1b5c 25       		.uleb128 0x25
 16332 1b5d F7       		.byte	0xf7
 16333 1b5e 2C       		.uleb128 0x2c
 16334 1b5f F7       		.byte	0xf7
 16335 1b60 00       		.uleb128 0
 16336 1b61 9F       		.byte	0x9f
 16337 1b62 00000000 		.4byte	0
 16338 1b66 00000000 		.4byte	0
 16339              	.LVUS98:
 16340 1b6a 02       		.uleb128 .LVU816
 16341 1b6b 00       		.uleb128 .LVU819
 16342 1b6c 00       		.uleb128 .LVU824
 16343 1b6d 00       		.uleb128 .LVU832
 16344 1b6e 00       		.uleb128 .LVU832
 16345 1b6f 00       		.uleb128 0
 16346              	.LLST98:
 16347 1b70 1C080000 		.4byte	.LVL190-.Ltext0
 16348 1b74 20080000 		.4byte	.LVL191-.Ltext0
 16349 1b78 0200     		.2byte	0x2
 16350 1b7a 30       		.byte	0x30
 16351 1b7b 9F       		.byte	0x9f
 16352 1b7c 36080000 		.4byte	.LVL192-.Ltext0
 16353 1b80 44080000 		.4byte	.LVL195-.Ltext0
 16354 1b84 0200     		.2byte	0x2
 16355 1b86 30       		.byte	0x30
 16356 1b87 9F       		.byte	0x9f
 16357 1b88 44080000 		.4byte	.LVL195-.Ltext0
 16358 1b8c 4A080000 		.4byte	.LFE10-.Ltext0
 16359 1b90 0100     		.2byte	0x1
 16360 1b92 50       		.byte	0x50
 16361 1b93 00000000 		.4byte	0
 16362 1b97 00000000 		.4byte	0
 16363              	.LLST89:
 16364 1b9b CC070000 		.4byte	.LFB9-.Ltext0
 16365 1b9f CE070000 		.4byte	.LCFI24-.Ltext0
 16366 1ba3 0200     		.2byte	0x2
 16367 1ba5 7D       		.byte	0x7d
 16368 1ba6 00       		.sleb128 0
 16369 1ba7 CE070000 		.4byte	.LCFI24-.Ltext0
 16370 1bab 1C080000 		.4byte	.LFE9-.Ltext0
 16371 1baf 0200     		.2byte	0x2
 16372 1bb1 7D       		.byte	0x7d
 16373 1bb2 08       		.sleb128 8
 16374 1bb3 00000000 		.4byte	0
ARM GAS  /tmp/ccGXytas.s 			page 414


 16375 1bb7 00000000 		.4byte	0
 16376              	.LVUS90:
 16377 1bbb 00       		.uleb128 0
 16378 1bbc 01       		.uleb128 .LVU795
 16379 1bbd 01       		.uleb128 .LVU795
 16380 1bbe 00       		.uleb128 .LVU806
 16381 1bbf 00       		.uleb128 .LVU806
 16382 1bc0 00       		.uleb128 .LVU812
 16383 1bc1 00       		.uleb128 .LVU812
 16384 1bc2 00       		.uleb128 0
 16385              	.LLST90:
 16386 1bc3 CC070000 		.4byte	.LVL179-.Ltext0
 16387 1bc7 E8070000 		.4byte	.LVL184-.Ltext0
 16388 1bcb 0100     		.2byte	0x1
 16389 1bcd 50       		.byte	0x50
 16390 1bce E8070000 		.4byte	.LVL184-.Ltext0
 16391 1bd2 04080000 		.4byte	.LVL186-.Ltext0
 16392 1bd6 0A00     		.2byte	0xa
 16393 1bd8 F3       		.byte	0xf3
 16394 1bd9 03       		.uleb128 0x3
 16395 1bda F5       		.byte	0xf5
 16396 1bdb 00       		.uleb128 0
 16397 1bdc 25       		.uleb128 0x25
 16398 1bdd F7       		.byte	0xf7
 16399 1bde 2C       		.uleb128 0x2c
 16400 1bdf F7       		.byte	0xf7
 16401 1be0 00       		.uleb128 0
 16402 1be1 9F       		.byte	0x9f
 16403 1be2 04080000 		.4byte	.LVL186-.Ltext0
 16404 1be6 10080000 		.4byte	.LVL188-.Ltext0
 16405 1bea 0100     		.2byte	0x1
 16406 1bec 50       		.byte	0x50
 16407 1bed 10080000 		.4byte	.LVL188-.Ltext0
 16408 1bf1 1C080000 		.4byte	.LFE9-.Ltext0
 16409 1bf5 0A00     		.2byte	0xa
 16410 1bf7 F3       		.byte	0xf3
 16411 1bf8 03       		.uleb128 0x3
 16412 1bf9 F5       		.byte	0xf5
 16413 1bfa 00       		.uleb128 0
 16414 1bfb 25       		.uleb128 0x25
 16415 1bfc F7       		.byte	0xf7
 16416 1bfd 2C       		.uleb128 0x2c
 16417 1bfe F7       		.byte	0xf7
 16418 1bff 00       		.uleb128 0
 16419 1c00 9F       		.byte	0x9f
 16420 1c01 00000000 		.4byte	0
 16421 1c05 00000000 		.4byte	0
 16422              	.LVUS91:
 16423 1c09 00       		.uleb128 0
 16424 1c0a 00       		.uleb128 .LVU787
 16425 1c0b 00       		.uleb128 .LVU787
 16426 1c0c 00       		.uleb128 0
 16427              	.LLST91:
 16428 1c0d CC070000 		.4byte	.LVL179-.Ltext0
 16429 1c11 DE070000 		.4byte	.LVL182-.Ltext0
 16430 1c15 0100     		.2byte	0x1
 16431 1c17 51       		.byte	0x51
ARM GAS  /tmp/ccGXytas.s 			page 415


 16432 1c18 DE070000 		.4byte	.LVL182-.Ltext0
 16433 1c1c 1C080000 		.4byte	.LFE9-.Ltext0
 16434 1c20 0A00     		.2byte	0xa
 16435 1c22 F3       		.byte	0xf3
 16436 1c23 03       		.uleb128 0x3
 16437 1c24 F5       		.byte	0xf5
 16438 1c25 01       		.uleb128 0x1
 16439 1c26 25       		.uleb128 0x25
 16440 1c27 F7       		.byte	0xf7
 16441 1c28 2C       		.uleb128 0x2c
 16442 1c29 F7       		.byte	0xf7
 16443 1c2a 00       		.uleb128 0
 16444 1c2b 9F       		.byte	0x9f
 16445 1c2c 00000000 		.4byte	0
 16446 1c30 00000000 		.4byte	0
 16447              	.LVUS92:
 16448 1c34 00       		.uleb128 .LVU788
 16449 1c35 01       		.uleb128 .LVU795
 16450 1c36 01       		.uleb128 .LVU795
 16451 1c37 00       		.uleb128 .LVU806
 16452 1c38 00       		.uleb128 .LVU806
 16453 1c39 00       		.uleb128 .LVU813
 16454 1c3a 00       		.uleb128 .LVU813
 16455 1c3b 00       		.uleb128 0
 16456              	.LLST92:
 16457 1c3c E0070000 		.4byte	.LVL183-.Ltext0
 16458 1c40 E8070000 		.4byte	.LVL184-.Ltext0
 16459 1c44 0100     		.2byte	0x1
 16460 1c46 53       		.byte	0x53
 16461 1c47 E8070000 		.4byte	.LVL184-.Ltext0
 16462 1c4b 04080000 		.4byte	.LVL186-.Ltext0
 16463 1c4f 0D00     		.2byte	0xd
 16464 1c51 74       		.byte	0x74
 16465 1c52 00       		.sleb128 0
 16466 1c53 F3       		.byte	0xf3
 16467 1c54 03       		.uleb128 0x3
 16468 1c55 F5       		.byte	0xf5
 16469 1c56 01       		.uleb128 0x1
 16470 1c57 25       		.uleb128 0x25
 16471 1c58 F7       		.byte	0xf7
 16472 1c59 2C       		.uleb128 0x2c
 16473 1c5a F7       		.byte	0xf7
 16474 1c5b 00       		.uleb128 0
 16475 1c5c 22       		.byte	0x22
 16476 1c5d 9F       		.byte	0x9f
 16477 1c5e 04080000 		.4byte	.LVL186-.Ltext0
 16478 1c62 13080000 		.4byte	.LVL189-1-.Ltext0
 16479 1c66 0100     		.2byte	0x1
 16480 1c68 53       		.byte	0x53
 16481 1c69 13080000 		.4byte	.LVL189-1-.Ltext0
 16482 1c6d 1C080000 		.4byte	.LFE9-.Ltext0
 16483 1c71 0D00     		.2byte	0xd
 16484 1c73 74       		.byte	0x74
 16485 1c74 00       		.sleb128 0
 16486 1c75 F3       		.byte	0xf3
 16487 1c76 03       		.uleb128 0x3
 16488 1c77 F5       		.byte	0xf5
ARM GAS  /tmp/ccGXytas.s 			page 416


 16489 1c78 01       		.uleb128 0x1
 16490 1c79 25       		.uleb128 0x25
 16491 1c7a F7       		.byte	0xf7
 16492 1c7b 2C       		.uleb128 0x2c
 16493 1c7c F7       		.byte	0xf7
 16494 1c7d 00       		.uleb128 0
 16495 1c7e 22       		.byte	0x22
 16496 1c7f 9F       		.byte	0x9f
 16497 1c80 00000000 		.4byte	0
 16498 1c84 00000000 		.4byte	0
 16499              	.LVUS93:
 16500 1c88 00       		.uleb128 .LVU798
 16501 1c89 00       		.uleb128 .LVU806
 16502              	.LLST93:
 16503 1c8a EC070000 		.4byte	.LVL185-.Ltext0
 16504 1c8e 04080000 		.4byte	.LVL186-.Ltext0
 16505 1c92 0100     		.2byte	0x1
 16506 1c94 50       		.byte	0x50
 16507 1c95 00000000 		.4byte	0
 16508 1c99 00000000 		.4byte	0
 16509              	.LVUS94:
 16510 1c9d 03       		.uleb128 .LVU776
 16511 1c9e 01       		.uleb128 .LVU795
 16512 1c9f 00       		.uleb128 .LVU806
 16513 1ca0 00       		.uleb128 .LVU809
 16514              	.LLST94:
 16515 1ca1 CC070000 		.4byte	.LVL179-.Ltext0
 16516 1ca5 E8070000 		.4byte	.LVL184-.Ltext0
 16517 1ca9 0200     		.2byte	0x2
 16518 1cab 30       		.byte	0x30
 16519 1cac 9F       		.byte	0x9f
 16520 1cad 04080000 		.4byte	.LVL186-.Ltext0
 16521 1cb1 0A080000 		.4byte	.LVL187-.Ltext0
 16522 1cb5 0200     		.2byte	0x2
 16523 1cb7 30       		.byte	0x30
 16524 1cb8 9F       		.byte	0x9f
 16525 1cb9 00000000 		.4byte	0
 16526 1cbd 00000000 		.4byte	0
 16527              	.LVUS95:
 16528 1cc1 00       		.uleb128 .LVU786
 16529 1cc2 01       		.uleb128 .LVU795
 16530 1cc3 00       		.uleb128 .LVU806
 16531 1cc4 00       		.uleb128 .LVU813
 16532              	.LLST95:
 16533 1cc5 D8070000 		.4byte	.LVL181-.Ltext0
 16534 1cc9 E8070000 		.4byte	.LVL184-.Ltext0
 16535 1ccd 0100     		.2byte	0x1
 16536 1ccf 52       		.byte	0x52
 16537 1cd0 04080000 		.4byte	.LVL186-.Ltext0
 16538 1cd4 13080000 		.4byte	.LVL189-1-.Ltext0
 16539 1cd8 0100     		.2byte	0x1
 16540 1cda 52       		.byte	0x52
 16541 1cdb 00000000 		.4byte	0
 16542 1cdf 00000000 		.4byte	0
 16543              	.LLST32:
 16544 1ce3 74020000 		.4byte	.LFB8-.Ltext0
 16545 1ce7 76020000 		.4byte	.LCFI7-.Ltext0
ARM GAS  /tmp/ccGXytas.s 			page 417


 16546 1ceb 0200     		.2byte	0x2
 16547 1ced 7D       		.byte	0x7d
 16548 1cee 00       		.sleb128 0
 16549 1cef 76020000 		.4byte	.LCFI7-.Ltext0
 16550 1cf3 14030000 		.4byte	.LFE8-.Ltext0
 16551 1cf7 0200     		.2byte	0x2
 16552 1cf9 7D       		.byte	0x7d
 16553 1cfa 10       		.sleb128 16
 16554 1cfb 00000000 		.4byte	0
 16555 1cff 00000000 		.4byte	0
 16556              	.LVUS33:
 16557 1d03 00       		.uleb128 0
 16558 1d04 00       		.uleb128 .LVU259
 16559 1d05 00       		.uleb128 .LVU259
 16560 1d06 00       		.uleb128 .LVU262
 16561              	.LLST33:
 16562 1d07 74020000 		.4byte	.LVL70-.Ltext0
 16563 1d0b 7D020000 		.4byte	.LVL71-1-.Ltext0
 16564 1d0f 0100     		.2byte	0x1
 16565 1d11 50       		.byte	0x50
 16566 1d12 7D020000 		.4byte	.LVL71-1-.Ltext0
 16567 1d16 82020000 		.4byte	.LVL72-.Ltext0
 16568 1d1a 0100     		.2byte	0x1
 16569 1d1c 55       		.byte	0x55
 16570 1d1d 00000000 		.4byte	0
 16571 1d21 00000000 		.4byte	0
 16572              	.LVUS34:
 16573 1d25 00       		.uleb128 .LVU262
 16574 1d26 00       		.uleb128 0
 16575              	.LLST34:
 16576 1d27 82020000 		.4byte	.LVL72-.Ltext0
 16577 1d2b 14030000 		.4byte	.LFE8-.Ltext0
 16578 1d2f 0100     		.2byte	0x1
 16579 1d31 55       		.byte	0x55
 16580 1d32 00000000 		.4byte	0
 16581 1d36 00000000 		.4byte	0
 16582              	.LVUS35:
 16583 1d3a 01       		.uleb128 .LVU300
 16584 1d3b 00       		.uleb128 .LVU304
 16585              	.LLST35:
 16586 1d3c FC020000 		.4byte	.LVL78-.Ltext0
 16587 1d40 06030000 		.4byte	.LVL80-.Ltext0
 16588 1d44 0100     		.2byte	0x1
 16589 1d46 55       		.byte	0x55
 16590 1d47 00000000 		.4byte	0
 16591 1d4b 00000000 		.4byte	0
 16592              	.LLST10:
 16593 1d4f E0000000 		.4byte	.LFB5-.Ltext0
 16594 1d53 E4000000 		.4byte	.LCFI6-.Ltext0
 16595 1d57 0200     		.2byte	0x2
 16596 1d59 7D       		.byte	0x7d
 16597 1d5a 00       		.sleb128 0
 16598 1d5b E4000000 		.4byte	.LCFI6-.Ltext0
 16599 1d5f 74020000 		.4byte	.LFE5-.Ltext0
 16600 1d63 0200     		.2byte	0x2
 16601 1d65 7D       		.byte	0x7d
 16602 1d66 28       		.sleb128 40
ARM GAS  /tmp/ccGXytas.s 			page 418


 16603 1d67 00000000 		.4byte	0
 16604 1d6b 00000000 		.4byte	0
 16605              	.LVUS11:
 16606 1d6f 00       		.uleb128 0
 16607 1d70 00       		.uleb128 .LVU94
 16608 1d71 00       		.uleb128 .LVU94
 16609 1d72 00       		.uleb128 .LVU101
 16610 1d73 00       		.uleb128 .LVU101
 16611 1d74 00       		.uleb128 .LVU102
 16612 1d75 00       		.uleb128 .LVU102
 16613 1d76 00       		.uleb128 .LVU181
 16614 1d77 00       		.uleb128 .LVU181
 16615 1d78 00       		.uleb128 .LVU236
 16616 1d79 00       		.uleb128 .LVU236
 16617 1d7a 00       		.uleb128 .LVU238
 16618 1d7b 00       		.uleb128 .LVU238
 16619 1d7c 00       		.uleb128 .LVU248
 16620 1d7d 00       		.uleb128 .LVU248
 16621 1d7e 00       		.uleb128 0
 16622              	.LLST11:
 16623 1d7f E0000000 		.4byte	.LVL23-.Ltext0
 16624 1d83 EA000000 		.4byte	.LVL24-.Ltext0
 16625 1d87 0100     		.2byte	0x1
 16626 1d89 50       		.byte	0x50
 16627 1d8a EA000000 		.4byte	.LVL24-.Ltext0
 16628 1d8e FE000000 		.4byte	.LVL27-.Ltext0
 16629 1d92 0100     		.2byte	0x1
 16630 1d94 57       		.byte	0x57
 16631 1d95 FE000000 		.4byte	.LVL27-.Ltext0
 16632 1d99 02010000 		.4byte	.LVL28-.Ltext0
 16633 1d9d 0A00     		.2byte	0xa
 16634 1d9f F3       		.byte	0xf3
 16635 1da0 03       		.uleb128 0x3
 16636 1da1 F5       		.byte	0xf5
 16637 1da2 00       		.uleb128 0
 16638 1da3 25       		.uleb128 0x25
 16639 1da4 F7       		.byte	0xf7
 16640 1da5 2C       		.uleb128 0x2c
 16641 1da6 F7       		.byte	0xf7
 16642 1da7 00       		.uleb128 0
 16643 1da8 9F       		.byte	0x9f
 16644 1da9 02010000 		.4byte	.LVL28-.Ltext0
 16645 1dad A4010000 		.4byte	.LVL50-.Ltext0
 16646 1db1 0100     		.2byte	0x1
 16647 1db3 57       		.byte	0x57
 16648 1db4 A4010000 		.4byte	.LVL50-.Ltext0
 16649 1db8 48020000 		.4byte	.LVL65-.Ltext0
 16650 1dbc 0A00     		.2byte	0xa
 16651 1dbe F3       		.byte	0xf3
 16652 1dbf 03       		.uleb128 0x3
 16653 1dc0 F5       		.byte	0xf5
 16654 1dc1 00       		.uleb128 0
 16655 1dc2 25       		.uleb128 0x25
 16656 1dc3 F7       		.byte	0xf7
 16657 1dc4 2C       		.uleb128 0x2c
 16658 1dc5 F7       		.byte	0xf7
 16659 1dc6 00       		.uleb128 0
ARM GAS  /tmp/ccGXytas.s 			page 419


 16660 1dc7 9F       		.byte	0x9f
 16661 1dc8 48020000 		.4byte	.LVL65-.Ltext0
 16662 1dcc 4E020000 		.4byte	.LVL66-.Ltext0
 16663 1dd0 0100     		.2byte	0x1
 16664 1dd2 57       		.byte	0x57
 16665 1dd3 4E020000 		.4byte	.LVL66-.Ltext0
 16666 1dd7 64020000 		.4byte	.LVL67-.Ltext0
 16667 1ddb 0A00     		.2byte	0xa
 16668 1ddd F3       		.byte	0xf3
 16669 1dde 03       		.uleb128 0x3
 16670 1ddf F5       		.byte	0xf5
 16671 1de0 00       		.uleb128 0
 16672 1de1 25       		.uleb128 0x25
 16673 1de2 F7       		.byte	0xf7
 16674 1de3 2C       		.uleb128 0x2c
 16675 1de4 F7       		.byte	0xf7
 16676 1de5 00       		.uleb128 0
 16677 1de6 9F       		.byte	0x9f
 16678 1de7 64020000 		.4byte	.LVL67-.Ltext0
 16679 1deb 74020000 		.4byte	.LFE5-.Ltext0
 16680 1def 0100     		.2byte	0x1
 16681 1df1 57       		.byte	0x57
 16682 1df2 00000000 		.4byte	0
 16683 1df6 00000000 		.4byte	0
 16684              	.LVUS12:
 16685 1dfa 00       		.uleb128 0
 16686 1dfb 00       		.uleb128 .LVU97
 16687 1dfc 00       		.uleb128 .LVU97
 16688 1dfd 00       		.uleb128 .LVU101
 16689 1dfe 00       		.uleb128 .LVU101
 16690 1dff 00       		.uleb128 .LVU102
 16691 1e00 00       		.uleb128 .LVU102
 16692 1e01 00       		.uleb128 .LVU128
 16693 1e02 00       		.uleb128 .LVU128
 16694 1e03 00       		.uleb128 .LVU138
 16695 1e04 00       		.uleb128 .LVU138
 16696 1e05 00       		.uleb128 .LVU236
 16697 1e06 00       		.uleb128 .LVU236
 16698 1e07 00       		.uleb128 .LVU238
 16699 1e08 00       		.uleb128 .LVU238
 16700 1e09 00       		.uleb128 .LVU248
 16701 1e0a 00       		.uleb128 .LVU248
 16702 1e0b 00       		.uleb128 0
 16703              	.LLST12:
 16704 1e0c E0000000 		.4byte	.LVL23-.Ltext0
 16705 1e10 F5000000 		.4byte	.LVL25-1-.Ltext0
 16706 1e14 0100     		.2byte	0x1
 16707 1e16 51       		.byte	0x51
 16708 1e17 F5000000 		.4byte	.LVL25-1-.Ltext0
 16709 1e1b FE000000 		.4byte	.LVL27-.Ltext0
 16710 1e1f 0100     		.2byte	0x1
 16711 1e21 55       		.byte	0x55
 16712 1e22 FE000000 		.4byte	.LVL27-.Ltext0
 16713 1e26 02010000 		.4byte	.LVL28-.Ltext0
 16714 1e2a 0A00     		.2byte	0xa
 16715 1e2c F3       		.byte	0xf3
 16716 1e2d 03       		.uleb128 0x3
ARM GAS  /tmp/ccGXytas.s 			page 420


 16717 1e2e F5       		.byte	0xf5
 16718 1e2f 01       		.uleb128 0x1
 16719 1e30 25       		.uleb128 0x25
 16720 1e31 F7       		.byte	0xf7
 16721 1e32 2C       		.uleb128 0x2c
 16722 1e33 F7       		.byte	0xf7
 16723 1e34 00       		.uleb128 0
 16724 1e35 9F       		.byte	0x9f
 16725 1e36 02010000 		.4byte	.LVL28-.Ltext0
 16726 1e3a 36010000 		.4byte	.LVL37-.Ltext0
 16727 1e3e 0100     		.2byte	0x1
 16728 1e40 55       		.byte	0x55
 16729 1e41 36010000 		.4byte	.LVL37-.Ltext0
 16730 1e45 4A010000 		.4byte	.LVL41-.Ltext0
 16731 1e49 0300     		.2byte	0x3
 16732 1e4b 75       		.byte	0x75
 16733 1e4c 71       		.sleb128 -15
 16734 1e4d 9F       		.byte	0x9f
 16735 1e4e 4A010000 		.4byte	.LVL41-.Ltext0
 16736 1e52 48020000 		.4byte	.LVL65-.Ltext0
 16737 1e56 0A00     		.2byte	0xa
 16738 1e58 F3       		.byte	0xf3
 16739 1e59 03       		.uleb128 0x3
 16740 1e5a F5       		.byte	0xf5
 16741 1e5b 01       		.uleb128 0x1
 16742 1e5c 25       		.uleb128 0x25
 16743 1e5d F7       		.byte	0xf7
 16744 1e5e 2C       		.uleb128 0x2c
 16745 1e5f F7       		.byte	0xf7
 16746 1e60 00       		.uleb128 0
 16747 1e61 9F       		.byte	0x9f
 16748 1e62 48020000 		.4byte	.LVL65-.Ltext0
 16749 1e66 4E020000 		.4byte	.LVL66-.Ltext0
 16750 1e6a 0100     		.2byte	0x1
 16751 1e6c 55       		.byte	0x55
 16752 1e6d 4E020000 		.4byte	.LVL66-.Ltext0
 16753 1e71 64020000 		.4byte	.LVL67-.Ltext0
 16754 1e75 0A00     		.2byte	0xa
 16755 1e77 F3       		.byte	0xf3
 16756 1e78 03       		.uleb128 0x3
 16757 1e79 F5       		.byte	0xf5
 16758 1e7a 01       		.uleb128 0x1
 16759 1e7b 25       		.uleb128 0x25
 16760 1e7c F7       		.byte	0xf7
 16761 1e7d 2C       		.uleb128 0x2c
 16762 1e7e F7       		.byte	0xf7
 16763 1e7f 00       		.uleb128 0
 16764 1e80 9F       		.byte	0x9f
 16765 1e81 64020000 		.4byte	.LVL67-.Ltext0
 16766 1e85 74020000 		.4byte	.LFE5-.Ltext0
 16767 1e89 0100     		.2byte	0x1
 16768 1e8b 55       		.byte	0x55
 16769 1e8c 00000000 		.4byte	0
 16770 1e90 00000000 		.4byte	0
 16771              	.LVUS13:
 16772 1e94 00       		.uleb128 0
 16773 1e95 00       		.uleb128 .LVU97
ARM GAS  /tmp/ccGXytas.s 			page 421


 16774 1e96 00       		.uleb128 .LVU97
 16775 1e97 00       		.uleb128 0
 16776              	.LLST13:
 16777 1e98 E0000000 		.4byte	.LVL23-.Ltext0
 16778 1e9c F5000000 		.4byte	.LVL25-1-.Ltext0
 16779 1ea0 0100     		.2byte	0x1
 16780 1ea2 52       		.byte	0x52
 16781 1ea3 F5000000 		.4byte	.LVL25-1-.Ltext0
 16782 1ea7 74020000 		.4byte	.LFE5-.Ltext0
 16783 1eab 0A00     		.2byte	0xa
 16784 1ead F3       		.byte	0xf3
 16785 1eae 03       		.uleb128 0x3
 16786 1eaf F5       		.byte	0xf5
 16787 1eb0 02       		.uleb128 0x2
 16788 1eb1 25       		.uleb128 0x25
 16789 1eb2 F7       		.byte	0xf7
 16790 1eb3 3A       		.uleb128 0x3a
 16791 1eb4 F7       		.byte	0xf7
 16792 1eb5 00       		.uleb128 0
 16793 1eb6 9F       		.byte	0x9f
 16794 1eb7 00000000 		.4byte	0
 16795 1ebb 00000000 		.4byte	0
 16796              	.LVUS14:
 16797 1ebf 00       		.uleb128 0
 16798 1ec0 00       		.uleb128 .LVU97
 16799 1ec1 00       		.uleb128 .LVU97
 16800 1ec2 00       		.uleb128 .LVU101
 16801 1ec3 00       		.uleb128 .LVU101
 16802 1ec4 00       		.uleb128 .LVU102
 16803 1ec5 00       		.uleb128 .LVU102
 16804 1ec6 00       		.uleb128 .LVU191
 16805 1ec7 00       		.uleb128 .LVU191
 16806 1ec8 00       		.uleb128 .LVU236
 16807 1ec9 00       		.uleb128 .LVU236
 16808 1eca 00       		.uleb128 0
 16809              	.LLST14:
 16810 1ecb E0000000 		.4byte	.LVL23-.Ltext0
 16811 1ecf F5000000 		.4byte	.LVL25-1-.Ltext0
 16812 1ed3 0100     		.2byte	0x1
 16813 1ed5 53       		.byte	0x53
 16814 1ed6 F5000000 		.4byte	.LVL25-1-.Ltext0
 16815 1eda FE000000 		.4byte	.LVL27-.Ltext0
 16816 1ede 0100     		.2byte	0x1
 16817 1ee0 58       		.byte	0x58
 16818 1ee1 FE000000 		.4byte	.LVL27-.Ltext0
 16819 1ee5 02010000 		.4byte	.LVL28-.Ltext0
 16820 1ee9 0A00     		.2byte	0xa
 16821 1eeb F3       		.byte	0xf3
 16822 1eec 03       		.uleb128 0x3
 16823 1eed F5       		.byte	0xf5
 16824 1eee 03       		.uleb128 0x3
 16825 1eef 25       		.uleb128 0x25
 16826 1ef0 F7       		.byte	0xf7
 16827 1ef1 2C       		.uleb128 0x2c
 16828 1ef2 F7       		.byte	0xf7
 16829 1ef3 00       		.uleb128 0
 16830 1ef4 9F       		.byte	0x9f
ARM GAS  /tmp/ccGXytas.s 			page 422


 16831 1ef5 02010000 		.4byte	.LVL28-.Ltext0
 16832 1ef9 B8010000 		.4byte	.LVL51-.Ltext0
 16833 1efd 0100     		.2byte	0x1
 16834 1eff 58       		.byte	0x58
 16835 1f00 B8010000 		.4byte	.LVL51-.Ltext0
 16836 1f04 48020000 		.4byte	.LVL65-.Ltext0
 16837 1f08 0A00     		.2byte	0xa
 16838 1f0a F3       		.byte	0xf3
 16839 1f0b 03       		.uleb128 0x3
 16840 1f0c F5       		.byte	0xf5
 16841 1f0d 03       		.uleb128 0x3
 16842 1f0e 25       		.uleb128 0x25
 16843 1f0f F7       		.byte	0xf7
 16844 1f10 2C       		.uleb128 0x2c
 16845 1f11 F7       		.byte	0xf7
 16846 1f12 00       		.uleb128 0
 16847 1f13 9F       		.byte	0x9f
 16848 1f14 48020000 		.4byte	.LVL65-.Ltext0
 16849 1f18 74020000 		.4byte	.LFE5-.Ltext0
 16850 1f1c 0100     		.2byte	0x1
 16851 1f1e 58       		.byte	0x58
 16852 1f1f 00000000 		.4byte	0
 16853 1f23 00000000 		.4byte	0
 16854              	.LVUS15:
 16855 1f27 00       		.uleb128 0
 16856 1f28 00       		.uleb128 .LVU101
 16857 1f29 00       		.uleb128 .LVU102
 16858 1f2a 00       		.uleb128 .LVU230
 16859 1f2b 00       		.uleb128 .LVU236
 16860 1f2c 00       		.uleb128 0
 16861              	.LLST15:
 16862 1f2d E0000000 		.4byte	.LVL23-.Ltext0
 16863 1f31 FE000000 		.4byte	.LVL27-.Ltext0
 16864 1f35 0200     		.2byte	0x2
 16865 1f37 91       		.byte	0x91
 16866 1f38 00       		.sleb128 0
 16867 1f39 02010000 		.4byte	.LVL28-.Ltext0
 16868 1f3d 3C020000 		.4byte	.LVL63-.Ltext0
 16869 1f41 0200     		.2byte	0x2
 16870 1f43 91       		.byte	0x91
 16871 1f44 00       		.sleb128 0
 16872 1f45 48020000 		.4byte	.LVL65-.Ltext0
 16873 1f49 74020000 		.4byte	.LFE5-.Ltext0
 16874 1f4d 0200     		.2byte	0x2
 16875 1f4f 91       		.byte	0x91
 16876 1f50 00       		.sleb128 0
 16877 1f51 00000000 		.4byte	0
 16878 1f55 00000000 		.4byte	0
 16879              	.LVUS16:
 16880 1f59 00       		.uleb128 0
 16881 1f5a 00       		.uleb128 .LVU102
 16882 1f5b 00       		.uleb128 .LVU102
 16883 1f5c 00       		.uleb128 0
 16884              	.LLST16:
 16885 1f5d E0000000 		.4byte	.LVL23-.Ltext0
 16886 1f61 02010000 		.4byte	.LVL28-.Ltext0
 16887 1f65 0200     		.2byte	0x2
ARM GAS  /tmp/ccGXytas.s 			page 423


 16888 1f67 91       		.byte	0x91
 16889 1f68 04       		.sleb128 4
 16890 1f69 02010000 		.4byte	.LVL28-.Ltext0
 16891 1f6d 74020000 		.4byte	.LFE5-.Ltext0
 16892 1f71 0200     		.2byte	0x2
 16893 1f73 91       		.byte	0x91
 16894 1f74 04       		.sleb128 4
 16895 1f75 00000000 		.4byte	0
 16896 1f79 00000000 		.4byte	0
 16897              	.LVUS17:
 16898 1f7d 00       		.uleb128 .LVU105
 16899 1f7e 00       		.uleb128 .LVU118
 16900 1f7f 00       		.uleb128 .LVU118
 16901 1f80 00       		.uleb128 .LVU234
 16902 1f81 00       		.uleb128 .LVU236
 16903 1f82 00       		.uleb128 .LVU248
 16904 1f83 00       		.uleb128 .LVU248
 16905 1f84 00       		.uleb128 .LVU250
 16906 1f85 00       		.uleb128 .LVU250
 16907 1f86 00       		.uleb128 .LVU251
 16908 1f87 00       		.uleb128 .LVU251
 16909 1f88 00       		.uleb128 0
 16910              	.LLST17:
 16911 1f89 08010000 		.4byte	.LVL30-.Ltext0
 16912 1f8d 1A010000 		.4byte	.LVL32-.Ltext0
 16913 1f91 0100     		.2byte	0x1
 16914 1f93 50       		.byte	0x50
 16915 1f94 1A010000 		.4byte	.LVL32-.Ltext0
 16916 1f98 46020000 		.4byte	.LVL64-.Ltext0
 16917 1f9c 0100     		.2byte	0x1
 16918 1f9e 54       		.byte	0x54
 16919 1f9f 48020000 		.4byte	.LVL65-.Ltext0
 16920 1fa3 64020000 		.4byte	.LVL67-.Ltext0
 16921 1fa7 0100     		.2byte	0x1
 16922 1fa9 54       		.byte	0x54
 16923 1faa 64020000 		.4byte	.LVL67-.Ltext0
 16924 1fae 66020000 		.4byte	.LVL68-.Ltext0
 16925 1fb2 0100     		.2byte	0x1
 16926 1fb4 50       		.byte	0x50
 16927 1fb5 66020000 		.4byte	.LVL68-.Ltext0
 16928 1fb9 6A020000 		.4byte	.LVL69-.Ltext0
 16929 1fbd 0100     		.2byte	0x1
 16930 1fbf 54       		.byte	0x54
 16931 1fc0 6A020000 		.4byte	.LVL69-.Ltext0
 16932 1fc4 74020000 		.4byte	.LFE5-.Ltext0
 16933 1fc8 0200     		.2byte	0x2
 16934 1fca 30       		.byte	0x30
 16935 1fcb 9F       		.byte	0x9f
 16936 1fcc 00000000 		.4byte	0
 16937 1fd0 00000000 		.4byte	0
 16938              	.LVUS18:
 16939 1fd4 00       		.uleb128 .LVU234
 16940 1fd5 00       		.uleb128 .LVU236
 16941              	.LLST18:
 16942 1fd6 46020000 		.4byte	.LVL64-.Ltext0
 16943 1fda 48020000 		.4byte	.LVL65-.Ltext0
 16944 1fde 0200     		.2byte	0x2
ARM GAS  /tmp/ccGXytas.s 			page 424


 16945 1fe0 31       		.byte	0x31
 16946 1fe1 9F       		.byte	0x9f
 16947 1fe2 00000000 		.4byte	0
 16948 1fe6 00000000 		.4byte	0
 16949              	.LVUS19:
 16950 1fea 00       		.uleb128 .LVU97
 16951 1feb 00       		.uleb128 .LVU99
 16952 1fec 00       		.uleb128 .LVU99
 16953 1fed 00       		.uleb128 .LVU101
 16954 1fee 00       		.uleb128 .LVU102
 16955 1fef 00       		.uleb128 .LVU104
 16956 1ff0 00       		.uleb128 .LVU104
 16957 1ff1 00       		.uleb128 .LVU145
 16958 1ff2 00       		.uleb128 .LVU236
 16959 1ff3 00       		.uleb128 .LVU238
 16960 1ff4 00       		.uleb128 .LVU248
 16961 1ff5 00       		.uleb128 0
 16962              	.LLST19:
 16963 1ff6 F6000000 		.4byte	.LVL25-.Ltext0
 16964 1ffa FA000000 		.4byte	.LVL26-.Ltext0
 16965 1ffe 0100     		.2byte	0x1
 16966 2000 50       		.byte	0x50
 16967 2001 FA000000 		.4byte	.LVL26-.Ltext0
 16968 2005 FE000000 		.4byte	.LVL27-.Ltext0
 16969 2009 0100     		.2byte	0x1
 16970 200b 5A       		.byte	0x5a
 16971 200c 02010000 		.4byte	.LVL28-.Ltext0
 16972 2010 04010000 		.4byte	.LVL29-.Ltext0
 16973 2014 0100     		.2byte	0x1
 16974 2016 50       		.byte	0x50
 16975 2017 04010000 		.4byte	.LVL29-.Ltext0
 16976 201b 5A010000 		.4byte	.LVL43-.Ltext0
 16977 201f 0100     		.2byte	0x1
 16978 2021 5A       		.byte	0x5a
 16979 2022 48020000 		.4byte	.LVL65-.Ltext0
 16980 2026 4E020000 		.4byte	.LVL66-.Ltext0
 16981 202a 0100     		.2byte	0x1
 16982 202c 5A       		.byte	0x5a
 16983 202d 64020000 		.4byte	.LVL67-.Ltext0
 16984 2031 74020000 		.4byte	.LFE5-.Ltext0
 16985 2035 0100     		.2byte	0x1
 16986 2037 5A       		.byte	0x5a
 16987 2038 00000000 		.4byte	0
 16988 203c 00000000 		.4byte	0
 16989              	.LVUS20:
 16990 2040 04       		.uleb128 .LVU114
 16991 2041 01       		.uleb128 .LVU173
 16992 2042 00       		.uleb128 .LVU236
 16993 2043 00       		.uleb128 .LVU238
 16994              	.LLST20:
 16995 2044 16010000 		.4byte	.LVL31-.Ltext0
 16996 2048 98010000 		.4byte	.LVL48-.Ltext0
 16997 204c 0200     		.2byte	0x2
 16998 204e 30       		.byte	0x30
 16999 204f 9F       		.byte	0x9f
 17000 2050 48020000 		.4byte	.LVL65-.Ltext0
 17001 2054 4E020000 		.4byte	.LVL66-.Ltext0
ARM GAS  /tmp/ccGXytas.s 			page 425


 17002 2058 0200     		.2byte	0x2
 17003 205a 30       		.byte	0x30
 17004 205b 9F       		.byte	0x9f
 17005 205c 00000000 		.4byte	0
 17006 2060 00000000 		.4byte	0
 17007              	.LVUS21:
 17008 2064 03       		.uleb128 .LVU113
 17009 2065 00       		.uleb128 .LVU118
 17010 2066 00       		.uleb128 .LVU118
 17011 2067 01       		.uleb128 .LVU173
 17012 2068 00       		.uleb128 .LVU236
 17013 2069 00       		.uleb128 .LVU238
 17014              	.LLST21:
 17015 206a 16010000 		.4byte	.LVL31-.Ltext0
 17016 206e 1A010000 		.4byte	.LVL32-.Ltext0
 17017 2072 0100     		.2byte	0x1
 17018 2074 50       		.byte	0x50
 17019 2075 1A010000 		.4byte	.LVL32-.Ltext0
 17020 2079 98010000 		.4byte	.LVL48-.Ltext0
 17021 207d 0100     		.2byte	0x1
 17022 207f 54       		.byte	0x54
 17023 2080 48020000 		.4byte	.LVL65-.Ltext0
 17024 2084 4E020000 		.4byte	.LVL66-.Ltext0
 17025 2088 0100     		.2byte	0x1
 17026 208a 54       		.byte	0x54
 17027 208b 00000000 		.4byte	0
 17028 208f 00000000 		.4byte	0
 17029              	.LVUS22:
 17030 2093 03       		.uleb128 .LVU113
 17031 2094 01       		.uleb128 .LVU173
 17032 2095 00       		.uleb128 .LVU236
 17033 2096 00       		.uleb128 .LVU238
 17034              	.LLST22:
 17035 2097 16010000 		.4byte	.LVL31-.Ltext0
 17036 209b 98010000 		.4byte	.LVL48-.Ltext0
 17037 209f 0100     		.2byte	0x1
 17038 20a1 59       		.byte	0x59
 17039 20a2 48020000 		.4byte	.LVL65-.Ltext0
 17040 20a6 4E020000 		.4byte	.LVL66-.Ltext0
 17041 20aa 0100     		.2byte	0x1
 17042 20ac 59       		.byte	0x59
 17043 20ad 00000000 		.4byte	0
 17044 20b1 00000000 		.4byte	0
 17045              	.LVUS23:
 17046 20b5 03       		.uleb128 .LVU113
 17047 20b6 00       		.uleb128 .LVU142
 17048 20b7 00       		.uleb128 .LVU142
 17049 20b8 00       		.uleb128 .LVU154
 17050 20b9 00       		.uleb128 .LVU154
 17051 20ba 01       		.uleb128 .LVU173
 17052 20bb 00       		.uleb128 .LVU236
 17053 20bc 00       		.uleb128 .LVU238
 17054              	.LLST23:
 17055 20bd 16010000 		.4byte	.LVL31-.Ltext0
 17056 20c1 56010000 		.4byte	.LVL42-.Ltext0
 17057 20c5 0200     		.2byte	0x2
 17058 20c7 91       		.byte	0x91
ARM GAS  /tmp/ccGXytas.s 			page 426


 17059 20c8 00       		.sleb128 0
 17060 20c9 56010000 		.4byte	.LVL42-.Ltext0
 17061 20cd 6C010000 		.4byte	.LVL45-.Ltext0
 17062 20d1 0100     		.2byte	0x1
 17063 20d3 55       		.byte	0x55
 17064 20d4 6C010000 		.4byte	.LVL45-.Ltext0
 17065 20d8 98010000 		.4byte	.LVL48-.Ltext0
 17066 20dc 1700     		.2byte	0x17
 17067 20de 34       		.byte	0x34
 17068 20df 91       		.byte	0x91
 17069 20e0 00       		.sleb128 0
 17070 20e1 06       		.byte	0x6
 17071 20e2 91       		.byte	0x91
 17072 20e3 00       		.sleb128 0
 17073 20e4 06       		.byte	0x6
 17074 20e5 40       		.byte	0x40
 17075 20e6 4B       		.byte	0x4b
 17076 20e7 24       		.byte	0x24
 17077 20e8 22       		.byte	0x22
 17078 20e9 0C       		.byte	0xc
 17079 20ea 04000080 		.4byte	0x80000004
 17080 20ee 2A       		.byte	0x2a
 17081 20ef 28       		.byte	0x28
 17082 20f0 0100     		.2byte	0x1
 17083 20f2 16       		.byte	0x16
 17084 20f3 13       		.byte	0x13
 17085 20f4 9F       		.byte	0x9f
 17086 20f5 48020000 		.4byte	.LVL65-.Ltext0
 17087 20f9 4E020000 		.4byte	.LVL66-.Ltext0
 17088 20fd 0200     		.2byte	0x2
 17089 20ff 91       		.byte	0x91
 17090 2100 00       		.sleb128 0
 17091 2101 00000000 		.4byte	0
 17092 2105 00000000 		.4byte	0
 17093              	.LVUS24:
 17094 2109 03       		.uleb128 .LVU113
 17095 210a 01       		.uleb128 .LVU173
 17096 210b 00       		.uleb128 .LVU236
 17097 210c 00       		.uleb128 .LVU238
 17098              	.LLST24:
 17099 210d 16010000 		.4byte	.LVL31-.Ltext0
 17100 2111 98010000 		.4byte	.LVL48-.Ltext0
 17101 2115 0100     		.2byte	0x1
 17102 2117 58       		.byte	0x58
 17103 2118 48020000 		.4byte	.LVL65-.Ltext0
 17104 211c 4E020000 		.4byte	.LVL66-.Ltext0
 17105 2120 0100     		.2byte	0x1
 17106 2122 58       		.byte	0x58
 17107 2123 00000000 		.4byte	0
 17108 2127 00000000 		.4byte	0
 17109              	.LVUS25:
 17110 212b 03       		.uleb128 .LVU113
 17111 212c 01       		.uleb128 .LVU173
 17112 212d 00       		.uleb128 .LVU236
 17113 212e 00       		.uleb128 .LVU238
 17114              	.LLST25:
 17115 212f 16010000 		.4byte	.LVL31-.Ltext0
ARM GAS  /tmp/ccGXytas.s 			page 427


 17116 2133 98010000 		.4byte	.LVL48-.Ltext0
 17117 2137 0A00     		.2byte	0xa
 17118 2139 F3       		.byte	0xf3
 17119 213a 03       		.uleb128 0x3
 17120 213b F5       		.byte	0xf5
 17121 213c 02       		.uleb128 0x2
 17122 213d 25       		.uleb128 0x25
 17123 213e F7       		.byte	0xf7
 17124 213f 2C       		.uleb128 0x2c
 17125 2140 F7       		.byte	0xf7
 17126 2141 00       		.uleb128 0
 17127 2142 9F       		.byte	0x9f
 17128 2143 48020000 		.4byte	.LVL65-.Ltext0
 17129 2147 4E020000 		.4byte	.LVL66-.Ltext0
 17130 214b 0A00     		.2byte	0xa
 17131 214d F3       		.byte	0xf3
 17132 214e 03       		.uleb128 0x3
 17133 214f F5       		.byte	0xf5
 17134 2150 02       		.uleb128 0x2
 17135 2151 25       		.uleb128 0x25
 17136 2152 F7       		.byte	0xf7
 17137 2153 2C       		.uleb128 0x2c
 17138 2154 F7       		.byte	0xf7
 17139 2155 00       		.uleb128 0
 17140 2156 9F       		.byte	0x9f
 17141 2157 00000000 		.4byte	0
 17142 215b 00000000 		.4byte	0
 17143              	.LVUS26:
 17144 215f 03       		.uleb128 .LVU113
 17145 2160 00       		.uleb128 .LVU128
 17146 2161 00       		.uleb128 .LVU128
 17147 2162 00       		.uleb128 .LVU138
 17148 2163 00       		.uleb128 .LVU138
 17149 2164 01       		.uleb128 .LVU173
 17150 2165 00       		.uleb128 .LVU236
 17151 2166 00       		.uleb128 .LVU238
 17152              	.LLST26:
 17153 2167 16010000 		.4byte	.LVL31-.Ltext0
 17154 216b 36010000 		.4byte	.LVL37-.Ltext0
 17155 216f 0100     		.2byte	0x1
 17156 2171 55       		.byte	0x55
 17157 2172 36010000 		.4byte	.LVL37-.Ltext0
 17158 2176 4A010000 		.4byte	.LVL41-.Ltext0
 17159 217a 0300     		.2byte	0x3
 17160 217c 75       		.byte	0x75
 17161 217d 71       		.sleb128 -15
 17162 217e 9F       		.byte	0x9f
 17163 217f 4A010000 		.4byte	.LVL41-.Ltext0
 17164 2183 98010000 		.4byte	.LVL48-.Ltext0
 17165 2187 0A00     		.2byte	0xa
 17166 2189 F3       		.byte	0xf3
 17167 218a 03       		.uleb128 0x3
 17168 218b F5       		.byte	0xf5
 17169 218c 01       		.uleb128 0x1
 17170 218d 25       		.uleb128 0x25
 17171 218e F7       		.byte	0xf7
 17172 218f 2C       		.uleb128 0x2c
ARM GAS  /tmp/ccGXytas.s 			page 428


 17173 2190 F7       		.byte	0xf7
 17174 2191 00       		.uleb128 0
 17175 2192 9F       		.byte	0x9f
 17176 2193 48020000 		.4byte	.LVL65-.Ltext0
 17177 2197 4E020000 		.4byte	.LVL66-.Ltext0
 17178 219b 0100     		.2byte	0x1
 17179 219d 55       		.byte	0x55
 17180 219e 00000000 		.4byte	0
 17181 21a2 00000000 		.4byte	0
 17182              	.LVUS27:
 17183 21a6 03       		.uleb128 .LVU113
 17184 21a7 01       		.uleb128 .LVU173
 17185 21a8 00       		.uleb128 .LVU236
 17186 21a9 00       		.uleb128 .LVU238
 17187              	.LLST27:
 17188 21aa 16010000 		.4byte	.LVL31-.Ltext0
 17189 21ae 98010000 		.4byte	.LVL48-.Ltext0
 17190 21b2 0100     		.2byte	0x1
 17191 21b4 57       		.byte	0x57
 17192 21b5 48020000 		.4byte	.LVL65-.Ltext0
 17193 21b9 4E020000 		.4byte	.LVL66-.Ltext0
 17194 21bd 0100     		.2byte	0x1
 17195 21bf 57       		.byte	0x57
 17196 21c0 00000000 		.4byte	0
 17197 21c4 00000000 		.4byte	0
 17198              	.LVUS28:
 17199 21c8 01       		.uleb128 .LVU120
 17200 21c9 00       		.uleb128 .LVU123
 17201 21ca 00       		.uleb128 .LVU123
 17202 21cb 00       		.uleb128 .LVU124
 17203 21cc 00       		.uleb128 .LVU124
 17204 21cd 00       		.uleb128 .LVU125
 17205 21ce 00       		.uleb128 .LVU125
 17206 21cf 01       		.uleb128 .LVU173
 17207 21d0 00       		.uleb128 .LVU236
 17208 21d1 00       		.uleb128 .LVU238
 17209              	.LLST28:
 17210 21d2 1E010000 		.4byte	.LVL33-.Ltext0
 17211 21d6 22010000 		.4byte	.LVL34-.Ltext0
 17212 21da 0900     		.2byte	0x9
 17213 21dc 74       		.byte	0x74
 17214 21dd 30       		.sleb128 48
 17215 21de 06       		.byte	0x6
 17216 21df 76       		.byte	0x76
 17217 21e0 00       		.sleb128 0
 17218 21e1 22       		.byte	0x22
 17219 21e2 34       		.byte	0x34
 17220 21e3 1C       		.byte	0x1c
 17221 21e4 9F       		.byte	0x9f
 17222 21e5 22010000 		.4byte	.LVL34-.Ltext0
 17223 21e9 24010000 		.4byte	.LVL35-.Ltext0
 17224 21ed 0700     		.2byte	0x7
 17225 21ef 74       		.byte	0x74
 17226 21f0 30       		.sleb128 48
 17227 21f1 06       		.byte	0x6
 17228 21f2 76       		.byte	0x76
 17229 21f3 00       		.sleb128 0
ARM GAS  /tmp/ccGXytas.s 			page 429


 17230 21f4 22       		.byte	0x22
 17231 21f5 9F       		.byte	0x9f
 17232 21f6 24010000 		.4byte	.LVL35-.Ltext0
 17233 21fa 28010000 		.4byte	.LVL36-.Ltext0
 17234 21fe 1200     		.2byte	0x12
 17235 2200 F3       		.byte	0xf3
 17236 2201 03       		.uleb128 0x3
 17237 2202 F5       		.byte	0xf5
 17238 2203 02       		.uleb128 0x2
 17239 2204 25       		.uleb128 0x25
 17240 2205 F7       		.byte	0xf7
 17241 2206 2C       		.uleb128 0x2c
 17242 2207 F7       		.byte	0xf7
 17243 2208 00       		.uleb128 0
 17244 2209 32       		.byte	0x32
 17245 220a 24       		.byte	0x24
 17246 220b 74       		.byte	0x74
 17247 220c 30       		.sleb128 48
 17248 220d 06       		.byte	0x6
 17249 220e 22       		.byte	0x22
 17250 220f 34       		.byte	0x34
 17251 2210 1C       		.byte	0x1c
 17252 2211 9F       		.byte	0x9f
 17253 2212 28010000 		.4byte	.LVL36-.Ltext0
 17254 2216 98010000 		.4byte	.LVL48-.Ltext0
 17255 221a 0100     		.2byte	0x1
 17256 221c 56       		.byte	0x56
 17257 221d 48020000 		.4byte	.LVL65-.Ltext0
 17258 2221 4E020000 		.4byte	.LVL66-.Ltext0
 17259 2225 0100     		.2byte	0x1
 17260 2227 56       		.byte	0x56
 17261 2228 00000000 		.4byte	0
 17262 222c 00000000 		.4byte	0
 17263              	.LVUS29:
 17264 2230 00       		.uleb128 .LVU128
 17265 2231 00       		.uleb128 .LVU130
 17266 2232 00       		.uleb128 .LVU130
 17267 2233 02       		.uleb128 .LVU135
 17268 2234 02       		.uleb128 .LVU135
 17269 2235 00       		.uleb128 .LVU136
 17270              	.LLST29:
 17271 2236 36010000 		.4byte	.LVL37-.Ltext0
 17272 223a 3A010000 		.4byte	.LVL38-.Ltext0
 17273 223e 0800     		.2byte	0x8
 17274 2240 73       		.byte	0x73
 17275 2241 00       		.sleb128 0
 17276 2242 75       		.byte	0x75
 17277 2243 00       		.sleb128 0
 17278 2244 1C       		.byte	0x1c
 17279 2245 23       		.byte	0x23
 17280 2246 10       		.uleb128 0x10
 17281 2247 9F       		.byte	0x9f
 17282 2248 3A010000 		.4byte	.LVL38-.Ltext0
 17283 224c 40010000 		.4byte	.LVL39-.Ltext0
 17284 2250 0800     		.2byte	0x8
 17285 2252 73       		.byte	0x73
 17286 2253 00       		.sleb128 0
ARM GAS  /tmp/ccGXytas.s 			page 430


 17287 2254 75       		.byte	0x75
 17288 2255 00       		.sleb128 0
 17289 2256 1C       		.byte	0x1c
 17290 2257 23       		.byte	0x23
 17291 2258 0F       		.uleb128 0xf
 17292 2259 9F       		.byte	0x9f
 17293 225a 40010000 		.4byte	.LVL39-.Ltext0
 17294 225e 44010000 		.4byte	.LVL40-.Ltext0
 17295 2262 0800     		.2byte	0x8
 17296 2264 73       		.byte	0x73
 17297 2265 00       		.sleb128 0
 17298 2266 75       		.byte	0x75
 17299 2267 00       		.sleb128 0
 17300 2268 1C       		.byte	0x1c
 17301 2269 23       		.byte	0x23
 17302 226a 10       		.uleb128 0x10
 17303 226b 9F       		.byte	0x9f
 17304 226c 00000000 		.4byte	0
 17305 2270 00000000 		.4byte	0
 17306              	.LVUS30:
 17307 2274 03       		.uleb128 .LVU175
 17308 2275 00       		.uleb128 .LVU234
 17309 2276 00       		.uleb128 .LVU238
 17310 2277 00       		.uleb128 .LVU248
 17311              	.LLST30:
 17312 2278 98010000 		.4byte	.LVL48-.Ltext0
 17313 227c 46020000 		.4byte	.LVL64-.Ltext0
 17314 2280 0100     		.2byte	0x1
 17315 2282 54       		.byte	0x54
 17316 2283 4E020000 		.4byte	.LVL66-.Ltext0
 17317 2287 64020000 		.4byte	.LVL67-.Ltext0
 17318 228b 0100     		.2byte	0x1
 17319 228d 54       		.byte	0x54
 17320 228e 00000000 		.4byte	0
 17321 2292 00000000 		.4byte	0
 17322              	.LVUS31:
 17323 2296 00       		.uleb128 .LVU191
 17324 2297 00       		.uleb128 .LVU193
 17325 2298 00       		.uleb128 .LVU193
 17326 2299 01       		.uleb128 .LVU195
 17327 229a 01       		.uleb128 .LVU195
 17328 229b 00       		.uleb128 .LVU197
 17329              	.LLST31:
 17330 229c B8010000 		.4byte	.LVL51-.Ltext0
 17331 22a0 BC010000 		.4byte	.LVL52-.Ltext0
 17332 22a4 0100     		.2byte	0x1
 17333 22a6 56       		.byte	0x56
 17334 22a7 BC010000 		.4byte	.LVL52-.Ltext0
 17335 22ab C0010000 		.4byte	.LVL53-.Ltext0
 17336 22af 0300     		.2byte	0x3
 17337 22b1 76       		.byte	0x76
 17338 22b2 7F       		.sleb128 -1
 17339 22b3 9F       		.byte	0x9f
 17340 22b4 C0010000 		.4byte	.LVL53-.Ltext0
 17341 22b8 CA010000 		.4byte	.LVL54-.Ltext0
 17342 22bc 0100     		.2byte	0x1
 17343 22be 56       		.byte	0x56
ARM GAS  /tmp/ccGXytas.s 			page 431


 17344 22bf 00000000 		.4byte	0
 17345 22c3 00000000 		.4byte	0
 17346              	.LVUS5:
 17347 22c7 00       		.uleb128 .LVU54
 17348 22c8 00       		.uleb128 .LVU56
 17349 22c9 00       		.uleb128 .LVU56
 17350 22ca 00       		.uleb128 .LVU57
 17351 22cb 00       		.uleb128 .LVU57
 17352 22cc 00       		.uleb128 .LVU58
 17353              	.LLST5:
 17354 22cd 7E000000 		.4byte	.LVL11-.Ltext0
 17355 22d1 80000000 		.4byte	.LVL12-.Ltext0
 17356 22d5 0500     		.2byte	0x5
 17357 22d7 72       		.byte	0x72
 17358 22d8 0C       		.sleb128 12
 17359 22d9 06       		.byte	0x6
 17360 22da 23       		.byte	0x23
 17361 22db 0C       		.uleb128 0xc
 17362 22dc 80000000 		.4byte	.LVL12-.Ltext0
 17363 22e0 82000000 		.4byte	.LVL13-.Ltext0
 17364 22e4 0200     		.2byte	0x2
 17365 22e6 72       		.byte	0x72
 17366 22e7 0C       		.sleb128 12
 17367 22e8 82000000 		.4byte	.LVL13-.Ltext0
 17368 22ec 84000000 		.4byte	.LVL14-.Ltext0
 17369 22f0 0100     		.2byte	0x1
 17370 22f2 52       		.byte	0x52
 17371 22f3 00000000 		.4byte	0
 17372 22f7 00000000 		.4byte	0
 17373              	.LLST36:
 17374 22fb 14030000 		.4byte	.LFB11-.Ltext0
 17375 22ff 18030000 		.4byte	.LCFI8-.Ltext0
 17376 2303 0200     		.2byte	0x2
 17377 2305 7D       		.byte	0x7d
 17378 2306 00       		.sleb128 0
 17379 2307 18030000 		.4byte	.LCFI8-.Ltext0
 17380 230b 78030000 		.4byte	.LFE11-.Ltext0
 17381 230f 0200     		.2byte	0x2
 17382 2311 7D       		.byte	0x7d
 17383 2312 18       		.sleb128 24
 17384 2313 00000000 		.4byte	0
 17385 2317 00000000 		.4byte	0
 17386              	.LVUS37:
 17387 231b 00       		.uleb128 0
 17388 231c 00       		.uleb128 .LVU319
 17389 231d 00       		.uleb128 .LVU319
 17390 231e 00       		.uleb128 .LVU342
 17391 231f 00       		.uleb128 .LVU342
 17392 2320 00       		.uleb128 .LVU344
 17393 2321 00       		.uleb128 .LVU344
 17394 2322 00       		.uleb128 0
 17395              	.LLST37:
 17396 2323 14030000 		.4byte	.LVL82-.Ltext0
 17397 2327 25030000 		.4byte	.LVL84-1-.Ltext0
 17398 232b 0100     		.2byte	0x1
 17399 232d 50       		.byte	0x50
 17400 232e 25030000 		.4byte	.LVL84-1-.Ltext0
ARM GAS  /tmp/ccGXytas.s 			page 432


 17401 2332 66030000 		.4byte	.LVL90-.Ltext0
 17402 2336 0100     		.2byte	0x1
 17403 2338 55       		.byte	0x55
 17404 2339 66030000 		.4byte	.LVL90-.Ltext0
 17405 233d 68030000 		.4byte	.LVL91-.Ltext0
 17406 2341 0100     		.2byte	0x1
 17407 2343 50       		.byte	0x50
 17408 2344 68030000 		.4byte	.LVL91-.Ltext0
 17409 2348 78030000 		.4byte	.LFE11-.Ltext0
 17410 234c 0100     		.2byte	0x1
 17411 234e 55       		.byte	0x55
 17412 234f 00000000 		.4byte	0
 17413 2353 00000000 		.4byte	0
 17414              	.LVUS38:
 17415 2357 00       		.uleb128 .LVU336
 17416 2358 00       		.uleb128 .LVU339
 17417              	.LLST38:
 17418 2359 52030000 		.4byte	.LVL88-.Ltext0
 17419 235d 56030000 		.4byte	.LVL89-.Ltext0
 17420 2361 0100     		.2byte	0x1
 17421 2363 50       		.byte	0x50
 17422 2364 00000000 		.4byte	0
 17423 2368 00000000 		.4byte	0
 17424              	.LVUS39:
 17425 236c 04       		.uleb128 .LVU310
 17426 236d 00       		.uleb128 .LVU319
 17427 236e 00       		.uleb128 .LVU319
 17428 236f 00       		.uleb128 .LVU342
 17429 2370 00       		.uleb128 .LVU342
 17430 2371 00       		.uleb128 .LVU344
 17431 2372 00       		.uleb128 .LVU344
 17432 2373 00       		.uleb128 0
 17433              	.LLST39:
 17434 2374 14030000 		.4byte	.LVL82-.Ltext0
 17435 2378 25030000 		.4byte	.LVL84-1-.Ltext0
 17436 237c 0100     		.2byte	0x1
 17437 237e 50       		.byte	0x50
 17438 237f 25030000 		.4byte	.LVL84-1-.Ltext0
 17439 2383 66030000 		.4byte	.LVL90-.Ltext0
 17440 2387 0100     		.2byte	0x1
 17441 2389 55       		.byte	0x55
 17442 238a 66030000 		.4byte	.LVL90-.Ltext0
 17443 238e 68030000 		.4byte	.LVL91-.Ltext0
 17444 2392 0100     		.2byte	0x1
 17445 2394 50       		.byte	0x50
 17446 2395 68030000 		.4byte	.LVL91-.Ltext0
 17447 2399 78030000 		.4byte	.LFE11-.Ltext0
 17448 239d 0100     		.2byte	0x1
 17449 239f 55       		.byte	0x55
 17450 23a0 00000000 		.4byte	0
 17451 23a4 00000000 		.4byte	0
 17452              	.LVUS40:
 17453 23a8 00       		.uleb128 .LVU317
 17454 23a9 00       		.uleb128 .LVU319
 17455 23aa 00       		.uleb128 .LVU319
 17456 23ab 00       		.uleb128 .LVU336
 17457 23ac 00       		.uleb128 .LVU339
ARM GAS  /tmp/ccGXytas.s 			page 433


 17458 23ad 00       		.uleb128 .LVU342
 17459 23ae 00       		.uleb128 .LVU345
 17460 23af 00       		.uleb128 0
 17461              	.LLST40:
 17462 23b0 22030000 		.4byte	.LVL83-.Ltext0
 17463 23b4 25030000 		.4byte	.LVL84-1-.Ltext0
 17464 23b8 0100     		.2byte	0x1
 17465 23ba 50       		.byte	0x50
 17466 23bb 25030000 		.4byte	.LVL84-1-.Ltext0
 17467 23bf 52030000 		.4byte	.LVL88-.Ltext0
 17468 23c3 0100     		.2byte	0x1
 17469 23c5 55       		.byte	0x55
 17470 23c6 56030000 		.4byte	.LVL89-.Ltext0
 17471 23ca 66030000 		.4byte	.LVL90-.Ltext0
 17472 23ce 0100     		.2byte	0x1
 17473 23d0 55       		.byte	0x55
 17474 23d1 6A030000 		.4byte	.LVL92-.Ltext0
 17475 23d5 78030000 		.4byte	.LFE11-.Ltext0
 17476 23d9 0100     		.2byte	0x1
 17477 23db 55       		.byte	0x55
 17478 23dc 00000000 		.4byte	0
 17479 23e0 00000000 		.4byte	0
 17480              	.LVUS41:
 17481 23e4 00       		.uleb128 .LVU322
 17482 23e5 00       		.uleb128 .LVU336
 17483 23e6 00       		.uleb128 .LVU339
 17484 23e7 00       		.uleb128 .LVU342
 17485 23e8 00       		.uleb128 .LVU345
 17486 23e9 00       		.uleb128 0
 17487              	.LLST41:
 17488 23ea 2C030000 		.4byte	.LVL85-.Ltext0
 17489 23ee 52030000 		.4byte	.LVL88-.Ltext0
 17490 23f2 0100     		.2byte	0x1
 17491 23f4 56       		.byte	0x56
 17492 23f5 56030000 		.4byte	.LVL89-.Ltext0
 17493 23f9 66030000 		.4byte	.LVL90-.Ltext0
 17494 23fd 0100     		.2byte	0x1
 17495 23ff 56       		.byte	0x56
 17496 2400 6A030000 		.4byte	.LVL92-.Ltext0
 17497 2404 78030000 		.4byte	.LFE11-.Ltext0
 17498 2408 0100     		.2byte	0x1
 17499 240a 56       		.byte	0x56
 17500 240b 00000000 		.4byte	0
 17501 240f 00000000 		.4byte	0
 17502              	.LVUS42:
 17503 2413 01       		.uleb128 .LVU323
 17504 2414 00       		.uleb128 .LVU336
 17505 2415 00       		.uleb128 .LVU339
 17506 2416 00       		.uleb128 .LVU342
 17507 2417 00       		.uleb128 .LVU345
 17508 2418 00       		.uleb128 0
 17509              	.LLST42:
 17510 2419 2C030000 		.4byte	.LVL85-.Ltext0
 17511 241d 52030000 		.4byte	.LVL88-.Ltext0
 17512 2421 0100     		.2byte	0x1
 17513 2423 58       		.byte	0x58
 17514 2424 56030000 		.4byte	.LVL89-.Ltext0
ARM GAS  /tmp/ccGXytas.s 			page 434


 17515 2428 66030000 		.4byte	.LVL90-.Ltext0
 17516 242c 0100     		.2byte	0x1
 17517 242e 58       		.byte	0x58
 17518 242f 6A030000 		.4byte	.LVL92-.Ltext0
 17519 2433 78030000 		.4byte	.LFE11-.Ltext0
 17520 2437 0100     		.2byte	0x1
 17521 2439 58       		.byte	0x58
 17522 243a 00000000 		.4byte	0
 17523 243e 00000000 		.4byte	0
 17524              	.LVUS43:
 17525 2442 00       		.uleb128 .LVU325
 17526 2443 00       		.uleb128 .LVU336
 17527 2444 00       		.uleb128 .LVU339
 17528 2445 00       		.uleb128 .LVU342
 17529 2446 00       		.uleb128 .LVU345
 17530 2447 00       		.uleb128 0
 17531              	.LLST43:
 17532 2448 2E030000 		.4byte	.LVL86-.Ltext0
 17533 244c 52030000 		.4byte	.LVL88-.Ltext0
 17534 2450 0100     		.2byte	0x1
 17535 2452 57       		.byte	0x57
 17536 2453 56030000 		.4byte	.LVL89-.Ltext0
 17537 2457 66030000 		.4byte	.LVL90-.Ltext0
 17538 245b 0100     		.2byte	0x1
 17539 245d 57       		.byte	0x57
 17540 245e 6A030000 		.4byte	.LVL92-.Ltext0
 17541 2462 78030000 		.4byte	.LFE11-.Ltext0
 17542 2466 0100     		.2byte	0x1
 17543 2468 57       		.byte	0x57
 17544 2469 00000000 		.4byte	0
 17545 246d 00000000 		.4byte	0
 17546              	.LVUS76:
 17547 2471 00       		.uleb128 .LVU609
 17548 2472 00       		.uleb128 0
 17549              	.LLST76:
 17550 2473 10060000 		.4byte	.LVL140-.Ltext0
 17551 2477 18060000 		.4byte	.LFE23-.Ltext0
 17552 247b 0100     		.2byte	0x1
 17553 247d 50       		.byte	0x50
 17554 247e 00000000 		.4byte	0
 17555 2482 00000000 		.4byte	0
 17556              	.LLST99:
 17557 2486 4A080000 		.4byte	.LFB29-.Ltext0
 17558 248a 4E080000 		.4byte	.LCFI26-.Ltext0
 17559 248e 0200     		.2byte	0x2
 17560 2490 7D       		.byte	0x7d
 17561 2491 00       		.sleb128 0
 17562 2492 4E080000 		.4byte	.LCFI26-.Ltext0
 17563 2496 98080000 		.4byte	.LFE29-.Ltext0
 17564 249a 0200     		.2byte	0x2
 17565 249c 7D       		.byte	0x7d
 17566 249d 0C       		.sleb128 12
 17567 249e 00000000 		.4byte	0
 17568 24a2 00000000 		.4byte	0
 17569              	.LVUS100:
 17570 24a6 00       		.uleb128 .LVU860
 17571 24a7 00       		.uleb128 .LVU864
ARM GAS  /tmp/ccGXytas.s 			page 435


 17572              	.LLST100:
 17573 24a8 6E080000 		.4byte	.LVL199-.Ltext0
 17574 24ac 80080000 		.4byte	.LVL200-.Ltext0
 17575 24b0 0100     		.2byte	0x1
 17576 24b2 53       		.byte	0x53
 17577 24b3 00000000 		.4byte	0
 17578 24b7 00000000 		.4byte	0
 17579              	.LVUS101:
 17580 24bb 00       		.uleb128 .LVU851
 17581 24bc 00       		.uleb128 .LVU854
 17582              	.LLST101:
 17583 24bd 62080000 		.4byte	.LVL196-.Ltext0
 17584 24c1 66080000 		.4byte	.LVL197-.Ltext0
 17585 24c5 0100     		.2byte	0x1
 17586 24c7 53       		.byte	0x53
 17587 24c8 00000000 		.4byte	0
 17588 24cc 00000000 		.4byte	0
 17589              	.LVUS102:
 17590 24d0 00       		.uleb128 .LVU857
 17591 24d1 01       		.uleb128 .LVU858
 17592              	.LLST102:
 17593 24d2 6A080000 		.4byte	.LVL198-.Ltext0
 17594 24d6 6A080000 		.4byte	.LVL198-.Ltext0
 17595 24da 0100     		.2byte	0x1
 17596 24dc 53       		.byte	0x53
 17597 24dd 00000000 		.4byte	0
 17598 24e1 00000000 		.4byte	0
 17599              	.LVUS103:
 17600 24e5 02       		.uleb128 .LVU862
 17601 24e6 00       		.uleb128 .LVU864
 17602              	.LLST103:
 17603 24e7 6E080000 		.4byte	.LVL199-.Ltext0
 17604 24eb 80080000 		.4byte	.LVL200-.Ltext0
 17605 24ef 0B00     		.2byte	0xb
 17606 24f1 73       		.byte	0x73
 17607 24f2 00       		.sleb128 0
 17608 24f3 44       		.byte	0x44
 17609 24f4 1E       		.byte	0x1e
 17610 24f5 03       		.byte	0x3
 17611 24f6 48000000 		.4byte	pxReadyTasksLists
 17612 24fa 22       		.byte	0x22
 17613 24fb 9F       		.byte	0x9f
 17614 24fc 00000000 		.4byte	0
 17615 2500 00000000 		.4byte	0
 17616              	.LLST145:
 17617 2504 700B0000 		.4byte	.LFB45-.Ltext0
 17618 2508 740B0000 		.4byte	.LCFI41-.Ltext0
 17619 250c 0200     		.2byte	0x2
 17620 250e 7D       		.byte	0x7d
 17621 250f 00       		.sleb128 0
 17622 2510 740B0000 		.4byte	.LCFI41-.Ltext0
 17623 2514 D00B0000 		.4byte	.LFE45-.Ltext0
 17624 2518 0200     		.2byte	0x2
 17625 251a 7D       		.byte	0x7d
 17626 251b 28       		.sleb128 40
 17627 251c 00000000 		.4byte	0
 17628 2520 00000000 		.4byte	0
ARM GAS  /tmp/ccGXytas.s 			page 436


 17629              	.LVUS146:
 17630 2524 00       		.uleb128 0
 17631 2525 00       		.uleb128 .LVU1202
 17632 2526 00       		.uleb128 .LVU1202
 17633 2527 00       		.uleb128 0
 17634              	.LLST146:
 17635 2528 700B0000 		.4byte	.LVL284-.Ltext0
 17636 252c 9C0B0000 		.4byte	.LVL286-.Ltext0
 17637 2530 0100     		.2byte	0x1
 17638 2532 50       		.byte	0x50
 17639 2533 9C0B0000 		.4byte	.LVL286-.Ltext0
 17640 2537 D00B0000 		.4byte	.LFE45-.Ltext0
 17641 253b 0100     		.2byte	0x1
 17642 253d 56       		.byte	0x56
 17643 253e 00000000 		.4byte	0
 17644 2542 00000000 		.4byte	0
 17645              	.LVUS147:
 17646 2546 00       		.uleb128 0
 17647 2547 00       		.uleb128 .LVU1202
 17648 2548 00       		.uleb128 .LVU1202
 17649 2549 00       		.uleb128 0
 17650              	.LLST147:
 17651 254a 700B0000 		.4byte	.LVL284-.Ltext0
 17652 254e 9C0B0000 		.4byte	.LVL286-.Ltext0
 17653 2552 0100     		.2byte	0x1
 17654 2554 51       		.byte	0x51
 17655 2555 9C0B0000 		.4byte	.LVL286-.Ltext0
 17656 2559 D00B0000 		.4byte	.LFE45-.Ltext0
 17657 255d 0100     		.2byte	0x1
 17658 255f 54       		.byte	0x54
 17659 2560 00000000 		.4byte	0
 17660 2564 00000000 		.4byte	0
 17661              	.LVUS148:
 17662 2568 00       		.uleb128 0
 17663 2569 00       		.uleb128 .LVU1202
 17664 256a 00       		.uleb128 .LVU1202
 17665 256b 00       		.uleb128 0
 17666              	.LLST148:
 17667 256c 700B0000 		.4byte	.LVL284-.Ltext0
 17668 2570 9C0B0000 		.4byte	.LVL286-.Ltext0
 17669 2574 0100     		.2byte	0x1
 17670 2576 52       		.byte	0x52
 17671 2577 9C0B0000 		.4byte	.LVL286-.Ltext0
 17672 257b D00B0000 		.4byte	.LFE45-.Ltext0
 17673 257f 0100     		.2byte	0x1
 17674 2581 57       		.byte	0x57
 17675 2582 00000000 		.4byte	0
 17676 2586 00000000 		.4byte	0
 17677              	.LVUS149:
 17678 258a 00       		.uleb128 .LVU1193
 17679 258b 00       		.uleb128 .LVU1221
 17680              	.LLST149:
 17681 258c 7E0B0000 		.4byte	.LVL285-.Ltext0
 17682 2590 CA0B0000 		.4byte	.LVL290-.Ltext0
 17683 2594 0100     		.2byte	0x1
 17684 2596 57       		.byte	0x57
 17685 2597 00000000 		.4byte	0
ARM GAS  /tmp/ccGXytas.s 			page 437


 17686 259b 00000000 		.4byte	0
 17687              	.LVUS150:
 17688 259f 00       		.uleb128 .LVU1193
 17689 25a0 00       		.uleb128 .LVU1202
 17690 25a1 00       		.uleb128 .LVU1202
 17691 25a2 00       		.uleb128 .LVU1221
 17692              	.LLST150:
 17693 25a3 7E0B0000 		.4byte	.LVL285-.Ltext0
 17694 25a7 9C0B0000 		.4byte	.LVL286-.Ltext0
 17695 25ab 0100     		.2byte	0x1
 17696 25ad 51       		.byte	0x51
 17697 25ae 9C0B0000 		.4byte	.LVL286-.Ltext0
 17698 25b2 CA0B0000 		.4byte	.LVL290-.Ltext0
 17699 25b6 0100     		.2byte	0x1
 17700 25b8 54       		.byte	0x54
 17701 25b9 00000000 		.4byte	0
 17702 25bd 00000000 		.4byte	0
 17703              	.LVUS151:
 17704 25c1 00       		.uleb128 .LVU1193
 17705 25c2 00       		.uleb128 .LVU1202
 17706 25c3 00       		.uleb128 .LVU1202
 17707 25c4 00       		.uleb128 .LVU1221
 17708              	.LLST151:
 17709 25c5 7E0B0000 		.4byte	.LVL285-.Ltext0
 17710 25c9 9C0B0000 		.4byte	.LVL286-.Ltext0
 17711 25cd 0100     		.2byte	0x1
 17712 25cf 50       		.byte	0x50
 17713 25d0 9C0B0000 		.4byte	.LVL286-.Ltext0
 17714 25d4 CA0B0000 		.4byte	.LVL290-.Ltext0
 17715 25d8 0100     		.2byte	0x1
 17716 25da 56       		.byte	0x56
 17717 25db 00000000 		.4byte	0
 17718 25df 00000000 		.4byte	0
 17719              	.LVUS152:
 17720 25e3 00       		.uleb128 .LVU1216
 17721 25e4 00       		.uleb128 .LVU1221
 17722              	.LLST152:
 17723 25e5 BE0B0000 		.4byte	.LVL288-.Ltext0
 17724 25e9 CA0B0000 		.4byte	.LVL290-.Ltext0
 17725 25ed 0100     		.2byte	0x1
 17726 25ef 59       		.byte	0x59
 17727 25f0 00000000 		.4byte	0
 17728 25f4 00000000 		.4byte	0
 17729              	.LVUS153:
 17730 25f8 00       		.uleb128 .LVU1202
 17731 25f9 00       		.uleb128 .LVU1221
 17732              	.LLST153:
 17733 25fa 9C0B0000 		.4byte	.LVL286-.Ltext0
 17734 25fe CA0B0000 		.4byte	.LVL290-.Ltext0
 17735 2602 0100     		.2byte	0x1
 17736 2604 5A       		.byte	0x5a
 17737 2605 00000000 		.4byte	0
 17738 2609 00000000 		.4byte	0
 17739              	.LVUS154:
 17740 260d 00       		.uleb128 .LVU1202
 17741 260e 00       		.uleb128 .LVU1214
 17742 260f 00       		.uleb128 .LVU1214
ARM GAS  /tmp/ccGXytas.s 			page 438


 17743 2610 01       		.uleb128 .LVU1220
 17744 2611 01       		.uleb128 .LVU1220
 17745 2612 00       		.uleb128 .LVU1221
 17746              	.LLST154:
 17747 2613 9C0B0000 		.4byte	.LVL286-.Ltext0
 17748 2617 B40B0000 		.4byte	.LVL287-.Ltext0
 17749 261b 0100     		.2byte	0x1
 17750 261d 55       		.byte	0x55
 17751 261e B40B0000 		.4byte	.LVL287-.Ltext0
 17752 2622 C60B0000 		.4byte	.LVL289-.Ltext0
 17753 2626 0300     		.2byte	0x3
 17754 2628 75       		.byte	0x75
 17755 2629 7F       		.sleb128 -1
 17756 262a 9F       		.byte	0x9f
 17757 262b C60B0000 		.4byte	.LVL289-.Ltext0
 17758 262f CA0B0000 		.4byte	.LVL290-.Ltext0
 17759 2633 0100     		.2byte	0x1
 17760 2635 55       		.byte	0x55
 17761 2636 00000000 		.4byte	0
 17762 263a 00000000 		.4byte	0
 17763              	.LVUS155:
 17764 263e 02       		.uleb128 .LVU1195
 17765 263f 00       		.uleb128 .LVU1202
 17766 2640 00       		.uleb128 .LVU1202
 17767 2641 00       		.uleb128 .LVU1221
 17768              	.LLST155:
 17769 2642 7E0B0000 		.4byte	.LVL285-.Ltext0
 17770 2646 9C0B0000 		.4byte	.LVL286-.Ltext0
 17771 264a 0100     		.2byte	0x1
 17772 264c 51       		.byte	0x51
 17773 264d 9C0B0000 		.4byte	.LVL286-.Ltext0
 17774 2651 CA0B0000 		.4byte	.LVL290-.Ltext0
 17775 2655 0100     		.2byte	0x1
 17776 2657 54       		.byte	0x54
 17777 2658 00000000 		.4byte	0
 17778 265c 00000000 		.4byte	0
 17779              	.LVUS156:
 17780 2660 04       		.uleb128 .LVU1206
 17781 2661 00       		.uleb128 .LVU1221
 17782              	.LLST156:
 17783 2662 9C0B0000 		.4byte	.LVL286-.Ltext0
 17784 2666 CA0B0000 		.4byte	.LVL290-.Ltext0
 17785 266a 0100     		.2byte	0x1
 17786 266c 54       		.byte	0x54
 17787 266d 00000000 		.4byte	0
 17788 2671 00000000 		.4byte	0
 17789              		.section	.debug_aranges,"",%progbits
 17790 0000 1C000000 		.4byte	0x1c
 17791 0004 0200     		.2byte	0x2
 17792 0006 00000000 		.4byte	.Ldebug_info0
 17793 000a 04       		.byte	0x4
 17794 000b 00       		.byte	0
 17795 000c 0000     		.2byte	0
 17796 000e 0000     		.2byte	0
 17797 0010 00000000 		.4byte	.Ltext0
 17798 0014 4C110000 		.4byte	.Letext0-.Ltext0
 17799 0018 00000000 		.4byte	0
ARM GAS  /tmp/ccGXytas.s 			page 439


 17800 001c 00000000 		.4byte	0
 17801              		.section	.debug_ranges,"",%progbits
 17802              	.Ldebug_ranges0:
 17803 0000 78000000 		.4byte	.LBB34-.Ltext0
 17804 0004 7A000000 		.4byte	.LBE34-.Ltext0
 17805 0008 7C000000 		.4byte	.LBB37-.Ltext0
 17806 000c 8C000000 		.4byte	.LBE37-.Ltext0
 17807 0010 00000000 		.4byte	0
 17808 0014 00000000 		.4byte	0
 17809 0018 96000000 		.4byte	.LBB43-.Ltext0
 17810 001c 9C000000 		.4byte	.LBE43-.Ltext0
 17811 0020 B0000000 		.4byte	.LBB48-.Ltext0
 17812 0024 E0000000 		.4byte	.LBE48-.Ltext0
 17813 0028 00000000 		.4byte	0
 17814 002c 00000000 		.4byte	0
 17815 0030 E4000000 		.4byte	.LBB56-.Ltext0
 17816 0034 E6000000 		.4byte	.LBE56-.Ltext0
 17817 0038 E8000000 		.4byte	.LBB57-.Ltext0
 17818 003c EA000000 		.4byte	.LBE57-.Ltext0
 17819 0040 F2000000 		.4byte	.LBB58-.Ltext0
 17820 0044 FA000000 		.4byte	.LBE58-.Ltext0
 17821 0048 02010000 		.4byte	.LBB59-.Ltext0
 17822 004c 10010000 		.4byte	.LBE59-.Ltext0
 17823 0050 12010000 		.4byte	.LBB64-.Ltext0
 17824 0054 16010000 		.4byte	.LBE64-.Ltext0
 17825 0058 64020000 		.4byte	.LBB73-.Ltext0
 17826 005c 6A020000 		.4byte	.LBE73-.Ltext0
 17827 0060 00000000 		.4byte	0
 17828 0064 00000000 		.4byte	0
 17829 0068 10010000 		.4byte	.LBB60-.Ltext0
 17830 006c 12010000 		.4byte	.LBE60-.Ltext0
 17831 0070 16010000 		.4byte	.LBB65-.Ltext0
 17832 0074 98010000 		.4byte	.LBE65-.Ltext0
 17833 0078 48020000 		.4byte	.LBB71-.Ltext0
 17834 007c 4E020000 		.4byte	.LBE71-.Ltext0
 17835 0080 00000000 		.4byte	0
 17836 0084 00000000 		.4byte	0
 17837 0088 98010000 		.4byte	.LBB66-.Ltext0
 17838 008c 44020000 		.4byte	.LBE66-.Ltext0
 17839 0090 4E020000 		.4byte	.LBB72-.Ltext0
 17840 0094 64020000 		.4byte	.LBE72-.Ltext0
 17841 0098 00000000 		.4byte	0
 17842 009c 00000000 		.4byte	0
 17843 00a0 F6020000 		.4byte	.LBB76-.Ltext0
 17844 00a4 F8020000 		.4byte	.LBE76-.Ltext0
 17845 00a8 FC020000 		.4byte	.LBB79-.Ltext0
 17846 00ac 06030000 		.4byte	.LBE79-.Ltext0
 17847 00b0 00000000 		.4byte	0
 17848 00b4 00000000 		.4byte	0
 17849 00b8 22030000 		.4byte	.LBB82-.Ltext0
 17850 00bc 52030000 		.4byte	.LBE82-.Ltext0
 17851 00c0 56030000 		.4byte	.LBB86-.Ltext0
 17852 00c4 66030000 		.4byte	.LBE86-.Ltext0
 17853 00c8 6A030000 		.4byte	.LBB87-.Ltext0
 17854 00cc 78030000 		.4byte	.LBE87-.Ltext0
 17855 00d0 00000000 		.4byte	0
 17856 00d4 00000000 		.4byte	0
ARM GAS  /tmp/ccGXytas.s 			page 440


 17857 00d8 F8040000 		.4byte	.LBB102-.Ltext0
 17858 00dc F8040000 		.4byte	.LBE102-.Ltext0
 17859 00e0 FE040000 		.4byte	.LBB105-.Ltext0
 17860 00e4 12050000 		.4byte	.LBE105-.Ltext0
 17861 00e8 00000000 		.4byte	0
 17862 00ec 00000000 		.4byte	0
 17863 00f0 4E060000 		.4byte	.LBB114-.Ltext0
 17864 00f4 6E060000 		.4byte	.LBE114-.Ltext0
 17865 00f8 70060000 		.4byte	.LBB116-.Ltext0
 17866 00fc 86060000 		.4byte	.LBE116-.Ltext0
 17867 0100 96060000 		.4byte	.LBB117-.Ltext0
 17868 0104 F6060000 		.4byte	.LBE117-.Ltext0
 17869 0108 00000000 		.4byte	0
 17870 010c 00000000 		.4byte	0
 17871 0110 D2070000 		.4byte	.LBB119-.Ltext0
 17872 0114 E8070000 		.4byte	.LBE119-.Ltext0
 17873 0118 04080000 		.4byte	.LBB120-.Ltext0
 17874 011c 1C080000 		.4byte	.LBE120-.Ltext0
 17875 0120 00000000 		.4byte	0
 17876 0124 00000000 		.4byte	0
 17877 0128 62080000 		.4byte	.LBB130-.Ltext0
 17878 012c 66080000 		.4byte	.LBE130-.Ltext0
 17879 0130 68080000 		.4byte	.LBB134-.Ltext0
 17880 0134 6A080000 		.4byte	.LBE134-.Ltext0
 17881 0138 00000000 		.4byte	0
 17882 013c 00000000 		.4byte	0
 17883 0140 66080000 		.4byte	.LBB133-.Ltext0
 17884 0144 68080000 		.4byte	.LBE133-.Ltext0
 17885 0148 6E080000 		.4byte	.LBB135-.Ltext0
 17886 014c 92080000 		.4byte	.LBE135-.Ltext0
 17887 0150 00000000 		.4byte	0
 17888 0154 00000000 		.4byte	0
 17889 0158 9A0A0000 		.4byte	.LBB136-.Ltext0
 17890 015c C80A0000 		.4byte	.LBE136-.Ltext0
 17891 0160 D00A0000 		.4byte	.LBB137-.Ltext0
 17892 0164 DC0A0000 		.4byte	.LBE137-.Ltext0
 17893 0168 00000000 		.4byte	0
 17894 016c 00000000 		.4byte	0
 17895 0170 340B0000 		.4byte	.LBB140-.Ltext0
 17896 0174 360B0000 		.4byte	.LBE140-.Ltext0
 17897 0178 380B0000 		.4byte	.LBB144-.Ltext0
 17898 017c 420B0000 		.4byte	.LBE144-.Ltext0
 17899 0180 680B0000 		.4byte	.LBB145-.Ltext0
 17900 0184 700B0000 		.4byte	.LBE145-.Ltext0
 17901 0188 00000000 		.4byte	0
 17902 018c 00000000 		.4byte	0
 17903 0190 7E0B0000 		.4byte	.LBB152-.Ltext0
 17904 0194 7E0B0000 		.4byte	.LBE152-.Ltext0
 17905 0198 840B0000 		.4byte	.LBB153-.Ltext0
 17906 019c 9C0B0000 		.4byte	.LBE153-.Ltext0
 17907 01a0 00000000 		.4byte	0
 17908 01a4 00000000 		.4byte	0
 17909 01a8 9C0B0000 		.4byte	.LBB154-.Ltext0
 17910 01ac 9E0B0000 		.4byte	.LBE154-.Ltext0
 17911 01b0 A20B0000 		.4byte	.LBB155-.Ltext0
 17912 01b4 A40B0000 		.4byte	.LBE155-.Ltext0
 17913 01b8 A60B0000 		.4byte	.LBB156-.Ltext0
ARM GAS  /tmp/ccGXytas.s 			page 441


 17914 01bc B00B0000 		.4byte	.LBE156-.Ltext0
 17915 01c0 B40B0000 		.4byte	.LBB157-.Ltext0
 17916 01c4 BE0B0000 		.4byte	.LBE157-.Ltext0
 17917 01c8 00000000 		.4byte	0
 17918 01cc 00000000 		.4byte	0
 17919 01d0 94100000 		.4byte	.LBB162-.Ltext0
 17920 01d4 94100000 		.4byte	.LBE162-.Ltext0
 17921 01d8 9C100000 		.4byte	.LBB165-.Ltext0
 17922 01dc B0100000 		.4byte	.LBE165-.Ltext0
 17923 01e0 00000000 		.4byte	0
 17924 01e4 00000000 		.4byte	0
 17925              		.section	.debug_line,"",%progbits
 17926              	.Ldebug_line0:
 17927 0000 0D1C0000 		.section	.debug_str,"MS",%progbits,1
 17927      03006A01 
 17927      00000201 
 17927      FB0E0D00 
 17927      01010101 
 17928              	.LASF105:
 17929 0000 764C6973 		.ascii	"vListInsert\000"
 17929      74496E73 
 17929      65727400 
 17930              	.LASF44:
 17931 000c 70635461 		.ascii	"pcTaskName\000"
 17931      736B4E61 
 17931      6D6500
 17932              	.LASF30:
 17933 0017 75784E75 		.ascii	"uxNumberOfItems\000"
 17933      6D626572 
 17933      4F664974 
 17933      656D7300 
 17934              	.LASF216:
 17935 0027 75785065 		.ascii	"uxPendedCounts\000"
 17935      6E646564 
 17935      436F756E 
 17935      747300
 17936              	.LASF108:
 17937 0036 76506F72 		.ascii	"vPortExitCritical\000"
 17937      74457869 
 17937      74437269 
 17937      74696361 
 17937      6C00
 17938              	.LASF164:
 17939 0048 7072764C 		.ascii	"prvListTasksWithinSingleList\000"
 17939      69737454 
 17939      61736B73 
 17939      57697468 
 17939      696E5369 
 17940              	.LASF103:
 17941 0065 78506F72 		.ascii	"xPortStartScheduler\000"
 17941      74537461 
 17941      72745363 
 17941      68656475 
 17941      6C657200 
 17942              	.LASF42:
 17943 0079 75785072 		.ascii	"uxPriority\000"
 17943      696F7269 
ARM GAS  /tmp/ccGXytas.s 			page 442


 17943      747900
 17944              	.LASF171:
 17945 0084 7078436F 		.ascii	"pxConstList\000"
 17945      6E73744C 
 17945      69737400 
 17946              	.LASF236:
 17947 0090 70785374 		.ascii	"pxStateList\000"
 17947      6174654C 
 17947      69737400 
 17948              	.LASF54:
 17949 009c 65537573 		.ascii	"eSuspended\000"
 17949      70656E64 
 17949      656400
 17950              	.LASF38:
 17951 00a7 74736B54 		.ascii	"tskTaskControlBlock\000"
 17951      61736B43 
 17951      6F6E7472 
 17951      6F6C426C 
 17951      6F636B00 
 17952              	.LASF150:
 17953 00bb 75784F6E 		.ascii	"uxOnlyOneMutexHeld\000"
 17953      6C794F6E 
 17953      654D7574 
 17953      65784865 
 17953      6C6400
 17954              	.LASF137:
 17955 00ce 756C4269 		.ascii	"ulBitsToClearOnExit\000"
 17955      7473546F 
 17955      436C6561 
 17955      724F6E45 
 17955      78697400 
 17956              	.LASF210:
 17957 00e2 75785461 		.ascii	"uxTaskGetNumberOfTasks\000"
 17957      736B4765 
 17957      744E756D 
 17957      6265724F 
 17957      66546173 
 17958              	.LASF157:
 17959 00f9 78546173 		.ascii	"xTaskGetSchedulerState\000"
 17959      6B476574 
 17959      53636865 
 17959      64756C65 
 17959      72537461 
 17960              	.LASF126:
 17961 0110 70784869 		.ascii	"pxHigherPriorityTaskWoken\000"
 17961      67686572 
 17961      5072696F 
 17961      72697479 
 17961      5461736B 
 17962              	.LASF58:
 17963 012a 654E6F41 		.ascii	"eNoAction\000"
 17963      6374696F 
 17963      6E00
 17964              	.LASF95:
 17965 0134 7578546F 		.ascii	"uxTopReadyPriority\000"
 17965      70526561 
 17965      64795072 
ARM GAS  /tmp/ccGXytas.s 			page 443


 17965      696F7269 
 17965      747900
 17966              	.LASF237:
 17967 0147 70784465 		.ascii	"pxDelayedList\000"
 17967      6C617965 
 17967      644C6973 
 17967      7400
 17968              	.LASF1:
 17969 0155 756E7369 		.ascii	"unsigned int\000"
 17969      676E6564 
 17969      20696E74 
 17969      00
 17970              	.LASF193:
 17971 0162 70784576 		.ascii	"pxEventList\000"
 17971      656E744C 
 17971      69737400 
 17972              	.LASF96:
 17973 016e 78536368 		.ascii	"xSchedulerRunning\000"
 17973      6564756C 
 17973      65725275 
 17973      6E6E696E 
 17973      6700
 17974              	.LASF31:
 17975 0180 7078496E 		.ascii	"pxIndex\000"
 17975      64657800 
 17976              	.LASF19:
 17977 0188 53746163 		.ascii	"StackType_t\000"
 17977      6B547970 
 17977      655F7400 
 17978              	.LASF64:
 17979 0194 7854494D 		.ascii	"xTIME_OUT\000"
 17979      455F4F55 
 17979      5400
 17980              	.LASF91:
 17981 019e 75784465 		.ascii	"uxDeletedTasksWaitingCleanUp\000"
 17981      6C657465 
 17981      64546173 
 17981      6B735761 
 17981      6974696E 
 17982              	.LASF28:
 17983 01bb 784C4953 		.ascii	"xLIST_ITEM\000"
 17983      545F4954 
 17983      454D00
 17984              	.LASF84:
 17985 01c6 70785265 		.ascii	"pxReadyTasksLists\000"
 17985      61647954 
 17985      61736B73 
 17985      4C697374 
 17985      7300
 17986              	.LASF205:
 17987 01d8 70756C54 		.ascii	"pulTotalRunTime\000"
 17987      6F74616C 
 17987      52756E54 
 17987      696D6500 
 17988              	.LASF152:
 17989 01e8 2E2E2F66 		.ascii	"../freertos/tasks.c\000"
 17989      72656572 
ARM GAS  /tmp/ccGXytas.s 			page 444


 17989      746F732F 
 17989      7461736B 
 17989      732E6300 
 17990              	.LASF127:
 17991 01fc 75634F72 		.ascii	"ucOriginalNotifyState\000"
 17991      6967696E 
 17991      616C4E6F 
 17991      74696679 
 17991      53746174 
 17992              	.LASF188:
 17993 0212 76546173 		.ascii	"vTaskSetTimeOutState\000"
 17993      6B536574 
 17993      54696D65 
 17993      4F757453 
 17993      74617465 
 17994              	.LASF129:
 17995 0227 78546173 		.ascii	"xTaskGenericNotifyFromISR\000"
 17995      6B47656E 
 17995      65726963 
 17995      4E6F7469 
 17995      66794672 
 17996              	.LASF254:
 17997 0241 78526567 		.ascii	"xRegions\000"
 17997      696F6E73 
 17997      00
 17998              	.LASF161:
 17999 024a 70756353 		.ascii	"pucStackByte\000"
 17999      7461636B 
 17999      42797465 
 17999      00
 18000              	.LASF264:
 18001 0257 756C4269 		.ascii	"ulBitmap\000"
 18001      746D6170 
 18001      00
 18002              	.LASF181:
 18003 0260 75784861 		.ascii	"uxHandle\000"
 18003      6E646C65 
 18003      00
 18004              	.LASF85:
 18005 0269 7844656C 		.ascii	"xDelayedTaskList1\000"
 18005      61796564 
 18005      5461736B 
 18005      4C697374 
 18005      3100
 18006              	.LASF86:
 18007 027b 7844656C 		.ascii	"xDelayedTaskList2\000"
 18007      61796564 
 18007      5461736B 
 18007      4C697374 
 18007      3200
 18008              	.LASF65:
 18009 028d 784F7665 		.ascii	"xOverflowCount\000"
 18009      72666C6F 
 18009      77436F75 
 18009      6E7400
 18010              	.LASF257:
 18011 029c 76506F72 		.ascii	"vPortSetBASEPRI\000"
ARM GAS  /tmp/ccGXytas.s 			page 445


 18011      74536574 
 18011      42415345 
 18011      50524900 
 18012              	.LASF110:
 18013 02ac 76506F72 		.ascii	"vPortEnterCritical\000"
 18013      74456E74 
 18013      65724372 
 18013      69746963 
 18013      616C00
 18014              	.LASF238:
 18015 02bf 70784F76 		.ascii	"pxOverflowedDelayedList\000"
 18015      6572666C 
 18015      6F776564 
 18015      44656C61 
 18015      7965644C 
 18016              	.LASF75:
 18017 02d7 78546173 		.ascii	"xTaskNumber\000"
 18017      6B4E756D 
 18017      62657200 
 18018              	.LASF45:
 18019 02e3 75785443 		.ascii	"uxTCBNumber\000"
 18019      424E756D 
 18019      62657200 
 18020              	.LASF71:
 18021 02ef 756C5061 		.ascii	"ulParameters\000"
 18021      72616D65 
 18021      74657273 
 18021      00
 18022              	.LASF235:
 18023 02fc 65526574 		.ascii	"eReturn\000"
 18023      75726E00 
 18024              	.LASF222:
 18025 0304 78546173 		.ascii	"xTaskToResume\000"
 18025      6B546F52 
 18025      6573756D 
 18025      6500
 18026              	.LASF143:
 18027 0312 75785265 		.ascii	"uxReturn\000"
 18027      7475726E 
 18027      00
 18028              	.LASF104:
 18029 031b 7854696D 		.ascii	"xTimerCreateTimerTask\000"
 18029      65724372 
 18029      65617465 
 18029      54696D65 
 18029      72546173 
 18030              	.LASF82:
 18031 0331 74736B54 		.ascii	"tskTCB\000"
 18031      434200
 18032              	.LASF133:
 18033 0338 75785361 		.ascii	"uxSavedInterruptStatus\000"
 18033      76656449 
 18033      6E746572 
 18033      72757074 
 18033      53746174 
 18034              	.LASF17:
 18035 034f 75696E74 		.ascii	"uint32_t\000"
ARM GAS  /tmp/ccGXytas.s 			page 446


 18035      33325F74 
 18035      00
 18036              	.LASF50:
 18037 0358 75634E6F 		.ascii	"ucNotifyState\000"
 18037      74696679 
 18037      53746174 
 18037      6500
 18038              	.LASF111:
 18039 0366 75784C69 		.ascii	"uxListRemove\000"
 18039      73745265 
 18039      6D6F7665 
 18039      00
 18040              	.LASF223:
 18041 0373 78596965 		.ascii	"xYieldRequired\000"
 18041      6C645265 
 18041      71756972 
 18041      656400
 18042              	.LASF260:
 18043 0382 756C4F72 		.ascii	"ulOriginalBASEPRI\000"
 18043      6967696E 
 18043      616C4241 
 18043      53455052 
 18043      4900
 18044              	.LASF233:
 18045 0394 75785461 		.ascii	"uxTaskPriorityGet\000"
 18045      736B5072 
 18045      696F7269 
 18045      74794765 
 18045      7400
 18046              	.LASF134:
 18047 03a6 78546173 		.ascii	"xTaskGenericNotify\000"
 18047      6B47656E 
 18047      65726963 
 18047      4E6F7469 
 18047      667900
 18048              	.LASF191:
 18049 03b9 7078556E 		.ascii	"pxUnblockedTCB\000"
 18049      626C6F63 
 18049      6B656454 
 18049      434200
 18050              	.LASF256:
 18051 03c8 75735374 		.ascii	"usStackDepth\000"
 18051      61636B44 
 18051      65707468 
 18051      00
 18052              	.LASF140:
 18053 03d5 78436C65 		.ascii	"xClearCountOnExit\000"
 18053      6172436F 
 18053      756E744F 
 18053      6E457869 
 18053      7400
 18054              	.LASF186:
 18055 03e7 78456C61 		.ascii	"xElapsedTime\000"
 18055      70736564 
 18055      54696D65 
 18055      00
 18056              	.LASF61:
ARM GAS  /tmp/ccGXytas.s 			page 447


 18057 03f4 65536574 		.ascii	"eSetValueWithOverwrite\000"
 18057      56616C75 
 18057      65576974 
 18057      684F7665 
 18057      72777269 
 18058              	.LASF0:
 18059 040b 6C6F6E67 		.ascii	"long long unsigned int\000"
 18059      206C6F6E 
 18059      6720756E 
 18059      7369676E 
 18059      65642069 
 18060              	.LASF211:
 18061 0422 78546173 		.ascii	"xTaskGetTickCountFromISR\000"
 18061      6B476574 
 18061      5469636B 
 18061      436F756E 
 18061      7446726F 
 18062              	.LASF232:
 18063 043b 75785361 		.ascii	"uxSavedInterruptState\000"
 18063      76656449 
 18063      6E746572 
 18063      72757074 
 18063      53746174 
 18064              	.LASF136:
 18065 0451 756C4269 		.ascii	"ulBitsToClearOnEntry\000"
 18065      7473546F 
 18065      436C6561 
 18065      724F6E45 
 18065      6E747279 
 18066              	.LASF151:
 18067 0466 474E5520 		.ascii	"GNU C17 13.2.0 -mcpu=cortex-m3 -mthumb -mfloat-abi="
 18067      43313720 
 18067      31332E32 
 18067      2E30202D 
 18067      6D637075 
 18068 0499 736F6674 		.ascii	"soft -march=armv7-m -g -gdwarf-2 -Os -fomit-frame-p"
 18068      202D6D61 
 18068      7263683D 
 18068      61726D76 
 18068      372D6D20 
 18069 04cc 6F696E74 		.ascii	"ointer\000"
 18069      657200
 18070              	.LASF89:
 18071 04d3 7850656E 		.ascii	"xPendingReadyList\000"
 18071      64696E67 
 18071      52656164 
 18071      794C6973 
 18071      7400
 18072              	.LASF176:
 18073 04e5 70727649 		.ascii	"prvInitialiseTaskLists\000"
 18073      6E697469 
 18073      616C6973 
 18073      65546173 
 18073      6B4C6973 
 18074              	.LASF25:
 18075 04fc 70785072 		.ascii	"pxPrevious\000"
 18075      6576696F 
ARM GAS  /tmp/ccGXytas.s 			page 448


 18075      757300
 18076              	.LASF90:
 18077 0507 78546173 		.ascii	"xTasksWaitingTermination\000"
 18077      6B735761 
 18077      6974696E 
 18077      67546572 
 18077      6D696E61 
 18078              	.LASF10:
 18079 0520 5F5F7569 		.ascii	"__uint16_t\000"
 18079      6E743136 
 18079      5F7400
 18080              	.LASF145:
 18081 052b 76546173 		.ascii	"vTaskPriorityDisinheritAfterTimeout\000"
 18081      6B507269 
 18081      6F726974 
 18081      79446973 
 18081      696E6865 
 18082              	.LASF202:
 18083 054f 70785465 		.ascii	"pxTemp\000"
 18083      6D7000
 18084              	.LASF116:
 18085 0556 7076506F 		.ascii	"pvPortMalloc\000"
 18085      72744D61 
 18085      6C6C6F63 
 18085      00
 18086              	.LASF218:
 18087 0563 76546173 		.ascii	"vTaskSuspendAll\000"
 18087      6B537573 
 18087      70656E64 
 18087      416C6C00 
 18088              	.LASF168:
 18089 0573 70784E65 		.ascii	"pxNextTCB\000"
 18089      78745443 
 18089      4200
 18090              	.LASF153:
 18091 057d 2F686F6D 		.ascii	"/home/me/Codigos/6-Stm32_GCC_FreeRTOS10.2.1/5-PWM_L"
 18091      652F6D65 
 18091      2F436F64 
 18091      69676F73 
 18091      2F362D53 
 18092 05b0 43445F53 		.ascii	"CD_SERIAL\000"
 18092      45524941 
 18092      4C00
 18093              	.LASF200:
 18094 05ba 78546173 		.ascii	"xTaskIncrementTick\000"
 18094      6B496E63 
 18094      72656D65 
 18094      6E745469 
 18094      636B00
 18095              	.LASF63:
 18096 05cd 654E6F74 		.ascii	"eNotifyAction\000"
 18096      69667941 
 18096      6374696F 
 18096      6E00
 18097              	.LASF174:
 18098 05db 78476574 		.ascii	"xGetFreeStackSpace\000"
 18098      46726565 
ARM GAS  /tmp/ccGXytas.s 			page 449


 18098      53746163 
 18098      6B537061 
 18098      636500
 18099              	.LASF7:
 18100 05ee 73697A65 		.ascii	"size_t\000"
 18100      5F7400
 18101              	.LASF74:
 18102 05f5 7848616E 		.ascii	"xHandle\000"
 18102      646C6500 
 18103              	.LASF81:
 18104 05fd 5461736B 		.ascii	"TaskStatus_t\000"
 18104      53746174 
 18104      75735F74 
 18104      00
 18105              	.LASF60:
 18106 060a 65496E63 		.ascii	"eIncrement\000"
 18106      72656D65 
 18106      6E7400
 18107              	.LASF34:
 18108 0615 784D494E 		.ascii	"xMINI_LIST_ITEM\000"
 18108      495F4C49 
 18108      53545F49 
 18108      54454D00 
 18109              	.LASF195:
 18110 0625 78576169 		.ascii	"xWaitIndefinitely\000"
 18110      74496E64 
 18110      6566696E 
 18110      6974656C 
 18110      7900
 18111              	.LASF94:
 18112 0637 78546963 		.ascii	"xTickCount\000"
 18112      6B436F75 
 18112      6E7400
 18113              	.LASF29:
 18114 0642 784C4953 		.ascii	"xLIST\000"
 18114      5400
 18115              	.LASF219:
 18116 0648 76546173 		.ascii	"vTaskEndScheduler\000"
 18116      6B456E64 
 18116      53636865 
 18116      64756C65 
 18116      7200
 18117              	.LASF109:
 18118 065a 764C6973 		.ascii	"vListInsertEnd\000"
 18118      74496E73 
 18118      65727445 
 18118      6E6400
 18119              	.LASF121:
 18120 0669 78436F6E 		.ascii	"xConstTickCount\000"
 18120      73745469 
 18120      636B436F 
 18120      756E7400 
 18121              	.LASF92:
 18122 0679 78537573 		.ascii	"xSuspendedTaskList\000"
 18122      70656E64 
 18122      65645461 
 18122      736B4C69 
ARM GAS  /tmp/ccGXytas.s 			page 450


 18122      737400
 18123              	.LASF251:
 18124 068c 70634E61 		.ascii	"pcName\000"
 18124      6D6500
 18125              	.LASF88:
 18126 0693 70784F76 		.ascii	"pxOverflowDelayedTaskList\000"
 18126      6572666C 
 18126      6F774465 
 18126      6C617965 
 18126      64546173 
 18127              	.LASF128:
 18128 06ad 78546173 		.ascii	"xTaskNotifyStateClear\000"
 18128      6B4E6F74 
 18128      69667953 
 18128      74617465 
 18128      436C6561 
 18129              	.LASF239:
 18130 06c3 76546173 		.ascii	"vTaskDelay\000"
 18130      6B44656C 
 18130      617900
 18131              	.LASF209:
 18132 06ce 70765461 		.ascii	"pvTaskIncrementMutexHeldCount\000"
 18132      736B496E 
 18132      6372656D 
 18132      656E744D 
 18132      75746578 
 18133              	.LASF77:
 18134 06ec 75784375 		.ascii	"uxCurrentPriority\000"
 18134      7272656E 
 18134      74507269 
 18134      6F726974 
 18134      7900
 18135              	.LASF49:
 18136 06fe 756C4E6F 		.ascii	"ulNotifiedValue\000"
 18136      74696669 
 18136      65645661 
 18136      6C756500 
 18137              	.LASF189:
 18138 070e 76546173 		.ascii	"vTaskRemoveFromUnorderedEventList\000"
 18138      6B52656D 
 18138      6F766546 
 18138      726F6D55 
 18138      6E6F7264 
 18139              	.LASF48:
 18140 0730 75784D75 		.ascii	"uxMutexesHeld\000"
 18140      74657865 
 18140      7348656C 
 18140      6400
 18141              	.LASF154:
 18142 073e 78546173 		.ascii	"xTaskPriorityDisinherit\000"
 18142      6B507269 
 18142      6F726974 
 18142      79446973 
 18142      696E6865 
 18143              	.LASF192:
 18144 0756 78546173 		.ascii	"xTaskRemoveFromEventList\000"
 18144      6B52656D 
ARM GAS  /tmp/ccGXytas.s 			page 451


 18144      6F766546 
 18144      726F6D45 
 18144      76656E74 
 18145              	.LASF14:
 18146 076f 63686172 		.ascii	"char\000"
 18146      00
 18147              	.LASF33:
 18148 0774 4C697374 		.ascii	"ListItem_t\000"
 18148      4974656D 
 18148      5F7400
 18149              	.LASF173:
 18150 077f 70785461 		.ascii	"pxTaskStatus\000"
 18150      736B5374 
 18150      61747573 
 18150      00
 18151              	.LASF62:
 18152 078c 65536574 		.ascii	"eSetValueWithoutOverwrite\000"
 18152      56616C75 
 18152      65576974 
 18152      686F7574 
 18152      4F766572 
 18153              	.LASF135:
 18154 07a6 78546173 		.ascii	"xTaskNotifyWait\000"
 18154      6B4E6F74 
 18154      69667957 
 18154      61697400 
 18155              	.LASF21:
 18156 07b6 55426173 		.ascii	"UBaseType_t\000"
 18156      65547970 
 18156      655F7400 
 18157              	.LASF252:
 18158 07c2 756C5374 		.ascii	"ulStackDepth\000"
 18158      61636B44 
 18158      65707468 
 18158      00
 18159              	.LASF244:
 18160 07cf 7853686F 		.ascii	"xShouldDelay\000"
 18160      756C6444 
 18160      656C6179 
 18160      00
 18161              	.LASF178:
 18162 07dc 70727649 		.ascii	"prvIdleTask\000"
 18162      646C6554 
 18162      61736B00 
 18163              	.LASF32:
 18164 07e8 784C6973 		.ascii	"xListEnd\000"
 18164      74456E64 
 18164      00
 18165              	.LASF139:
 18166 07f1 756C5461 		.ascii	"ulTaskNotifyTake\000"
 18166      736B4E6F 
 18166      74696679 
 18166      54616B65 
 18166      00
 18167              	.LASF35:
 18168 0802 4D696E69 		.ascii	"MiniListItem_t\000"
 18168      4C697374 
ARM GAS  /tmp/ccGXytas.s 			page 452


 18168      4974656D 
 18168      5F7400
 18169              	.LASF194:
 18170 0811 76546173 		.ascii	"vTaskPlaceOnEventListRestricted\000"
 18170      6B506C61 
 18170      63654F6E 
 18170      4576656E 
 18170      744C6973 
 18171              	.LASF247:
 18172 0831 70727641 		.ascii	"prvAddNewTaskToReadyList\000"
 18172      64644E65 
 18172      77546173 
 18172      6B546F52 
 18172      65616479 
 18173              	.LASF15:
 18174 084a 75696E74 		.ascii	"uint8_t\000"
 18174      385F7400 
 18175              	.LASF52:
 18176 0852 65526561 		.ascii	"eReady\000"
 18176      647900
 18177              	.LASF234:
 18178 0859 65546173 		.ascii	"eTaskGetState\000"
 18178      6B476574 
 18178      53746174 
 18178      6500
 18179              	.LASF248:
 18180 0867 70784E65 		.ascii	"pxNewTCB\000"
 18180      77544342 
 18180      00
 18181              	.LASF206:
 18182 0870 75785175 		.ascii	"uxQueue\000"
 18182      65756500 
 18183              	.LASF250:
 18184 0878 70785461 		.ascii	"pxTaskCode\000"
 18184      736B436F 
 18184      646500
 18185              	.LASF72:
 18186 0883 4D656D6F 		.ascii	"MemoryRegion_t\000"
 18186      72795265 
 18186      67696F6E 
 18186      5F7400
 18187              	.LASF100:
 18188 0892 784E6578 		.ascii	"xNextTaskUnblockTime\000"
 18188      74546173 
 18188      6B556E62 
 18188      6C6F636B 
 18188      54696D65 
 18189              	.LASF259:
 18190 08a7 756C506F 		.ascii	"ulPortRaiseBASEPRI\000"
 18190      72745261 
 18190      69736542 
 18190      41534550 
 18190      524900
 18191              	.LASF112:
 18192 08ba 7078506F 		.ascii	"pxPortInitialiseStack\000"
 18192      7274496E 
 18192      69746961 
ARM GAS  /tmp/ccGXytas.s 			page 453


 18192      6C697365 
 18192      53746163 
 18193              	.LASF4:
 18194 08d0 6C6F6E67 		.ascii	"long long int\000"
 18194      206C6F6E 
 18194      6720696E 
 18194      7400
 18195              	.LASF55:
 18196 08de 6544656C 		.ascii	"eDeleted\000"
 18196      65746564 
 18196      00
 18197              	.LASF203:
 18198 08e7 75785461 		.ascii	"uxTaskGetSystemState\000"
 18198      736B4765 
 18198      74537973 
 18198      74656D53 
 18198      74617465 
 18199              	.LASF263:
 18200 08fc 7563506F 		.ascii	"ucPortCountLeadingZeros\000"
 18200      7274436F 
 18200      756E744C 
 18200      65616469 
 18200      6E675A65 
 18201              	.LASF261:
 18202 0914 756C4E65 		.ascii	"ulNewBASEPRI\000"
 18202      77424153 
 18202      45505249 
 18202      00
 18203              	.LASF70:
 18204 0921 756C4C65 		.ascii	"ulLengthInBytes\000"
 18204      6E677468 
 18204      496E4279 
 18204      74657300 
 18205              	.LASF20:
 18206 0931 42617365 		.ascii	"BaseType_t\000"
 18206      54797065 
 18206      5F7400
 18207              	.LASF159:
 18208 093c 70727652 		.ascii	"prvResetNextTaskUnblockTime\000"
 18208      65736574 
 18208      4E657874 
 18208      5461736B 
 18208      556E626C 
 18209              	.LASF66:
 18210 0958 7854696D 		.ascii	"xTimeOnEntering\000"
 18210      654F6E45 
 18210      6E746572 
 18210      696E6700 
 18211              	.LASF229:
 18212 0968 75784E65 		.ascii	"uxNewPriority\000"
 18212      77507269 
 18212      6F726974 
 18212      7900
 18213              	.LASF18:
 18214 0976 5461736B 		.ascii	"TaskFunction_t\000"
 18214      46756E63 
 18214      74696F6E 
ARM GAS  /tmp/ccGXytas.s 			page 454


 18214      5F7400
 18215              	.LASF24:
 18216 0985 70784E65 		.ascii	"pxNext\000"
 18216      787400
 18217              	.LASF132:
 18218 098c 70756C50 		.ascii	"pulPreviousNotificationValue\000"
 18218      72657669 
 18218      6F75734E 
 18218      6F746966 
 18218      69636174 
 18219              	.LASF114:
 18220 09a9 6D656D73 		.ascii	"memset\000"
 18220      657400
 18221              	.LASF184:
 18222 09b0 70785469 		.ascii	"pxTimeOut\000"
 18222      6D654F75 
 18222      7400
 18223              	.LASF231:
 18224 09ba 75785461 		.ascii	"uxTaskPriorityGetFromISR\000"
 18224      736B5072 
 18224      696F7269 
 18224      74794765 
 18224      7446726F 
 18225              	.LASF162:
 18226 09d3 756C436F 		.ascii	"ulCount\000"
 18226      756E7400 
 18227              	.LASF67:
 18228 09db 54696D65 		.ascii	"TimeOut_t\000"
 18228      4F75745F 
 18228      7400
 18229              	.LASF187:
 18230 09e5 76546173 		.ascii	"vTaskInternalSetTimeOutState\000"
 18230      6B496E74 
 18230      65726E61 
 18230      6C536574 
 18230      54696D65 
 18231              	.LASF46:
 18232 0a02 75785461 		.ascii	"uxTaskNumber\000"
 18232      736B4E75 
 18232      6D626572 
 18232      00
 18233              	.LASF37:
 18234 0a0f 5461736B 		.ascii	"TaskHandle_t\000"
 18234      48616E64 
 18234      6C655F74 
 18234      00
 18235              	.LASF131:
 18236 0a1c 65416374 		.ascii	"eAction\000"
 18236      696F6E00 
 18237              	.LASF258:
 18238 0a24 756C4E65 		.ascii	"ulNewMaskValue\000"
 18238      774D6173 
 18238      6B56616C 
 18238      756500
 18239              	.LASF170:
 18240 0a33 75785461 		.ascii	"uxTask\000"
 18240      736B00
ARM GAS  /tmp/ccGXytas.s 			page 455


 18241              	.LASF142:
 18242 0a3a 75785461 		.ascii	"uxTaskResetEventItemValue\000"
 18242      736B5265 
 18242      73657445 
 18242      76656E74 
 18242      4974656D 
 18243              	.LASF228:
 18244 0a54 76546173 		.ascii	"vTaskPrioritySet\000"
 18244      6B507269 
 18244      6F726974 
 18244      79536574 
 18244      00
 18245              	.LASF57:
 18246 0a65 65546173 		.ascii	"eTaskState\000"
 18246      6B537461 
 18246      746500
 18247              	.LASF36:
 18248 0a70 4C697374 		.ascii	"List_t\000"
 18248      5F7400
 18249              	.LASF208:
 18250 0a77 78546173 		.ascii	"xTaskToQuery\000"
 18250      6B546F51 
 18250      75657279 
 18250      00
 18251              	.LASF22:
 18252 0a84 5469636B 		.ascii	"TickType_t\000"
 18252      54797065 
 18252      5F7400
 18253              	.LASF125:
 18254 0a8f 78546173 		.ascii	"xTaskToNotify\000"
 18254      6B546F4E 
 18254      6F746966 
 18254      7900
 18255              	.LASF122:
 18256 0a9d 78546173 		.ascii	"xTask\000"
 18256      6B00
 18257              	.LASF59:
 18258 0aa3 65536574 		.ascii	"eSetBits\000"
 18258      42697473 
 18258      00
 18259              	.LASF5:
 18260 0aac 6C6F6E67 		.ascii	"long double\000"
 18260      20646F75 
 18260      626C6500 
 18261              	.LASF68:
 18262 0ab8 784D454D 		.ascii	"xMEMORY_REGION\000"
 18262      4F52595F 
 18262      52454749 
 18262      4F4E00
 18263              	.LASF16:
 18264 0ac7 75696E74 		.ascii	"uint16_t\000"
 18264      31365F74 
 18264      00
 18265              	.LASF245:
 18266 0ad0 76546173 		.ascii	"vTaskDelete\000"
 18266      6B44656C 
 18266      65746500 
ARM GAS  /tmp/ccGXytas.s 			page 456


 18267              	.LASF149:
 18268 0adc 75785072 		.ascii	"uxPriorityToUse\000"
 18268      696F7269 
 18268      7479546F 
 18268      55736500 
 18269              	.LASF198:
 18270 0aec 76546173 		.ascii	"vTaskSwitchContext\000"
 18270      6B537769 
 18270      74636843 
 18270      6F6E7465 
 18270      787400
 18271              	.LASF99:
 18272 0aff 784E756D 		.ascii	"xNumOfOverflows\000"
 18272      4F664F76 
 18272      6572666C 
 18272      6F777300 
 18273              	.LASF27:
 18274 0b0f 7076436F 		.ascii	"pvContainer\000"
 18274      6E746169 
 18274      6E657200 
 18275              	.LASF119:
 18276 0b1b 70784375 		.ascii	"pxCurrentTCB\000"
 18276      7272656E 
 18276      74544342 
 18276      00
 18277              	.LASF197:
 18278 0b28 76546173 		.ascii	"vTaskPlaceOnEventList\000"
 18278      6B506C61 
 18278      63654F6E 
 18278      4576656E 
 18278      744C6973 
 18279              	.LASF147:
 18280 0b3e 75784869 		.ascii	"uxHighestPriorityWaitingTask\000"
 18280      67686573 
 18280      74507269 
 18280      6F726974 
 18280      79576169 
 18281              	.LASF79:
 18282 0b5b 70785374 		.ascii	"pxStackBase\000"
 18282      61636B42 
 18282      61736500 
 18283              	.LASF9:
 18284 0b67 73686F72 		.ascii	"short int\000"
 18284      7420696E 
 18284      7400
 18285              	.LASF76:
 18286 0b71 65437572 		.ascii	"eCurrentState\000"
 18286      72656E74 
 18286      53746174 
 18286      6500
 18287              	.LASF113:
 18288 0b7f 764C6973 		.ascii	"vListInitialiseItem\000"
 18288      74496E69 
 18288      7469616C 
 18288      69736549 
 18288      74656D00 
 18289              	.LASF249:
ARM GAS  /tmp/ccGXytas.s 			page 457


 18290 0b93 70727649 		.ascii	"prvInitialiseNewTask\000"
 18290      6E697469 
 18290      616C6973 
 18290      654E6577 
 18290      5461736B 
 18291              	.LASF179:
 18292 0ba8 70765061 		.ascii	"pvParameters\000"
 18292      72616D65 
 18292      74657273 
 18292      00
 18293              	.LASF23:
 18294 0bb5 78497465 		.ascii	"xItemValue\000"
 18294      6D56616C 
 18294      756500
 18295              	.LASF11:
 18296 0bc0 6C6F6E67 		.ascii	"long int\000"
 18296      20696E74 
 18296      00
 18297              	.LASF73:
 18298 0bc9 78544153 		.ascii	"xTASK_STATUS\000"
 18298      4B5F5354 
 18298      41545553 
 18298      00
 18299              	.LASF214:
 18300 0bd6 78546173 		.ascii	"xTaskResumeAll\000"
 18300      6B526573 
 18300      756D6541 
 18300      6C6C00
 18301              	.LASF144:
 18302 0be5 76546173 		.ascii	"vTaskNotifyGiveFromISR\000"
 18302      6B4E6F74 
 18302      69667947 
 18302      69766546 
 18302      726F6D49 
 18303              	.LASF87:
 18304 0bfc 70784465 		.ascii	"pxDelayedTaskList\000"
 18304      6C617965 
 18304      64546173 
 18304      6B4C6973 
 18304      7400
 18305              	.LASF212:
 18306 0c0e 78546173 		.ascii	"xTaskGetTickCount\000"
 18306      6B476574 
 18306      5469636B 
 18306      436F756E 
 18306      7400
 18307              	.LASF262:
 18308 0c20 76506F72 		.ascii	"vPortRaiseBASEPRI\000"
 18308      74526169 
 18308      73654241 
 18308      53455052 
 18308      4900
 18309              	.LASF225:
 18310 0c32 70727654 		.ascii	"prvTaskIsTaskSuspended\000"
 18310      61736B49 
 18310      73546173 
 18310      6B537573 
ARM GAS  /tmp/ccGXytas.s 			page 458


 18310      70656E64 
 18311              	.LASF180:
 18312 0c49 76546173 		.ascii	"vTaskSetTaskNumber\000"
 18312      6B536574 
 18312      5461736B 
 18312      4E756D62 
 18312      657200
 18313              	.LASF201:
 18314 0c5c 78537769 		.ascii	"xSwitchRequired\000"
 18314      74636852 
 18314      65717569 
 18314      72656400 
 18315              	.LASF146:
 18316 0c6c 70784D75 		.ascii	"pxMutexHolder\000"
 18316      74657848 
 18316      6F6C6465 
 18316      7200
 18317              	.LASF43:
 18318 0c7a 70785374 		.ascii	"pxStack\000"
 18318      61636B00 
 18319              	.LASF172:
 18320 0c82 76546173 		.ascii	"vTaskGetInfo\000"
 18320      6B476574 
 18320      496E666F 
 18320      00
 18321              	.LASF130:
 18322 0c8f 756C5661 		.ascii	"ulValue\000"
 18322      6C756500 
 18323              	.LASF227:
 18324 0c97 78546173 		.ascii	"xTaskToSuspend\000"
 18324      6B546F53 
 18324      75737065 
 18324      6E6400
 18325              	.LASF183:
 18326 0ca6 78546173 		.ascii	"xTaskCheckForTimeOut\000"
 18326      6B436865 
 18326      636B466F 
 18326      7254696D 
 18326      654F7574 
 18327              	.LASF115:
 18328 0cbb 76506F72 		.ascii	"vPortFree\000"
 18328      74467265 
 18328      6500
 18329              	.LASF242:
 18330 0cc5 70785072 		.ascii	"pxPreviousWakeTime\000"
 18330      6576696F 
 18330      75735761 
 18330      6B655469 
 18330      6D6500
 18331              	.LASF8:
 18332 0cd8 5F5F7569 		.ascii	"__uint8_t\000"
 18332      6E74385F 
 18332      7400
 18333              	.LASF101:
 18334 0ce2 7849646C 		.ascii	"xIdleTaskHandle\000"
 18334      65546173 
 18334      6B48616E 
ARM GAS  /tmp/ccGXytas.s 			page 459


 18334      646C6500 
 18335              	.LASF265:
 18336 0cf2 75635265 		.ascii	"ucReturn\000"
 18336      7475726E 
 18336      00
 18337              	.LASF221:
 18338 0cfb 78546173 		.ascii	"xTaskResumeFromISR\000"
 18338      6B526573 
 18338      756D6546 
 18338      726F6D49 
 18338      535200
 18339              	.LASF138:
 18340 0d0e 70756C4E 		.ascii	"pulNotificationValue\000"
 18340      6F746966 
 18340      69636174 
 18340      696F6E56 
 18340      616C7565 
 18341              	.LASF124:
 18342 0d23 78526574 		.ascii	"xReturn\000"
 18342      75726E00 
 18343              	.LASF217:
 18344 0d2b 76546173 		.ascii	"vTaskMissedYield\000"
 18344      6B4D6973 
 18344      73656459 
 18344      69656C64 
 18344      00
 18345              	.LASF97:
 18346 0d3c 75785065 		.ascii	"uxPendedTicks\000"
 18346      6E646564 
 18346      5469636B 
 18346      7300
 18347              	.LASF13:
 18348 0d4a 6C6F6E67 		.ascii	"long unsigned int\000"
 18348      20756E73 
 18348      69676E65 
 18348      6420696E 
 18348      7400
 18349              	.LASF167:
 18350 0d5c 65537461 		.ascii	"eState\000"
 18350      746500
 18351              	.LASF165:
 18352 0d63 70785461 		.ascii	"pxTaskStatusArray\000"
 18352      736B5374 
 18352      61747573 
 18352      41727261 
 18352      7900
 18353              	.LASF155:
 18354 0d75 78546173 		.ascii	"xTaskPriorityInherit\000"
 18354      6B507269 
 18354      6F726974 
 18354      79496E68 
 18354      65726974 
 18355              	.LASF156:
 18356 0d8a 70784D75 		.ascii	"pxMutexHolderTCB\000"
 18356      74657848 
 18356      6F6C6465 
 18356      72544342 
ARM GAS  /tmp/ccGXytas.s 			page 460


 18356      00
 18357              	.LASF207:
 18358 0d9b 70635461 		.ascii	"pcTaskGetName\000"
 18358      736B4765 
 18358      744E616D 
 18358      6500
 18359              	.LASF213:
 18360 0da9 78546963 		.ascii	"xTicks\000"
 18360      6B7300
 18361              	.LASF220:
 18362 0db0 76546173 		.ascii	"vTaskStartScheduler\000"
 18362      6B537461 
 18362      72745363 
 18362      68656475 
 18362      6C657200 
 18363              	.LASF204:
 18364 0dc4 75784172 		.ascii	"uxArraySize\000"
 18364      72617953 
 18364      697A6500 
 18365              	.LASF118:
 18366 0dd0 7843616E 		.ascii	"xCanBlockIndefinitely\000"
 18366      426C6F63 
 18366      6B496E64 
 18366      6566696E 
 18366      6974656C 
 18367              	.LASF51:
 18368 0de6 6552756E 		.ascii	"eRunning\000"
 18368      6E696E67 
 18368      00
 18369              	.LASF78:
 18370 0def 756C5275 		.ascii	"ulRunTimeCounter\000"
 18370      6E54696D 
 18370      65436F75 
 18370      6E746572 
 18370      00
 18371              	.LASF69:
 18372 0e00 70764261 		.ascii	"pvBaseAddress\000"
 18372      73654164 
 18372      64726573 
 18372      7300
 18373              	.LASF240:
 18374 0e0e 78546963 		.ascii	"xTicksToDelay\000"
 18374      6B73546F 
 18374      44656C61 
 18374      7900
 18375              	.LASF2:
 18376 0e1c 756E7369 		.ascii	"unsigned char\000"
 18376      676E6564 
 18376      20636861 
 18376      7200
 18377              	.LASF196:
 18378 0e2a 76546173 		.ascii	"vTaskPlaceOnUnorderedEventList\000"
 18378      6B506C61 
 18378      63654F6E 
 18378      556E6F72 
 18378      64657265 
 18379              	.LASF12:
ARM GAS  /tmp/ccGXytas.s 			page 461


 18380 0e49 5F5F7569 		.ascii	"__uint32_t\000"
 18380      6E743332 
 18380      5F7400
 18381              	.LASF106:
 18382 0e54 764C6973 		.ascii	"vListInitialise\000"
 18382      74496E69 
 18382      7469616C 
 18382      69736500 
 18383              	.LASF185:
 18384 0e64 70785469 		.ascii	"pxTicksToWait\000"
 18384      636B7354 
 18384      6F576169 
 18384      7400
 18385              	.LASF56:
 18386 0e72 65496E76 		.ascii	"eInvalid\000"
 18386      616C6964 
 18386      00
 18387              	.LASF199:
 18388 0e7b 7578546F 		.ascii	"uxTopPriority\000"
 18388      70507269 
 18388      6F726974 
 18388      7900
 18389              	.LASF47:
 18390 0e89 75784261 		.ascii	"uxBasePriority\000"
 18390      73655072 
 18390      696F7269 
 18390      747900
 18391              	.LASF241:
 18392 0e98 76546173 		.ascii	"vTaskDelayUntil\000"
 18392      6B44656C 
 18392      6179556E 
 18392      74696C00 
 18393              	.LASF41:
 18394 0ea8 78457665 		.ascii	"xEventListItem\000"
 18394      6E744C69 
 18394      73744974 
 18394      656D00
 18395              	.LASF148:
 18396 0eb7 75785072 		.ascii	"uxPriorityUsedOnEntry\000"
 18396      696F7269 
 18396      74795573 
 18396      65644F6E 
 18396      456E7472 
 18397              	.LASF83:
 18398 0ecd 5443425F 		.ascii	"TCB_t\000"
 18398      7400
 18399              	.LASF117:
 18400 0ed3 78546963 		.ascii	"xTicksToWait\000"
 18400      6B73546F 
 18400      57616974 
 18400      00
 18401              	.LASF26:
 18402 0ee0 70764F77 		.ascii	"pvOwner\000"
 18402      6E657200 
 18403              	.LASF160:
 18404 0ee8 70727644 		.ascii	"prvDeleteTCB\000"
 18404      656C6574 
ARM GAS  /tmp/ccGXytas.s 			page 462


 18404      65544342 
 18404      00
 18405              	.LASF53:
 18406 0ef5 65426C6F 		.ascii	"eBlocked\000"
 18406      636B6564 
 18406      00
 18407              	.LASF226:
 18408 0efe 76546173 		.ascii	"vTaskSuspend\000"
 18408      6B537573 
 18408      70656E64 
 18408      00
 18409              	.LASF215:
 18410 0f0b 78416C72 		.ascii	"xAlreadyYielded\000"
 18410      65616479 
 18410      5969656C 
 18410      64656400 
 18411              	.LASF158:
 18412 0f1b 78546173 		.ascii	"xTaskGetCurrentTaskHandle\000"
 18412      6B476574 
 18412      43757272 
 18412      656E7454 
 18412      61736B48 
 18413              	.LASF255:
 18414 0f35 78546173 		.ascii	"xTaskCreate\000"
 18414      6B437265 
 18414      61746500 
 18415              	.LASF169:
 18416 0f41 70784669 		.ascii	"pxFirstTCB\000"
 18416      72737454 
 18416      434200
 18417              	.LASF163:
 18418 0f4c 70727654 		.ascii	"prvTaskCheckFreeStackSpace\000"
 18418      61736B43 
 18418      6865636B 
 18418      46726565 
 18418      53746163 
 18419              	.LASF182:
 18420 0f67 75785461 		.ascii	"uxTaskGetTaskNumber\000"
 18420      736B4765 
 18420      74546173 
 18420      6B4E756D 
 18420      62657200 
 18421              	.LASF246:
 18422 0f7b 78546173 		.ascii	"xTaskToDelete\000"
 18422      6B546F44 
 18422      656C6574 
 18422      6500
 18423              	.LASF177:
 18424 0f89 70727641 		.ascii	"prvAddCurrentTaskToDelayedList\000"
 18424      64644375 
 18424      7272656E 
 18424      74546173 
 18424      6B546F44 
 18425              	.LASF80:
 18426 0fa8 75735374 		.ascii	"usStackHighWaterMark\000"
 18426      61636B48 
 18426      69676857 
ARM GAS  /tmp/ccGXytas.s 			page 463


 18426      61746572 
 18426      4D61726B 
 18427              	.LASF93:
 18428 0fbd 75784375 		.ascii	"uxCurrentNumberOfTasks\000"
 18428      7272656E 
 18428      744E756D 
 18428      6265724F 
 18428      66546173 
 18429              	.LASF243:
 18430 0fd4 7854696D 		.ascii	"xTimeIncrement\000"
 18430      65496E63 
 18430      72656D65 
 18430      6E7400
 18431              	.LASF6:
 18432 0fe3 7369676E 		.ascii	"signed char\000"
 18432      65642063 
 18432      68617200 
 18433              	.LASF3:
 18434 0fef 73686F72 		.ascii	"short unsigned int\000"
 18434      7420756E 
 18434      7369676E 
 18434      65642069 
 18434      6E7400
 18435              	.LASF120:
 18436 1002 7854696D 		.ascii	"xTimeToWake\000"
 18436      65546F57 
 18436      616B6500 
 18437              	.LASF40:
 18438 100e 78537461 		.ascii	"xStateListItem\000"
 18438      74654C69 
 18438      73744974 
 18438      656D00
 18439              	.LASF123:
 18440 101d 70785443 		.ascii	"pxTCB\000"
 18440      4200
 18441              	.LASF102:
 18442 1023 75785363 		.ascii	"uxSchedulerSuspended\000"
 18442      68656475 
 18442      6C657253 
 18442      75737065 
 18442      6E646564 
 18443              	.LASF39:
 18444 1038 7078546F 		.ascii	"pxTopOfStack\000"
 18444      704F6653 
 18444      7461636B 
 18444      00
 18445              	.LASF224:
 18446 1045 76546173 		.ascii	"vTaskResume\000"
 18446      6B526573 
 18446      756D6500 
 18447              	.LASF107:
 18448 1051 76506F72 		.ascii	"vPortEndScheduler\000"
 18448      74456E64 
 18448      53636865 
 18448      64756C65 
 18448      7200
 18449              	.LASF166:
ARM GAS  /tmp/ccGXytas.s 			page 464


 18450 1063 70784C69 		.ascii	"pxList\000"
 18450      737400
 18451              	.LASF190:
 18452 106a 70784576 		.ascii	"pxEventListItem\000"
 18452      656E744C 
 18452      69737449 
 18452      74656D00 
 18453              	.LASF253:
 18454 107a 70784372 		.ascii	"pxCreatedTask\000"
 18454      65617465 
 18454      64546173 
 18454      6B00
 18455              	.LASF175:
 18456 1088 70727643 		.ascii	"prvCheckTasksWaitingTermination\000"
 18456      6865636B 
 18456      5461736B 
 18456      73576169 
 18456      74696E67 
 18457              	.LASF141:
 18458 10a8 756C5265 		.ascii	"ulReturn\000"
 18458      7475726E 
 18458      00
 18459              	.LASF230:
 18460 10b1 75784375 		.ascii	"uxCurrentBasePriority\000"
 18460      7272656E 
 18460      74426173 
 18460      65507269 
 18460      6F726974 
 18461              	.LASF98:
 18462 10c7 78596965 		.ascii	"xYieldPending\000"
 18462      6C645065 
 18462      6E64696E 
 18462      6700
 18463              		.ident	"GCC: (Arch Repository) 13.2.0"
ARM GAS  /tmp/ccGXytas.s 			page 465


DEFINED SYMBOLS
                            *ABS*:00000000 tasks.c
     /tmp/ccGXytas.s:24     .text:00000000 $t
     /tmp/ccGXytas.s:29     .text:00000000 prvAddCurrentTaskToDelayedList
     /tmp/ccGXytas.s:190    .text:00000064 $d
     /tmp/ccGXytas.s:195    .text:0000006c $t
     /tmp/ccGXytas.s:200    .text:0000006c prvResetNextTaskUnblockTime
     /tmp/ccGXytas.s:259    .text:00000088 $d
     /tmp/ccGXytas.s:265    .text:0000008c $t
     /tmp/ccGXytas.s:270    .text:0000008c prvIdleTask
     /tmp/ccGXytas.s:372    .text:000000dc $d
     /tmp/ccGXytas.s:380    .text:000000e0 $t
     /tmp/ccGXytas.s:386    .text:000000e0 xTaskCreate
     /tmp/ccGXytas.s:892    .text:0000026c $d
     /tmp/ccGXytas.s:897    .text:00000274 $t
     /tmp/ccGXytas.s:903    .text:00000274 vTaskDelete
     /tmp/ccGXytas.s:1080   .text:0000030c $d
     /tmp/ccGXytas.s:1085   .text:00000314 $t
     /tmp/ccGXytas.s:1091   .text:00000314 eTaskGetState
     /tmp/ccGXytas.s:1235   .text:00000374 $d
     /tmp/ccGXytas.s:1241   .text:00000378 $t
     /tmp/ccGXytas.s:1247   .text:00000378 uxTaskPriorityGet
     /tmp/ccGXytas.s:1299   .text:00000390 $d
     /tmp/ccGXytas.s:1303   .text:00000394 $t
     /tmp/ccGXytas.s:1309   .text:00000394 uxTaskPriorityGetFromISR
     /tmp/ccGXytas.s:1382   .text:000003b8 $d
     /tmp/ccGXytas.s:1386   .text:000003bc $t
     /tmp/ccGXytas.s:1392   .text:000003bc vTaskPrioritySet
     /tmp/ccGXytas.s:1637   .text:00000478 $d
     /tmp/ccGXytas.s:1642   .text:00000480 $t
     /tmp/ccGXytas.s:1648   .text:00000480 vTaskResume
     /tmp/ccGXytas.s:1797   .text:000004f4 $d
     /tmp/ccGXytas.s:1801   .text:000004f8 $t
     /tmp/ccGXytas.s:1807   .text:000004f8 xTaskResumeFromISR
     /tmp/ccGXytas.s:1989   .text:00000578 $d
     /tmp/ccGXytas.s:1997   .text:0000057c $t
     /tmp/ccGXytas.s:2003   .text:0000057c vTaskStartScheduler
     /tmp/ccGXytas.s:2113   .text:000005cc $d
     /tmp/ccGXytas.s:2119   .text:000005d8 $t
     /tmp/ccGXytas.s:2125   .text:000005d8 vTaskEndScheduler
     /tmp/ccGXytas.s:2163   .text:000005f4 $d
     /tmp/ccGXytas.s:2167   .text:000005f8 $t
     /tmp/ccGXytas.s:2173   .text:000005f8 vTaskSuspendAll
     /tmp/ccGXytas.s:2192   .text:00000608 $d
     /tmp/ccGXytas.s:2196   .text:0000060c $t
     /tmp/ccGXytas.s:2202   .text:0000060c xTaskGetTickCount
     /tmp/ccGXytas.s:2225   .text:00000614 $d
     /tmp/ccGXytas.s:2229   .text:00000618 $t
     /tmp/ccGXytas.s:2235   .text:00000618 xTaskGetTickCountFromISR
     /tmp/ccGXytas.s:2248   .text:00000620 $d
     /tmp/ccGXytas.s:2252   .text:00000624 $t
     /tmp/ccGXytas.s:2258   .text:00000624 uxTaskGetNumberOfTasks
     /tmp/ccGXytas.s:2276   .text:0000062c $d
     /tmp/ccGXytas.s:2280   .text:00000630 $t
     /tmp/ccGXytas.s:2286   .text:00000630 pcTaskGetName
     /tmp/ccGXytas.s:2316   .text:0000063c $d
     /tmp/ccGXytas.s:2320   .text:00000640 $t
ARM GAS  /tmp/ccGXytas.s 			page 466


     /tmp/ccGXytas.s:2326   .text:00000640 xTaskIncrementTick
     /tmp/ccGXytas.s:2565   .text:00000704 $d
     /tmp/ccGXytas.s:2570   .text:0000070c $t
     /tmp/ccGXytas.s:2576   .text:0000070c xTaskResumeAll
     /tmp/ccGXytas.s:2795   .text:000007c8 $d
     /tmp/ccGXytas.s:2799   .text:000007cc $t
     /tmp/ccGXytas.s:2805   .text:000007cc vTaskDelayUntil
     /tmp/ccGXytas.s:2928   .text:00000818 $d
     /tmp/ccGXytas.s:2933   .text:0000081c $t
     /tmp/ccGXytas.s:2939   .text:0000081c vTaskDelay
     /tmp/ccGXytas.s:3016   .text:0000084a vTaskSwitchContext
     /tmp/ccGXytas.s:3146   .text:00000894 $d
     /tmp/ccGXytas.s:3150   .text:00000898 $t
     /tmp/ccGXytas.s:3156   .text:00000898 vTaskSuspend
     /tmp/ccGXytas.s:3341   .text:00000938 $d
     /tmp/ccGXytas.s:3346   .text:00000940 $t
     /tmp/ccGXytas.s:3352   .text:00000940 vTaskPlaceOnEventList
     /tmp/ccGXytas.s:3400   .text:0000095c $d
     /tmp/ccGXytas.s:3404   .text:00000960 $t
     /tmp/ccGXytas.s:3410   .text:00000960 vTaskPlaceOnUnorderedEventList
     /tmp/ccGXytas.s:3468   .text:00000984 $d
     /tmp/ccGXytas.s:3472   .text:00000988 $t
     /tmp/ccGXytas.s:3478   .text:00000988 vTaskPlaceOnEventListRestricted
     /tmp/ccGXytas.s:3540   .text:000009b0 $d
     /tmp/ccGXytas.s:3544   .text:000009b4 $t
     /tmp/ccGXytas.s:3550   .text:000009b4 xTaskRemoveFromEventList
     /tmp/ccGXytas.s:3657   .text:00000a0c $d
     /tmp/ccGXytas.s:3661   .text:00000a10 $t
     /tmp/ccGXytas.s:3667   .text:00000a10 vTaskRemoveFromUnorderedEventList
     /tmp/ccGXytas.s:3756   .text:00000a58 $d
     /tmp/ccGXytas.s:3760   .text:00000a5c $t
     /tmp/ccGXytas.s:3766   .text:00000a5c vTaskSetTimeOutState
     /tmp/ccGXytas.s:3820   .text:00000a78 $d
     /tmp/ccGXytas.s:3824   .text:00000a7c $t
     /tmp/ccGXytas.s:3830   .text:00000a7c vTaskInternalSetTimeOutState
     /tmp/ccGXytas.s:3859   .text:00000a8c $d
     /tmp/ccGXytas.s:3863   .text:00000a90 $t
     /tmp/ccGXytas.s:3869   .text:00000a90 xTaskCheckForTimeOut
     /tmp/ccGXytas.s:3996   .text:00000ad8 $d
     /tmp/ccGXytas.s:4001   .text:00000adc $t
     /tmp/ccGXytas.s:4007   .text:00000adc vTaskMissedYield
     /tmp/ccGXytas.s:4026   .text:00000ae8 $d
     /tmp/ccGXytas.s:4030   .text:00000aec $t
     /tmp/ccGXytas.s:4036   .text:00000aec uxTaskGetTaskNumber
     /tmp/ccGXytas.s:4070   .text:00000af2 vTaskSetTaskNumber
     /tmp/ccGXytas.s:4103   .text:00000af8 vTaskGetInfo
     /tmp/ccGXytas.s:4305   .text:00000b6c $d
     /tmp/ccGXytas.s:4311   .text:00000b70 $t
     /tmp/ccGXytas.s:4316   .text:00000b70 prvListTasksWithinSingleList
     /tmp/ccGXytas.s:4459   .text:00000bd0 uxTaskGetSystemState
     /tmp/ccGXytas.s:4624   .text:00000c64 $d
     /tmp/ccGXytas.s:4630   .text:00000c70 $t
     /tmp/ccGXytas.s:4636   .text:00000c70 xTaskGetCurrentTaskHandle
     /tmp/ccGXytas.s:4657   .text:00000c78 $d
     /tmp/ccGXytas.s:4661   .text:00000c7c $t
     /tmp/ccGXytas.s:4667   .text:00000c7c xTaskGetSchedulerState
     /tmp/ccGXytas.s:4705   .text:00000c98 $d
ARM GAS  /tmp/ccGXytas.s 			page 467


     /tmp/ccGXytas.s:4709   .text:00000c9c $t
     /tmp/ccGXytas.s:4715   .text:00000c9c xTaskPriorityInherit
     /tmp/ccGXytas.s:4879   .text:00000d30 $d
     /tmp/ccGXytas.s:4884   .text:00000d38 $t
     /tmp/ccGXytas.s:4890   .text:00000d38 xTaskPriorityDisinherit
     /tmp/ccGXytas.s:5021   .text:00000da0 $d
     /tmp/ccGXytas.s:5026   .text:00000da8 $t
     /tmp/ccGXytas.s:5032   .text:00000da8 vTaskPriorityDisinheritAfterTimeout
     /tmp/ccGXytas.s:5185   .text:00000e28 $d
     /tmp/ccGXytas.s:5189   .text:00000e2c $t
     /tmp/ccGXytas.s:5195   .text:00000e2c uxTaskResetEventItemValue
     /tmp/ccGXytas.s:5227   .text:00000e40 $d
     /tmp/ccGXytas.s:5231   .text:00000e44 $t
     /tmp/ccGXytas.s:5237   .text:00000e44 pvTaskIncrementMutexHeldCount
     /tmp/ccGXytas.s:5272   .text:00000e58 $d
     /tmp/ccGXytas.s:5276   .text:00000e5c $t
     /tmp/ccGXytas.s:5282   .text:00000e5c ulTaskNotifyTake
     /tmp/ccGXytas.s:5420   .text:00000ebc $d
     /tmp/ccGXytas.s:5424   .text:00000ec0 $t
     /tmp/ccGXytas.s:5430   .text:00000ec0 xTaskNotifyWait
     /tmp/ccGXytas.s:5591   .text:00000f44 $d
     /tmp/ccGXytas.s:5595   .text:00000f48 $t
     /tmp/ccGXytas.s:5601   .text:00000f48 xTaskGenericNotify
     /tmp/ccGXytas.s:5674   .text:00000f72 $d
     /tmp/ccGXytas.s:5678   .text:00000f76 $t
     /tmp/ccGXytas.s:5802   .text:00000fe0 $d
     /tmp/ccGXytas.s:5806   .text:00000fe4 $t
     /tmp/ccGXytas.s:5812   .text:00000fe4 xTaskGenericNotifyFromISR
     /tmp/ccGXytas.s:5904   .text:0000101c $d
     /tmp/ccGXytas.s:5908   .text:00001020 $t
     /tmp/ccGXytas.s:6053   .text:00001090 $d
     /tmp/ccGXytas.s:6057   .text:00001094 $t
     /tmp/ccGXytas.s:6063   .text:00001094 vTaskNotifyGiveFromISR
     /tmp/ccGXytas.s:6251   .text:0000111c $d
     /tmp/ccGXytas.s:6255   .text:00001120 $t
     /tmp/ccGXytas.s:6261   .text:00001120 xTaskNotifyStateClear
     /tmp/ccGXytas.s:6327   .text:00001148 $d
     /tmp/ccGXytas.s:6341   .bss:00000004 pxCurrentTCB
     /tmp/ccGXytas.s:6333   .bss:00000000 $d
     /tmp/ccGXytas.s:6337   .bss:00000000 xTickCount
     /tmp/ccGXytas.s:6345   .bss:00000008 uxTopReadyPriority
     /tmp/ccGXytas.s:6349   .bss:0000000c xSuspendedTaskList
     /tmp/ccGXytas.s:6353   .bss:00000020 pxOverflowDelayedTaskList
     /tmp/ccGXytas.s:6357   .bss:00000024 pxDelayedTaskList
     /tmp/ccGXytas.s:6361   .bss:00000028 xNextTaskUnblockTime
     /tmp/ccGXytas.s:6365   .bss:0000002c xTasksWaitingTermination
     /tmp/ccGXytas.s:6369   .bss:00000040 uxCurrentNumberOfTasks
     /tmp/ccGXytas.s:6373   .bss:00000044 uxDeletedTasksWaitingCleanUp
     /tmp/ccGXytas.s:6377   .bss:00000048 pxReadyTasksLists
     /tmp/ccGXytas.s:6381   .bss:000000ac xDelayedTaskList1
     /tmp/ccGXytas.s:6385   .bss:000000c0 xDelayedTaskList2
     /tmp/ccGXytas.s:6389   .bss:000000d4 xPendingReadyList
     /tmp/ccGXytas.s:6393   .bss:000000e8 xSchedulerRunning
     /tmp/ccGXytas.s:6397   .bss:000000ec uxTaskNumber
     /tmp/ccGXytas.s:6401   .bss:000000f0 uxSchedulerSuspended
     /tmp/ccGXytas.s:6405   .bss:000000f4 xIdleTaskHandle
     /tmp/ccGXytas.s:6409   .bss:000000f8 xNumOfOverflows
ARM GAS  /tmp/ccGXytas.s 			page 468


     /tmp/ccGXytas.s:6413   .bss:000000fc uxPendedTicks
     /tmp/ccGXytas.s:6417   .bss:00000100 xYieldPending

UNDEFINED SYMBOLS
uxListRemove
vListInsertEnd
vListInsert
vPortEnterCritical
vPortExitCritical
vPortFree
pvPortMalloc
memset
vListInitialiseItem
pxPortInitialiseStack
vListInitialise
xTimerCreateTimerTask
xPortStartScheduler
vPortEndScheduler
