ARM GAS  /tmp/ccaP1CVS.s 			page 1


   1              		.cpu cortex-m3
   2              		.arch armv7-m
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1	@ Tag_ABI_FP_denormal
   5              		.eabi_attribute 21, 1	@ Tag_ABI_FP_exceptions
   6              		.eabi_attribute 23, 3	@ Tag_ABI_FP_number_model
   7              		.eabi_attribute 24, 1	@ Tag_ABI_align8_needed
   8              		.eabi_attribute 25, 1	@ Tag_ABI_align8_preserved
   9              		.eabi_attribute 26, 1	@ Tag_ABI_enum_size
  10              		.eabi_attribute 30, 4	@ Tag_ABI_optimization_goals
  11              		.eabi_attribute 34, 1	@ Tag_CPU_unaligned_access
  12              		.eabi_attribute 18, 4	@ Tag_ABI_PCS_wchar_t
  13              		.file	"tasks.c"
  14              	@ GNU C17 (GNU Arm Embedded Toolchain 10.3-2021.10) version 10.3.1 20210824 (release) (arm-none-eab
  15              	@	compiled by GNU C version 4.8.4, GMP version 6.1.0, MPFR version 3.1.4, MPC version 1.0.3, isl ve
  16              	
  17              	@ GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
  18              	@ options passed:  -I . -I ../3-ComProcessos
  19              	@ -I ../stm32f10x_lib/CMSIS/CM3/CoreSupport
  20              	@ -I ../stm32f10x_lib/CMSIS/CM3/DeviceSupport/ST/STM32F10x
  21              	@ -I ../stm32f10x_lib/STM32F10x_StdPeriph_Driver/inc
  22              	@ -I ../stm32f10x_lib/STM32F10x_StdPeriph_Driver -I ../freertos/include
  23              	@ -I ../freertos/portable/GCC/ARM_CM3 -imultilib thumb/v7-m/nofp
  24              	@ -iprefix /usr/bin/../lib/gcc/arm-none-eabi/10.3.1/
  25              	@ -isysroot /usr/bin/../arm-none-eabi -D__USES_INITFINI__ -D STM32F10X_MD
  26              	@ -D USE_STDPERIPH_DRIVER -D HSE_VALUE=8000000 -D RUN_FROM_FLASH=1
  27              	@ ../freertos/tasks.c -mcpu=cortex-m3 -mthumb -mfloat-abi=soft
  28              	@ -mlibarch=armv7-m -march=armv7-m -auxbase-strip ../freertos/tasks.o -g
  29              	@ -gdwarf-2 -Os -Wall -fomit-frame-pointer -fverbose-asm
  30              	@ options enabled:  -faggressive-loop-optimizations -fallocation-dce
  31              	@ -fauto-inc-dec -fbranch-count-reg -fcaller-saves -fcode-hoisting
  32              	@ -fcombine-stack-adjustments -fcompare-elim -fcprop-registers
  33              	@ -fcrossjumping -fcse-follow-jumps -fdefer-pop
  34              	@ -fdelete-null-pointer-checks -fdevirtualize -fdevirtualize-speculatively
  35              	@ -fdwarf2-cfi-asm -fearly-inlining -feliminate-unused-debug-symbols
  36              	@ -feliminate-unused-debug-types -fexpensive-optimizations
  37              	@ -fforward-propagate -ffp-int-builtin-inexact -ffunction-cse -fgcse
  38              	@ -fgcse-lm -fgnu-unique -fguess-branch-probability -fhoist-adjacent-loads
  39              	@ -fident -fif-conversion -fif-conversion2 -findirect-inlining -finline
  40              	@ -finline-atomics -finline-functions -finline-functions-called-once
  41              	@ -finline-small-functions -fipa-bit-cp -fipa-cp -fipa-icf
  42              	@ -fipa-icf-functions -fipa-icf-variables -fipa-profile -fipa-pure-const
  43              	@ -fipa-ra -fipa-reference -fipa-reference-addressable -fipa-sra
  44              	@ -fipa-stack-alignment -fipa-vrp -fira-hoist-pressure
  45              	@ -fira-share-save-slots -fira-share-spill-slots
  46              	@ -fisolate-erroneous-paths-dereference -fivopts -fkeep-static-consts
  47              	@ -fleading-underscore -flifetime-dse -flra-remat -fmath-errno
  48              	@ -fmerge-constants -fmerge-debug-strings -fmove-loop-invariants
  49              	@ -fomit-frame-pointer -foptimize-sibling-calls -fpartial-inlining
  50              	@ -fpeephole -fpeephole2 -fplt -fprefetch-loop-arrays -freg-struct-return
  51              	@ -freorder-blocks -freorder-functions -frerun-cse-after-loop
  52              	@ -fsched-critical-path-heuristic -fsched-dep-count-heuristic
  53              	@ -fsched-group-heuristic -fsched-interblock -fsched-last-insn-heuristic
  54              	@ -fsched-pressure -fsched-rank-heuristic -fsched-spec
  55              	@ -fsched-spec-insn-heuristic -fsched-stalled-insns-dep -fschedule-insns2
  56              	@ -fsection-anchors -fsemantic-interposition -fshow-column
  57              	@ -fshrink-wrap-separate -fsigned-zeros -fsplit-ivs-in-unroller
ARM GAS  /tmp/ccaP1CVS.s 			page 2


  58              	@ -fsplit-wide-types -fssa-backprop -fssa-phiopt -fstdarg-opt
  59              	@ -fstore-merging -fstrict-aliasing -fstrict-volatile-bitfields
  60              	@ -fsync-libcalls -fthread-jumps -ftoplevel-reorder -ftrapping-math
  61              	@ -ftree-bit-ccp -ftree-builtin-call-dce -ftree-ccp -ftree-ch
  62              	@ -ftree-coalesce-vars -ftree-copy-prop -ftree-cselim -ftree-dce
  63              	@ -ftree-dominator-opts -ftree-dse -ftree-forwprop -ftree-fre
  64              	@ -ftree-loop-distribute-patterns -ftree-loop-if-convert -ftree-loop-im
  65              	@ -ftree-loop-ivcanon -ftree-loop-optimize -ftree-parallelize-loops=
  66              	@ -ftree-phiprop -ftree-pre -ftree-pta -ftree-reassoc -ftree-scev-cprop
  67              	@ -ftree-sink -ftree-slsr -ftree-sra -ftree-switch-conversion
  68              	@ -ftree-tail-merge -ftree-ter -ftree-vrp -funit-at-a-time -fvar-tracking
  69              	@ -fvar-tracking-assignments -fverbose-asm -fzero-initialized-in-bss
  70              	@ -masm-syntax-unified -mbe32 -mfix-cortex-m3-ldrd -mlittle-endian
  71              	@ -mpic-data-is-text-relative -msched-prolog -mthumb -munaligned-access
  72              	@ -mvectorize-with-neon-quad
  73              	
  74              		.text
  75              	.Ltext0:
  76              		.cfi_sections	.debug_frame
  77              		.align	1
  78              		.syntax unified
  79              		.thumb
  80              		.thumb_func
  81              		.type	prvAddCurrentTaskToDelayedList, %function
  82              	prvAddCurrentTaskToDelayedList:
  83              	.LVL0:
  84              	.LFB62:
  85              		.file 1 "../freertos/tasks.c"
   1:../freertos/tasks.c **** /*
   2:../freertos/tasks.c ****  * FreeRTOS Kernel V10.2.1
   3:../freertos/tasks.c ****  * Copyright (C) 2019 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:../freertos/tasks.c ****  *
   5:../freertos/tasks.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:../freertos/tasks.c ****  * this software and associated documentation files (the "Software"), to deal in
   7:../freertos/tasks.c ****  * the Software without restriction, including without limitation the rights to
   8:../freertos/tasks.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:../freertos/tasks.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:../freertos/tasks.c ****  * subject to the following conditions:
  11:../freertos/tasks.c ****  *
  12:../freertos/tasks.c ****  * The above copyright notice and this permission notice shall be included in all
  13:../freertos/tasks.c ****  * copies or substantial portions of the Software.
  14:../freertos/tasks.c ****  *
  15:../freertos/tasks.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:../freertos/tasks.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:../freertos/tasks.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:../freertos/tasks.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:../freertos/tasks.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:../freertos/tasks.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:../freertos/tasks.c ****  *
  22:../freertos/tasks.c ****  * http://www.FreeRTOS.org
  23:../freertos/tasks.c ****  * http://aws.amazon.com/freertos
  24:../freertos/tasks.c ****  *
  25:../freertos/tasks.c ****  * 1 tab == 4 spaces!
  26:../freertos/tasks.c ****  */
  27:../freertos/tasks.c **** 
  28:../freertos/tasks.c **** /* Standard includes. */
  29:../freertos/tasks.c **** #include <stdlib.h>
ARM GAS  /tmp/ccaP1CVS.s 			page 3


  30:../freertos/tasks.c **** #include <string.h>
  31:../freertos/tasks.c **** 
  32:../freertos/tasks.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  33:../freertos/tasks.c **** all the API functions to use the MPU wrappers.  That should only be done when
  34:../freertos/tasks.c **** task.h is included from an application file. */
  35:../freertos/tasks.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  36:../freertos/tasks.c **** 
  37:../freertos/tasks.c **** /* FreeRTOS includes. */
  38:../freertos/tasks.c **** #include "FreeRTOS.h"
  39:../freertos/tasks.c **** #include "task.h"
  40:../freertos/tasks.c **** #include "timers.h"
  41:../freertos/tasks.c **** #include "stack_macros.h"
  42:../freertos/tasks.c **** 
  43:../freertos/tasks.c **** /* Lint e9021, e961 and e750 are suppressed as a MISRA exception justified
  44:../freertos/tasks.c **** because the MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined
  45:../freertos/tasks.c **** for the header files above, but not in this file, in order to generate the
  46:../freertos/tasks.c **** correct privileged Vs unprivileged linkage and placement. */
  47:../freertos/tasks.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750 !e9021. */
  48:../freertos/tasks.c **** 
  49:../freertos/tasks.c **** /* Set configUSE_STATS_FORMATTING_FUNCTIONS to 2 to include the stats formatting
  50:../freertos/tasks.c **** functions but without including stdio.h here. */
  51:../freertos/tasks.c **** #if ( configUSE_STATS_FORMATTING_FUNCTIONS == 1 )
  52:../freertos/tasks.c **** 	/* At the bottom of this file are two optional functions that can be used
  53:../freertos/tasks.c **** 	to generate human readable text from the raw data generated by the
  54:../freertos/tasks.c **** 	uxTaskGetSystemState() function.  Note the formatting functions are provided
  55:../freertos/tasks.c **** 	for convenience only, and are NOT considered part of the kernel. */
  56:../freertos/tasks.c **** 	#include <stdio.h>
  57:../freertos/tasks.c **** #endif /* configUSE_STATS_FORMATTING_FUNCTIONS == 1 ) */
  58:../freertos/tasks.c **** 
  59:../freertos/tasks.c **** #if( configUSE_PREEMPTION == 0 )
  60:../freertos/tasks.c **** 	/* If the cooperative scheduler is being used then a yield should not be
  61:../freertos/tasks.c **** 	performed just because a higher priority task has been woken. */
  62:../freertos/tasks.c **** 	#define taskYIELD_IF_USING_PREEMPTION()
  63:../freertos/tasks.c **** #else
  64:../freertos/tasks.c **** 	#define taskYIELD_IF_USING_PREEMPTION() portYIELD_WITHIN_API()
  65:../freertos/tasks.c **** #endif
  66:../freertos/tasks.c **** 
  67:../freertos/tasks.c **** /* Values that can be assigned to the ucNotifyState member of the TCB. */
  68:../freertos/tasks.c **** #define taskNOT_WAITING_NOTIFICATION	( ( uint8_t ) 0 )
  69:../freertos/tasks.c **** #define taskWAITING_NOTIFICATION		( ( uint8_t ) 1 )
  70:../freertos/tasks.c **** #define taskNOTIFICATION_RECEIVED		( ( uint8_t ) 2 )
  71:../freertos/tasks.c **** 
  72:../freertos/tasks.c **** /*
  73:../freertos/tasks.c ****  * The value used to fill the stack of a task when the task is created.  This
  74:../freertos/tasks.c ****  * is used purely for checking the high water mark for tasks.
  75:../freertos/tasks.c ****  */
  76:../freertos/tasks.c **** #define tskSTACK_FILL_BYTE	( 0xa5U )
  77:../freertos/tasks.c **** 
  78:../freertos/tasks.c **** /* Bits used to recored how a task's stack and TCB were allocated. */
  79:../freertos/tasks.c **** #define tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB 		( ( uint8_t ) 0 )
  80:../freertos/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_ONLY 			( ( uint8_t ) 1 )
  81:../freertos/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_AND_TCB		( ( uint8_t ) 2 )
  82:../freertos/tasks.c **** 
  83:../freertos/tasks.c **** /* If any of the following are set then task stacks are filled with a known
  84:../freertos/tasks.c **** value so the high water mark can be determined.  If none of the following are
  85:../freertos/tasks.c **** set then don't fill the stack so there is no unnecessary dependency on memset. */
  86:../freertos/tasks.c **** #if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTas
ARM GAS  /tmp/ccaP1CVS.s 			page 4


  87:../freertos/tasks.c **** 	#define tskSET_NEW_STACKS_TO_KNOWN_VALUE	1
  88:../freertos/tasks.c **** #else
  89:../freertos/tasks.c **** 	#define tskSET_NEW_STACKS_TO_KNOWN_VALUE	0
  90:../freertos/tasks.c **** #endif
  91:../freertos/tasks.c **** 
  92:../freertos/tasks.c **** /*
  93:../freertos/tasks.c ****  * Macros used by vListTask to indicate which state a task is in.
  94:../freertos/tasks.c ****  */
  95:../freertos/tasks.c **** #define tskRUNNING_CHAR		( 'X' )
  96:../freertos/tasks.c **** #define tskBLOCKED_CHAR		( 'B' )
  97:../freertos/tasks.c **** #define tskREADY_CHAR		( 'R' )
  98:../freertos/tasks.c **** #define tskDELETED_CHAR		( 'D' )
  99:../freertos/tasks.c **** #define tskSUSPENDED_CHAR	( 'S' )
 100:../freertos/tasks.c **** 
 101:../freertos/tasks.c **** /*
 102:../freertos/tasks.c ****  * Some kernel aware debuggers require the data the debugger needs access to be
 103:../freertos/tasks.c ****  * global, rather than file scope.
 104:../freertos/tasks.c ****  */
 105:../freertos/tasks.c **** #ifdef portREMOVE_STATIC_QUALIFIER
 106:../freertos/tasks.c **** 	#define static
 107:../freertos/tasks.c **** #endif
 108:../freertos/tasks.c **** 
 109:../freertos/tasks.c **** /* The name allocated to the Idle task.  This can be overridden by defining
 110:../freertos/tasks.c **** configIDLE_TASK_NAME in FreeRTOSConfig.h. */
 111:../freertos/tasks.c **** #ifndef configIDLE_TASK_NAME
 112:../freertos/tasks.c **** 	#define configIDLE_TASK_NAME "IDLE"
 113:../freertos/tasks.c **** #endif
 114:../freertos/tasks.c **** 
 115:../freertos/tasks.c **** #if ( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
 116:../freertos/tasks.c **** 
 117:../freertos/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 0 then task selection is
 118:../freertos/tasks.c **** 	performed in a generic way that is not optimised to any particular
 119:../freertos/tasks.c **** 	microcontroller architecture. */
 120:../freertos/tasks.c **** 
 121:../freertos/tasks.c **** 	/* uxTopReadyPriority holds the priority of the highest priority ready
 122:../freertos/tasks.c **** 	state task. */
 123:../freertos/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )														\
 124:../freertos/tasks.c **** 	{																									\
 125:../freertos/tasks.c **** 		if( ( uxPriority ) > uxTopReadyPriority )														\
 126:../freertos/tasks.c **** 		{																								\
 127:../freertos/tasks.c **** 			uxTopReadyPriority = ( uxPriority );														\
 128:../freertos/tasks.c **** 		}																								\
 129:../freertos/tasks.c **** 	} /* taskRECORD_READY_PRIORITY */
 130:../freertos/tasks.c **** 
 131:../freertos/tasks.c **** 	/*-----------------------------------------------------------*/
 132:../freertos/tasks.c **** 
 133:../freertos/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()															\
 134:../freertos/tasks.c **** 	{																									\
 135:../freertos/tasks.c **** 	UBaseType_t uxTopPriority = uxTopReadyPriority;														\
 136:../freertos/tasks.c **** 																										\
 137:../freertos/tasks.c **** 		/* Find the highest priority queue that contains ready tasks. */								\
 138:../freertos/tasks.c **** 		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopPriority ] ) ) )							\
 139:../freertos/tasks.c **** 		{																								\
 140:../freertos/tasks.c **** 			configASSERT( uxTopPriority );																\
 141:../freertos/tasks.c **** 			--uxTopPriority;																			\
 142:../freertos/tasks.c **** 		}																								\
 143:../freertos/tasks.c **** 																										\
ARM GAS  /tmp/ccaP1CVS.s 			page 5


 144:../freertos/tasks.c **** 		/* listGET_OWNER_OF_NEXT_ENTRY indexes through the list, so the tasks of						\
 145:../freertos/tasks.c **** 		the	same priority get an equal share of the processor time. */									\
 146:../freertos/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );			\
 147:../freertos/tasks.c **** 		uxTopReadyPriority = uxTopPriority;																\
 148:../freertos/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK */
 149:../freertos/tasks.c **** 
 150:../freertos/tasks.c **** 	/*-----------------------------------------------------------*/
 151:../freertos/tasks.c **** 
 152:../freertos/tasks.c **** 	/* Define away taskRESET_READY_PRIORITY() and portRESET_READY_PRIORITY() as
 153:../freertos/tasks.c **** 	they are only required when a port optimised method of task selection is
 154:../freertos/tasks.c **** 	being used. */
 155:../freertos/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )
 156:../freertos/tasks.c **** 	#define portRESET_READY_PRIORITY( uxPriority, uxTopReadyPriority )
 157:../freertos/tasks.c **** 
 158:../freertos/tasks.c **** #else /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 159:../freertos/tasks.c **** 
 160:../freertos/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 1 then task selection is
 161:../freertos/tasks.c **** 	performed in a way that is tailored to the particular microcontroller
 162:../freertos/tasks.c **** 	architecture being used. */
 163:../freertos/tasks.c **** 
 164:../freertos/tasks.c **** 	/* A port optimised version is provided.  Call the port defined macros. */
 165:../freertos/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )	portRECORD_READY_PRIORITY( uxPriority, uxTopReadyP
 166:../freertos/tasks.c **** 
 167:../freertos/tasks.c **** 	/*-----------------------------------------------------------*/
 168:../freertos/tasks.c **** 
 169:../freertos/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()														\
 170:../freertos/tasks.c **** 	{																								\
 171:../freertos/tasks.c **** 	UBaseType_t uxTopPriority;																		\
 172:../freertos/tasks.c **** 																									\
 173:../freertos/tasks.c **** 		/* Find the highest priority list that contains ready tasks. */								\
 174:../freertos/tasks.c **** 		portGET_HIGHEST_PRIORITY( uxTopPriority, uxTopReadyPriority );								\
 175:../freertos/tasks.c **** 		configASSERT( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ uxTopPriority ] ) ) > 0 );		\
 176:../freertos/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );		\
 177:../freertos/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK() */
 178:../freertos/tasks.c **** 
 179:../freertos/tasks.c **** 	/*-----------------------------------------------------------*/
 180:../freertos/tasks.c **** 
 181:../freertos/tasks.c **** 	/* A port optimised version is provided, call it only if the TCB being reset
 182:../freertos/tasks.c **** 	is being referenced from a ready list.  If it is referenced from a delayed
 183:../freertos/tasks.c **** 	or suspended list then it won't be in a ready list. */
 184:../freertos/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )														\
 185:../freertos/tasks.c **** 	{																									\
 186:../freertos/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ ( uxPriority ) ] ) ) == ( UBaseType_t ) 0 )	\
 187:../freertos/tasks.c **** 		{																								\
 188:../freertos/tasks.c **** 			portRESET_READY_PRIORITY( ( uxPriority ), ( uxTopReadyPriority ) );							\
 189:../freertos/tasks.c **** 		}																								\
 190:../freertos/tasks.c **** 	}
 191:../freertos/tasks.c **** 
 192:../freertos/tasks.c **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 193:../freertos/tasks.c **** 
 194:../freertos/tasks.c **** /*-----------------------------------------------------------*/
 195:../freertos/tasks.c **** 
 196:../freertos/tasks.c **** /* pxDelayedTaskList and pxOverflowDelayedTaskList are switched when the tick
 197:../freertos/tasks.c **** count overflows. */
 198:../freertos/tasks.c **** #define taskSWITCH_DELAYED_LISTS()																	\
 199:../freertos/tasks.c **** {																									\
 200:../freertos/tasks.c **** 	List_t *pxTemp;																					\
ARM GAS  /tmp/ccaP1CVS.s 			page 6


 201:../freertos/tasks.c **** 																									\
 202:../freertos/tasks.c **** 	/* The delayed tasks list should be empty when the lists are switched. */						\
 203:../freertos/tasks.c **** 	configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );										\
 204:../freertos/tasks.c **** 																									\
 205:../freertos/tasks.c **** 	pxTemp = pxDelayedTaskList;																		\
 206:../freertos/tasks.c **** 	pxDelayedTaskList = pxOverflowDelayedTaskList;													\
 207:../freertos/tasks.c **** 	pxOverflowDelayedTaskList = pxTemp;																\
 208:../freertos/tasks.c **** 	xNumOfOverflows++;																				\
 209:../freertos/tasks.c **** 	prvResetNextTaskUnblockTime();																	\
 210:../freertos/tasks.c **** }
 211:../freertos/tasks.c **** 
 212:../freertos/tasks.c **** /*-----------------------------------------------------------*/
 213:../freertos/tasks.c **** 
 214:../freertos/tasks.c **** /*
 215:../freertos/tasks.c ****  * Place the task represented by pxTCB into the appropriate ready list for
 216:../freertos/tasks.c ****  * the task.  It is inserted at the end of the list.
 217:../freertos/tasks.c ****  */
 218:../freertos/tasks.c **** #define prvAddTaskToReadyList( pxTCB )																\
 219:../freertos/tasks.c **** 	traceMOVED_TASK_TO_READY_STATE( pxTCB );														\
 220:../freertos/tasks.c **** 	taskRECORD_READY_PRIORITY( ( pxTCB )->uxPriority );												\
 221:../freertos/tasks.c **** 	vListInsertEnd( &( pxReadyTasksLists[ ( pxTCB )->uxPriority ] ), &( ( pxTCB )->xStateListItem ) );
 222:../freertos/tasks.c **** 	tracePOST_MOVED_TASK_TO_READY_STATE( pxTCB )
 223:../freertos/tasks.c **** /*-----------------------------------------------------------*/
 224:../freertos/tasks.c **** 
 225:../freertos/tasks.c **** /*
 226:../freertos/tasks.c ****  * Several functions take an TaskHandle_t parameter that can optionally be NULL,
 227:../freertos/tasks.c ****  * where NULL is used to indicate that the handle of the currently executing
 228:../freertos/tasks.c ****  * task should be used in place of the parameter.  This macro simply checks to
 229:../freertos/tasks.c ****  * see if the parameter is NULL and returns a pointer to the appropriate TCB.
 230:../freertos/tasks.c ****  */
 231:../freertos/tasks.c **** #define prvGetTCBFromHandle( pxHandle ) ( ( ( pxHandle ) == NULL ) ? pxCurrentTCB : ( pxHandle ) )
 232:../freertos/tasks.c **** 
 233:../freertos/tasks.c **** /* The item value of the event list item is normally used to hold the priority
 234:../freertos/tasks.c **** of the task to which it belongs (coded to allow it to be held in reverse
 235:../freertos/tasks.c **** priority order).  However, it is occasionally borrowed for other purposes.  It
 236:../freertos/tasks.c **** is important its value is not updated due to a task priority change while it is
 237:../freertos/tasks.c **** being used for another purpose.  The following bit definition is used to inform
 238:../freertos/tasks.c **** the scheduler that the value should not be changed - in which case it is the
 239:../freertos/tasks.c **** responsibility of whichever module is using the value to ensure it gets set back
 240:../freertos/tasks.c **** to its original value when it is released. */
 241:../freertos/tasks.c **** #if( configUSE_16_BIT_TICKS == 1 )
 242:../freertos/tasks.c **** 	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x8000U
 243:../freertos/tasks.c **** #else
 244:../freertos/tasks.c **** 	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x80000000UL
 245:../freertos/tasks.c **** #endif
 246:../freertos/tasks.c **** 
 247:../freertos/tasks.c **** /*
 248:../freertos/tasks.c ****  * Task control block.  A task control block (TCB) is allocated for each task,
 249:../freertos/tasks.c ****  * and stores task state information, including a pointer to the task's context
 250:../freertos/tasks.c ****  * (the task's run time environment, including register values)
 251:../freertos/tasks.c ****  */
 252:../freertos/tasks.c **** typedef struct tskTaskControlBlock 			/* The old naming convention is used to prevent breaking kern
 253:../freertos/tasks.c **** {
 254:../freertos/tasks.c **** 	volatile StackType_t	*pxTopOfStack;	/*< Points to the location of the last item placed on the task
 255:../freertos/tasks.c **** 
 256:../freertos/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
 257:../freertos/tasks.c **** 		xMPU_SETTINGS	xMPUSettings;		/*< The MPU settings are defined as part of the port layer.  THIS MU
ARM GAS  /tmp/ccaP1CVS.s 			page 7


 258:../freertos/tasks.c **** 	#endif
 259:../freertos/tasks.c **** 
 260:../freertos/tasks.c **** 	ListItem_t			xStateListItem;	/*< The list that the state list item of a task is reference from den
 261:../freertos/tasks.c **** 	ListItem_t			xEventListItem;		/*< Used to reference a task from an event list. */
 262:../freertos/tasks.c **** 	UBaseType_t			uxPriority;			/*< The priority of the task.  0 is the lowest priority. */
 263:../freertos/tasks.c **** 	StackType_t			*pxStack;			/*< Points to the start of the stack. */
 264:../freertos/tasks.c **** 	char				pcTaskName[ configMAX_TASK_NAME_LEN ];/*< Descriptive name given to the task when created.
 265:../freertos/tasks.c **** 
 266:../freertos/tasks.c **** 	#if ( ( portSTACK_GROWTH > 0 ) || ( configRECORD_STACK_HIGH_ADDRESS == 1 ) )
 267:../freertos/tasks.c **** 		StackType_t		*pxEndOfStack;		/*< Points to the highest valid address for the stack. */
 268:../freertos/tasks.c **** 	#endif
 269:../freertos/tasks.c **** 
 270:../freertos/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
 271:../freertos/tasks.c **** 		UBaseType_t		uxCriticalNesting;	/*< Holds the critical section nesting depth for ports that do no
 272:../freertos/tasks.c **** 	#endif
 273:../freertos/tasks.c **** 
 274:../freertos/tasks.c **** 	#if ( configUSE_TRACE_FACILITY == 1 )
 275:../freertos/tasks.c **** 		UBaseType_t		uxTCBNumber;		/*< Stores a number that increments each time a TCB is created.  It al
 276:../freertos/tasks.c **** 		UBaseType_t		uxTaskNumber;		/*< Stores a number specifically for use by third party trace code. *
 277:../freertos/tasks.c **** 	#endif
 278:../freertos/tasks.c **** 
 279:../freertos/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 280:../freertos/tasks.c **** 		UBaseType_t		uxBasePriority;		/*< The priority last assigned to the task - used by the priority i
 281:../freertos/tasks.c **** 		UBaseType_t		uxMutexesHeld;
 282:../freertos/tasks.c **** 	#endif
 283:../freertos/tasks.c **** 
 284:../freertos/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
 285:../freertos/tasks.c **** 		TaskHookFunction_t pxTaskTag;
 286:../freertos/tasks.c **** 	#endif
 287:../freertos/tasks.c **** 
 288:../freertos/tasks.c **** 	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS > 0 )
 289:../freertos/tasks.c **** 		void			*pvThreadLocalStoragePointers[ configNUM_THREAD_LOCAL_STORAGE_POINTERS ];
 290:../freertos/tasks.c **** 	#endif
 291:../freertos/tasks.c **** 
 292:../freertos/tasks.c **** 	#if( configGENERATE_RUN_TIME_STATS == 1 )
 293:../freertos/tasks.c **** 		uint32_t		ulRunTimeCounter;	/*< Stores the amount of time the task has spent in the Running state
 294:../freertos/tasks.c **** 	#endif
 295:../freertos/tasks.c **** 
 296:../freertos/tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
 297:../freertos/tasks.c **** 		/* Allocate a Newlib reent structure that is specific to this task.
 298:../freertos/tasks.c **** 		Note Newlib support has been included by popular demand, but is not
 299:../freertos/tasks.c **** 		used by the FreeRTOS maintainers themselves.  FreeRTOS is not
 300:../freertos/tasks.c **** 		responsible for resulting newlib operation.  User must be familiar with
 301:../freertos/tasks.c **** 		newlib and must provide system-wide implementations of the necessary
 302:../freertos/tasks.c **** 		stubs. Be warned that (at the time of writing) the current newlib design
 303:../freertos/tasks.c **** 		implements a system-wide malloc() that must be provided with locks. */
 304:../freertos/tasks.c **** 		struct	_reent xNewLib_reent;
 305:../freertos/tasks.c **** 	#endif
 306:../freertos/tasks.c **** 
 307:../freertos/tasks.c **** 	#if( configUSE_TASK_NOTIFICATIONS == 1 )
 308:../freertos/tasks.c **** 		volatile uint32_t ulNotifiedValue;
 309:../freertos/tasks.c **** 		volatile uint8_t ucNotifyState;
 310:../freertos/tasks.c **** 	#endif
 311:../freertos/tasks.c **** 
 312:../freertos/tasks.c **** 	/* See the comments in FreeRTOS.h with the definition of
 313:../freertos/tasks.c **** 	tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE. */
 314:../freertos/tasks.c **** 	#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolida
ARM GAS  /tmp/ccaP1CVS.s 			page 8


 315:../freertos/tasks.c **** 		uint8_t	ucStaticallyAllocated; 		/*< Set to pdTRUE if the task is a statically allocated to ensur
 316:../freertos/tasks.c **** 	#endif
 317:../freertos/tasks.c **** 
 318:../freertos/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
 319:../freertos/tasks.c **** 		uint8_t ucDelayAborted;
 320:../freertos/tasks.c **** 	#endif
 321:../freertos/tasks.c **** 
 322:../freertos/tasks.c **** 	#if( configUSE_POSIX_ERRNO == 1 )
 323:../freertos/tasks.c **** 		int iTaskErrno;
 324:../freertos/tasks.c **** 	#endif
 325:../freertos/tasks.c **** 
 326:../freertos/tasks.c **** } tskTCB;
 327:../freertos/tasks.c **** 
 328:../freertos/tasks.c **** /* The old tskTCB name is maintained above then typedefed to the new TCB_t name
 329:../freertos/tasks.c **** below to enable the use of older kernel aware debuggers. */
 330:../freertos/tasks.c **** typedef tskTCB TCB_t;
 331:../freertos/tasks.c **** 
 332:../freertos/tasks.c **** /*lint -save -e956 A manual analysis and inspection has been used to determine
 333:../freertos/tasks.c **** which static variables must be declared volatile. */
 334:../freertos/tasks.c **** PRIVILEGED_DATA TCB_t * volatile pxCurrentTCB = NULL;
 335:../freertos/tasks.c **** 
 336:../freertos/tasks.c **** /* Lists for ready and blocked tasks. --------------------
 337:../freertos/tasks.c **** xDelayedTaskList1 and xDelayedTaskList2 could be move to function scople but
 338:../freertos/tasks.c **** doing so breaks some kernel aware debuggers and debuggers that rely on removing
 339:../freertos/tasks.c **** the static qualifier. */
 340:../freertos/tasks.c **** PRIVILEGED_DATA static List_t pxReadyTasksLists[ configMAX_PRIORITIES ];/*< Prioritised ready tasks
 341:../freertos/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList1;						/*< Delayed tasks. */
 342:../freertos/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList2;						/*< Delayed tasks (two lists are used - one f
 343:../freertos/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxDelayedTaskList;				/*< Points to the delayed task list 
 344:../freertos/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxOverflowDelayedTaskList;		/*< Points to the delayed task
 345:../freertos/tasks.c **** PRIVILEGED_DATA static List_t xPendingReadyList;						/*< Tasks that have been readied while the sc
 346:../freertos/tasks.c **** 
 347:../freertos/tasks.c **** #if( INCLUDE_vTaskDelete == 1 )
 348:../freertos/tasks.c **** 
 349:../freertos/tasks.c **** 	PRIVILEGED_DATA static List_t xTasksWaitingTermination;				/*< Tasks that have been deleted - but 
 350:../freertos/tasks.c **** 	PRIVILEGED_DATA static volatile UBaseType_t uxDeletedTasksWaitingCleanUp = ( UBaseType_t ) 0U;
 351:../freertos/tasks.c **** 
 352:../freertos/tasks.c **** #endif
 353:../freertos/tasks.c **** 
 354:../freertos/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 355:../freertos/tasks.c **** 
 356:../freertos/tasks.c **** 	PRIVILEGED_DATA static List_t xSuspendedTaskList;					/*< Tasks that are currently suspended. */
 357:../freertos/tasks.c **** 
 358:../freertos/tasks.c **** #endif
 359:../freertos/tasks.c **** 
 360:../freertos/tasks.c **** /* Global POSIX errno. Its value is changed upon context switching to match
 361:../freertos/tasks.c **** the errno of the currently running task. */
 362:../freertos/tasks.c **** #if ( configUSE_POSIX_ERRNO == 1 )
 363:../freertos/tasks.c **** 	int FreeRTOS_errno = 0;
 364:../freertos/tasks.c **** #endif
 365:../freertos/tasks.c **** 
 366:../freertos/tasks.c **** /* Other file private variables. --------------------------------*/
 367:../freertos/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxCurrentNumberOfTasks 	= ( UBaseType_t ) 0U;
 368:../freertos/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xTickCount 				= ( TickType_t ) configINITIAL_TICK_COUNT
 369:../freertos/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxTopReadyPriority 		= tskIDLE_PRIORITY;
 370:../freertos/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xSchedulerRunning 		= pdFALSE;
 371:../freertos/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxPendedTicks 			= ( UBaseType_t ) 0U;
ARM GAS  /tmp/ccaP1CVS.s 			page 9


 372:../freertos/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xYieldPending 			= pdFALSE;
 373:../freertos/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xNumOfOverflows 			= ( BaseType_t ) 0;
 374:../freertos/tasks.c **** PRIVILEGED_DATA static UBaseType_t uxTaskNumber 					= ( UBaseType_t ) 0U;
 375:../freertos/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xNextTaskUnblockTime		= ( TickType_t ) 0U; /* Initialise
 376:../freertos/tasks.c **** PRIVILEGED_DATA static TaskHandle_t xIdleTaskHandle					= NULL;			/*< Holds the handle of the idle 
 377:../freertos/tasks.c **** 
 378:../freertos/tasks.c **** /* Context switches are held pending while the scheduler is suspended.  Also,
 379:../freertos/tasks.c **** interrupts must not manipulate the xStateListItem of a TCB, or any of the
 380:../freertos/tasks.c **** lists the xStateListItem can be referenced from, if the scheduler is suspended.
 381:../freertos/tasks.c **** If an interrupt needs to unblock a task while the scheduler is suspended then it
 382:../freertos/tasks.c **** moves the task's event list item into the xPendingReadyList, ready for the
 383:../freertos/tasks.c **** kernel to move the task from the pending ready list into the real ready list
 384:../freertos/tasks.c **** when the scheduler is unsuspended.  The pending ready list itself can only be
 385:../freertos/tasks.c **** accessed from a critical section. */
 386:../freertos/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxSchedulerSuspended	= ( UBaseType_t ) pdFALSE;
 387:../freertos/tasks.c **** 
 388:../freertos/tasks.c **** #if ( configGENERATE_RUN_TIME_STATS == 1 )
 389:../freertos/tasks.c **** 
 390:../freertos/tasks.c **** 	/* Do not move these variables to function scope as doing so prevents the
 391:../freertos/tasks.c **** 	code working with debuggers that need to remove the static qualifier. */
 392:../freertos/tasks.c **** 	PRIVILEGED_DATA static uint32_t ulTaskSwitchedInTime = 0UL;	/*< Holds the value of a timer/counter
 393:../freertos/tasks.c **** 	PRIVILEGED_DATA static uint32_t ulTotalRunTime = 0UL;		/*< Holds the total amount of execution tim
 394:../freertos/tasks.c **** 
 395:../freertos/tasks.c **** #endif
 396:../freertos/tasks.c **** 
 397:../freertos/tasks.c **** /*lint -restore */
 398:../freertos/tasks.c **** 
 399:../freertos/tasks.c **** /*-----------------------------------------------------------*/
 400:../freertos/tasks.c **** 
 401:../freertos/tasks.c **** /* Callback function prototypes. --------------------------*/
 402:../freertos/tasks.c **** #if(  configCHECK_FOR_STACK_OVERFLOW > 0 )
 403:../freertos/tasks.c **** 
 404:../freertos/tasks.c **** 	extern void vApplicationStackOverflowHook( TaskHandle_t xTask, char *pcTaskName );
 405:../freertos/tasks.c **** 
 406:../freertos/tasks.c **** #endif
 407:../freertos/tasks.c **** 
 408:../freertos/tasks.c **** #if( configUSE_TICK_HOOK > 0 )
 409:../freertos/tasks.c **** 
 410:../freertos/tasks.c **** 	extern void vApplicationTickHook( void ); /*lint !e526 Symbol not defined as it is an application 
 411:../freertos/tasks.c **** 
 412:../freertos/tasks.c **** #endif
 413:../freertos/tasks.c **** 
 414:../freertos/tasks.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 415:../freertos/tasks.c **** 
 416:../freertos/tasks.c **** 	extern void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxI
 417:../freertos/tasks.c **** 
 418:../freertos/tasks.c **** #endif
 419:../freertos/tasks.c **** 
 420:../freertos/tasks.c **** /* File private functions. --------------------------------*/
 421:../freertos/tasks.c **** 
 422:../freertos/tasks.c **** /**
 423:../freertos/tasks.c ****  * Utility task that simply returns pdTRUE if the task referenced by xTask is
 424:../freertos/tasks.c ****  * currently in the Suspended state, or pdFALSE if the task referenced by xTask
 425:../freertos/tasks.c ****  * is in any other state.
 426:../freertos/tasks.c ****  */
 427:../freertos/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 428:../freertos/tasks.c **** 
ARM GAS  /tmp/ccaP1CVS.s 			page 10


 429:../freertos/tasks.c **** 	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask ) PRIVILEGED_FUNCTION;
 430:../freertos/tasks.c **** 
 431:../freertos/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
 432:../freertos/tasks.c **** 
 433:../freertos/tasks.c **** /*
 434:../freertos/tasks.c ****  * Utility to ready all the lists used by the scheduler.  This is called
 435:../freertos/tasks.c ****  * automatically upon the creation of the first task.
 436:../freertos/tasks.c ****  */
 437:../freertos/tasks.c **** static void prvInitialiseTaskLists( void ) PRIVILEGED_FUNCTION;
 438:../freertos/tasks.c **** 
 439:../freertos/tasks.c **** /*
 440:../freertos/tasks.c ****  * The idle task, which as all tasks is implemented as a never ending loop.
 441:../freertos/tasks.c ****  * The idle task is automatically created and added to the ready lists upon
 442:../freertos/tasks.c ****  * creation of the first user task.
 443:../freertos/tasks.c ****  *
 444:../freertos/tasks.c ****  * The portTASK_FUNCTION_PROTO() macro is used to allow port/compiler specific
 445:../freertos/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
 446:../freertos/tasks.c ****  *
 447:../freertos/tasks.c ****  * void prvIdleTask( void *pvParameters );
 448:../freertos/tasks.c ****  *
 449:../freertos/tasks.c ****  */
 450:../freertos/tasks.c **** static portTASK_FUNCTION_PROTO( prvIdleTask, pvParameters );
 451:../freertos/tasks.c **** 
 452:../freertos/tasks.c **** /*
 453:../freertos/tasks.c ****  * Utility to free all memory allocated by the scheduler to hold a TCB,
 454:../freertos/tasks.c ****  * including the stack pointed to by the TCB.
 455:../freertos/tasks.c ****  *
 456:../freertos/tasks.c ****  * This does not free memory allocated by the task itself (i.e. memory
 457:../freertos/tasks.c ****  * allocated by calls to pvPortMalloc from within the tasks application code).
 458:../freertos/tasks.c ****  */
 459:../freertos/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
 460:../freertos/tasks.c **** 
 461:../freertos/tasks.c **** 	static void prvDeleteTCB( TCB_t *pxTCB ) PRIVILEGED_FUNCTION;
 462:../freertos/tasks.c **** 
 463:../freertos/tasks.c **** #endif
 464:../freertos/tasks.c **** 
 465:../freertos/tasks.c **** /*
 466:../freertos/tasks.c ****  * Used only by the idle task.  This checks to see if anything has been placed
 467:../freertos/tasks.c ****  * in the list of tasks waiting to be deleted.  If so the task is cleaned up
 468:../freertos/tasks.c ****  * and its TCB deleted.
 469:../freertos/tasks.c ****  */
 470:../freertos/tasks.c **** static void prvCheckTasksWaitingTermination( void ) PRIVILEGED_FUNCTION;
 471:../freertos/tasks.c **** 
 472:../freertos/tasks.c **** /*
 473:../freertos/tasks.c ****  * The currently executing task is entering the Blocked state.  Add the task to
 474:../freertos/tasks.c ****  * either the current or the overflow delayed task list.
 475:../freertos/tasks.c ****  */
 476:../freertos/tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockInde
 477:../freertos/tasks.c **** 
 478:../freertos/tasks.c **** /*
 479:../freertos/tasks.c ****  * Fills an TaskStatus_t structure with information on each task that is
 480:../freertos/tasks.c ****  * referenced from the pxList list (which may be a ready list, a delayed list,
 481:../freertos/tasks.c ****  * a suspended list, etc.).
 482:../freertos/tasks.c ****  *
 483:../freertos/tasks.c ****  * THIS FUNCTION IS INTENDED FOR DEBUGGING ONLY, AND SHOULD NOT BE CALLED FROM
 484:../freertos/tasks.c ****  * NORMAL APPLICATION CODE.
 485:../freertos/tasks.c ****  */
ARM GAS  /tmp/ccaP1CVS.s 			page 11


 486:../freertos/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
 487:../freertos/tasks.c **** 
 488:../freertos/tasks.c **** 	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, 
 489:../freertos/tasks.c **** 
 490:../freertos/tasks.c **** #endif
 491:../freertos/tasks.c **** 
 492:../freertos/tasks.c **** /*
 493:../freertos/tasks.c ****  * Searches pxList for a task with name pcNameToQuery - returning a handle to
 494:../freertos/tasks.c ****  * the task if it is found, or NULL if the task is not found.
 495:../freertos/tasks.c ****  */
 496:../freertos/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
 497:../freertos/tasks.c **** 
 498:../freertos/tasks.c **** 	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] ) PRIVI
 499:../freertos/tasks.c **** 
 500:../freertos/tasks.c **** #endif
 501:../freertos/tasks.c **** 
 502:../freertos/tasks.c **** /*
 503:../freertos/tasks.c ****  * When a task is created, the stack of the task is filled with a known value.
 504:../freertos/tasks.c ****  * This function determines the 'high water mark' of the task stack by
 505:../freertos/tasks.c ****  * determining how much of the stack remains at the original preset value.
 506:../freertos/tasks.c ****  */
 507:../freertos/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUD
 508:../freertos/tasks.c **** 
 509:../freertos/tasks.c **** 	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte ) PRIVILEGE
 510:../freertos/tasks.c **** 
 511:../freertos/tasks.c **** #endif
 512:../freertos/tasks.c **** 
 513:../freertos/tasks.c **** /*
 514:../freertos/tasks.c ****  * Return the amount of time, in ticks, that will pass before the kernel will
 515:../freertos/tasks.c ****  * next move a task from the Blocked state to the Running state.
 516:../freertos/tasks.c ****  *
 517:../freertos/tasks.c ****  * This conditional compilation should use inequality to 0, not equality to 1.
 518:../freertos/tasks.c ****  * This is to ensure portSUPPRESS_TICKS_AND_SLEEP() can be called when user
 519:../freertos/tasks.c ****  * defined low power mode implementations require configUSE_TICKLESS_IDLE to be
 520:../freertos/tasks.c ****  * set to a value other than 1.
 521:../freertos/tasks.c ****  */
 522:../freertos/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
 523:../freertos/tasks.c **** 
 524:../freertos/tasks.c **** 	static TickType_t prvGetExpectedIdleTime( void ) PRIVILEGED_FUNCTION;
 525:../freertos/tasks.c **** 
 526:../freertos/tasks.c **** #endif
 527:../freertos/tasks.c **** 
 528:../freertos/tasks.c **** /*
 529:../freertos/tasks.c ****  * Set xNextTaskUnblockTime to the time at which the next Blocked state task
 530:../freertos/tasks.c ****  * will exit the Blocked state.
 531:../freertos/tasks.c ****  */
 532:../freertos/tasks.c **** static void prvResetNextTaskUnblockTime( void );
 533:../freertos/tasks.c **** 
 534:../freertos/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
 535:../freertos/tasks.c **** 
 536:../freertos/tasks.c **** 	/*
 537:../freertos/tasks.c **** 	 * Helper function used to pad task names with spaces when printing out
 538:../freertos/tasks.c **** 	 * human readable tables of task information.
 539:../freertos/tasks.c **** 	 */
 540:../freertos/tasks.c **** 	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName ) PRIVILEGED_FUNCTION;
 541:../freertos/tasks.c **** 
 542:../freertos/tasks.c **** #endif
ARM GAS  /tmp/ccaP1CVS.s 			page 12


 543:../freertos/tasks.c **** 
 544:../freertos/tasks.c **** /*
 545:../freertos/tasks.c ****  * Called after a Task_t structure has been allocated either statically or
 546:../freertos/tasks.c ****  * dynamically to fill in the structure's members.
 547:../freertos/tasks.c ****  */
 548:../freertos/tasks.c **** static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 549:../freertos/tasks.c **** 									const char * const pcName, 		/*lint !e971 Unqualified char types are allowed for strings a
 550:../freertos/tasks.c **** 									const uint32_t ulStackDepth,
 551:../freertos/tasks.c **** 									void * const pvParameters,
 552:../freertos/tasks.c **** 									UBaseType_t uxPriority,
 553:../freertos/tasks.c **** 									TaskHandle_t * const pxCreatedTask,
 554:../freertos/tasks.c **** 									TCB_t *pxNewTCB,
 555:../freertos/tasks.c **** 									const MemoryRegion_t * const xRegions ) PRIVILEGED_FUNCTION;
 556:../freertos/tasks.c **** 
 557:../freertos/tasks.c **** /*
 558:../freertos/tasks.c ****  * Called after a new task has been created and initialised to place the task
 559:../freertos/tasks.c ****  * under the control of the scheduler.
 560:../freertos/tasks.c ****  */
 561:../freertos/tasks.c **** static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB ) PRIVILEGED_FUNCTION;
 562:../freertos/tasks.c **** 
 563:../freertos/tasks.c **** /*
 564:../freertos/tasks.c ****  * freertos_tasks_c_additions_init() should only be called if the user definable
 565:../freertos/tasks.c ****  * macro FREERTOS_TASKS_C_ADDITIONS_INIT() is defined, as that is the only macro
 566:../freertos/tasks.c ****  * called by the function.
 567:../freertos/tasks.c ****  */
 568:../freertos/tasks.c **** #ifdef FREERTOS_TASKS_C_ADDITIONS_INIT
 569:../freertos/tasks.c **** 
 570:../freertos/tasks.c **** 	static void freertos_tasks_c_additions_init( void ) PRIVILEGED_FUNCTION;
 571:../freertos/tasks.c **** 
 572:../freertos/tasks.c **** #endif
 573:../freertos/tasks.c **** 
 574:../freertos/tasks.c **** /*-----------------------------------------------------------*/
 575:../freertos/tasks.c **** 
 576:../freertos/tasks.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 577:../freertos/tasks.c **** 
 578:../freertos/tasks.c **** 	TaskHandle_t xTaskCreateStatic(	TaskFunction_t pxTaskCode,
 579:../freertos/tasks.c **** 									const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings an
 580:../freertos/tasks.c **** 									const uint32_t ulStackDepth,
 581:../freertos/tasks.c **** 									void * const pvParameters,
 582:../freertos/tasks.c **** 									UBaseType_t uxPriority,
 583:../freertos/tasks.c **** 									StackType_t * const puxStackBuffer,
 584:../freertos/tasks.c **** 									StaticTask_t * const pxTaskBuffer )
 585:../freertos/tasks.c **** 	{
 586:../freertos/tasks.c **** 	TCB_t *pxNewTCB;
 587:../freertos/tasks.c **** 	TaskHandle_t xReturn;
 588:../freertos/tasks.c **** 
 589:../freertos/tasks.c **** 		configASSERT( puxStackBuffer != NULL );
 590:../freertos/tasks.c **** 		configASSERT( pxTaskBuffer != NULL );
 591:../freertos/tasks.c **** 
 592:../freertos/tasks.c **** 		#if( configASSERT_DEFINED == 1 )
 593:../freertos/tasks.c **** 		{
 594:../freertos/tasks.c **** 			/* Sanity check that the size of the structure used to declare a
 595:../freertos/tasks.c **** 			variable of type StaticTask_t equals the size of the real task
 596:../freertos/tasks.c **** 			structure. */
 597:../freertos/tasks.c **** 			volatile size_t xSize = sizeof( StaticTask_t );
 598:../freertos/tasks.c **** 			configASSERT( xSize == sizeof( TCB_t ) );
 599:../freertos/tasks.c **** 			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
ARM GAS  /tmp/ccaP1CVS.s 			page 13


 600:../freertos/tasks.c **** 		}
 601:../freertos/tasks.c **** 		#endif /* configASSERT_DEFINED */
 602:../freertos/tasks.c **** 
 603:../freertos/tasks.c **** 
 604:../freertos/tasks.c **** 		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 605:../freertos/tasks.c **** 		{
 606:../freertos/tasks.c **** 			/* The memory used for the task's TCB and stack are passed into this
 607:../freertos/tasks.c **** 			function - use them. */
 608:../freertos/tasks.c **** 			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures ar
 609:../freertos/tasks.c **** 			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 610:../freertos/tasks.c **** 
 611:../freertos/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consoli
 612:../freertos/tasks.c **** 			{
 613:../freertos/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 614:../freertos/tasks.c **** 				task was created statically in case the task is later deleted. */
 615:../freertos/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 616:../freertos/tasks.c **** 			}
 617:../freertos/tasks.c **** 			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 618:../freertos/tasks.c **** 
 619:../freertos/tasks.c **** 			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNe
 620:../freertos/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 621:../freertos/tasks.c **** 		}
 622:../freertos/tasks.c **** 		else
 623:../freertos/tasks.c **** 		{
 624:../freertos/tasks.c **** 			xReturn = NULL;
 625:../freertos/tasks.c **** 		}
 626:../freertos/tasks.c **** 
 627:../freertos/tasks.c **** 		return xReturn;
 628:../freertos/tasks.c **** 	}
 629:../freertos/tasks.c **** 
 630:../freertos/tasks.c **** #endif /* SUPPORT_STATIC_ALLOCATION */
 631:../freertos/tasks.c **** /*-----------------------------------------------------------*/
 632:../freertos/tasks.c **** 
 633:../freertos/tasks.c **** #if( ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 634:../freertos/tasks.c **** 
 635:../freertos/tasks.c **** 	BaseType_t xTaskCreateRestrictedStatic( const TaskParameters_t * const pxTaskDefinition, TaskHandl
 636:../freertos/tasks.c **** 	{
 637:../freertos/tasks.c **** 	TCB_t *pxNewTCB;
 638:../freertos/tasks.c **** 	BaseType_t xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 639:../freertos/tasks.c **** 
 640:../freertos/tasks.c **** 		configASSERT( pxTaskDefinition->puxStackBuffer != NULL );
 641:../freertos/tasks.c **** 		configASSERT( pxTaskDefinition->pxTaskBuffer != NULL );
 642:../freertos/tasks.c **** 
 643:../freertos/tasks.c **** 		if( ( pxTaskDefinition->puxStackBuffer != NULL ) && ( pxTaskDefinition->pxTaskBuffer != NULL ) )
 644:../freertos/tasks.c **** 		{
 645:../freertos/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends
 646:../freertos/tasks.c **** 			on the implementation of the port malloc function and whether or
 647:../freertos/tasks.c **** 			not static allocation is being used. */
 648:../freertos/tasks.c **** 			pxNewTCB = ( TCB_t * ) pxTaskDefinition->pxTaskBuffer;
 649:../freertos/tasks.c **** 
 650:../freertos/tasks.c **** 			/* Store the stack location in the TCB. */
 651:../freertos/tasks.c **** 			pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 652:../freertos/tasks.c **** 
 653:../freertos/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 654:../freertos/tasks.c **** 			{
 655:../freertos/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 656:../freertos/tasks.c **** 				task was created statically in case the task is later deleted. */
ARM GAS  /tmp/ccaP1CVS.s 			page 14


 657:../freertos/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 658:../freertos/tasks.c **** 			}
 659:../freertos/tasks.c **** 			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 660:../freertos/tasks.c **** 
 661:../freertos/tasks.c **** 			prvInitialiseNewTask(	pxTaskDefinition->pvTaskCode,
 662:../freertos/tasks.c **** 									pxTaskDefinition->pcName,
 663:../freertos/tasks.c **** 									( uint32_t ) pxTaskDefinition->usStackDepth,
 664:../freertos/tasks.c **** 									pxTaskDefinition->pvParameters,
 665:../freertos/tasks.c **** 									pxTaskDefinition->uxPriority,
 666:../freertos/tasks.c **** 									pxCreatedTask, pxNewTCB,
 667:../freertos/tasks.c **** 									pxTaskDefinition->xRegions );
 668:../freertos/tasks.c **** 
 669:../freertos/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 670:../freertos/tasks.c **** 			xReturn = pdPASS;
 671:../freertos/tasks.c **** 		}
 672:../freertos/tasks.c **** 
 673:../freertos/tasks.c **** 		return xReturn;
 674:../freertos/tasks.c **** 	}
 675:../freertos/tasks.c **** 
 676:../freertos/tasks.c **** #endif /* ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
 677:../freertos/tasks.c **** /*-----------------------------------------------------------*/
 678:../freertos/tasks.c **** 
 679:../freertos/tasks.c **** #if( ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 680:../freertos/tasks.c **** 
 681:../freertos/tasks.c **** 	BaseType_t xTaskCreateRestricted( const TaskParameters_t * const pxTaskDefinition, TaskHandle_t *p
 682:../freertos/tasks.c **** 	{
 683:../freertos/tasks.c **** 	TCB_t *pxNewTCB;
 684:../freertos/tasks.c **** 	BaseType_t xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 685:../freertos/tasks.c **** 
 686:../freertos/tasks.c **** 		configASSERT( pxTaskDefinition->puxStackBuffer );
 687:../freertos/tasks.c **** 
 688:../freertos/tasks.c **** 		if( pxTaskDefinition->puxStackBuffer != NULL )
 689:../freertos/tasks.c **** 		{
 690:../freertos/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends
 691:../freertos/tasks.c **** 			on the implementation of the port malloc function and whether or
 692:../freertos/tasks.c **** 			not static allocation is being used. */
 693:../freertos/tasks.c **** 			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 694:../freertos/tasks.c **** 
 695:../freertos/tasks.c **** 			if( pxNewTCB != NULL )
 696:../freertos/tasks.c **** 			{
 697:../freertos/tasks.c **** 				/* Store the stack location in the TCB. */
 698:../freertos/tasks.c **** 				pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 699:../freertos/tasks.c **** 
 700:../freertos/tasks.c **** 				#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 701:../freertos/tasks.c **** 				{
 702:../freertos/tasks.c **** 					/* Tasks can be created statically or dynamically, so note
 703:../freertos/tasks.c **** 					this task had a statically allocated stack in case it is
 704:../freertos/tasks.c **** 					later deleted.  The TCB was allocated dynamically. */
 705:../freertos/tasks.c **** 					pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_ONLY;
 706:../freertos/tasks.c **** 				}
 707:../freertos/tasks.c **** 				#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 708:../freertos/tasks.c **** 
 709:../freertos/tasks.c **** 				prvInitialiseNewTask(	pxTaskDefinition->pvTaskCode,
 710:../freertos/tasks.c **** 										pxTaskDefinition->pcName,
 711:../freertos/tasks.c **** 										( uint32_t ) pxTaskDefinition->usStackDepth,
 712:../freertos/tasks.c **** 										pxTaskDefinition->pvParameters,
 713:../freertos/tasks.c **** 										pxTaskDefinition->uxPriority,
ARM GAS  /tmp/ccaP1CVS.s 			page 15


 714:../freertos/tasks.c **** 										pxCreatedTask, pxNewTCB,
 715:../freertos/tasks.c **** 										pxTaskDefinition->xRegions );
 716:../freertos/tasks.c **** 
 717:../freertos/tasks.c **** 				prvAddNewTaskToReadyList( pxNewTCB );
 718:../freertos/tasks.c **** 				xReturn = pdPASS;
 719:../freertos/tasks.c **** 			}
 720:../freertos/tasks.c **** 		}
 721:../freertos/tasks.c **** 
 722:../freertos/tasks.c **** 		return xReturn;
 723:../freertos/tasks.c **** 	}
 724:../freertos/tasks.c **** 
 725:../freertos/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
 726:../freertos/tasks.c **** /*-----------------------------------------------------------*/
 727:../freertos/tasks.c **** 
 728:../freertos/tasks.c **** #if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 729:../freertos/tasks.c **** 
 730:../freertos/tasks.c **** 	BaseType_t xTaskCreate(	TaskFunction_t pxTaskCode,
 731:../freertos/tasks.c **** 							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and 
 732:../freertos/tasks.c **** 							const configSTACK_DEPTH_TYPE usStackDepth,
 733:../freertos/tasks.c **** 							void * const pvParameters,
 734:../freertos/tasks.c **** 							UBaseType_t uxPriority,
 735:../freertos/tasks.c **** 							TaskHandle_t * const pxCreatedTask )
 736:../freertos/tasks.c **** 	{
 737:../freertos/tasks.c **** 	TCB_t *pxNewTCB;
 738:../freertos/tasks.c **** 	BaseType_t xReturn;
 739:../freertos/tasks.c **** 
 740:../freertos/tasks.c **** 		/* If the stack grows down then allocate the stack then the TCB so the stack
 741:../freertos/tasks.c **** 		does not grow into the TCB.  Likewise if the stack grows up then allocate
 742:../freertos/tasks.c **** 		the TCB then the stack. */
 743:../freertos/tasks.c **** 		#if( portSTACK_GROWTH > 0 )
 744:../freertos/tasks.c **** 		{
 745:../freertos/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends on
 746:../freertos/tasks.c **** 			the implementation of the port malloc function and whether or not static
 747:../freertos/tasks.c **** 			allocation is being used. */
 748:../freertos/tasks.c **** 			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 749:../freertos/tasks.c **** 
 750:../freertos/tasks.c **** 			if( pxNewTCB != NULL )
 751:../freertos/tasks.c **** 			{
 752:../freertos/tasks.c **** 				/* Allocate space for the stack used by the task being created.
 753:../freertos/tasks.c **** 				The base of the stack memory stored in the TCB so the task can
 754:../freertos/tasks.c **** 				be deleted later if required. */
 755:../freertos/tasks.c **** 				pxNewTCB->pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( Sta
 756:../freertos/tasks.c **** 
 757:../freertos/tasks.c **** 				if( pxNewTCB->pxStack == NULL )
 758:../freertos/tasks.c **** 				{
 759:../freertos/tasks.c **** 					/* Could not allocate the stack.  Delete the allocated TCB. */
 760:../freertos/tasks.c **** 					vPortFree( pxNewTCB );
 761:../freertos/tasks.c **** 					pxNewTCB = NULL;
 762:../freertos/tasks.c **** 				}
 763:../freertos/tasks.c **** 			}
 764:../freertos/tasks.c **** 		}
 765:../freertos/tasks.c **** 		#else /* portSTACK_GROWTH */
 766:../freertos/tasks.c **** 		{
 767:../freertos/tasks.c **** 		StackType_t *pxStack;
 768:../freertos/tasks.c **** 
 769:../freertos/tasks.c **** 			/* Allocate space for the stack used by the task being created. */
 770:../freertos/tasks.c **** 			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079
ARM GAS  /tmp/ccaP1CVS.s 			page 16


 771:../freertos/tasks.c **** 
 772:../freertos/tasks.c **** 			if( pxStack != NULL )
 773:../freertos/tasks.c **** 			{
 774:../freertos/tasks.c **** 				/* Allocate space for the TCB. */
 775:../freertos/tasks.c **** 				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returne
 776:../freertos/tasks.c **** 
 777:../freertos/tasks.c **** 				if( pxNewTCB != NULL )
 778:../freertos/tasks.c **** 				{
 779:../freertos/tasks.c **** 					/* Store the stack location in the TCB. */
 780:../freertos/tasks.c **** 					pxNewTCB->pxStack = pxStack;
 781:../freertos/tasks.c **** 				}
 782:../freertos/tasks.c **** 				else
 783:../freertos/tasks.c **** 				{
 784:../freertos/tasks.c **** 					/* The stack cannot be used as the TCB was not created.  Free
 785:../freertos/tasks.c **** 					it again. */
 786:../freertos/tasks.c **** 					vPortFree( pxStack );
 787:../freertos/tasks.c **** 				}
 788:../freertos/tasks.c **** 			}
 789:../freertos/tasks.c **** 			else
 790:../freertos/tasks.c **** 			{
 791:../freertos/tasks.c **** 				pxNewTCB = NULL;
 792:../freertos/tasks.c **** 			}
 793:../freertos/tasks.c **** 		}
 794:../freertos/tasks.c **** 		#endif /* portSTACK_GROWTH */
 795:../freertos/tasks.c **** 
 796:../freertos/tasks.c **** 		if( pxNewTCB != NULL )
 797:../freertos/tasks.c **** 		{
 798:../freertos/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consoli
 799:../freertos/tasks.c **** 			{
 800:../freertos/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 801:../freertos/tasks.c **** 				task was created dynamically in case it is later deleted. */
 802:../freertos/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 803:../freertos/tasks.c **** 			}
 804:../freertos/tasks.c **** 			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 805:../freertos/tasks.c **** 
 806:../freertos/tasks.c **** 			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, p
 807:../freertos/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 808:../freertos/tasks.c **** 			xReturn = pdPASS;
 809:../freertos/tasks.c **** 		}
 810:../freertos/tasks.c **** 		else
 811:../freertos/tasks.c **** 		{
 812:../freertos/tasks.c **** 			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 813:../freertos/tasks.c **** 		}
 814:../freertos/tasks.c **** 
 815:../freertos/tasks.c **** 		return xReturn;
 816:../freertos/tasks.c **** 	}
 817:../freertos/tasks.c **** 
 818:../freertos/tasks.c **** #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 819:../freertos/tasks.c **** /*-----------------------------------------------------------*/
 820:../freertos/tasks.c **** 
 821:../freertos/tasks.c **** static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 822:../freertos/tasks.c **** 									const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings an
 823:../freertos/tasks.c **** 									const uint32_t ulStackDepth,
 824:../freertos/tasks.c **** 									void * const pvParameters,
 825:../freertos/tasks.c **** 									UBaseType_t uxPriority,
 826:../freertos/tasks.c **** 									TaskHandle_t * const pxCreatedTask,
 827:../freertos/tasks.c **** 									TCB_t *pxNewTCB,
ARM GAS  /tmp/ccaP1CVS.s 			page 17


 828:../freertos/tasks.c **** 									const MemoryRegion_t * const xRegions )
 829:../freertos/tasks.c **** {
 830:../freertos/tasks.c **** StackType_t *pxTopOfStack;
 831:../freertos/tasks.c **** UBaseType_t x;
 832:../freertos/tasks.c **** 
 833:../freertos/tasks.c **** 	#if( portUSING_MPU_WRAPPERS == 1 )
 834:../freertos/tasks.c **** 		/* Should the task be created in privileged mode? */
 835:../freertos/tasks.c **** 		BaseType_t xRunPrivileged;
 836:../freertos/tasks.c **** 		if( ( uxPriority & portPRIVILEGE_BIT ) != 0U )
 837:../freertos/tasks.c **** 		{
 838:../freertos/tasks.c **** 			xRunPrivileged = pdTRUE;
 839:../freertos/tasks.c **** 		}
 840:../freertos/tasks.c **** 		else
 841:../freertos/tasks.c **** 		{
 842:../freertos/tasks.c **** 			xRunPrivileged = pdFALSE;
 843:../freertos/tasks.c **** 		}
 844:../freertos/tasks.c **** 		uxPriority &= ~portPRIVILEGE_BIT;
 845:../freertos/tasks.c **** 	#endif /* portUSING_MPU_WRAPPERS == 1 */
 846:../freertos/tasks.c **** 
 847:../freertos/tasks.c **** 	/* Avoid dependency on memset() if it is not required. */
 848:../freertos/tasks.c **** 	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
 849:../freertos/tasks.c **** 	{
 850:../freertos/tasks.c **** 		/* Fill the stack with a known value to assist debugging. */
 851:../freertos/tasks.c **** 		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof(
 852:../freertos/tasks.c **** 	}
 853:../freertos/tasks.c **** 	#endif /* tskSET_NEW_STACKS_TO_KNOWN_VALUE */
 854:../freertos/tasks.c **** 
 855:../freertos/tasks.c **** 	/* Calculate the top of stack address.  This depends on whether the stack
 856:../freertos/tasks.c **** 	grows from high memory to low (as per the 80x86) or vice versa.
 857:../freertos/tasks.c **** 	portSTACK_GROWTH is used to make the result positive or negative as required
 858:../freertos/tasks.c **** 	by the port. */
 859:../freertos/tasks.c **** 	#if( portSTACK_GROWTH < 0 )
 860:../freertos/tasks.c **** 	{
 861:../freertos/tasks.c **** 		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 862:../freertos/tasks.c **** 		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTE
 863:../freertos/tasks.c **** 
 864:../freertos/tasks.c **** 		/* Check the alignment of the calculated top of stack is correct. */
 865:../freertos/tasks.c **** 		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALI
 866:../freertos/tasks.c **** 
 867:../freertos/tasks.c **** 		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
 868:../freertos/tasks.c **** 		{
 869:../freertos/tasks.c **** 			/* Also record the stack's high address, which may assist
 870:../freertos/tasks.c **** 			debugging. */
 871:../freertos/tasks.c **** 			pxNewTCB->pxEndOfStack = pxTopOfStack;
 872:../freertos/tasks.c **** 		}
 873:../freertos/tasks.c **** 		#endif /* configRECORD_STACK_HIGH_ADDRESS */
 874:../freertos/tasks.c **** 	}
 875:../freertos/tasks.c **** 	#else /* portSTACK_GROWTH */
 876:../freertos/tasks.c **** 	{
 877:../freertos/tasks.c **** 		pxTopOfStack = pxNewTCB->pxStack;
 878:../freertos/tasks.c **** 
 879:../freertos/tasks.c **** 		/* Check the alignment of the stack buffer is correct. */
 880:../freertos/tasks.c **** 		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxNewTCB->pxStack & ( portPOINTER_SIZE_TYPE ) portBYT
 881:../freertos/tasks.c **** 
 882:../freertos/tasks.c **** 		/* The other extreme of the stack space is required if stack checking is
 883:../freertos/tasks.c **** 		performed. */
 884:../freertos/tasks.c **** 		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
ARM GAS  /tmp/ccaP1CVS.s 			page 18


 885:../freertos/tasks.c **** 	}
 886:../freertos/tasks.c **** 	#endif /* portSTACK_GROWTH */
 887:../freertos/tasks.c **** 
 888:../freertos/tasks.c **** 	/* Store the task name in the TCB. */
 889:../freertos/tasks.c **** 	if( pcName != NULL )
 890:../freertos/tasks.c **** 	{
 891:../freertos/tasks.c **** 		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 892:../freertos/tasks.c **** 		{
 893:../freertos/tasks.c **** 			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 894:../freertos/tasks.c **** 
 895:../freertos/tasks.c **** 			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
 896:../freertos/tasks.c **** 			configMAX_TASK_NAME_LEN characters just in case the memory after the
 897:../freertos/tasks.c **** 			string is not accessible (extremely unlikely). */
 898:../freertos/tasks.c **** 			if( pcName[ x ] == ( char ) 0x00 )
 899:../freertos/tasks.c **** 			{
 900:../freertos/tasks.c **** 				break;
 901:../freertos/tasks.c **** 			}
 902:../freertos/tasks.c **** 			else
 903:../freertos/tasks.c **** 			{
 904:../freertos/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
 905:../freertos/tasks.c **** 			}
 906:../freertos/tasks.c **** 		}
 907:../freertos/tasks.c **** 
 908:../freertos/tasks.c **** 		/* Ensure the name string is terminated in the case that the string length
 909:../freertos/tasks.c **** 		was greater or equal to configMAX_TASK_NAME_LEN. */
 910:../freertos/tasks.c **** 		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 911:../freertos/tasks.c **** 	}
 912:../freertos/tasks.c **** 	else
 913:../freertos/tasks.c **** 	{
 914:../freertos/tasks.c **** 		/* The task has not been given a name, so just ensure there is a NULL
 915:../freertos/tasks.c **** 		terminator when it is read out. */
 916:../freertos/tasks.c **** 		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 917:../freertos/tasks.c **** 	}
 918:../freertos/tasks.c **** 
 919:../freertos/tasks.c **** 	/* This is used as an array index so must ensure it's not too large.  First
 920:../freertos/tasks.c **** 	remove the privilege bit if one is present. */
 921:../freertos/tasks.c **** 	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 922:../freertos/tasks.c **** 	{
 923:../freertos/tasks.c **** 		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 924:../freertos/tasks.c **** 	}
 925:../freertos/tasks.c **** 	else
 926:../freertos/tasks.c **** 	{
 927:../freertos/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
 928:../freertos/tasks.c **** 	}
 929:../freertos/tasks.c **** 
 930:../freertos/tasks.c **** 	pxNewTCB->uxPriority = uxPriority;
 931:../freertos/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 932:../freertos/tasks.c **** 	{
 933:../freertos/tasks.c **** 		pxNewTCB->uxBasePriority = uxPriority;
 934:../freertos/tasks.c **** 		pxNewTCB->uxMutexesHeld = 0;
 935:../freertos/tasks.c **** 	}
 936:../freertos/tasks.c **** 	#endif /* configUSE_MUTEXES */
 937:../freertos/tasks.c **** 
 938:../freertos/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 939:../freertos/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 940:../freertos/tasks.c **** 
 941:../freertos/tasks.c **** 	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
ARM GAS  /tmp/ccaP1CVS.s 			page 19


 942:../freertos/tasks.c **** 	back to	the containing TCB from a generic item in a list. */
 943:../freertos/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 944:../freertos/tasks.c **** 
 945:../freertos/tasks.c **** 	/* Event lists are always in priority order. */
 946:../freertos/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( Ti
 947:../freertos/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 948:../freertos/tasks.c **** 
 949:../freertos/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
 950:../freertos/tasks.c **** 	{
 951:../freertos/tasks.c **** 		pxNewTCB->uxCriticalNesting = ( UBaseType_t ) 0U;
 952:../freertos/tasks.c **** 	}
 953:../freertos/tasks.c **** 	#endif /* portCRITICAL_NESTING_IN_TCB */
 954:../freertos/tasks.c **** 
 955:../freertos/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
 956:../freertos/tasks.c **** 	{
 957:../freertos/tasks.c **** 		pxNewTCB->pxTaskTag = NULL;
 958:../freertos/tasks.c **** 	}
 959:../freertos/tasks.c **** 	#endif /* configUSE_APPLICATION_TASK_TAG */
 960:../freertos/tasks.c **** 
 961:../freertos/tasks.c **** 	#if ( configGENERATE_RUN_TIME_STATS == 1 )
 962:../freertos/tasks.c **** 	{
 963:../freertos/tasks.c **** 		pxNewTCB->ulRunTimeCounter = 0UL;
 964:../freertos/tasks.c **** 	}
 965:../freertos/tasks.c **** 	#endif /* configGENERATE_RUN_TIME_STATS */
 966:../freertos/tasks.c **** 
 967:../freertos/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
 968:../freertos/tasks.c **** 	{
 969:../freertos/tasks.c **** 		vPortStoreTaskMPUSettings( &( pxNewTCB->xMPUSettings ), xRegions, pxNewTCB->pxStack, ulStackDepth
 970:../freertos/tasks.c **** 	}
 971:../freertos/tasks.c **** 	#else
 972:../freertos/tasks.c **** 	{
 973:../freertos/tasks.c **** 		/* Avoid compiler warning about unreferenced parameter. */
 974:../freertos/tasks.c **** 		( void ) xRegions;
 975:../freertos/tasks.c **** 	}
 976:../freertos/tasks.c **** 	#endif
 977:../freertos/tasks.c **** 
 978:../freertos/tasks.c **** 	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
 979:../freertos/tasks.c **** 	{
 980:../freertos/tasks.c **** 		for( x = 0; x < ( UBaseType_t ) configNUM_THREAD_LOCAL_STORAGE_POINTERS; x++ )
 981:../freertos/tasks.c **** 		{
 982:../freertos/tasks.c **** 			pxNewTCB->pvThreadLocalStoragePointers[ x ] = NULL;
 983:../freertos/tasks.c **** 		}
 984:../freertos/tasks.c **** 	}
 985:../freertos/tasks.c **** 	#endif
 986:../freertos/tasks.c **** 
 987:../freertos/tasks.c **** 	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
 988:../freertos/tasks.c **** 	{
 989:../freertos/tasks.c **** 		pxNewTCB->ulNotifiedValue = 0;
 990:../freertos/tasks.c **** 		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 991:../freertos/tasks.c **** 	}
 992:../freertos/tasks.c **** 	#endif
 993:../freertos/tasks.c **** 
 994:../freertos/tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
 995:../freertos/tasks.c **** 	{
 996:../freertos/tasks.c **** 		/* Initialise this task's Newlib reent structure. */
 997:../freertos/tasks.c **** 		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 998:../freertos/tasks.c **** 	}
ARM GAS  /tmp/ccaP1CVS.s 			page 20


 999:../freertos/tasks.c **** 	#endif
1000:../freertos/tasks.c **** 
1001:../freertos/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
1002:../freertos/tasks.c **** 	{
1003:../freertos/tasks.c **** 		pxNewTCB->ucDelayAborted = pdFALSE;
1004:../freertos/tasks.c **** 	}
1005:../freertos/tasks.c **** 	#endif
1006:../freertos/tasks.c **** 
1007:../freertos/tasks.c **** 	/* Initialize the TCB stack to look as if the task was already running,
1008:../freertos/tasks.c **** 	but had been interrupted by the scheduler.  The return address is set
1009:../freertos/tasks.c **** 	to the start of the task function. Once the stack has been initialised
1010:../freertos/tasks.c **** 	the top of stack variable is updated. */
1011:../freertos/tasks.c **** 	#if( portUSING_MPU_WRAPPERS == 1 )
1012:../freertos/tasks.c **** 	{
1013:../freertos/tasks.c **** 		/* If the port has capability to detect stack overflow,
1014:../freertos/tasks.c **** 		pass the stack end address to the stack initialization
1015:../freertos/tasks.c **** 		function as well. */
1016:../freertos/tasks.c **** 		#if( portHAS_STACK_OVERFLOW_CHECKING == 1 )
1017:../freertos/tasks.c **** 		{
1018:../freertos/tasks.c **** 			#if( portSTACK_GROWTH < 0 )
1019:../freertos/tasks.c **** 			{
1020:../freertos/tasks.c **** 				pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, pxTaskCode, pv
1021:../freertos/tasks.c **** 			}
1022:../freertos/tasks.c **** 			#else /* portSTACK_GROWTH */
1023:../freertos/tasks.c **** 			{
1024:../freertos/tasks.c **** 				pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxEndOfStack, pxTaskCod
1025:../freertos/tasks.c **** 			}
1026:../freertos/tasks.c **** 			#endif /* portSTACK_GROWTH */
1027:../freertos/tasks.c **** 		}
1028:../freertos/tasks.c **** 		#else /* portHAS_STACK_OVERFLOW_CHECKING */
1029:../freertos/tasks.c **** 		{
1030:../freertos/tasks.c **** 			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPriv
1031:../freertos/tasks.c **** 		}
1032:../freertos/tasks.c **** 		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
1033:../freertos/tasks.c **** 	}
1034:../freertos/tasks.c **** 	#else /* portUSING_MPU_WRAPPERS */
1035:../freertos/tasks.c **** 	{
1036:../freertos/tasks.c **** 		/* If the port has capability to detect stack overflow,
1037:../freertos/tasks.c **** 		pass the stack end address to the stack initialization
1038:../freertos/tasks.c **** 		function as well. */
1039:../freertos/tasks.c **** 		#if( portHAS_STACK_OVERFLOW_CHECKING == 1 )
1040:../freertos/tasks.c **** 		{
1041:../freertos/tasks.c **** 			#if( portSTACK_GROWTH < 0 )
1042:../freertos/tasks.c **** 			{
1043:../freertos/tasks.c **** 				pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, pxTaskCode, pv
1044:../freertos/tasks.c **** 			}
1045:../freertos/tasks.c **** 			#else /* portSTACK_GROWTH */
1046:../freertos/tasks.c **** 			{
1047:../freertos/tasks.c **** 				pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxEndOfStack, pxTaskCod
1048:../freertos/tasks.c **** 			}
1049:../freertos/tasks.c **** 			#endif /* portSTACK_GROWTH */
1050:../freertos/tasks.c **** 		}
1051:../freertos/tasks.c **** 		#else /* portHAS_STACK_OVERFLOW_CHECKING */
1052:../freertos/tasks.c **** 		{
1053:../freertos/tasks.c **** 			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
1054:../freertos/tasks.c **** 		}
1055:../freertos/tasks.c **** 		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
ARM GAS  /tmp/ccaP1CVS.s 			page 21


1056:../freertos/tasks.c **** 	}
1057:../freertos/tasks.c **** 	#endif /* portUSING_MPU_WRAPPERS */
1058:../freertos/tasks.c **** 
1059:../freertos/tasks.c **** 	if( pxCreatedTask != NULL )
1060:../freertos/tasks.c **** 	{
1061:../freertos/tasks.c **** 		/* Pass the handle out in an anonymous way.  The handle can be used to
1062:../freertos/tasks.c **** 		change the created task's priority, delete the created task, etc.*/
1063:../freertos/tasks.c **** 		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
1064:../freertos/tasks.c **** 	}
1065:../freertos/tasks.c **** 	else
1066:../freertos/tasks.c **** 	{
1067:../freertos/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
1068:../freertos/tasks.c **** 	}
1069:../freertos/tasks.c **** }
1070:../freertos/tasks.c **** /*-----------------------------------------------------------*/
1071:../freertos/tasks.c **** 
1072:../freertos/tasks.c **** static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
1073:../freertos/tasks.c **** {
1074:../freertos/tasks.c **** 	/* Ensure interrupts don't access the task lists while the lists are being
1075:../freertos/tasks.c **** 	updated. */
1076:../freertos/tasks.c **** 	taskENTER_CRITICAL();
1077:../freertos/tasks.c **** 	{
1078:../freertos/tasks.c **** 		uxCurrentNumberOfTasks++;
1079:../freertos/tasks.c **** 		if( pxCurrentTCB == NULL )
1080:../freertos/tasks.c **** 		{
1081:../freertos/tasks.c **** 			/* There are no other tasks, or all the other tasks are in
1082:../freertos/tasks.c **** 			the suspended state - make this the current task. */
1083:../freertos/tasks.c **** 			pxCurrentTCB = pxNewTCB;
1084:../freertos/tasks.c **** 
1085:../freertos/tasks.c **** 			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
1086:../freertos/tasks.c **** 			{
1087:../freertos/tasks.c **** 				/* This is the first task to be created so do the preliminary
1088:../freertos/tasks.c **** 				initialisation required.  We will not recover if this call
1089:../freertos/tasks.c **** 				fails, but we will report the failure. */
1090:../freertos/tasks.c **** 				prvInitialiseTaskLists();
1091:../freertos/tasks.c **** 			}
1092:../freertos/tasks.c **** 			else
1093:../freertos/tasks.c **** 			{
1094:../freertos/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1095:../freertos/tasks.c **** 			}
1096:../freertos/tasks.c **** 		}
1097:../freertos/tasks.c **** 		else
1098:../freertos/tasks.c **** 		{
1099:../freertos/tasks.c **** 			/* If the scheduler is not already running, make this task the
1100:../freertos/tasks.c **** 			current task if it is the highest priority task to be created
1101:../freertos/tasks.c **** 			so far. */
1102:../freertos/tasks.c **** 			if( xSchedulerRunning == pdFALSE )
1103:../freertos/tasks.c **** 			{
1104:../freertos/tasks.c **** 				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
1105:../freertos/tasks.c **** 				{
1106:../freertos/tasks.c **** 					pxCurrentTCB = pxNewTCB;
1107:../freertos/tasks.c **** 				}
1108:../freertos/tasks.c **** 				else
1109:../freertos/tasks.c **** 				{
1110:../freertos/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1111:../freertos/tasks.c **** 				}
1112:../freertos/tasks.c **** 			}
ARM GAS  /tmp/ccaP1CVS.s 			page 22


1113:../freertos/tasks.c **** 			else
1114:../freertos/tasks.c **** 			{
1115:../freertos/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1116:../freertos/tasks.c **** 			}
1117:../freertos/tasks.c **** 		}
1118:../freertos/tasks.c **** 
1119:../freertos/tasks.c **** 		uxTaskNumber++;
1120:../freertos/tasks.c **** 
1121:../freertos/tasks.c **** 		#if ( configUSE_TRACE_FACILITY == 1 )
1122:../freertos/tasks.c **** 		{
1123:../freertos/tasks.c **** 			/* Add a counter into the TCB for tracing only. */
1124:../freertos/tasks.c **** 			pxNewTCB->uxTCBNumber = uxTaskNumber;
1125:../freertos/tasks.c **** 		}
1126:../freertos/tasks.c **** 		#endif /* configUSE_TRACE_FACILITY */
1127:../freertos/tasks.c **** 		traceTASK_CREATE( pxNewTCB );
1128:../freertos/tasks.c **** 
1129:../freertos/tasks.c **** 		prvAddTaskToReadyList( pxNewTCB );
1130:../freertos/tasks.c **** 
1131:../freertos/tasks.c **** 		portSETUP_TCB( pxNewTCB );
1132:../freertos/tasks.c **** 	}
1133:../freertos/tasks.c **** 	taskEXIT_CRITICAL();
1134:../freertos/tasks.c **** 
1135:../freertos/tasks.c **** 	if( xSchedulerRunning != pdFALSE )
1136:../freertos/tasks.c **** 	{
1137:../freertos/tasks.c **** 		/* If the created task is of a higher priority than the current task
1138:../freertos/tasks.c **** 		then it should run now. */
1139:../freertos/tasks.c **** 		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
1140:../freertos/tasks.c **** 		{
1141:../freertos/tasks.c **** 			taskYIELD_IF_USING_PREEMPTION();
1142:../freertos/tasks.c **** 		}
1143:../freertos/tasks.c **** 		else
1144:../freertos/tasks.c **** 		{
1145:../freertos/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1146:../freertos/tasks.c **** 		}
1147:../freertos/tasks.c **** 	}
1148:../freertos/tasks.c **** 	else
1149:../freertos/tasks.c **** 	{
1150:../freertos/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
1151:../freertos/tasks.c **** 	}
1152:../freertos/tasks.c **** }
1153:../freertos/tasks.c **** /*-----------------------------------------------------------*/
1154:../freertos/tasks.c **** 
1155:../freertos/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
1156:../freertos/tasks.c **** 
1157:../freertos/tasks.c **** 	void vTaskDelete( TaskHandle_t xTaskToDelete )
1158:../freertos/tasks.c **** 	{
1159:../freertos/tasks.c **** 	TCB_t *pxTCB;
1160:../freertos/tasks.c **** 
1161:../freertos/tasks.c **** 		taskENTER_CRITICAL();
1162:../freertos/tasks.c **** 		{
1163:../freertos/tasks.c **** 			/* If null is passed in here then it is the calling task that is
1164:../freertos/tasks.c **** 			being deleted. */
1165:../freertos/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
1166:../freertos/tasks.c **** 
1167:../freertos/tasks.c **** 			/* Remove task from the ready list. */
1168:../freertos/tasks.c **** 			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1169:../freertos/tasks.c **** 			{
ARM GAS  /tmp/ccaP1CVS.s 			page 23


1170:../freertos/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1171:../freertos/tasks.c **** 			}
1172:../freertos/tasks.c **** 			else
1173:../freertos/tasks.c **** 			{
1174:../freertos/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1175:../freertos/tasks.c **** 			}
1176:../freertos/tasks.c **** 
1177:../freertos/tasks.c **** 			/* Is the task waiting on an event also? */
1178:../freertos/tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1179:../freertos/tasks.c **** 			{
1180:../freertos/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1181:../freertos/tasks.c **** 			}
1182:../freertos/tasks.c **** 			else
1183:../freertos/tasks.c **** 			{
1184:../freertos/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1185:../freertos/tasks.c **** 			}
1186:../freertos/tasks.c **** 
1187:../freertos/tasks.c **** 			/* Increment the uxTaskNumber also so kernel aware debuggers can
1188:../freertos/tasks.c **** 			detect that the task lists need re-generating.  This is done before
1189:../freertos/tasks.c **** 			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
1190:../freertos/tasks.c **** 			not return. */
1191:../freertos/tasks.c **** 			uxTaskNumber++;
1192:../freertos/tasks.c **** 
1193:../freertos/tasks.c **** 			if( pxTCB == pxCurrentTCB )
1194:../freertos/tasks.c **** 			{
1195:../freertos/tasks.c **** 				/* A task is deleting itself.  This cannot complete within the
1196:../freertos/tasks.c **** 				task itself, as a context switch to another task is required.
1197:../freertos/tasks.c **** 				Place the task in the termination list.  The idle task will
1198:../freertos/tasks.c **** 				check the termination list and free up any memory allocated by
1199:../freertos/tasks.c **** 				the scheduler for the TCB and stack of the deleted task. */
1200:../freertos/tasks.c **** 				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
1201:../freertos/tasks.c **** 
1202:../freertos/tasks.c **** 				/* Increment the ucTasksDeleted variable so the idle task knows
1203:../freertos/tasks.c **** 				there is a task that has been deleted and that it should therefore
1204:../freertos/tasks.c **** 				check the xTasksWaitingTermination list. */
1205:../freertos/tasks.c **** 				++uxDeletedTasksWaitingCleanUp;
1206:../freertos/tasks.c **** 
1207:../freertos/tasks.c **** 				/* The pre-delete hook is primarily for the Windows simulator,
1208:../freertos/tasks.c **** 				in which Windows specific clean up operations are performed,
1209:../freertos/tasks.c **** 				after which it is not possible to yield away from this task -
1210:../freertos/tasks.c **** 				hence xYieldPending is used to latch that a context switch is
1211:../freertos/tasks.c **** 				required. */
1212:../freertos/tasks.c **** 				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
1213:../freertos/tasks.c **** 			}
1214:../freertos/tasks.c **** 			else
1215:../freertos/tasks.c **** 			{
1216:../freertos/tasks.c **** 				--uxCurrentNumberOfTasks;
1217:../freertos/tasks.c **** 				prvDeleteTCB( pxTCB );
1218:../freertos/tasks.c **** 
1219:../freertos/tasks.c **** 				/* Reset the next expected unblock time in case it referred to
1220:../freertos/tasks.c **** 				the task that has just been deleted. */
1221:../freertos/tasks.c **** 				prvResetNextTaskUnblockTime();
1222:../freertos/tasks.c **** 			}
1223:../freertos/tasks.c **** 
1224:../freertos/tasks.c **** 			traceTASK_DELETE( pxTCB );
1225:../freertos/tasks.c **** 		}
1226:../freertos/tasks.c **** 		taskEXIT_CRITICAL();
ARM GAS  /tmp/ccaP1CVS.s 			page 24


1227:../freertos/tasks.c **** 
1228:../freertos/tasks.c **** 		/* Force a reschedule if it is the currently running task that has just
1229:../freertos/tasks.c **** 		been deleted. */
1230:../freertos/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
1231:../freertos/tasks.c **** 		{
1232:../freertos/tasks.c **** 			if( pxTCB == pxCurrentTCB )
1233:../freertos/tasks.c **** 			{
1234:../freertos/tasks.c **** 				configASSERT( uxSchedulerSuspended == 0 );
1235:../freertos/tasks.c **** 				portYIELD_WITHIN_API();
1236:../freertos/tasks.c **** 			}
1237:../freertos/tasks.c **** 			else
1238:../freertos/tasks.c **** 			{
1239:../freertos/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1240:../freertos/tasks.c **** 			}
1241:../freertos/tasks.c **** 		}
1242:../freertos/tasks.c **** 	}
1243:../freertos/tasks.c **** 
1244:../freertos/tasks.c **** #endif /* INCLUDE_vTaskDelete */
1245:../freertos/tasks.c **** /*-----------------------------------------------------------*/
1246:../freertos/tasks.c **** 
1247:../freertos/tasks.c **** #if ( INCLUDE_vTaskDelayUntil == 1 )
1248:../freertos/tasks.c **** 
1249:../freertos/tasks.c **** 	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
1250:../freertos/tasks.c **** 	{
1251:../freertos/tasks.c **** 	TickType_t xTimeToWake;
1252:../freertos/tasks.c **** 	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
1253:../freertos/tasks.c **** 
1254:../freertos/tasks.c **** 		configASSERT( pxPreviousWakeTime );
1255:../freertos/tasks.c **** 		configASSERT( ( xTimeIncrement > 0U ) );
1256:../freertos/tasks.c **** 		configASSERT( uxSchedulerSuspended == 0 );
1257:../freertos/tasks.c **** 
1258:../freertos/tasks.c **** 		vTaskSuspendAll();
1259:../freertos/tasks.c **** 		{
1260:../freertos/tasks.c **** 			/* Minor optimisation.  The tick count cannot change in this
1261:../freertos/tasks.c **** 			block. */
1262:../freertos/tasks.c **** 			const TickType_t xConstTickCount = xTickCount;
1263:../freertos/tasks.c **** 
1264:../freertos/tasks.c **** 			/* Generate the tick time at which the task wants to wake. */
1265:../freertos/tasks.c **** 			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
1266:../freertos/tasks.c **** 
1267:../freertos/tasks.c **** 			if( xConstTickCount < *pxPreviousWakeTime )
1268:../freertos/tasks.c **** 			{
1269:../freertos/tasks.c **** 				/* The tick count has overflowed since this function was
1270:../freertos/tasks.c **** 				lasted called.  In this case the only time we should ever
1271:../freertos/tasks.c **** 				actually delay is if the wake time has also	overflowed,
1272:../freertos/tasks.c **** 				and the wake time is greater than the tick time.  When this
1273:../freertos/tasks.c **** 				is the case it is as if neither time had overflowed. */
1274:../freertos/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
1275:../freertos/tasks.c **** 				{
1276:../freertos/tasks.c **** 					xShouldDelay = pdTRUE;
1277:../freertos/tasks.c **** 				}
1278:../freertos/tasks.c **** 				else
1279:../freertos/tasks.c **** 				{
1280:../freertos/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1281:../freertos/tasks.c **** 				}
1282:../freertos/tasks.c **** 			}
1283:../freertos/tasks.c **** 			else
ARM GAS  /tmp/ccaP1CVS.s 			page 25


1284:../freertos/tasks.c **** 			{
1285:../freertos/tasks.c **** 				/* The tick time has not overflowed.  In this case we will
1286:../freertos/tasks.c **** 				delay if either the wake time has overflowed, and/or the
1287:../freertos/tasks.c **** 				tick time is less than the wake time. */
1288:../freertos/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
1289:../freertos/tasks.c **** 				{
1290:../freertos/tasks.c **** 					xShouldDelay = pdTRUE;
1291:../freertos/tasks.c **** 				}
1292:../freertos/tasks.c **** 				else
1293:../freertos/tasks.c **** 				{
1294:../freertos/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1295:../freertos/tasks.c **** 				}
1296:../freertos/tasks.c **** 			}
1297:../freertos/tasks.c **** 
1298:../freertos/tasks.c **** 			/* Update the wake time ready for the next call. */
1299:../freertos/tasks.c **** 			*pxPreviousWakeTime = xTimeToWake;
1300:../freertos/tasks.c **** 
1301:../freertos/tasks.c **** 			if( xShouldDelay != pdFALSE )
1302:../freertos/tasks.c **** 			{
1303:../freertos/tasks.c **** 				traceTASK_DELAY_UNTIL( xTimeToWake );
1304:../freertos/tasks.c **** 
1305:../freertos/tasks.c **** 				/* prvAddCurrentTaskToDelayedList() needs the block time, not
1306:../freertos/tasks.c **** 				the time to wake, so subtract the current tick count. */
1307:../freertos/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
1308:../freertos/tasks.c **** 			}
1309:../freertos/tasks.c **** 			else
1310:../freertos/tasks.c **** 			{
1311:../freertos/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1312:../freertos/tasks.c **** 			}
1313:../freertos/tasks.c **** 		}
1314:../freertos/tasks.c **** 		xAlreadyYielded = xTaskResumeAll();
1315:../freertos/tasks.c **** 
1316:../freertos/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
1317:../freertos/tasks.c **** 		have put ourselves to sleep. */
1318:../freertos/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
1319:../freertos/tasks.c **** 		{
1320:../freertos/tasks.c **** 			portYIELD_WITHIN_API();
1321:../freertos/tasks.c **** 		}
1322:../freertos/tasks.c **** 		else
1323:../freertos/tasks.c **** 		{
1324:../freertos/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1325:../freertos/tasks.c **** 		}
1326:../freertos/tasks.c **** 	}
1327:../freertos/tasks.c **** 
1328:../freertos/tasks.c **** #endif /* INCLUDE_vTaskDelayUntil */
1329:../freertos/tasks.c **** /*-----------------------------------------------------------*/
1330:../freertos/tasks.c **** 
1331:../freertos/tasks.c **** #if ( INCLUDE_vTaskDelay == 1 )
1332:../freertos/tasks.c **** 
1333:../freertos/tasks.c **** 	void vTaskDelay( const TickType_t xTicksToDelay )
1334:../freertos/tasks.c **** 	{
1335:../freertos/tasks.c **** 	BaseType_t xAlreadyYielded = pdFALSE;
1336:../freertos/tasks.c **** 
1337:../freertos/tasks.c **** 		/* A delay time of zero just forces a reschedule. */
1338:../freertos/tasks.c **** 		if( xTicksToDelay > ( TickType_t ) 0U )
1339:../freertos/tasks.c **** 		{
1340:../freertos/tasks.c **** 			configASSERT( uxSchedulerSuspended == 0 );
ARM GAS  /tmp/ccaP1CVS.s 			page 26


1341:../freertos/tasks.c **** 			vTaskSuspendAll();
1342:../freertos/tasks.c **** 			{
1343:../freertos/tasks.c **** 				traceTASK_DELAY();
1344:../freertos/tasks.c **** 
1345:../freertos/tasks.c **** 				/* A task that is removed from the event list while the
1346:../freertos/tasks.c **** 				scheduler is suspended will not get placed in the ready
1347:../freertos/tasks.c **** 				list or removed from the blocked list until the scheduler
1348:../freertos/tasks.c **** 				is resumed.
1349:../freertos/tasks.c **** 
1350:../freertos/tasks.c **** 				This task cannot be in an event list as it is the currently
1351:../freertos/tasks.c **** 				executing task. */
1352:../freertos/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
1353:../freertos/tasks.c **** 			}
1354:../freertos/tasks.c **** 			xAlreadyYielded = xTaskResumeAll();
1355:../freertos/tasks.c **** 		}
1356:../freertos/tasks.c **** 		else
1357:../freertos/tasks.c **** 		{
1358:../freertos/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1359:../freertos/tasks.c **** 		}
1360:../freertos/tasks.c **** 
1361:../freertos/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
1362:../freertos/tasks.c **** 		have put ourselves to sleep. */
1363:../freertos/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
1364:../freertos/tasks.c **** 		{
1365:../freertos/tasks.c **** 			portYIELD_WITHIN_API();
1366:../freertos/tasks.c **** 		}
1367:../freertos/tasks.c **** 		else
1368:../freertos/tasks.c **** 		{
1369:../freertos/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1370:../freertos/tasks.c **** 		}
1371:../freertos/tasks.c **** 	}
1372:../freertos/tasks.c **** 
1373:../freertos/tasks.c **** #endif /* INCLUDE_vTaskDelay */
1374:../freertos/tasks.c **** /*-----------------------------------------------------------*/
1375:../freertos/tasks.c **** 
1376:../freertos/tasks.c **** #if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDel
1377:../freertos/tasks.c **** 
1378:../freertos/tasks.c **** 	eTaskState eTaskGetState( TaskHandle_t xTask )
1379:../freertos/tasks.c **** 	{
1380:../freertos/tasks.c **** 	eTaskState eReturn;
1381:../freertos/tasks.c **** 	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
1382:../freertos/tasks.c **** 	const TCB_t * const pxTCB = xTask;
1383:../freertos/tasks.c **** 
1384:../freertos/tasks.c **** 		configASSERT( pxTCB );
1385:../freertos/tasks.c **** 
1386:../freertos/tasks.c **** 		if( pxTCB == pxCurrentTCB )
1387:../freertos/tasks.c **** 		{
1388:../freertos/tasks.c **** 			/* The task calling this function is querying its own state. */
1389:../freertos/tasks.c **** 			eReturn = eRunning;
1390:../freertos/tasks.c **** 		}
1391:../freertos/tasks.c **** 		else
1392:../freertos/tasks.c **** 		{
1393:../freertos/tasks.c **** 			taskENTER_CRITICAL();
1394:../freertos/tasks.c **** 			{
1395:../freertos/tasks.c **** 				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
1396:../freertos/tasks.c **** 				pxDelayedList = pxDelayedTaskList;
1397:../freertos/tasks.c **** 				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
ARM GAS  /tmp/ccaP1CVS.s 			page 27


1398:../freertos/tasks.c **** 			}
1399:../freertos/tasks.c **** 			taskEXIT_CRITICAL();
1400:../freertos/tasks.c **** 
1401:../freertos/tasks.c **** 			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
1402:../freertos/tasks.c **** 			{
1403:../freertos/tasks.c **** 				/* The task being queried is referenced from one of the Blocked
1404:../freertos/tasks.c **** 				lists. */
1405:../freertos/tasks.c **** 				eReturn = eBlocked;
1406:../freertos/tasks.c **** 			}
1407:../freertos/tasks.c **** 
1408:../freertos/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
1409:../freertos/tasks.c **** 				else if( pxStateList == &xSuspendedTaskList )
1410:../freertos/tasks.c **** 				{
1411:../freertos/tasks.c **** 					/* The task being queried is referenced from the suspended
1412:../freertos/tasks.c **** 					list.  Is it genuinely suspended or is it blocked
1413:../freertos/tasks.c **** 					indefinitely? */
1414:../freertos/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
1415:../freertos/tasks.c **** 					{
1416:../freertos/tasks.c **** 						#if( configUSE_TASK_NOTIFICATIONS == 1 )
1417:../freertos/tasks.c **** 						{
1418:../freertos/tasks.c **** 							/* The task does not appear on the event list item of
1419:../freertos/tasks.c **** 							and of the RTOS objects, but could still be in the
1420:../freertos/tasks.c **** 							blocked state if it is waiting on its notification
1421:../freertos/tasks.c **** 							rather than waiting on an object. */
1422:../freertos/tasks.c **** 							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
1423:../freertos/tasks.c **** 							{
1424:../freertos/tasks.c **** 								eReturn = eBlocked;
1425:../freertos/tasks.c **** 							}
1426:../freertos/tasks.c **** 							else
1427:../freertos/tasks.c **** 							{
1428:../freertos/tasks.c **** 								eReturn = eSuspended;
1429:../freertos/tasks.c **** 							}
1430:../freertos/tasks.c **** 						}
1431:../freertos/tasks.c **** 						#else
1432:../freertos/tasks.c **** 						{
1433:../freertos/tasks.c **** 							eReturn = eSuspended;
1434:../freertos/tasks.c **** 						}
1435:../freertos/tasks.c **** 						#endif
1436:../freertos/tasks.c **** 					}
1437:../freertos/tasks.c **** 					else
1438:../freertos/tasks.c **** 					{
1439:../freertos/tasks.c **** 						eReturn = eBlocked;
1440:../freertos/tasks.c **** 					}
1441:../freertos/tasks.c **** 				}
1442:../freertos/tasks.c **** 			#endif
1443:../freertos/tasks.c **** 
1444:../freertos/tasks.c **** 			#if ( INCLUDE_vTaskDelete == 1 )
1445:../freertos/tasks.c **** 				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
1446:../freertos/tasks.c **** 				{
1447:../freertos/tasks.c **** 					/* The task being queried is referenced from the deleted
1448:../freertos/tasks.c **** 					tasks list, or it is not referenced from any lists at
1449:../freertos/tasks.c **** 					all. */
1450:../freertos/tasks.c **** 					eReturn = eDeleted;
1451:../freertos/tasks.c **** 				}
1452:../freertos/tasks.c **** 			#endif
1453:../freertos/tasks.c **** 
1454:../freertos/tasks.c **** 			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
ARM GAS  /tmp/ccaP1CVS.s 			page 28


1455:../freertos/tasks.c **** 			{
1456:../freertos/tasks.c **** 				/* If the task is not in any other state, it must be in the
1457:../freertos/tasks.c **** 				Ready (including pending ready) state. */
1458:../freertos/tasks.c **** 				eReturn = eReady;
1459:../freertos/tasks.c **** 			}
1460:../freertos/tasks.c **** 		}
1461:../freertos/tasks.c **** 
1462:../freertos/tasks.c **** 		return eReturn;
1463:../freertos/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
1464:../freertos/tasks.c **** 
1465:../freertos/tasks.c **** #endif /* INCLUDE_eTaskGetState */
1466:../freertos/tasks.c **** /*-----------------------------------------------------------*/
1467:../freertos/tasks.c **** 
1468:../freertos/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1469:../freertos/tasks.c **** 
1470:../freertos/tasks.c **** 	UBaseType_t uxTaskPriorityGet( const TaskHandle_t xTask )
1471:../freertos/tasks.c **** 	{
1472:../freertos/tasks.c **** 	TCB_t const *pxTCB;
1473:../freertos/tasks.c **** 	UBaseType_t uxReturn;
1474:../freertos/tasks.c **** 
1475:../freertos/tasks.c **** 		taskENTER_CRITICAL();
1476:../freertos/tasks.c **** 		{
1477:../freertos/tasks.c **** 			/* If null is passed in here then it is the priority of the task
1478:../freertos/tasks.c **** 			that called uxTaskPriorityGet() that is being queried. */
1479:../freertos/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
1480:../freertos/tasks.c **** 			uxReturn = pxTCB->uxPriority;
1481:../freertos/tasks.c **** 		}
1482:../freertos/tasks.c **** 		taskEXIT_CRITICAL();
1483:../freertos/tasks.c **** 
1484:../freertos/tasks.c **** 		return uxReturn;
1485:../freertos/tasks.c **** 	}
1486:../freertos/tasks.c **** 
1487:../freertos/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1488:../freertos/tasks.c **** /*-----------------------------------------------------------*/
1489:../freertos/tasks.c **** 
1490:../freertos/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1491:../freertos/tasks.c **** 
1492:../freertos/tasks.c **** 	UBaseType_t uxTaskPriorityGetFromISR( const TaskHandle_t xTask )
1493:../freertos/tasks.c **** 	{
1494:../freertos/tasks.c **** 	TCB_t const *pxTCB;
1495:../freertos/tasks.c **** 	UBaseType_t uxReturn, uxSavedInterruptState;
1496:../freertos/tasks.c **** 
1497:../freertos/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
1498:../freertos/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
1499:../freertos/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
1500:../freertos/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
1501:../freertos/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1502:../freertos/tasks.c **** 		is defined in FreeRTOSConfig.h then
1503:../freertos/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1504:../freertos/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
1505:../freertos/tasks.c **** 		been assigned a priority above the configured maximum system call
1506:../freertos/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
1507:../freertos/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
1508:../freertos/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
1509:../freertos/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
1510:../freertos/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
1511:../freertos/tasks.c **** 		provided on the following link:
ARM GAS  /tmp/ccaP1CVS.s 			page 29


1512:../freertos/tasks.c **** 		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
1513:../freertos/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1514:../freertos/tasks.c **** 
1515:../freertos/tasks.c **** 		uxSavedInterruptState = portSET_INTERRUPT_MASK_FROM_ISR();
1516:../freertos/tasks.c **** 		{
1517:../freertos/tasks.c **** 			/* If null is passed in here then it is the priority of the calling
1518:../freertos/tasks.c **** 			task that is being queried. */
1519:../freertos/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
1520:../freertos/tasks.c **** 			uxReturn = pxTCB->uxPriority;
1521:../freertos/tasks.c **** 		}
1522:../freertos/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptState );
1523:../freertos/tasks.c **** 
1524:../freertos/tasks.c **** 		return uxReturn;
1525:../freertos/tasks.c **** 	}
1526:../freertos/tasks.c **** 
1527:../freertos/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1528:../freertos/tasks.c **** /*-----------------------------------------------------------*/
1529:../freertos/tasks.c **** 
1530:../freertos/tasks.c **** #if ( INCLUDE_vTaskPrioritySet == 1 )
1531:../freertos/tasks.c **** 
1532:../freertos/tasks.c **** 	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
1533:../freertos/tasks.c **** 	{
1534:../freertos/tasks.c **** 	TCB_t *pxTCB;
1535:../freertos/tasks.c **** 	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
1536:../freertos/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
1537:../freertos/tasks.c **** 
1538:../freertos/tasks.c **** 		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
1539:../freertos/tasks.c **** 
1540:../freertos/tasks.c **** 		/* Ensure the new priority is valid. */
1541:../freertos/tasks.c **** 		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
1542:../freertos/tasks.c **** 		{
1543:../freertos/tasks.c **** 			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
1544:../freertos/tasks.c **** 		}
1545:../freertos/tasks.c **** 		else
1546:../freertos/tasks.c **** 		{
1547:../freertos/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1548:../freertos/tasks.c **** 		}
1549:../freertos/tasks.c **** 
1550:../freertos/tasks.c **** 		taskENTER_CRITICAL();
1551:../freertos/tasks.c **** 		{
1552:../freertos/tasks.c **** 			/* If null is passed in here then it is the priority of the calling
1553:../freertos/tasks.c **** 			task that is being changed. */
1554:../freertos/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
1555:../freertos/tasks.c **** 
1556:../freertos/tasks.c **** 			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );
1557:../freertos/tasks.c **** 
1558:../freertos/tasks.c **** 			#if ( configUSE_MUTEXES == 1 )
1559:../freertos/tasks.c **** 			{
1560:../freertos/tasks.c **** 				uxCurrentBasePriority = pxTCB->uxBasePriority;
1561:../freertos/tasks.c **** 			}
1562:../freertos/tasks.c **** 			#else
1563:../freertos/tasks.c **** 			{
1564:../freertos/tasks.c **** 				uxCurrentBasePriority = pxTCB->uxPriority;
1565:../freertos/tasks.c **** 			}
1566:../freertos/tasks.c **** 			#endif
1567:../freertos/tasks.c **** 
1568:../freertos/tasks.c **** 			if( uxCurrentBasePriority != uxNewPriority )
ARM GAS  /tmp/ccaP1CVS.s 			page 30


1569:../freertos/tasks.c **** 			{
1570:../freertos/tasks.c **** 				/* The priority change may have readied a task of higher
1571:../freertos/tasks.c **** 				priority than the calling task. */
1572:../freertos/tasks.c **** 				if( uxNewPriority > uxCurrentBasePriority )
1573:../freertos/tasks.c **** 				{
1574:../freertos/tasks.c **** 					if( pxTCB != pxCurrentTCB )
1575:../freertos/tasks.c **** 					{
1576:../freertos/tasks.c **** 						/* The priority of a task other than the currently
1577:../freertos/tasks.c **** 						running task is being raised.  Is the priority being
1578:../freertos/tasks.c **** 						raised above that of the running task? */
1579:../freertos/tasks.c **** 						if( uxNewPriority >= pxCurrentTCB->uxPriority )
1580:../freertos/tasks.c **** 						{
1581:../freertos/tasks.c **** 							xYieldRequired = pdTRUE;
1582:../freertos/tasks.c **** 						}
1583:../freertos/tasks.c **** 						else
1584:../freertos/tasks.c **** 						{
1585:../freertos/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
1586:../freertos/tasks.c **** 						}
1587:../freertos/tasks.c **** 					}
1588:../freertos/tasks.c **** 					else
1589:../freertos/tasks.c **** 					{
1590:../freertos/tasks.c **** 						/* The priority of the running task is being raised,
1591:../freertos/tasks.c **** 						but the running task must already be the highest
1592:../freertos/tasks.c **** 						priority task able to run so no yield is required. */
1593:../freertos/tasks.c **** 					}
1594:../freertos/tasks.c **** 				}
1595:../freertos/tasks.c **** 				else if( pxTCB == pxCurrentTCB )
1596:../freertos/tasks.c **** 				{
1597:../freertos/tasks.c **** 					/* Setting the priority of the running task down means
1598:../freertos/tasks.c **** 					there may now be another task of higher priority that
1599:../freertos/tasks.c **** 					is ready to execute. */
1600:../freertos/tasks.c **** 					xYieldRequired = pdTRUE;
1601:../freertos/tasks.c **** 				}
1602:../freertos/tasks.c **** 				else
1603:../freertos/tasks.c **** 				{
1604:../freertos/tasks.c **** 					/* Setting the priority of any other task down does not
1605:../freertos/tasks.c **** 					require a yield as the running task must be above the
1606:../freertos/tasks.c **** 					new priority of the task being modified. */
1607:../freertos/tasks.c **** 				}
1608:../freertos/tasks.c **** 
1609:../freertos/tasks.c **** 				/* Remember the ready list the task might be referenced from
1610:../freertos/tasks.c **** 				before its uxPriority member is changed so the
1611:../freertos/tasks.c **** 				taskRESET_READY_PRIORITY() macro can function correctly. */
1612:../freertos/tasks.c **** 				uxPriorityUsedOnEntry = pxTCB->uxPriority;
1613:../freertos/tasks.c **** 
1614:../freertos/tasks.c **** 				#if ( configUSE_MUTEXES == 1 )
1615:../freertos/tasks.c **** 				{
1616:../freertos/tasks.c **** 					/* Only change the priority being used if the task is not
1617:../freertos/tasks.c **** 					currently using an inherited priority. */
1618:../freertos/tasks.c **** 					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
1619:../freertos/tasks.c **** 					{
1620:../freertos/tasks.c **** 						pxTCB->uxPriority = uxNewPriority;
1621:../freertos/tasks.c **** 					}
1622:../freertos/tasks.c **** 					else
1623:../freertos/tasks.c **** 					{
1624:../freertos/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1625:../freertos/tasks.c **** 					}
ARM GAS  /tmp/ccaP1CVS.s 			page 31


1626:../freertos/tasks.c **** 
1627:../freertos/tasks.c **** 					/* The base priority gets set whatever. */
1628:../freertos/tasks.c **** 					pxTCB->uxBasePriority = uxNewPriority;
1629:../freertos/tasks.c **** 				}
1630:../freertos/tasks.c **** 				#else
1631:../freertos/tasks.c **** 				{
1632:../freertos/tasks.c **** 					pxTCB->uxPriority = uxNewPriority;
1633:../freertos/tasks.c **** 				}
1634:../freertos/tasks.c **** 				#endif
1635:../freertos/tasks.c **** 
1636:../freertos/tasks.c **** 				/* Only reset the event list item value if the value is not
1637:../freertos/tasks.c **** 				being used for anything else. */
1638:../freertos/tasks.c **** 				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE 
1639:../freertos/tasks.c **** 				{
1640:../freertos/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - (
1641:../freertos/tasks.c **** 				}
1642:../freertos/tasks.c **** 				else
1643:../freertos/tasks.c **** 				{
1644:../freertos/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1645:../freertos/tasks.c **** 				}
1646:../freertos/tasks.c **** 
1647:../freertos/tasks.c **** 				/* If the task is in the blocked or suspended list we need do
1648:../freertos/tasks.c **** 				nothing more than change its priority variable. However, if
1649:../freertos/tasks.c **** 				the task is in a ready list it needs to be removed and placed
1650:../freertos/tasks.c **** 				in the list appropriate to its new priority. */
1651:../freertos/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateL
1652:../freertos/tasks.c **** 				{
1653:../freertos/tasks.c **** 					/* The task is currently in its ready list - remove before
1654:../freertos/tasks.c **** 					adding it to it's new ready list.  As we are in a critical
1655:../freertos/tasks.c **** 					section we can do this even if the scheduler is suspended. */
1656:../freertos/tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1657:../freertos/tasks.c **** 					{
1658:../freertos/tasks.c **** 						/* It is known that the task is in its ready list so
1659:../freertos/tasks.c **** 						there is no need to check again and the port level
1660:../freertos/tasks.c **** 						reset macro can be called directly. */
1661:../freertos/tasks.c **** 						portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
1662:../freertos/tasks.c **** 					}
1663:../freertos/tasks.c **** 					else
1664:../freertos/tasks.c **** 					{
1665:../freertos/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1666:../freertos/tasks.c **** 					}
1667:../freertos/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
1668:../freertos/tasks.c **** 				}
1669:../freertos/tasks.c **** 				else
1670:../freertos/tasks.c **** 				{
1671:../freertos/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1672:../freertos/tasks.c **** 				}
1673:../freertos/tasks.c **** 
1674:../freertos/tasks.c **** 				if( xYieldRequired != pdFALSE )
1675:../freertos/tasks.c **** 				{
1676:../freertos/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
1677:../freertos/tasks.c **** 				}
1678:../freertos/tasks.c **** 				else
1679:../freertos/tasks.c **** 				{
1680:../freertos/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1681:../freertos/tasks.c **** 				}
1682:../freertos/tasks.c **** 
ARM GAS  /tmp/ccaP1CVS.s 			page 32


1683:../freertos/tasks.c **** 				/* Remove compiler warning about unused variables when the port
1684:../freertos/tasks.c **** 				optimised task selection is not being used. */
1685:../freertos/tasks.c **** 				( void ) uxPriorityUsedOnEntry;
1686:../freertos/tasks.c **** 			}
1687:../freertos/tasks.c **** 		}
1688:../freertos/tasks.c **** 		taskEXIT_CRITICAL();
1689:../freertos/tasks.c **** 	}
1690:../freertos/tasks.c **** 
1691:../freertos/tasks.c **** #endif /* INCLUDE_vTaskPrioritySet */
1692:../freertos/tasks.c **** /*-----------------------------------------------------------*/
1693:../freertos/tasks.c **** 
1694:../freertos/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1695:../freertos/tasks.c **** 
1696:../freertos/tasks.c **** 	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
1697:../freertos/tasks.c **** 	{
1698:../freertos/tasks.c **** 	TCB_t *pxTCB;
1699:../freertos/tasks.c **** 
1700:../freertos/tasks.c **** 		taskENTER_CRITICAL();
1701:../freertos/tasks.c **** 		{
1702:../freertos/tasks.c **** 			/* If null is passed in here then it is the running task that is
1703:../freertos/tasks.c **** 			being suspended. */
1704:../freertos/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
1705:../freertos/tasks.c **** 
1706:../freertos/tasks.c **** 			traceTASK_SUSPEND( pxTCB );
1707:../freertos/tasks.c **** 
1708:../freertos/tasks.c **** 			/* Remove task from the ready/delayed list and place in the
1709:../freertos/tasks.c **** 			suspended list. */
1710:../freertos/tasks.c **** 			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1711:../freertos/tasks.c **** 			{
1712:../freertos/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1713:../freertos/tasks.c **** 			}
1714:../freertos/tasks.c **** 			else
1715:../freertos/tasks.c **** 			{
1716:../freertos/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1717:../freertos/tasks.c **** 			}
1718:../freertos/tasks.c **** 
1719:../freertos/tasks.c **** 			/* Is the task waiting on an event also? */
1720:../freertos/tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1721:../freertos/tasks.c **** 			{
1722:../freertos/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1723:../freertos/tasks.c **** 			}
1724:../freertos/tasks.c **** 			else
1725:../freertos/tasks.c **** 			{
1726:../freertos/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1727:../freertos/tasks.c **** 			}
1728:../freertos/tasks.c **** 
1729:../freertos/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
1730:../freertos/tasks.c **** 
1731:../freertos/tasks.c **** 			#if( configUSE_TASK_NOTIFICATIONS == 1 )
1732:../freertos/tasks.c **** 			{
1733:../freertos/tasks.c **** 				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
1734:../freertos/tasks.c **** 				{
1735:../freertos/tasks.c **** 					/* The task was blocked to wait for a notification, but is
1736:../freertos/tasks.c **** 					now suspended, so no notification was received. */
1737:../freertos/tasks.c **** 					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
1738:../freertos/tasks.c **** 				}
1739:../freertos/tasks.c **** 			}
ARM GAS  /tmp/ccaP1CVS.s 			page 33


1740:../freertos/tasks.c **** 			#endif
1741:../freertos/tasks.c **** 		}
1742:../freertos/tasks.c **** 		taskEXIT_CRITICAL();
1743:../freertos/tasks.c **** 
1744:../freertos/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
1745:../freertos/tasks.c **** 		{
1746:../freertos/tasks.c **** 			/* Reset the next expected unblock time in case it referred to the
1747:../freertos/tasks.c **** 			task that is now in the Suspended state. */
1748:../freertos/tasks.c **** 			taskENTER_CRITICAL();
1749:../freertos/tasks.c **** 			{
1750:../freertos/tasks.c **** 				prvResetNextTaskUnblockTime();
1751:../freertos/tasks.c **** 			}
1752:../freertos/tasks.c **** 			taskEXIT_CRITICAL();
1753:../freertos/tasks.c **** 		}
1754:../freertos/tasks.c **** 		else
1755:../freertos/tasks.c **** 		{
1756:../freertos/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1757:../freertos/tasks.c **** 		}
1758:../freertos/tasks.c **** 
1759:../freertos/tasks.c **** 		if( pxTCB == pxCurrentTCB )
1760:../freertos/tasks.c **** 		{
1761:../freertos/tasks.c **** 			if( xSchedulerRunning != pdFALSE )
1762:../freertos/tasks.c **** 			{
1763:../freertos/tasks.c **** 				/* The current task has just been suspended. */
1764:../freertos/tasks.c **** 				configASSERT( uxSchedulerSuspended == 0 );
1765:../freertos/tasks.c **** 				portYIELD_WITHIN_API();
1766:../freertos/tasks.c **** 			}
1767:../freertos/tasks.c **** 			else
1768:../freertos/tasks.c **** 			{
1769:../freertos/tasks.c **** 				/* The scheduler is not running, but the task that was pointed
1770:../freertos/tasks.c **** 				to by pxCurrentTCB has just been suspended and pxCurrentTCB
1771:../freertos/tasks.c **** 				must be adjusted to point to a different task. */
1772:../freertos/tasks.c **** 				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Rig
1773:../freertos/tasks.c **** 				{
1774:../freertos/tasks.c **** 					/* No other tasks are ready, so set pxCurrentTCB back to
1775:../freertos/tasks.c **** 					NULL so when the next task is created pxCurrentTCB will
1776:../freertos/tasks.c **** 					be set to point to it no matter what its relative priority
1777:../freertos/tasks.c **** 					is. */
1778:../freertos/tasks.c **** 					pxCurrentTCB = NULL;
1779:../freertos/tasks.c **** 				}
1780:../freertos/tasks.c **** 				else
1781:../freertos/tasks.c **** 				{
1782:../freertos/tasks.c **** 					vTaskSwitchContext();
1783:../freertos/tasks.c **** 				}
1784:../freertos/tasks.c **** 			}
1785:../freertos/tasks.c **** 		}
1786:../freertos/tasks.c **** 		else
1787:../freertos/tasks.c **** 		{
1788:../freertos/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1789:../freertos/tasks.c **** 		}
1790:../freertos/tasks.c **** 	}
1791:../freertos/tasks.c **** 
1792:../freertos/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1793:../freertos/tasks.c **** /*-----------------------------------------------------------*/
1794:../freertos/tasks.c **** 
1795:../freertos/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1796:../freertos/tasks.c **** 
ARM GAS  /tmp/ccaP1CVS.s 			page 34


1797:../freertos/tasks.c **** 	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
1798:../freertos/tasks.c **** 	{
1799:../freertos/tasks.c **** 	BaseType_t xReturn = pdFALSE;
1800:../freertos/tasks.c **** 	const TCB_t * const pxTCB = xTask;
1801:../freertos/tasks.c **** 
1802:../freertos/tasks.c **** 		/* Accesses xPendingReadyList so must be called from a critical
1803:../freertos/tasks.c **** 		section. */
1804:../freertos/tasks.c **** 
1805:../freertos/tasks.c **** 		/* It does not make sense to check if the calling task is suspended. */
1806:../freertos/tasks.c **** 		configASSERT( xTask );
1807:../freertos/tasks.c **** 
1808:../freertos/tasks.c **** 		/* Is the task being resumed actually in the suspended list? */
1809:../freertos/tasks.c **** 		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
1810:../freertos/tasks.c **** 		{
1811:../freertos/tasks.c **** 			/* Has the task already been resumed from within an ISR? */
1812:../freertos/tasks.c **** 			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
1813:../freertos/tasks.c **** 			{
1814:../freertos/tasks.c **** 				/* Is it in the suspended list because it is in the	Suspended
1815:../freertos/tasks.c **** 				state, or because is is blocked with no timeout? */
1816:../freertos/tasks.c **** 				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The
1817:../freertos/tasks.c **** 				{
1818:../freertos/tasks.c **** 					xReturn = pdTRUE;
1819:../freertos/tasks.c **** 				}
1820:../freertos/tasks.c **** 				else
1821:../freertos/tasks.c **** 				{
1822:../freertos/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1823:../freertos/tasks.c **** 				}
1824:../freertos/tasks.c **** 			}
1825:../freertos/tasks.c **** 			else
1826:../freertos/tasks.c **** 			{
1827:../freertos/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1828:../freertos/tasks.c **** 			}
1829:../freertos/tasks.c **** 		}
1830:../freertos/tasks.c **** 		else
1831:../freertos/tasks.c **** 		{
1832:../freertos/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1833:../freertos/tasks.c **** 		}
1834:../freertos/tasks.c **** 
1835:../freertos/tasks.c **** 		return xReturn;
1836:../freertos/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
1837:../freertos/tasks.c **** 
1838:../freertos/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1839:../freertos/tasks.c **** /*-----------------------------------------------------------*/
1840:../freertos/tasks.c **** 
1841:../freertos/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1842:../freertos/tasks.c **** 
1843:../freertos/tasks.c **** 	void vTaskResume( TaskHandle_t xTaskToResume )
1844:../freertos/tasks.c **** 	{
1845:../freertos/tasks.c **** 	TCB_t * const pxTCB = xTaskToResume;
1846:../freertos/tasks.c **** 
1847:../freertos/tasks.c **** 		/* It does not make sense to resume the calling task. */
1848:../freertos/tasks.c **** 		configASSERT( xTaskToResume );
1849:../freertos/tasks.c **** 
1850:../freertos/tasks.c **** 		/* The parameter cannot be NULL as it is impossible to resume the
1851:../freertos/tasks.c **** 		currently executing task. */
1852:../freertos/tasks.c **** 		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
1853:../freertos/tasks.c **** 		{
ARM GAS  /tmp/ccaP1CVS.s 			page 35


1854:../freertos/tasks.c **** 			taskENTER_CRITICAL();
1855:../freertos/tasks.c **** 			{
1856:../freertos/tasks.c **** 				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
1857:../freertos/tasks.c **** 				{
1858:../freertos/tasks.c **** 					traceTASK_RESUME( pxTCB );
1859:../freertos/tasks.c **** 
1860:../freertos/tasks.c **** 					/* The ready list can be accessed even if the scheduler is
1861:../freertos/tasks.c **** 					suspended because this is inside a critical section. */
1862:../freertos/tasks.c **** 					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
1863:../freertos/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
1864:../freertos/tasks.c **** 
1865:../freertos/tasks.c **** 					/* A higher priority task may have just been resumed. */
1866:../freertos/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1867:../freertos/tasks.c **** 					{
1868:../freertos/tasks.c **** 						/* This yield may not cause the task just resumed to run,
1869:../freertos/tasks.c **** 						but will leave the lists in the correct state for the
1870:../freertos/tasks.c **** 						next yield. */
1871:../freertos/tasks.c **** 						taskYIELD_IF_USING_PREEMPTION();
1872:../freertos/tasks.c **** 					}
1873:../freertos/tasks.c **** 					else
1874:../freertos/tasks.c **** 					{
1875:../freertos/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1876:../freertos/tasks.c **** 					}
1877:../freertos/tasks.c **** 				}
1878:../freertos/tasks.c **** 				else
1879:../freertos/tasks.c **** 				{
1880:../freertos/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1881:../freertos/tasks.c **** 				}
1882:../freertos/tasks.c **** 			}
1883:../freertos/tasks.c **** 			taskEXIT_CRITICAL();
1884:../freertos/tasks.c **** 		}
1885:../freertos/tasks.c **** 		else
1886:../freertos/tasks.c **** 		{
1887:../freertos/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1888:../freertos/tasks.c **** 		}
1889:../freertos/tasks.c **** 	}
1890:../freertos/tasks.c **** 
1891:../freertos/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1892:../freertos/tasks.c **** 
1893:../freertos/tasks.c **** /*-----------------------------------------------------------*/
1894:../freertos/tasks.c **** 
1895:../freertos/tasks.c **** #if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )
1896:../freertos/tasks.c **** 
1897:../freertos/tasks.c **** 	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
1898:../freertos/tasks.c **** 	{
1899:../freertos/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
1900:../freertos/tasks.c **** 	TCB_t * const pxTCB = xTaskToResume;
1901:../freertos/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
1902:../freertos/tasks.c **** 
1903:../freertos/tasks.c **** 		configASSERT( xTaskToResume );
1904:../freertos/tasks.c **** 
1905:../freertos/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
1906:../freertos/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
1907:../freertos/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
1908:../freertos/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
1909:../freertos/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1910:../freertos/tasks.c **** 		is defined in FreeRTOSConfig.h then
ARM GAS  /tmp/ccaP1CVS.s 			page 36


1911:../freertos/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1912:../freertos/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
1913:../freertos/tasks.c **** 		been assigned a priority above the configured maximum system call
1914:../freertos/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
1915:../freertos/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
1916:../freertos/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
1917:../freertos/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
1918:../freertos/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
1919:../freertos/tasks.c **** 		provided on the following link:
1920:../freertos/tasks.c **** 		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
1921:../freertos/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1922:../freertos/tasks.c **** 
1923:../freertos/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
1924:../freertos/tasks.c **** 		{
1925:../freertos/tasks.c **** 			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
1926:../freertos/tasks.c **** 			{
1927:../freertos/tasks.c **** 				traceTASK_RESUME_FROM_ISR( pxTCB );
1928:../freertos/tasks.c **** 
1929:../freertos/tasks.c **** 				/* Check the ready lists can be accessed. */
1930:../freertos/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1931:../freertos/tasks.c **** 				{
1932:../freertos/tasks.c **** 					/* Ready lists can be accessed so move the task from the
1933:../freertos/tasks.c **** 					suspended list to the ready list directly. */
1934:../freertos/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1935:../freertos/tasks.c **** 					{
1936:../freertos/tasks.c **** 						xYieldRequired = pdTRUE;
1937:../freertos/tasks.c **** 					}
1938:../freertos/tasks.c **** 					else
1939:../freertos/tasks.c **** 					{
1940:../freertos/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1941:../freertos/tasks.c **** 					}
1942:../freertos/tasks.c **** 
1943:../freertos/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1944:../freertos/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
1945:../freertos/tasks.c **** 				}
1946:../freertos/tasks.c **** 				else
1947:../freertos/tasks.c **** 				{
1948:../freertos/tasks.c **** 					/* The delayed or ready lists cannot be accessed so the task
1949:../freertos/tasks.c **** 					is held in the pending ready list until the scheduler is
1950:../freertos/tasks.c **** 					unsuspended. */
1951:../freertos/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
1952:../freertos/tasks.c **** 				}
1953:../freertos/tasks.c **** 			}
1954:../freertos/tasks.c **** 			else
1955:../freertos/tasks.c **** 			{
1956:../freertos/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1957:../freertos/tasks.c **** 			}
1958:../freertos/tasks.c **** 		}
1959:../freertos/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1960:../freertos/tasks.c **** 
1961:../freertos/tasks.c **** 		return xYieldRequired;
1962:../freertos/tasks.c **** 	}
1963:../freertos/tasks.c **** 
1964:../freertos/tasks.c **** #endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
1965:../freertos/tasks.c **** /*-----------------------------------------------------------*/
1966:../freertos/tasks.c **** 
1967:../freertos/tasks.c **** void vTaskStartScheduler( void )
ARM GAS  /tmp/ccaP1CVS.s 			page 37


1968:../freertos/tasks.c **** {
1969:../freertos/tasks.c **** BaseType_t xReturn;
1970:../freertos/tasks.c **** 
1971:../freertos/tasks.c **** 	/* Add the idle task at the lowest priority. */
1972:../freertos/tasks.c **** 	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
1973:../freertos/tasks.c **** 	{
1974:../freertos/tasks.c **** 		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
1975:../freertos/tasks.c **** 		StackType_t *pxIdleTaskStackBuffer = NULL;
1976:../freertos/tasks.c **** 		uint32_t ulIdleTaskStackSize;
1977:../freertos/tasks.c **** 
1978:../freertos/tasks.c **** 		/* The Idle task is created using user provided RAM - obtain the
1979:../freertos/tasks.c **** 		address of the RAM then create the idle task. */
1980:../freertos/tasks.c **** 		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize
1981:../freertos/tasks.c **** 		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
1982:../freertos/tasks.c **** 												configIDLE_TASK_NAME,
1983:../freertos/tasks.c **** 												ulIdleTaskStackSize,
1984:../freertos/tasks.c **** 												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
1985:../freertos/tasks.c **** 												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_P
1986:../freertos/tasks.c **** 												pxIdleTaskStackBuffer,
1987:../freertos/tasks.c **** 												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant
1988:../freertos/tasks.c **** 
1989:../freertos/tasks.c **** 		if( xIdleTaskHandle != NULL )
1990:../freertos/tasks.c **** 		{
1991:../freertos/tasks.c **** 			xReturn = pdPASS;
1992:../freertos/tasks.c **** 		}
1993:../freertos/tasks.c **** 		else
1994:../freertos/tasks.c **** 		{
1995:../freertos/tasks.c **** 			xReturn = pdFAIL;
1996:../freertos/tasks.c **** 		}
1997:../freertos/tasks.c **** 	}
1998:../freertos/tasks.c **** 	#else
1999:../freertos/tasks.c **** 	{
2000:../freertos/tasks.c **** 		/* The Idle task is being created using dynamically allocated RAM. */
2001:../freertos/tasks.c **** 		xReturn = xTaskCreate(	prvIdleTask,
2002:../freertos/tasks.c **** 								configIDLE_TASK_NAME,
2003:../freertos/tasks.c **** 								configMINIMAL_STACK_SIZE,
2004:../freertos/tasks.c **** 								( void * ) NULL,
2005:../freertos/tasks.c **** 								portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIOR
2006:../freertos/tasks.c **** 								&xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explic
2007:../freertos/tasks.c **** 	}
2008:../freertos/tasks.c **** 	#endif /* configSUPPORT_STATIC_ALLOCATION */
2009:../freertos/tasks.c **** 
2010:../freertos/tasks.c **** 	#if ( configUSE_TIMERS == 1 )
2011:../freertos/tasks.c **** 	{
2012:../freertos/tasks.c **** 		if( xReturn == pdPASS )
2013:../freertos/tasks.c **** 		{
2014:../freertos/tasks.c **** 			xReturn = xTimerCreateTimerTask();
2015:../freertos/tasks.c **** 		}
2016:../freertos/tasks.c **** 		else
2017:../freertos/tasks.c **** 		{
2018:../freertos/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2019:../freertos/tasks.c **** 		}
2020:../freertos/tasks.c **** 	}
2021:../freertos/tasks.c **** 	#endif /* configUSE_TIMERS */
2022:../freertos/tasks.c **** 
2023:../freertos/tasks.c **** 	if( xReturn == pdPASS )
2024:../freertos/tasks.c **** 	{
ARM GAS  /tmp/ccaP1CVS.s 			page 38


2025:../freertos/tasks.c **** 		/* freertos_tasks_c_additions_init() should only be called if the user
2026:../freertos/tasks.c **** 		definable macro FREERTOS_TASKS_C_ADDITIONS_INIT() is defined, as that is
2027:../freertos/tasks.c **** 		the only macro called by the function. */
2028:../freertos/tasks.c **** 		#ifdef FREERTOS_TASKS_C_ADDITIONS_INIT
2029:../freertos/tasks.c **** 		{
2030:../freertos/tasks.c **** 			freertos_tasks_c_additions_init();
2031:../freertos/tasks.c **** 		}
2032:../freertos/tasks.c **** 		#endif
2033:../freertos/tasks.c **** 
2034:../freertos/tasks.c **** 		/* Interrupts are turned off here, to ensure a tick does not occur
2035:../freertos/tasks.c **** 		before or during the call to xPortStartScheduler().  The stacks of
2036:../freertos/tasks.c **** 		the created tasks contain a status word with interrupts switched on
2037:../freertos/tasks.c **** 		so interrupts will automatically get re-enabled when the first task
2038:../freertos/tasks.c **** 		starts to run. */
2039:../freertos/tasks.c **** 		portDISABLE_INTERRUPTS();
2040:../freertos/tasks.c **** 
2041:../freertos/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
2042:../freertos/tasks.c **** 		{
2043:../freertos/tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
2044:../freertos/tasks.c **** 			structure specific to the task that will run first. */
2045:../freertos/tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
2046:../freertos/tasks.c **** 		}
2047:../freertos/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
2048:../freertos/tasks.c **** 
2049:../freertos/tasks.c **** 		xNextTaskUnblockTime = portMAX_DELAY;
2050:../freertos/tasks.c **** 		xSchedulerRunning = pdTRUE;
2051:../freertos/tasks.c **** 		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
2052:../freertos/tasks.c **** 
2053:../freertos/tasks.c **** 		/* If configGENERATE_RUN_TIME_STATS is defined then the following
2054:../freertos/tasks.c **** 		macro must be defined to configure the timer/counter used to generate
2055:../freertos/tasks.c **** 		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
2056:../freertos/tasks.c **** 		is set to 0 and the following line fails to build then ensure you do not
2057:../freertos/tasks.c **** 		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
2058:../freertos/tasks.c **** 		FreeRTOSConfig.h file. */
2059:../freertos/tasks.c **** 		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
2060:../freertos/tasks.c **** 
2061:../freertos/tasks.c **** 		traceTASK_SWITCHED_IN();
2062:../freertos/tasks.c **** 
2063:../freertos/tasks.c **** 		/* Setting up the timer tick is hardware specific and thus in the
2064:../freertos/tasks.c **** 		portable interface. */
2065:../freertos/tasks.c **** 		if( xPortStartScheduler() != pdFALSE )
2066:../freertos/tasks.c **** 		{
2067:../freertos/tasks.c **** 			/* Should not reach here as if the scheduler is running the
2068:../freertos/tasks.c **** 			function will not return. */
2069:../freertos/tasks.c **** 		}
2070:../freertos/tasks.c **** 		else
2071:../freertos/tasks.c **** 		{
2072:../freertos/tasks.c **** 			/* Should only reach here if a task calls xTaskEndScheduler(). */
2073:../freertos/tasks.c **** 		}
2074:../freertos/tasks.c **** 	}
2075:../freertos/tasks.c **** 	else
2076:../freertos/tasks.c **** 	{
2077:../freertos/tasks.c **** 		/* This line will only be reached if the kernel could not be started,
2078:../freertos/tasks.c **** 		because there was not enough FreeRTOS heap to create the idle task
2079:../freertos/tasks.c **** 		or the timer task. */
2080:../freertos/tasks.c **** 		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
2081:../freertos/tasks.c **** 	}
ARM GAS  /tmp/ccaP1CVS.s 			page 39


2082:../freertos/tasks.c **** 
2083:../freertos/tasks.c **** 	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
2084:../freertos/tasks.c **** 	meaning xIdleTaskHandle is not used anywhere else. */
2085:../freertos/tasks.c **** 	( void ) xIdleTaskHandle;
2086:../freertos/tasks.c **** }
2087:../freertos/tasks.c **** /*-----------------------------------------------------------*/
2088:../freertos/tasks.c **** 
2089:../freertos/tasks.c **** void vTaskEndScheduler( void )
2090:../freertos/tasks.c **** {
2091:../freertos/tasks.c **** 	/* Stop the scheduler interrupts and call the portable scheduler end
2092:../freertos/tasks.c **** 	routine so the original ISRs can be restored if necessary.  The port
2093:../freertos/tasks.c **** 	layer must ensure interrupts enable	bit is left in the correct state. */
2094:../freertos/tasks.c **** 	portDISABLE_INTERRUPTS();
2095:../freertos/tasks.c **** 	xSchedulerRunning = pdFALSE;
2096:../freertos/tasks.c **** 	vPortEndScheduler();
2097:../freertos/tasks.c **** }
2098:../freertos/tasks.c **** /*----------------------------------------------------------*/
2099:../freertos/tasks.c **** 
2100:../freertos/tasks.c **** void vTaskSuspendAll( void )
2101:../freertos/tasks.c **** {
2102:../freertos/tasks.c **** 	/* A critical section is not required as the variable is of type
2103:../freertos/tasks.c **** 	BaseType_t.  Please read Richard Barry's reply in the following link to a
2104:../freertos/tasks.c **** 	post in the FreeRTOS support forum before reporting this as a bug! -
2105:../freertos/tasks.c **** 	http://goo.gl/wu4acr */
2106:../freertos/tasks.c **** 	++uxSchedulerSuspended;
2107:../freertos/tasks.c **** 	portMEMORY_BARRIER();
2108:../freertos/tasks.c **** }
2109:../freertos/tasks.c **** /*----------------------------------------------------------*/
2110:../freertos/tasks.c **** 
2111:../freertos/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
2112:../freertos/tasks.c **** 
2113:../freertos/tasks.c **** 	static TickType_t prvGetExpectedIdleTime( void )
2114:../freertos/tasks.c **** 	{
2115:../freertos/tasks.c **** 	TickType_t xReturn;
2116:../freertos/tasks.c **** 	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
2117:../freertos/tasks.c **** 
2118:../freertos/tasks.c **** 		/* uxHigherPriorityReadyTasks takes care of the case where
2119:../freertos/tasks.c **** 		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
2120:../freertos/tasks.c **** 		task that are in the Ready state, even though the idle task is
2121:../freertos/tasks.c **** 		running. */
2122:../freertos/tasks.c **** 		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
2123:../freertos/tasks.c **** 		{
2124:../freertos/tasks.c **** 			if( uxTopReadyPriority > tskIDLE_PRIORITY )
2125:../freertos/tasks.c **** 			{
2126:../freertos/tasks.c **** 				uxHigherPriorityReadyTasks = pdTRUE;
2127:../freertos/tasks.c **** 			}
2128:../freertos/tasks.c **** 		}
2129:../freertos/tasks.c **** 		#else
2130:../freertos/tasks.c **** 		{
2131:../freertos/tasks.c **** 			const UBaseType_t uxLeastSignificantBit = ( UBaseType_t ) 0x01;
2132:../freertos/tasks.c **** 
2133:../freertos/tasks.c **** 			/* When port optimised task selection is used the uxTopReadyPriority
2134:../freertos/tasks.c **** 			variable is used as a bit map.  If bits other than the least
2135:../freertos/tasks.c **** 			significant bit are set then there are tasks that have a priority
2136:../freertos/tasks.c **** 			above the idle priority that are in the Ready state.  This takes
2137:../freertos/tasks.c **** 			care of the case where the co-operative scheduler is in use. */
2138:../freertos/tasks.c **** 			if( uxTopReadyPriority > uxLeastSignificantBit )
ARM GAS  /tmp/ccaP1CVS.s 			page 40


2139:../freertos/tasks.c **** 			{
2140:../freertos/tasks.c **** 				uxHigherPriorityReadyTasks = pdTRUE;
2141:../freertos/tasks.c **** 			}
2142:../freertos/tasks.c **** 		}
2143:../freertos/tasks.c **** 		#endif
2144:../freertos/tasks.c **** 
2145:../freertos/tasks.c **** 		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
2146:../freertos/tasks.c **** 		{
2147:../freertos/tasks.c **** 			xReturn = 0;
2148:../freertos/tasks.c **** 		}
2149:../freertos/tasks.c **** 		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
2150:../freertos/tasks.c **** 		{
2151:../freertos/tasks.c **** 			/* There are other idle priority tasks in the ready state.  If
2152:../freertos/tasks.c **** 			time slicing is used then the very next tick interrupt must be
2153:../freertos/tasks.c **** 			processed. */
2154:../freertos/tasks.c **** 			xReturn = 0;
2155:../freertos/tasks.c **** 		}
2156:../freertos/tasks.c **** 		else if( uxHigherPriorityReadyTasks != pdFALSE )
2157:../freertos/tasks.c **** 		{
2158:../freertos/tasks.c **** 			/* There are tasks in the Ready state that have a priority above the
2159:../freertos/tasks.c **** 			idle priority.  This path can only be reached if
2160:../freertos/tasks.c **** 			configUSE_PREEMPTION is 0. */
2161:../freertos/tasks.c **** 			xReturn = 0;
2162:../freertos/tasks.c **** 		}
2163:../freertos/tasks.c **** 		else
2164:../freertos/tasks.c **** 		{
2165:../freertos/tasks.c **** 			xReturn = xNextTaskUnblockTime - xTickCount;
2166:../freertos/tasks.c **** 		}
2167:../freertos/tasks.c **** 
2168:../freertos/tasks.c **** 		return xReturn;
2169:../freertos/tasks.c **** 	}
2170:../freertos/tasks.c **** 
2171:../freertos/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2172:../freertos/tasks.c **** /*----------------------------------------------------------*/
2173:../freertos/tasks.c **** 
2174:../freertos/tasks.c **** BaseType_t xTaskResumeAll( void )
2175:../freertos/tasks.c **** {
2176:../freertos/tasks.c **** TCB_t *pxTCB = NULL;
2177:../freertos/tasks.c **** BaseType_t xAlreadyYielded = pdFALSE;
2178:../freertos/tasks.c **** 
2179:../freertos/tasks.c **** 	/* If uxSchedulerSuspended is zero then this function does not match a
2180:../freertos/tasks.c **** 	previous call to vTaskSuspendAll(). */
2181:../freertos/tasks.c **** 	configASSERT( uxSchedulerSuspended );
2182:../freertos/tasks.c **** 
2183:../freertos/tasks.c **** 	/* It is possible that an ISR caused a task to be removed from an event
2184:../freertos/tasks.c **** 	list while the scheduler was suspended.  If this was the case then the
2185:../freertos/tasks.c **** 	removed task will have been added to the xPendingReadyList.  Once the
2186:../freertos/tasks.c **** 	scheduler has been resumed it is safe to move all the pending ready
2187:../freertos/tasks.c **** 	tasks from this list into their appropriate ready list. */
2188:../freertos/tasks.c **** 	taskENTER_CRITICAL();
2189:../freertos/tasks.c **** 	{
2190:../freertos/tasks.c **** 		--uxSchedulerSuspended;
2191:../freertos/tasks.c **** 
2192:../freertos/tasks.c **** 		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
2193:../freertos/tasks.c **** 		{
2194:../freertos/tasks.c **** 			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
2195:../freertos/tasks.c **** 			{
ARM GAS  /tmp/ccaP1CVS.s 			page 41


2196:../freertos/tasks.c **** 				/* Move any readied tasks from the pending list into the
2197:../freertos/tasks.c **** 				appropriate ready list. */
2198:../freertos/tasks.c **** 				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
2199:../freertos/tasks.c **** 				{
2200:../freertos/tasks.c **** 					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as
2201:../freertos/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2202:../freertos/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2203:../freertos/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
2204:../freertos/tasks.c **** 
2205:../freertos/tasks.c **** 					/* If the moved task has a priority higher than the current
2206:../freertos/tasks.c **** 					task then a yield must be performed. */
2207:../freertos/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
2208:../freertos/tasks.c **** 					{
2209:../freertos/tasks.c **** 						xYieldPending = pdTRUE;
2210:../freertos/tasks.c **** 					}
2211:../freertos/tasks.c **** 					else
2212:../freertos/tasks.c **** 					{
2213:../freertos/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2214:../freertos/tasks.c **** 					}
2215:../freertos/tasks.c **** 				}
2216:../freertos/tasks.c **** 
2217:../freertos/tasks.c **** 				if( pxTCB != NULL )
2218:../freertos/tasks.c **** 				{
2219:../freertos/tasks.c **** 					/* A task was unblocked while the scheduler was suspended,
2220:../freertos/tasks.c **** 					which may have prevented the next unblock time from being
2221:../freertos/tasks.c **** 					re-calculated, in which case re-calculate it now.  Mainly
2222:../freertos/tasks.c **** 					important for low power tickless implementations, where
2223:../freertos/tasks.c **** 					this can prevent an unnecessary exit from low power
2224:../freertos/tasks.c **** 					state. */
2225:../freertos/tasks.c **** 					prvResetNextTaskUnblockTime();
2226:../freertos/tasks.c **** 				}
2227:../freertos/tasks.c **** 
2228:../freertos/tasks.c **** 				/* If any ticks occurred while the scheduler was suspended then
2229:../freertos/tasks.c **** 				they should be processed now.  This ensures the tick count does
2230:../freertos/tasks.c **** 				not	slip, and that any delayed tasks are resumed at the correct
2231:../freertos/tasks.c **** 				time. */
2232:../freertos/tasks.c **** 				{
2233:../freertos/tasks.c **** 					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
2234:../freertos/tasks.c **** 
2235:../freertos/tasks.c **** 					if( uxPendedCounts > ( UBaseType_t ) 0U )
2236:../freertos/tasks.c **** 					{
2237:../freertos/tasks.c **** 						do
2238:../freertos/tasks.c **** 						{
2239:../freertos/tasks.c **** 							if( xTaskIncrementTick() != pdFALSE )
2240:../freertos/tasks.c **** 							{
2241:../freertos/tasks.c **** 								xYieldPending = pdTRUE;
2242:../freertos/tasks.c **** 							}
2243:../freertos/tasks.c **** 							else
2244:../freertos/tasks.c **** 							{
2245:../freertos/tasks.c **** 								mtCOVERAGE_TEST_MARKER();
2246:../freertos/tasks.c **** 							}
2247:../freertos/tasks.c **** 							--uxPendedCounts;
2248:../freertos/tasks.c **** 						} while( uxPendedCounts > ( UBaseType_t ) 0U );
2249:../freertos/tasks.c **** 
2250:../freertos/tasks.c **** 						uxPendedTicks = 0;
2251:../freertos/tasks.c **** 					}
2252:../freertos/tasks.c **** 					else
ARM GAS  /tmp/ccaP1CVS.s 			page 42


2253:../freertos/tasks.c **** 					{
2254:../freertos/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2255:../freertos/tasks.c **** 					}
2256:../freertos/tasks.c **** 				}
2257:../freertos/tasks.c **** 
2258:../freertos/tasks.c **** 				if( xYieldPending != pdFALSE )
2259:../freertos/tasks.c **** 				{
2260:../freertos/tasks.c **** 					#if( configUSE_PREEMPTION != 0 )
2261:../freertos/tasks.c **** 					{
2262:../freertos/tasks.c **** 						xAlreadyYielded = pdTRUE;
2263:../freertos/tasks.c **** 					}
2264:../freertos/tasks.c **** 					#endif
2265:../freertos/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
2266:../freertos/tasks.c **** 				}
2267:../freertos/tasks.c **** 				else
2268:../freertos/tasks.c **** 				{
2269:../freertos/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
2270:../freertos/tasks.c **** 				}
2271:../freertos/tasks.c **** 			}
2272:../freertos/tasks.c **** 		}
2273:../freertos/tasks.c **** 		else
2274:../freertos/tasks.c **** 		{
2275:../freertos/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2276:../freertos/tasks.c **** 		}
2277:../freertos/tasks.c **** 	}
2278:../freertos/tasks.c **** 	taskEXIT_CRITICAL();
2279:../freertos/tasks.c **** 
2280:../freertos/tasks.c **** 	return xAlreadyYielded;
2281:../freertos/tasks.c **** }
2282:../freertos/tasks.c **** /*-----------------------------------------------------------*/
2283:../freertos/tasks.c **** 
2284:../freertos/tasks.c **** TickType_t xTaskGetTickCount( void )
2285:../freertos/tasks.c **** {
2286:../freertos/tasks.c **** TickType_t xTicks;
2287:../freertos/tasks.c **** 
2288:../freertos/tasks.c **** 	/* Critical section required if running on a 16 bit processor. */
2289:../freertos/tasks.c **** 	portTICK_TYPE_ENTER_CRITICAL();
2290:../freertos/tasks.c **** 	{
2291:../freertos/tasks.c **** 		xTicks = xTickCount;
2292:../freertos/tasks.c **** 	}
2293:../freertos/tasks.c **** 	portTICK_TYPE_EXIT_CRITICAL();
2294:../freertos/tasks.c **** 
2295:../freertos/tasks.c **** 	return xTicks;
2296:../freertos/tasks.c **** }
2297:../freertos/tasks.c **** /*-----------------------------------------------------------*/
2298:../freertos/tasks.c **** 
2299:../freertos/tasks.c **** TickType_t xTaskGetTickCountFromISR( void )
2300:../freertos/tasks.c **** {
2301:../freertos/tasks.c **** TickType_t xReturn;
2302:../freertos/tasks.c **** UBaseType_t uxSavedInterruptStatus;
2303:../freertos/tasks.c **** 
2304:../freertos/tasks.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
2305:../freertos/tasks.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
2306:../freertos/tasks.c **** 	above the maximum system call priority are kept permanently enabled, even
2307:../freertos/tasks.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
2308:../freertos/tasks.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
2309:../freertos/tasks.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
ARM GAS  /tmp/ccaP1CVS.s 			page 43


2310:../freertos/tasks.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
2311:../freertos/tasks.c **** 	assigned a priority above the configured maximum system call priority.
2312:../freertos/tasks.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
2313:../freertos/tasks.c **** 	that have been assigned a priority at or (logically) below the maximum
2314:../freertos/tasks.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
2315:../freertos/tasks.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
2316:../freertos/tasks.c **** 	More information (albeit Cortex-M specific) is provided on the following
2317:../freertos/tasks.c **** 	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
2318:../freertos/tasks.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
2319:../freertos/tasks.c **** 
2320:../freertos/tasks.c **** 	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
2321:../freertos/tasks.c **** 	{
2322:../freertos/tasks.c **** 		xReturn = xTickCount;
2323:../freertos/tasks.c **** 	}
2324:../freertos/tasks.c **** 	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
2325:../freertos/tasks.c **** 
2326:../freertos/tasks.c **** 	return xReturn;
2327:../freertos/tasks.c **** }
2328:../freertos/tasks.c **** /*-----------------------------------------------------------*/
2329:../freertos/tasks.c **** 
2330:../freertos/tasks.c **** UBaseType_t uxTaskGetNumberOfTasks( void )
2331:../freertos/tasks.c **** {
2332:../freertos/tasks.c **** 	/* A critical section is not required because the variables are of type
2333:../freertos/tasks.c **** 	BaseType_t. */
2334:../freertos/tasks.c **** 	return uxCurrentNumberOfTasks;
2335:../freertos/tasks.c **** }
2336:../freertos/tasks.c **** /*-----------------------------------------------------------*/
2337:../freertos/tasks.c **** 
2338:../freertos/tasks.c **** char *pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed fo
2339:../freertos/tasks.c **** {
2340:../freertos/tasks.c **** TCB_t *pxTCB;
2341:../freertos/tasks.c **** 
2342:../freertos/tasks.c **** 	/* If null is passed in here then the name of the calling task is being
2343:../freertos/tasks.c **** 	queried. */
2344:../freertos/tasks.c **** 	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
2345:../freertos/tasks.c **** 	configASSERT( pxTCB );
2346:../freertos/tasks.c **** 	return &( pxTCB->pcTaskName[ 0 ] );
2347:../freertos/tasks.c **** }
2348:../freertos/tasks.c **** /*-----------------------------------------------------------*/
2349:../freertos/tasks.c **** 
2350:../freertos/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2351:../freertos/tasks.c **** 
2352:../freertos/tasks.c **** 	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] )
2353:../freertos/tasks.c **** 	{
2354:../freertos/tasks.c **** 	TCB_t *pxNextTCB, *pxFirstTCB, *pxReturn = NULL;
2355:../freertos/tasks.c **** 	UBaseType_t x;
2356:../freertos/tasks.c **** 	char cNextChar;
2357:../freertos/tasks.c **** 	BaseType_t xBreakLoop;
2358:../freertos/tasks.c **** 
2359:../freertos/tasks.c **** 		/* This function is called with the scheduler suspended. */
2360:../freertos/tasks.c **** 
2361:../freertos/tasks.c **** 		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
2362:../freertos/tasks.c **** 		{
2363:../freertos/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );  /*lint !e9079 void * is used as this macro i
2364:../freertos/tasks.c **** 
2365:../freertos/tasks.c **** 			do
2366:../freertos/tasks.c **** 			{
ARM GAS  /tmp/ccaP1CVS.s 			page 44


2367:../freertos/tasks.c **** 				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is
2368:../freertos/tasks.c **** 
2369:../freertos/tasks.c **** 				/* Check each character in the name looking for a match or
2370:../freertos/tasks.c **** 				mismatch. */
2371:../freertos/tasks.c **** 				xBreakLoop = pdFALSE;
2372:../freertos/tasks.c **** 				for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
2373:../freertos/tasks.c **** 				{
2374:../freertos/tasks.c **** 					cNextChar = pxNextTCB->pcTaskName[ x ];
2375:../freertos/tasks.c **** 
2376:../freertos/tasks.c **** 					if( cNextChar != pcNameToQuery[ x ] )
2377:../freertos/tasks.c **** 					{
2378:../freertos/tasks.c **** 						/* Characters didn't match. */
2379:../freertos/tasks.c **** 						xBreakLoop = pdTRUE;
2380:../freertos/tasks.c **** 					}
2381:../freertos/tasks.c **** 					else if( cNextChar == ( char ) 0x00 )
2382:../freertos/tasks.c **** 					{
2383:../freertos/tasks.c **** 						/* Both strings terminated, a match must have been
2384:../freertos/tasks.c **** 						found. */
2385:../freertos/tasks.c **** 						pxReturn = pxNextTCB;
2386:../freertos/tasks.c **** 						xBreakLoop = pdTRUE;
2387:../freertos/tasks.c **** 					}
2388:../freertos/tasks.c **** 					else
2389:../freertos/tasks.c **** 					{
2390:../freertos/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2391:../freertos/tasks.c **** 					}
2392:../freertos/tasks.c **** 
2393:../freertos/tasks.c **** 					if( xBreakLoop != pdFALSE )
2394:../freertos/tasks.c **** 					{
2395:../freertos/tasks.c **** 						break;
2396:../freertos/tasks.c **** 					}
2397:../freertos/tasks.c **** 				}
2398:../freertos/tasks.c **** 
2399:../freertos/tasks.c **** 				if( pxReturn != NULL )
2400:../freertos/tasks.c **** 				{
2401:../freertos/tasks.c **** 					/* The handle has been found. */
2402:../freertos/tasks.c **** 					break;
2403:../freertos/tasks.c **** 				}
2404:../freertos/tasks.c **** 
2405:../freertos/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
2406:../freertos/tasks.c **** 		}
2407:../freertos/tasks.c **** 		else
2408:../freertos/tasks.c **** 		{
2409:../freertos/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2410:../freertos/tasks.c **** 		}
2411:../freertos/tasks.c **** 
2412:../freertos/tasks.c **** 		return pxReturn;
2413:../freertos/tasks.c **** 	}
2414:../freertos/tasks.c **** 
2415:../freertos/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2416:../freertos/tasks.c **** /*-----------------------------------------------------------*/
2417:../freertos/tasks.c **** 
2418:../freertos/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2419:../freertos/tasks.c **** 
2420:../freertos/tasks.c **** 	TaskHandle_t xTaskGetHandle( const char *pcNameToQuery ) /*lint !e971 Unqualified char types are a
2421:../freertos/tasks.c **** 	{
2422:../freertos/tasks.c **** 	UBaseType_t uxQueue = configMAX_PRIORITIES;
2423:../freertos/tasks.c **** 	TCB_t* pxTCB;
ARM GAS  /tmp/ccaP1CVS.s 			page 45


2424:../freertos/tasks.c **** 
2425:../freertos/tasks.c **** 		/* Task names will be truncated to configMAX_TASK_NAME_LEN - 1 bytes. */
2426:../freertos/tasks.c **** 		configASSERT( strlen( pcNameToQuery ) < configMAX_TASK_NAME_LEN );
2427:../freertos/tasks.c **** 
2428:../freertos/tasks.c **** 		vTaskSuspendAll();
2429:../freertos/tasks.c **** 		{
2430:../freertos/tasks.c **** 			/* Search the ready lists. */
2431:../freertos/tasks.c **** 			do
2432:../freertos/tasks.c **** 			{
2433:../freertos/tasks.c **** 				uxQueue--;
2434:../freertos/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) &( pxReadyTasksLists[ uxQueue ] ), pcNam
2435:../freertos/tasks.c **** 
2436:../freertos/tasks.c **** 				if( pxTCB != NULL )
2437:../freertos/tasks.c **** 				{
2438:../freertos/tasks.c **** 					/* Found the handle. */
2439:../freertos/tasks.c **** 					break;
2440:../freertos/tasks.c **** 				}
2441:../freertos/tasks.c **** 
2442:../freertos/tasks.c **** 			} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts
2443:../freertos/tasks.c **** 
2444:../freertos/tasks.c **** 			/* Search the delayed lists. */
2445:../freertos/tasks.c **** 			if( pxTCB == NULL )
2446:../freertos/tasks.c **** 			{
2447:../freertos/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxDelayedTaskList, pcNameToQuery );
2448:../freertos/tasks.c **** 			}
2449:../freertos/tasks.c **** 
2450:../freertos/tasks.c **** 			if( pxTCB == NULL )
2451:../freertos/tasks.c **** 			{
2452:../freertos/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxOverflowDelayedTaskList, pcNameToQuery
2453:../freertos/tasks.c **** 			}
2454:../freertos/tasks.c **** 
2455:../freertos/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
2456:../freertos/tasks.c **** 			{
2457:../freertos/tasks.c **** 				if( pxTCB == NULL )
2458:../freertos/tasks.c **** 				{
2459:../freertos/tasks.c **** 					/* Search the suspended list. */
2460:../freertos/tasks.c **** 					pxTCB = prvSearchForNameWithinSingleList( &xSuspendedTaskList, pcNameToQuery );
2461:../freertos/tasks.c **** 				}
2462:../freertos/tasks.c **** 			}
2463:../freertos/tasks.c **** 			#endif
2464:../freertos/tasks.c **** 
2465:../freertos/tasks.c **** 			#if( INCLUDE_vTaskDelete == 1 )
2466:../freertos/tasks.c **** 			{
2467:../freertos/tasks.c **** 				if( pxTCB == NULL )
2468:../freertos/tasks.c **** 				{
2469:../freertos/tasks.c **** 					/* Search the deleted list. */
2470:../freertos/tasks.c **** 					pxTCB = prvSearchForNameWithinSingleList( &xTasksWaitingTermination, pcNameToQuery );
2471:../freertos/tasks.c **** 				}
2472:../freertos/tasks.c **** 			}
2473:../freertos/tasks.c **** 			#endif
2474:../freertos/tasks.c **** 		}
2475:../freertos/tasks.c **** 		( void ) xTaskResumeAll();
2476:../freertos/tasks.c **** 
2477:../freertos/tasks.c **** 		return pxTCB;
2478:../freertos/tasks.c **** 	}
2479:../freertos/tasks.c **** 
2480:../freertos/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
ARM GAS  /tmp/ccaP1CVS.s 			page 46


2481:../freertos/tasks.c **** /*-----------------------------------------------------------*/
2482:../freertos/tasks.c **** 
2483:../freertos/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2484:../freertos/tasks.c **** 
2485:../freertos/tasks.c **** 	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArra
2486:../freertos/tasks.c **** 	{
2487:../freertos/tasks.c **** 	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
2488:../freertos/tasks.c **** 
2489:../freertos/tasks.c **** 		vTaskSuspendAll();
2490:../freertos/tasks.c **** 		{
2491:../freertos/tasks.c **** 			/* Is there a space in the array for each task in the system? */
2492:../freertos/tasks.c **** 			if( uxArraySize >= uxCurrentNumberOfTasks )
2493:../freertos/tasks.c **** 			{
2494:../freertos/tasks.c **** 				/* Fill in an TaskStatus_t structure with information on each
2495:../freertos/tasks.c **** 				task in the Ready state. */
2496:../freertos/tasks.c **** 				do
2497:../freertos/tasks.c **** 				{
2498:../freertos/tasks.c **** 					uxQueue--;
2499:../freertos/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists
2500:../freertos/tasks.c **** 
2501:../freertos/tasks.c **** 				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the cast
2502:../freertos/tasks.c **** 
2503:../freertos/tasks.c **** 				/* Fill in an TaskStatus_t structure with information on each
2504:../freertos/tasks.c **** 				task in the Blocked state. */
2505:../freertos/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelaye
2506:../freertos/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverfl
2507:../freertos/tasks.c **** 
2508:../freertos/tasks.c **** 				#if( INCLUDE_vTaskDelete == 1 )
2509:../freertos/tasks.c **** 				{
2510:../freertos/tasks.c **** 					/* Fill in an TaskStatus_t structure with information on
2511:../freertos/tasks.c **** 					each task that has been deleted but not yet cleaned up. */
2512:../freertos/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermin
2513:../freertos/tasks.c **** 				}
2514:../freertos/tasks.c **** 				#endif
2515:../freertos/tasks.c **** 
2516:../freertos/tasks.c **** 				#if ( INCLUDE_vTaskSuspend == 1 )
2517:../freertos/tasks.c **** 				{
2518:../freertos/tasks.c **** 					/* Fill in an TaskStatus_t structure with information on
2519:../freertos/tasks.c **** 					each task in the Suspended state. */
2520:../freertos/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList,
2521:../freertos/tasks.c **** 				}
2522:../freertos/tasks.c **** 				#endif
2523:../freertos/tasks.c **** 
2524:../freertos/tasks.c **** 				#if ( configGENERATE_RUN_TIME_STATS == 1)
2525:../freertos/tasks.c **** 				{
2526:../freertos/tasks.c **** 					if( pulTotalRunTime != NULL )
2527:../freertos/tasks.c **** 					{
2528:../freertos/tasks.c **** 						#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
2529:../freertos/tasks.c **** 							portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
2530:../freertos/tasks.c **** 						#else
2531:../freertos/tasks.c **** 							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
2532:../freertos/tasks.c **** 						#endif
2533:../freertos/tasks.c **** 					}
2534:../freertos/tasks.c **** 				}
2535:../freertos/tasks.c **** 				#else
2536:../freertos/tasks.c **** 				{
2537:../freertos/tasks.c **** 					if( pulTotalRunTime != NULL )
ARM GAS  /tmp/ccaP1CVS.s 			page 47


2538:../freertos/tasks.c **** 					{
2539:../freertos/tasks.c **** 						*pulTotalRunTime = 0;
2540:../freertos/tasks.c **** 					}
2541:../freertos/tasks.c **** 				}
2542:../freertos/tasks.c **** 				#endif
2543:../freertos/tasks.c **** 			}
2544:../freertos/tasks.c **** 			else
2545:../freertos/tasks.c **** 			{
2546:../freertos/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2547:../freertos/tasks.c **** 			}
2548:../freertos/tasks.c **** 		}
2549:../freertos/tasks.c **** 		( void ) xTaskResumeAll();
2550:../freertos/tasks.c **** 
2551:../freertos/tasks.c **** 		return uxTask;
2552:../freertos/tasks.c **** 	}
2553:../freertos/tasks.c **** 
2554:../freertos/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
2555:../freertos/tasks.c **** /*----------------------------------------------------------*/
2556:../freertos/tasks.c **** 
2557:../freertos/tasks.c **** #if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )
2558:../freertos/tasks.c **** 
2559:../freertos/tasks.c **** 	TaskHandle_t xTaskGetIdleTaskHandle( void )
2560:../freertos/tasks.c **** 	{
2561:../freertos/tasks.c **** 		/* If xTaskGetIdleTaskHandle() is called before the scheduler has been
2562:../freertos/tasks.c **** 		started, then xIdleTaskHandle will be NULL. */
2563:../freertos/tasks.c **** 		configASSERT( ( xIdleTaskHandle != NULL ) );
2564:../freertos/tasks.c **** 		return xIdleTaskHandle;
2565:../freertos/tasks.c **** 	}
2566:../freertos/tasks.c **** 
2567:../freertos/tasks.c **** #endif /* INCLUDE_xTaskGetIdleTaskHandle */
2568:../freertos/tasks.c **** /*----------------------------------------------------------*/
2569:../freertos/tasks.c **** 
2570:../freertos/tasks.c **** /* This conditional compilation should use inequality to 0, not equality to 1.
2571:../freertos/tasks.c **** This is to ensure vTaskStepTick() is available when user defined low power mode
2572:../freertos/tasks.c **** implementations require configUSE_TICKLESS_IDLE to be set to a value other than
2573:../freertos/tasks.c **** 1. */
2574:../freertos/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
2575:../freertos/tasks.c **** 
2576:../freertos/tasks.c **** 	void vTaskStepTick( const TickType_t xTicksToJump )
2577:../freertos/tasks.c **** 	{
2578:../freertos/tasks.c **** 		/* Correct the tick count value after a period during which the tick
2579:../freertos/tasks.c **** 		was suppressed.  Note this does *not* call the tick hook function for
2580:../freertos/tasks.c **** 		each stepped tick. */
2581:../freertos/tasks.c **** 		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
2582:../freertos/tasks.c **** 		xTickCount += xTicksToJump;
2583:../freertos/tasks.c **** 		traceINCREASE_TICK_COUNT( xTicksToJump );
2584:../freertos/tasks.c **** 	}
2585:../freertos/tasks.c **** 
2586:../freertos/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2587:../freertos/tasks.c **** /*----------------------------------------------------------*/
2588:../freertos/tasks.c **** 
2589:../freertos/tasks.c **** #if ( INCLUDE_xTaskAbortDelay == 1 )
2590:../freertos/tasks.c **** 
2591:../freertos/tasks.c **** 	BaseType_t xTaskAbortDelay( TaskHandle_t xTask )
2592:../freertos/tasks.c **** 	{
2593:../freertos/tasks.c **** 	TCB_t *pxTCB = xTask;
2594:../freertos/tasks.c **** 	BaseType_t xReturn;
ARM GAS  /tmp/ccaP1CVS.s 			page 48


2595:../freertos/tasks.c **** 
2596:../freertos/tasks.c **** 		configASSERT( pxTCB );
2597:../freertos/tasks.c **** 
2598:../freertos/tasks.c **** 		vTaskSuspendAll();
2599:../freertos/tasks.c **** 		{
2600:../freertos/tasks.c **** 			/* A task can only be prematurely removed from the Blocked state if
2601:../freertos/tasks.c **** 			it is actually in the Blocked state. */
2602:../freertos/tasks.c **** 			if( eTaskGetState( xTask ) == eBlocked )
2603:../freertos/tasks.c **** 			{
2604:../freertos/tasks.c **** 				xReturn = pdPASS;
2605:../freertos/tasks.c **** 
2606:../freertos/tasks.c **** 				/* Remove the reference to the task from the blocked list.  An
2607:../freertos/tasks.c **** 				interrupt won't touch the xStateListItem because the
2608:../freertos/tasks.c **** 				scheduler is suspended. */
2609:../freertos/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2610:../freertos/tasks.c **** 
2611:../freertos/tasks.c **** 				/* Is the task waiting on an event also?  If so remove it from
2612:../freertos/tasks.c **** 				the event list too.  Interrupts can touch the event list item,
2613:../freertos/tasks.c **** 				even though the scheduler is suspended, so a critical section
2614:../freertos/tasks.c **** 				is used. */
2615:../freertos/tasks.c **** 				taskENTER_CRITICAL();
2616:../freertos/tasks.c **** 				{
2617:../freertos/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
2618:../freertos/tasks.c **** 					{
2619:../freertos/tasks.c **** 						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2620:../freertos/tasks.c **** 						pxTCB->ucDelayAborted = pdTRUE;
2621:../freertos/tasks.c **** 					}
2622:../freertos/tasks.c **** 					else
2623:../freertos/tasks.c **** 					{
2624:../freertos/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2625:../freertos/tasks.c **** 					}
2626:../freertos/tasks.c **** 				}
2627:../freertos/tasks.c **** 				taskEXIT_CRITICAL();
2628:../freertos/tasks.c **** 
2629:../freertos/tasks.c **** 				/* Place the unblocked task into the appropriate ready list. */
2630:../freertos/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
2631:../freertos/tasks.c **** 
2632:../freertos/tasks.c **** 				/* A task being unblocked cannot cause an immediate context
2633:../freertos/tasks.c **** 				switch if preemption is turned off. */
2634:../freertos/tasks.c **** 				#if (  configUSE_PREEMPTION == 1 )
2635:../freertos/tasks.c **** 				{
2636:../freertos/tasks.c **** 					/* Preemption is on, but a context switch should only be
2637:../freertos/tasks.c **** 					performed if the unblocked task has a priority that is
2638:../freertos/tasks.c **** 					equal to or higher than the currently executing task. */
2639:../freertos/tasks.c **** 					if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
2640:../freertos/tasks.c **** 					{
2641:../freertos/tasks.c **** 						/* Pend the yield to be performed when the scheduler
2642:../freertos/tasks.c **** 						is unsuspended. */
2643:../freertos/tasks.c **** 						xYieldPending = pdTRUE;
2644:../freertos/tasks.c **** 					}
2645:../freertos/tasks.c **** 					else
2646:../freertos/tasks.c **** 					{
2647:../freertos/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2648:../freertos/tasks.c **** 					}
2649:../freertos/tasks.c **** 				}
2650:../freertos/tasks.c **** 				#endif /* configUSE_PREEMPTION */
2651:../freertos/tasks.c **** 			}
ARM GAS  /tmp/ccaP1CVS.s 			page 49


2652:../freertos/tasks.c **** 			else
2653:../freertos/tasks.c **** 			{
2654:../freertos/tasks.c **** 				xReturn = pdFAIL;
2655:../freertos/tasks.c **** 			}
2656:../freertos/tasks.c **** 		}
2657:../freertos/tasks.c **** 		( void ) xTaskResumeAll();
2658:../freertos/tasks.c **** 
2659:../freertos/tasks.c **** 		return xReturn;
2660:../freertos/tasks.c **** 	}
2661:../freertos/tasks.c **** 
2662:../freertos/tasks.c **** #endif /* INCLUDE_xTaskAbortDelay */
2663:../freertos/tasks.c **** /*----------------------------------------------------------*/
2664:../freertos/tasks.c **** 
2665:../freertos/tasks.c **** BaseType_t xTaskIncrementTick( void )
2666:../freertos/tasks.c **** {
2667:../freertos/tasks.c **** TCB_t * pxTCB;
2668:../freertos/tasks.c **** TickType_t xItemValue;
2669:../freertos/tasks.c **** BaseType_t xSwitchRequired = pdFALSE;
2670:../freertos/tasks.c **** 
2671:../freertos/tasks.c **** 	/* Called by the portable layer each time a tick interrupt occurs.
2672:../freertos/tasks.c **** 	Increments the tick then checks to see if the new tick value will cause any
2673:../freertos/tasks.c **** 	tasks to be unblocked. */
2674:../freertos/tasks.c **** 	traceTASK_INCREMENT_TICK( xTickCount );
2675:../freertos/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
2676:../freertos/tasks.c **** 	{
2677:../freertos/tasks.c **** 		/* Minor optimisation.  The tick count cannot change in this
2678:../freertos/tasks.c **** 		block. */
2679:../freertos/tasks.c **** 		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
2680:../freertos/tasks.c **** 
2681:../freertos/tasks.c **** 		/* Increment the RTOS tick, switching the delayed and overflowed
2682:../freertos/tasks.c **** 		delayed lists if it wraps to 0. */
2683:../freertos/tasks.c **** 		xTickCount = xConstTickCount;
2684:../freertos/tasks.c **** 
2685:../freertos/tasks.c **** 		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as
2686:../freertos/tasks.c **** 		{
2687:../freertos/tasks.c **** 			taskSWITCH_DELAYED_LISTS();
2688:../freertos/tasks.c **** 		}
2689:../freertos/tasks.c **** 		else
2690:../freertos/tasks.c **** 		{
2691:../freertos/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2692:../freertos/tasks.c **** 		}
2693:../freertos/tasks.c **** 
2694:../freertos/tasks.c **** 		/* See if this tick has made a timeout expire.  Tasks are stored in
2695:../freertos/tasks.c **** 		the	queue in the order of their wake time - meaning once one task
2696:../freertos/tasks.c **** 		has been found whose block time has not expired there is no need to
2697:../freertos/tasks.c **** 		look any further down the list. */
2698:../freertos/tasks.c **** 		if( xConstTickCount >= xNextTaskUnblockTime )
2699:../freertos/tasks.c **** 		{
2700:../freertos/tasks.c **** 			for( ;; )
2701:../freertos/tasks.c **** 			{
2702:../freertos/tasks.c **** 				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
2703:../freertos/tasks.c **** 				{
2704:../freertos/tasks.c **** 					/* The delayed list is empty.  Set xNextTaskUnblockTime
2705:../freertos/tasks.c **** 					to the maximum possible value so it is extremely
2706:../freertos/tasks.c **** 					unlikely that the
2707:../freertos/tasks.c **** 					if( xTickCount >= xNextTaskUnblockTime ) test will pass
2708:../freertos/tasks.c **** 					next time through. */
ARM GAS  /tmp/ccaP1CVS.s 			page 50


2709:../freertos/tasks.c **** 					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redun
2710:../freertos/tasks.c **** 					break;
2711:../freertos/tasks.c **** 				}
2712:../freertos/tasks.c **** 				else
2713:../freertos/tasks.c **** 				{
2714:../freertos/tasks.c **** 					/* The delayed list is not empty, get the value of the
2715:../freertos/tasks.c **** 					item at the head of the delayed list.  This is the time
2716:../freertos/tasks.c **** 					at which the task at the head of the delayed list must
2717:../freertos/tasks.c **** 					be removed from the Blocked state. */
2718:../freertos/tasks.c **** 					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this
2719:../freertos/tasks.c **** 					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
2720:../freertos/tasks.c **** 
2721:../freertos/tasks.c **** 					if( xConstTickCount < xItemValue )
2722:../freertos/tasks.c **** 					{
2723:../freertos/tasks.c **** 						/* It is not time to unblock this item yet, but the
2724:../freertos/tasks.c **** 						item value is the time at which the task at the head
2725:../freertos/tasks.c **** 						of the blocked list must be removed from the Blocked
2726:../freertos/tasks.c **** 						state -	so record the item value in
2727:../freertos/tasks.c **** 						xNextTaskUnblockTime. */
2728:../freertos/tasks.c **** 						xNextTaskUnblockTime = xItemValue;
2729:../freertos/tasks.c **** 						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks
2730:../freertos/tasks.c **** 					}
2731:../freertos/tasks.c **** 					else
2732:../freertos/tasks.c **** 					{
2733:../freertos/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2734:../freertos/tasks.c **** 					}
2735:../freertos/tasks.c **** 
2736:../freertos/tasks.c **** 					/* It is time to remove the item from the Blocked state. */
2737:../freertos/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2738:../freertos/tasks.c **** 
2739:../freertos/tasks.c **** 					/* Is the task waiting on an event also?  If so remove
2740:../freertos/tasks.c **** 					it from the event list. */
2741:../freertos/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
2742:../freertos/tasks.c **** 					{
2743:../freertos/tasks.c **** 						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2744:../freertos/tasks.c **** 					}
2745:../freertos/tasks.c **** 					else
2746:../freertos/tasks.c **** 					{
2747:../freertos/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2748:../freertos/tasks.c **** 					}
2749:../freertos/tasks.c **** 
2750:../freertos/tasks.c **** 					/* Place the unblocked task into the appropriate ready
2751:../freertos/tasks.c **** 					list. */
2752:../freertos/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
2753:../freertos/tasks.c **** 
2754:../freertos/tasks.c **** 					/* A task being unblocked cannot cause an immediate
2755:../freertos/tasks.c **** 					context switch if preemption is turned off. */
2756:../freertos/tasks.c **** 					#if (  configUSE_PREEMPTION == 1 )
2757:../freertos/tasks.c **** 					{
2758:../freertos/tasks.c **** 						/* Preemption is on, but a context switch should
2759:../freertos/tasks.c **** 						only be performed if the unblocked task has a
2760:../freertos/tasks.c **** 						priority that is equal to or higher than the
2761:../freertos/tasks.c **** 						currently executing task. */
2762:../freertos/tasks.c **** 						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
2763:../freertos/tasks.c **** 						{
2764:../freertos/tasks.c **** 							xSwitchRequired = pdTRUE;
2765:../freertos/tasks.c **** 						}
ARM GAS  /tmp/ccaP1CVS.s 			page 51


2766:../freertos/tasks.c **** 						else
2767:../freertos/tasks.c **** 						{
2768:../freertos/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
2769:../freertos/tasks.c **** 						}
2770:../freertos/tasks.c **** 					}
2771:../freertos/tasks.c **** 					#endif /* configUSE_PREEMPTION */
2772:../freertos/tasks.c **** 				}
2773:../freertos/tasks.c **** 			}
2774:../freertos/tasks.c **** 		}
2775:../freertos/tasks.c **** 
2776:../freertos/tasks.c **** 		/* Tasks of equal priority to the currently running task will share
2777:../freertos/tasks.c **** 		processing time (time slice) if preemption is on, and the application
2778:../freertos/tasks.c **** 		writer has not explicitly turned time slicing off. */
2779:../freertos/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
2780:../freertos/tasks.c **** 		{
2781:../freertos/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_
2782:../freertos/tasks.c **** 			{
2783:../freertos/tasks.c **** 				xSwitchRequired = pdTRUE;
2784:../freertos/tasks.c **** 			}
2785:../freertos/tasks.c **** 			else
2786:../freertos/tasks.c **** 			{
2787:../freertos/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2788:../freertos/tasks.c **** 			}
2789:../freertos/tasks.c **** 		}
2790:../freertos/tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) ) */
2791:../freertos/tasks.c **** 
2792:../freertos/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
2793:../freertos/tasks.c **** 		{
2794:../freertos/tasks.c **** 			/* Guard against the tick hook being called when the pended tick
2795:../freertos/tasks.c **** 			count is being unwound (when the scheduler is being unlocked). */
2796:../freertos/tasks.c **** 			if( uxPendedTicks == ( UBaseType_t ) 0U )
2797:../freertos/tasks.c **** 			{
2798:../freertos/tasks.c **** 				vApplicationTickHook();
2799:../freertos/tasks.c **** 			}
2800:../freertos/tasks.c **** 			else
2801:../freertos/tasks.c **** 			{
2802:../freertos/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2803:../freertos/tasks.c **** 			}
2804:../freertos/tasks.c **** 		}
2805:../freertos/tasks.c **** 		#endif /* configUSE_TICK_HOOK */
2806:../freertos/tasks.c **** 	}
2807:../freertos/tasks.c **** 	else
2808:../freertos/tasks.c **** 	{
2809:../freertos/tasks.c **** 		++uxPendedTicks;
2810:../freertos/tasks.c **** 
2811:../freertos/tasks.c **** 		/* The tick hook gets called at regular intervals, even if the
2812:../freertos/tasks.c **** 		scheduler is locked. */
2813:../freertos/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
2814:../freertos/tasks.c **** 		{
2815:../freertos/tasks.c **** 			vApplicationTickHook();
2816:../freertos/tasks.c **** 		}
2817:../freertos/tasks.c **** 		#endif
2818:../freertos/tasks.c **** 	}
2819:../freertos/tasks.c **** 
2820:../freertos/tasks.c **** 	#if ( configUSE_PREEMPTION == 1 )
2821:../freertos/tasks.c **** 	{
2822:../freertos/tasks.c **** 		if( xYieldPending != pdFALSE )
ARM GAS  /tmp/ccaP1CVS.s 			page 52


2823:../freertos/tasks.c **** 		{
2824:../freertos/tasks.c **** 			xSwitchRequired = pdTRUE;
2825:../freertos/tasks.c **** 		}
2826:../freertos/tasks.c **** 		else
2827:../freertos/tasks.c **** 		{
2828:../freertos/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2829:../freertos/tasks.c **** 		}
2830:../freertos/tasks.c **** 	}
2831:../freertos/tasks.c **** 	#endif /* configUSE_PREEMPTION */
2832:../freertos/tasks.c **** 
2833:../freertos/tasks.c **** 	return xSwitchRequired;
2834:../freertos/tasks.c **** }
2835:../freertos/tasks.c **** /*-----------------------------------------------------------*/
2836:../freertos/tasks.c **** 
2837:../freertos/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2838:../freertos/tasks.c **** 
2839:../freertos/tasks.c **** 	void vTaskSetApplicationTaskTag( TaskHandle_t xTask, TaskHookFunction_t pxHookFunction )
2840:../freertos/tasks.c **** 	{
2841:../freertos/tasks.c **** 	TCB_t *xTCB;
2842:../freertos/tasks.c **** 
2843:../freertos/tasks.c **** 		/* If xTask is NULL then it is the task hook of the calling task that is
2844:../freertos/tasks.c **** 		getting set. */
2845:../freertos/tasks.c **** 		if( xTask == NULL )
2846:../freertos/tasks.c **** 		{
2847:../freertos/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2848:../freertos/tasks.c **** 		}
2849:../freertos/tasks.c **** 		else
2850:../freertos/tasks.c **** 		{
2851:../freertos/tasks.c **** 			xTCB = xTask;
2852:../freertos/tasks.c **** 		}
2853:../freertos/tasks.c **** 
2854:../freertos/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2855:../freertos/tasks.c **** 		the value can be accessed from an interrupt. */
2856:../freertos/tasks.c **** 		taskENTER_CRITICAL();
2857:../freertos/tasks.c **** 		{
2858:../freertos/tasks.c **** 			xTCB->pxTaskTag = pxHookFunction;
2859:../freertos/tasks.c **** 		}
2860:../freertos/tasks.c **** 		taskEXIT_CRITICAL();
2861:../freertos/tasks.c **** 	}
2862:../freertos/tasks.c **** 
2863:../freertos/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2864:../freertos/tasks.c **** /*-----------------------------------------------------------*/
2865:../freertos/tasks.c **** 
2866:../freertos/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2867:../freertos/tasks.c **** 
2868:../freertos/tasks.c **** 	TaskHookFunction_t xTaskGetApplicationTaskTag( TaskHandle_t xTask )
2869:../freertos/tasks.c **** 	{
2870:../freertos/tasks.c **** 	TCB_t *pxTCB;
2871:../freertos/tasks.c **** 	TaskHookFunction_t xReturn;
2872:../freertos/tasks.c **** 
2873:../freertos/tasks.c **** 		/* If xTask is NULL then set the calling task's hook. */
2874:../freertos/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
2875:../freertos/tasks.c **** 
2876:../freertos/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2877:../freertos/tasks.c **** 		the value can be accessed from an interrupt. */
2878:../freertos/tasks.c **** 		taskENTER_CRITICAL();
2879:../freertos/tasks.c **** 		{
ARM GAS  /tmp/ccaP1CVS.s 			page 53


2880:../freertos/tasks.c **** 			xReturn = pxTCB->pxTaskTag;
2881:../freertos/tasks.c **** 		}
2882:../freertos/tasks.c **** 		taskEXIT_CRITICAL();
2883:../freertos/tasks.c **** 
2884:../freertos/tasks.c **** 		return xReturn;
2885:../freertos/tasks.c **** 	}
2886:../freertos/tasks.c **** 
2887:../freertos/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2888:../freertos/tasks.c **** /*-----------------------------------------------------------*/
2889:../freertos/tasks.c **** 
2890:../freertos/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2891:../freertos/tasks.c **** 
2892:../freertos/tasks.c **** 	TaskHookFunction_t xTaskGetApplicationTaskTagFromISR( TaskHandle_t xTask )
2893:../freertos/tasks.c **** 	{
2894:../freertos/tasks.c **** 	TCB_t *pxTCB;
2895:../freertos/tasks.c **** 	TaskHookFunction_t xReturn;
2896:../freertos/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
2897:../freertos/tasks.c **** 
2898:../freertos/tasks.c **** 		/* If xTask is NULL then set the calling task's hook. */
2899:../freertos/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
2900:../freertos/tasks.c **** 
2901:../freertos/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2902:../freertos/tasks.c **** 		the value can be accessed from an interrupt. */
2903:../freertos/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
2904:../freertos/tasks.c **** 		{
2905:../freertos/tasks.c **** 			xReturn = pxTCB->pxTaskTag;
2906:../freertos/tasks.c **** 		}
2907:../freertos/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
2908:../freertos/tasks.c **** 
2909:../freertos/tasks.c **** 		return xReturn;
2910:../freertos/tasks.c **** 	}
2911:../freertos/tasks.c **** 
2912:../freertos/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2913:../freertos/tasks.c **** /*-----------------------------------------------------------*/
2914:../freertos/tasks.c **** 
2915:../freertos/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2916:../freertos/tasks.c **** 
2917:../freertos/tasks.c **** 	BaseType_t xTaskCallApplicationTaskHook( TaskHandle_t xTask, void *pvParameter )
2918:../freertos/tasks.c **** 	{
2919:../freertos/tasks.c **** 	TCB_t *xTCB;
2920:../freertos/tasks.c **** 	BaseType_t xReturn;
2921:../freertos/tasks.c **** 
2922:../freertos/tasks.c **** 		/* If xTask is NULL then we are calling our own task hook. */
2923:../freertos/tasks.c **** 		if( xTask == NULL )
2924:../freertos/tasks.c **** 		{
2925:../freertos/tasks.c **** 			xTCB = pxCurrentTCB;
2926:../freertos/tasks.c **** 		}
2927:../freertos/tasks.c **** 		else
2928:../freertos/tasks.c **** 		{
2929:../freertos/tasks.c **** 			xTCB = xTask;
2930:../freertos/tasks.c **** 		}
2931:../freertos/tasks.c **** 
2932:../freertos/tasks.c **** 		if( xTCB->pxTaskTag != NULL )
2933:../freertos/tasks.c **** 		{
2934:../freertos/tasks.c **** 			xReturn = xTCB->pxTaskTag( pvParameter );
2935:../freertos/tasks.c **** 		}
2936:../freertos/tasks.c **** 		else
ARM GAS  /tmp/ccaP1CVS.s 			page 54


2937:../freertos/tasks.c **** 		{
2938:../freertos/tasks.c **** 			xReturn = pdFAIL;
2939:../freertos/tasks.c **** 		}
2940:../freertos/tasks.c **** 
2941:../freertos/tasks.c **** 		return xReturn;
2942:../freertos/tasks.c **** 	}
2943:../freertos/tasks.c **** 
2944:../freertos/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2945:../freertos/tasks.c **** /*-----------------------------------------------------------*/
2946:../freertos/tasks.c **** 
2947:../freertos/tasks.c **** void vTaskSwitchContext( void )
2948:../freertos/tasks.c **** {
2949:../freertos/tasks.c **** 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
2950:../freertos/tasks.c **** 	{
2951:../freertos/tasks.c **** 		/* The scheduler is currently suspended - do not allow a context
2952:../freertos/tasks.c **** 		switch. */
2953:../freertos/tasks.c **** 		xYieldPending = pdTRUE;
2954:../freertos/tasks.c **** 	}
2955:../freertos/tasks.c **** 	else
2956:../freertos/tasks.c **** 	{
2957:../freertos/tasks.c **** 		xYieldPending = pdFALSE;
2958:../freertos/tasks.c **** 		traceTASK_SWITCHED_OUT();
2959:../freertos/tasks.c **** 
2960:../freertos/tasks.c **** 		#if ( configGENERATE_RUN_TIME_STATS == 1 )
2961:../freertos/tasks.c **** 		{
2962:../freertos/tasks.c **** 			#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
2963:../freertos/tasks.c **** 				portALT_GET_RUN_TIME_COUNTER_VALUE( ulTotalRunTime );
2964:../freertos/tasks.c **** 			#else
2965:../freertos/tasks.c **** 				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
2966:../freertos/tasks.c **** 			#endif
2967:../freertos/tasks.c **** 
2968:../freertos/tasks.c **** 			/* Add the amount of time the task has been running to the
2969:../freertos/tasks.c **** 			accumulated time so far.  The time the task started running was
2970:../freertos/tasks.c **** 			stored in ulTaskSwitchedInTime.  Note that there is no overflow
2971:../freertos/tasks.c **** 			protection here so count values are only valid until the timer
2972:../freertos/tasks.c **** 			overflows.  The guard against negative values is to protect
2973:../freertos/tasks.c **** 			against suspect run time stat counter implementations - which
2974:../freertos/tasks.c **** 			are provided by the application, not the kernel. */
2975:../freertos/tasks.c **** 			if( ulTotalRunTime > ulTaskSwitchedInTime )
2976:../freertos/tasks.c **** 			{
2977:../freertos/tasks.c **** 				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
2978:../freertos/tasks.c **** 			}
2979:../freertos/tasks.c **** 			else
2980:../freertos/tasks.c **** 			{
2981:../freertos/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2982:../freertos/tasks.c **** 			}
2983:../freertos/tasks.c **** 			ulTaskSwitchedInTime = ulTotalRunTime;
2984:../freertos/tasks.c **** 		}
2985:../freertos/tasks.c **** 		#endif /* configGENERATE_RUN_TIME_STATS */
2986:../freertos/tasks.c **** 
2987:../freertos/tasks.c **** 		/* Check for stack overflow, if configured. */
2988:../freertos/tasks.c **** 		taskCHECK_FOR_STACK_OVERFLOW();
2989:../freertos/tasks.c **** 
2990:../freertos/tasks.c **** 		/* Before the currently running task is switched out, save its errno. */
2991:../freertos/tasks.c **** 		#if( configUSE_POSIX_ERRNO == 1 )
2992:../freertos/tasks.c **** 		{
2993:../freertos/tasks.c **** 			pxCurrentTCB->iTaskErrno = FreeRTOS_errno;
ARM GAS  /tmp/ccaP1CVS.s 			page 55


2994:../freertos/tasks.c **** 		}
2995:../freertos/tasks.c **** 		#endif
2996:../freertos/tasks.c **** 
2997:../freertos/tasks.c **** 		/* Select a new task to run using either the generic C or port
2998:../freertos/tasks.c **** 		optimised asm code. */
2999:../freertos/tasks.c **** 		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timer
3000:../freertos/tasks.c **** 		traceTASK_SWITCHED_IN();
3001:../freertos/tasks.c **** 
3002:../freertos/tasks.c **** 		/* After the new task is switched in, update the global errno. */
3003:../freertos/tasks.c **** 		#if( configUSE_POSIX_ERRNO == 1 )
3004:../freertos/tasks.c **** 		{
3005:../freertos/tasks.c **** 			FreeRTOS_errno = pxCurrentTCB->iTaskErrno;
3006:../freertos/tasks.c **** 		}
3007:../freertos/tasks.c **** 		#endif
3008:../freertos/tasks.c **** 
3009:../freertos/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
3010:../freertos/tasks.c **** 		{
3011:../freertos/tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
3012:../freertos/tasks.c **** 			structure specific to this task. */
3013:../freertos/tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
3014:../freertos/tasks.c **** 		}
3015:../freertos/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
3016:../freertos/tasks.c **** 	}
3017:../freertos/tasks.c **** }
3018:../freertos/tasks.c **** /*-----------------------------------------------------------*/
3019:../freertos/tasks.c **** 
3020:../freertos/tasks.c **** void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
3021:../freertos/tasks.c **** {
3022:../freertos/tasks.c **** 	configASSERT( pxEventList );
3023:../freertos/tasks.c **** 
3024:../freertos/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH EITHER INTERRUPTS DISABLED OR THE
3025:../freertos/tasks.c **** 	SCHEDULER SUSPENDED AND THE QUEUE BEING ACCESSED LOCKED. */
3026:../freertos/tasks.c **** 
3027:../freertos/tasks.c **** 	/* Place the event list item of the TCB in the appropriate event list.
3028:../freertos/tasks.c **** 	This is placed in the list in priority order so the highest priority task
3029:../freertos/tasks.c **** 	is the first to be woken by the event.  The queue that contains the event
3030:../freertos/tasks.c **** 	list is locked, preventing simultaneous access from interrupts. */
3031:../freertos/tasks.c **** 	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
3032:../freertos/tasks.c **** 
3033:../freertos/tasks.c **** 	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
3034:../freertos/tasks.c **** }
3035:../freertos/tasks.c **** /*-----------------------------------------------------------*/
3036:../freertos/tasks.c **** 
3037:../freertos/tasks.c **** void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickT
3038:../freertos/tasks.c **** {
3039:../freertos/tasks.c **** 	configASSERT( pxEventList );
3040:../freertos/tasks.c **** 
3041:../freertos/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
3042:../freertos/tasks.c **** 	the event groups implementation. */
3043:../freertos/tasks.c **** 	configASSERT( uxSchedulerSuspended != 0 );
3044:../freertos/tasks.c **** 
3045:../freertos/tasks.c **** 	/* Store the item value in the event list item.  It is safe to access the
3046:../freertos/tasks.c **** 	event list item here as interrupts won't access the event list item of a
3047:../freertos/tasks.c **** 	task that is not in the Blocked state. */
3048:../freertos/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE
3049:../freertos/tasks.c **** 
3050:../freertos/tasks.c **** 	/* Place the event list item of the TCB at the end of the appropriate event
ARM GAS  /tmp/ccaP1CVS.s 			page 56


3051:../freertos/tasks.c **** 	list.  It is safe to access the event list here because it is part of an
3052:../freertos/tasks.c **** 	event group implementation - and interrupts don't access event groups
3053:../freertos/tasks.c **** 	directly (instead they access them indirectly by pending function calls to
3054:../freertos/tasks.c **** 	the task level). */
3055:../freertos/tasks.c **** 	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
3056:../freertos/tasks.c **** 
3057:../freertos/tasks.c **** 	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
3058:../freertos/tasks.c **** }
3059:../freertos/tasks.c **** /*-----------------------------------------------------------*/
3060:../freertos/tasks.c **** 
3061:../freertos/tasks.c **** #if( configUSE_TIMERS == 1 )
3062:../freertos/tasks.c **** 
3063:../freertos/tasks.c **** 	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const B
3064:../freertos/tasks.c **** 	{
3065:../freertos/tasks.c **** 		configASSERT( pxEventList );
3066:../freertos/tasks.c **** 
3067:../freertos/tasks.c **** 		/* This function should not be called by application code hence the
3068:../freertos/tasks.c **** 		'Restricted' in its name.  It is not part of the public API.  It is
3069:../freertos/tasks.c **** 		designed for use by kernel code, and has special calling requirements -
3070:../freertos/tasks.c **** 		it should be called with the scheduler suspended. */
3071:../freertos/tasks.c **** 
3072:../freertos/tasks.c **** 
3073:../freertos/tasks.c **** 		/* Place the event list item of the TCB in the appropriate event list.
3074:../freertos/tasks.c **** 		In this case it is assume that this is the only task that is going to
3075:../freertos/tasks.c **** 		be waiting on this event list, so the faster vListInsertEnd() function
3076:../freertos/tasks.c **** 		can be used in place of vListInsert. */
3077:../freertos/tasks.c **** 		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
3078:../freertos/tasks.c **** 
3079:../freertos/tasks.c **** 		/* If the task should block indefinitely then set the block time to a
3080:../freertos/tasks.c **** 		value that will be recognised as an indefinite delay inside the
3081:../freertos/tasks.c **** 		prvAddCurrentTaskToDelayedList() function. */
3082:../freertos/tasks.c **** 		if( xWaitIndefinitely != pdFALSE )
3083:../freertos/tasks.c **** 		{
3084:../freertos/tasks.c **** 			xTicksToWait = portMAX_DELAY;
3085:../freertos/tasks.c **** 		}
3086:../freertos/tasks.c **** 
3087:../freertos/tasks.c **** 		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
3088:../freertos/tasks.c **** 		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
3089:../freertos/tasks.c **** 	}
3090:../freertos/tasks.c **** 
3091:../freertos/tasks.c **** #endif /* configUSE_TIMERS */
3092:../freertos/tasks.c **** /*-----------------------------------------------------------*/
3093:../freertos/tasks.c **** 
3094:../freertos/tasks.c **** BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
3095:../freertos/tasks.c **** {
3096:../freertos/tasks.c **** TCB_t *pxUnblockedTCB;
3097:../freertos/tasks.c **** BaseType_t xReturn;
3098:../freertos/tasks.c **** 
3099:../freertos/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED FROM A CRITICAL SECTION.  It can also be
3100:../freertos/tasks.c **** 	called from a critical section within an ISR. */
3101:../freertos/tasks.c **** 
3102:../freertos/tasks.c **** 	/* The event list is sorted in priority order, so the first in the list can
3103:../freertos/tasks.c **** 	be removed as it is known to be the highest priority.  Remove the TCB from
3104:../freertos/tasks.c **** 	the delayed list, and add it to the ready list.
3105:../freertos/tasks.c **** 
3106:../freertos/tasks.c **** 	If an event is for a queue that is locked then this function will never
3107:../freertos/tasks.c **** 	get called - the lock count on the queue will get modified instead.  This
ARM GAS  /tmp/ccaP1CVS.s 			page 57


3108:../freertos/tasks.c **** 	means exclusive access to the event list is guaranteed here.
3109:../freertos/tasks.c **** 
3110:../freertos/tasks.c **** 	This function assumes that a check has already been made to ensure that
3111:../freertos/tasks.c **** 	pxEventList is not empty. */
3112:../freertos/tasks.c **** 	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this 
3113:../freertos/tasks.c **** 	configASSERT( pxUnblockedTCB );
3114:../freertos/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
3115:../freertos/tasks.c **** 
3116:../freertos/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
3117:../freertos/tasks.c **** 	{
3118:../freertos/tasks.c **** 		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
3119:../freertos/tasks.c **** 		prvAddTaskToReadyList( pxUnblockedTCB );
3120:../freertos/tasks.c **** 
3121:../freertos/tasks.c **** 		#if( configUSE_TICKLESS_IDLE != 0 )
3122:../freertos/tasks.c **** 		{
3123:../freertos/tasks.c **** 			/* If a task is blocked on a kernel object then xNextTaskUnblockTime
3124:../freertos/tasks.c **** 			might be set to the blocked task's time out time.  If the task is
3125:../freertos/tasks.c **** 			unblocked for a reason other than a timeout xNextTaskUnblockTime is
3126:../freertos/tasks.c **** 			normally left unchanged, because it is automatically reset to a new
3127:../freertos/tasks.c **** 			value when the tick count equals xNextTaskUnblockTime.  However if
3128:../freertos/tasks.c **** 			tickless idling is used it might be more important to enter sleep mode
3129:../freertos/tasks.c **** 			at the earliest possible time - so reset xNextTaskUnblockTime here to
3130:../freertos/tasks.c **** 			ensure it is updated at the earliest possible time. */
3131:../freertos/tasks.c **** 			prvResetNextTaskUnblockTime();
3132:../freertos/tasks.c **** 		}
3133:../freertos/tasks.c **** 		#endif
3134:../freertos/tasks.c **** 	}
3135:../freertos/tasks.c **** 	else
3136:../freertos/tasks.c **** 	{
3137:../freertos/tasks.c **** 		/* The delayed and ready lists cannot be accessed, so hold this task
3138:../freertos/tasks.c **** 		pending until the scheduler is resumed. */
3139:../freertos/tasks.c **** 		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
3140:../freertos/tasks.c **** 	}
3141:../freertos/tasks.c **** 
3142:../freertos/tasks.c **** 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
3143:../freertos/tasks.c **** 	{
3144:../freertos/tasks.c **** 		/* Return true if the task removed from the event list has a higher
3145:../freertos/tasks.c **** 		priority than the calling task.  This allows the calling task to know if
3146:../freertos/tasks.c **** 		it should force a context switch now. */
3147:../freertos/tasks.c **** 		xReturn = pdTRUE;
3148:../freertos/tasks.c **** 
3149:../freertos/tasks.c **** 		/* Mark that a yield is pending in case the user is not using the
3150:../freertos/tasks.c **** 		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
3151:../freertos/tasks.c **** 		xYieldPending = pdTRUE;
3152:../freertos/tasks.c **** 	}
3153:../freertos/tasks.c **** 	else
3154:../freertos/tasks.c **** 	{
3155:../freertos/tasks.c **** 		xReturn = pdFALSE;
3156:../freertos/tasks.c **** 	}
3157:../freertos/tasks.c **** 
3158:../freertos/tasks.c **** 	return xReturn;
3159:../freertos/tasks.c **** }
3160:../freertos/tasks.c **** /*-----------------------------------------------------------*/
3161:../freertos/tasks.c **** 
3162:../freertos/tasks.c **** void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
3163:../freertos/tasks.c **** {
3164:../freertos/tasks.c **** TCB_t *pxUnblockedTCB;
ARM GAS  /tmp/ccaP1CVS.s 			page 58


3165:../freertos/tasks.c **** 
3166:../freertos/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
3167:../freertos/tasks.c **** 	the event flags implementation. */
3168:../freertos/tasks.c **** 	configASSERT( uxSchedulerSuspended != pdFALSE );
3169:../freertos/tasks.c **** 
3170:../freertos/tasks.c **** 	/* Store the new item value in the event list. */
3171:../freertos/tasks.c **** 	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
3172:../freertos/tasks.c **** 
3173:../freertos/tasks.c **** 	/* Remove the event list form the event flag.  Interrupts do not access
3174:../freertos/tasks.c **** 	event flags. */
3175:../freertos/tasks.c **** 	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this 
3176:../freertos/tasks.c **** 	configASSERT( pxUnblockedTCB );
3177:../freertos/tasks.c **** 	( void ) uxListRemove( pxEventListItem );
3178:../freertos/tasks.c **** 
3179:../freertos/tasks.c **** 	/* Remove the task from the delayed list and add it to the ready list.  The
3180:../freertos/tasks.c **** 	scheduler is suspended so interrupts will not be accessing the ready
3181:../freertos/tasks.c **** 	lists. */
3182:../freertos/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
3183:../freertos/tasks.c **** 	prvAddTaskToReadyList( pxUnblockedTCB );
3184:../freertos/tasks.c **** 
3185:../freertos/tasks.c **** 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
3186:../freertos/tasks.c **** 	{
3187:../freertos/tasks.c **** 		/* The unblocked task has a priority above that of the calling task, so
3188:../freertos/tasks.c **** 		a context switch is required.  This function is called with the
3189:../freertos/tasks.c **** 		scheduler suspended so xYieldPending is set so the context switch
3190:../freertos/tasks.c **** 		occurs immediately that the scheduler is resumed (unsuspended). */
3191:../freertos/tasks.c **** 		xYieldPending = pdTRUE;
3192:../freertos/tasks.c **** 	}
3193:../freertos/tasks.c **** }
3194:../freertos/tasks.c **** /*-----------------------------------------------------------*/
3195:../freertos/tasks.c **** 
3196:../freertos/tasks.c **** void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
3197:../freertos/tasks.c **** {
3198:../freertos/tasks.c **** 	configASSERT( pxTimeOut );
3199:../freertos/tasks.c **** 	taskENTER_CRITICAL();
3200:../freertos/tasks.c **** 	{
3201:../freertos/tasks.c **** 		pxTimeOut->xOverflowCount = xNumOfOverflows;
3202:../freertos/tasks.c **** 		pxTimeOut->xTimeOnEntering = xTickCount;
3203:../freertos/tasks.c **** 	}
3204:../freertos/tasks.c **** 	taskEXIT_CRITICAL();
3205:../freertos/tasks.c **** }
3206:../freertos/tasks.c **** /*-----------------------------------------------------------*/
3207:../freertos/tasks.c **** 
3208:../freertos/tasks.c **** void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
3209:../freertos/tasks.c **** {
3210:../freertos/tasks.c **** 	/* For internal use only as it does not use a critical section. */
3211:../freertos/tasks.c **** 	pxTimeOut->xOverflowCount = xNumOfOverflows;
3212:../freertos/tasks.c **** 	pxTimeOut->xTimeOnEntering = xTickCount;
3213:../freertos/tasks.c **** }
3214:../freertos/tasks.c **** /*-----------------------------------------------------------*/
3215:../freertos/tasks.c **** 
3216:../freertos/tasks.c **** BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
3217:../freertos/tasks.c **** {
3218:../freertos/tasks.c **** BaseType_t xReturn;
3219:../freertos/tasks.c **** 
3220:../freertos/tasks.c **** 	configASSERT( pxTimeOut );
3221:../freertos/tasks.c **** 	configASSERT( pxTicksToWait );
ARM GAS  /tmp/ccaP1CVS.s 			page 59


3222:../freertos/tasks.c **** 
3223:../freertos/tasks.c **** 	taskENTER_CRITICAL();
3224:../freertos/tasks.c **** 	{
3225:../freertos/tasks.c **** 		/* Minor optimisation.  The tick count cannot change in this block. */
3226:../freertos/tasks.c **** 		const TickType_t xConstTickCount = xTickCount;
3227:../freertos/tasks.c **** 		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
3228:../freertos/tasks.c **** 
3229:../freertos/tasks.c **** 		#if( INCLUDE_xTaskAbortDelay == 1 )
3230:../freertos/tasks.c **** 			if( pxCurrentTCB->ucDelayAborted != ( uint8_t ) pdFALSE )
3231:../freertos/tasks.c **** 			{
3232:../freertos/tasks.c **** 				/* The delay was aborted, which is not the same as a time out,
3233:../freertos/tasks.c **** 				but has the same result. */
3234:../freertos/tasks.c **** 				pxCurrentTCB->ucDelayAborted = pdFALSE;
3235:../freertos/tasks.c **** 				xReturn = pdTRUE;
3236:../freertos/tasks.c **** 			}
3237:../freertos/tasks.c **** 			else
3238:../freertos/tasks.c **** 		#endif
3239:../freertos/tasks.c **** 
3240:../freertos/tasks.c **** 		#if ( INCLUDE_vTaskSuspend == 1 )
3241:../freertos/tasks.c **** 			if( *pxTicksToWait == portMAX_DELAY )
3242:../freertos/tasks.c **** 			{
3243:../freertos/tasks.c **** 				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
3244:../freertos/tasks.c **** 				specified is the maximum block time then the task should block
3245:../freertos/tasks.c **** 				indefinitely, and therefore never time out. */
3246:../freertos/tasks.c **** 				xReturn = pdFALSE;
3247:../freertos/tasks.c **** 			}
3248:../freertos/tasks.c **** 			else
3249:../freertos/tasks.c **** 		#endif
3250:../freertos/tasks.c **** 
3251:../freertos/tasks.c **** 		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEn
3252:../freertos/tasks.c **** 		{
3253:../freertos/tasks.c **** 			/* The tick count is greater than the time at which
3254:../freertos/tasks.c **** 			vTaskSetTimeout() was called, but has also overflowed since
3255:../freertos/tasks.c **** 			vTaskSetTimeOut() was called.  It must have wrapped all the way
3256:../freertos/tasks.c **** 			around and gone past again. This passed since vTaskSetTimeout()
3257:../freertos/tasks.c **** 			was called. */
3258:../freertos/tasks.c **** 			xReturn = pdTRUE;
3259:../freertos/tasks.c **** 		}
3260:../freertos/tasks.c **** 		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with som
3261:../freertos/tasks.c **** 		{
3262:../freertos/tasks.c **** 			/* Not a genuine timeout. Adjust parameters for time remaining. */
3263:../freertos/tasks.c **** 			*pxTicksToWait -= xElapsedTime;
3264:../freertos/tasks.c **** 			vTaskInternalSetTimeOutState( pxTimeOut );
3265:../freertos/tasks.c **** 			xReturn = pdFALSE;
3266:../freertos/tasks.c **** 		}
3267:../freertos/tasks.c **** 		else
3268:../freertos/tasks.c **** 		{
3269:../freertos/tasks.c **** 			*pxTicksToWait = 0;
3270:../freertos/tasks.c **** 			xReturn = pdTRUE;
3271:../freertos/tasks.c **** 		}
3272:../freertos/tasks.c **** 	}
3273:../freertos/tasks.c **** 	taskEXIT_CRITICAL();
3274:../freertos/tasks.c **** 
3275:../freertos/tasks.c **** 	return xReturn;
3276:../freertos/tasks.c **** }
3277:../freertos/tasks.c **** /*-----------------------------------------------------------*/
3278:../freertos/tasks.c **** 
ARM GAS  /tmp/ccaP1CVS.s 			page 60


3279:../freertos/tasks.c **** void vTaskMissedYield( void )
3280:../freertos/tasks.c **** {
3281:../freertos/tasks.c **** 	xYieldPending = pdTRUE;
3282:../freertos/tasks.c **** }
3283:../freertos/tasks.c **** /*-----------------------------------------------------------*/
3284:../freertos/tasks.c **** 
3285:../freertos/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3286:../freertos/tasks.c **** 
3287:../freertos/tasks.c **** 	UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
3288:../freertos/tasks.c **** 	{
3289:../freertos/tasks.c **** 	UBaseType_t uxReturn;
3290:../freertos/tasks.c **** 	TCB_t const *pxTCB;
3291:../freertos/tasks.c **** 
3292:../freertos/tasks.c **** 		if( xTask != NULL )
3293:../freertos/tasks.c **** 		{
3294:../freertos/tasks.c **** 			pxTCB = xTask;
3295:../freertos/tasks.c **** 			uxReturn = pxTCB->uxTaskNumber;
3296:../freertos/tasks.c **** 		}
3297:../freertos/tasks.c **** 		else
3298:../freertos/tasks.c **** 		{
3299:../freertos/tasks.c **** 			uxReturn = 0U;
3300:../freertos/tasks.c **** 		}
3301:../freertos/tasks.c **** 
3302:../freertos/tasks.c **** 		return uxReturn;
3303:../freertos/tasks.c **** 	}
3304:../freertos/tasks.c **** 
3305:../freertos/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3306:../freertos/tasks.c **** /*-----------------------------------------------------------*/
3307:../freertos/tasks.c **** 
3308:../freertos/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3309:../freertos/tasks.c **** 
3310:../freertos/tasks.c **** 	void vTaskSetTaskNumber( TaskHandle_t xTask, const UBaseType_t uxHandle )
3311:../freertos/tasks.c **** 	{
3312:../freertos/tasks.c **** 	TCB_t * pxTCB;
3313:../freertos/tasks.c **** 
3314:../freertos/tasks.c **** 		if( xTask != NULL )
3315:../freertos/tasks.c **** 		{
3316:../freertos/tasks.c **** 			pxTCB = xTask;
3317:../freertos/tasks.c **** 			pxTCB->uxTaskNumber = uxHandle;
3318:../freertos/tasks.c **** 		}
3319:../freertos/tasks.c **** 	}
3320:../freertos/tasks.c **** 
3321:../freertos/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3322:../freertos/tasks.c **** 
3323:../freertos/tasks.c **** /*
3324:../freertos/tasks.c ****  * -----------------------------------------------------------
3325:../freertos/tasks.c ****  * The Idle task.
3326:../freertos/tasks.c ****  * ----------------------------------------------------------
3327:../freertos/tasks.c ****  *
3328:../freertos/tasks.c ****  * The portTASK_FUNCTION() macro is used to allow port/compiler specific
3329:../freertos/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
3330:../freertos/tasks.c ****  *
3331:../freertos/tasks.c ****  * void prvIdleTask( void *pvParameters );
3332:../freertos/tasks.c ****  *
3333:../freertos/tasks.c ****  */
3334:../freertos/tasks.c **** static portTASK_FUNCTION( prvIdleTask, pvParameters )
3335:../freertos/tasks.c **** {
ARM GAS  /tmp/ccaP1CVS.s 			page 61


3336:../freertos/tasks.c **** 	/* Stop warnings. */
3337:../freertos/tasks.c **** 	( void ) pvParameters;
3338:../freertos/tasks.c **** 
3339:../freertos/tasks.c **** 	/** THIS IS THE RTOS IDLE TASK - WHICH IS CREATED AUTOMATICALLY WHEN THE
3340:../freertos/tasks.c **** 	SCHEDULER IS STARTED. **/
3341:../freertos/tasks.c **** 
3342:../freertos/tasks.c **** 	/* In case a task that has a secure context deletes itself, in which case
3343:../freertos/tasks.c **** 	the idle task is responsible for deleting the task's secure context, if
3344:../freertos/tasks.c **** 	any. */
3345:../freertos/tasks.c **** 	portALLOCATE_SECURE_CONTEXT( configMINIMAL_SECURE_STACK_SIZE );
3346:../freertos/tasks.c **** 
3347:../freertos/tasks.c **** 	for( ;; )
3348:../freertos/tasks.c **** 	{
3349:../freertos/tasks.c **** 		/* See if any tasks have deleted themselves - if so then the idle task
3350:../freertos/tasks.c **** 		is responsible for freeing the deleted task's TCB and stack. */
3351:../freertos/tasks.c **** 		prvCheckTasksWaitingTermination();
3352:../freertos/tasks.c **** 
3353:../freertos/tasks.c **** 		#if ( configUSE_PREEMPTION == 0 )
3354:../freertos/tasks.c **** 		{
3355:../freertos/tasks.c **** 			/* If we are not using preemption we keep forcing a task switch to
3356:../freertos/tasks.c **** 			see if any other task has become available.  If we are using
3357:../freertos/tasks.c **** 			preemption we don't need to do this as any task becoming available
3358:../freertos/tasks.c **** 			will automatically get the processor anyway. */
3359:../freertos/tasks.c **** 			taskYIELD();
3360:../freertos/tasks.c **** 		}
3361:../freertos/tasks.c **** 		#endif /* configUSE_PREEMPTION */
3362:../freertos/tasks.c **** 
3363:../freertos/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) )
3364:../freertos/tasks.c **** 		{
3365:../freertos/tasks.c **** 			/* When using preemption tasks of equal priority will be
3366:../freertos/tasks.c **** 			timesliced.  If a task that is sharing the idle priority is ready
3367:../freertos/tasks.c **** 			to run then the idle task should yield before the end of the
3368:../freertos/tasks.c **** 			timeslice.
3369:../freertos/tasks.c **** 
3370:../freertos/tasks.c **** 			A critical region is not required here as we are just reading from
3371:../freertos/tasks.c **** 			the list, and an occasional incorrect value will not matter.  If
3372:../freertos/tasks.c **** 			the ready list at the idle priority contains more than one task
3373:../freertos/tasks.c **** 			then a task other than the idle task is ready to execute. */
3374:../freertos/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
3375:../freertos/tasks.c **** 			{
3376:../freertos/tasks.c **** 				taskYIELD();
3377:../freertos/tasks.c **** 			}
3378:../freertos/tasks.c **** 			else
3379:../freertos/tasks.c **** 			{
3380:../freertos/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3381:../freertos/tasks.c **** 			}
3382:../freertos/tasks.c **** 		}
3383:../freertos/tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) ) */
3384:../freertos/tasks.c **** 
3385:../freertos/tasks.c **** 		#if ( configUSE_IDLE_HOOK == 1 )
3386:../freertos/tasks.c **** 		{
3387:../freertos/tasks.c **** 			extern void vApplicationIdleHook( void );
3388:../freertos/tasks.c **** 
3389:../freertos/tasks.c **** 			/* Call the user defined function from within the idle task.  This
3390:../freertos/tasks.c **** 			allows the application designer to add background functionality
3391:../freertos/tasks.c **** 			without the overhead of a separate task.
3392:../freertos/tasks.c **** 			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
ARM GAS  /tmp/ccaP1CVS.s 			page 62


3393:../freertos/tasks.c **** 			CALL A FUNCTION THAT MIGHT BLOCK. */
3394:../freertos/tasks.c **** 			vApplicationIdleHook();
3395:../freertos/tasks.c **** 		}
3396:../freertos/tasks.c **** 		#endif /* configUSE_IDLE_HOOK */
3397:../freertos/tasks.c **** 
3398:../freertos/tasks.c **** 		/* This conditional compilation should use inequality to 0, not equality
3399:../freertos/tasks.c **** 		to 1.  This is to ensure portSUPPRESS_TICKS_AND_SLEEP() is called when
3400:../freertos/tasks.c **** 		user defined low power mode	implementations require
3401:../freertos/tasks.c **** 		configUSE_TICKLESS_IDLE to be set to a value other than 1. */
3402:../freertos/tasks.c **** 		#if ( configUSE_TICKLESS_IDLE != 0 )
3403:../freertos/tasks.c **** 		{
3404:../freertos/tasks.c **** 		TickType_t xExpectedIdleTime;
3405:../freertos/tasks.c **** 
3406:../freertos/tasks.c **** 			/* It is not desirable to suspend then resume the scheduler on
3407:../freertos/tasks.c **** 			each iteration of the idle task.  Therefore, a preliminary
3408:../freertos/tasks.c **** 			test of the expected idle time is performed without the
3409:../freertos/tasks.c **** 			scheduler suspended.  The result here is not necessarily
3410:../freertos/tasks.c **** 			valid. */
3411:../freertos/tasks.c **** 			xExpectedIdleTime = prvGetExpectedIdleTime();
3412:../freertos/tasks.c **** 
3413:../freertos/tasks.c **** 			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3414:../freertos/tasks.c **** 			{
3415:../freertos/tasks.c **** 				vTaskSuspendAll();
3416:../freertos/tasks.c **** 				{
3417:../freertos/tasks.c **** 					/* Now the scheduler is suspended, the expected idle
3418:../freertos/tasks.c **** 					time can be sampled again, and this time its value can
3419:../freertos/tasks.c **** 					be used. */
3420:../freertos/tasks.c **** 					configASSERT( xNextTaskUnblockTime >= xTickCount );
3421:../freertos/tasks.c **** 					xExpectedIdleTime = prvGetExpectedIdleTime();
3422:../freertos/tasks.c **** 
3423:../freertos/tasks.c **** 					/* Define the following macro to set xExpectedIdleTime to 0
3424:../freertos/tasks.c **** 					if the application does not want
3425:../freertos/tasks.c **** 					portSUPPRESS_TICKS_AND_SLEEP() to be called. */
3426:../freertos/tasks.c **** 					configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );
3427:../freertos/tasks.c **** 
3428:../freertos/tasks.c **** 					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3429:../freertos/tasks.c **** 					{
3430:../freertos/tasks.c **** 						traceLOW_POWER_IDLE_BEGIN();
3431:../freertos/tasks.c **** 						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
3432:../freertos/tasks.c **** 						traceLOW_POWER_IDLE_END();
3433:../freertos/tasks.c **** 					}
3434:../freertos/tasks.c **** 					else
3435:../freertos/tasks.c **** 					{
3436:../freertos/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3437:../freertos/tasks.c **** 					}
3438:../freertos/tasks.c **** 				}
3439:../freertos/tasks.c **** 				( void ) xTaskResumeAll();
3440:../freertos/tasks.c **** 			}
3441:../freertos/tasks.c **** 			else
3442:../freertos/tasks.c **** 			{
3443:../freertos/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3444:../freertos/tasks.c **** 			}
3445:../freertos/tasks.c **** 		}
3446:../freertos/tasks.c **** 		#endif /* configUSE_TICKLESS_IDLE */
3447:../freertos/tasks.c **** 	}
3448:../freertos/tasks.c **** }
3449:../freertos/tasks.c **** /*-----------------------------------------------------------*/
ARM GAS  /tmp/ccaP1CVS.s 			page 63


3450:../freertos/tasks.c **** 
3451:../freertos/tasks.c **** #if( configUSE_TICKLESS_IDLE != 0 )
3452:../freertos/tasks.c **** 
3453:../freertos/tasks.c **** 	eSleepModeStatus eTaskConfirmSleepModeStatus( void )
3454:../freertos/tasks.c **** 	{
3455:../freertos/tasks.c **** 	/* The idle task exists in addition to the application tasks. */
3456:../freertos/tasks.c **** 	const UBaseType_t uxNonApplicationTasks = 1;
3457:../freertos/tasks.c **** 	eSleepModeStatus eReturn = eStandardSleep;
3458:../freertos/tasks.c **** 
3459:../freertos/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
3460:../freertos/tasks.c **** 		{
3461:../freertos/tasks.c **** 			/* A task was made ready while the scheduler was suspended. */
3462:../freertos/tasks.c **** 			eReturn = eAbortSleep;
3463:../freertos/tasks.c **** 		}
3464:../freertos/tasks.c **** 		else if( xYieldPending != pdFALSE )
3465:../freertos/tasks.c **** 		{
3466:../freertos/tasks.c **** 			/* A yield was pended while the scheduler was suspended. */
3467:../freertos/tasks.c **** 			eReturn = eAbortSleep;
3468:../freertos/tasks.c **** 		}
3469:../freertos/tasks.c **** 		else
3470:../freertos/tasks.c **** 		{
3471:../freertos/tasks.c **** 			/* If all the tasks are in the suspended list (which might mean they
3472:../freertos/tasks.c **** 			have an infinite block time rather than actually being suspended)
3473:../freertos/tasks.c **** 			then it is safe to turn all clocks off and just wait for external
3474:../freertos/tasks.c **** 			interrupts. */
3475:../freertos/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicatio
3476:../freertos/tasks.c **** 			{
3477:../freertos/tasks.c **** 				eReturn = eNoTasksWaitingTimeout;
3478:../freertos/tasks.c **** 			}
3479:../freertos/tasks.c **** 			else
3480:../freertos/tasks.c **** 			{
3481:../freertos/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3482:../freertos/tasks.c **** 			}
3483:../freertos/tasks.c **** 		}
3484:../freertos/tasks.c **** 
3485:../freertos/tasks.c **** 		return eReturn;
3486:../freertos/tasks.c **** 	}
3487:../freertos/tasks.c **** 
3488:../freertos/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
3489:../freertos/tasks.c **** /*-----------------------------------------------------------*/
3490:../freertos/tasks.c **** 
3491:../freertos/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3492:../freertos/tasks.c **** 
3493:../freertos/tasks.c **** 	void vTaskSetThreadLocalStoragePointer( TaskHandle_t xTaskToSet, BaseType_t xIndex, void *pvValue 
3494:../freertos/tasks.c **** 	{
3495:../freertos/tasks.c **** 	TCB_t *pxTCB;
3496:../freertos/tasks.c **** 
3497:../freertos/tasks.c **** 		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
3498:../freertos/tasks.c **** 		{
3499:../freertos/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToSet );
3500:../freertos/tasks.c **** 			pxTCB->pvThreadLocalStoragePointers[ xIndex ] = pvValue;
3501:../freertos/tasks.c **** 		}
3502:../freertos/tasks.c **** 	}
3503:../freertos/tasks.c **** 
3504:../freertos/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3505:../freertos/tasks.c **** /*-----------------------------------------------------------*/
3506:../freertos/tasks.c **** 
ARM GAS  /tmp/ccaP1CVS.s 			page 64


3507:../freertos/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3508:../freertos/tasks.c **** 
3509:../freertos/tasks.c **** 	void *pvTaskGetThreadLocalStoragePointer( TaskHandle_t xTaskToQuery, BaseType_t xIndex )
3510:../freertos/tasks.c **** 	{
3511:../freertos/tasks.c **** 	void *pvReturn = NULL;
3512:../freertos/tasks.c **** 	TCB_t *pxTCB;
3513:../freertos/tasks.c **** 
3514:../freertos/tasks.c **** 		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
3515:../freertos/tasks.c **** 		{
3516:../freertos/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToQuery );
3517:../freertos/tasks.c **** 			pvReturn = pxTCB->pvThreadLocalStoragePointers[ xIndex ];
3518:../freertos/tasks.c **** 		}
3519:../freertos/tasks.c **** 		else
3520:../freertos/tasks.c **** 		{
3521:../freertos/tasks.c **** 			pvReturn = NULL;
3522:../freertos/tasks.c **** 		}
3523:../freertos/tasks.c **** 
3524:../freertos/tasks.c **** 		return pvReturn;
3525:../freertos/tasks.c **** 	}
3526:../freertos/tasks.c **** 
3527:../freertos/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3528:../freertos/tasks.c **** /*-----------------------------------------------------------*/
3529:../freertos/tasks.c **** 
3530:../freertos/tasks.c **** #if ( portUSING_MPU_WRAPPERS == 1 )
3531:../freertos/tasks.c **** 
3532:../freertos/tasks.c **** 	void vTaskAllocateMPURegions( TaskHandle_t xTaskToModify, const MemoryRegion_t * const xRegions )
3533:../freertos/tasks.c **** 	{
3534:../freertos/tasks.c **** 	TCB_t *pxTCB;
3535:../freertos/tasks.c **** 
3536:../freertos/tasks.c **** 		/* If null is passed in here then we are modifying the MPU settings of
3537:../freertos/tasks.c **** 		the calling task. */
3538:../freertos/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTaskToModify );
3539:../freertos/tasks.c **** 
3540:../freertos/tasks.c **** 		vPortStoreTaskMPUSettings( &( pxTCB->xMPUSettings ), xRegions, NULL, 0 );
3541:../freertos/tasks.c **** 	}
3542:../freertos/tasks.c **** 
3543:../freertos/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
3544:../freertos/tasks.c **** /*-----------------------------------------------------------*/
3545:../freertos/tasks.c **** 
3546:../freertos/tasks.c **** static void prvInitialiseTaskLists( void )
3547:../freertos/tasks.c **** {
3548:../freertos/tasks.c **** UBaseType_t uxPriority;
3549:../freertos/tasks.c **** 
3550:../freertos/tasks.c **** 	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriorit
3551:../freertos/tasks.c **** 	{
3552:../freertos/tasks.c **** 		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
3553:../freertos/tasks.c **** 	}
3554:../freertos/tasks.c **** 
3555:../freertos/tasks.c **** 	vListInitialise( &xDelayedTaskList1 );
3556:../freertos/tasks.c **** 	vListInitialise( &xDelayedTaskList2 );
3557:../freertos/tasks.c **** 	vListInitialise( &xPendingReadyList );
3558:../freertos/tasks.c **** 
3559:../freertos/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
3560:../freertos/tasks.c **** 	{
3561:../freertos/tasks.c **** 		vListInitialise( &xTasksWaitingTermination );
3562:../freertos/tasks.c **** 	}
3563:../freertos/tasks.c **** 	#endif /* INCLUDE_vTaskDelete */
ARM GAS  /tmp/ccaP1CVS.s 			page 65


3564:../freertos/tasks.c **** 
3565:../freertos/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
3566:../freertos/tasks.c **** 	{
3567:../freertos/tasks.c **** 		vListInitialise( &xSuspendedTaskList );
3568:../freertos/tasks.c **** 	}
3569:../freertos/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
3570:../freertos/tasks.c **** 
3571:../freertos/tasks.c **** 	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
3572:../freertos/tasks.c **** 	using list2. */
3573:../freertos/tasks.c **** 	pxDelayedTaskList = &xDelayedTaskList1;
3574:../freertos/tasks.c **** 	pxOverflowDelayedTaskList = &xDelayedTaskList2;
3575:../freertos/tasks.c **** }
3576:../freertos/tasks.c **** /*-----------------------------------------------------------*/
3577:../freertos/tasks.c **** 
3578:../freertos/tasks.c **** static void prvCheckTasksWaitingTermination( void )
3579:../freertos/tasks.c **** {
3580:../freertos/tasks.c **** 
3581:../freertos/tasks.c **** 	/** THIS FUNCTION IS CALLED FROM THE RTOS IDLE TASK **/
3582:../freertos/tasks.c **** 
3583:../freertos/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
3584:../freertos/tasks.c **** 	{
3585:../freertos/tasks.c **** 		TCB_t *pxTCB;
3586:../freertos/tasks.c **** 
3587:../freertos/tasks.c **** 		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
3588:../freertos/tasks.c **** 		being called too often in the idle task. */
3589:../freertos/tasks.c **** 		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
3590:../freertos/tasks.c **** 		{
3591:../freertos/tasks.c **** 			taskENTER_CRITICAL();
3592:../freertos/tasks.c **** 			{
3593:../freertos/tasks.c **** 				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is u
3594:../freertos/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
3595:../freertos/tasks.c **** 				--uxCurrentNumberOfTasks;
3596:../freertos/tasks.c **** 				--uxDeletedTasksWaitingCleanUp;
3597:../freertos/tasks.c **** 			}
3598:../freertos/tasks.c **** 			taskEXIT_CRITICAL();
3599:../freertos/tasks.c **** 
3600:../freertos/tasks.c **** 			prvDeleteTCB( pxTCB );
3601:../freertos/tasks.c **** 		}
3602:../freertos/tasks.c **** 	}
3603:../freertos/tasks.c **** 	#endif /* INCLUDE_vTaskDelete */
3604:../freertos/tasks.c **** }
3605:../freertos/tasks.c **** /*-----------------------------------------------------------*/
3606:../freertos/tasks.c **** 
3607:../freertos/tasks.c **** #if( configUSE_TRACE_FACILITY == 1 )
3608:../freertos/tasks.c **** 
3609:../freertos/tasks.c **** 	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, 
3610:../freertos/tasks.c **** 	{
3611:../freertos/tasks.c **** 	TCB_t *pxTCB;
3612:../freertos/tasks.c **** 
3613:../freertos/tasks.c **** 		/* xTask is NULL then get the state of the calling task. */
3614:../freertos/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
3615:../freertos/tasks.c **** 
3616:../freertos/tasks.c **** 		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
3617:../freertos/tasks.c **** 		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
3618:../freertos/tasks.c **** 		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
3619:../freertos/tasks.c **** 		pxTaskStatus->pxStackBase = pxTCB->pxStack;
3620:../freertos/tasks.c **** 		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
ARM GAS  /tmp/ccaP1CVS.s 			page 66


3621:../freertos/tasks.c **** 
3622:../freertos/tasks.c **** 		#if ( configUSE_MUTEXES == 1 )
3623:../freertos/tasks.c **** 		{
3624:../freertos/tasks.c **** 			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
3625:../freertos/tasks.c **** 		}
3626:../freertos/tasks.c **** 		#else
3627:../freertos/tasks.c **** 		{
3628:../freertos/tasks.c **** 			pxTaskStatus->uxBasePriority = 0;
3629:../freertos/tasks.c **** 		}
3630:../freertos/tasks.c **** 		#endif
3631:../freertos/tasks.c **** 
3632:../freertos/tasks.c **** 		#if ( configGENERATE_RUN_TIME_STATS == 1 )
3633:../freertos/tasks.c **** 		{
3634:../freertos/tasks.c **** 			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
3635:../freertos/tasks.c **** 		}
3636:../freertos/tasks.c **** 		#else
3637:../freertos/tasks.c **** 		{
3638:../freertos/tasks.c **** 			pxTaskStatus->ulRunTimeCounter = 0;
3639:../freertos/tasks.c **** 		}
3640:../freertos/tasks.c **** 		#endif
3641:../freertos/tasks.c **** 
3642:../freertos/tasks.c **** 		/* Obtaining the task state is a little fiddly, so is only done if the
3643:../freertos/tasks.c **** 		value of eState passed into this function is eInvalid - otherwise the
3644:../freertos/tasks.c **** 		state is just set to whatever is passed in. */
3645:../freertos/tasks.c **** 		if( eState != eInvalid )
3646:../freertos/tasks.c **** 		{
3647:../freertos/tasks.c **** 			if( pxTCB == pxCurrentTCB )
3648:../freertos/tasks.c **** 			{
3649:../freertos/tasks.c **** 				pxTaskStatus->eCurrentState = eRunning;
3650:../freertos/tasks.c **** 			}
3651:../freertos/tasks.c **** 			else
3652:../freertos/tasks.c **** 			{
3653:../freertos/tasks.c **** 				pxTaskStatus->eCurrentState = eState;
3654:../freertos/tasks.c **** 
3655:../freertos/tasks.c **** 				#if ( INCLUDE_vTaskSuspend == 1 )
3656:../freertos/tasks.c **** 				{
3657:../freertos/tasks.c **** 					/* If the task is in the suspended list then there is a
3658:../freertos/tasks.c **** 					chance it is actually just blocked indefinitely - so really
3659:../freertos/tasks.c **** 					it should be reported as being in the Blocked state. */
3660:../freertos/tasks.c **** 					if( eState == eSuspended )
3661:../freertos/tasks.c **** 					{
3662:../freertos/tasks.c **** 						vTaskSuspendAll();
3663:../freertos/tasks.c **** 						{
3664:../freertos/tasks.c **** 							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
3665:../freertos/tasks.c **** 							{
3666:../freertos/tasks.c **** 								pxTaskStatus->eCurrentState = eBlocked;
3667:../freertos/tasks.c **** 							}
3668:../freertos/tasks.c **** 						}
3669:../freertos/tasks.c **** 						( void ) xTaskResumeAll();
3670:../freertos/tasks.c **** 					}
3671:../freertos/tasks.c **** 				}
3672:../freertos/tasks.c **** 				#endif /* INCLUDE_vTaskSuspend */
3673:../freertos/tasks.c **** 			}
3674:../freertos/tasks.c **** 		}
3675:../freertos/tasks.c **** 		else
3676:../freertos/tasks.c **** 		{
3677:../freertos/tasks.c **** 			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
ARM GAS  /tmp/ccaP1CVS.s 			page 67


3678:../freertos/tasks.c **** 		}
3679:../freertos/tasks.c **** 
3680:../freertos/tasks.c **** 		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
3681:../freertos/tasks.c **** 		parameter is provided to allow it to be skipped. */
3682:../freertos/tasks.c **** 		if( xGetFreeStackSpace != pdFALSE )
3683:../freertos/tasks.c **** 		{
3684:../freertos/tasks.c **** 			#if ( portSTACK_GROWTH > 0 )
3685:../freertos/tasks.c **** 			{
3686:../freertos/tasks.c **** 				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfSt
3687:../freertos/tasks.c **** 			}
3688:../freertos/tasks.c **** 			#else
3689:../freertos/tasks.c **** 			{
3690:../freertos/tasks.c **** 				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack )
3691:../freertos/tasks.c **** 			}
3692:../freertos/tasks.c **** 			#endif
3693:../freertos/tasks.c **** 		}
3694:../freertos/tasks.c **** 		else
3695:../freertos/tasks.c **** 		{
3696:../freertos/tasks.c **** 			pxTaskStatus->usStackHighWaterMark = 0;
3697:../freertos/tasks.c **** 		}
3698:../freertos/tasks.c **** 	}
3699:../freertos/tasks.c **** 
3700:../freertos/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3701:../freertos/tasks.c **** /*-----------------------------------------------------------*/
3702:../freertos/tasks.c **** 
3703:../freertos/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3704:../freertos/tasks.c **** 
3705:../freertos/tasks.c **** 	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, 
3706:../freertos/tasks.c **** 	{
3707:../freertos/tasks.c **** 	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
3708:../freertos/tasks.c **** 	UBaseType_t uxTask = 0;
3709:../freertos/tasks.c **** 
3710:../freertos/tasks.c **** 		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
3711:../freertos/tasks.c **** 		{
3712:../freertos/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is
3713:../freertos/tasks.c **** 
3714:../freertos/tasks.c **** 			/* Populate an TaskStatus_t structure within the
3715:../freertos/tasks.c **** 			pxTaskStatusArray array for each task that is referenced from
3716:../freertos/tasks.c **** 			pxList.  See the definition of TaskStatus_t in task.h for the
3717:../freertos/tasks.c **** 			meaning of each TaskStatus_t structure member. */
3718:../freertos/tasks.c **** 			do
3719:../freertos/tasks.c **** 			{
3720:../freertos/tasks.c **** 				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is
3721:../freertos/tasks.c **** 				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
3722:../freertos/tasks.c **** 				uxTask++;
3723:../freertos/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
3724:../freertos/tasks.c **** 		}
3725:../freertos/tasks.c **** 		else
3726:../freertos/tasks.c **** 		{
3727:../freertos/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3728:../freertos/tasks.c **** 		}
3729:../freertos/tasks.c **** 
3730:../freertos/tasks.c **** 		return uxTask;
3731:../freertos/tasks.c **** 	}
3732:../freertos/tasks.c **** 
3733:../freertos/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3734:../freertos/tasks.c **** /*-----------------------------------------------------------*/
ARM GAS  /tmp/ccaP1CVS.s 			page 68


3735:../freertos/tasks.c **** 
3736:../freertos/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUD
3737:../freertos/tasks.c **** 
3738:../freertos/tasks.c **** 	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
3739:../freertos/tasks.c **** 	{
3740:../freertos/tasks.c **** 	uint32_t ulCount = 0U;
3741:../freertos/tasks.c **** 
3742:../freertos/tasks.c **** 		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
3743:../freertos/tasks.c **** 		{
3744:../freertos/tasks.c **** 			pucStackByte -= portSTACK_GROWTH;
3745:../freertos/tasks.c **** 			ulCount++;
3746:../freertos/tasks.c **** 		}
3747:../freertos/tasks.c **** 
3748:../freertos/tasks.c **** 		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller a
3749:../freertos/tasks.c **** 
3750:../freertos/tasks.c **** 		return ( configSTACK_DEPTH_TYPE ) ulCount;
3751:../freertos/tasks.c **** 	}
3752:../freertos/tasks.c **** 
3753:../freertos/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( 
3754:../freertos/tasks.c **** /*-----------------------------------------------------------*/
3755:../freertos/tasks.c **** 
3756:../freertos/tasks.c **** #if ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 )
3757:../freertos/tasks.c **** 
3758:../freertos/tasks.c **** 	/* uxTaskGetStackHighWaterMark() and uxTaskGetStackHighWaterMark2() are the
3759:../freertos/tasks.c **** 	same except for their return type.  Using configSTACK_DEPTH_TYPE allows the
3760:../freertos/tasks.c **** 	user to determine the return type.  It gets around the problem of the value
3761:../freertos/tasks.c **** 	overflowing on 8-bit types without breaking backward compatibility for
3762:../freertos/tasks.c **** 	applications that expect an 8-bit return type. */
3763:../freertos/tasks.c **** 	configSTACK_DEPTH_TYPE uxTaskGetStackHighWaterMark2( TaskHandle_t xTask )
3764:../freertos/tasks.c **** 	{
3765:../freertos/tasks.c **** 	TCB_t *pxTCB;
3766:../freertos/tasks.c **** 	uint8_t *pucEndOfStack;
3767:../freertos/tasks.c **** 	configSTACK_DEPTH_TYPE uxReturn;
3768:../freertos/tasks.c **** 
3769:../freertos/tasks.c **** 		/* uxTaskGetStackHighWaterMark() and uxTaskGetStackHighWaterMark2() are
3770:../freertos/tasks.c **** 		the same except for their return type.  Using configSTACK_DEPTH_TYPE
3771:../freertos/tasks.c **** 		allows the user to determine the return type.  It gets around the
3772:../freertos/tasks.c **** 		problem of the value overflowing on 8-bit types without breaking
3773:../freertos/tasks.c **** 		backward compatibility for applications that expect an 8-bit return
3774:../freertos/tasks.c **** 		type. */
3775:../freertos/tasks.c **** 
3776:../freertos/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
3777:../freertos/tasks.c **** 
3778:../freertos/tasks.c **** 		#if portSTACK_GROWTH < 0
3779:../freertos/tasks.c **** 		{
3780:../freertos/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
3781:../freertos/tasks.c **** 		}
3782:../freertos/tasks.c **** 		#else
3783:../freertos/tasks.c **** 		{
3784:../freertos/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
3785:../freertos/tasks.c **** 		}
3786:../freertos/tasks.c **** 		#endif
3787:../freertos/tasks.c **** 
3788:../freertos/tasks.c **** 		uxReturn = prvTaskCheckFreeStackSpace( pucEndOfStack );
3789:../freertos/tasks.c **** 
3790:../freertos/tasks.c **** 		return uxReturn;
3791:../freertos/tasks.c **** 	}
ARM GAS  /tmp/ccaP1CVS.s 			page 69


3792:../freertos/tasks.c **** 
3793:../freertos/tasks.c **** #endif /* INCLUDE_uxTaskGetStackHighWaterMark2 */
3794:../freertos/tasks.c **** /*-----------------------------------------------------------*/
3795:../freertos/tasks.c **** 
3796:../freertos/tasks.c **** #if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )
3797:../freertos/tasks.c **** 
3798:../freertos/tasks.c **** 	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
3799:../freertos/tasks.c **** 	{
3800:../freertos/tasks.c **** 	TCB_t *pxTCB;
3801:../freertos/tasks.c **** 	uint8_t *pucEndOfStack;
3802:../freertos/tasks.c **** 	UBaseType_t uxReturn;
3803:../freertos/tasks.c **** 
3804:../freertos/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
3805:../freertos/tasks.c **** 
3806:../freertos/tasks.c **** 		#if portSTACK_GROWTH < 0
3807:../freertos/tasks.c **** 		{
3808:../freertos/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
3809:../freertos/tasks.c **** 		}
3810:../freertos/tasks.c **** 		#else
3811:../freertos/tasks.c **** 		{
3812:../freertos/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
3813:../freertos/tasks.c **** 		}
3814:../freertos/tasks.c **** 		#endif
3815:../freertos/tasks.c **** 
3816:../freertos/tasks.c **** 		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
3817:../freertos/tasks.c **** 
3818:../freertos/tasks.c **** 		return uxReturn;
3819:../freertos/tasks.c **** 	}
3820:../freertos/tasks.c **** 
3821:../freertos/tasks.c **** #endif /* INCLUDE_uxTaskGetStackHighWaterMark */
3822:../freertos/tasks.c **** /*-----------------------------------------------------------*/
3823:../freertos/tasks.c **** 
3824:../freertos/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
3825:../freertos/tasks.c **** 
3826:../freertos/tasks.c **** 	static void prvDeleteTCB( TCB_t *pxTCB )
3827:../freertos/tasks.c **** 	{
3828:../freertos/tasks.c **** 		/* This call is required specifically for the TriCore port.  It must be
3829:../freertos/tasks.c **** 		above the vPortFree() calls.  The call is also used by ports/demos that
3830:../freertos/tasks.c **** 		want to allocate and clean RAM statically. */
3831:../freertos/tasks.c **** 		portCLEAN_UP_TCB( pxTCB );
3832:../freertos/tasks.c **** 
3833:../freertos/tasks.c **** 		/* Free up the memory allocated by the scheduler for the task.  It is up
3834:../freertos/tasks.c **** 		to the task to free any memory allocated at the application level. */
3835:../freertos/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
3836:../freertos/tasks.c **** 		{
3837:../freertos/tasks.c **** 			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
3838:../freertos/tasks.c **** 		}
3839:../freertos/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
3840:../freertos/tasks.c **** 
3841:../freertos/tasks.c **** 		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( p
3842:../freertos/tasks.c **** 		{
3843:../freertos/tasks.c **** 			/* The task can only have been allocated dynamically - free both
3844:../freertos/tasks.c **** 			the stack and TCB. */
3845:../freertos/tasks.c **** 			vPortFree( pxTCB->pxStack );
3846:../freertos/tasks.c **** 			vPortFree( pxTCB );
3847:../freertos/tasks.c **** 		}
3848:../freertos/tasks.c **** 		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consol
ARM GAS  /tmp/ccaP1CVS.s 			page 70


3849:../freertos/tasks.c **** 		{
3850:../freertos/tasks.c **** 			/* The task could have been allocated statically or dynamically, so
3851:../freertos/tasks.c **** 			check what was statically allocated before trying to free the
3852:../freertos/tasks.c **** 			memory. */
3853:../freertos/tasks.c **** 			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
3854:../freertos/tasks.c **** 			{
3855:../freertos/tasks.c **** 				/* Both the stack and TCB were allocated dynamically, so both
3856:../freertos/tasks.c **** 				must be freed. */
3857:../freertos/tasks.c **** 				vPortFree( pxTCB->pxStack );
3858:../freertos/tasks.c **** 				vPortFree( pxTCB );
3859:../freertos/tasks.c **** 			}
3860:../freertos/tasks.c **** 			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
3861:../freertos/tasks.c **** 			{
3862:../freertos/tasks.c **** 				/* Only the stack was statically allocated, so the TCB is the
3863:../freertos/tasks.c **** 				only memory that must be freed. */
3864:../freertos/tasks.c **** 				vPortFree( pxTCB );
3865:../freertos/tasks.c **** 			}
3866:../freertos/tasks.c **** 			else
3867:../freertos/tasks.c **** 			{
3868:../freertos/tasks.c **** 				/* Neither the stack nor the TCB were allocated dynamically, so
3869:../freertos/tasks.c **** 				nothing needs to be freed. */
3870:../freertos/tasks.c **** 				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
3871:../freertos/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3872:../freertos/tasks.c **** 			}
3873:../freertos/tasks.c **** 		}
3874:../freertos/tasks.c **** 		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
3875:../freertos/tasks.c **** 	}
3876:../freertos/tasks.c **** 
3877:../freertos/tasks.c **** #endif /* INCLUDE_vTaskDelete */
3878:../freertos/tasks.c **** /*-----------------------------------------------------------*/
3879:../freertos/tasks.c **** 
3880:../freertos/tasks.c **** static void prvResetNextTaskUnblockTime( void )
3881:../freertos/tasks.c **** {
3882:../freertos/tasks.c **** TCB_t *pxTCB;
3883:../freertos/tasks.c **** 
3884:../freertos/tasks.c **** 	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
3885:../freertos/tasks.c **** 	{
3886:../freertos/tasks.c **** 		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
3887:../freertos/tasks.c **** 		the maximum possible value so it is	extremely unlikely that the
3888:../freertos/tasks.c **** 		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
3889:../freertos/tasks.c **** 		there is an item in the delayed list. */
3890:../freertos/tasks.c **** 		xNextTaskUnblockTime = portMAX_DELAY;
3891:../freertos/tasks.c **** 	}
3892:../freertos/tasks.c **** 	else
3893:../freertos/tasks.c **** 	{
3894:../freertos/tasks.c **** 		/* The new current delayed list is not empty, get the value of
3895:../freertos/tasks.c **** 		the item at the head of the delayed list.  This is the time at
3896:../freertos/tasks.c **** 		which the task at the head of the delayed list should be removed
3897:../freertos/tasks.c **** 		from the Blocked state. */
3898:../freertos/tasks.c **** 		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as thi
3899:../freertos/tasks.c **** 		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
3900:../freertos/tasks.c **** 	}
3901:../freertos/tasks.c **** }
3902:../freertos/tasks.c **** /*-----------------------------------------------------------*/
3903:../freertos/tasks.c **** 
3904:../freertos/tasks.c **** #if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )
3905:../freertos/tasks.c **** 
ARM GAS  /tmp/ccaP1CVS.s 			page 71


3906:../freertos/tasks.c **** 	TaskHandle_t xTaskGetCurrentTaskHandle( void )
3907:../freertos/tasks.c **** 	{
3908:../freertos/tasks.c **** 	TaskHandle_t xReturn;
3909:../freertos/tasks.c **** 
3910:../freertos/tasks.c **** 		/* A critical section is not required as this is not called from
3911:../freertos/tasks.c **** 		an interrupt and the current TCB will always be the same for any
3912:../freertos/tasks.c **** 		individual execution thread. */
3913:../freertos/tasks.c **** 		xReturn = pxCurrentTCB;
3914:../freertos/tasks.c **** 
3915:../freertos/tasks.c **** 		return xReturn;
3916:../freertos/tasks.c **** 	}
3917:../freertos/tasks.c **** 
3918:../freertos/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) ) */
3919:../freertos/tasks.c **** /*-----------------------------------------------------------*/
3920:../freertos/tasks.c **** 
3921:../freertos/tasks.c **** #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
3922:../freertos/tasks.c **** 
3923:../freertos/tasks.c **** 	BaseType_t xTaskGetSchedulerState( void )
3924:../freertos/tasks.c **** 	{
3925:../freertos/tasks.c **** 	BaseType_t xReturn;
3926:../freertos/tasks.c **** 
3927:../freertos/tasks.c **** 		if( xSchedulerRunning == pdFALSE )
3928:../freertos/tasks.c **** 		{
3929:../freertos/tasks.c **** 			xReturn = taskSCHEDULER_NOT_STARTED;
3930:../freertos/tasks.c **** 		}
3931:../freertos/tasks.c **** 		else
3932:../freertos/tasks.c **** 		{
3933:../freertos/tasks.c **** 			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
3934:../freertos/tasks.c **** 			{
3935:../freertos/tasks.c **** 				xReturn = taskSCHEDULER_RUNNING;
3936:../freertos/tasks.c **** 			}
3937:../freertos/tasks.c **** 			else
3938:../freertos/tasks.c **** 			{
3939:../freertos/tasks.c **** 				xReturn = taskSCHEDULER_SUSPENDED;
3940:../freertos/tasks.c **** 			}
3941:../freertos/tasks.c **** 		}
3942:../freertos/tasks.c **** 
3943:../freertos/tasks.c **** 		return xReturn;
3944:../freertos/tasks.c **** 	}
3945:../freertos/tasks.c **** 
3946:../freertos/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) ) */
3947:../freertos/tasks.c **** /*-----------------------------------------------------------*/
3948:../freertos/tasks.c **** 
3949:../freertos/tasks.c **** #if ( configUSE_MUTEXES == 1 )
3950:../freertos/tasks.c **** 
3951:../freertos/tasks.c **** 	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
3952:../freertos/tasks.c **** 	{
3953:../freertos/tasks.c **** 	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
3954:../freertos/tasks.c **** 	BaseType_t xReturn = pdFALSE;
3955:../freertos/tasks.c **** 
3956:../freertos/tasks.c **** 		/* If the mutex was given back by an interrupt while the queue was
3957:../freertos/tasks.c **** 		locked then the mutex holder might now be NULL.  _RB_ Is this still
3958:../freertos/tasks.c **** 		needed as interrupts can no longer use mutexes? */
3959:../freertos/tasks.c **** 		if( pxMutexHolder != NULL )
3960:../freertos/tasks.c **** 		{
3961:../freertos/tasks.c **** 			/* If the holder of the mutex has a priority below the priority of
3962:../freertos/tasks.c **** 			the task attempting to obtain the mutex then it will temporarily
ARM GAS  /tmp/ccaP1CVS.s 			page 72


3963:../freertos/tasks.c **** 			inherit the priority of the task attempting to obtain the mutex. */
3964:../freertos/tasks.c **** 			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
3965:../freertos/tasks.c **** 			{
3966:../freertos/tasks.c **** 				/* Adjust the mutex holder state to account for its new
3967:../freertos/tasks.c **** 				priority.  Only reset the event list item value if the value is
3968:../freertos/tasks.c **** 				not being used for anything else. */
3969:../freertos/tasks.c **** 				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VA
3970:../freertos/tasks.c **** 				{
3971:../freertos/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIOR
3972:../freertos/tasks.c **** 				}
3973:../freertos/tasks.c **** 				else
3974:../freertos/tasks.c **** 				{
3975:../freertos/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3976:../freertos/tasks.c **** 				}
3977:../freertos/tasks.c **** 
3978:../freertos/tasks.c **** 				/* If the task being modified is in the ready state it will need
3979:../freertos/tasks.c **** 				to be moved into a new list. */
3980:../freertos/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutex
3981:../freertos/tasks.c **** 				{
3982:../freertos/tasks.c **** 					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
3983:../freertos/tasks.c **** 					{
3984:../freertos/tasks.c **** 						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
3985:../freertos/tasks.c **** 					}
3986:../freertos/tasks.c **** 					else
3987:../freertos/tasks.c **** 					{
3988:../freertos/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3989:../freertos/tasks.c **** 					}
3990:../freertos/tasks.c **** 
3991:../freertos/tasks.c **** 					/* Inherit the priority before being moved into the new list. */
3992:../freertos/tasks.c **** 					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
3993:../freertos/tasks.c **** 					prvAddTaskToReadyList( pxMutexHolderTCB );
3994:../freertos/tasks.c **** 				}
3995:../freertos/tasks.c **** 				else
3996:../freertos/tasks.c **** 				{
3997:../freertos/tasks.c **** 					/* Just inherit the priority. */
3998:../freertos/tasks.c **** 					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
3999:../freertos/tasks.c **** 				}
4000:../freertos/tasks.c **** 
4001:../freertos/tasks.c **** 				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
4002:../freertos/tasks.c **** 
4003:../freertos/tasks.c **** 				/* Inheritance occurred. */
4004:../freertos/tasks.c **** 				xReturn = pdTRUE;
4005:../freertos/tasks.c **** 			}
4006:../freertos/tasks.c **** 			else
4007:../freertos/tasks.c **** 			{
4008:../freertos/tasks.c **** 				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
4009:../freertos/tasks.c **** 				{
4010:../freertos/tasks.c **** 					/* The base priority of the mutex holder is lower than the
4011:../freertos/tasks.c **** 					priority of the task attempting to take the mutex, but the
4012:../freertos/tasks.c **** 					current priority of the mutex holder is not lower than the
4013:../freertos/tasks.c **** 					priority of the task attempting to take the mutex.
4014:../freertos/tasks.c **** 					Therefore the mutex holder must have already inherited a
4015:../freertos/tasks.c **** 					priority, but inheritance would have occurred if that had
4016:../freertos/tasks.c **** 					not been the case. */
4017:../freertos/tasks.c **** 					xReturn = pdTRUE;
4018:../freertos/tasks.c **** 				}
4019:../freertos/tasks.c **** 				else
ARM GAS  /tmp/ccaP1CVS.s 			page 73


4020:../freertos/tasks.c **** 				{
4021:../freertos/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4022:../freertos/tasks.c **** 				}
4023:../freertos/tasks.c **** 			}
4024:../freertos/tasks.c **** 		}
4025:../freertos/tasks.c **** 		else
4026:../freertos/tasks.c **** 		{
4027:../freertos/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4028:../freertos/tasks.c **** 		}
4029:../freertos/tasks.c **** 
4030:../freertos/tasks.c **** 		return xReturn;
4031:../freertos/tasks.c **** 	}
4032:../freertos/tasks.c **** 
4033:../freertos/tasks.c **** #endif /* configUSE_MUTEXES */
4034:../freertos/tasks.c **** /*-----------------------------------------------------------*/
4035:../freertos/tasks.c **** 
4036:../freertos/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4037:../freertos/tasks.c **** 
4038:../freertos/tasks.c **** 	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
4039:../freertos/tasks.c **** 	{
4040:../freertos/tasks.c **** 	TCB_t * const pxTCB = pxMutexHolder;
4041:../freertos/tasks.c **** 	BaseType_t xReturn = pdFALSE;
4042:../freertos/tasks.c **** 
4043:../freertos/tasks.c **** 		if( pxMutexHolder != NULL )
4044:../freertos/tasks.c **** 		{
4045:../freertos/tasks.c **** 			/* A task can only have an inherited priority if it holds the mutex.
4046:../freertos/tasks.c **** 			If the mutex is held by a task then it cannot be given from an
4047:../freertos/tasks.c **** 			interrupt, and if a mutex is given by the holding task then it must
4048:../freertos/tasks.c **** 			be the running state task. */
4049:../freertos/tasks.c **** 			configASSERT( pxTCB == pxCurrentTCB );
4050:../freertos/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
4051:../freertos/tasks.c **** 			( pxTCB->uxMutexesHeld )--;
4052:../freertos/tasks.c **** 
4053:../freertos/tasks.c **** 			/* Has the holder of the mutex inherited the priority of another
4054:../freertos/tasks.c **** 			task? */
4055:../freertos/tasks.c **** 			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
4056:../freertos/tasks.c **** 			{
4057:../freertos/tasks.c **** 				/* Only disinherit if no other mutexes are held. */
4058:../freertos/tasks.c **** 				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
4059:../freertos/tasks.c **** 				{
4060:../freertos/tasks.c **** 					/* A task can only have an inherited priority if it holds
4061:../freertos/tasks.c **** 					the mutex.  If the mutex is held by a task then it cannot be
4062:../freertos/tasks.c **** 					given from an interrupt, and if a mutex is given by the
4063:../freertos/tasks.c **** 					holding task then it must be the running state task.  Remove
4064:../freertos/tasks.c **** 					the holding task from the ready list. */
4065:../freertos/tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
4066:../freertos/tasks.c **** 					{
4067:../freertos/tasks.c **** 						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
4068:../freertos/tasks.c **** 					}
4069:../freertos/tasks.c **** 					else
4070:../freertos/tasks.c **** 					{
4071:../freertos/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
4072:../freertos/tasks.c **** 					}
4073:../freertos/tasks.c **** 
4074:../freertos/tasks.c **** 					/* Disinherit the priority before adding the task into the
4075:../freertos/tasks.c **** 					new	ready list. */
4076:../freertos/tasks.c **** 					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
ARM GAS  /tmp/ccaP1CVS.s 			page 74


4077:../freertos/tasks.c **** 					pxTCB->uxPriority = pxTCB->uxBasePriority;
4078:../freertos/tasks.c **** 
4079:../freertos/tasks.c **** 					/* Reset the event list item value.  It cannot be in use for
4080:../freertos/tasks.c **** 					any other purpose if this task is running, and it must be
4081:../freertos/tasks.c **** 					running to give back the mutex. */
4082:../freertos/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( T
4083:../freertos/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
4084:../freertos/tasks.c **** 
4085:../freertos/tasks.c **** 					/* Return true to indicate that a context switch is required.
4086:../freertos/tasks.c **** 					This is only actually required in the corner case whereby
4087:../freertos/tasks.c **** 					multiple mutexes were held and the mutexes were given back
4088:../freertos/tasks.c **** 					in an order different to that in which they were taken.
4089:../freertos/tasks.c **** 					If a context switch did not occur when the first mutex was
4090:../freertos/tasks.c **** 					returned, even if a task was waiting on it, then a context
4091:../freertos/tasks.c **** 					switch should occur when the last mutex is returned whether
4092:../freertos/tasks.c **** 					a task is waiting on it or not. */
4093:../freertos/tasks.c **** 					xReturn = pdTRUE;
4094:../freertos/tasks.c **** 				}
4095:../freertos/tasks.c **** 				else
4096:../freertos/tasks.c **** 				{
4097:../freertos/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4098:../freertos/tasks.c **** 				}
4099:../freertos/tasks.c **** 			}
4100:../freertos/tasks.c **** 			else
4101:../freertos/tasks.c **** 			{
4102:../freertos/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4103:../freertos/tasks.c **** 			}
4104:../freertos/tasks.c **** 		}
4105:../freertos/tasks.c **** 		else
4106:../freertos/tasks.c **** 		{
4107:../freertos/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4108:../freertos/tasks.c **** 		}
4109:../freertos/tasks.c **** 
4110:../freertos/tasks.c **** 		return xReturn;
4111:../freertos/tasks.c **** 	}
4112:../freertos/tasks.c **** 
4113:../freertos/tasks.c **** #endif /* configUSE_MUTEXES */
4114:../freertos/tasks.c **** /*-----------------------------------------------------------*/
4115:../freertos/tasks.c **** 
4116:../freertos/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4117:../freertos/tasks.c **** 
4118:../freertos/tasks.c **** 	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestP
4119:../freertos/tasks.c **** 	{
4120:../freertos/tasks.c **** 	TCB_t * const pxTCB = pxMutexHolder;
4121:../freertos/tasks.c **** 	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
4122:../freertos/tasks.c **** 	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
4123:../freertos/tasks.c **** 
4124:../freertos/tasks.c **** 		if( pxMutexHolder != NULL )
4125:../freertos/tasks.c **** 		{
4126:../freertos/tasks.c **** 			/* If pxMutexHolder is not NULL then the holder must hold at least
4127:../freertos/tasks.c **** 			one mutex. */
4128:../freertos/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
4129:../freertos/tasks.c **** 
4130:../freertos/tasks.c **** 			/* Determine the priority to which the priority of the task that
4131:../freertos/tasks.c **** 			holds the mutex should be set.  This will be the greater of the
4132:../freertos/tasks.c **** 			holding task's base priority and the priority of the highest
4133:../freertos/tasks.c **** 			priority task that is waiting to obtain the mutex. */
ARM GAS  /tmp/ccaP1CVS.s 			page 75


4134:../freertos/tasks.c **** 			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
4135:../freertos/tasks.c **** 			{
4136:../freertos/tasks.c **** 				uxPriorityToUse = uxHighestPriorityWaitingTask;
4137:../freertos/tasks.c **** 			}
4138:../freertos/tasks.c **** 			else
4139:../freertos/tasks.c **** 			{
4140:../freertos/tasks.c **** 				uxPriorityToUse = pxTCB->uxBasePriority;
4141:../freertos/tasks.c **** 			}
4142:../freertos/tasks.c **** 
4143:../freertos/tasks.c **** 			/* Does the priority need to change? */
4144:../freertos/tasks.c **** 			if( pxTCB->uxPriority != uxPriorityToUse )
4145:../freertos/tasks.c **** 			{
4146:../freertos/tasks.c **** 				/* Only disinherit if no other mutexes are held.  This is a
4147:../freertos/tasks.c **** 				simplification in the priority inheritance implementation.  If
4148:../freertos/tasks.c **** 				the task that holds the mutex is also holding other mutexes then
4149:../freertos/tasks.c **** 				the other mutexes may have caused the priority inheritance. */
4150:../freertos/tasks.c **** 				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
4151:../freertos/tasks.c **** 				{
4152:../freertos/tasks.c **** 					/* If a task has timed out because it already holds the
4153:../freertos/tasks.c **** 					mutex it was trying to obtain then it cannot of inherited
4154:../freertos/tasks.c **** 					its own priority. */
4155:../freertos/tasks.c **** 					configASSERT( pxTCB != pxCurrentTCB );
4156:../freertos/tasks.c **** 
4157:../freertos/tasks.c **** 					/* Disinherit the priority, remembering the previous
4158:../freertos/tasks.c **** 					priority to facilitate determining the subject task's
4159:../freertos/tasks.c **** 					state. */
4160:../freertos/tasks.c **** 					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
4161:../freertos/tasks.c **** 					uxPriorityUsedOnEntry = pxTCB->uxPriority;
4162:../freertos/tasks.c **** 					pxTCB->uxPriority = uxPriorityToUse;
4163:../freertos/tasks.c **** 
4164:../freertos/tasks.c **** 					/* Only reset the event list item value if the value is not
4165:../freertos/tasks.c **** 					being used for anything else. */
4166:../freertos/tasks.c **** 					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE
4167:../freertos/tasks.c **** 					{
4168:../freertos/tasks.c **** 						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( 
4169:../freertos/tasks.c **** 					}
4170:../freertos/tasks.c **** 					else
4171:../freertos/tasks.c **** 					{
4172:../freertos/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
4173:../freertos/tasks.c **** 					}
4174:../freertos/tasks.c **** 
4175:../freertos/tasks.c **** 					/* If the running task is not the task that holds the mutex
4176:../freertos/tasks.c **** 					then the task that holds the mutex could be in either the
4177:../freertos/tasks.c **** 					Ready, Blocked or Suspended states.  Only remove the task
4178:../freertos/tasks.c **** 					from its current state list if it is in the Ready state as
4179:../freertos/tasks.c **** 					the task's priority is going to change and there is one
4180:../freertos/tasks.c **** 					Ready list per priority. */
4181:../freertos/tasks.c **** 					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xState
4182:../freertos/tasks.c **** 					{
4183:../freertos/tasks.c **** 						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
4184:../freertos/tasks.c **** 						{
4185:../freertos/tasks.c **** 							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
4186:../freertos/tasks.c **** 						}
4187:../freertos/tasks.c **** 						else
4188:../freertos/tasks.c **** 						{
4189:../freertos/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
4190:../freertos/tasks.c **** 						}
ARM GAS  /tmp/ccaP1CVS.s 			page 76


4191:../freertos/tasks.c **** 
4192:../freertos/tasks.c **** 						prvAddTaskToReadyList( pxTCB );
4193:../freertos/tasks.c **** 					}
4194:../freertos/tasks.c **** 					else
4195:../freertos/tasks.c **** 					{
4196:../freertos/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
4197:../freertos/tasks.c **** 					}
4198:../freertos/tasks.c **** 				}
4199:../freertos/tasks.c **** 				else
4200:../freertos/tasks.c **** 				{
4201:../freertos/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4202:../freertos/tasks.c **** 				}
4203:../freertos/tasks.c **** 			}
4204:../freertos/tasks.c **** 			else
4205:../freertos/tasks.c **** 			{
4206:../freertos/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4207:../freertos/tasks.c **** 			}
4208:../freertos/tasks.c **** 		}
4209:../freertos/tasks.c **** 		else
4210:../freertos/tasks.c **** 		{
4211:../freertos/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4212:../freertos/tasks.c **** 		}
4213:../freertos/tasks.c **** 	}
4214:../freertos/tasks.c **** 
4215:../freertos/tasks.c **** #endif /* configUSE_MUTEXES */
4216:../freertos/tasks.c **** /*-----------------------------------------------------------*/
4217:../freertos/tasks.c **** 
4218:../freertos/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
4219:../freertos/tasks.c **** 
4220:../freertos/tasks.c **** 	void vTaskEnterCritical( void )
4221:../freertos/tasks.c **** 	{
4222:../freertos/tasks.c **** 		portDISABLE_INTERRUPTS();
4223:../freertos/tasks.c **** 
4224:../freertos/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
4225:../freertos/tasks.c **** 		{
4226:../freertos/tasks.c **** 			( pxCurrentTCB->uxCriticalNesting )++;
4227:../freertos/tasks.c **** 
4228:../freertos/tasks.c **** 			/* This is not the interrupt safe version of the enter critical
4229:../freertos/tasks.c **** 			function so	assert() if it is being called from an interrupt
4230:../freertos/tasks.c **** 			context.  Only API functions that end in "FromISR" can be used in an
4231:../freertos/tasks.c **** 			interrupt.  Only assert if the critical nesting count is 1 to
4232:../freertos/tasks.c **** 			protect against recursive calls if the assert function also uses a
4233:../freertos/tasks.c **** 			critical section. */
4234:../freertos/tasks.c **** 			if( pxCurrentTCB->uxCriticalNesting == 1 )
4235:../freertos/tasks.c **** 			{
4236:../freertos/tasks.c **** 				portASSERT_IF_IN_ISR();
4237:../freertos/tasks.c **** 			}
4238:../freertos/tasks.c **** 		}
4239:../freertos/tasks.c **** 		else
4240:../freertos/tasks.c **** 		{
4241:../freertos/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4242:../freertos/tasks.c **** 		}
4243:../freertos/tasks.c **** 	}
4244:../freertos/tasks.c **** 
4245:../freertos/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
4246:../freertos/tasks.c **** /*-----------------------------------------------------------*/
4247:../freertos/tasks.c **** 
ARM GAS  /tmp/ccaP1CVS.s 			page 77


4248:../freertos/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
4249:../freertos/tasks.c **** 
4250:../freertos/tasks.c **** 	void vTaskExitCritical( void )
4251:../freertos/tasks.c **** 	{
4252:../freertos/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
4253:../freertos/tasks.c **** 		{
4254:../freertos/tasks.c **** 			if( pxCurrentTCB->uxCriticalNesting > 0U )
4255:../freertos/tasks.c **** 			{
4256:../freertos/tasks.c **** 				( pxCurrentTCB->uxCriticalNesting )--;
4257:../freertos/tasks.c **** 
4258:../freertos/tasks.c **** 				if( pxCurrentTCB->uxCriticalNesting == 0U )
4259:../freertos/tasks.c **** 				{
4260:../freertos/tasks.c **** 					portENABLE_INTERRUPTS();
4261:../freertos/tasks.c **** 				}
4262:../freertos/tasks.c **** 				else
4263:../freertos/tasks.c **** 				{
4264:../freertos/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4265:../freertos/tasks.c **** 				}
4266:../freertos/tasks.c **** 			}
4267:../freertos/tasks.c **** 			else
4268:../freertos/tasks.c **** 			{
4269:../freertos/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4270:../freertos/tasks.c **** 			}
4271:../freertos/tasks.c **** 		}
4272:../freertos/tasks.c **** 		else
4273:../freertos/tasks.c **** 		{
4274:../freertos/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4275:../freertos/tasks.c **** 		}
4276:../freertos/tasks.c **** 	}
4277:../freertos/tasks.c **** 
4278:../freertos/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
4279:../freertos/tasks.c **** /*-----------------------------------------------------------*/
4280:../freertos/tasks.c **** 
4281:../freertos/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
4282:../freertos/tasks.c **** 
4283:../freertos/tasks.c **** 	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
4284:../freertos/tasks.c **** 	{
4285:../freertos/tasks.c **** 	size_t x;
4286:../freertos/tasks.c **** 
4287:../freertos/tasks.c **** 		/* Start by copying the entire string. */
4288:../freertos/tasks.c **** 		strcpy( pcBuffer, pcTaskName );
4289:../freertos/tasks.c **** 
4290:../freertos/tasks.c **** 		/* Pad the end of the string with spaces to ensure columns line up when
4291:../freertos/tasks.c **** 		printed out. */
4292:../freertos/tasks.c **** 		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
4293:../freertos/tasks.c **** 		{
4294:../freertos/tasks.c **** 			pcBuffer[ x ] = ' ';
4295:../freertos/tasks.c **** 		}
4296:../freertos/tasks.c **** 
4297:../freertos/tasks.c **** 		/* Terminate. */
4298:../freertos/tasks.c **** 		pcBuffer[ x ] = ( char ) 0x00;
4299:../freertos/tasks.c **** 
4300:../freertos/tasks.c **** 		/* Return the new end of string. */
4301:../freertos/tasks.c **** 		return &( pcBuffer[ x ] );
4302:../freertos/tasks.c **** 	}
4303:../freertos/tasks.c **** 
4304:../freertos/tasks.c **** #endif /* ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) */
ARM GAS  /tmp/ccaP1CVS.s 			page 78


4305:../freertos/tasks.c **** /*-----------------------------------------------------------*/
4306:../freertos/tasks.c **** 
4307:../freertos/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( config
4308:../freertos/tasks.c **** 
4309:../freertos/tasks.c **** 	void vTaskList( char * pcWriteBuffer )
4310:../freertos/tasks.c **** 	{
4311:../freertos/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
4312:../freertos/tasks.c **** 	UBaseType_t uxArraySize, x;
4313:../freertos/tasks.c **** 	char cStatus;
4314:../freertos/tasks.c **** 
4315:../freertos/tasks.c **** 		/*
4316:../freertos/tasks.c **** 		 * PLEASE NOTE:
4317:../freertos/tasks.c **** 		 *
4318:../freertos/tasks.c **** 		 * This function is provided for convenience only, and is used by many
4319:../freertos/tasks.c **** 		 * of the demo applications.  Do not consider it to be part of the
4320:../freertos/tasks.c **** 		 * scheduler.
4321:../freertos/tasks.c **** 		 *
4322:../freertos/tasks.c **** 		 * vTaskList() calls uxTaskGetSystemState(), then formats part of the
4323:../freertos/tasks.c **** 		 * uxTaskGetSystemState() output into a human readable table that
4324:../freertos/tasks.c **** 		 * displays task names, states and stack usage.
4325:../freertos/tasks.c **** 		 *
4326:../freertos/tasks.c **** 		 * vTaskList() has a dependency on the sprintf() C library function that
4327:../freertos/tasks.c **** 		 * might bloat the code size, use a lot of stack, and provide different
4328:../freertos/tasks.c **** 		 * results on different platforms.  An alternative, tiny, third party,
4329:../freertos/tasks.c **** 		 * and limited functionality implementation of sprintf() is provided in
4330:../freertos/tasks.c **** 		 * many of the FreeRTOS/Demo sub-directories in a file called
4331:../freertos/tasks.c **** 		 * printf-stdarg.c (note printf-stdarg.c does not provide a full
4332:../freertos/tasks.c **** 		 * snprintf() implementation!).
4333:../freertos/tasks.c **** 		 *
4334:../freertos/tasks.c **** 		 * It is recommended that production systems call uxTaskGetSystemState()
4335:../freertos/tasks.c **** 		 * directly to get access to raw stats data, rather than indirectly
4336:../freertos/tasks.c **** 		 * through a call to vTaskList().
4337:../freertos/tasks.c **** 		 */
4338:../freertos/tasks.c **** 
4339:../freertos/tasks.c **** 
4340:../freertos/tasks.c **** 		/* Make sure the write buffer does not contain a string. */
4341:../freertos/tasks.c **** 		*pcWriteBuffer = ( char ) 0x00;
4342:../freertos/tasks.c **** 
4343:../freertos/tasks.c **** 		/* Take a snapshot of the number of tasks in case it changes while this
4344:../freertos/tasks.c **** 		function is executing. */
4345:../freertos/tasks.c **** 		uxArraySize = uxCurrentNumberOfTasks;
4346:../freertos/tasks.c **** 
4347:../freertos/tasks.c **** 		/* Allocate an array index for each task.  NOTE!  if
4348:../freertos/tasks.c **** 		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
4349:../freertos/tasks.c **** 		equate to NULL. */
4350:../freertos/tasks.c **** 		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e907
4351:../freertos/tasks.c **** 
4352:../freertos/tasks.c **** 		if( pxTaskStatusArray != NULL )
4353:../freertos/tasks.c **** 		{
4354:../freertos/tasks.c **** 			/* Generate the (binary) data. */
4355:../freertos/tasks.c **** 			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
4356:../freertos/tasks.c **** 
4357:../freertos/tasks.c **** 			/* Create a human readable table from the binary data. */
4358:../freertos/tasks.c **** 			for( x = 0; x < uxArraySize; x++ )
4359:../freertos/tasks.c **** 			{
4360:../freertos/tasks.c **** 				switch( pxTaskStatusArray[ x ].eCurrentState )
4361:../freertos/tasks.c **** 				{
ARM GAS  /tmp/ccaP1CVS.s 			page 79


4362:../freertos/tasks.c **** 					case eRunning:		cStatus = tskRUNNING_CHAR;
4363:../freertos/tasks.c **** 										break;
4364:../freertos/tasks.c **** 
4365:../freertos/tasks.c **** 					case eReady:		cStatus = tskREADY_CHAR;
4366:../freertos/tasks.c **** 										break;
4367:../freertos/tasks.c **** 
4368:../freertos/tasks.c **** 					case eBlocked:		cStatus = tskBLOCKED_CHAR;
4369:../freertos/tasks.c **** 										break;
4370:../freertos/tasks.c **** 
4371:../freertos/tasks.c **** 					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
4372:../freertos/tasks.c **** 										break;
4373:../freertos/tasks.c **** 
4374:../freertos/tasks.c **** 					case eDeleted:		cStatus = tskDELETED_CHAR;
4375:../freertos/tasks.c **** 										break;
4376:../freertos/tasks.c **** 
4377:../freertos/tasks.c **** 					case eInvalid:		/* Fall through. */
4378:../freertos/tasks.c **** 					default:			/* Should not get here, but it is included
4379:../freertos/tasks.c **** 										to prevent static checking errors. */
4380:../freertos/tasks.c **** 										cStatus = ( char ) 0x00;
4381:../freertos/tasks.c **** 										break;
4382:../freertos/tasks.c **** 				}
4383:../freertos/tasks.c **** 
4384:../freertos/tasks.c **** 				/* Write the task name to the string, padding with spaces so it
4385:../freertos/tasks.c **** 				can be printed in tabular form more easily. */
4386:../freertos/tasks.c **** 				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
4387:../freertos/tasks.c **** 
4388:../freertos/tasks.c **** 				/* Write the rest of the string. */
4389:../freertos/tasks.c **** 				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x 
4390:../freertos/tasks.c **** 				pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers 
4391:../freertos/tasks.c **** 			}
4392:../freertos/tasks.c **** 
4393:../freertos/tasks.c **** 			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4394:../freertos/tasks.c **** 			is 0 then vPortFree() will be #defined to nothing. */
4395:../freertos/tasks.c **** 			vPortFree( pxTaskStatusArray );
4396:../freertos/tasks.c **** 		}
4397:../freertos/tasks.c **** 		else
4398:../freertos/tasks.c **** 		{
4399:../freertos/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4400:../freertos/tasks.c **** 		}
4401:../freertos/tasks.c **** 	}
4402:../freertos/tasks.c **** 
4403:../freertos/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( 
4404:../freertos/tasks.c **** /*----------------------------------------------------------*/
4405:../freertos/tasks.c **** 
4406:../freertos/tasks.c **** #if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( c
4407:../freertos/tasks.c **** 
4408:../freertos/tasks.c **** 	void vTaskGetRunTimeStats( char *pcWriteBuffer )
4409:../freertos/tasks.c **** 	{
4410:../freertos/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
4411:../freertos/tasks.c **** 	UBaseType_t uxArraySize, x;
4412:../freertos/tasks.c **** 	uint32_t ulTotalTime, ulStatsAsPercentage;
4413:../freertos/tasks.c **** 
4414:../freertos/tasks.c **** 		#if( configUSE_TRACE_FACILITY != 1 )
4415:../freertos/tasks.c **** 		{
4416:../freertos/tasks.c **** 			#error configUSE_TRACE_FACILITY must also be set to 1 in FreeRTOSConfig.h to use vTaskGetRunTime
4417:../freertos/tasks.c **** 		}
4418:../freertos/tasks.c **** 		#endif
ARM GAS  /tmp/ccaP1CVS.s 			page 80


4419:../freertos/tasks.c **** 
4420:../freertos/tasks.c **** 		/*
4421:../freertos/tasks.c **** 		 * PLEASE NOTE:
4422:../freertos/tasks.c **** 		 *
4423:../freertos/tasks.c **** 		 * This function is provided for convenience only, and is used by many
4424:../freertos/tasks.c **** 		 * of the demo applications.  Do not consider it to be part of the
4425:../freertos/tasks.c **** 		 * scheduler.
4426:../freertos/tasks.c **** 		 *
4427:../freertos/tasks.c **** 		 * vTaskGetRunTimeStats() calls uxTaskGetSystemState(), then formats part
4428:../freertos/tasks.c **** 		 * of the uxTaskGetSystemState() output into a human readable table that
4429:../freertos/tasks.c **** 		 * displays the amount of time each task has spent in the Running state
4430:../freertos/tasks.c **** 		 * in both absolute and percentage terms.
4431:../freertos/tasks.c **** 		 *
4432:../freertos/tasks.c **** 		 * vTaskGetRunTimeStats() has a dependency on the sprintf() C library
4433:../freertos/tasks.c **** 		 * function that might bloat the code size, use a lot of stack, and
4434:../freertos/tasks.c **** 		 * provide different results on different platforms.  An alternative,
4435:../freertos/tasks.c **** 		 * tiny, third party, and limited functionality implementation of
4436:../freertos/tasks.c **** 		 * sprintf() is provided in many of the FreeRTOS/Demo sub-directories in
4437:../freertos/tasks.c **** 		 * a file called printf-stdarg.c (note printf-stdarg.c does not provide
4438:../freertos/tasks.c **** 		 * a full snprintf() implementation!).
4439:../freertos/tasks.c **** 		 *
4440:../freertos/tasks.c **** 		 * It is recommended that production systems call uxTaskGetSystemState()
4441:../freertos/tasks.c **** 		 * directly to get access to raw stats data, rather than indirectly
4442:../freertos/tasks.c **** 		 * through a call to vTaskGetRunTimeStats().
4443:../freertos/tasks.c **** 		 */
4444:../freertos/tasks.c **** 
4445:../freertos/tasks.c **** 		/* Make sure the write buffer does not contain a string. */
4446:../freertos/tasks.c **** 		*pcWriteBuffer = ( char ) 0x00;
4447:../freertos/tasks.c **** 
4448:../freertos/tasks.c **** 		/* Take a snapshot of the number of tasks in case it changes while this
4449:../freertos/tasks.c **** 		function is executing. */
4450:../freertos/tasks.c **** 		uxArraySize = uxCurrentNumberOfTasks;
4451:../freertos/tasks.c **** 
4452:../freertos/tasks.c **** 		/* Allocate an array index for each task.  NOTE!  If
4453:../freertos/tasks.c **** 		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
4454:../freertos/tasks.c **** 		equate to NULL. */
4455:../freertos/tasks.c **** 		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e907
4456:../freertos/tasks.c **** 
4457:../freertos/tasks.c **** 		if( pxTaskStatusArray != NULL )
4458:../freertos/tasks.c **** 		{
4459:../freertos/tasks.c **** 			/* Generate the (binary) data. */
4460:../freertos/tasks.c **** 			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
4461:../freertos/tasks.c **** 
4462:../freertos/tasks.c **** 			/* For percentage calculations. */
4463:../freertos/tasks.c **** 			ulTotalTime /= 100UL;
4464:../freertos/tasks.c **** 
4465:../freertos/tasks.c **** 			/* Avoid divide by zero errors. */
4466:../freertos/tasks.c **** 			if( ulTotalTime > 0UL )
4467:../freertos/tasks.c **** 			{
4468:../freertos/tasks.c **** 				/* Create a human readable table from the binary data. */
4469:../freertos/tasks.c **** 				for( x = 0; x < uxArraySize; x++ )
4470:../freertos/tasks.c **** 				{
4471:../freertos/tasks.c **** 					/* What percentage of the total run time has the task used?
4472:../freertos/tasks.c **** 					This will always be rounded down to the nearest integer.
4473:../freertos/tasks.c **** 					ulTotalRunTimeDiv100 has already been divided by 100. */
4474:../freertos/tasks.c **** 					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
4475:../freertos/tasks.c **** 
ARM GAS  /tmp/ccaP1CVS.s 			page 81


4476:../freertos/tasks.c **** 					/* Write the task name to the string, padding with
4477:../freertos/tasks.c **** 					spaces so it can be printed in tabular form more
4478:../freertos/tasks.c **** 					easily. */
4479:../freertos/tasks.c **** 					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
4480:../freertos/tasks.c **** 
4481:../freertos/tasks.c **** 					if( ulStatsAsPercentage > 0UL )
4482:../freertos/tasks.c **** 					{
4483:../freertos/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4484:../freertos/tasks.c **** 						{
4485:../freertos/tasks.c **** 							sprintf( pcWriteBuffer, "\t%lu\t\t%lu%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter, ulSta
4486:../freertos/tasks.c **** 						}
4487:../freertos/tasks.c **** 						#else
4488:../freertos/tasks.c **** 						{
4489:../freertos/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
4490:../freertos/tasks.c **** 							printf() library can be used. */
4491:../freertos/tasks.c **** 							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTim
4492:../freertos/tasks.c **** 						}
4493:../freertos/tasks.c **** 						#endif
4494:../freertos/tasks.c **** 					}
4495:../freertos/tasks.c **** 					else
4496:../freertos/tasks.c **** 					{
4497:../freertos/tasks.c **** 						/* If the percentage is zero here then the task has
4498:../freertos/tasks.c **** 						consumed less than 1% of the total run time. */
4499:../freertos/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4500:../freertos/tasks.c **** 						{
4501:../freertos/tasks.c **** 							sprintf( pcWriteBuffer, "\t%lu\t\t<1%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter );
4502:../freertos/tasks.c **** 						}
4503:../freertos/tasks.c **** 						#else
4504:../freertos/tasks.c **** 						{
4505:../freertos/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
4506:../freertos/tasks.c **** 							printf() library can be used. */
4507:../freertos/tasks.c **** 							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTim
4508:../freertos/tasks.c **** 						}
4509:../freertos/tasks.c **** 						#endif
4510:../freertos/tasks.c **** 					}
4511:../freertos/tasks.c **** 
4512:../freertos/tasks.c **** 					pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers
4513:../freertos/tasks.c **** 				}
4514:../freertos/tasks.c **** 			}
4515:../freertos/tasks.c **** 			else
4516:../freertos/tasks.c **** 			{
4517:../freertos/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4518:../freertos/tasks.c **** 			}
4519:../freertos/tasks.c **** 
4520:../freertos/tasks.c **** 			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4521:../freertos/tasks.c **** 			is 0 then vPortFree() will be #defined to nothing. */
4522:../freertos/tasks.c **** 			vPortFree( pxTaskStatusArray );
4523:../freertos/tasks.c **** 		}
4524:../freertos/tasks.c **** 		else
4525:../freertos/tasks.c **** 		{
4526:../freertos/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4527:../freertos/tasks.c **** 		}
4528:../freertos/tasks.c **** 	}
4529:../freertos/tasks.c **** 
4530:../freertos/tasks.c **** #endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) 
4531:../freertos/tasks.c **** /*-----------------------------------------------------------*/
4532:../freertos/tasks.c **** 
ARM GAS  /tmp/ccaP1CVS.s 			page 82


4533:../freertos/tasks.c **** TickType_t uxTaskResetEventItemValue( void )
4534:../freertos/tasks.c **** {
4535:../freertos/tasks.c **** TickType_t uxReturn;
4536:../freertos/tasks.c **** 
4537:../freertos/tasks.c **** 	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
4538:../freertos/tasks.c **** 
4539:../freertos/tasks.c **** 	/* Reset the event list item to its normal value - so it can be used with
4540:../freertos/tasks.c **** 	queues and semaphores. */
4541:../freertos/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES 
4542:../freertos/tasks.c **** 
4543:../freertos/tasks.c **** 	return uxReturn;
4544:../freertos/tasks.c **** }
4545:../freertos/tasks.c **** /*-----------------------------------------------------------*/
4546:../freertos/tasks.c **** 
4547:../freertos/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4548:../freertos/tasks.c **** 
4549:../freertos/tasks.c **** 	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
4550:../freertos/tasks.c **** 	{
4551:../freertos/tasks.c **** 		/* If xSemaphoreCreateMutex() is called before any tasks have been created
4552:../freertos/tasks.c **** 		then pxCurrentTCB will be NULL. */
4553:../freertos/tasks.c **** 		if( pxCurrentTCB != NULL )
4554:../freertos/tasks.c **** 		{
4555:../freertos/tasks.c **** 			( pxCurrentTCB->uxMutexesHeld )++;
4556:../freertos/tasks.c **** 		}
4557:../freertos/tasks.c **** 
4558:../freertos/tasks.c **** 		return pxCurrentTCB;
4559:../freertos/tasks.c **** 	}
4560:../freertos/tasks.c **** 
4561:../freertos/tasks.c **** #endif /* configUSE_MUTEXES */
4562:../freertos/tasks.c **** /*-----------------------------------------------------------*/
4563:../freertos/tasks.c **** 
4564:../freertos/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4565:../freertos/tasks.c **** 
4566:../freertos/tasks.c **** 	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
4567:../freertos/tasks.c **** 	{
4568:../freertos/tasks.c **** 	uint32_t ulReturn;
4569:../freertos/tasks.c **** 
4570:../freertos/tasks.c **** 		taskENTER_CRITICAL();
4571:../freertos/tasks.c **** 		{
4572:../freertos/tasks.c **** 			/* Only block if the notification count is not already non-zero. */
4573:../freertos/tasks.c **** 			if( pxCurrentTCB->ulNotifiedValue == 0UL )
4574:../freertos/tasks.c **** 			{
4575:../freertos/tasks.c **** 				/* Mark this task as waiting for a notification. */
4576:../freertos/tasks.c **** 				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
4577:../freertos/tasks.c **** 
4578:../freertos/tasks.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
4579:../freertos/tasks.c **** 				{
4580:../freertos/tasks.c **** 					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
4581:../freertos/tasks.c **** 					traceTASK_NOTIFY_TAKE_BLOCK();
4582:../freertos/tasks.c **** 
4583:../freertos/tasks.c **** 					/* All ports are written to allow a yield in a critical
4584:../freertos/tasks.c **** 					section (some will yield immediately, others wait until the
4585:../freertos/tasks.c **** 					critical section exits) - but it is not something that
4586:../freertos/tasks.c **** 					application code should ever do. */
4587:../freertos/tasks.c **** 					portYIELD_WITHIN_API();
4588:../freertos/tasks.c **** 				}
4589:../freertos/tasks.c **** 				else
ARM GAS  /tmp/ccaP1CVS.s 			page 83


4590:../freertos/tasks.c **** 				{
4591:../freertos/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4592:../freertos/tasks.c **** 				}
4593:../freertos/tasks.c **** 			}
4594:../freertos/tasks.c **** 			else
4595:../freertos/tasks.c **** 			{
4596:../freertos/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4597:../freertos/tasks.c **** 			}
4598:../freertos/tasks.c **** 		}
4599:../freertos/tasks.c **** 		taskEXIT_CRITICAL();
4600:../freertos/tasks.c **** 
4601:../freertos/tasks.c **** 		taskENTER_CRITICAL();
4602:../freertos/tasks.c **** 		{
4603:../freertos/tasks.c **** 			traceTASK_NOTIFY_TAKE();
4604:../freertos/tasks.c **** 			ulReturn = pxCurrentTCB->ulNotifiedValue;
4605:../freertos/tasks.c **** 
4606:../freertos/tasks.c **** 			if( ulReturn != 0UL )
4607:../freertos/tasks.c **** 			{
4608:../freertos/tasks.c **** 				if( xClearCountOnExit != pdFALSE )
4609:../freertos/tasks.c **** 				{
4610:../freertos/tasks.c **** 					pxCurrentTCB->ulNotifiedValue = 0UL;
4611:../freertos/tasks.c **** 				}
4612:../freertos/tasks.c **** 				else
4613:../freertos/tasks.c **** 				{
4614:../freertos/tasks.c **** 					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
4615:../freertos/tasks.c **** 				}
4616:../freertos/tasks.c **** 			}
4617:../freertos/tasks.c **** 			else
4618:../freertos/tasks.c **** 			{
4619:../freertos/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4620:../freertos/tasks.c **** 			}
4621:../freertos/tasks.c **** 
4622:../freertos/tasks.c **** 			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
4623:../freertos/tasks.c **** 		}
4624:../freertos/tasks.c **** 		taskEXIT_CRITICAL();
4625:../freertos/tasks.c **** 
4626:../freertos/tasks.c **** 		return ulReturn;
4627:../freertos/tasks.c **** 	}
4628:../freertos/tasks.c **** 
4629:../freertos/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4630:../freertos/tasks.c **** /*-----------------------------------------------------------*/
4631:../freertos/tasks.c **** 
4632:../freertos/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4633:../freertos/tasks.c **** 
4634:../freertos/tasks.c **** 	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t 
4635:../freertos/tasks.c **** 	{
4636:../freertos/tasks.c **** 	BaseType_t xReturn;
4637:../freertos/tasks.c **** 
4638:../freertos/tasks.c **** 		taskENTER_CRITICAL();
4639:../freertos/tasks.c **** 		{
4640:../freertos/tasks.c **** 			/* Only block if a notification is not already pending. */
4641:../freertos/tasks.c **** 			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
4642:../freertos/tasks.c **** 			{
4643:../freertos/tasks.c **** 				/* Clear bits in the task's notification value as bits may get
4644:../freertos/tasks.c **** 				set	by the notifying task or interrupt.  This can be used to
4645:../freertos/tasks.c **** 				clear the value to zero. */
4646:../freertos/tasks.c **** 				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
ARM GAS  /tmp/ccaP1CVS.s 			page 84


4647:../freertos/tasks.c **** 
4648:../freertos/tasks.c **** 				/* Mark this task as waiting for a notification. */
4649:../freertos/tasks.c **** 				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
4650:../freertos/tasks.c **** 
4651:../freertos/tasks.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
4652:../freertos/tasks.c **** 				{
4653:../freertos/tasks.c **** 					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
4654:../freertos/tasks.c **** 					traceTASK_NOTIFY_WAIT_BLOCK();
4655:../freertos/tasks.c **** 
4656:../freertos/tasks.c **** 					/* All ports are written to allow a yield in a critical
4657:../freertos/tasks.c **** 					section (some will yield immediately, others wait until the
4658:../freertos/tasks.c **** 					critical section exits) - but it is not something that
4659:../freertos/tasks.c **** 					application code should ever do. */
4660:../freertos/tasks.c **** 					portYIELD_WITHIN_API();
4661:../freertos/tasks.c **** 				}
4662:../freertos/tasks.c **** 				else
4663:../freertos/tasks.c **** 				{
4664:../freertos/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4665:../freertos/tasks.c **** 				}
4666:../freertos/tasks.c **** 			}
4667:../freertos/tasks.c **** 			else
4668:../freertos/tasks.c **** 			{
4669:../freertos/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4670:../freertos/tasks.c **** 			}
4671:../freertos/tasks.c **** 		}
4672:../freertos/tasks.c **** 		taskEXIT_CRITICAL();
4673:../freertos/tasks.c **** 
4674:../freertos/tasks.c **** 		taskENTER_CRITICAL();
4675:../freertos/tasks.c **** 		{
4676:../freertos/tasks.c **** 			traceTASK_NOTIFY_WAIT();
4677:../freertos/tasks.c **** 
4678:../freertos/tasks.c **** 			if( pulNotificationValue != NULL )
4679:../freertos/tasks.c **** 			{
4680:../freertos/tasks.c **** 				/* Output the current notification value, which may or may not
4681:../freertos/tasks.c **** 				have changed. */
4682:../freertos/tasks.c **** 				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
4683:../freertos/tasks.c **** 			}
4684:../freertos/tasks.c **** 
4685:../freertos/tasks.c **** 			/* If ucNotifyValue is set then either the task never entered the
4686:../freertos/tasks.c **** 			blocked state (because a notification was already pending) or the
4687:../freertos/tasks.c **** 			task unblocked because of a notification.  Otherwise the task
4688:../freertos/tasks.c **** 			unblocked because of a timeout. */
4689:../freertos/tasks.c **** 			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
4690:../freertos/tasks.c **** 			{
4691:../freertos/tasks.c **** 				/* A notification was not received. */
4692:../freertos/tasks.c **** 				xReturn = pdFALSE;
4693:../freertos/tasks.c **** 			}
4694:../freertos/tasks.c **** 			else
4695:../freertos/tasks.c **** 			{
4696:../freertos/tasks.c **** 				/* A notification was already pending or a notification was
4697:../freertos/tasks.c **** 				received while the task was waiting. */
4698:../freertos/tasks.c **** 				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
4699:../freertos/tasks.c **** 				xReturn = pdTRUE;
4700:../freertos/tasks.c **** 			}
4701:../freertos/tasks.c **** 
4702:../freertos/tasks.c **** 			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
4703:../freertos/tasks.c **** 		}
ARM GAS  /tmp/ccaP1CVS.s 			page 85


4704:../freertos/tasks.c **** 		taskEXIT_CRITICAL();
4705:../freertos/tasks.c **** 
4706:../freertos/tasks.c **** 		return xReturn;
4707:../freertos/tasks.c **** 	}
4708:../freertos/tasks.c **** 
4709:../freertos/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4710:../freertos/tasks.c **** /*-----------------------------------------------------------*/
4711:../freertos/tasks.c **** 
4712:../freertos/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4713:../freertos/tasks.c **** 
4714:../freertos/tasks.c **** 	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction
4715:../freertos/tasks.c **** 	{
4716:../freertos/tasks.c **** 	TCB_t * pxTCB;
4717:../freertos/tasks.c **** 	BaseType_t xReturn = pdPASS;
4718:../freertos/tasks.c **** 	uint8_t ucOriginalNotifyState;
4719:../freertos/tasks.c **** 
4720:../freertos/tasks.c **** 		configASSERT( xTaskToNotify );
4721:../freertos/tasks.c **** 		pxTCB = xTaskToNotify;
4722:../freertos/tasks.c **** 
4723:../freertos/tasks.c **** 		taskENTER_CRITICAL();
4724:../freertos/tasks.c **** 		{
4725:../freertos/tasks.c **** 			if( pulPreviousNotificationValue != NULL )
4726:../freertos/tasks.c **** 			{
4727:../freertos/tasks.c **** 				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
4728:../freertos/tasks.c **** 			}
4729:../freertos/tasks.c **** 
4730:../freertos/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
4731:../freertos/tasks.c **** 
4732:../freertos/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
4733:../freertos/tasks.c **** 
4734:../freertos/tasks.c **** 			switch( eAction )
4735:../freertos/tasks.c **** 			{
4736:../freertos/tasks.c **** 				case eSetBits	:
4737:../freertos/tasks.c **** 					pxTCB->ulNotifiedValue |= ulValue;
4738:../freertos/tasks.c **** 					break;
4739:../freertos/tasks.c **** 
4740:../freertos/tasks.c **** 				case eIncrement	:
4741:../freertos/tasks.c **** 					( pxTCB->ulNotifiedValue )++;
4742:../freertos/tasks.c **** 					break;
4743:../freertos/tasks.c **** 
4744:../freertos/tasks.c **** 				case eSetValueWithOverwrite	:
4745:../freertos/tasks.c **** 					pxTCB->ulNotifiedValue = ulValue;
4746:../freertos/tasks.c **** 					break;
4747:../freertos/tasks.c **** 
4748:../freertos/tasks.c **** 				case eSetValueWithoutOverwrite :
4749:../freertos/tasks.c **** 					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
4750:../freertos/tasks.c **** 					{
4751:../freertos/tasks.c **** 						pxTCB->ulNotifiedValue = ulValue;
4752:../freertos/tasks.c **** 					}
4753:../freertos/tasks.c **** 					else
4754:../freertos/tasks.c **** 					{
4755:../freertos/tasks.c **** 						/* The value could not be written to the task. */
4756:../freertos/tasks.c **** 						xReturn = pdFAIL;
4757:../freertos/tasks.c **** 					}
4758:../freertos/tasks.c **** 					break;
4759:../freertos/tasks.c **** 
4760:../freertos/tasks.c **** 				case eNoAction:
ARM GAS  /tmp/ccaP1CVS.s 			page 86


4761:../freertos/tasks.c **** 					/* The task is being notified without its notify value being
4762:../freertos/tasks.c **** 					updated. */
4763:../freertos/tasks.c **** 					break;
4764:../freertos/tasks.c **** 
4765:../freertos/tasks.c **** 				default:
4766:../freertos/tasks.c **** 					/* Should not get here if all enums are handled.
4767:../freertos/tasks.c **** 					Artificially force an assert by testing a value the
4768:../freertos/tasks.c **** 					compiler can't assume is const. */
4769:../freertos/tasks.c **** 					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
4770:../freertos/tasks.c **** 
4771:../freertos/tasks.c **** 					break;
4772:../freertos/tasks.c **** 			}
4773:../freertos/tasks.c **** 
4774:../freertos/tasks.c **** 			traceTASK_NOTIFY();
4775:../freertos/tasks.c **** 
4776:../freertos/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4777:../freertos/tasks.c **** 			notification then unblock it now. */
4778:../freertos/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
4779:../freertos/tasks.c **** 			{
4780:../freertos/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
4781:../freertos/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
4782:../freertos/tasks.c **** 
4783:../freertos/tasks.c **** 				/* The task should not have been on an event list. */
4784:../freertos/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
4785:../freertos/tasks.c **** 
4786:../freertos/tasks.c **** 				#if( configUSE_TICKLESS_IDLE != 0 )
4787:../freertos/tasks.c **** 				{
4788:../freertos/tasks.c **** 					/* If a task is blocked waiting for a notification then
4789:../freertos/tasks.c **** 					xNextTaskUnblockTime might be set to the blocked task's time
4790:../freertos/tasks.c **** 					out time.  If the task is unblocked for a reason other than
4791:../freertos/tasks.c **** 					a timeout xNextTaskUnblockTime is normally left unchanged,
4792:../freertos/tasks.c **** 					because it will automatically get reset to a new value when
4793:../freertos/tasks.c **** 					the tick count equals xNextTaskUnblockTime.  However if
4794:../freertos/tasks.c **** 					tickless idling is used it might be more important to enter
4795:../freertos/tasks.c **** 					sleep mode at the earliest possible time - so reset
4796:../freertos/tasks.c **** 					xNextTaskUnblockTime here to ensure it is updated at the
4797:../freertos/tasks.c **** 					earliest possible time. */
4798:../freertos/tasks.c **** 					prvResetNextTaskUnblockTime();
4799:../freertos/tasks.c **** 				}
4800:../freertos/tasks.c **** 				#endif
4801:../freertos/tasks.c **** 
4802:../freertos/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
4803:../freertos/tasks.c **** 				{
4804:../freertos/tasks.c **** 					/* The notified task has a priority above the currently
4805:../freertos/tasks.c **** 					executing task so a yield is required. */
4806:../freertos/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
4807:../freertos/tasks.c **** 				}
4808:../freertos/tasks.c **** 				else
4809:../freertos/tasks.c **** 				{
4810:../freertos/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4811:../freertos/tasks.c **** 				}
4812:../freertos/tasks.c **** 			}
4813:../freertos/tasks.c **** 			else
4814:../freertos/tasks.c **** 			{
4815:../freertos/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4816:../freertos/tasks.c **** 			}
4817:../freertos/tasks.c **** 		}
ARM GAS  /tmp/ccaP1CVS.s 			page 87


4818:../freertos/tasks.c **** 		taskEXIT_CRITICAL();
4819:../freertos/tasks.c **** 
4820:../freertos/tasks.c **** 		return xReturn;
4821:../freertos/tasks.c **** 	}
4822:../freertos/tasks.c **** 
4823:../freertos/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4824:../freertos/tasks.c **** /*-----------------------------------------------------------*/
4825:../freertos/tasks.c **** 
4826:../freertos/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4827:../freertos/tasks.c **** 
4828:../freertos/tasks.c **** 	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction 
4829:../freertos/tasks.c **** 	{
4830:../freertos/tasks.c **** 	TCB_t * pxTCB;
4831:../freertos/tasks.c **** 	uint8_t ucOriginalNotifyState;
4832:../freertos/tasks.c **** 	BaseType_t xReturn = pdPASS;
4833:../freertos/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
4834:../freertos/tasks.c **** 
4835:../freertos/tasks.c **** 		configASSERT( xTaskToNotify );
4836:../freertos/tasks.c **** 
4837:../freertos/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
4838:../freertos/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
4839:../freertos/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
4840:../freertos/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
4841:../freertos/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
4842:../freertos/tasks.c **** 		is defined in FreeRTOSConfig.h then
4843:../freertos/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
4844:../freertos/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
4845:../freertos/tasks.c **** 		been assigned a priority above the configured maximum system call
4846:../freertos/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
4847:../freertos/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
4848:../freertos/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
4849:../freertos/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
4850:../freertos/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
4851:../freertos/tasks.c **** 		provided on the following link:
4852:../freertos/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
4853:../freertos/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
4854:../freertos/tasks.c **** 
4855:../freertos/tasks.c **** 		pxTCB = xTaskToNotify;
4856:../freertos/tasks.c **** 
4857:../freertos/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
4858:../freertos/tasks.c **** 		{
4859:../freertos/tasks.c **** 			if( pulPreviousNotificationValue != NULL )
4860:../freertos/tasks.c **** 			{
4861:../freertos/tasks.c **** 				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
4862:../freertos/tasks.c **** 			}
4863:../freertos/tasks.c **** 
4864:../freertos/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
4865:../freertos/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
4866:../freertos/tasks.c **** 
4867:../freertos/tasks.c **** 			switch( eAction )
4868:../freertos/tasks.c **** 			{
4869:../freertos/tasks.c **** 				case eSetBits	:
4870:../freertos/tasks.c **** 					pxTCB->ulNotifiedValue |= ulValue;
4871:../freertos/tasks.c **** 					break;
4872:../freertos/tasks.c **** 
4873:../freertos/tasks.c **** 				case eIncrement	:
4874:../freertos/tasks.c **** 					( pxTCB->ulNotifiedValue )++;
ARM GAS  /tmp/ccaP1CVS.s 			page 88


4875:../freertos/tasks.c **** 					break;
4876:../freertos/tasks.c **** 
4877:../freertos/tasks.c **** 				case eSetValueWithOverwrite	:
4878:../freertos/tasks.c **** 					pxTCB->ulNotifiedValue = ulValue;
4879:../freertos/tasks.c **** 					break;
4880:../freertos/tasks.c **** 
4881:../freertos/tasks.c **** 				case eSetValueWithoutOverwrite :
4882:../freertos/tasks.c **** 					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
4883:../freertos/tasks.c **** 					{
4884:../freertos/tasks.c **** 						pxTCB->ulNotifiedValue = ulValue;
4885:../freertos/tasks.c **** 					}
4886:../freertos/tasks.c **** 					else
4887:../freertos/tasks.c **** 					{
4888:../freertos/tasks.c **** 						/* The value could not be written to the task. */
4889:../freertos/tasks.c **** 						xReturn = pdFAIL;
4890:../freertos/tasks.c **** 					}
4891:../freertos/tasks.c **** 					break;
4892:../freertos/tasks.c **** 
4893:../freertos/tasks.c **** 				case eNoAction :
4894:../freertos/tasks.c **** 					/* The task is being notified without its notify value being
4895:../freertos/tasks.c **** 					updated. */
4896:../freertos/tasks.c **** 					break;
4897:../freertos/tasks.c **** 
4898:../freertos/tasks.c **** 				default:
4899:../freertos/tasks.c **** 					/* Should not get here if all enums are handled.
4900:../freertos/tasks.c **** 					Artificially force an assert by testing a value the
4901:../freertos/tasks.c **** 					compiler can't assume is const. */
4902:../freertos/tasks.c **** 					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
4903:../freertos/tasks.c **** 					break;
4904:../freertos/tasks.c **** 			}
4905:../freertos/tasks.c **** 
4906:../freertos/tasks.c **** 			traceTASK_NOTIFY_FROM_ISR();
4907:../freertos/tasks.c **** 
4908:../freertos/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4909:../freertos/tasks.c **** 			notification then unblock it now. */
4910:../freertos/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
4911:../freertos/tasks.c **** 			{
4912:../freertos/tasks.c **** 				/* The task should not have been on an event list. */
4913:../freertos/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
4914:../freertos/tasks.c **** 
4915:../freertos/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
4916:../freertos/tasks.c **** 				{
4917:../freertos/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
4918:../freertos/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
4919:../freertos/tasks.c **** 				}
4920:../freertos/tasks.c **** 				else
4921:../freertos/tasks.c **** 				{
4922:../freertos/tasks.c **** 					/* The delayed and ready lists cannot be accessed, so hold
4923:../freertos/tasks.c **** 					this task pending until the scheduler is resumed. */
4924:../freertos/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
4925:../freertos/tasks.c **** 				}
4926:../freertos/tasks.c **** 
4927:../freertos/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
4928:../freertos/tasks.c **** 				{
4929:../freertos/tasks.c **** 					/* The notified task has a priority above the currently
4930:../freertos/tasks.c **** 					executing task so a yield is required. */
4931:../freertos/tasks.c **** 					if( pxHigherPriorityTaskWoken != NULL )
ARM GAS  /tmp/ccaP1CVS.s 			page 89


4932:../freertos/tasks.c **** 					{
4933:../freertos/tasks.c **** 						*pxHigherPriorityTaskWoken = pdTRUE;
4934:../freertos/tasks.c **** 					}
4935:../freertos/tasks.c **** 
4936:../freertos/tasks.c **** 					/* Mark that a yield is pending in case the user is not
4937:../freertos/tasks.c **** 					using the "xHigherPriorityTaskWoken" parameter to an ISR
4938:../freertos/tasks.c **** 					safe FreeRTOS function. */
4939:../freertos/tasks.c **** 					xYieldPending = pdTRUE;
4940:../freertos/tasks.c **** 				}
4941:../freertos/tasks.c **** 				else
4942:../freertos/tasks.c **** 				{
4943:../freertos/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4944:../freertos/tasks.c **** 				}
4945:../freertos/tasks.c **** 			}
4946:../freertos/tasks.c **** 		}
4947:../freertos/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
4948:../freertos/tasks.c **** 
4949:../freertos/tasks.c **** 		return xReturn;
4950:../freertos/tasks.c **** 	}
4951:../freertos/tasks.c **** 
4952:../freertos/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4953:../freertos/tasks.c **** /*-----------------------------------------------------------*/
4954:../freertos/tasks.c **** 
4955:../freertos/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4956:../freertos/tasks.c **** 
4957:../freertos/tasks.c **** 	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
4958:../freertos/tasks.c **** 	{
4959:../freertos/tasks.c **** 	TCB_t * pxTCB;
4960:../freertos/tasks.c **** 	uint8_t ucOriginalNotifyState;
4961:../freertos/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
4962:../freertos/tasks.c **** 
4963:../freertos/tasks.c **** 		configASSERT( xTaskToNotify );
4964:../freertos/tasks.c **** 
4965:../freertos/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
4966:../freertos/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
4967:../freertos/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
4968:../freertos/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
4969:../freertos/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
4970:../freertos/tasks.c **** 		is defined in FreeRTOSConfig.h then
4971:../freertos/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
4972:../freertos/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
4973:../freertos/tasks.c **** 		been assigned a priority above the configured maximum system call
4974:../freertos/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
4975:../freertos/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
4976:../freertos/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
4977:../freertos/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
4978:../freertos/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
4979:../freertos/tasks.c **** 		provided on the following link:
4980:../freertos/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
4981:../freertos/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
4982:../freertos/tasks.c **** 
4983:../freertos/tasks.c **** 		pxTCB = xTaskToNotify;
4984:../freertos/tasks.c **** 
4985:../freertos/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
4986:../freertos/tasks.c **** 		{
4987:../freertos/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
4988:../freertos/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
ARM GAS  /tmp/ccaP1CVS.s 			page 90


4989:../freertos/tasks.c **** 
4990:../freertos/tasks.c **** 			/* 'Giving' is equivalent to incrementing a count in a counting
4991:../freertos/tasks.c **** 			semaphore. */
4992:../freertos/tasks.c **** 			( pxTCB->ulNotifiedValue )++;
4993:../freertos/tasks.c **** 
4994:../freertos/tasks.c **** 			traceTASK_NOTIFY_GIVE_FROM_ISR();
4995:../freertos/tasks.c **** 
4996:../freertos/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4997:../freertos/tasks.c **** 			notification then unblock it now. */
4998:../freertos/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
4999:../freertos/tasks.c **** 			{
5000:../freertos/tasks.c **** 				/* The task should not have been on an event list. */
5001:../freertos/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
5002:../freertos/tasks.c **** 
5003:../freertos/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
5004:../freertos/tasks.c **** 				{
5005:../freertos/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
5006:../freertos/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
5007:../freertos/tasks.c **** 				}
5008:../freertos/tasks.c **** 				else
5009:../freertos/tasks.c **** 				{
5010:../freertos/tasks.c **** 					/* The delayed and ready lists cannot be accessed, so hold
5011:../freertos/tasks.c **** 					this task pending until the scheduler is resumed. */
5012:../freertos/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
5013:../freertos/tasks.c **** 				}
5014:../freertos/tasks.c **** 
5015:../freertos/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
5016:../freertos/tasks.c **** 				{
5017:../freertos/tasks.c **** 					/* The notified task has a priority above the currently
5018:../freertos/tasks.c **** 					executing task so a yield is required. */
5019:../freertos/tasks.c **** 					if( pxHigherPriorityTaskWoken != NULL )
5020:../freertos/tasks.c **** 					{
5021:../freertos/tasks.c **** 						*pxHigherPriorityTaskWoken = pdTRUE;
5022:../freertos/tasks.c **** 					}
5023:../freertos/tasks.c **** 
5024:../freertos/tasks.c **** 					/* Mark that a yield is pending in case the user is not
5025:../freertos/tasks.c **** 					using the "xHigherPriorityTaskWoken" parameter in an ISR
5026:../freertos/tasks.c **** 					safe FreeRTOS function. */
5027:../freertos/tasks.c **** 					xYieldPending = pdTRUE;
5028:../freertos/tasks.c **** 				}
5029:../freertos/tasks.c **** 				else
5030:../freertos/tasks.c **** 				{
5031:../freertos/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
5032:../freertos/tasks.c **** 				}
5033:../freertos/tasks.c **** 			}
5034:../freertos/tasks.c **** 		}
5035:../freertos/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
5036:../freertos/tasks.c **** 	}
5037:../freertos/tasks.c **** 
5038:../freertos/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
5039:../freertos/tasks.c **** 
5040:../freertos/tasks.c **** /*-----------------------------------------------------------*/
5041:../freertos/tasks.c **** 
5042:../freertos/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
5043:../freertos/tasks.c **** 
5044:../freertos/tasks.c **** 	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
5045:../freertos/tasks.c **** 	{
ARM GAS  /tmp/ccaP1CVS.s 			page 91


5046:../freertos/tasks.c **** 	TCB_t *pxTCB;
5047:../freertos/tasks.c **** 	BaseType_t xReturn;
5048:../freertos/tasks.c **** 
5049:../freertos/tasks.c **** 		/* If null is passed in here then it is the calling task that is having
5050:../freertos/tasks.c **** 		its notification state cleared. */
5051:../freertos/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
5052:../freertos/tasks.c **** 
5053:../freertos/tasks.c **** 		taskENTER_CRITICAL();
5054:../freertos/tasks.c **** 		{
5055:../freertos/tasks.c **** 			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
5056:../freertos/tasks.c **** 			{
5057:../freertos/tasks.c **** 				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
5058:../freertos/tasks.c **** 				xReturn = pdPASS;
5059:../freertos/tasks.c **** 			}
5060:../freertos/tasks.c **** 			else
5061:../freertos/tasks.c **** 			{
5062:../freertos/tasks.c **** 				xReturn = pdFAIL;
5063:../freertos/tasks.c **** 			}
5064:../freertos/tasks.c **** 		}
5065:../freertos/tasks.c **** 		taskEXIT_CRITICAL();
5066:../freertos/tasks.c **** 
5067:../freertos/tasks.c **** 		return xReturn;
5068:../freertos/tasks.c **** 	}
5069:../freertos/tasks.c **** 
5070:../freertos/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
5071:../freertos/tasks.c **** /*-----------------------------------------------------------*/
5072:../freertos/tasks.c **** 
5073:../freertos/tasks.c **** #if( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) )
5074:../freertos/tasks.c **** 	TickType_t xTaskGetIdleRunTimeCounter( void )
5075:../freertos/tasks.c **** 	{
5076:../freertos/tasks.c **** 		return xIdleTaskHandle->ulRunTimeCounter;
5077:../freertos/tasks.c **** 	}
5078:../freertos/tasks.c **** #endif
5079:../freertos/tasks.c **** /*-----------------------------------------------------------*/
5080:../freertos/tasks.c **** 
5081:../freertos/tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockInde
5082:../freertos/tasks.c **** {
  86              		.loc 1 5082 1 view -0
  87              		.cfi_startproc
  88              		@ args = 0, pretend = 0, frame = 0
  89              		@ frame_needed = 0, uses_anonymous_args = 0
5083:../freertos/tasks.c **** TickType_t xTimeToWake;
  90              		.loc 1 5083 1 view .LVU1
5084:../freertos/tasks.c **** const TickType_t xConstTickCount = xTickCount;
  91              		.loc 1 5084 1 view .LVU2
  92              	@ ../freertos/tasks.c:5082: {
5082:../freertos/tasks.c **** TickType_t xTimeToWake;
  93              		.loc 1 5082 1 is_stmt 0 view .LVU3
  94 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}	@
  95              	.LCFI0:
  96              		.cfi_def_cfa_offset 24
  97              		.cfi_offset 3, -24
  98              		.cfi_offset 4, -20
  99              		.cfi_offset 5, -16
 100              		.cfi_offset 6, -12
 101              		.cfi_offset 7, -8
 102              		.cfi_offset 14, -4
ARM GAS  /tmp/ccaP1CVS.s 			page 92


 103              	@ ../freertos/tasks.c:5084: const TickType_t xConstTickCount = xTickCount;
 104              		.loc 1 5084 18 view .LVU4
 105 0002 184C     		ldr	r4, .L11	@ tmp139,
 106              	@ ../freertos/tasks.c:5082: {
5082:../freertos/tasks.c **** TickType_t xTimeToWake;
 107              		.loc 1 5082 1 view .LVU5
 108 0004 0646     		mov	r6, r0	@ xTicksToWait, tmp164
 109              	@ ../freertos/tasks.c:5084: const TickType_t xConstTickCount = xTickCount;
 110              		.loc 1 5084 18 view .LVU6
 111 0006 2568     		ldr	r5, [r4]	@ xConstTickCount, xTickCount
 112              	.LVL1:
5085:../freertos/tasks.c **** 
5086:../freertos/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
5087:../freertos/tasks.c **** 	{
5088:../freertos/tasks.c **** 		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
5089:../freertos/tasks.c **** 		reset to pdFALSE so it can be detected as having been set to pdTRUE
5090:../freertos/tasks.c **** 		when the task leaves the Blocked state. */
5091:../freertos/tasks.c **** 		pxCurrentTCB->ucDelayAborted = pdFALSE;
5092:../freertos/tasks.c **** 	}
5093:../freertos/tasks.c **** 	#endif
5094:../freertos/tasks.c **** 
5095:../freertos/tasks.c **** 	/* Remove the task from the ready list before adding it to the blocked list
5096:../freertos/tasks.c **** 	as the same list item is used for both lists. */
5097:../freertos/tasks.c **** 	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 113              		.loc 1 5097 2 is_stmt 1 view .LVU7
 114              	@ ../freertos/tasks.c:5097: 	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t
 115              		.loc 1 5097 35 is_stmt 0 view .LVU8
 116 0008 6068     		ldr	r0, [r4, #4]	@ pxCurrentTCB.21_1, pxCurrentTCB
 117              	.LVL2:
 118              	@ ../freertos/tasks.c:5082: {
5082:../freertos/tasks.c **** TickType_t xTimeToWake;
 119              		.loc 1 5082 1 view .LVU9
 120 000a 0F46     		mov	r7, r1	@ xCanBlockIndefinitely, tmp165
 121              	@ ../freertos/tasks.c:5097: 	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t
 122              		.loc 1 5097 6 view .LVU10
 123 000c 0430     		adds	r0, r0, #4	@, pxCurrentTCB.21_1,
 124 000e FFF7FEFF 		bl	uxListRemove		@
 125              	.LVL3:
 126              	@ ../freertos/tasks.c:5097: 	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t
 127              		.loc 1 5097 4 view .LVU11
 128 0012 38B9     		cbnz	r0, .L2	@ tmp166,
5098:../freertos/tasks.c **** 	{
5099:../freertos/tasks.c **** 		/* The current task must be in a ready list, so there is no need to
5100:../freertos/tasks.c **** 		check, and the port reset macro can be called directly. */
5101:../freertos/tasks.c **** 		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentT
 129              		.loc 1 5101 3 is_stmt 1 view .LVU12
 130 0014 6268     		ldr	r2, [r4, #4]	@ pxCurrentTCB.22_4, pxCurrentTCB
 131 0016 A368     		ldr	r3, [r4, #8]	@ uxTopReadyPriority.23_7, uxTopReadyPriority
 132 0018 D16A     		ldr	r1, [r2, #44]	@ pxCurrentTCB.22_4->uxPriority, pxCurrentTCB.22_4->uxPriority
 133 001a 0122     		movs	r2, #1	@ tmp145,
 134 001c 8A40     		lsls	r2, r2, r1	@ tmp144, tmp145, pxCurrentTCB.22_4->uxPriority
 135 001e 23EA0203 		bic	r3, r3, r2	@ _8, uxTopReadyPriority.23_7, tmp144
 136 0022 A360     		str	r3, [r4, #8]	@ _8, uxTopReadyPriority
 137              	.L2:
5102:../freertos/tasks.c **** 	}
5103:../freertos/tasks.c **** 	else
5104:../freertos/tasks.c **** 	{
ARM GAS  /tmp/ccaP1CVS.s 			page 93


5105:../freertos/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
 138              		.loc 1 5105 27 view .LVU13
5106:../freertos/tasks.c **** 	}
5107:../freertos/tasks.c **** 
5108:../freertos/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
5109:../freertos/tasks.c **** 	{
5110:../freertos/tasks.c **** 		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 139              		.loc 1 5110 3 view .LVU14
 140              	@ ../freertos/tasks.c:5110: 		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != p
 141              		.loc 1 5110 5 is_stmt 0 view .LVU15
 142 0024 731C     		adds	r3, r6, #1	@, xTicksToWait,
 143 0026 07D1     		bne	.L3		@,
 144              	@ ../freertos/tasks.c:5110: 		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != p
 145              		.loc 1 5110 41 discriminator 1 view .LVU16
 146 0028 37B1     		cbz	r7, .L3	@ xCanBlockIndefinitely,
5111:../freertos/tasks.c **** 		{
5112:../freertos/tasks.c **** 			/* Add the task to the suspended task list instead of a delayed task
5113:../freertos/tasks.c **** 			list to ensure it is not woken by a timing event.  It will block
5114:../freertos/tasks.c **** 			indefinitely. */
5115:../freertos/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 147              		.loc 1 5115 4 is_stmt 1 view .LVU17
 148              	@ ../freertos/tasks.c:5115: 			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem
 149              		.loc 1 5115 56 is_stmt 0 view .LVU18
 150 002a 6168     		ldr	r1, [r4, #4]	@ pxCurrentTCB.24_9, pxCurrentTCB
 151              	@ ../freertos/tasks.c:5115: 			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem
 152              		.loc 1 5115 4 view .LVU19
 153 002c 0E48     		ldr	r0, .L11+4	@,
 154 002e 0431     		adds	r1, r1, #4	@, pxCurrentTCB.24_9,
 155              	@ ../freertos/tasks.c:5190: }
5116:../freertos/tasks.c **** 		}
5117:../freertos/tasks.c **** 		else
5118:../freertos/tasks.c **** 		{
5119:../freertos/tasks.c **** 			/* Calculate the time at which the task should be woken if the event
5120:../freertos/tasks.c **** 			does not occur.  This may overflow but this doesn't matter, the
5121:../freertos/tasks.c **** 			kernel will manage it correctly. */
5122:../freertos/tasks.c **** 			xTimeToWake = xConstTickCount + xTicksToWait;
5123:../freertos/tasks.c **** 
5124:../freertos/tasks.c **** 			/* The list item will be inserted in wake time order. */
5125:../freertos/tasks.c **** 			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
5126:../freertos/tasks.c **** 
5127:../freertos/tasks.c **** 			if( xTimeToWake < xConstTickCount )
5128:../freertos/tasks.c **** 			{
5129:../freertos/tasks.c **** 				/* Wake time has overflowed.  Place this item in the overflow
5130:../freertos/tasks.c **** 				list. */
5131:../freertos/tasks.c **** 				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
5132:../freertos/tasks.c **** 			}
5133:../freertos/tasks.c **** 			else
5134:../freertos/tasks.c **** 			{
5135:../freertos/tasks.c **** 				/* The wake time has not overflowed, so the current block list
5136:../freertos/tasks.c **** 				is used. */
5137:../freertos/tasks.c **** 				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
5138:../freertos/tasks.c **** 
5139:../freertos/tasks.c **** 				/* If the task entering the blocked state was placed at the
5140:../freertos/tasks.c **** 				head of the list of blocked tasks then xNextTaskUnblockTime
5141:../freertos/tasks.c **** 				needs to be updated too. */
5142:../freertos/tasks.c **** 				if( xTimeToWake < xNextTaskUnblockTime )
5143:../freertos/tasks.c **** 				{
ARM GAS  /tmp/ccaP1CVS.s 			page 94


5144:../freertos/tasks.c **** 					xNextTaskUnblockTime = xTimeToWake;
5145:../freertos/tasks.c **** 				}
5146:../freertos/tasks.c **** 				else
5147:../freertos/tasks.c **** 				{
5148:../freertos/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
5149:../freertos/tasks.c **** 				}
5150:../freertos/tasks.c **** 			}
5151:../freertos/tasks.c **** 		}
5152:../freertos/tasks.c **** 	}
5153:../freertos/tasks.c **** 	#else /* INCLUDE_vTaskSuspend */
5154:../freertos/tasks.c **** 	{
5155:../freertos/tasks.c **** 		/* Calculate the time at which the task should be woken if the event
5156:../freertos/tasks.c **** 		does not occur.  This may overflow but this doesn't matter, the kernel
5157:../freertos/tasks.c **** 		will manage it correctly. */
5158:../freertos/tasks.c **** 		xTimeToWake = xConstTickCount + xTicksToWait;
5159:../freertos/tasks.c **** 
5160:../freertos/tasks.c **** 		/* The list item will be inserted in wake time order. */
5161:../freertos/tasks.c **** 		listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
5162:../freertos/tasks.c **** 
5163:../freertos/tasks.c **** 		if( xTimeToWake < xConstTickCount )
5164:../freertos/tasks.c **** 		{
5165:../freertos/tasks.c **** 			/* Wake time has overflowed.  Place this item in the overflow list. */
5166:../freertos/tasks.c **** 			vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
5167:../freertos/tasks.c **** 		}
5168:../freertos/tasks.c **** 		else
5169:../freertos/tasks.c **** 		{
5170:../freertos/tasks.c **** 			/* The wake time has not overflowed, so the current block list is used. */
5171:../freertos/tasks.c **** 			vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
5172:../freertos/tasks.c **** 
5173:../freertos/tasks.c **** 			/* If the task entering the blocked state was placed at the head of the
5174:../freertos/tasks.c **** 			list of blocked tasks then xNextTaskUnblockTime needs to be updated
5175:../freertos/tasks.c **** 			too. */
5176:../freertos/tasks.c **** 			if( xTimeToWake < xNextTaskUnblockTime )
5177:../freertos/tasks.c **** 			{
5178:../freertos/tasks.c **** 				xNextTaskUnblockTime = xTimeToWake;
5179:../freertos/tasks.c **** 			}
5180:../freertos/tasks.c **** 			else
5181:../freertos/tasks.c **** 			{
5182:../freertos/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
5183:../freertos/tasks.c **** 			}
5184:../freertos/tasks.c **** 		}
5185:../freertos/tasks.c **** 
5186:../freertos/tasks.c **** 		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
5187:../freertos/tasks.c **** 		( void ) xCanBlockIndefinitely;
5188:../freertos/tasks.c **** 	}
5189:../freertos/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
5190:../freertos/tasks.c **** }
 156              		.loc 1 5190 1 view .LVU20
 157 0030 BDE8F840 		pop	{r3, r4, r5, r6, r7, lr}	@
 158              	.LCFI1:
 159              		.cfi_remember_state
 160              		.cfi_restore 14
 161              		.cfi_restore 7
 162              		.cfi_restore 6
 163              		.cfi_restore 5
 164              		.cfi_restore 4
 165              		.cfi_restore 3
ARM GAS  /tmp/ccaP1CVS.s 			page 95


 166              		.cfi_def_cfa_offset 0
 167              	.LVL4:
 168              	@ ../freertos/tasks.c:5115: 			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem
5115:../freertos/tasks.c **** 		}
 169              		.loc 1 5115 4 view .LVU21
 170 0034 FFF7FEBF 		b	vListInsertEnd		@
 171              	.LVL5:
 172              	.L3:
 173              	.LCFI2:
 174              		.cfi_restore_state
5122:../freertos/tasks.c **** 
 175              		.loc 1 5122 4 is_stmt 1 view .LVU22
 176              	@ ../freertos/tasks.c:5125: 			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToW
5125:../freertos/tasks.c **** 
 177              		.loc 1 5125 4 is_stmt 0 view .LVU23
 178 0038 6368     		ldr	r3, [r4, #4]	@ pxCurrentTCB.25_11, pxCurrentTCB
 179 003a AD19     		adds	r5, r5, r6	@ tmp153, xConstTickCount, xTicksToWait
 180              	.LVL6:
5125:../freertos/tasks.c **** 
 181              		.loc 1 5125 4 is_stmt 1 view .LVU24
 182 003c 5D60     		str	r5, [r3, #4]	@ tmp153, pxCurrentTCB.25_11->xStateListItem.xItemValue
5127:../freertos/tasks.c **** 			{
 183              		.loc 1 5127 4 view .LVU25
 184              	@ ../freertos/tasks.c:5127: 			if( xTimeToWake < xConstTickCount )
5127:../freertos/tasks.c **** 			{
 185              		.loc 1 5127 6 is_stmt 0 view .LVU26
 186 003e 06D3     		bcc	.L6		@,
5131:../freertos/tasks.c **** 			}
 187              		.loc 1 5131 5 is_stmt 1 view .LVU27
 188 0040 206A     		ldr	r0, [r4, #32]	@ pxOverflowDelayedTaskList.26_12, pxOverflowDelayedTaskList
 189              	@ ../freertos/tasks.c:5131: 				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateList
5131:../freertos/tasks.c **** 			}
 190              		.loc 1 5131 60 is_stmt 0 view .LVU28
 191 0042 6168     		ldr	r1, [r4, #4]	@ pxCurrentTCB.27_13, pxCurrentTCB
 192              	@ ../freertos/tasks.c:5190: }
 193              		.loc 1 5190 1 view .LVU29
 194 0044 BDE8F840 		pop	{r3, r4, r5, r6, r7, lr}	@
 195              	.LCFI3:
 196              		.cfi_remember_state
 197              		.cfi_restore 14
 198              		.cfi_restore 7
 199              		.cfi_restore 6
 200              		.cfi_restore 5
 201              		.cfi_restore 4
 202              		.cfi_restore 3
 203              		.cfi_def_cfa_offset 0
 204              	.LVL7:
 205              	@ ../freertos/tasks.c:5131: 				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateList
5131:../freertos/tasks.c **** 			}
 206              		.loc 1 5131 5 view .LVU30
 207 0048 0431     		adds	r1, r1, #4	@, pxCurrentTCB.27_13,
 208 004a FFF7FEBF 		b	vListInsert		@
 209              	.LVL8:
 210              	.L6:
 211              	.LCFI4:
 212              		.cfi_restore_state
5137:../freertos/tasks.c **** 
ARM GAS  /tmp/ccaP1CVS.s 			page 96


 213              		.loc 1 5137 5 is_stmt 1 view .LVU31
 214 004e 606A     		ldr	r0, [r4, #36]	@ pxDelayedTaskList.28_15, pxDelayedTaskList
 215              	@ ../freertos/tasks.c:5137: 				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) )
5137:../freertos/tasks.c **** 
 216              		.loc 1 5137 52 is_stmt 0 view .LVU32
 217 0050 6168     		ldr	r1, [r4, #4]	@ pxCurrentTCB.29_16, pxCurrentTCB
 218              	@ ../freertos/tasks.c:5137: 				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) )
5137:../freertos/tasks.c **** 
 219              		.loc 1 5137 5 view .LVU33
 220 0052 0431     		adds	r1, r1, #4	@, pxCurrentTCB.29_16,
 221 0054 FFF7FEFF 		bl	vListInsert		@
 222              	.LVL9:
5142:../freertos/tasks.c **** 				{
 223              		.loc 1 5142 5 is_stmt 1 view .LVU34
 224              	@ ../freertos/tasks.c:5142: 				if( xTimeToWake < xNextTaskUnblockTime )
5142:../freertos/tasks.c **** 				{
 225              		.loc 1 5142 21 is_stmt 0 view .LVU35
 226 0058 A36A     		ldr	r3, [r4, #40]	@ xNextTaskUnblockTime.30_18, xNextTaskUnblockTime
 227              	@ ../freertos/tasks.c:5142: 				if( xTimeToWake < xNextTaskUnblockTime )
5142:../freertos/tasks.c **** 				{
 228              		.loc 1 5142 7 view .LVU36
 229 005a AB42     		cmp	r3, r5	@ xNextTaskUnblockTime.30_18, tmp153
5144:../freertos/tasks.c **** 				}
 230              		.loc 1 5144 6 is_stmt 1 view .LVU37
 231              	@ ../freertos/tasks.c:5144: 					xNextTaskUnblockTime = xTimeToWake;
5144:../freertos/tasks.c **** 				}
 232              		.loc 1 5144 27 is_stmt 0 view .LVU38
 233 005c 88BF     		it	hi
 234 005e A562     		strhi	r5, [r4, #40]	@ tmp153, xNextTaskUnblockTime
5148:../freertos/tasks.c **** 				}
 235              		.loc 1 5148 30 is_stmt 1 view .LVU39
 236              	@ ../freertos/tasks.c:5190: }
 237              		.loc 1 5190 1 is_stmt 0 view .LVU40
 238 0060 F8BD     		pop	{r3, r4, r5, r6, r7, pc}	@
 239              	.LVL10:
 240              	.L12:
 241              		.loc 1 5190 1 view .LVU41
 242 0062 00BF     		.align	2
 243              	.L11:
 244 0064 00000000 		.word	.LANCHOR0
 245 0068 0C000000 		.word	.LANCHOR0+12
 246              		.cfi_endproc
 247              	.LFE62:
 248              		.size	prvAddCurrentTaskToDelayedList, .-prvAddCurrentTaskToDelayedList
 249              		.align	1
 250              		.syntax unified
 251              		.thumb
 252              		.thumb_func
 253              		.type	prvResetNextTaskUnblockTime, %function
 254              	prvResetNextTaskUnblockTime:
 255              	.LFB48:
3881:../freertos/tasks.c **** TCB_t *pxTCB;
 256              		.loc 1 3881 1 is_stmt 1 view -0
 257              		.cfi_startproc
 258              		@ args = 0, pretend = 0, frame = 0
 259              		@ frame_needed = 0, uses_anonymous_args = 0
 260              		@ link register save eliminated.
ARM GAS  /tmp/ccaP1CVS.s 			page 97


3882:../freertos/tasks.c **** 
 261              		.loc 1 3882 1 view .LVU43
3884:../freertos/tasks.c **** 	{
 262              		.loc 1 3884 2 view .LVU44
 263              	@ ../freertos/tasks.c:3884: 	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
3884:../freertos/tasks.c **** 	{
 264              		.loc 1 3884 6 is_stmt 0 view .LVU45
 265 006c 064B     		ldr	r3, .L17	@ tmp119,
 266 006e 5A6A     		ldr	r2, [r3, #36]	@ pxDelayedTaskList.19_1, pxDelayedTaskList
 267 0070 1268     		ldr	r2, [r2]	@ _2, pxDelayedTaskList.19_1->uxNumberOfItems
 268              	@ ../freertos/tasks.c:3884: 	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
3884:../freertos/tasks.c **** 	{
 269              		.loc 1 3884 4 view .LVU46
 270 0072 1AB9     		cbnz	r2, .L14	@ _2,
3890:../freertos/tasks.c **** 	}
 271              		.loc 1 3890 3 is_stmt 1 view .LVU47
 272              	@ ../freertos/tasks.c:3890: 		xNextTaskUnblockTime = portMAX_DELAY;
3890:../freertos/tasks.c **** 	}
 273              		.loc 1 3890 24 is_stmt 0 view .LVU48
 274 0074 4FF0FF32 		mov	r2, #-1	@ tmp121,
 275              	.L16:
 276              	.LBB34:
 277              	.LBB35:
 278              	@ ../freertos/tasks.c:3899: 		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateL
3899:../freertos/tasks.c **** 	}
 279              		.loc 1 3899 24 view .LVU49
 280 0078 9A62     		str	r2, [r3, #40]	@ _10, xNextTaskUnblockTime
 281              	.LBE35:
 282              	.LBE34:
 283              	@ ../freertos/tasks.c:3901: }
3901:../freertos/tasks.c **** /*-----------------------------------------------------------*/
 284              		.loc 1 3901 1 view .LVU50
 285 007a 7047     		bx	lr	@
 286              	.L14:
 287              	.LBB37:
 288              	.LBI34:
3880:../freertos/tasks.c **** {
 289              		.loc 1 3880 13 is_stmt 1 view .LVU51
 290              	.LBB36:
3898:../freertos/tasks.c **** 		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 291              		.loc 1 3898 3 view .LVU52
 292              	@ ../freertos/tasks.c:3898: 		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint 
3898:../freertos/tasks.c **** 		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 293              		.loc 1 3898 15 is_stmt 0 view .LVU53
 294 007c 5A6A     		ldr	r2, [r3, #36]	@ pxDelayedTaskList.20_7, pxDelayedTaskList
 295              	.LVL11:
3899:../freertos/tasks.c **** 	}
 296              		.loc 1 3899 3 is_stmt 1 view .LVU54
 297              	@ ../freertos/tasks.c:3898: 		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint 
3898:../freertos/tasks.c **** 		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 298              		.loc 1 3898 13 is_stmt 0 view .LVU55
 299 007e D268     		ldr	r2, [r2, #12]	@ pxDelayedTaskList.20_7->xListEnd.pxNext, pxDelayedTaskList.20_7->xListEnd.pxNe
 300              	.LVL12:
 301              	@ ../freertos/tasks.c:3899: 		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateL
3899:../freertos/tasks.c **** 	}
 302              		.loc 1 3899 26 view .LVU56
 303 0080 D268     		ldr	r2, [r2, #12]	@ _8->pvOwner, _8->pvOwner
ARM GAS  /tmp/ccaP1CVS.s 			page 98


 304              	.LVL13:
3899:../freertos/tasks.c **** 	}
 305              		.loc 1 3899 26 view .LVU57
 306 0082 5268     		ldr	r2, [r2, #4]	@ _10, pxTCB_9->xStateListItem.xItemValue
 307              	.LVL14:
3899:../freertos/tasks.c **** 	}
 308              		.loc 1 3899 26 view .LVU58
 309 0084 F8E7     		b	.L16		@
 310              	.L18:
 311 0086 00BF     		.align	2
 312              	.L17:
 313 0088 00000000 		.word	.LANCHOR0
 314              	.LBE36:
 315              	.LBE37:
 316              		.cfi_endproc
 317              	.LFE48:
 318              		.size	prvResetNextTaskUnblockTime, .-prvResetNextTaskUnblockTime
 319              		.align	1
 320              		.syntax unified
 321              		.thumb
 322              		.thumb_func
 323              		.type	prvIdleTask, %function
 324              	prvIdleTask:
 325              	.LVL15:
 326              	.LFB41:
3335:../freertos/tasks.c **** 	/* Stop warnings. */
 327              		.loc 1 3335 1 is_stmt 1 view -0
 328              		.cfi_startproc
 329              		@ Volatile: function does not return.
 330              		@ args = 0, pretend = 0, frame = 0
 331              		@ frame_needed = 0, uses_anonymous_args = 0
3335:../freertos/tasks.c **** 	/* Stop warnings. */
 332              		.loc 1 3335 1 is_stmt 0 view .LVU60
 333 008c 80B5     		push	{r7, lr}	@
 334              	.LCFI5:
 335              		.cfi_def_cfa_offset 8
 336              		.cfi_offset 7, -8
 337              		.cfi_offset 14, -4
 338              	@ ../freertos/tasks.c:3376: 				taskYIELD();
3376:../freertos/tasks.c **** 			}
 339              		.loc 1 3376 5 view .LVU61
 340 008e 4FF0E026 		mov	r6, #-536813568	@ tmp135,
 341 0092 4FF08057 		mov	r7, #268435456	@ tmp136,
 342              	.LBB43:
 343              	.LBB44:
 344              	@ ../freertos/tasks.c:3589: 		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
3589:../freertos/tasks.c **** 		{
 345              		.loc 1 3589 39 view .LVU62
 346 0096 114C     		ldr	r4, .L25	@ tmp131,
 347              	.LVL16:
 348              	.L20:
3589:../freertos/tasks.c **** 		{
 349              		.loc 1 3589 8 is_stmt 1 view .LVU63
 350              	@ ../freertos/tasks.c:3589: 		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
3589:../freertos/tasks.c **** 		{
 351              		.loc 1 3589 39 is_stmt 0 view .LVU64
 352 0098 636C     		ldr	r3, [r4, #68]	@ uxDeletedTasksWaitingCleanUp.54_16, uxDeletedTasksWaitingCleanUp
ARM GAS  /tmp/ccaP1CVS.s 			page 99


 353              	@ ../freertos/tasks.c:3589: 		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
3589:../freertos/tasks.c **** 		{
 354              		.loc 1 3589 8 view .LVU65
 355 009a 4BB9     		cbnz	r3, .L21	@ uxDeletedTasksWaitingCleanUp.54_16,
 356              	.LBE44:
 357              	.LBE43:
3374:../freertos/tasks.c **** 			{
 358              		.loc 1 3374 4 is_stmt 1 view .LVU66
 359              	@ ../freertos/tasks.c:3374: 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY 
3374:../freertos/tasks.c **** 			{
 360              		.loc 1 3374 8 is_stmt 0 view .LVU67
 361 009c A36C     		ldr	r3, [r4, #72]	@ _1, pxReadyTasksLists[0].uxNumberOfItems
 362              	@ ../freertos/tasks.c:3374: 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY 
3374:../freertos/tasks.c **** 			{
 363              		.loc 1 3374 6 view .LVU68
 364 009e 012B     		cmp	r3, #1	@ _1,
 365 00a0 FAD9     		bls	.L20		@,
3376:../freertos/tasks.c **** 			}
 366              		.loc 1 3376 5 is_stmt 1 view .LVU69
 367 00a2 C6F8047D 		str	r7, [r6, #3332]	@ tmp136, MEM[(volatile uint32_t *)3758157060B]
3376:../freertos/tasks.c **** 			}
 368              		.loc 1 3376 5 view .LVU70
 369              		.syntax unified
 370              	@ 3376 "../freertos/tasks.c" 1
 371 00a6 BFF34F8F 		dsb	
 372              	@ 0 "" 2
3376:../freertos/tasks.c **** 			}
 373              		.loc 1 3376 5 view .LVU71
 374              	@ 3376 "../freertos/tasks.c" 1
 375 00aa BFF36F8F 		isb
 376              	@ 0 "" 2
3376:../freertos/tasks.c **** 			}
 377              		.loc 1 3376 16 view .LVU72
 378              		.thumb
 379              		.syntax unified
 380 00ae F3E7     		b	.L20		@
 381              	.L21:
 382              	.LBB48:
 383              	.LBB47:
3591:../freertos/tasks.c **** 			{
 384              		.loc 1 3591 4 view .LVU73
 385 00b0 FFF7FEFF 		bl	vPortEnterCritical		@
 386              	.LVL17:
3593:../freertos/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 387              		.loc 1 3593 5 view .LVU74
 388              	@ ../freertos/tasks.c:3593: 				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) 
3593:../freertos/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 389              		.loc 1 3593 11 is_stmt 0 view .LVU75
 390 00b4 A36B     		ldr	r3, [r4, #56]	@ xTasksWaitingTermination.xListEnd.pxNext, xTasksWaitingTermination.xListEnd.px
 391 00b6 DD68     		ldr	r5, [r3, #12]	@ pxTCB, _9->pvOwner
 392              	.LVL18:
3594:../freertos/tasks.c **** 				--uxCurrentNumberOfTasks;
 393              		.loc 1 3594 5 is_stmt 1 view .LVU76
 394              	@ ../freertos/tasks.c:3594: 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
3594:../freertos/tasks.c **** 				--uxCurrentNumberOfTasks;
 395              		.loc 1 3594 14 is_stmt 0 view .LVU77
 396 00b8 281D     		adds	r0, r5, #4	@, pxTCB,
ARM GAS  /tmp/ccaP1CVS.s 			page 100


 397 00ba FFF7FEFF 		bl	uxListRemove		@
 398              	.LVL19:
3595:../freertos/tasks.c **** 				--uxDeletedTasksWaitingCleanUp;
 399              		.loc 1 3595 5 is_stmt 1 view .LVU78
 400 00be 236C     		ldr	r3, [r4, #64]	@ uxCurrentNumberOfTasks.52_12, uxCurrentNumberOfTasks
 401 00c0 013B     		subs	r3, r3, #1	@ _13, uxCurrentNumberOfTasks.52_12,
 402 00c2 2364     		str	r3, [r4, #64]	@ _13, uxCurrentNumberOfTasks
3596:../freertos/tasks.c **** 			}
 403              		.loc 1 3596 5 view .LVU79
 404 00c4 636C     		ldr	r3, [r4, #68]	@ uxDeletedTasksWaitingCleanUp.53_14, uxDeletedTasksWaitingCleanUp
 405 00c6 013B     		subs	r3, r3, #1	@ _15, uxDeletedTasksWaitingCleanUp.53_14,
 406 00c8 6364     		str	r3, [r4, #68]	@ _15, uxDeletedTasksWaitingCleanUp
3598:../freertos/tasks.c **** 
 407              		.loc 1 3598 4 view .LVU80
 408 00ca FFF7FEFF 		bl	vPortExitCritical		@
 409              	.LVL20:
3600:../freertos/tasks.c **** 		}
 410              		.loc 1 3600 4 view .LVU81
 411              	.LBB45:
 412              	.LBI45:
3826:../freertos/tasks.c **** 	{
 413              		.loc 1 3826 14 view .LVU82
 414              	.LBB46:
3831:../freertos/tasks.c **** 
 415              		.loc 1 3831 3 view .LVU83
3845:../freertos/tasks.c **** 			vPortFree( pxTCB );
 416              		.loc 1 3845 4 view .LVU84
 417 00ce 286B     		ldr	r0, [r5, #48]	@, pxTCB_10->pxStack
 418 00d0 FFF7FEFF 		bl	vPortFree		@
 419              	.LVL21:
3846:../freertos/tasks.c **** 		}
 420              		.loc 1 3846 4 view .LVU85
 421 00d4 2846     		mov	r0, r5	@, pxTCB
 422 00d6 FFF7FEFF 		bl	vPortFree		@
 423              	.LVL22:
 424              	@ ../freertos/tasks.c:3875: 	}
3875:../freertos/tasks.c **** 
 425              		.loc 1 3875 2 is_stmt 0 view .LVU86
 426 00da DDE7     		b	.L20		@
 427              	.L26:
 428              		.align	2
 429              	.L25:
 430 00dc 00000000 		.word	.LANCHOR0
 431              	.LBE46:
 432              	.LBE45:
 433              	.LBE47:
 434              	.LBE48:
 435              		.cfi_endproc
 436              	.LFE41:
 437              		.size	prvIdleTask, .-prvIdleTask
 438              		.align	1
 439              		.global	xTaskCreate
 440              		.syntax unified
 441              		.thumb
 442              		.thumb_func
 443              		.type	xTaskCreate, %function
 444              	xTaskCreate:
ARM GAS  /tmp/ccaP1CVS.s 			page 101


 445              	.LVL23:
 446              	.LFB5:
 736:../freertos/tasks.c **** 	TCB_t *pxNewTCB;
 447              		.loc 1 736 2 is_stmt 1 view -0
 448              		.cfi_startproc
 449              		@ args = 8, pretend = 0, frame = 0
 450              		@ frame_needed = 0, uses_anonymous_args = 0
 736:../freertos/tasks.c **** 	TCB_t *pxNewTCB;
 451              		.loc 1 736 2 is_stmt 0 view .LVU88
 452 00e0 2DE9F84F 		push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 453              	.LCFI6:
 454              		.cfi_def_cfa_offset 40
 455              		.cfi_offset 3, -40
 456              		.cfi_offset 4, -36
 457              		.cfi_offset 5, -32
 458              		.cfi_offset 6, -28
 459              		.cfi_offset 7, -24
 460              		.cfi_offset 8, -20
 461              		.cfi_offset 9, -16
 462              		.cfi_offset 10, -12
 463              		.cfi_offset 11, -8
 464              		.cfi_offset 14, -4
 465              	.LBB56:
 466              	@ ../freertos/tasks.c:770: 			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( Stack
 770:../freertos/tasks.c **** 
 467              		.loc 1 770 14 view .LVU89
 468 00e4 9600     		lsls	r6, r2, #2	@ _2, tmp234,
 469              	.LBE56:
 470              	@ ../freertos/tasks.c:736: 	{
 736:../freertos/tasks.c **** 	TCB_t *pxNewTCB;
 471              		.loc 1 736 2 view .LVU90
 472 00e6 0746     		mov	r7, r0	@ pxTaskCode, tmp232
 737:../freertos/tasks.c **** 	BaseType_t xReturn;
 473              		.loc 1 737 2 is_stmt 1 view .LVU91
 738:../freertos/tasks.c **** 
 474              		.loc 1 738 2 view .LVU92
 475              	.LBB57:
 767:../freertos/tasks.c **** 
 476              		.loc 1 767 3 view .LVU93
 770:../freertos/tasks.c **** 
 477              		.loc 1 770 4 view .LVU94
 478              	@ ../freertos/tasks.c:770: 			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( Stack
 770:../freertos/tasks.c **** 
 479              		.loc 1 770 14 is_stmt 0 view .LVU95
 480 00e8 3046     		mov	r0, r6	@, _2
 481              	.LVL24:
 770:../freertos/tasks.c **** 
 482              		.loc 1 770 14 view .LVU96
 483              	.LBE57:
 484              	@ ../freertos/tasks.c:736: 	{
 736:../freertos/tasks.c **** 	TCB_t *pxNewTCB;
 485              		.loc 1 736 2 view .LVU97
 486 00ea 0D46     		mov	r5, r1	@ pcName, tmp233
 487 00ec 9846     		mov	r8, r3	@ pvParameters, tmp235
 488              	.LBB58:
 489              	@ ../freertos/tasks.c:770: 			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( Stack
 770:../freertos/tasks.c **** 
ARM GAS  /tmp/ccaP1CVS.s 			page 102


 490              		.loc 1 770 14 view .LVU98
 491 00ee FFF7FEFF 		bl	pvPortMalloc		@
 492              	.LVL25:
 772:../freertos/tasks.c **** 			{
 493              		.loc 1 772 4 is_stmt 1 view .LVU99
 494              	@ ../freertos/tasks.c:772: 			if( pxStack != NULL )
 772:../freertos/tasks.c **** 			{
 495              		.loc 1 772 6 is_stmt 0 view .LVU100
 496 00f2 8146     		mov	r9, r0	@ pxStack, tmp236
 497 00f4 A0B1     		cbz	r0, .L41	@ pxStack,
 775:../freertos/tasks.c **** 
 498              		.loc 1 775 5 is_stmt 1 view .LVU101
 499              	@ ../freertos/tasks.c:775: 				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e908
 775:../freertos/tasks.c **** 
 500              		.loc 1 775 28 is_stmt 0 view .LVU102
 501 00f6 5C20     		movs	r0, #92	@,
 502              	.LVL26:
 775:../freertos/tasks.c **** 
 503              		.loc 1 775 28 view .LVU103
 504 00f8 FFF7FEFF 		bl	pvPortMalloc		@
 505              	.LVL27:
 777:../freertos/tasks.c **** 				{
 506              		.loc 1 777 5 is_stmt 1 view .LVU104
 507              	@ ../freertos/tasks.c:777: 				if( pxNewTCB != NULL )
 777:../freertos/tasks.c **** 				{
 508              		.loc 1 777 7 is_stmt 0 view .LVU105
 509 00fc 0446     		mov	r4, r0	@ pxNewTCB, tmp237
 510 00fe 60B1     		cbz	r0, .L29	@ pxNewTCB,
 780:../freertos/tasks.c **** 				}
 511              		.loc 1 780 6 is_stmt 1 view .LVU106
 512              	@ ../freertos/tasks.c:780: 					pxNewTCB->pxStack = pxStack;
 780:../freertos/tasks.c **** 				}
 513              		.loc 1 780 24 is_stmt 0 view .LVU107
 514 0100 C0F83090 		str	r9, [r0, #48]	@ pxStack, pxNewTCB_11->pxStack
 780:../freertos/tasks.c **** 				}
 515              		.loc 1 780 24 view .LVU108
 516              	.LBE58:
 796:../freertos/tasks.c **** 		{
 517              		.loc 1 796 3 is_stmt 1 view .LVU109
 806:../freertos/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 518              		.loc 1 806 4 view .LVU110
 519              	.LVL28:
 520              	.LBB59:
 521              	.LBI59:
 821:../freertos/tasks.c **** 									const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings an
 522              		.loc 1 821 13 view .LVU111
 523              	.LBB60:
 830:../freertos/tasks.c **** UBaseType_t x;
 524              		.loc 1 830 1 view .LVU112
 831:../freertos/tasks.c **** 
 525              		.loc 1 831 1 view .LVU113
 851:../freertos/tasks.c **** 	}
 526              		.loc 1 851 3 view .LVU114
 527              	@ ../freertos/tasks.c:851: 		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size
 851:../freertos/tasks.c **** 	}
 528              		.loc 1 851 12 is_stmt 0 view .LVU115
 529 0104 3246     		mov	r2, r6	@, _2
ARM GAS  /tmp/ccaP1CVS.s 			page 103


 530 0106 A521     		movs	r1, #165	@,
 531 0108 4846     		mov	r0, r9	@, pxStack
 532              	.LVL29:
 851:../freertos/tasks.c **** 	}
 533              		.loc 1 851 12 view .LVU116
 534 010a FFF7FEFF 		bl	memset		@
 535              	.LVL30:
 861:../freertos/tasks.c **** 		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTE
 536              		.loc 1 861 3 is_stmt 1 view .LVU117
 537              	@ ../freertos/tasks.c:861: 		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] )
 861:../freertos/tasks.c **** 		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTE
 538              		.loc 1 861 29 is_stmt 0 view .LVU118
 539 010e D4F830B0 		ldr	fp, [r4, #48]	@ _43, pxNewTCB_11->pxStack
 540              	.LVL31:
 862:../freertos/tasks.c **** 
 541              		.loc 1 862 3 is_stmt 1 view .LVU119
 865:../freertos/tasks.c **** 
 542              		.loc 1 865 124 view .LVU120
 889:../freertos/tasks.c **** 	{
 543              		.loc 1 889 2 view .LVU121
 544              	@ ../freertos/tasks.c:889: 	if( pcName != NULL )
 889:../freertos/tasks.c **** 	{
 545              		.loc 1 889 4 is_stmt 0 view .LVU122
 546 0112 45B9     		cbnz	r5, .L30	@ pcName,
 916:../freertos/tasks.c **** 	}
 547              		.loc 1 916 3 is_stmt 1 view .LVU123
 548              	@ ../freertos/tasks.c:916: 		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 916:../freertos/tasks.c **** 	}
 549              		.loc 1 916 29 is_stmt 0 view .LVU124
 550 0114 84F83450 		strb	r5, [r4, #52]	@ pcName, pxNewTCB_11->pcTaskName[0]
 551 0118 13E0     		b	.L34		@
 552              	.LVL32:
 553              	.L29:
 916:../freertos/tasks.c **** 	}
 554              		.loc 1 916 29 view .LVU125
 555              	.LBE60:
 556              	.LBE59:
 557              	.LBB62:
 786:../freertos/tasks.c **** 				}
 558              		.loc 1 786 6 is_stmt 1 view .LVU126
 559 011a 4846     		mov	r0, r9	@, pxStack
 560              	.LVL33:
 786:../freertos/tasks.c **** 				}
 561              		.loc 1 786 6 is_stmt 0 view .LVU127
 562 011c FFF7FEFF 		bl	vPortFree		@
 563              	.LVL34:
 786:../freertos/tasks.c **** 				}
 564              		.loc 1 786 6 view .LVU128
 565              	.LBE62:
 796:../freertos/tasks.c **** 		{
 566              		.loc 1 796 3 is_stmt 1 view .LVU129
 567              	.L41:
 568              	@ ../freertos/tasks.c:812: 			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 812:../freertos/tasks.c **** 		}
 569              		.loc 1 812 12 is_stmt 0 view .LVU130
 570 0120 4FF0FF36 		mov	r6, #-1	@ <retval>,
 571 0124 8CE0     		b	.L27		@
ARM GAS  /tmp/ccaP1CVS.s 			page 104


 572              	.LVL35:
 573              	.L30:
 812:../freertos/tasks.c **** 		}
 574              		.loc 1 812 12 view .LVU131
 575 0126 6B1E     		subs	r3, r5, #1	@ ivtmp.223, pcName,
 576 0128 04F13402 		add	r2, r4, #52	@ ivtmp.228, pxNewTCB,
 577 012c 0F35     		adds	r5, r5, #15	@ _19, pcName,
 578              	.LVL36:
 579              	.L33:
 580              	.LBB63:
 581              	.LBB61:
 893:../freertos/tasks.c **** 
 582              		.loc 1 893 4 is_stmt 1 view .LVU132
 583              	@ ../freertos/tasks.c:893: 			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 893:../freertos/tasks.c **** 
 584              		.loc 1 893 38 is_stmt 0 view .LVU133
 585 012e 13F8010F 		ldrb	r0, [r3, #1]!	@ zero_extendqisi2	@ _52, MEM[base: _20, offset: 0B]
 586              	.LVL37:
 587              	@ ../freertos/tasks.c:893: 			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 893:../freertos/tasks.c **** 
 588              		.loc 1 893 30 view .LVU134
 589 0132 02F8010B 		strb	r0, [r2], #1	@ _52, MEM[base: _112, offset: 0B]
 898:../freertos/tasks.c **** 			{
 590              		.loc 1 898 4 is_stmt 1 view .LVU135
 591              	@ ../freertos/tasks.c:898: 			if( pcName[ x ] == ( char ) 0x00 )
 898:../freertos/tasks.c **** 			{
 592              		.loc 1 898 6 is_stmt 0 view .LVU136
 593 0136 08B1     		cbz	r0, .L32	@ _52,
 904:../freertos/tasks.c **** 			}
 594              		.loc 1 904 29 is_stmt 1 view .LVU137
 891:../freertos/tasks.c **** 		{
 595              		.loc 1 891 76 view .LVU138
 596              	.LVL38:
 891:../freertos/tasks.c **** 		{
 597              		.loc 1 891 31 view .LVU139
 598              	@ ../freertos/tasks.c:891: 		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LE
 891:../freertos/tasks.c **** 		{
 599              		.loc 1 891 3 is_stmt 0 view .LVU140
 600 0138 9D42     		cmp	r5, r3	@ _19, ivtmp.223
 601 013a F8D1     		bne	.L33		@,
 602              	.LVL39:
 603              	.L32:
 910:../freertos/tasks.c **** 	}
 604              		.loc 1 910 3 is_stmt 1 view .LVU141
 605              	@ ../freertos/tasks.c:910: 		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 910:../freertos/tasks.c **** 	}
 606              		.loc 1 910 55 is_stmt 0 view .LVU142
 607 013c 0023     		movs	r3, #0	@ tmp169,
 608 013e 84F84330 		strb	r3, [r4, #67]	@ tmp169, pxNewTCB_11->pcTaskName[15]
 609              	.LVL40:
 610              	.L34:
 921:../freertos/tasks.c **** 	{
 611              		.loc 1 921 2 is_stmt 1 view .LVU143
 612 0142 0A9D     		ldr	r5, [sp, #40]	@ uxPriority, uxPriority
 613              	@ ../freertos/tasks.c:934: 		pxNewTCB->uxMutexesHeld = 0;
 934:../freertos/tasks.c **** 	}
 614              		.loc 1 934 27 is_stmt 0 view .LVU144
ARM GAS  /tmp/ccaP1CVS.s 			page 105


 615 0144 4FF0000A 		mov	r10, #0	@ tmp173,
 616 0148 042D     		cmp	r5, #4	@ uxPriority,
 617 014a 28BF     		it	cs
 618 014c 0425     		movcs	r5, #4	@ uxPriority,
 619              	.LVL41:
 927:../freertos/tasks.c **** 	}
 620              		.loc 1 927 27 is_stmt 1 view .LVU145
 930:../freertos/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 621              		.loc 1 930 2 view .LVU146
 622              	@ ../freertos/tasks.c:938: 	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 938:../freertos/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 623              		.loc 1 938 2 is_stmt 0 view .LVU147
 624 014e 04F10409 		add	r9, r4, #4	@ _56, pxNewTCB,
 625              	.LVL42:
 938:../freertos/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 626              		.loc 1 938 2 view .LVU148
 627 0152 4846     		mov	r0, r9	@, _56
 628              	@ ../freertos/tasks.c:930: 	pxNewTCB->uxPriority = uxPriority;
 930:../freertos/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 629              		.loc 1 930 23 view .LVU149
 630 0154 E562     		str	r5, [r4, #44]	@ uxPriority, pxNewTCB_11->uxPriority
 933:../freertos/tasks.c **** 		pxNewTCB->uxMutexesHeld = 0;
 631              		.loc 1 933 3 is_stmt 1 view .LVU150
 632              	@ ../freertos/tasks.c:933: 		pxNewTCB->uxBasePriority = uxPriority;
 933:../freertos/tasks.c **** 		pxNewTCB->uxMutexesHeld = 0;
 633              		.loc 1 933 28 is_stmt 0 view .LVU151
 634 0156 E564     		str	r5, [r4, #76]	@ uxPriority, pxNewTCB_11->uxBasePriority
 934:../freertos/tasks.c **** 	}
 635              		.loc 1 934 3 is_stmt 1 view .LVU152
 636              	@ ../freertos/tasks.c:934: 		pxNewTCB->uxMutexesHeld = 0;
 934:../freertos/tasks.c **** 	}
 637              		.loc 1 934 27 is_stmt 0 view .LVU153
 638 0158 C4F850A0 		str	r10, [r4, #80]	@ tmp173, pxNewTCB_11->uxMutexesHeld
 938:../freertos/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 639              		.loc 1 938 2 is_stmt 1 view .LVU154
 640              	@ ../freertos/tasks.c:861: 		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] )
 861:../freertos/tasks.c **** 		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTE
 641              		.loc 1 861 38 is_stmt 0 view .LVU155
 642 015c 043E     		subs	r6, r6, #4	@ tmp179, _2,
 643              	@ ../freertos/tasks.c:938: 	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 938:../freertos/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 644              		.loc 1 938 2 view .LVU156
 645 015e FFF7FEFF 		bl	vListInitialiseItem		@
 646              	.LVL43:
 939:../freertos/tasks.c **** 
 647              		.loc 1 939 2 is_stmt 1 view .LVU157
 648              	@ ../freertos/tasks.c:946: 	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) 
 946:../freertos/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 649              		.loc 1 946 2 is_stmt 0 view .LVU158
 650 0162 C5F10505 		rsb	r5, r5, #5	@ tmp175, uxPriority,
 651              	.LVL44:
 652              	@ ../freertos/tasks.c:939: 	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 939:../freertos/tasks.c **** 
 653              		.loc 1 939 2 view .LVU159
 654 0166 04F11800 		add	r0, r4, #24	@, pxNewTCB,
 655              	@ ../freertos/tasks.c:861: 		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] )
 861:../freertos/tasks.c **** 		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTE
ARM GAS  /tmp/ccaP1CVS.s 			page 106


 656              		.loc 1 861 16 view .LVU160
 657 016a 5E44     		add	r6, r6, fp	@ pxTopOfStack, _43
 658              	@ ../freertos/tasks.c:939: 	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 939:../freertos/tasks.c **** 
 659              		.loc 1 939 2 view .LVU161
 660 016c FFF7FEFF 		bl	vListInitialiseItem		@
 661              	.LVL45:
 943:../freertos/tasks.c **** 
 662              		.loc 1 943 2 is_stmt 1 view .LVU162
 663              	@ ../freertos/tasks.c:989: 		pxNewTCB->ulNotifiedValue = 0;
 989:../freertos/tasks.c **** 		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 664              		.loc 1 989 29 is_stmt 0 view .LVU163
 665 0170 C4F854A0 		str	r10, [r4, #84]	@ tmp173, pxNewTCB_11->ulNotifiedValue
 666              	@ ../freertos/tasks.c:1053: 			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTask
1053:../freertos/tasks.c **** 		}
 667              		.loc 1 1053 29 view .LVU164
 668 0174 4246     		mov	r2, r8	@, pvParameters
 669 0176 3946     		mov	r1, r7	@, pxTaskCode
 670              	@ ../freertos/tasks.c:943: 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 943:../freertos/tasks.c **** 
 671              		.loc 1 943 2 view .LVU165
 672 0178 2461     		str	r4, [r4, #16]	@ pxNewTCB, pxNewTCB_11->xStateListItem.pvOwner
 946:../freertos/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 673              		.loc 1 946 2 is_stmt 1 view .LVU166
 674 017a A561     		str	r5, [r4, #24]	@ tmp175, pxNewTCB_11->xEventListItem.xItemValue
 947:../freertos/tasks.c **** 
 675              		.loc 1 947 2 view .LVU167
 676 017c 6462     		str	r4, [r4, #36]	@ pxNewTCB, pxNewTCB_11->xEventListItem.pvOwner
 974:../freertos/tasks.c **** 	}
 677              		.loc 1 974 3 view .LVU168
 989:../freertos/tasks.c **** 		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 678              		.loc 1 989 3 view .LVU169
 990:../freertos/tasks.c **** 	}
 679              		.loc 1 990 3 view .LVU170
 680              	@ ../freertos/tasks.c:990: 		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 990:../freertos/tasks.c **** 	}
 681              		.loc 1 990 27 is_stmt 0 view .LVU171
 682 017e 84F858A0 		strb	r10, [r4, #88]	@ tmp173, pxNewTCB_11->ucNotifyState
1053:../freertos/tasks.c **** 		}
 683              		.loc 1 1053 4 is_stmt 1 view .LVU172
 684              	@ ../freertos/tasks.c:1053: 			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTask
1053:../freertos/tasks.c **** 		}
 685              		.loc 1 1053 29 is_stmt 0 view .LVU173
 686 0182 26F00700 		bic	r0, r6, #7	@, pxTopOfStack,
 687 0186 FFF7FEFF 		bl	pxPortInitialiseStack		@
 688              	.LVL46:
 689              	@ ../freertos/tasks.c:1059: 	if( pxCreatedTask != NULL )
1059:../freertos/tasks.c **** 	{
 690              		.loc 1 1059 4 view .LVU174
 691 018a 0B9B     		ldr	r3, [sp, #44]	@ tmp241, pxCreatedTask
 692              	@ ../freertos/tasks.c:1053: 			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTask
1053:../freertos/tasks.c **** 		}
 693              		.loc 1 1053 27 view .LVU175
 694 018c 2060     		str	r0, [r4]	@ tmp238, pxNewTCB_11->pxTopOfStack
1059:../freertos/tasks.c **** 	{
 695              		.loc 1 1059 2 is_stmt 1 view .LVU176
 696              	@ ../freertos/tasks.c:1059: 	if( pxCreatedTask != NULL )
ARM GAS  /tmp/ccaP1CVS.s 			page 107


1059:../freertos/tasks.c **** 	{
 697              		.loc 1 1059 4 is_stmt 0 view .LVU177
 698 018e 03B1     		cbz	r3, .L35	@ tmp241,
1063:../freertos/tasks.c **** 	}
 699              		.loc 1 1063 3 is_stmt 1 view .LVU178
 700              	@ ../freertos/tasks.c:1063: 		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
1063:../freertos/tasks.c **** 	}
 701              		.loc 1 1063 18 is_stmt 0 view .LVU179
 702 0190 1C60     		str	r4, [r3]	@ pxNewTCB, *pxCreatedTask_18(D)
 703              	.L35:
1067:../freertos/tasks.c **** 	}
 704              		.loc 1 1067 27 is_stmt 1 view .LVU180
 705              	.LVL47:
1067:../freertos/tasks.c **** 	}
 706              		.loc 1 1067 27 is_stmt 0 view .LVU181
 707              	.LBE61:
 708              	.LBE63:
 807:../freertos/tasks.c **** 			xReturn = pdPASS;
 709              		.loc 1 807 4 is_stmt 1 view .LVU182
 710              	.LBB64:
 711              	.LBI64:
1072:../freertos/tasks.c **** {
 712              		.loc 1 1072 13 view .LVU183
 713              	.LBB65:
1076:../freertos/tasks.c **** 	{
 714              		.loc 1 1076 2 view .LVU184
 715              	@ ../freertos/tasks.c:1078: 		uxCurrentNumberOfTasks++;
1078:../freertos/tasks.c **** 		if( pxCurrentTCB == NULL )
 716              		.loc 1 1078 25 is_stmt 0 view .LVU185
 717 0192 324D     		ldr	r5, .L53	@ tmp181,
 718              	@ ../freertos/tasks.c:1076: 	taskENTER_CRITICAL();
1076:../freertos/tasks.c **** 	{
 719              		.loc 1 1076 2 view .LVU186
 720 0194 FFF7FEFF 		bl	vPortEnterCritical		@
 721              	.LVL48:
1078:../freertos/tasks.c **** 		if( pxCurrentTCB == NULL )
 722              		.loc 1 1078 3 is_stmt 1 view .LVU187
 723              	@ ../freertos/tasks.c:1078: 		uxCurrentNumberOfTasks++;
1078:../freertos/tasks.c **** 		if( pxCurrentTCB == NULL )
 724              		.loc 1 1078 25 is_stmt 0 view .LVU188
 725 0198 2B6C     		ldr	r3, [r5, #64]	@ uxCurrentNumberOfTasks.1_21, uxCurrentNumberOfTasks
 726 019a 05F14807 		add	r7, r5, #72	@ tmp228, tmp181,
 727              	.LVL49:
1078:../freertos/tasks.c **** 		if( pxCurrentTCB == NULL )
 728              		.loc 1 1078 25 view .LVU189
 729 019e 0133     		adds	r3, r3, #1	@ _22, uxCurrentNumberOfTasks.1_21,
 730 01a0 2B64     		str	r3, [r5, #64]	@ _22, uxCurrentNumberOfTasks
1079:../freertos/tasks.c **** 		{
 731              		.loc 1 1079 3 is_stmt 1 view .LVU190
 732              	@ ../freertos/tasks.c:1079: 		if( pxCurrentTCB == NULL )
1079:../freertos/tasks.c **** 		{
 733              		.loc 1 1079 20 is_stmt 0 view .LVU191
 734 01a2 6E68     		ldr	r6, [r5, #4]	@ pxCurrentTCB.2_23, pxCurrentTCB
 735              	@ ../freertos/tasks.c:1079: 		if( pxCurrentTCB == NULL )
1079:../freertos/tasks.c **** 		{
 736              		.loc 1 1079 5 view .LVU192
 737 01a4 002E     		cmp	r6, #0	@ pxCurrentTCB.2_23
ARM GAS  /tmp/ccaP1CVS.s 			page 108


 738 01a6 4ED1     		bne	.L36	@
1083:../freertos/tasks.c **** 
 739              		.loc 1 1083 4 is_stmt 1 view .LVU193
 740              	@ ../freertos/tasks.c:1083: 			pxCurrentTCB = pxNewTCB;
1083:../freertos/tasks.c **** 
 741              		.loc 1 1083 17 is_stmt 0 view .LVU194
 742 01a8 6C60     		str	r4, [r5, #4]	@ pxNewTCB, pxCurrentTCB
1085:../freertos/tasks.c **** 			{
 743              		.loc 1 1085 4 is_stmt 1 view .LVU195
 744              	@ ../freertos/tasks.c:1085: 			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
1085:../freertos/tasks.c **** 			{
 745              		.loc 1 1085 31 is_stmt 0 view .LVU196
 746 01aa 2B6C     		ldr	r3, [r5, #64]	@ uxCurrentNumberOfTasks.3_24, uxCurrentNumberOfTasks
 747              	@ ../freertos/tasks.c:1085: 			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
1085:../freertos/tasks.c **** 			{
 748              		.loc 1 1085 6 view .LVU197
 749 01ac 012B     		cmp	r3, #1	@ uxCurrentNumberOfTasks.3_24,
 750 01ae 20D1     		bne	.L38		@,
1085:../freertos/tasks.c **** 			{
 751              		.loc 1 1085 6 view .LVU198
 752 01b0 B846     		mov	r8, r7	@ ivtmp.215, tmp228
 753              	.LVL50:
 754              	.L39:
 755              	.LBB66:
 756              	.LBB67:
3552:../freertos/tasks.c **** 	}
 757              		.loc 1 3552 3 is_stmt 1 view .LVU199
 758 01b2 4046     		mov	r0, r8	@, ivtmp.215
 759              	@ ../freertos/tasks.c:3550: 	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) con
3550:../freertos/tasks.c **** 	{
 760              		.loc 1 3550 101 is_stmt 0 view .LVU200
 761 01b4 0136     		adds	r6, r6, #1	@ uxPriority, uxPriority,
 762              	.LVL51:
 763              	@ ../freertos/tasks.c:3552: 		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
3552:../freertos/tasks.c **** 	}
 764              		.loc 1 3552 3 view .LVU201
 765 01b6 FFF7FEFF 		bl	vListInitialise		@
 766              	.LVL52:
3550:../freertos/tasks.c **** 	{
 767              		.loc 1 3550 91 is_stmt 1 view .LVU202
3550:../freertos/tasks.c **** 	{
 768              		.loc 1 3550 40 view .LVU203
 769              	@ ../freertos/tasks.c:3550: 	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) con
3550:../freertos/tasks.c **** 	{
 770              		.loc 1 3550 2 is_stmt 0 view .LVU204
 771 01ba 052E     		cmp	r6, #5	@ uxPriority,
 772 01bc 08F11408 		add	r8, r8, #20	@ ivtmp.215, ivtmp.215,
 773 01c0 F7D1     		bne	.L39		@,
3555:../freertos/tasks.c **** 	vListInitialise( &xDelayedTaskList2 );
 774              		.loc 1 3555 2 is_stmt 1 view .LVU205
 775 01c2 274E     		ldr	r6, .L53+4	@ tmp188,
 776              	.LVL53:
3555:../freertos/tasks.c **** 	vListInitialise( &xDelayedTaskList2 );
 777              		.loc 1 3555 2 is_stmt 0 view .LVU206
 778 01c4 3046     		mov	r0, r6	@, tmp188
 779              	@ ../freertos/tasks.c:3556: 	vListInitialise( &xDelayedTaskList2 );
3556:../freertos/tasks.c **** 	vListInitialise( &xPendingReadyList );
ARM GAS  /tmp/ccaP1CVS.s 			page 109


 780              		.loc 1 3556 2 view .LVU207
 781 01c6 06F11408 		add	r8, r6, #20	@ tmp190, tmp188,
 782              	@ ../freertos/tasks.c:3555: 	vListInitialise( &xDelayedTaskList1 );
3555:../freertos/tasks.c **** 	vListInitialise( &xDelayedTaskList2 );
 783              		.loc 1 3555 2 view .LVU208
 784 01ca FFF7FEFF 		bl	vListInitialise		@
 785              	.LVL54:
3556:../freertos/tasks.c **** 	vListInitialise( &xPendingReadyList );
 786              		.loc 1 3556 2 is_stmt 1 view .LVU209
 787 01ce 4046     		mov	r0, r8	@, tmp190
 788 01d0 FFF7FEFF 		bl	vListInitialise		@
 789              	.LVL55:
3557:../freertos/tasks.c **** 
 790              		.loc 1 3557 2 view .LVU210
 791 01d4 06F12800 		add	r0, r6, #40	@, tmp188,
 792 01d8 FFF7FEFF 		bl	vListInitialise		@
 793              	.LVL56:
3561:../freertos/tasks.c **** 	}
 794              		.loc 1 3561 3 view .LVU211
 795 01dc A6F18000 		sub	r0, r6, #128	@, tmp188,
 796 01e0 FFF7FEFF 		bl	vListInitialise		@
 797              	.LVL57:
3567:../freertos/tasks.c **** 	}
 798              		.loc 1 3567 3 view .LVU212
 799 01e4 A6F1A000 		sub	r0, r6, #160	@, tmp188,
 800 01e8 FFF7FEFF 		bl	vListInitialise		@
 801              	.LVL58:
3573:../freertos/tasks.c **** 	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 802              		.loc 1 3573 2 view .LVU213
 803              	@ ../freertos/tasks.c:3573: 	pxDelayedTaskList = &xDelayedTaskList1;
3573:../freertos/tasks.c **** 	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 804              		.loc 1 3573 20 is_stmt 0 view .LVU214
 805 01ec 6E62     		str	r6, [r5, #36]	@ tmp188, pxDelayedTaskList
3574:../freertos/tasks.c **** }
 806              		.loc 1 3574 2 is_stmt 1 view .LVU215
 807              	@ ../freertos/tasks.c:3574: 	pxOverflowDelayedTaskList = &xDelayedTaskList2;
3574:../freertos/tasks.c **** }
 808              		.loc 1 3574 28 is_stmt 0 view .LVU216
 809 01ee C5F82080 		str	r8, [r5, #32]	@ tmp190, pxOverflowDelayedTaskList
 810              	.L38:
3574:../freertos/tasks.c **** }
 811              		.loc 1 3574 28 view .LVU217
 812              	.LBE67:
 813              	.LBE66:
1115:../freertos/tasks.c **** 			}
 814              		.loc 1 1115 29 is_stmt 1 view .LVU218
1119:../freertos/tasks.c **** 
 815              		.loc 1 1119 3 view .LVU219
 816              	@ ../freertos/tasks.c:1129: 		prvAddTaskToReadyList( pxNewTCB );
1129:../freertos/tasks.c **** 
 817              		.loc 1 1129 3 is_stmt 0 view .LVU220
 818 01f2 0126     		movs	r6, #1	@ tmp213,
 819 01f4 1420     		movs	r0, #20	@ tmp218,
 820              	@ ../freertos/tasks.c:1119: 		uxTaskNumber++;
1119:../freertos/tasks.c **** 
 821              		.loc 1 1119 15 view .LVU221
 822 01f6 D5F8EC30 		ldr	r3, [r5, #236]	@ uxTaskNumber, uxTaskNumber
ARM GAS  /tmp/ccaP1CVS.s 			page 110


 823              	@ ../freertos/tasks.c:1129: 		prvAddTaskToReadyList( pxNewTCB );
1129:../freertos/tasks.c **** 
 824              		.loc 1 1129 3 view .LVU222
 825 01fa E26A     		ldr	r2, [r4, #44]	@ _31, pxNewTCB_11->uxPriority
 826 01fc A968     		ldr	r1, [r5, #8]	@ uxTopReadyPriority.8_33, uxTopReadyPriority
 827              	@ ../freertos/tasks.c:1119: 		uxTaskNumber++;
1119:../freertos/tasks.c **** 
 828              		.loc 1 1119 15 view .LVU223
 829 01fe 0133     		adds	r3, r3, #1	@ _30, uxTaskNumber,
 830 0200 C5F8EC30 		str	r3, [r5, #236]	@ _30, uxTaskNumber
1124:../freertos/tasks.c **** 		}
 831              		.loc 1 1124 4 is_stmt 1 view .LVU224
 832              	@ ../freertos/tasks.c:1124: 			pxNewTCB->uxTCBNumber = uxTaskNumber;
1124:../freertos/tasks.c **** 		}
 833              		.loc 1 1124 26 is_stmt 0 view .LVU225
 834 0204 6364     		str	r3, [r4, #68]	@ _30, pxNewTCB_11->uxTCBNumber
1127:../freertos/tasks.c **** 
 835              		.loc 1 1127 31 is_stmt 1 view .LVU226
1129:../freertos/tasks.c **** 
 836              		.loc 1 1129 3 view .LVU227
1129:../freertos/tasks.c **** 
 837              		.loc 1 1129 3 view .LVU228
 838 0206 06FA02F3 		lsl	r3, r6, r2	@ tmp212, tmp213, _31
 839 020a 0B43     		orrs	r3, r3, r1	@, _34, tmp212, uxTopReadyPriority.8_33
 840 020c 00FB0270 		mla	r0, r0, r2, r7	@, tmp218, _31, tmp228
 841 0210 4946     		mov	r1, r9	@, _56
 842 0212 AB60     		str	r3, [r5, #8]	@ _34, uxTopReadyPriority
1129:../freertos/tasks.c **** 
 843              		.loc 1 1129 3 view .LVU229
 844 0214 FFF7FEFF 		bl	vListInsertEnd		@
 845              	.LVL59:
1129:../freertos/tasks.c **** 
 846              		.loc 1 1129 36 view .LVU230
1131:../freertos/tasks.c **** 	}
 847              		.loc 1 1131 3 view .LVU231
1133:../freertos/tasks.c **** 
 848              		.loc 1 1133 2 view .LVU232
 849 0218 FFF7FEFF 		bl	vPortExitCritical		@
 850              	.LVL60:
1135:../freertos/tasks.c **** 	{
 851              		.loc 1 1135 2 view .LVU233
 852              	@ ../freertos/tasks.c:1135: 	if( xSchedulerRunning != pdFALSE )
1135:../freertos/tasks.c **** 	{
 853              		.loc 1 1135 24 is_stmt 0 view .LVU234
 854 021c D5F8E830 		ldr	r3, [r5, #232]	@ xSchedulerRunning.9_37, xSchedulerRunning
 855              	@ ../freertos/tasks.c:1135: 	if( xSchedulerRunning != pdFALSE )
1135:../freertos/tasks.c **** 	{
 856              		.loc 1 1135 4 view .LVU235
 857 0220 73B1     		cbz	r3, .L27	@ xSchedulerRunning.9_37,
1139:../freertos/tasks.c **** 		{
 858              		.loc 1 1139 3 is_stmt 1 view .LVU236
 859              	@ ../freertos/tasks.c:1139: 		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
1139:../freertos/tasks.c **** 		{
 860              		.loc 1 1139 19 is_stmt 0 view .LVU237
 861 0222 6B68     		ldr	r3, [r5, #4]	@ pxCurrentTCB.10_38, pxCurrentTCB
 862              	@ ../freertos/tasks.c:1139: 		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
1139:../freertos/tasks.c **** 		{
ARM GAS  /tmp/ccaP1CVS.s 			page 111


 863              		.loc 1 1139 5 view .LVU238
 864 0224 DA6A     		ldr	r2, [r3, #44]	@ pxCurrentTCB.10_38->uxPriority, pxCurrentTCB.10_38->uxPriority
 865 0226 E36A     		ldr	r3, [r4, #44]	@ pxNewTCB_11->uxPriority, pxNewTCB_11->uxPriority
 866 0228 9A42     		cmp	r2, r3	@ pxCurrentTCB.10_38->uxPriority, pxNewTCB_11->uxPriority
 867 022a 09D2     		bcs	.L27		@,
1141:../freertos/tasks.c **** 		}
 868              		.loc 1 1141 4 is_stmt 1 view .LVU239
 869 022c 4FF0E023 		mov	r3, #-536813568	@ tmp224,
 870 0230 4FF08052 		mov	r2, #268435456	@ tmp225,
 871 0234 C3F8042D 		str	r2, [r3, #3332]	@ tmp225, MEM[(volatile uint32_t *)3758157060B]
 872              	.LVL61:
1141:../freertos/tasks.c **** 		}
 873              		.loc 1 1141 4 view .LVU240
 874              		.syntax unified
 875              	@ 1141 "../freertos/tasks.c" 1
 876 0238 BFF34F8F 		dsb	
 877              	@ 0 "" 2
1141:../freertos/tasks.c **** 		}
 878              		.loc 1 1141 4 view .LVU241
 879              	@ 1141 "../freertos/tasks.c" 1
 880 023c BFF36F8F 		isb
 881              	@ 0 "" 2
1141:../freertos/tasks.c **** 		}
 882              		.loc 1 1141 35 view .LVU242
 883              	.LVL62:
 884              		.thumb
 885              		.syntax unified
 886              	.L27:
1141:../freertos/tasks.c **** 		}
 887              		.loc 1 1141 35 is_stmt 0 view .LVU243
 888              	.LBE65:
 889              	.LBE64:
 890              	@ ../freertos/tasks.c:816: 	}
 816:../freertos/tasks.c **** 
 891              		.loc 1 816 2 view .LVU244
 892 0240 3046     		mov	r0, r6	@, <retval>
 893 0242 BDE8F88F 		pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 894              	.LVL63:
 895              	.L36:
 896              	.LBB69:
 897              	.LBB68:
1102:../freertos/tasks.c **** 			{
 898              		.loc 1 1102 4 is_stmt 1 view .LVU245
 899              	@ ../freertos/tasks.c:1102: 			if( xSchedulerRunning == pdFALSE )
1102:../freertos/tasks.c **** 			{
 900              		.loc 1 1102 26 is_stmt 0 view .LVU246
 901 0246 D5F8E830 		ldr	r3, [r5, #232]	@ xSchedulerRunning.4_25, xSchedulerRunning
 902              	@ ../freertos/tasks.c:1102: 			if( xSchedulerRunning == pdFALSE )
1102:../freertos/tasks.c **** 			{
 903              		.loc 1 1102 6 view .LVU247
 904 024a 002B     		cmp	r3, #0	@ xSchedulerRunning.4_25
 905 024c D1D1     		bne	.L38	@
1104:../freertos/tasks.c **** 				{
 906              		.loc 1 1104 5 is_stmt 1 view .LVU248
 907              	@ ../freertos/tasks.c:1104: 				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
1104:../freertos/tasks.c **** 				{
 908              		.loc 1 1104 21 is_stmt 0 view .LVU249
ARM GAS  /tmp/ccaP1CVS.s 			page 112


 909 024e 6B68     		ldr	r3, [r5, #4]	@ pxCurrentTCB.5_26, pxCurrentTCB
 910              	@ ../freertos/tasks.c:1104: 				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
1104:../freertos/tasks.c **** 				{
 911              		.loc 1 1104 7 view .LVU250
 912 0250 E26A     		ldr	r2, [r4, #44]	@ pxNewTCB_11->uxPriority, pxNewTCB_11->uxPriority
 913 0252 DB6A     		ldr	r3, [r3, #44]	@ pxCurrentTCB.5_26->uxPriority, pxCurrentTCB.5_26->uxPriority
 914 0254 9A42     		cmp	r2, r3	@ pxNewTCB_11->uxPriority, pxCurrentTCB.5_26->uxPriority
1106:../freertos/tasks.c **** 				}
 915              		.loc 1 1106 6 is_stmt 1 view .LVU251
 916              	@ ../freertos/tasks.c:1106: 					pxCurrentTCB = pxNewTCB;
1106:../freertos/tasks.c **** 				}
 917              		.loc 1 1106 19 is_stmt 0 view .LVU252
 918 0256 28BF     		it	cs
 919 0258 6C60     		strcs	r4, [r5, #4]	@ pxNewTCB, pxCurrentTCB
 920 025a CAE7     		b	.L38		@
 921              	.L54:
 922              		.align	2
 923              	.L53:
 924 025c 00000000 		.word	.LANCHOR0
 925 0260 AC000000 		.word	.LANCHOR0+172
 926              	.LBE68:
 927              	.LBE69:
 928              		.cfi_endproc
 929              	.LFE5:
 930              		.size	xTaskCreate, .-xTaskCreate
 931              		.align	1
 932              		.global	vTaskDelete
 933              		.syntax unified
 934              		.thumb
 935              		.thumb_func
 936              		.type	vTaskDelete, %function
 937              	vTaskDelete:
 938              	.LVL64:
 939              	.LFB8:
1158:../freertos/tasks.c **** 	TCB_t *pxTCB;
 940              		.loc 1 1158 2 is_stmt 1 view -0
 941              		.cfi_startproc
 942              		@ args = 0, pretend = 0, frame = 0
 943              		@ frame_needed = 0, uses_anonymous_args = 0
1159:../freertos/tasks.c **** 
 944              		.loc 1 1159 2 view .LVU254
1161:../freertos/tasks.c **** 		{
 945              		.loc 1 1161 3 view .LVU255
 946              	@ ../freertos/tasks.c:1158: 	{
1158:../freertos/tasks.c **** 	TCB_t *pxTCB;
 947              		.loc 1 1158 2 is_stmt 0 view .LVU256
 948 0264 70B5     		push	{r4, r5, r6, lr}	@
 949              	.LCFI7:
 950              		.cfi_def_cfa_offset 16
 951              		.cfi_offset 4, -16
 952              		.cfi_offset 5, -12
 953              		.cfi_offset 6, -8
 954              		.cfi_offset 14, -4
 955              	@ ../freertos/tasks.c:1158: 	{
1158:../freertos/tasks.c **** 	TCB_t *pxTCB;
 956              		.loc 1 1158 2 view .LVU257
 957 0266 0546     		mov	r5, r0	@ xTaskToDelete, tmp163
ARM GAS  /tmp/ccaP1CVS.s 			page 113


 958 0268 244C     		ldr	r4, .L68	@ tmp162,
 959              	@ ../freertos/tasks.c:1161: 		taskENTER_CRITICAL();
1161:../freertos/tasks.c **** 		{
 960              		.loc 1 1161 3 view .LVU258
 961 026a FFF7FEFF 		bl	vPortEnterCritical		@
 962              	.LVL65:
1165:../freertos/tasks.c **** 
 963              		.loc 1 1165 4 is_stmt 1 view .LVU259
 964              	@ ../freertos/tasks.c:1165: 			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
1165:../freertos/tasks.c **** 
 965              		.loc 1 1165 12 is_stmt 0 view .LVU260
 966 026e 05B9     		cbnz	r5, .L56	@ xTaskToDelete,
 967              	@ ../freertos/tasks.c:1165: 			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
1165:../freertos/tasks.c **** 
 968              		.loc 1 1165 12 discriminator 1 view .LVU261
 969 0270 6568     		ldr	r5, [r4, #4]	@ xTaskToDelete, pxCurrentTCB
 970              	.LVL66:
 971              	.L56:
1168:../freertos/tasks.c **** 			{
 972              		.loc 1 1168 4 is_stmt 1 discriminator 4 view .LVU262
 973              	@ ../freertos/tasks.c:1168: 			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 
1168:../freertos/tasks.c **** 			{
 974              		.loc 1 1168 8 is_stmt 0 discriminator 4 view .LVU263
 975 0272 2E1D     		adds	r6, r5, #4	@ _1, xTaskToDelete,
 976 0274 3046     		mov	r0, r6	@, _1
 977 0276 FFF7FEFF 		bl	uxListRemove		@
 978              	.LVL67:
 979              	@ ../freertos/tasks.c:1168: 			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 
1168:../freertos/tasks.c **** 			{
 980              		.loc 1 1168 6 discriminator 4 view .LVU264
 981 027a 58B9     		cbnz	r0, .L57	@ tmp164,
1170:../freertos/tasks.c **** 			}
 982              		.loc 1 1170 5 is_stmt 1 view .LVU265
 983 027c 1420     		movs	r0, #20	@ tmp137,
 984 027e E96A     		ldr	r1, [r5, #44]	@ _3, iftmp.11_20->uxPriority
 985 0280 00FB0140 		mla	r0, r0, r1, r4	@ tmp138, tmp137, _3, tmp162
 986 0284 836C     		ldr	r3, [r0, #72]	@ _4, pxReadyTasksLists[_3].uxNumberOfItems
 987 0286 2BB9     		cbnz	r3, .L57	@ _4,
1170:../freertos/tasks.c **** 			}
 988              		.loc 1 1170 5 discriminator 1 view .LVU266
 989 0288 0122     		movs	r2, #1	@ tmp142,
 990 028a A368     		ldr	r3, [r4, #8]	@ uxTopReadyPriority.12_7, uxTopReadyPriority
 991 028c 8A40     		lsls	r2, r2, r1	@ tmp141, tmp142, _3
 992 028e 23EA0203 		bic	r3, r3, r2	@ _8, uxTopReadyPriority.12_7, tmp141
 993 0292 A360     		str	r3, [r4, #8]	@ _8, uxTopReadyPriority
 994              	.L57:
1174:../freertos/tasks.c **** 			}
 995              		.loc 1 1174 29 view .LVU267
1178:../freertos/tasks.c **** 			{
 996              		.loc 1 1178 4 view .LVU268
 997              	@ ../freertos/tasks.c:1178: 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1178:../freertos/tasks.c **** 			{
 998              		.loc 1 1178 6 is_stmt 0 view .LVU269
 999 0294 AB6A     		ldr	r3, [r5, #40]	@ iftmp.11_20->xEventListItem.pvContainer, iftmp.11_20->xEventListItem.pvContain
 1000 0296 1BB1     		cbz	r3, .L58	@ iftmp.11_20->xEventListItem.pvContainer,
1180:../freertos/tasks.c **** 			}
 1001              		.loc 1 1180 5 is_stmt 1 view .LVU270
ARM GAS  /tmp/ccaP1CVS.s 			page 114


 1002              	@ ../freertos/tasks.c:1180: 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1180:../freertos/tasks.c **** 			}
 1003              		.loc 1 1180 14 is_stmt 0 view .LVU271
 1004 0298 05F11800 		add	r0, r5, #24	@, xTaskToDelete,
 1005 029c FFF7FEFF 		bl	uxListRemove		@
 1006              	.LVL68:
 1007              	.L58:
1184:../freertos/tasks.c **** 			}
 1008              		.loc 1 1184 29 is_stmt 1 view .LVU272
1191:../freertos/tasks.c **** 
 1009              		.loc 1 1191 4 view .LVU273
 1010              	@ ../freertos/tasks.c:1191: 			uxTaskNumber++;
1191:../freertos/tasks.c **** 
 1011              		.loc 1 1191 16 is_stmt 0 view .LVU274
 1012 02a0 D4F8EC30 		ldr	r3, [r4, #236]	@ uxTaskNumber, uxTaskNumber
 1013 02a4 0133     		adds	r3, r3, #1	@ tmp149, uxTaskNumber,
 1014 02a6 C4F8EC30 		str	r3, [r4, #236]	@ tmp149, uxTaskNumber
1193:../freertos/tasks.c **** 			{
 1015              		.loc 1 1193 4 is_stmt 1 view .LVU275
 1016              	@ ../freertos/tasks.c:1193: 			if( pxTCB == pxCurrentTCB )
1193:../freertos/tasks.c **** 			{
 1017              		.loc 1 1193 14 is_stmt 0 view .LVU276
 1018 02aa 6368     		ldr	r3, [r4, #4]	@ pxCurrentTCB.14_13, pxCurrentTCB
 1019              	@ ../freertos/tasks.c:1193: 			if( pxTCB == pxCurrentTCB )
1193:../freertos/tasks.c **** 			{
 1020              		.loc 1 1193 6 view .LVU277
 1021 02ac AB42     		cmp	r3, r5	@ pxCurrentTCB.14_13, xTaskToDelete
 1022 02ae 19D1     		bne	.L59		@,
1200:../freertos/tasks.c **** 
 1023              		.loc 1 1200 5 is_stmt 1 view .LVU278
 1024 02b0 3146     		mov	r1, r6	@, _1
 1025 02b2 1348     		ldr	r0, .L68+4	@,
 1026 02b4 FFF7FEFF 		bl	vListInsertEnd		@
 1027              	.LVL69:
1205:../freertos/tasks.c **** 
 1028              		.loc 1 1205 5 view .LVU279
 1029 02b8 636C     		ldr	r3, [r4, #68]	@ uxDeletedTasksWaitingCleanUp.15_14, uxDeletedTasksWaitingCleanUp
 1030 02ba 0133     		adds	r3, r3, #1	@ _15, uxDeletedTasksWaitingCleanUp.15_14,
 1031 02bc 6364     		str	r3, [r4, #68]	@ _15, uxDeletedTasksWaitingCleanUp
1212:../freertos/tasks.c **** 			}
 1032              		.loc 1 1212 54 view .LVU280
 1033              	.L60:
1224:../freertos/tasks.c **** 		}
 1034              		.loc 1 1224 29 view .LVU281
1226:../freertos/tasks.c **** 
 1035              		.loc 1 1226 3 view .LVU282
 1036 02be FFF7FEFF 		bl	vPortExitCritical		@
 1037              	.LVL70:
1230:../freertos/tasks.c **** 		{
 1038              		.loc 1 1230 3 view .LVU283
 1039              	@ ../freertos/tasks.c:1230: 		if( xSchedulerRunning != pdFALSE )
1230:../freertos/tasks.c **** 		{
 1040              		.loc 1 1230 25 is_stmt 0 view .LVU284
 1041 02c2 D4F8E830 		ldr	r3, [r4, #232]	@ xSchedulerRunning.17_18, xSchedulerRunning
 1042              	@ ../freertos/tasks.c:1230: 		if( xSchedulerRunning != pdFALSE )
1230:../freertos/tasks.c **** 		{
 1043              		.loc 1 1230 5 view .LVU285
ARM GAS  /tmp/ccaP1CVS.s 			page 115


 1044 02c6 63B1     		cbz	r3, .L55	@ xSchedulerRunning.17_18,
1232:../freertos/tasks.c **** 			{
 1045              		.loc 1 1232 4 is_stmt 1 view .LVU286
 1046              	@ ../freertos/tasks.c:1232: 			if( pxTCB == pxCurrentTCB )
1232:../freertos/tasks.c **** 			{
 1047              		.loc 1 1232 14 is_stmt 0 view .LVU287
 1048 02c8 6368     		ldr	r3, [r4, #4]	@ pxCurrentTCB.18_19, pxCurrentTCB
 1049              	@ ../freertos/tasks.c:1232: 			if( pxTCB == pxCurrentTCB )
1232:../freertos/tasks.c **** 			{
 1050              		.loc 1 1232 6 view .LVU288
 1051 02ca AB42     		cmp	r3, r5	@ pxCurrentTCB.18_19, xTaskToDelete
 1052 02cc 09D1     		bne	.L55		@,
1234:../freertos/tasks.c **** 				portYIELD_WITHIN_API();
 1053              		.loc 1 1234 46 is_stmt 1 view .LVU289
1235:../freertos/tasks.c **** 			}
 1054              		.loc 1 1235 5 view .LVU290
 1055 02ce 4FF0E023 		mov	r3, #-536813568	@ tmp160,
 1056 02d2 4FF08052 		mov	r2, #268435456	@ tmp161,
 1057 02d6 C3F8042D 		str	r2, [r3, #3332]	@ tmp161, MEM[(volatile uint32_t *)3758157060B]
1235:../freertos/tasks.c **** 			}
 1058              		.loc 1 1235 5 view .LVU291
 1059              		.syntax unified
 1060              	@ 1235 "../freertos/tasks.c" 1
 1061 02da BFF34F8F 		dsb	
 1062              	@ 0 "" 2
1235:../freertos/tasks.c **** 			}
 1063              		.loc 1 1235 5 view .LVU292
 1064              	@ 1235 "../freertos/tasks.c" 1
 1065 02de BFF36F8F 		isb
 1066              	@ 0 "" 2
1235:../freertos/tasks.c **** 			}
 1067              		.loc 1 1235 27 view .LVU293
1239:../freertos/tasks.c **** 			}
 1068              		.loc 1 1239 29 view .LVU294
 1069              		.thumb
 1070              		.syntax unified
 1071              	.L55:
 1072              	@ ../freertos/tasks.c:1242: 	}
1242:../freertos/tasks.c **** 
 1073              		.loc 1 1242 2 is_stmt 0 view .LVU295
 1074 02e2 70BD     		pop	{r4, r5, r6, pc}	@
 1075              	.LVL71:
 1076              	.L59:
1216:../freertos/tasks.c **** 				prvDeleteTCB( pxTCB );
 1077              		.loc 1 1216 5 is_stmt 1 view .LVU296
 1078 02e4 236C     		ldr	r3, [r4, #64]	@ uxCurrentNumberOfTasks.16_16, uxCurrentNumberOfTasks
 1079              	.LBB72:
 1080              	.LBB73:
 1081              	@ ../freertos/tasks.c:3845: 			vPortFree( pxTCB->pxStack );
3845:../freertos/tasks.c **** 			vPortFree( pxTCB );
 1082              		.loc 1 3845 4 is_stmt 0 view .LVU297
 1083 02e6 286B     		ldr	r0, [r5, #48]	@, iftmp.11_20->pxStack
 1084              	.LBE73:
 1085              	.LBE72:
 1086              	@ ../freertos/tasks.c:1216: 				--uxCurrentNumberOfTasks;
1216:../freertos/tasks.c **** 				prvDeleteTCB( pxTCB );
 1087              		.loc 1 1216 5 view .LVU298
ARM GAS  /tmp/ccaP1CVS.s 			page 116


 1088 02e8 013B     		subs	r3, r3, #1	@ _17, uxCurrentNumberOfTasks.16_16,
 1089 02ea 2364     		str	r3, [r4, #64]	@ _17, uxCurrentNumberOfTasks
1217:../freertos/tasks.c **** 
 1090              		.loc 1 1217 5 is_stmt 1 view .LVU299
 1091              	.LVL72:
 1092              	.LBB75:
 1093              	.LBI72:
3826:../freertos/tasks.c **** 	{
 1094              		.loc 1 3826 14 view .LVU300
 1095              	.LBB74:
3831:../freertos/tasks.c **** 
 1096              		.loc 1 3831 3 view .LVU301
3845:../freertos/tasks.c **** 			vPortFree( pxTCB );
 1097              		.loc 1 3845 4 view .LVU302
 1098 02ec FFF7FEFF 		bl	vPortFree		@
 1099              	.LVL73:
3846:../freertos/tasks.c **** 		}
 1100              		.loc 1 3846 4 view .LVU303
 1101 02f0 2846     		mov	r0, r5	@, xTaskToDelete
 1102 02f2 FFF7FEFF 		bl	vPortFree		@
 1103              	.LVL74:
3846:../freertos/tasks.c **** 		}
 1104              		.loc 1 3846 4 is_stmt 0 view .LVU304
 1105              	.LBE74:
 1106              	.LBE75:
1221:../freertos/tasks.c **** 			}
 1107              		.loc 1 1221 5 is_stmt 1 view .LVU305
 1108 02f6 FFF7B9FE 		bl	prvResetNextTaskUnblockTime		@
 1109              	.LVL75:
 1110 02fa E0E7     		b	.L60		@
 1111              	.L69:
 1112              		.align	2
 1113              	.L68:
 1114 02fc 00000000 		.word	.LANCHOR0
 1115 0300 2C000000 		.word	.LANCHOR0+44
 1116              		.cfi_endproc
 1117              	.LFE8:
 1118              		.size	vTaskDelete, .-vTaskDelete
 1119              		.align	1
 1120              		.global	eTaskGetState
 1121              		.syntax unified
 1122              		.thumb
 1123              		.thumb_func
 1124              		.type	eTaskGetState, %function
 1125              	eTaskGetState:
 1126              	.LVL76:
 1127              	.LFB11:
1379:../freertos/tasks.c **** 	eTaskState eReturn;
 1128              		.loc 1 1379 2 view -0
 1129              		.cfi_startproc
 1130              		@ args = 0, pretend = 0, frame = 0
 1131              		@ frame_needed = 0, uses_anonymous_args = 0
1380:../freertos/tasks.c **** 	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
 1132              		.loc 1 1380 2 view .LVU307
1381:../freertos/tasks.c **** 	const TCB_t * const pxTCB = xTask;
 1133              		.loc 1 1381 2 view .LVU308
1382:../freertos/tasks.c **** 
ARM GAS  /tmp/ccaP1CVS.s 			page 117


 1134              		.loc 1 1382 2 view .LVU309
1384:../freertos/tasks.c **** 
 1135              		.loc 1 1384 24 view .LVU310
1386:../freertos/tasks.c **** 		{
 1136              		.loc 1 1386 3 view .LVU311
 1137              	@ ../freertos/tasks.c:1379: 	{
1379:../freertos/tasks.c **** 	eTaskState eReturn;
 1138              		.loc 1 1379 2 is_stmt 0 view .LVU312
 1139 0304 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}	@
 1140              	.LCFI8:
 1141              		.cfi_def_cfa_offset 24
 1142              		.cfi_offset 4, -24
 1143              		.cfi_offset 5, -20
 1144              		.cfi_offset 6, -16
 1145              		.cfi_offset 7, -12
 1146              		.cfi_offset 8, -8
 1147              		.cfi_offset 14, -4
 1148              	@ ../freertos/tasks.c:1386: 		if( pxTCB == pxCurrentTCB )
1386:../freertos/tasks.c **** 		{
 1149              		.loc 1 1386 13 view .LVU313
 1150 0308 164C     		ldr	r4, .L80	@ tmp121,
 1151              	@ ../freertos/tasks.c:1379: 	{
1379:../freertos/tasks.c **** 	eTaskState eReturn;
 1152              		.loc 1 1379 2 view .LVU314
 1153 030a 0546     		mov	r5, r0	@ xTask, tmp133
 1154              	@ ../freertos/tasks.c:1386: 		if( pxTCB == pxCurrentTCB )
1386:../freertos/tasks.c **** 		{
 1155              		.loc 1 1386 13 view .LVU315
 1156 030c 6368     		ldr	r3, [r4, #4]	@ pxCurrentTCB.31_1, pxCurrentTCB
 1157              	@ ../freertos/tasks.c:1386: 		if( pxTCB == pxCurrentTCB )
1386:../freertos/tasks.c **** 		{
 1158              		.loc 1 1386 5 view .LVU316
 1159 030e 8342     		cmp	r3, r0	@ pxCurrentTCB.31_1, xTask
 1160 0310 21D0     		beq	.L73		@,
1393:../freertos/tasks.c **** 			{
 1161              		.loc 1 1393 4 is_stmt 1 view .LVU317
 1162 0312 FFF7FEFF 		bl	vPortEnterCritical		@
 1163              	.LVL77:
1395:../freertos/tasks.c **** 				pxDelayedList = pxDelayedTaskList;
 1164              		.loc 1 1395 5 view .LVU318
 1165              	@ ../freertos/tasks.c:1396: 				pxDelayedList = pxDelayedTaskList;
1396:../freertos/tasks.c **** 				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 1166              		.loc 1 1396 19 is_stmt 0 view .LVU319
 1167 0316 D4F82480 		ldr	r8, [r4, #36]	@ pxDelayedList, pxDelayedTaskList
 1168              	@ ../freertos/tasks.c:1395: 				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) )
1395:../freertos/tasks.c **** 				pxDelayedList = pxDelayedTaskList;
 1169              		.loc 1 1395 17 view .LVU320
 1170 031a 6E69     		ldr	r6, [r5, #20]	@ pxStateList, MEM[(const struct TCB_t *)xTask_3(D)].xStateListItem.pvContainer
 1171              	.LVL78:
1396:../freertos/tasks.c **** 				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 1172              		.loc 1 1396 5 is_stmt 1 view .LVU321
1397:../freertos/tasks.c **** 			}
 1173              		.loc 1 1397 5 view .LVU322
 1174              	@ ../freertos/tasks.c:1397: 				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
1397:../freertos/tasks.c **** 			}
 1175              		.loc 1 1397 29 is_stmt 0 view .LVU323
 1176 031c 276A     		ldr	r7, [r4, #32]	@ pxOverflowedDelayedList, pxOverflowDelayedTaskList
ARM GAS  /tmp/ccaP1CVS.s 			page 118


 1177              	.LVL79:
1399:../freertos/tasks.c **** 
 1178              		.loc 1 1399 4 is_stmt 1 view .LVU324
 1179 031e FFF7FEFF 		bl	vPortExitCritical		@
 1180              	.LVL80:
1401:../freertos/tasks.c **** 			{
 1181              		.loc 1 1401 4 view .LVU325
 1182              	@ ../freertos/tasks.c:1401: 			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowe
1401:../freertos/tasks.c **** 			{
 1183              		.loc 1 1401 6 is_stmt 0 view .LVU326
 1184 0322 4645     		cmp	r6, r8	@ pxStateList, pxDelayedList
 1185 0324 19D0     		beq	.L76		@,
 1186              	@ ../freertos/tasks.c:1401: 			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowe
1401:../freertos/tasks.c **** 			{
 1187              		.loc 1 1401 41 discriminator 1 view .LVU327
 1188 0326 BE42     		cmp	r6, r7	@ pxStateList, pxOverflowedDelayedList
 1189 0328 17D0     		beq	.L76		@,
1409:../freertos/tasks.c **** 				{
 1190              		.loc 1 1409 10 is_stmt 1 view .LVU328
 1191              	@ ../freertos/tasks.c:1409: 				else if( pxStateList == &xSuspendedTaskList )
1409:../freertos/tasks.c **** 				{
 1192              		.loc 1 1409 12 is_stmt 0 view .LVU329
 1193 032a 04F10C03 		add	r3, r4, #12	@ tmp125, tmp121,
 1194 032e 9E42     		cmp	r6, r3	@ pxStateList, tmp125
 1195 0330 09D1     		bne	.L72		@,
 1196              	.LVL81:
 1197              	.LBB78:
 1198              	.LBI78:
1378:../freertos/tasks.c **** 	{
 1199              		.loc 1 1378 13 is_stmt 1 view .LVU330
 1200              	.LBB79:
1414:../freertos/tasks.c **** 					{
 1201              		.loc 1 1414 6 view .LVU331
 1202              	@ ../freertos/tasks.c:1414: 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL 
1414:../freertos/tasks.c **** 					{
 1203              		.loc 1 1414 8 is_stmt 0 view .LVU332
 1204 0332 AB6A     		ldr	r3, [r5, #40]	@ MEM[(const struct TCB_t *)xTask_3(D)].xEventListItem.pvContainer, MEM[(const s
 1205 0334 8BB9     		cbnz	r3, .L76	@ MEM[(const struct TCB_t *)xTask_3(D)].xEventListItem.pvContainer,
1422:../freertos/tasks.c **** 							{
 1206              		.loc 1 1422 8 is_stmt 1 view .LVU333
 1207              	@ ../freertos/tasks.c:1422: 							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
1422:../freertos/tasks.c **** 							{
 1208              		.loc 1 1422 17 is_stmt 0 view .LVU334
 1209 0336 95F85830 		ldrb	r3, [r5, #88]	@ zero_extendqisi2	@ MEM[(const struct TCB_t *)xTask_3(D)].ucNotifyState, MEM[(
 1210              	@ ../freertos/tasks.c:1428: 								eReturn = eSuspended;
1428:../freertos/tasks.c **** 							}
 1211              		.loc 1 1428 17 view .LVU335
 1212 033a 012B     		cmp	r3, #1	@ MEM[(const struct TCB_t *)xTask_3(D)].ucNotifyState,
 1213 033c 0CBF     		ite	eq
 1214 033e 0220     		moveq	r0, #2	@ <retval>,
 1215 0340 0320     		movne	r0, #3	@ <retval>,
 1216              	.LVL82:
 1217              	.L71:
1428:../freertos/tasks.c **** 							}
 1218              		.loc 1 1428 17 view .LVU336
 1219              	.LBE79:
 1220              	.LBE78:
ARM GAS  /tmp/ccaP1CVS.s 			page 119


1462:../freertos/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 1221              		.loc 1 1462 3 is_stmt 1 view .LVU337
 1222              	@ ../freertos/tasks.c:1463: 	} /*lint !e818 xTask cannot be a pointer to const because it is a type
1463:../freertos/tasks.c **** 
 1223              		.loc 1 1463 2 is_stmt 0 view .LVU338
 1224 0342 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}	@
 1225              	.LVL83:
 1226              	.L72:
1445:../freertos/tasks.c **** 				{
 1227              		.loc 1 1445 10 is_stmt 1 view .LVU339
 1228              	@ ../freertos/tasks.c:1445: 				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateL
1445:../freertos/tasks.c **** 				{
 1229              		.loc 1 1445 12 is_stmt 0 view .LVU340
 1230 0346 2C34     		adds	r4, r4, #44	@ tmp131, tmp121,
 1231 0348 A642     		cmp	r6, r4	@ pxStateList, tmp131
 1232 034a 08D0     		beq	.L78		@,
 1233              	@ ../freertos/tasks.c:1458: 				eReturn = eReady;
1458:../freertos/tasks.c **** 			}
 1234              		.loc 1 1458 13 discriminator 1 view .LVU341
 1235 034c 002E     		cmp	r6, #0	@ pxStateList,
 1236 034e 0CBF     		ite	eq
 1237 0350 0420     		moveq	r0, #4	@ <retval>,
 1238 0352 0120     		movne	r0, #1	@ <retval>,
 1239 0354 F5E7     		b	.L71		@
 1240              	.LVL84:
 1241              	.L73:
 1242              	@ ../freertos/tasks.c:1389: 			eReturn = eRunning;
1389:../freertos/tasks.c **** 		}
 1243              		.loc 1 1389 12 view .LVU342
 1244 0356 0020     		movs	r0, #0	@ <retval>,
 1245              	.LVL85:
1389:../freertos/tasks.c **** 		}
 1246              		.loc 1 1389 12 view .LVU343
 1247 0358 F3E7     		b	.L71		@
 1248              	.LVL86:
 1249              	.L76:
 1250              	@ ../freertos/tasks.c:1405: 				eReturn = eBlocked;
1405:../freertos/tasks.c **** 			}
 1251              		.loc 1 1405 13 view .LVU344
 1252 035a 0220     		movs	r0, #2	@ <retval>,
 1253 035c F1E7     		b	.L71		@
 1254              	.L78:
 1255              	@ ../freertos/tasks.c:1450: 					eReturn = eDeleted;
1450:../freertos/tasks.c **** 				}
 1256              		.loc 1 1450 14 view .LVU345
 1257 035e 0420     		movs	r0, #4	@ <retval>,
 1258 0360 EFE7     		b	.L71		@
 1259              	.L81:
 1260 0362 00BF     		.align	2
 1261              	.L80:
 1262 0364 00000000 		.word	.LANCHOR0
 1263              		.cfi_endproc
 1264              	.LFE11:
 1265              		.size	eTaskGetState, .-eTaskGetState
 1266              		.align	1
 1267              		.global	uxTaskPriorityGet
 1268              		.syntax unified
ARM GAS  /tmp/ccaP1CVS.s 			page 120


 1269              		.thumb
 1270              		.thumb_func
 1271              		.type	uxTaskPriorityGet, %function
 1272              	uxTaskPriorityGet:
 1273              	.LVL87:
 1274              	.LFB12:
1471:../freertos/tasks.c **** 	TCB_t const *pxTCB;
 1275              		.loc 1 1471 2 is_stmt 1 view -0
 1276              		.cfi_startproc
 1277              		@ args = 0, pretend = 0, frame = 0
 1278              		@ frame_needed = 0, uses_anonymous_args = 0
1472:../freertos/tasks.c **** 	UBaseType_t uxReturn;
 1279              		.loc 1 1472 2 view .LVU347
1473:../freertos/tasks.c **** 
 1280              		.loc 1 1473 2 view .LVU348
1475:../freertos/tasks.c **** 		{
 1281              		.loc 1 1475 3 view .LVU349
 1282              	@ ../freertos/tasks.c:1471: 	{
1471:../freertos/tasks.c **** 	TCB_t const *pxTCB;
 1283              		.loc 1 1471 2 is_stmt 0 view .LVU350
 1284 0368 10B5     		push	{r4, lr}	@
 1285              	.LCFI9:
 1286              		.cfi_def_cfa_offset 8
 1287              		.cfi_offset 4, -8
 1288              		.cfi_offset 14, -4
 1289              	@ ../freertos/tasks.c:1471: 	{
1471:../freertos/tasks.c **** 	TCB_t const *pxTCB;
 1290              		.loc 1 1471 2 view .LVU351
 1291 036a 0446     		mov	r4, r0	@ xTask, tmp117
 1292              	@ ../freertos/tasks.c:1475: 		taskENTER_CRITICAL();
1475:../freertos/tasks.c **** 		{
 1293              		.loc 1 1475 3 view .LVU352
 1294 036c FFF7FEFF 		bl	vPortEnterCritical		@
 1295              	.LVL88:
1479:../freertos/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1296              		.loc 1 1479 4 is_stmt 1 view .LVU353
 1297              	@ ../freertos/tasks.c:1479: 			pxTCB = prvGetTCBFromHandle( xTask );
1479:../freertos/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1298              		.loc 1 1479 12 is_stmt 0 view .LVU354
 1299 0370 0CB9     		cbnz	r4, .L83	@ xTask,
 1300              	@ ../freertos/tasks.c:1479: 			pxTCB = prvGetTCBFromHandle( xTask );
1479:../freertos/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1301              		.loc 1 1479 12 discriminator 1 view .LVU355
 1302 0372 034B     		ldr	r3, .L84	@ tmp115,
 1303 0374 5C68     		ldr	r4, [r3, #4]	@ xTask, pxCurrentTCB
 1304              	.LVL89:
 1305              	.L83:
1480:../freertos/tasks.c **** 		}
 1306              		.loc 1 1480 4 is_stmt 1 discriminator 4 view .LVU356
 1307              	@ ../freertos/tasks.c:1480: 			uxReturn = pxTCB->uxPriority;
1480:../freertos/tasks.c **** 		}
 1308              		.loc 1 1480 13 is_stmt 0 discriminator 4 view .LVU357
 1309 0376 E46A     		ldr	r4, [r4, #44]	@ <retval>, iftmp.32_1->uxPriority
 1310              	.LVL90:
1482:../freertos/tasks.c **** 
 1311              		.loc 1 1482 3 is_stmt 1 discriminator 4 view .LVU358
 1312 0378 FFF7FEFF 		bl	vPortExitCritical		@
ARM GAS  /tmp/ccaP1CVS.s 			page 121


 1313              	.LVL91:
1484:../freertos/tasks.c **** 	}
 1314              		.loc 1 1484 3 discriminator 4 view .LVU359
 1315              	@ ../freertos/tasks.c:1485: 	}
1485:../freertos/tasks.c **** 
 1316              		.loc 1 1485 2 is_stmt 0 discriminator 4 view .LVU360
 1317 037c 2046     		mov	r0, r4	@, <retval>
 1318 037e 10BD     		pop	{r4, pc}	@
 1319              	.LVL92:
 1320              	.L85:
1485:../freertos/tasks.c **** 
 1321              		.loc 1 1485 2 discriminator 4 view .LVU361
 1322              		.align	2
 1323              	.L84:
 1324 0380 00000000 		.word	.LANCHOR0
 1325              		.cfi_endproc
 1326              	.LFE12:
 1327              		.size	uxTaskPriorityGet, .-uxTaskPriorityGet
 1328              		.align	1
 1329              		.global	uxTaskPriorityGetFromISR
 1330              		.syntax unified
 1331              		.thumb
 1332              		.thumb_func
 1333              		.type	uxTaskPriorityGetFromISR, %function
 1334              	uxTaskPriorityGetFromISR:
 1335              	.LVL93:
 1336              	.LFB13:
1493:../freertos/tasks.c **** 	TCB_t const *pxTCB;
 1337              		.loc 1 1493 2 is_stmt 1 view -0
 1338              		.cfi_startproc
 1339              		@ args = 0, pretend = 0, frame = 0
 1340              		@ frame_needed = 0, uses_anonymous_args = 0
 1341              		@ link register save eliminated.
1494:../freertos/tasks.c **** 	UBaseType_t uxReturn, uxSavedInterruptState;
 1342              		.loc 1 1494 2 view .LVU363
1495:../freertos/tasks.c **** 
 1343              		.loc 1 1495 2 view .LVU364
1513:../freertos/tasks.c **** 
 1344              		.loc 1 1513 45 view .LVU365
1515:../freertos/tasks.c **** 		{
 1345              		.loc 1 1515 3 view .LVU366
 1346              	.LBB80:
 1347              	.LBI80:
 1348              		.file 2 "../freertos/portable/GCC/ARM_CM3/portmacro.h"
   1:../freertos/portable/GCC/ARM_CM3/portmacro.h **** /*
   2:../freertos/portable/GCC/ARM_CM3/portmacro.h ****  * FreeRTOS Kernel V10.2.1
   3:../freertos/portable/GCC/ARM_CM3/portmacro.h ****  * Copyright (C) 2019 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:../freertos/portable/GCC/ARM_CM3/portmacro.h ****  *
   5:../freertos/portable/GCC/ARM_CM3/portmacro.h ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:../freertos/portable/GCC/ARM_CM3/portmacro.h ****  * this software and associated documentation files (the "Software"), to deal in
   7:../freertos/portable/GCC/ARM_CM3/portmacro.h ****  * the Software without restriction, including without limitation the rights to
   8:../freertos/portable/GCC/ARM_CM3/portmacro.h ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:../freertos/portable/GCC/ARM_CM3/portmacro.h ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:../freertos/portable/GCC/ARM_CM3/portmacro.h ****  * subject to the following conditions:
  11:../freertos/portable/GCC/ARM_CM3/portmacro.h ****  *
  12:../freertos/portable/GCC/ARM_CM3/portmacro.h ****  * The above copyright notice and this permission notice shall be included in all
  13:../freertos/portable/GCC/ARM_CM3/portmacro.h ****  * copies or substantial portions of the Software.
ARM GAS  /tmp/ccaP1CVS.s 			page 122


  14:../freertos/portable/GCC/ARM_CM3/portmacro.h ****  *
  15:../freertos/portable/GCC/ARM_CM3/portmacro.h ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:../freertos/portable/GCC/ARM_CM3/portmacro.h ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:../freertos/portable/GCC/ARM_CM3/portmacro.h ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:../freertos/portable/GCC/ARM_CM3/portmacro.h ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:../freertos/portable/GCC/ARM_CM3/portmacro.h ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:../freertos/portable/GCC/ARM_CM3/portmacro.h ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:../freertos/portable/GCC/ARM_CM3/portmacro.h ****  *
  22:../freertos/portable/GCC/ARM_CM3/portmacro.h ****  * http://www.FreeRTOS.org
  23:../freertos/portable/GCC/ARM_CM3/portmacro.h ****  * http://aws.amazon.com/freertos
  24:../freertos/portable/GCC/ARM_CM3/portmacro.h ****  *
  25:../freertos/portable/GCC/ARM_CM3/portmacro.h ****  * 1 tab == 4 spaces!
  26:../freertos/portable/GCC/ARM_CM3/portmacro.h ****  */
  27:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 
  28:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 
  29:../freertos/portable/GCC/ARM_CM3/portmacro.h **** #ifndef PORTMACRO_H
  30:../freertos/portable/GCC/ARM_CM3/portmacro.h **** #define PORTMACRO_H
  31:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 
  32:../freertos/portable/GCC/ARM_CM3/portmacro.h **** #ifdef __cplusplus
  33:../freertos/portable/GCC/ARM_CM3/portmacro.h **** extern "C" {
  34:../freertos/portable/GCC/ARM_CM3/portmacro.h **** #endif
  35:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 
  36:../freertos/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------
  37:../freertos/portable/GCC/ARM_CM3/portmacro.h ****  * Port specific definitions.
  38:../freertos/portable/GCC/ARM_CM3/portmacro.h ****  *
  39:../freertos/portable/GCC/ARM_CM3/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  40:../freertos/portable/GCC/ARM_CM3/portmacro.h ****  * given hardware and compiler.
  41:../freertos/portable/GCC/ARM_CM3/portmacro.h ****  *
  42:../freertos/portable/GCC/ARM_CM3/portmacro.h ****  * These settings should not be altered.
  43:../freertos/portable/GCC/ARM_CM3/portmacro.h ****  *-----------------------------------------------------------
  44:../freertos/portable/GCC/ARM_CM3/portmacro.h ****  */
  45:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 
  46:../freertos/portable/GCC/ARM_CM3/portmacro.h **** /* Type definitions. */
  47:../freertos/portable/GCC/ARM_CM3/portmacro.h **** #define portCHAR		char
  48:../freertos/portable/GCC/ARM_CM3/portmacro.h **** #define portFLOAT		float
  49:../freertos/portable/GCC/ARM_CM3/portmacro.h **** #define portDOUBLE		double
  50:../freertos/portable/GCC/ARM_CM3/portmacro.h **** #define portLONG		long
  51:../freertos/portable/GCC/ARM_CM3/portmacro.h **** #define portSHORT		short
  52:../freertos/portable/GCC/ARM_CM3/portmacro.h **** #define portSTACK_TYPE	uint32_t
  53:../freertos/portable/GCC/ARM_CM3/portmacro.h **** #define portBASE_TYPE	long
  54:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 
  55:../freertos/portable/GCC/ARM_CM3/portmacro.h **** typedef portSTACK_TYPE StackType_t;
  56:../freertos/portable/GCC/ARM_CM3/portmacro.h **** typedef long BaseType_t;
  57:../freertos/portable/GCC/ARM_CM3/portmacro.h **** typedef unsigned long UBaseType_t;
  58:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 
  59:../freertos/portable/GCC/ARM_CM3/portmacro.h **** #if( configUSE_16_BIT_TICKS == 1 )
  60:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	typedef uint16_t TickType_t;
  61:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffff
  62:../freertos/portable/GCC/ARM_CM3/portmacro.h **** #else
  63:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	typedef uint32_t TickType_t;
  64:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffffffffUL
  65:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 
  66:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	/* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
  67:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	not need to be guarded with a critical section. */
  68:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	#define portTICK_TYPE_IS_ATOMIC 1
  69:../freertos/portable/GCC/ARM_CM3/portmacro.h **** #endif
  70:../freertos/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
ARM GAS  /tmp/ccaP1CVS.s 			page 123


  71:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 
  72:../freertos/portable/GCC/ARM_CM3/portmacro.h **** /* Architecture specifics. */
  73:../freertos/portable/GCC/ARM_CM3/portmacro.h **** #define portSTACK_GROWTH			( -1 )
  74:../freertos/portable/GCC/ARM_CM3/portmacro.h **** #define portTICK_PERIOD_MS			( ( TickType_t ) 1000 / configTICK_RATE_HZ )
  75:../freertos/portable/GCC/ARM_CM3/portmacro.h **** #define portBYTE_ALIGNMENT			8
  76:../freertos/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
  77:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 
  78:../freertos/portable/GCC/ARM_CM3/portmacro.h **** /* Scheduler utilities. */
  79:../freertos/portable/GCC/ARM_CM3/portmacro.h **** #define portYIELD() 															\
  80:../freertos/portable/GCC/ARM_CM3/portmacro.h **** {																				\
  81:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	/* Set a PendSV to request a context switch. */								\
  82:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;								\
  83:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 																				\
  84:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	/* Barriers are normally not required but do ensure the code is completely	\
  85:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	within the specified behaviour for the architecture. */						\
  86:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	__asm volatile( "dsb" ::: "memory" );										\
  87:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	__asm volatile( "isb" );													\
  88:../freertos/portable/GCC/ARM_CM3/portmacro.h **** }
  89:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 
  90:../freertos/portable/GCC/ARM_CM3/portmacro.h **** #define portNVIC_INT_CTRL_REG		( * ( ( volatile uint32_t * ) 0xe000ed04 ) )
  91:../freertos/portable/GCC/ARM_CM3/portmacro.h **** #define portNVIC_PENDSVSET_BIT		( 1UL << 28UL )
  92:../freertos/portable/GCC/ARM_CM3/portmacro.h **** #define portEND_SWITCHING_ISR( xSwitchRequired ) if( xSwitchRequired != pdFALSE ) portYIELD()
  93:../freertos/portable/GCC/ARM_CM3/portmacro.h **** #define portYIELD_FROM_ISR( x ) portEND_SWITCHING_ISR( x )
  94:../freertos/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
  95:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 
  96:../freertos/portable/GCC/ARM_CM3/portmacro.h **** /* Critical section management. */
  97:../freertos/portable/GCC/ARM_CM3/portmacro.h **** extern void vPortEnterCritical( void );
  98:../freertos/portable/GCC/ARM_CM3/portmacro.h **** extern void vPortExitCritical( void );
  99:../freertos/portable/GCC/ARM_CM3/portmacro.h **** #define portSET_INTERRUPT_MASK_FROM_ISR()		ulPortRaiseBASEPRI()
 100:../freertos/portable/GCC/ARM_CM3/portmacro.h **** #define portCLEAR_INTERRUPT_MASK_FROM_ISR(x)	vPortSetBASEPRI(x)
 101:../freertos/portable/GCC/ARM_CM3/portmacro.h **** #define portDISABLE_INTERRUPTS()				vPortRaiseBASEPRI()
 102:../freertos/portable/GCC/ARM_CM3/portmacro.h **** #define portENABLE_INTERRUPTS()					vPortSetBASEPRI(0)
 103:../freertos/portable/GCC/ARM_CM3/portmacro.h **** #define portENTER_CRITICAL()					vPortEnterCritical()
 104:../freertos/portable/GCC/ARM_CM3/portmacro.h **** #define portEXIT_CRITICAL()						vPortExitCritical()
 105:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 
 106:../freertos/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 107:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 
 108:../freertos/portable/GCC/ARM_CM3/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 109:../freertos/portable/GCC/ARM_CM3/portmacro.h **** not necessary for to use this port.  They are defined so the common demo files
 110:../freertos/portable/GCC/ARM_CM3/portmacro.h **** (which build with all the ports) will build. */
 111:../freertos/portable/GCC/ARM_CM3/portmacro.h **** #define portTASK_FUNCTION_PROTO( vFunction, pvParameters ) void vFunction( void *pvParameters )
 112:../freertos/portable/GCC/ARM_CM3/portmacro.h **** #define portTASK_FUNCTION( vFunction, pvParameters ) void vFunction( void *pvParameters )
 113:../freertos/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 114:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 
 115:../freertos/portable/GCC/ARM_CM3/portmacro.h **** /* Tickless idle/low power functionality. */
 116:../freertos/portable/GCC/ARM_CM3/portmacro.h **** #ifndef portSUPPRESS_TICKS_AND_SLEEP
 117:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 118:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	#define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime ) vPortSuppressTicksAndSleep( xExpectedIdl
 119:../freertos/portable/GCC/ARM_CM3/portmacro.h **** #endif
 120:../freertos/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 121:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 
 122:../freertos/portable/GCC/ARM_CM3/portmacro.h **** /* Architecture specific optimisations. */
 123:../freertos/portable/GCC/ARM_CM3/portmacro.h **** #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 124:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	#define configUSE_PORT_OPTIMISED_TASK_SELECTION 1
 125:../freertos/portable/GCC/ARM_CM3/portmacro.h **** #endif
 126:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 
 127:../freertos/portable/GCC/ARM_CM3/portmacro.h **** #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
ARM GAS  /tmp/ccaP1CVS.s 			page 124


 128:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 
 129:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	/* Generic helper function. */
 130:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitma
 131:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	{
 132:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	uint8_t ucReturn;
 133:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 
 134:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 135:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 		return ucReturn;
 136:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	}
 137:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 
 138:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	/* Check the configuration. */
 139:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	#if( configMAX_PRIORITIES > 32 )
 140:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 		#error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIORITIES is 
 141:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	#endif
 142:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 
 143:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	/* Store/clear the ready priorities in a bit map. */
 144:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	#define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) |= ( 1UL 
 145:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	#define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) &= ~( 1UL 
 146:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 
 147:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	/*-----------------------------------------------------------*/
 148:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 
 149:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	#define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities ) uxTopPriority = ( 31UL - ( ui
 150:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 
 151:../freertos/portable/GCC/ARM_CM3/portmacro.h **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 152:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 
 153:../freertos/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 154:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 
 155:../freertos/portable/GCC/ARM_CM3/portmacro.h **** #ifdef configASSERT
 156:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	void vPortValidateInterruptPriority( void );
 157:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	#define portASSERT_IF_INTERRUPT_PRIORITY_INVALID() 	vPortValidateInterruptPriority()
 158:../freertos/portable/GCC/ARM_CM3/portmacro.h **** #endif
 159:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 
 160:../freertos/portable/GCC/ARM_CM3/portmacro.h **** /* portNOP() is not required by this port. */
 161:../freertos/portable/GCC/ARM_CM3/portmacro.h **** #define portNOP()
 162:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 
 163:../freertos/portable/GCC/ARM_CM3/portmacro.h **** #define portINLINE	__inline
 164:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 
 165:../freertos/portable/GCC/ARM_CM3/portmacro.h **** #ifndef portFORCE_INLINE
 166:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	#define portFORCE_INLINE inline __attribute__(( always_inline))
 167:../freertos/portable/GCC/ARM_CM3/portmacro.h **** #endif
 168:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 
 169:../freertos/portable/GCC/ARM_CM3/portmacro.h **** portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 170:../freertos/portable/GCC/ARM_CM3/portmacro.h **** {
 171:../freertos/portable/GCC/ARM_CM3/portmacro.h **** uint32_t ulCurrentInterrupt;
 172:../freertos/portable/GCC/ARM_CM3/portmacro.h **** BaseType_t xReturn;
 173:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 
 174:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	/* Obtain the number of the currently executing interrupt. */
 175:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 176:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 
 177:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	if( ulCurrentInterrupt == 0 )
 178:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	{
 179:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 		xReturn = pdFALSE;
 180:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	}
 181:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	else
 182:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	{
 183:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 		xReturn = pdTRUE;
 184:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	}
ARM GAS  /tmp/ccaP1CVS.s 			page 125


 185:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 
 186:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	return xReturn;
 187:../freertos/portable/GCC/ARM_CM3/portmacro.h **** }
 188:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 
 189:../freertos/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 190:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 
 191:../freertos/portable/GCC/ARM_CM3/portmacro.h **** portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 192:../freertos/portable/GCC/ARM_CM3/portmacro.h **** {
 193:../freertos/portable/GCC/ARM_CM3/portmacro.h **** uint32_t ulNewBASEPRI;
 194:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 
 195:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	__asm volatile
 196:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	(
 197:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 		"	mov %0, %1												\n" \
 198:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 		"	msr basepri, %0											\n" \
 199:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 		"	isb														\n" \
 200:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 		"	dsb														\n" \
 201:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
 202:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	);
 203:../freertos/portable/GCC/ARM_CM3/portmacro.h **** }
 204:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 
 205:../freertos/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 206:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 
 207:../freertos/portable/GCC/ARM_CM3/portmacro.h **** portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
 1349              		.loc 2 207 34 view .LVU367
 1350              	.LBB81:
 208:../freertos/portable/GCC/ARM_CM3/portmacro.h **** {
 209:../freertos/portable/GCC/ARM_CM3/portmacro.h **** uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
 1351              		.loc 2 209 1 view .LVU368
 210:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 
 211:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	__asm volatile
 1352              		.loc 2 211 2 view .LVU369
 1353              		.syntax unified
 1354              	@ 211 "../freertos/portable/GCC/ARM_CM3/portmacro.h" 1
 1355 0384 EFF31183 			mrs r3, basepri												@ ulOriginalBASEPRI
 1356 0388 4FF01002 		mov r2, #16													@ ulNewBASEPRI,
 1357 038c 82F31188 		msr basepri, r2												@ ulNewBASEPRI
 1358 0390 BFF36F8F 		isb														
 1359 0394 BFF34F8F 		dsb														
 1360              	
 1361              	@ 0 "" 2
 1362              	.LVL94:
 212:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	(
 213:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 		"	mrs %0, basepri											\n" \
 214:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 		"	mov %1, %2												\n" \
 215:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 		"	msr basepri, %1											\n" \
 216:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 		"	isb														\n" \
 217:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 		"	dsb														\n" \
 218:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "
 219:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	);
 220:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 
 221:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	/* This return will not be reached but is necessary to prevent compiler
 222:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	warnings. */
 223:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	return ulOriginalBASEPRI;
 1363              		.loc 2 223 2 view .LVU370
 1364              		.loc 2 223 2 is_stmt 0 view .LVU371
 1365              		.thumb
 1366              		.syntax unified
ARM GAS  /tmp/ccaP1CVS.s 			page 126


 1367              	.LBE81:
 1368              	.LBE80:
1519:../freertos/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1369              		.loc 1 1519 4 is_stmt 1 view .LVU372
 1370              	@ ../freertos/tasks.c:1519: 			pxTCB = prvGetTCBFromHandle( xTask );
1519:../freertos/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1371              		.loc 1 1519 12 is_stmt 0 view .LVU373
 1372 0398 08B9     		cbnz	r0, .L87	@ xTask,
 1373              	@ ../freertos/tasks.c:1519: 			pxTCB = prvGetTCBFromHandle( xTask );
1519:../freertos/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1374              		.loc 1 1519 12 discriminator 1 view .LVU374
 1375 039a 034A     		ldr	r2, .L88	@ tmp119,
 1376 039c 5068     		ldr	r0, [r2, #4]	@ xTask, pxCurrentTCB
 1377              	.LVL95:
 1378              	.L87:
1520:../freertos/tasks.c **** 		}
 1379              		.loc 1 1520 4 is_stmt 1 discriminator 4 view .LVU375
 1380              	@ ../freertos/tasks.c:1520: 			uxReturn = pxTCB->uxPriority;
1520:../freertos/tasks.c **** 		}
 1381              		.loc 1 1520 13 is_stmt 0 discriminator 4 view .LVU376
 1382 039e C06A     		ldr	r0, [r0, #44]	@ <retval>, iftmp.33_1->uxPriority
 1383              	.LVL96:
1522:../freertos/tasks.c **** 
 1384              		.loc 1 1522 3 is_stmt 1 discriminator 4 view .LVU377
 1385              	.LBB82:
 1386              	.LBI82:
 224:../freertos/portable/GCC/ARM_CM3/portmacro.h **** }
 225:../freertos/portable/GCC/ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 226:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 
 227:../freertos/portable/GCC/ARM_CM3/portmacro.h **** portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
 1387              		.loc 2 227 30 discriminator 4 view .LVU378
 1388              	.LBB83:
 228:../freertos/portable/GCC/ARM_CM3/portmacro.h **** {
 229:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	__asm volatile
 1389              		.loc 2 229 2 discriminator 4 view .LVU379
 1390              		.syntax unified
 1391              	@ 229 "../freertos/portable/GCC/ARM_CM3/portmacro.h" 1
 1392 03a0 83F31188 			msr basepri, r3		@ ulOriginalBASEPRI
 1393              	@ 0 "" 2
 1394              	.LVL97:
 1395              		.loc 2 229 2 is_stmt 0 discriminator 4 view .LVU380
 1396              		.thumb
 1397              		.syntax unified
 1398              	.LBE83:
 1399              	.LBE82:
1524:../freertos/tasks.c **** 	}
 1400              		.loc 1 1524 3 is_stmt 1 discriminator 4 view .LVU381
 1401              	@ ../freertos/tasks.c:1525: 	}
1525:../freertos/tasks.c **** 
 1402              		.loc 1 1525 2 is_stmt 0 discriminator 4 view .LVU382
 1403 03a4 7047     		bx	lr	@
 1404              	.L89:
 1405 03a6 00BF     		.align	2
 1406              	.L88:
 1407 03a8 00000000 		.word	.LANCHOR0
 1408              		.cfi_endproc
 1409              	.LFE13:
ARM GAS  /tmp/ccaP1CVS.s 			page 127


 1410              		.size	uxTaskPriorityGetFromISR, .-uxTaskPriorityGetFromISR
 1411              		.align	1
 1412              		.global	vTaskPrioritySet
 1413              		.syntax unified
 1414              		.thumb
 1415              		.thumb_func
 1416              		.type	vTaskPrioritySet, %function
 1417              	vTaskPrioritySet:
 1418              	.LVL98:
 1419              	.LFB14:
1533:../freertos/tasks.c **** 	TCB_t *pxTCB;
 1420              		.loc 1 1533 2 is_stmt 1 view -0
 1421              		.cfi_startproc
 1422              		@ args = 0, pretend = 0, frame = 0
 1423              		@ frame_needed = 0, uses_anonymous_args = 0
1534:../freertos/tasks.c **** 	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
 1424              		.loc 1 1534 2 view .LVU384
1535:../freertos/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
 1425              		.loc 1 1535 2 view .LVU385
1536:../freertos/tasks.c **** 
 1426              		.loc 1 1536 2 view .LVU386
1538:../freertos/tasks.c **** 
 1427              		.loc 1 1538 59 view .LVU387
1541:../freertos/tasks.c **** 		{
 1428              		.loc 1 1541 3 view .LVU388
 1429 03ac 0429     		cmp	r1, #4	@ tmp181,
 1430              	@ ../freertos/tasks.c:1533: 	{
1533:../freertos/tasks.c **** 	TCB_t *pxTCB;
 1431              		.loc 1 1533 2 is_stmt 0 view .LVU389
 1432 03ae 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}	@
 1433              	.LCFI10:
 1434              		.cfi_def_cfa_offset 32
 1435              		.cfi_offset 3, -32
 1436              		.cfi_offset 4, -28
 1437              		.cfi_offset 5, -24
 1438              		.cfi_offset 6, -20
 1439              		.cfi_offset 7, -16
 1440              		.cfi_offset 8, -12
 1441              		.cfi_offset 9, -8
 1442              		.cfi_offset 14, -4
 1443 03b2 28BF     		it	cs
 1444 03b4 0421     		movcs	r1, #4	@ tmp181,
 1445              	.LVL99:
 1446              	@ ../freertos/tasks.c:1533: 	{
1533:../freertos/tasks.c **** 	TCB_t *pxTCB;
 1447              		.loc 1 1533 2 view .LVU390
 1448 03b6 0446     		mov	r4, r0	@ xTask, tmp180
 1449 03b8 0D46     		mov	r5, r1	@ uxNewPriority, tmp181
 1450              	.LVL100:
1547:../freertos/tasks.c **** 		}
 1451              		.loc 1 1547 28 is_stmt 1 view .LVU391
1550:../freertos/tasks.c **** 		{
 1452              		.loc 1 1550 3 view .LVU392
 1453 03ba FFF7FEFF 		bl	vPortEnterCritical		@
 1454              	.LVL101:
1554:../freertos/tasks.c **** 
 1455              		.loc 1 1554 4 view .LVU393
ARM GAS  /tmp/ccaP1CVS.s 			page 128


 1456              	@ ../freertos/tasks.c:1554: 			pxTCB = prvGetTCBFromHandle( xTask );
1554:../freertos/tasks.c **** 
 1457              		.loc 1 1554 12 is_stmt 0 view .LVU394
 1458 03be 0CB9     		cbnz	r4, .L91	@ xTask,
 1459              	@ ../freertos/tasks.c:1554: 			pxTCB = prvGetTCBFromHandle( xTask );
1554:../freertos/tasks.c **** 
 1460              		.loc 1 1554 12 discriminator 1 view .LVU395
 1461 03c0 294B     		ldr	r3, .L105	@ tmp143,
 1462 03c2 5C68     		ldr	r4, [r3, #4]	@ xTask, pxCurrentTCB
 1463              	.LVL102:
 1464              	.L91:
1556:../freertos/tasks.c **** 
 1465              		.loc 1 1556 50 is_stmt 1 discriminator 4 view .LVU396
1560:../freertos/tasks.c **** 			}
 1466              		.loc 1 1560 5 discriminator 4 view .LVU397
 1467              	@ ../freertos/tasks.c:1560: 				uxCurrentBasePriority = pxTCB->uxBasePriority;
1560:../freertos/tasks.c **** 			}
 1468              		.loc 1 1560 27 is_stmt 0 discriminator 4 view .LVU398
 1469 03c4 E36C     		ldr	r3, [r4, #76]	@ uxCurrentBasePriority, iftmp.34_23->uxBasePriority
 1470              	.LVL103:
1568:../freertos/tasks.c **** 			{
 1471              		.loc 1 1568 4 is_stmt 1 discriminator 4 view .LVU399
 1472              	@ ../freertos/tasks.c:1568: 			if( uxCurrentBasePriority != uxNewPriority )
1568:../freertos/tasks.c **** 			{
 1473              		.loc 1 1568 6 is_stmt 0 discriminator 4 view .LVU400
 1474 03c6 9D42     		cmp	r5, r3	@ uxNewPriority, uxCurrentBasePriority
 1475 03c8 42D0     		beq	.L93		@,
1572:../freertos/tasks.c **** 				{
 1476              		.loc 1 1572 5 is_stmt 1 view .LVU401
 1477 03ca 274F     		ldr	r7, .L105	@ tmp176,
 1478              	@ ../freertos/tasks.c:1572: 				if( uxNewPriority > uxCurrentBasePriority )
1572:../freertos/tasks.c **** 				{
 1479              		.loc 1 1572 7 is_stmt 0 view .LVU402
 1480 03cc 44D9     		bls	.L94		@,
1574:../freertos/tasks.c **** 					{
 1481              		.loc 1 1574 6 is_stmt 1 view .LVU403
 1482              	@ ../freertos/tasks.c:1574: 					if( pxTCB != pxCurrentTCB )
1574:../freertos/tasks.c **** 					{
 1483              		.loc 1 1574 16 is_stmt 0 view .LVU404
 1484 03ce 7A68     		ldr	r2, [r7, #4]	@ pxCurrentTCB.35_1, pxCurrentTCB
 1485              	@ ../freertos/tasks.c:1574: 					if( pxTCB != pxCurrentTCB )
1574:../freertos/tasks.c **** 					{
 1486              		.loc 1 1574 8 view .LVU405
 1487 03d0 A242     		cmp	r2, r4	@ pxCurrentTCB.35_1, xTask
 1488 03d2 46D0     		beq	.L101		@,
1579:../freertos/tasks.c **** 						{
 1489              		.loc 1 1579 7 is_stmt 1 view .LVU406
 1490              	@ ../freertos/tasks.c:1579: 						if( uxNewPriority >= pxCurrentTCB->uxPriority )
1579:../freertos/tasks.c **** 						{
 1491              		.loc 1 1579 40 is_stmt 0 view .LVU407
 1492 03d4 7A68     		ldr	r2, [r7, #4]	@ pxCurrentTCB.36_2, pxCurrentTCB
 1493              	@ ../freertos/tasks.c:1579: 						if( uxNewPriority >= pxCurrentTCB->uxPriority )
1579:../freertos/tasks.c **** 						{
 1494              		.loc 1 1579 9 view .LVU408
 1495 03d6 D66A     		ldr	r6, [r2, #44]	@ pxCurrentTCB.36_2->uxPriority, pxCurrentTCB.36_2->uxPriority
 1496 03d8 AE42     		cmp	r6, r5	@ pxCurrentTCB.36_2->uxPriority, uxNewPriority
 1497 03da 8CBF     		ite	hi
ARM GAS  /tmp/ccaP1CVS.s 			page 129


 1498 03dc 0026     		movhi	r6, #0	@ xYieldRequired,
 1499 03de 0126     		movls	r6, #1	@ xYieldRequired,
 1500              	.L95:
 1501              	.LVL104:
1607:../freertos/tasks.c **** 
 1502              		.loc 1 1607 5 is_stmt 1 view .LVU409
1612:../freertos/tasks.c **** 
 1503              		.loc 1 1612 5 view .LVU410
 1504              	@ ../freertos/tasks.c:1612: 				uxPriorityUsedOnEntry = pxTCB->uxPriority;
1612:../freertos/tasks.c **** 
 1505              		.loc 1 1612 27 is_stmt 0 view .LVU411
 1506 03e0 D4F82C90 		ldr	r9, [r4, #44]	@ uxPriorityUsedOnEntry, iftmp.34_23->uxPriority
 1507              	.LVL105:
1618:../freertos/tasks.c **** 					{
 1508              		.loc 1 1618 6 is_stmt 1 view .LVU412
 1509              	@ ../freertos/tasks.c:1628: 					pxTCB->uxBasePriority = uxNewPriority;
1628:../freertos/tasks.c **** 				}
 1510              		.loc 1 1628 28 is_stmt 0 view .LVU413
 1511 03e4 E564     		str	r5, [r4, #76]	@ uxNewPriority, iftmp.34_23->uxBasePriority
 1512              	@ ../freertos/tasks.c:1618: 					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
1618:../freertos/tasks.c **** 					{
 1513              		.loc 1 1618 8 view .LVU414
 1514 03e6 4B45     		cmp	r3, r9	@ uxCurrentBasePriority, uxPriorityUsedOnEntry
1620:../freertos/tasks.c **** 					}
 1515              		.loc 1 1620 7 is_stmt 1 view .LVU415
 1516              	@ ../freertos/tasks.c:1638: 				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskE
1638:../freertos/tasks.c **** 				{
 1517              		.loc 1 1638 7 is_stmt 0 view .LVU416
 1518 03e8 A369     		ldr	r3, [r4, #24]	@ iftmp.34_23->xEventListItem.xItemValue, iftmp.34_23->xEventListItem.xItemValue
 1519              	.LVL106:
 1520              	@ ../freertos/tasks.c:1620: 						pxTCB->uxPriority = uxNewPriority;
1620:../freertos/tasks.c **** 					}
 1521              		.loc 1 1620 25 view .LVU417
 1522 03ea 08BF     		it	eq
 1523 03ec E562     		streq	r5, [r4, #44]	@ uxNewPriority, iftmp.34_23->uxPriority
1624:../freertos/tasks.c **** 					}
 1524              		.loc 1 1624 31 is_stmt 1 view .LVU418
1628:../freertos/tasks.c **** 				}
 1525              		.loc 1 1628 6 view .LVU419
1638:../freertos/tasks.c **** 				{
 1526              		.loc 1 1638 5 view .LVU420
 1527              	@ ../freertos/tasks.c:1638: 				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskE
1638:../freertos/tasks.c **** 				{
 1528              		.loc 1 1638 7 is_stmt 0 view .LVU421
 1529 03ee 002B     		cmp	r3, #0	@ iftmp.34_23->xEventListItem.xItemValue,
1640:../freertos/tasks.c **** 				}
 1530              		.loc 1 1640 6 is_stmt 1 view .LVU422
 1531              	@ ../freertos/tasks.c:1651: 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOn
1651:../freertos/tasks.c **** 				{
 1532              		.loc 1 1651 9 is_stmt 0 view .LVU423
 1533 03f0 4FF01403 		mov	r3, #20	@ tmp157,
 1534              	@ ../freertos/tasks.c:1640: 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_
1640:../freertos/tasks.c **** 				}
 1535              		.loc 1 1640 6 view .LVU424
 1536 03f4 A4BF     		itt	ge
 1537 03f6 C5F10505 		rsbge	r5, r5, #5	@ tmp153, uxNewPriority,
 1538              	.LVL107:
ARM GAS  /tmp/ccaP1CVS.s 			page 130


1640:../freertos/tasks.c **** 				}
 1539              		.loc 1 1640 6 view .LVU425
 1540 03fa A561     		strge	r5, [r4, #24]	@ tmp153, iftmp.34_23->xEventListItem.xItemValue
1644:../freertos/tasks.c **** 				}
 1541              		.loc 1 1644 30 is_stmt 1 view .LVU426
1651:../freertos/tasks.c **** 				{
 1542              		.loc 1 1651 5 view .LVU427
 1543              	@ ../freertos/tasks.c:1651: 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOn
1651:../freertos/tasks.c **** 				{
 1544              		.loc 1 1651 9 is_stmt 0 view .LVU428
 1545 03fc 1B4D     		ldr	r5, .L105+4	@ tmp155,
 1546              	@ ../freertos/tasks.c:1651: 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOn
1651:../freertos/tasks.c **** 				{
 1547              		.loc 1 1651 7 view .LVU429
 1548 03fe 6269     		ldr	r2, [r4, #20]	@ iftmp.34_23->xStateListItem.pvContainer, iftmp.34_23->xStateListItem.pvContain
 1549              	@ ../freertos/tasks.c:1651: 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOn
1651:../freertos/tasks.c **** 				{
 1550              		.loc 1 1651 9 view .LVU430
 1551 0400 03FB0953 		mla	r3, r3, r9, r5	@ tmp158, tmp157, uxPriorityUsedOnEntry, tmp155
 1552              	@ ../freertos/tasks.c:1651: 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOn
1651:../freertos/tasks.c **** 				{
 1553              		.loc 1 1651 7 view .LVU431
 1554 0404 9A42     		cmp	r2, r3	@ iftmp.34_23->xStateListItem.pvContainer, tmp158
 1555 0406 18D1     		bne	.L98		@,
1656:../freertos/tasks.c **** 					{
 1556              		.loc 1 1656 6 is_stmt 1 view .LVU432
 1557              	@ ../freertos/tasks.c:1656: 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 
1656:../freertos/tasks.c **** 					{
 1558              		.loc 1 1656 10 is_stmt 0 view .LVU433
 1559 0408 04F10408 		add	r8, r4, #4	@ _11, xTask,
 1560 040c 4046     		mov	r0, r8	@, _11
 1561 040e FFF7FEFF 		bl	uxListRemove		@
 1562              	.LVL108:
 1563              	@ ../freertos/tasks.c:1656: 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 
1656:../freertos/tasks.c **** 					{
 1564              		.loc 1 1656 8 view .LVU434
 1565 0412 30B9     		cbnz	r0, .L99	@ tmp182,
1661:../freertos/tasks.c **** 					}
 1566              		.loc 1 1661 7 is_stmt 1 view .LVU435
 1567 0414 0122     		movs	r2, #1	@ tmp162,
 1568 0416 BB68     		ldr	r3, [r7, #8]	@ uxTopReadyPriority.38_15, uxTopReadyPriority
 1569 0418 02FA09F2 		lsl	r2, r2, r9	@ tmp161, tmp162, uxPriorityUsedOnEntry
 1570 041c 23EA0203 		bic	r3, r3, r2	@ _16, uxTopReadyPriority.38_15, tmp161
 1571 0420 BB60     		str	r3, [r7, #8]	@ _16, uxTopReadyPriority
 1572              	.L99:
1665:../freertos/tasks.c **** 					}
 1573              		.loc 1 1665 31 view .LVU436
1667:../freertos/tasks.c **** 				}
 1574              		.loc 1 1667 6 view .LVU437
1667:../freertos/tasks.c **** 				}
 1575              		.loc 1 1667 6 view .LVU438
 1576 0422 0123     		movs	r3, #1	@ tmp167,
 1577 0424 1420     		movs	r0, #20	@ tmp172,
 1578 0426 E26A     		ldr	r2, [r4, #44]	@ _17, iftmp.34_23->uxPriority
 1579 0428 B968     		ldr	r1, [r7, #8]	@ uxTopReadyPriority.39_19, uxTopReadyPriority
 1580 042a 9340     		lsls	r3, r3, r2	@ tmp166, tmp167, _17
 1581 042c 0B43     		orrs	r3, r3, r1	@, _20, tmp166, uxTopReadyPriority.39_19
ARM GAS  /tmp/ccaP1CVS.s 			page 131


 1582 042e 00FB0250 		mla	r0, r0, r2, r5	@, tmp172, _17, tmp155
 1583 0432 4146     		mov	r1, r8	@, _11
 1584 0434 BB60     		str	r3, [r7, #8]	@ _20, uxTopReadyPriority
1667:../freertos/tasks.c **** 				}
 1585              		.loc 1 1667 6 view .LVU439
 1586 0436 FFF7FEFF 		bl	vListInsertEnd		@
 1587              	.LVL109:
1667:../freertos/tasks.c **** 				}
 1588              		.loc 1 1667 36 view .LVU440
 1589              	.L98:
1671:../freertos/tasks.c **** 				}
 1590              		.loc 1 1671 30 view .LVU441
1674:../freertos/tasks.c **** 				{
 1591              		.loc 1 1674 5 view .LVU442
 1592              	@ ../freertos/tasks.c:1674: 				if( xYieldRequired != pdFALSE )
1674:../freertos/tasks.c **** 				{
 1593              		.loc 1 1674 7 is_stmt 0 view .LVU443
 1594 043a 4EB1     		cbz	r6, .L93	@ xYieldRequired,
1676:../freertos/tasks.c **** 				}
 1595              		.loc 1 1676 6 is_stmt 1 view .LVU444
 1596 043c 4FF0E023 		mov	r3, #-536813568	@ tmp174,
 1597 0440 4FF08052 		mov	r2, #268435456	@ tmp175,
 1598 0444 C3F8042D 		str	r2, [r3, #3332]	@ tmp175, MEM[(volatile uint32_t *)3758157060B]
1676:../freertos/tasks.c **** 				}
 1599              		.loc 1 1676 6 view .LVU445
 1600              		.syntax unified
 1601              	@ 1676 "../freertos/tasks.c" 1
 1602 0448 BFF34F8F 		dsb	
 1603              	@ 0 "" 2
1676:../freertos/tasks.c **** 				}
 1604              		.loc 1 1676 6 view .LVU446
 1605              	@ 1676 "../freertos/tasks.c" 1
 1606 044c BFF36F8F 		isb
 1607              	@ 0 "" 2
1676:../freertos/tasks.c **** 				}
 1608              		.loc 1 1676 37 view .LVU447
 1609              	.LVL110:
 1610              		.thumb
 1611              		.syntax unified
 1612              	.L93:
1680:../freertos/tasks.c **** 				}
 1613              		.loc 1 1680 30 view .LVU448
1685:../freertos/tasks.c **** 			}
 1614              		.loc 1 1685 5 view .LVU449
1688:../freertos/tasks.c **** 	}
 1615              		.loc 1 1688 3 view .LVU450
 1616              	@ ../freertos/tasks.c:1689: 	}
1689:../freertos/tasks.c **** 
 1617              		.loc 1 1689 2 is_stmt 0 view .LVU451
 1618 0450 BDE8F843 		pop	{r3, r4, r5, r6, r7, r8, r9, lr}	@
 1619              	.LCFI11:
 1620              		.cfi_remember_state
 1621              		.cfi_restore 14
 1622              		.cfi_restore 9
 1623              		.cfi_restore 8
 1624              		.cfi_restore 7
 1625              		.cfi_restore 6
ARM GAS  /tmp/ccaP1CVS.s 			page 132


 1626              		.cfi_restore 5
 1627              		.cfi_restore 4
 1628              		.cfi_restore 3
 1629              		.cfi_def_cfa_offset 0
 1630              	.LVL111:
 1631              	@ ../freertos/tasks.c:1688: 		taskEXIT_CRITICAL();
1688:../freertos/tasks.c **** 	}
 1632              		.loc 1 1688 3 view .LVU452
 1633 0454 FFF7FEBF 		b	vPortExitCritical		@
 1634              	.LVL112:
 1635              	.L94:
 1636              	.LCFI12:
 1637              		.cfi_restore_state
1595:../freertos/tasks.c **** 				{
 1638              		.loc 1 1595 10 is_stmt 1 view .LVU453
 1639              	@ ../freertos/tasks.c:1595: 				else if( pxTCB == pxCurrentTCB )
1595:../freertos/tasks.c **** 				{
 1640              		.loc 1 1595 20 is_stmt 0 view .LVU454
 1641 0458 7E68     		ldr	r6, [r7, #4]	@ pxCurrentTCB.37_4, pxCurrentTCB
 1642              	@ ../freertos/tasks.c:1595: 				else if( pxTCB == pxCurrentTCB )
1595:../freertos/tasks.c **** 				{
 1643              		.loc 1 1595 12 view .LVU455
 1644 045a 321B     		subs	r2, r6, r4	@, pxCurrentTCB.37_4, xTask
 1645 045c 5642     		rsbs	r6, r2, #0	@ xYieldRequired,,
 1646 045e 5641     		adcs	r6, r6, r2	@ xYieldRequired, xYieldRequired,
 1647 0460 BEE7     		b	.L95		@
 1648              	.L101:
 1649              	@ ../freertos/tasks.c:1536: 	BaseType_t xYieldRequired = pdFALSE;
1536:../freertos/tasks.c **** 
 1650              		.loc 1 1536 13 view .LVU456
 1651 0462 0026     		movs	r6, #0	@ xYieldRequired,
 1652 0464 BCE7     		b	.L95		@
 1653              	.L106:
 1654 0466 00BF     		.align	2
 1655              	.L105:
 1656 0468 00000000 		.word	.LANCHOR0
 1657 046c 48000000 		.word	.LANCHOR0+72
 1658              		.cfi_endproc
 1659              	.LFE14:
 1660              		.size	vTaskPrioritySet, .-vTaskPrioritySet
 1661              		.align	1
 1662              		.global	vTaskResume
 1663              		.syntax unified
 1664              		.thumb
 1665              		.thumb_func
 1666              		.type	vTaskResume, %function
 1667              	vTaskResume:
 1668              	.LVL113:
 1669              	.LFB17:
1844:../freertos/tasks.c **** 	TCB_t * const pxTCB = xTaskToResume;
 1670              		.loc 1 1844 2 is_stmt 1 view -0
 1671              		.cfi_startproc
 1672              		@ args = 0, pretend = 0, frame = 0
 1673              		@ frame_needed = 0, uses_anonymous_args = 0
1845:../freertos/tasks.c **** 
 1674              		.loc 1 1845 2 view .LVU458
1848:../freertos/tasks.c **** 
ARM GAS  /tmp/ccaP1CVS.s 			page 133


 1675              		.loc 1 1848 32 view .LVU459
1852:../freertos/tasks.c **** 		{
 1676              		.loc 1 1852 3 view .LVU460
 1677              	@ ../freertos/tasks.c:1844: 	{
1844:../freertos/tasks.c **** 	TCB_t * const pxTCB = xTaskToResume;
 1678              		.loc 1 1844 2 is_stmt 0 view .LVU461
 1679 0470 70B5     		push	{r4, r5, r6, lr}	@
 1680              	.LCFI13:
 1681              		.cfi_def_cfa_offset 16
 1682              		.cfi_offset 4, -16
 1683              		.cfi_offset 5, -12
 1684              		.cfi_offset 6, -8
 1685              		.cfi_offset 14, -4
 1686              	@ ../freertos/tasks.c:1852: 		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
1852:../freertos/tasks.c **** 		{
 1687              		.loc 1 1852 15 view .LVU462
 1688 0472 1C4D     		ldr	r5, .L115	@ tmp127,
 1689              	@ ../freertos/tasks.c:1844: 	{
1844:../freertos/tasks.c **** 	TCB_t * const pxTCB = xTaskToResume;
 1690              		.loc 1 1844 2 view .LVU463
 1691 0474 0446     		mov	r4, r0	@ xTaskToResume, tmp147
 1692              	@ ../freertos/tasks.c:1852: 		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
1852:../freertos/tasks.c **** 		{
 1693              		.loc 1 1852 15 view .LVU464
 1694 0476 6B68     		ldr	r3, [r5, #4]	@ pxCurrentTCB.46_1, pxCurrentTCB
 1695              	@ ../freertos/tasks.c:1852: 		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
1852:../freertos/tasks.c **** 		{
 1696              		.loc 1 1852 5 view .LVU465
 1697 0478 8342     		cmp	r3, r0	@ pxCurrentTCB.46_1, xTaskToResume
 1698 047a 32D0     		beq	.L107		@,
 1699              	@ ../freertos/tasks.c:1852: 		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
1852:../freertos/tasks.c **** 		{
 1700              		.loc 1 1852 33 discriminator 1 view .LVU466
 1701 047c 88B3     		cbz	r0, .L107	@ xTaskToResume,
1854:../freertos/tasks.c **** 			{
 1702              		.loc 1 1854 4 is_stmt 1 view .LVU467
 1703 047e FFF7FEFF 		bl	vPortEnterCritical		@
 1704              	.LVL114:
1856:../freertos/tasks.c **** 				{
 1705              		.loc 1 1856 5 view .LVU468
 1706              	.LBB88:
 1707              	.LBI88:
1797:../freertos/tasks.c **** 	{
 1708              		.loc 1 1797 20 view .LVU469
 1709              	.LBB89:
1799:../freertos/tasks.c **** 	const TCB_t * const pxTCB = xTask;
 1710              		.loc 1 1799 2 view .LVU470
1800:../freertos/tasks.c **** 
 1711              		.loc 1 1800 2 view .LVU471
1806:../freertos/tasks.c **** 
 1712              		.loc 1 1806 24 view .LVU472
1809:../freertos/tasks.c **** 		{
 1713              		.loc 1 1809 3 view .LVU473
 1714              	@ ../freertos/tasks.c:1809: 		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateLis
1809:../freertos/tasks.c **** 		{
 1715              		.loc 1 1809 5 is_stmt 0 view .LVU474
 1716 0482 6269     		ldr	r2, [r4, #20]	@ MEM[(const struct TCB_t *)xTaskToResume_14(D)].xStateListItem.pvContainer, MEM
ARM GAS  /tmp/ccaP1CVS.s 			page 134


 1717 0484 05F10C03 		add	r3, r5, #12	@ tmp129, tmp127,
 1718 0488 9A42     		cmp	r2, r3	@ MEM[(const struct TCB_t *)xTaskToResume_14(D)].xStateListItem.pvContainer, tmp129
 1719 048a 26D1     		bne	.L110		@,
 1720              	.LVL115:
 1721              	.LBB90:
 1722              	.LBI90:
1797:../freertos/tasks.c **** 	{
 1723              		.loc 1 1797 20 is_stmt 1 view .LVU475
 1724              	.LBB91:
1812:../freertos/tasks.c **** 			{
 1725              		.loc 1 1812 4 view .LVU476
 1726              	@ ../freertos/tasks.c:1812: 			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventLis
1812:../freertos/tasks.c **** 			{
 1727              		.loc 1 1812 8 is_stmt 0 view .LVU477
 1728 048c A36A     		ldr	r3, [r4, #40]	@ _27, MEM[(const struct TCB_t *)xTaskToResume_14(D)].xEventListItem.pvContainer
 1729              	@ ../freertos/tasks.c:1812: 			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventLis
1812:../freertos/tasks.c **** 			{
 1730              		.loc 1 1812 6 view .LVU478
 1731 048e 05F1D402 		add	r2, r5, #212	@ tmp132, tmp127,
 1732 0492 9342     		cmp	r3, r2	@ _27, tmp132
 1733 0494 21D0     		beq	.L110		@,
1816:../freertos/tasks.c **** 				{
 1734              		.loc 1 1816 5 is_stmt 1 view .LVU479
 1735              	@ ../freertos/tasks.c:1816: 				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != 
1816:../freertos/tasks.c **** 				{
 1736              		.loc 1 1816 7 is_stmt 0 view .LVU480
 1737 0496 03BB     		cbnz	r3, .L110	@ _27,
1818:../freertos/tasks.c **** 				}
 1738              		.loc 1 1818 6 is_stmt 1 view .LVU481
 1739              	.LVL116:
1818:../freertos/tasks.c **** 				}
 1740              		.loc 1 1818 6 is_stmt 0 view .LVU482
 1741              	.LBE91:
 1742              	.LBE90:
1832:../freertos/tasks.c **** 		}
 1743              		.loc 1 1832 28 is_stmt 1 view .LVU483
1835:../freertos/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 1744              		.loc 1 1835 3 view .LVU484
1835:../freertos/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 1745              		.loc 1 1835 3 is_stmt 0 view .LVU485
 1746              	.LBE89:
 1747              	.LBE88:
1858:../freertos/tasks.c **** 
 1748              		.loc 1 1858 31 is_stmt 1 view .LVU486
1862:../freertos/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1749              		.loc 1 1862 6 view .LVU487
 1750              	@ ../freertos/tasks.c:1862: 					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
1862:../freertos/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1751              		.loc 1 1862 15 is_stmt 0 view .LVU488
 1752 0498 261D     		adds	r6, r4, #4	@ _3, xTaskToResume,
 1753 049a 3046     		mov	r0, r6	@, _3
 1754 049c FFF7FEFF 		bl	uxListRemove		@
 1755              	.LVL117:
1863:../freertos/tasks.c **** 
 1756              		.loc 1 1863 6 is_stmt 1 view .LVU489
1863:../freertos/tasks.c **** 
 1757              		.loc 1 1863 6 view .LVU490
ARM GAS  /tmp/ccaP1CVS.s 			page 135


 1758 04a0 0123     		movs	r3, #1	@ tmp135,
 1759 04a2 1420     		movs	r0, #20	@ tmp140,
 1760 04a4 E26A     		ldr	r2, [r4, #44]	@ _4, MEM[(struct TCB_t *)xTaskToResume_14(D)].uxPriority
 1761 04a6 A968     		ldr	r1, [r5, #8]	@ uxTopReadyPriority.47_6, uxTopReadyPriority
 1762 04a8 9340     		lsls	r3, r3, r2	@ tmp134, tmp135, _4
 1763 04aa 0B43     		orrs	r3, r3, r1	@, _7, tmp134, uxTopReadyPriority.47_6
 1764 04ac AB60     		str	r3, [r5, #8]	@ _7, uxTopReadyPriority
1863:../freertos/tasks.c **** 
 1765              		.loc 1 1863 6 view .LVU491
 1766 04ae 05F14803 		add	r3, r5, #72	@ tmp138, tmp127,
 1767 04b2 00FB0230 		mla	r0, r0, r2, r3	@, tmp140, _4, tmp138
 1768 04b6 3146     		mov	r1, r6	@, _3
 1769 04b8 FFF7FEFF 		bl	vListInsertEnd		@
 1770              	.LVL118:
1863:../freertos/tasks.c **** 
 1771              		.loc 1 1863 36 view .LVU492
1866:../freertos/tasks.c **** 					{
 1772              		.loc 1 1866 6 view .LVU493
 1773              	@ ../freertos/tasks.c:1866: 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1866:../freertos/tasks.c **** 					{
 1774              		.loc 1 1866 43 is_stmt 0 view .LVU494
 1775 04bc 6B68     		ldr	r3, [r5, #4]	@ pxCurrentTCB.48_10, pxCurrentTCB
 1776              	@ ../freertos/tasks.c:1866: 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1866:../freertos/tasks.c **** 					{
 1777              		.loc 1 1866 8 view .LVU495
 1778 04be E26A     		ldr	r2, [r4, #44]	@ MEM[(struct TCB_t *)xTaskToResume_14(D)].uxPriority, MEM[(struct TCB_t *)xTask
 1779 04c0 DB6A     		ldr	r3, [r3, #44]	@ pxCurrentTCB.48_10->uxPriority, pxCurrentTCB.48_10->uxPriority
 1780 04c2 9A42     		cmp	r2, r3	@ MEM[(struct TCB_t *)xTaskToResume_14(D)].uxPriority, pxCurrentTCB.48_10->uxPriority
 1781 04c4 09D3     		bcc	.L110		@,
1871:../freertos/tasks.c **** 					}
 1782              		.loc 1 1871 7 is_stmt 1 view .LVU496
 1783 04c6 4FF0E023 		mov	r3, #-536813568	@ tmp145,
 1784 04ca 4FF08052 		mov	r2, #268435456	@ tmp146,
 1785 04ce C3F8042D 		str	r2, [r3, #3332]	@ tmp146, MEM[(volatile uint32_t *)3758157060B]
1871:../freertos/tasks.c **** 					}
 1786              		.loc 1 1871 7 view .LVU497
 1787              		.syntax unified
 1788              	@ 1871 "../freertos/tasks.c" 1
 1789 04d2 BFF34F8F 		dsb	
 1790              	@ 0 "" 2
1871:../freertos/tasks.c **** 					}
 1791              		.loc 1 1871 7 view .LVU498
 1792              	@ 1871 "../freertos/tasks.c" 1
 1793 04d6 BFF36F8F 		isb
 1794              	@ 0 "" 2
1871:../freertos/tasks.c **** 					}
 1795              		.loc 1 1871 38 view .LVU499
 1796              		.thumb
 1797              		.syntax unified
 1798              	.L110:
1880:../freertos/tasks.c **** 				}
 1799              		.loc 1 1880 30 view .LVU500
1883:../freertos/tasks.c **** 		}
 1800              		.loc 1 1883 4 view .LVU501
 1801              	@ ../freertos/tasks.c:1889: 	}
1889:../freertos/tasks.c **** 
 1802              		.loc 1 1889 2 is_stmt 0 view .LVU502
ARM GAS  /tmp/ccaP1CVS.s 			page 136


 1803 04da BDE87040 		pop	{r4, r5, r6, lr}	@
 1804              	.LCFI14:
 1805              		.cfi_remember_state
 1806              		.cfi_restore 14
 1807              		.cfi_restore 6
 1808              		.cfi_restore 5
 1809              		.cfi_restore 4
 1810              		.cfi_def_cfa_offset 0
 1811              	.LVL119:
 1812              	@ ../freertos/tasks.c:1883: 			taskEXIT_CRITICAL();
1883:../freertos/tasks.c **** 		}
 1813              		.loc 1 1883 4 view .LVU503
 1814 04de FFF7FEBF 		b	vPortExitCritical		@
 1815              	.LVL120:
 1816              	.L107:
 1817              	.LCFI15:
 1818              		.cfi_restore_state
 1819              	@ ../freertos/tasks.c:1889: 	}
1889:../freertos/tasks.c **** 
 1820              		.loc 1 1889 2 view .LVU504
 1821 04e2 70BD     		pop	{r4, r5, r6, pc}	@
 1822              	.L116:
 1823              		.align	2
 1824              	.L115:
 1825 04e4 00000000 		.word	.LANCHOR0
 1826              		.cfi_endproc
 1827              	.LFE17:
 1828              		.size	vTaskResume, .-vTaskResume
 1829              		.align	1
 1830              		.global	xTaskResumeFromISR
 1831              		.syntax unified
 1832              		.thumb
 1833              		.thumb_func
 1834              		.type	xTaskResumeFromISR, %function
 1835              	xTaskResumeFromISR:
 1836              	.LVL121:
 1837              	.LFB18:
1898:../freertos/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
 1838              		.loc 1 1898 2 is_stmt 1 view -0
 1839              		.cfi_startproc
 1840              		@ args = 0, pretend = 0, frame = 0
 1841              		@ frame_needed = 0, uses_anonymous_args = 0
1899:../freertos/tasks.c **** 	TCB_t * const pxTCB = xTaskToResume;
 1842              		.loc 1 1899 2 view .LVU506
1900:../freertos/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 1843              		.loc 1 1900 2 view .LVU507
1901:../freertos/tasks.c **** 
 1844              		.loc 1 1901 2 view .LVU508
1903:../freertos/tasks.c **** 
 1845              		.loc 1 1903 32 view .LVU509
1921:../freertos/tasks.c **** 
 1846              		.loc 1 1921 45 view .LVU510
1923:../freertos/tasks.c **** 		{
 1847              		.loc 1 1923 3 view .LVU511
 1848              	.LBB100:
 1849              	.LBI100:
 207:../freertos/portable/GCC/ARM_CM3/portmacro.h **** {
ARM GAS  /tmp/ccaP1CVS.s 			page 137


 1850              		.loc 2 207 34 view .LVU512
 1851              	.LBB101:
 209:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 
 1852              		.loc 2 209 1 view .LVU513
 211:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	(
 1853              		.loc 2 211 2 view .LVU514
 1854              	.LBE101:
 1855              	.LBE100:
 1856              	@ ../freertos/tasks.c:1898: 	{
1898:../freertos/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
 1857              		.loc 1 1898 2 is_stmt 0 view .LVU515
 1858 04e8 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}	@
 1859              	.LCFI16:
 1860              		.cfi_def_cfa_offset 24
 1861              		.cfi_offset 4, -24
 1862              		.cfi_offset 5, -20
 1863              		.cfi_offset 6, -16
 1864              		.cfi_offset 7, -12
 1865              		.cfi_offset 8, -8
 1866              		.cfi_offset 14, -4
 1867              	@ ../freertos/tasks.c:1898: 	{
1898:../freertos/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
 1868              		.loc 1 1898 2 view .LVU516
 1869 04ec 0646     		mov	r6, r0	@ xTaskToResume, tmp158
 1870              	.LBB103:
 1871              	.LBB102:
 1872              	@ ../freertos/portable/GCC/ARM_CM3/portmacro.h:211: 	__asm volatile
 211:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	(
 1873              		.loc 2 211 2 view .LVU517
 1874              		.syntax unified
 1875              	@ 211 "../freertos/portable/GCC/ARM_CM3/portmacro.h" 1
 1876 04ee EFF31187 			mrs r7, basepri												@ ulOriginalBASEPRI
 1877 04f2 4FF01003 		mov r3, #16													@ ulNewBASEPRI,
 1878 04f6 83F31188 		msr basepri, r3												@ ulNewBASEPRI
 1879 04fa BFF36F8F 		isb														
 1880 04fe BFF34F8F 		dsb														
 1881              	
 1882              	@ 0 "" 2
 1883              	.LVL122:
 223:../freertos/portable/GCC/ARM_CM3/portmacro.h **** }
 1884              		.loc 2 223 2 is_stmt 1 view .LVU518
 223:../freertos/portable/GCC/ARM_CM3/portmacro.h **** }
 1885              		.loc 2 223 2 is_stmt 0 view .LVU519
 1886              		.thumb
 1887              		.syntax unified
 1888              	.LBE102:
 1889              	.LBE103:
1925:../freertos/tasks.c **** 			{
 1890              		.loc 1 1925 4 is_stmt 1 view .LVU520
 1891              	.LBB104:
 1892              	.LBI104:
1797:../freertos/tasks.c **** 	{
 1893              		.loc 1 1797 20 view .LVU521
 1894              	.LBB105:
1799:../freertos/tasks.c **** 	const TCB_t * const pxTCB = xTask;
 1895              		.loc 1 1799 2 view .LVU522
1800:../freertos/tasks.c **** 
ARM GAS  /tmp/ccaP1CVS.s 			page 138


 1896              		.loc 1 1800 2 view .LVU523
1806:../freertos/tasks.c **** 
 1897              		.loc 1 1806 24 view .LVU524
1809:../freertos/tasks.c **** 		{
 1898              		.loc 1 1809 3 view .LVU525
 1899              	@ ../freertos/tasks.c:1809: 		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateLis
1809:../freertos/tasks.c **** 		{
 1900              		.loc 1 1809 5 is_stmt 0 view .LVU526
 1901 0502 194D     		ldr	r5, .L124	@ tmp134,
 1902 0504 4269     		ldr	r2, [r0, #20]	@ MEM[(const struct TCB_t *)xTaskToResume_16(D)].xStateListItem.pvContainer, MEM
 1903 0506 05F10C03 		add	r3, r5, #12	@ tmp135, tmp134,
 1904 050a 9A42     		cmp	r2, r3	@ MEM[(const struct TCB_t *)xTaskToResume_16(D)].xStateListItem.pvContainer, tmp135
 1905 050c 29D1     		bne	.L122		@,
 1906              	.LVL123:
 1907              	.LBB106:
 1908              	.LBI106:
1797:../freertos/tasks.c **** 	{
 1909              		.loc 1 1797 20 is_stmt 1 view .LVU527
 1910              	.LBB107:
1812:../freertos/tasks.c **** 			{
 1911              		.loc 1 1812 4 view .LVU528
 1912              	@ ../freertos/tasks.c:1812: 			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventLis
1812:../freertos/tasks.c **** 			{
 1913              		.loc 1 1812 8 is_stmt 0 view .LVU529
 1914 050e 846A     		ldr	r4, [r0, #40]	@ _29, MEM[(const struct TCB_t *)xTaskToResume_16(D)].xEventListItem.pvContainer
 1915              	@ ../freertos/tasks.c:1812: 			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventLis
1812:../freertos/tasks.c **** 			{
 1916              		.loc 1 1812 6 view .LVU530
 1917 0510 05F1D400 		add	r0, r5, #212	@ tmp138, tmp134,
 1918              	.LVL124:
1812:../freertos/tasks.c **** 			{
 1919              		.loc 1 1812 6 view .LVU531
 1920 0514 8442     		cmp	r4, r0	@ _29, tmp138
 1921 0516 24D0     		beq	.L122		@,
1816:../freertos/tasks.c **** 				{
 1922              		.loc 1 1816 5 is_stmt 1 view .LVU532
 1923              	@ ../freertos/tasks.c:1816: 				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != 
1816:../freertos/tasks.c **** 				{
 1924              		.loc 1 1816 7 is_stmt 0 view .LVU533
 1925 0518 1CBB     		cbnz	r4, .L122	@ _29,
1818:../freertos/tasks.c **** 				}
 1926              		.loc 1 1818 6 is_stmt 1 view .LVU534
 1927              	.LVL125:
1818:../freertos/tasks.c **** 				}
 1928              		.loc 1 1818 6 is_stmt 0 view .LVU535
 1929              	.LBE107:
 1930              	.LBE106:
1832:../freertos/tasks.c **** 		}
 1931              		.loc 1 1832 28 is_stmt 1 view .LVU536
1835:../freertos/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 1932              		.loc 1 1835 3 view .LVU537
1835:../freertos/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 1933              		.loc 1 1835 3 is_stmt 0 view .LVU538
 1934              	.LBE105:
 1935              	.LBE104:
1927:../freertos/tasks.c **** 
 1936              		.loc 1 1927 39 is_stmt 1 view .LVU539
ARM GAS  /tmp/ccaP1CVS.s 			page 139


1930:../freertos/tasks.c **** 				{
 1937              		.loc 1 1930 5 view .LVU540
 1938              	@ ../freertos/tasks.c:1930: 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1930:../freertos/tasks.c **** 				{
 1939              		.loc 1 1930 30 is_stmt 0 view .LVU541
 1940 051a D5F8F030 		ldr	r3, [r5, #240]	@ uxSchedulerSuspended.49_2, uxSchedulerSuspended
 1941              	@ ../freertos/tasks.c:1930: 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1930:../freertos/tasks.c **** 				{
 1942              		.loc 1 1930 7 view .LVU542
 1943 051e EBB9     		cbnz	r3, .L119	@ uxSchedulerSuspended.49_2,
1934:../freertos/tasks.c **** 					{
 1944              		.loc 1 1934 6 is_stmt 1 view .LVU543
 1945              	@ ../freertos/tasks.c:1934: 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1934:../freertos/tasks.c **** 					{
 1946              		.loc 1 1934 43 is_stmt 0 view .LVU544
 1947 0520 6B68     		ldr	r3, [r5, #4]	@ pxCurrentTCB.50_4, pxCurrentTCB
 1948              	@ ../freertos/tasks.c:1934: 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1934:../freertos/tasks.c **** 					{
 1949              		.loc 1 1934 8 view .LVU545
 1950 0522 F46A     		ldr	r4, [r6, #44]	@ MEM[(struct TCB_t *)xTaskToResume_16(D)].uxPriority, MEM[(struct TCB_t *)xTask
 1951 0524 DB6A     		ldr	r3, [r3, #44]	@ pxCurrentTCB.50_4->uxPriority, pxCurrentTCB.50_4->uxPriority
 1952              	@ ../freertos/tasks.c:1943: 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1943:../freertos/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1953              		.loc 1 1943 15 view .LVU546
 1954 0526 06F10408 		add	r8, r6, #4	@ _6, xTaskToResume,
 1955              	@ ../freertos/tasks.c:1934: 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1934:../freertos/tasks.c **** 					{
 1956              		.loc 1 1934 8 view .LVU547
 1957 052a 9C42     		cmp	r4, r3	@ MEM[(struct TCB_t *)xTaskToResume_16(D)].uxPriority, pxCurrentTCB.50_4->uxPriority
 1958              	@ ../freertos/tasks.c:1943: 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1943:../freertos/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1959              		.loc 1 1943 15 view .LVU548
 1960 052c 4046     		mov	r0, r8	@, _6
 1961              	@ ../freertos/tasks.c:1934: 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1934:../freertos/tasks.c **** 					{
 1962              		.loc 1 1934 8 view .LVU549
 1963 052e 34BF     		ite	cc
 1964 0530 0024     		movcc	r4, #0	@ <retval>,
 1965 0532 0124     		movcs	r4, #1	@ <retval>,
 1966              	.LVL126:
1940:../freertos/tasks.c **** 					}
 1967              		.loc 1 1940 31 is_stmt 1 view .LVU550
1943:../freertos/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1968              		.loc 1 1943 6 view .LVU551
 1969              	@ ../freertos/tasks.c:1943: 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1943:../freertos/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1970              		.loc 1 1943 15 is_stmt 0 view .LVU552
 1971 0534 FFF7FEFF 		bl	uxListRemove		@
 1972              	.LVL127:
1944:../freertos/tasks.c **** 				}
 1973              		.loc 1 1944 6 is_stmt 1 view .LVU553
1944:../freertos/tasks.c **** 				}
 1974              		.loc 1 1944 6 view .LVU554
 1975 0538 0123     		movs	r3, #1	@ tmp147,
 1976 053a 1420     		movs	r0, #20	@ tmp152,
 1977 053c F26A     		ldr	r2, [r6, #44]	@ _7, MEM[(struct TCB_t *)xTaskToResume_16(D)].uxPriority
 1978 053e A968     		ldr	r1, [r5, #8]	@ uxTopReadyPriority.51_9, uxTopReadyPriority
ARM GAS  /tmp/ccaP1CVS.s 			page 140


 1979 0540 9340     		lsls	r3, r3, r2	@ tmp146, tmp147, _7
 1980 0542 0B43     		orrs	r3, r3, r1	@, _10, tmp146, uxTopReadyPriority.51_9
 1981 0544 4146     		mov	r1, r8	@, _6
 1982 0546 AB60     		str	r3, [r5, #8]	@ _10, uxTopReadyPriority
1944:../freertos/tasks.c **** 				}
 1983              		.loc 1 1944 6 view .LVU555
 1984 0548 4835     		adds	r5, r5, #72	@ tmp150, tmp134,
 1985 054a 00FB0250 		mla	r0, r0, r2, r5	@, tmp152, _7, tmp150
 1986              	.LVL128:
 1987              	.L123:
 1988              	@ ../freertos/tasks.c:1951: 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem )
1951:../freertos/tasks.c **** 				}
 1989              		.loc 1 1951 6 is_stmt 0 view .LVU556
 1990 054e FFF7FEFF 		bl	vListInsertEnd		@
 1991              	.LVL129:
 1992              	.L118:
1956:../freertos/tasks.c **** 			}
 1993              		.loc 1 1956 29 is_stmt 1 view .LVU557
1959:../freertos/tasks.c **** 
 1994              		.loc 1 1959 3 view .LVU558
 1995              	.LBB108:
 1996              	.LBI108:
 227:../freertos/portable/GCC/ARM_CM3/portmacro.h **** {
 1997              		.loc 2 227 30 view .LVU559
 1998              	.LBB109:
 1999              		.loc 2 229 2 view .LVU560
 2000              		.syntax unified
 2001              	@ 229 "../freertos/portable/GCC/ARM_CM3/portmacro.h" 1
 2002 0552 87F31188 			msr basepri, r7		@ ulOriginalBASEPRI
 2003              	@ 0 "" 2
 2004              	.LVL130:
 2005              		.loc 2 229 2 is_stmt 0 view .LVU561
 2006              		.thumb
 2007              		.syntax unified
 2008              	.LBE109:
 2009              	.LBE108:
1961:../freertos/tasks.c **** 	}
 2010              		.loc 1 1961 3 is_stmt 1 view .LVU562
 2011              	@ ../freertos/tasks.c:1962: 	}
1962:../freertos/tasks.c **** 
 2012              		.loc 1 1962 2 is_stmt 0 view .LVU563
 2013 0556 2046     		mov	r0, r4	@, <retval>
 2014 0558 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}	@
 2015              	.LVL131:
 2016              	.L119:
1951:../freertos/tasks.c **** 				}
 2017              		.loc 1 1951 6 is_stmt 1 view .LVU564
 2018 055c 06F11801 		add	r1, r6, #24	@, xTaskToResume,
 2019 0560 F5E7     		b	.L123		@
 2020              	.LVL132:
 2021              	.L122:
 2022              	@ ../freertos/tasks.c:1899: 	BaseType_t xYieldRequired = pdFALSE;
1899:../freertos/tasks.c **** 	TCB_t * const pxTCB = xTaskToResume;
 2023              		.loc 1 1899 13 is_stmt 0 view .LVU565
 2024 0562 0024     		movs	r4, #0	@ <retval>,
 2025 0564 F5E7     		b	.L118		@
 2026              	.L125:
ARM GAS  /tmp/ccaP1CVS.s 			page 141


 2027 0566 00BF     		.align	2
 2028              	.L124:
 2029 0568 00000000 		.word	.LANCHOR0
 2030              		.cfi_endproc
 2031              	.LFE18:
 2032              		.size	xTaskResumeFromISR, .-xTaskResumeFromISR
 2033              		.section	.rodata.str1.1,"aMS",%progbits,1
 2034              	.LC0:
 2035 0000 49444C45 		.ascii	"IDLE\000"
 2035      00
 2036              		.text
 2037              		.align	1
 2038              		.global	vTaskStartScheduler
 2039              		.syntax unified
 2040              		.thumb
 2041              		.thumb_func
 2042              		.type	vTaskStartScheduler, %function
 2043              	vTaskStartScheduler:
 2044              	.LFB19:
1968:../freertos/tasks.c **** BaseType_t xReturn;
 2045              		.loc 1 1968 1 is_stmt 1 view -0
 2046              		.cfi_startproc
 2047              		@ args = 0, pretend = 0, frame = 0
 2048              		@ frame_needed = 0, uses_anonymous_args = 0
1969:../freertos/tasks.c **** 
 2049              		.loc 1 1969 1 view .LVU567
2001:../freertos/tasks.c **** 								configIDLE_TASK_NAME,
 2050              		.loc 1 2001 3 view .LVU568
 2051              	@ ../freertos/tasks.c:1968: {
1968:../freertos/tasks.c **** BaseType_t xReturn;
 2052              		.loc 1 1968 1 is_stmt 0 view .LVU569
 2053 056c 37B5     		push	{r0, r1, r2, r4, r5, lr}	@
 2054              	.LCFI17:
 2055              		.cfi_def_cfa_offset 24
 2056              		.cfi_offset 4, -12
 2057              		.cfi_offset 5, -8
 2058              		.cfi_offset 14, -4
 2059              	@ ../freertos/tasks.c:2001: 		xReturn = xTaskCreate(	prvIdleTask,
2001:../freertos/tasks.c **** 								configIDLE_TASK_NAME,
 2060              		.loc 1 2001 13 view .LVU570
 2061 056e 0025     		movs	r5, #0	@ tmp120,
 2062 0570 124C     		ldr	r4, .L130	@ tmp118,
 2063 0572 7822     		movs	r2, #120	@,
 2064 0574 04F1F403 		add	r3, r4, #244	@ tmp119, tmp118,
 2065 0578 0193     		str	r3, [sp, #4]	@ tmp119,
 2066 057a 1149     		ldr	r1, .L130+4	@,
 2067 057c 2B46     		mov	r3, r5	@, tmp120
 2068 057e 1148     		ldr	r0, .L130+8	@,
 2069 0580 0095     		str	r5, [sp]	@ tmp120,
 2070 0582 FFF7FEFF 		bl	xTaskCreate		@
 2071              	.LVL133:
2012:../freertos/tasks.c **** 		{
 2072              		.loc 1 2012 3 is_stmt 1 view .LVU571
 2073              	@ ../freertos/tasks.c:2012: 		if( xReturn == pdPASS )
2012:../freertos/tasks.c **** 		{
 2074              		.loc 1 2012 5 is_stmt 0 view .LVU572
 2075 0586 0128     		cmp	r0, #1	@ tmp128,
ARM GAS  /tmp/ccaP1CVS.s 			page 142


 2076 0588 16D1     		bne	.L126		@,
2014:../freertos/tasks.c **** 		}
 2077              		.loc 1 2014 4 is_stmt 1 view .LVU573
 2078              	@ ../freertos/tasks.c:2014: 			xReturn = xTimerCreateTimerTask();
2014:../freertos/tasks.c **** 		}
 2079              		.loc 1 2014 14 is_stmt 0 view .LVU574
 2080 058a FFF7FEFF 		bl	xTimerCreateTimerTask		@
 2081              	.LVL134:
2018:../freertos/tasks.c **** 		}
 2082              		.loc 1 2018 28 is_stmt 1 view .LVU575
2023:../freertos/tasks.c **** 	{
 2083              		.loc 1 2023 2 view .LVU576
 2084              	@ ../freertos/tasks.c:2023: 	if( xReturn == pdPASS )
2023:../freertos/tasks.c **** 	{
 2085              		.loc 1 2023 4 is_stmt 0 view .LVU577
 2086 058e 0128     		cmp	r0, #1	@ xReturn,
 2087 0590 12D1     		bne	.L126		@,
2039:../freertos/tasks.c **** 
 2088              		.loc 1 2039 3 is_stmt 1 view .LVU578
 2089              	.LBB110:
 2090              	.LBI110:
 191:../freertos/portable/GCC/ARM_CM3/portmacro.h **** {
 2091              		.loc 2 191 30 view .LVU579
 2092              	.LBB111:
 193:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 
 2093              		.loc 2 193 1 view .LVU580
 195:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	(
 2094              		.loc 2 195 2 view .LVU581
 2095              		.syntax unified
 2096              	@ 195 "../freertos/portable/GCC/ARM_CM3/portmacro.h" 1
 2097 0592 4FF01003 			mov r3, #16													@ ulNewBASEPRI,
 2098 0596 83F31188 		msr basepri, r3												@ ulNewBASEPRI
 2099 059a BFF36F8F 		isb														
 2100 059e BFF34F8F 		dsb														
 2101              	
 2102              	@ 0 "" 2
 2103              		.thumb
 2104              		.syntax unified
 2105              	.LBE111:
 2106              	.LBE110:
2049:../freertos/tasks.c **** 		xSchedulerRunning = pdTRUE;
 2107              		.loc 1 2049 3 view .LVU582
 2108              	@ ../freertos/tasks.c:2049: 		xNextTaskUnblockTime = portMAX_DELAY;
2049:../freertos/tasks.c **** 		xSchedulerRunning = pdTRUE;
 2109              		.loc 1 2049 24 is_stmt 0 view .LVU583
 2110 05a2 4FF0FF33 		mov	r3, #-1	@ tmp123,
 2111 05a6 A362     		str	r3, [r4, #40]	@ tmp123, xNextTaskUnblockTime
2050:../freertos/tasks.c **** 		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 2112              		.loc 1 2050 3 is_stmt 1 view .LVU584
 2113              	@ ../freertos/tasks.c:2050: 		xSchedulerRunning = pdTRUE;
2050:../freertos/tasks.c **** 		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 2114              		.loc 1 2050 21 is_stmt 0 view .LVU585
 2115 05a8 C4F8E800 		str	r0, [r4, #232]	@ xReturn, xSchedulerRunning
2051:../freertos/tasks.c **** 
 2116              		.loc 1 2051 3 is_stmt 1 view .LVU586
 2117              	@ ../freertos/tasks.c:2051: 		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
2051:../freertos/tasks.c **** 
ARM GAS  /tmp/ccaP1CVS.s 			page 143


 2118              		.loc 1 2051 14 is_stmt 0 view .LVU587
 2119 05ac 2560     		str	r5, [r4]	@ tmp120, xTickCount
2059:../freertos/tasks.c **** 
 2120              		.loc 1 2059 43 is_stmt 1 view .LVU588
2061:../freertos/tasks.c **** 
 2121              		.loc 1 2061 26 view .LVU589
2065:../freertos/tasks.c **** 		{
 2122              		.loc 1 2065 3 view .LVU590
 2123              	@ ../freertos/tasks.c:2086: }
2086:../freertos/tasks.c **** /*-----------------------------------------------------------*/
 2124              		.loc 1 2086 1 is_stmt 0 view .LVU591
 2125 05ae 03B0     		add	sp, sp, #12	@,,
 2126              	.LCFI18:
 2127              		.cfi_remember_state
 2128              		.cfi_def_cfa_offset 12
 2129              		@ sp needed	@
 2130 05b0 BDE83040 		pop	{r4, r5, lr}	@
 2131              	.LCFI19:
 2132              		.cfi_restore 14
 2133              		.cfi_restore 5
 2134              		.cfi_restore 4
 2135              		.cfi_def_cfa_offset 0
 2136              	@ ../freertos/tasks.c:2065: 		if( xPortStartScheduler() != pdFALSE )
2065:../freertos/tasks.c **** 		{
 2137              		.loc 1 2065 7 view .LVU592
 2138 05b4 FFF7FEBF 		b	xPortStartScheduler		@
 2139              	.LVL135:
 2140              	.L126:
 2141              	.LCFI20:
 2142              		.cfi_restore_state
 2143              	@ ../freertos/tasks.c:2086: }
2086:../freertos/tasks.c **** /*-----------------------------------------------------------*/
 2144              		.loc 1 2086 1 view .LVU593
 2145 05b8 03B0     		add	sp, sp, #12	@,,
 2146              	.LCFI21:
 2147              		.cfi_def_cfa_offset 12
 2148              		@ sp needed	@
 2149 05ba 30BD     		pop	{r4, r5, pc}	@
 2150              	.L131:
 2151              		.align	2
 2152              	.L130:
 2153 05bc 00000000 		.word	.LANCHOR0
 2154 05c0 00000000 		.word	.LC0
 2155 05c4 00000000 		.word	prvIdleTask
 2156              		.cfi_endproc
 2157              	.LFE19:
 2158              		.size	vTaskStartScheduler, .-vTaskStartScheduler
 2159              		.align	1
 2160              		.global	vTaskEndScheduler
 2161              		.syntax unified
 2162              		.thumb
 2163              		.thumb_func
 2164              		.type	vTaskEndScheduler, %function
 2165              	vTaskEndScheduler:
 2166              	.LFB20:
2090:../freertos/tasks.c **** 	/* Stop the scheduler interrupts and call the portable scheduler end
 2167              		.loc 1 2090 1 is_stmt 1 view -0
ARM GAS  /tmp/ccaP1CVS.s 			page 144


 2168              		.cfi_startproc
 2169              		@ args = 0, pretend = 0, frame = 0
 2170              		@ frame_needed = 0, uses_anonymous_args = 0
 2171              		@ link register save eliminated.
2094:../freertos/tasks.c **** 	xSchedulerRunning = pdFALSE;
 2172              		.loc 1 2094 2 view .LVU595
 2173              	.LBB112:
 2174              	.LBI112:
 191:../freertos/portable/GCC/ARM_CM3/portmacro.h **** {
 2175              		.loc 2 191 30 view .LVU596
 2176              	.LBB113:
 193:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 
 2177              		.loc 2 193 1 view .LVU597
 195:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	(
 2178              		.loc 2 195 2 view .LVU598
 2179              		.syntax unified
 2180              	@ 195 "../freertos/portable/GCC/ARM_CM3/portmacro.h" 1
 2181 05c8 4FF01003 			mov r3, #16													@ ulNewBASEPRI,
 2182 05cc 83F31188 		msr basepri, r3												@ ulNewBASEPRI
 2183 05d0 BFF36F8F 		isb														
 2184 05d4 BFF34F8F 		dsb														
 2185              	
 2186              	@ 0 "" 2
 2187              		.thumb
 2188              		.syntax unified
 2189              	.LBE113:
 2190              	.LBE112:
2095:../freertos/tasks.c **** 	vPortEndScheduler();
 2191              		.loc 1 2095 2 view .LVU599
 2192              	@ ../freertos/tasks.c:2095: 	xSchedulerRunning = pdFALSE;
2095:../freertos/tasks.c **** 	vPortEndScheduler();
 2193              		.loc 1 2095 20 is_stmt 0 view .LVU600
 2194 05d8 0022     		movs	r2, #0	@ tmp116,
 2195 05da 024B     		ldr	r3, .L133	@ tmp115,
 2196 05dc C3F8E820 		str	r2, [r3, #232]	@ tmp116, xSchedulerRunning
2096:../freertos/tasks.c **** }
 2197              		.loc 1 2096 2 is_stmt 1 view .LVU601
 2198 05e0 FFF7FEBF 		b	vPortEndScheduler		@
 2199              	.LVL136:
 2200              	.L134:
 2201              		.align	2
 2202              	.L133:
 2203 05e4 00000000 		.word	.LANCHOR0
 2204              		.cfi_endproc
 2205              	.LFE20:
 2206              		.size	vTaskEndScheduler, .-vTaskEndScheduler
 2207              		.align	1
 2208              		.global	vTaskSuspendAll
 2209              		.syntax unified
 2210              		.thumb
 2211              		.thumb_func
 2212              		.type	vTaskSuspendAll, %function
 2213              	vTaskSuspendAll:
 2214              	.LFB21:
2101:../freertos/tasks.c **** 	/* A critical section is not required as the variable is of type
 2215              		.loc 1 2101 1 view -0
 2216              		.cfi_startproc
ARM GAS  /tmp/ccaP1CVS.s 			page 145


 2217              		@ args = 0, pretend = 0, frame = 0
 2218              		@ frame_needed = 0, uses_anonymous_args = 0
 2219              		@ link register save eliminated.
2106:../freertos/tasks.c **** 	portMEMORY_BARRIER();
 2220              		.loc 1 2106 2 view .LVU603
 2221 05e8 034A     		ldr	r2, .L136	@ tmp115,
 2222 05ea D2F8F030 		ldr	r3, [r2, #240]	@ uxSchedulerSuspended.55_1, uxSchedulerSuspended
 2223 05ee 0133     		adds	r3, r3, #1	@ _2, uxSchedulerSuspended.55_1,
 2224 05f0 C2F8F030 		str	r3, [r2, #240]	@ _2, uxSchedulerSuspended
2107:../freertos/tasks.c **** }
 2225              		.loc 1 2107 2 view .LVU604
 2226              	@ ../freertos/tasks.c:2108: }
2108:../freertos/tasks.c **** /*----------------------------------------------------------*/
 2227              		.loc 1 2108 1 is_stmt 0 view .LVU605
 2228 05f4 7047     		bx	lr	@
 2229              	.L137:
 2230 05f6 00BF     		.align	2
 2231              	.L136:
 2232 05f8 00000000 		.word	.LANCHOR0
 2233              		.cfi_endproc
 2234              	.LFE21:
 2235              		.size	vTaskSuspendAll, .-vTaskSuspendAll
 2236              		.align	1
 2237              		.global	xTaskGetTickCount
 2238              		.syntax unified
 2239              		.thumb
 2240              		.thumb_func
 2241              		.type	xTaskGetTickCount, %function
 2242              	xTaskGetTickCount:
 2243              	.LFB23:
2285:../freertos/tasks.c **** TickType_t xTicks;
 2244              		.loc 1 2285 1 is_stmt 1 view -0
 2245              		.cfi_startproc
 2246              		@ args = 0, pretend = 0, frame = 0
 2247              		@ frame_needed = 0, uses_anonymous_args = 0
 2248              		@ link register save eliminated.
2286:../freertos/tasks.c **** 
 2249              		.loc 1 2286 1 view .LVU607
2289:../freertos/tasks.c **** 	{
 2250              		.loc 1 2289 32 view .LVU608
2291:../freertos/tasks.c **** 	}
 2251              		.loc 1 2291 3 view .LVU609
 2252              	@ ../freertos/tasks.c:2291: 		xTicks = xTickCount;
2291:../freertos/tasks.c **** 	}
 2253              		.loc 1 2291 10 is_stmt 0 view .LVU610
 2254 05fc 014B     		ldr	r3, .L139	@ tmp114,
 2255 05fe 1868     		ldr	r0, [r3]	@ <retval>, xTickCount
 2256              	.LVL137:
2293:../freertos/tasks.c **** 
 2257              		.loc 1 2293 31 is_stmt 1 view .LVU611
2295:../freertos/tasks.c **** }
 2258              		.loc 1 2295 2 view .LVU612
 2259              	@ ../freertos/tasks.c:2296: }
2296:../freertos/tasks.c **** /*-----------------------------------------------------------*/
 2260              		.loc 1 2296 1 is_stmt 0 view .LVU613
 2261 0600 7047     		bx	lr	@
 2262              	.L140:
ARM GAS  /tmp/ccaP1CVS.s 			page 146


 2263 0602 00BF     		.align	2
 2264              	.L139:
 2265 0604 00000000 		.word	.LANCHOR0
 2266              		.cfi_endproc
 2267              	.LFE23:
 2268              		.size	xTaskGetTickCount, .-xTaskGetTickCount
 2269              		.align	1
 2270              		.global	xTaskGetTickCountFromISR
 2271              		.syntax unified
 2272              		.thumb
 2273              		.thumb_func
 2274              		.type	xTaskGetTickCountFromISR, %function
 2275              	xTaskGetTickCountFromISR:
 2276              	.LFB69:
 2277              		.cfi_startproc
 2278              		@ args = 0, pretend = 0, frame = 0
 2279              		@ frame_needed = 0, uses_anonymous_args = 0
 2280              		@ link register save eliminated.
 2281 0608 014B     		ldr	r3, .L142	@ tmp114,
 2282 060a 1868     		ldr	r0, [r3]	@ <retval>, xTickCount
 2283 060c 7047     		bx	lr	@
 2284              	.L143:
 2285 060e 00BF     		.align	2
 2286              	.L142:
 2287 0610 00000000 		.word	.LANCHOR0
 2288              		.cfi_endproc
 2289              	.LFE69:
 2290              		.size	xTaskGetTickCountFromISR, .-xTaskGetTickCountFromISR
 2291              		.align	1
 2292              		.global	uxTaskGetNumberOfTasks
 2293              		.syntax unified
 2294              		.thumb
 2295              		.thumb_func
 2296              		.type	uxTaskGetNumberOfTasks, %function
 2297              	uxTaskGetNumberOfTasks:
 2298              	.LFB25:
2331:../freertos/tasks.c **** 	/* A critical section is not required because the variables are of type
 2299              		.loc 1 2331 1 is_stmt 1 view -0
 2300              		.cfi_startproc
 2301              		@ args = 0, pretend = 0, frame = 0
 2302              		@ frame_needed = 0, uses_anonymous_args = 0
 2303              		@ link register save eliminated.
2334:../freertos/tasks.c **** }
 2304              		.loc 1 2334 2 view .LVU615
 2305              	@ ../freertos/tasks.c:2334: 	return uxCurrentNumberOfTasks;
2334:../freertos/tasks.c **** }
 2306              		.loc 1 2334 9 is_stmt 0 view .LVU616
 2307 0614 014B     		ldr	r3, .L145	@ tmp114,
 2308 0616 186C     		ldr	r0, [r3, #64]	@ <retval>, uxCurrentNumberOfTasks
 2309              	@ ../freertos/tasks.c:2335: }
2335:../freertos/tasks.c **** /*-----------------------------------------------------------*/
 2310              		.loc 1 2335 1 view .LVU617
 2311 0618 7047     		bx	lr	@
 2312              	.L146:
 2313 061a 00BF     		.align	2
 2314              	.L145:
 2315 061c 00000000 		.word	.LANCHOR0
ARM GAS  /tmp/ccaP1CVS.s 			page 147


 2316              		.cfi_endproc
 2317              	.LFE25:
 2318              		.size	uxTaskGetNumberOfTasks, .-uxTaskGetNumberOfTasks
 2319              		.align	1
 2320              		.global	pcTaskGetName
 2321              		.syntax unified
 2322              		.thumb
 2323              		.thumb_func
 2324              		.type	pcTaskGetName, %function
 2325              	pcTaskGetName:
 2326              	.LVL138:
 2327              	.LFB26:
2339:../freertos/tasks.c **** TCB_t *pxTCB;
 2328              		.loc 1 2339 1 is_stmt 1 view -0
 2329              		.cfi_startproc
 2330              		@ args = 0, pretend = 0, frame = 0
 2331              		@ frame_needed = 0, uses_anonymous_args = 0
 2332              		@ link register save eliminated.
2340:../freertos/tasks.c **** 
 2333              		.loc 1 2340 1 view .LVU619
2344:../freertos/tasks.c **** 	configASSERT( pxTCB );
 2334              		.loc 1 2344 2 view .LVU620
 2335              	@ ../freertos/tasks.c:2344: 	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
2344:../freertos/tasks.c **** 	configASSERT( pxTCB );
 2336              		.loc 1 2344 10 is_stmt 0 view .LVU621
 2337 0620 08B9     		cbnz	r0, .L148	@ xTaskToQuery,
 2338              	@ ../freertos/tasks.c:2344: 	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
2344:../freertos/tasks.c **** 	configASSERT( pxTCB );
 2339              		.loc 1 2344 10 discriminator 1 view .LVU622
 2340 0622 024B     		ldr	r3, .L149	@ tmp115,
 2341 0624 5868     		ldr	r0, [r3, #4]	@ xTaskToQuery, pxCurrentTCB
 2342              	.LVL139:
 2343              	.L148:
2345:../freertos/tasks.c **** 	return &( pxTCB->pcTaskName[ 0 ] );
 2344              		.loc 1 2345 23 is_stmt 1 discriminator 4 view .LVU623
2346:../freertos/tasks.c **** }
 2345              		.loc 1 2346 2 discriminator 4 view .LVU624
 2346              	@ ../freertos/tasks.c:2347: }
2347:../freertos/tasks.c **** /*-----------------------------------------------------------*/
 2347              		.loc 1 2347 1 is_stmt 0 discriminator 4 view .LVU625
 2348 0626 3430     		adds	r0, r0, #52	@, xTaskToQuery,
 2349              	.LVL140:
2347:../freertos/tasks.c **** /*-----------------------------------------------------------*/
 2350              		.loc 1 2347 1 discriminator 4 view .LVU626
 2351 0628 7047     		bx	lr	@
 2352              	.L150:
 2353 062a 00BF     		.align	2
 2354              	.L149:
 2355 062c 00000000 		.word	.LANCHOR0
 2356              		.cfi_endproc
 2357              	.LFE26:
 2358              		.size	pcTaskGetName, .-pcTaskGetName
 2359              		.align	1
 2360              		.global	xTaskIncrementTick
 2361              		.syntax unified
 2362              		.thumb
 2363              		.thumb_func
ARM GAS  /tmp/ccaP1CVS.s 			page 148


 2364              		.type	xTaskIncrementTick, %function
 2365              	xTaskIncrementTick:
 2366              	.LFB28:
2666:../freertos/tasks.c **** TCB_t * pxTCB;
 2367              		.loc 1 2666 1 is_stmt 1 view -0
 2368              		.cfi_startproc
 2369              		@ args = 0, pretend = 0, frame = 0
 2370              		@ frame_needed = 0, uses_anonymous_args = 0
2667:../freertos/tasks.c **** TickType_t xItemValue;
 2371              		.loc 1 2667 1 view .LVU628
2668:../freertos/tasks.c **** BaseType_t xSwitchRequired = pdFALSE;
 2372              		.loc 1 2668 1 view .LVU629
2669:../freertos/tasks.c **** 
 2373              		.loc 1 2669 1 view .LVU630
 2374              	.LVL141:
2674:../freertos/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 2375              		.loc 1 2674 40 view .LVU631
2675:../freertos/tasks.c **** 	{
 2376              		.loc 1 2675 2 view .LVU632
 2377              	@ ../freertos/tasks.c:2666: {
2666:../freertos/tasks.c **** TCB_t * pxTCB;
 2378              		.loc 1 2666 1 is_stmt 0 view .LVU633
 2379 0630 2DE9F84F 		push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 2380              	.LCFI22:
 2381              		.cfi_def_cfa_offset 40
 2382              		.cfi_offset 3, -40
 2383              		.cfi_offset 4, -36
 2384              		.cfi_offset 5, -32
 2385              		.cfi_offset 6, -28
 2386              		.cfi_offset 7, -24
 2387              		.cfi_offset 8, -20
 2388              		.cfi_offset 9, -16
 2389              		.cfi_offset 10, -12
 2390              		.cfi_offset 11, -8
 2391              		.cfi_offset 14, -4
 2392              	@ ../freertos/tasks.c:2675: 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
2675:../freertos/tasks.c **** 	{
 2393              		.loc 1 2675 27 view .LVU634
 2394 0634 2F4C     		ldr	r4, .L169	@ tmp146,
 2395 0636 D4F8F030 		ldr	r3, [r4, #240]	@ uxSchedulerSuspended.66_1, uxSchedulerSuspended
 2396              	@ ../freertos/tasks.c:2675: 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
2675:../freertos/tasks.c **** 	{
 2397              		.loc 1 2675 4 view .LVU635
 2398 063a 002B     		cmp	r3, #0	@ uxSchedulerSuspended.66_1
 2399 063c 53D1     		bne	.L152	@
 2400              	.LBB114:
2679:../freertos/tasks.c **** 
 2401              		.loc 1 2679 3 is_stmt 1 view .LVU636
 2402              	@ ../freertos/tasks.c:2679: 		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
2679:../freertos/tasks.c **** 
 2403              		.loc 1 2679 49 is_stmt 0 view .LVU637
 2404 063e 2768     		ldr	r7, [r4]	@ xTickCount.67_2, xTickCount
 2405              	@ ../freertos/tasks.c:2679: 		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
2679:../freertos/tasks.c **** 
 2406              		.loc 1 2679 20 view .LVU638
 2407 0640 0137     		adds	r7, r7, #1	@ xConstTickCount, xTickCount.67_2,
 2408              	.LVL142:
ARM GAS  /tmp/ccaP1CVS.s 			page 149


2683:../freertos/tasks.c **** 
 2409              		.loc 1 2683 3 is_stmt 1 view .LVU639
 2410              	@ ../freertos/tasks.c:2683: 		xTickCount = xConstTickCount;
2683:../freertos/tasks.c **** 
 2411              		.loc 1 2683 14 is_stmt 0 view .LVU640
 2412 0642 2760     		str	r7, [r4]	@ xConstTickCount, xTickCount
2685:../freertos/tasks.c **** 		{
 2413              		.loc 1 2685 3 is_stmt 1 view .LVU641
 2414              	@ ../freertos/tasks.c:2685: 		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not
2685:../freertos/tasks.c **** 		{
 2415              		.loc 1 2685 5 is_stmt 0 view .LVU642
 2416 0644 57B9     		cbnz	r7, .L153	@ xConstTickCount,
 2417              	.LBB115:
2687:../freertos/tasks.c **** 		}
 2418              		.loc 1 2687 4 is_stmt 1 view .LVU643
2687:../freertos/tasks.c **** 		}
 2419              		.loc 1 2687 4 view .LVU644
2687:../freertos/tasks.c **** 		}
 2420              		.loc 1 2687 4 view .LVU645
 2421 0646 636A     		ldr	r3, [r4, #36]	@ pxTemp, pxDelayedTaskList
 2422              	.LVL143:
2687:../freertos/tasks.c **** 		}
 2423              		.loc 1 2687 4 view .LVU646
 2424 0648 226A     		ldr	r2, [r4, #32]	@ pxOverflowDelayedTaskList.68_3, pxOverflowDelayedTaskList
 2425 064a 6262     		str	r2, [r4, #36]	@ pxOverflowDelayedTaskList.68_3, pxDelayedTaskList
2687:../freertos/tasks.c **** 		}
 2426              		.loc 1 2687 4 view .LVU647
 2427 064c 2362     		str	r3, [r4, #32]	@ pxTemp, pxOverflowDelayedTaskList
2687:../freertos/tasks.c **** 		}
 2428              		.loc 1 2687 4 view .LVU648
 2429 064e D4F8F830 		ldr	r3, [r4, #248]	@ xNumOfOverflows.69_4, xNumOfOverflows
 2430              	.LVL144:
2687:../freertos/tasks.c **** 		}
 2431              		.loc 1 2687 4 is_stmt 0 view .LVU649
 2432 0652 0133     		adds	r3, r3, #1	@ _5, xNumOfOverflows.69_4,
 2433 0654 C4F8F830 		str	r3, [r4, #248]	@ _5, xNumOfOverflows
 2434              	.LVL145:
2687:../freertos/tasks.c **** 		}
 2435              		.loc 1 2687 4 is_stmt 1 view .LVU650
 2436 0658 FFF708FD 		bl	prvResetNextTaskUnblockTime		@
 2437              	.LVL146:
 2438              	.LBE115:
2687:../freertos/tasks.c **** 		}
 2439              		.loc 1 2687 30 view .LVU651
 2440              	.L153:
2691:../freertos/tasks.c **** 		}
 2441              		.loc 1 2691 28 view .LVU652
2698:../freertos/tasks.c **** 		{
 2442              		.loc 1 2698 3 view .LVU653
 2443              	@ ../freertos/tasks.c:2698: 		if( xConstTickCount >= xNextTaskUnblockTime )
2698:../freertos/tasks.c **** 		{
 2444              		.loc 1 2698 23 is_stmt 0 view .LVU654
 2445 065c A36A     		ldr	r3, [r4, #40]	@ xNextTaskUnblockTime.70_6, xNextTaskUnblockTime
 2446              	.LBE114:
 2447              	@ ../freertos/tasks.c:2669: BaseType_t xSwitchRequired = pdFALSE;
2669:../freertos/tasks.c **** 
 2448              		.loc 1 2669 12 view .LVU655
ARM GAS  /tmp/ccaP1CVS.s 			page 150


 2449 065e 0025     		movs	r5, #0	@ <retval>,
 2450              	.LBB116:
 2451              	@ ../freertos/tasks.c:2698: 		if( xConstTickCount >= xNextTaskUnblockTime )
2698:../freertos/tasks.c **** 		{
 2452              		.loc 1 2698 5 view .LVU656
 2453 0660 BB42     		cmp	r3, r7	@ xNextTaskUnblockTime.70_6, xConstTickCount
 2454 0662 10D9     		bls	.L162		@,
 2455              	.LVL147:
 2456              	.L155:
2781:../freertos/tasks.c **** 			{
 2457              		.loc 1 2781 4 is_stmt 1 view .LVU657
 2458              	@ ../freertos/tasks.c:2781: 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxP
2781:../freertos/tasks.c **** 			{
 2459              		.loc 1 2781 8 is_stmt 0 view .LVU658
 2460 0664 1422     		movs	r2, #20	@ tmp179,
 2461 0666 6368     		ldr	r3, [r4, #4]	@ pxCurrentTCB.75_23, pxCurrentTCB
 2462 0668 DB6A     		ldr	r3, [r3, #44]	@ _24, pxCurrentTCB.75_23->uxPriority
 2463 066a 02FB0343 		mla	r3, r2, r3, r4	@ tmp180, tmp179, _24, tmp146
 2464 066e 9B6C     		ldr	r3, [r3, #72]	@ _25, pxReadyTasksLists[_24].uxNumberOfItems
 2465              	@ ../freertos/tasks.c:2783: 				xSwitchRequired = pdTRUE;
2783:../freertos/tasks.c **** 			}
 2466              		.loc 1 2783 21 view .LVU659
 2467 0670 022B     		cmp	r3, #2	@ _25,
 2468 0672 28BF     		it	cs
 2469 0674 0125     		movcs	r5, #1	@ <retval>,
 2470              	.LVL148:
 2471              	.L160:
2783:../freertos/tasks.c **** 			}
 2472              		.loc 1 2783 21 view .LVU660
 2473              	.LBE116:
2822:../freertos/tasks.c **** 		{
 2474              		.loc 1 2822 3 is_stmt 1 view .LVU661
 2475              	@ ../freertos/tasks.c:2822: 		if( xYieldPending != pdFALSE )
2822:../freertos/tasks.c **** 		{
 2476              		.loc 1 2822 21 is_stmt 0 view .LVU662
 2477 0676 D4F80031 		ldr	r3, [r4, #256]	@ xYieldPending.77_28, xYieldPending
 2478              	@ ../freertos/tasks.c:2824: 			xSwitchRequired = pdTRUE;
2824:../freertos/tasks.c **** 		}
 2479              		.loc 1 2824 20 view .LVU663
 2480 067a 002B     		cmp	r3, #0	@ xYieldPending.77_28,
 2481              	@ ../freertos/tasks.c:2834: }
2834:../freertos/tasks.c **** /*-----------------------------------------------------------*/
 2482              		.loc 1 2834 1 view .LVU664
 2483 067c 0CBF     		ite	eq
 2484 067e 2846     		moveq	r0, r5	@, <retval>
 2485 0680 0120     		movne	r0, #1	@,
 2486 0682 BDE8F88F 		pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 2487              	.LVL149:
 2488              	.L162:
 2489              	.LBB117:
 2490              	@ ../freertos/tasks.c:2752: 					prvAddTaskToReadyList( pxTCB );
2752:../freertos/tasks.c **** 
 2491              		.loc 1 2752 6 view .LVU665
 2492 0686 4FF0010A 		mov	r10, #1	@ tmp189,
 2493 068a 4FF01409 		mov	r9, #20	@ tmp191,
 2494 068e DFF86880 		ldr	r8, .L169+4	@ tmp190,
 2495              	.LVL150:
ARM GAS  /tmp/ccaP1CVS.s 			page 151


 2496              	.L154:
2700:../freertos/tasks.c **** 			{
 2497              		.loc 1 2700 4 is_stmt 1 view .LVU666
2702:../freertos/tasks.c **** 				{
 2498              		.loc 1 2702 5 view .LVU667
 2499              	@ ../freertos/tasks.c:2702: 				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
2702:../freertos/tasks.c **** 				{
 2500              		.loc 1 2702 9 is_stmt 0 view .LVU668
 2501 0692 636A     		ldr	r3, [r4, #36]	@ pxDelayedTaskList.71_7, pxDelayedTaskList
 2502 0694 1B68     		ldr	r3, [r3]	@ _8, pxDelayedTaskList.71_7->uxNumberOfItems
 2503              	@ ../freertos/tasks.c:2702: 				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
2702:../freertos/tasks.c **** 				{
 2504              		.loc 1 2702 7 view .LVU669
 2505 0696 1BB9     		cbnz	r3, .L156	@ _8,
2709:../freertos/tasks.c **** 					break;
 2506              		.loc 1 2709 6 is_stmt 1 view .LVU670
 2507              	@ ../freertos/tasks.c:2709: 					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception
2709:../freertos/tasks.c **** 					break;
 2508              		.loc 1 2709 27 is_stmt 0 view .LVU671
 2509 0698 4FF0FF33 		mov	r3, #-1	@ tmp158,
 2510              	.L168:
2728:../freertos/tasks.c **** 						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks
 2511              		.loc 1 2728 7 is_stmt 1 view .LVU672
 2512              	@ ../freertos/tasks.c:2728: 						xNextTaskUnblockTime = xItemValue;
2728:../freertos/tasks.c **** 						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks
 2513              		.loc 1 2728 28 is_stmt 0 view .LVU673
 2514 069c A362     		str	r3, [r4, #40]	@ xItemValue, xNextTaskUnblockTime
2729:../freertos/tasks.c **** 					}
 2515              		.loc 1 2729 7 is_stmt 1 view .LVU674
 2516 069e E1E7     		b	.L155		@
 2517              	.L156:
2718:../freertos/tasks.c **** 					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 2518              		.loc 1 2718 6 view .LVU675
 2519              	@ ../freertos/tasks.c:2718: 					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !
2718:../freertos/tasks.c **** 					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 2520              		.loc 1 2718 14 is_stmt 0 view .LVU676
 2521 06a0 636A     		ldr	r3, [r4, #36]	@ pxDelayedTaskList.72_9, pxDelayedTaskList
 2522              	@ ../freertos/tasks.c:2718: 					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !
2718:../freertos/tasks.c **** 					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 2523              		.loc 1 2718 12 view .LVU677
 2524 06a2 DB68     		ldr	r3, [r3, #12]	@ pxDelayedTaskList.72_9->xListEnd.pxNext, pxDelayedTaskList.72_9->xListEnd.pxNe
 2525 06a4 DE68     		ldr	r6, [r3, #12]	@ pxTCB, _10->pvOwner
 2526              	.LVL151:
2719:../freertos/tasks.c **** 
 2527              		.loc 1 2719 6 is_stmt 1 view .LVU678
 2528              	@ ../freertos/tasks.c:2719: 					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) )
2719:../freertos/tasks.c **** 
 2529              		.loc 1 2719 17 is_stmt 0 view .LVU679
 2530 06a6 7368     		ldr	r3, [r6, #4]	@ xItemValue, pxTCB_48->xStateListItem.xItemValue
 2531              	.LVL152:
2721:../freertos/tasks.c **** 					{
 2532              		.loc 1 2721 6 is_stmt 1 view .LVU680
 2533              	@ ../freertos/tasks.c:2721: 					if( xConstTickCount < xItemValue )
2721:../freertos/tasks.c **** 					{
 2534              		.loc 1 2721 8 is_stmt 0 view .LVU681
 2535 06a8 9F42     		cmp	r7, r3	@ xConstTickCount, xItemValue
 2536 06aa F7D3     		bcc	.L168		@,
ARM GAS  /tmp/ccaP1CVS.s 			page 152


2733:../freertos/tasks.c **** 					}
 2537              		.loc 1 2733 31 is_stmt 1 view .LVU682
2737:../freertos/tasks.c **** 
 2538              		.loc 1 2737 6 view .LVU683
 2539              	@ ../freertos/tasks.c:2737: 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2737:../freertos/tasks.c **** 
 2540              		.loc 1 2737 15 is_stmt 0 view .LVU684
 2541 06ac 06F1040B 		add	fp, r6, #4	@ _11, pxTCB,
 2542 06b0 5846     		mov	r0, fp	@, _11
 2543 06b2 FFF7FEFF 		bl	uxListRemove		@
 2544              	.LVL153:
2741:../freertos/tasks.c **** 					{
 2545              		.loc 1 2741 6 is_stmt 1 view .LVU685
 2546              	@ ../freertos/tasks.c:2741: 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL 
2741:../freertos/tasks.c **** 					{
 2547              		.loc 1 2741 8 is_stmt 0 view .LVU686
 2548 06b6 B36A     		ldr	r3, [r6, #40]	@ pxTCB_48->xEventListItem.pvContainer, pxTCB_48->xEventListItem.pvContainer
 2549 06b8 1BB1     		cbz	r3, .L158	@ pxTCB_48->xEventListItem.pvContainer,
2743:../freertos/tasks.c **** 					}
 2550              		.loc 1 2743 7 is_stmt 1 view .LVU687
 2551              	@ ../freertos/tasks.c:2743: 						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2743:../freertos/tasks.c **** 					}
 2552              		.loc 1 2743 16 is_stmt 0 view .LVU688
 2553 06ba 06F11800 		add	r0, r6, #24	@, pxTCB,
 2554 06be FFF7FEFF 		bl	uxListRemove		@
 2555              	.LVL154:
 2556              	.L158:
2747:../freertos/tasks.c **** 					}
 2557              		.loc 1 2747 31 is_stmt 1 view .LVU689
2752:../freertos/tasks.c **** 
 2558              		.loc 1 2752 6 view .LVU690
2752:../freertos/tasks.c **** 
 2559              		.loc 1 2752 6 view .LVU691
 2560 06c2 F06A     		ldr	r0, [r6, #44]	@ _14, pxTCB_48->uxPriority
 2561 06c4 A268     		ldr	r2, [r4, #8]	@ uxTopReadyPriority.73_16, uxTopReadyPriority
 2562 06c6 0AFA00F3 		lsl	r3, r10, r0	@ tmp165, tmp189, _14
 2563 06ca 1343     		orrs	r3, r3, r2	@, _17, tmp165, uxTopReadyPriority.73_16
 2564 06cc 5946     		mov	r1, fp	@, _11
 2565 06ce 09FB0080 		mla	r0, r9, r0, r8	@, tmp191, _14, tmp190
 2566 06d2 A360     		str	r3, [r4, #8]	@ _17, uxTopReadyPriority
2752:../freertos/tasks.c **** 
 2567              		.loc 1 2752 6 view .LVU692
 2568 06d4 FFF7FEFF 		bl	vListInsertEnd		@
 2569              	.LVL155:
2752:../freertos/tasks.c **** 
 2570              		.loc 1 2752 36 view .LVU693
2762:../freertos/tasks.c **** 						{
 2571              		.loc 1 2762 7 view .LVU694
 2572              	@ ../freertos/tasks.c:2762: 						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
2762:../freertos/tasks.c **** 						{
 2573              		.loc 1 2762 44 is_stmt 0 view .LVU695
 2574 06d8 6368     		ldr	r3, [r4, #4]	@ pxCurrentTCB.74_21, pxCurrentTCB
 2575              	@ ../freertos/tasks.c:2762: 						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
2762:../freertos/tasks.c **** 						{
 2576              		.loc 1 2762 9 view .LVU696
 2577 06da F26A     		ldr	r2, [r6, #44]	@ pxTCB_48->uxPriority, pxTCB_48->uxPriority
 2578 06dc DB6A     		ldr	r3, [r3, #44]	@ pxCurrentTCB.74_21->uxPriority, pxCurrentTCB.74_21->uxPriority
ARM GAS  /tmp/ccaP1CVS.s 			page 153


 2579              	@ ../freertos/tasks.c:2764: 							xSwitchRequired = pdTRUE;
2764:../freertos/tasks.c **** 						}
 2580              		.loc 1 2764 24 view .LVU697
 2581 06de 9A42     		cmp	r2, r3	@ pxTCB_48->uxPriority, pxCurrentTCB.74_21->uxPriority
 2582 06e0 28BF     		it	cs		@
 2583 06e2 0125     		movcs	r5, #1	@, <retval>,
 2584              	.LVL156:
2764:../freertos/tasks.c **** 						}
 2585              		.loc 1 2764 24 view .LVU698
 2586 06e4 D5E7     		b	.L154		@
 2587              	.LVL157:
 2588              	.L152:
2764:../freertos/tasks.c **** 						}
 2589              		.loc 1 2764 24 view .LVU699
 2590              	.LBE117:
2809:../freertos/tasks.c **** 
 2591              		.loc 1 2809 3 is_stmt 1 view .LVU700
 2592 06e6 D4F8FC30 		ldr	r3, [r4, #252]	@ uxPendedTicks.76_26, uxPendedTicks
 2593              	@ ../freertos/tasks.c:2669: BaseType_t xSwitchRequired = pdFALSE;
2669:../freertos/tasks.c **** 
 2594              		.loc 1 2669 12 is_stmt 0 view .LVU701
 2595 06ea 0025     		movs	r5, #0	@ <retval>,
 2596              	@ ../freertos/tasks.c:2809: 		++uxPendedTicks;
2809:../freertos/tasks.c **** 
 2597              		.loc 1 2809 3 view .LVU702
 2598 06ec 0133     		adds	r3, r3, #1	@ _27, uxPendedTicks.76_26,
 2599 06ee C4F8FC30 		str	r3, [r4, #252]	@ _27, uxPendedTicks
 2600 06f2 C0E7     		b	.L160		@
 2601              	.L170:
 2602              		.align	2
 2603              	.L169:
 2604 06f4 00000000 		.word	.LANCHOR0
 2605 06f8 48000000 		.word	.LANCHOR0+72
 2606              		.cfi_endproc
 2607              	.LFE28:
 2608              		.size	xTaskIncrementTick, .-xTaskIncrementTick
 2609              		.align	1
 2610              		.global	xTaskResumeAll
 2611              		.syntax unified
 2612              		.thumb
 2613              		.thumb_func
 2614              		.type	xTaskResumeAll, %function
 2615              	xTaskResumeAll:
 2616              	.LFB22:
2175:../freertos/tasks.c **** TCB_t *pxTCB = NULL;
 2617              		.loc 1 2175 1 is_stmt 1 view -0
 2618              		.cfi_startproc
 2619              		@ args = 0, pretend = 0, frame = 0
 2620              		@ frame_needed = 0, uses_anonymous_args = 0
2176:../freertos/tasks.c **** BaseType_t xAlreadyYielded = pdFALSE;
 2621              		.loc 1 2176 1 view .LVU704
 2622              	.LVL158:
2177:../freertos/tasks.c **** 
 2623              		.loc 1 2177 1 view .LVU705
2181:../freertos/tasks.c **** 
 2624              		.loc 1 2181 38 view .LVU706
2188:../freertos/tasks.c **** 	{
ARM GAS  /tmp/ccaP1CVS.s 			page 154


 2625              		.loc 1 2188 2 view .LVU707
 2626              	@ ../freertos/tasks.c:2175: {
2175:../freertos/tasks.c **** TCB_t *pxTCB = NULL;
 2627              		.loc 1 2175 1 is_stmt 0 view .LVU708
 2628 06fc 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}	@
 2629              	.LCFI23:
 2630              		.cfi_def_cfa_offset 32
 2631              		.cfi_offset 3, -32
 2632              		.cfi_offset 4, -28
 2633              		.cfi_offset 5, -24
 2634              		.cfi_offset 6, -20
 2635              		.cfi_offset 7, -16
 2636              		.cfi_offset 8, -12
 2637              		.cfi_offset 9, -8
 2638              		.cfi_offset 14, -4
 2639              	@ ../freertos/tasks.c:2190: 		--uxSchedulerSuspended;
2190:../freertos/tasks.c **** 
 2640              		.loc 1 2190 3 view .LVU709
 2641 0700 2D4C     		ldr	r4, .L196	@ tmp135,
 2642              	@ ../freertos/tasks.c:2188: 	taskENTER_CRITICAL();
2188:../freertos/tasks.c **** 	{
 2643              		.loc 1 2188 2 view .LVU710
 2644 0702 FFF7FEFF 		bl	vPortEnterCritical		@
 2645              	.LVL159:
2190:../freertos/tasks.c **** 
 2646              		.loc 1 2190 3 is_stmt 1 view .LVU711
 2647 0706 D4F8F030 		ldr	r3, [r4, #240]	@ uxSchedulerSuspended.56_1, uxSchedulerSuspended
 2648 070a 013B     		subs	r3, r3, #1	@ _2, uxSchedulerSuspended.56_1,
 2649 070c C4F8F030 		str	r3, [r4, #240]	@ _2, uxSchedulerSuspended
2192:../freertos/tasks.c **** 		{
 2650              		.loc 1 2192 3 view .LVU712
 2651              	@ ../freertos/tasks.c:2192: 		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
2192:../freertos/tasks.c **** 		{
 2652              		.loc 1 2192 28 is_stmt 0 view .LVU713
 2653 0710 D4F8F050 		ldr	r5, [r4, #240]	@ uxSchedulerSuspended.57_3, uxSchedulerSuspended
 2654              	@ ../freertos/tasks.c:2192: 		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
2192:../freertos/tasks.c **** 		{
 2655              		.loc 1 2192 5 view .LVU714
 2656 0714 2DB1     		cbz	r5, .L172	@ uxSchedulerSuspended.57_3,
 2657              	.LVL160:
 2658              	.L175:
 2659              	@ ../freertos/tasks.c:2177: BaseType_t xAlreadyYielded = pdFALSE;
2177:../freertos/tasks.c **** 
 2660              		.loc 1 2177 12 view .LVU715
 2661 0716 0024     		movs	r4, #0	@ <retval>,
 2662              	.LVL161:
 2663              	.L173:
2275:../freertos/tasks.c **** 		}
 2664              		.loc 1 2275 28 is_stmt 1 view .LVU716
2278:../freertos/tasks.c **** 
 2665              		.loc 1 2278 2 view .LVU717
 2666 0718 FFF7FEFF 		bl	vPortExitCritical		@
 2667              	.LVL162:
2280:../freertos/tasks.c **** }
 2668              		.loc 1 2280 2 view .LVU718
 2669              	@ ../freertos/tasks.c:2281: }
2281:../freertos/tasks.c **** /*-----------------------------------------------------------*/
ARM GAS  /tmp/ccaP1CVS.s 			page 155


 2670              		.loc 1 2281 1 is_stmt 0 view .LVU719
 2671 071c 2046     		mov	r0, r4	@, <retval>
 2672 071e BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}	@
 2673              	.LVL163:
 2674              	.L172:
2194:../freertos/tasks.c **** 			{
 2675              		.loc 1 2194 4 is_stmt 1 view .LVU720
 2676              	@ ../freertos/tasks.c:2194: 			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
2194:../freertos/tasks.c **** 			{
 2677              		.loc 1 2194 31 is_stmt 0 view .LVU721
 2678 0722 236C     		ldr	r3, [r4, #64]	@ uxCurrentNumberOfTasks.58_4, uxCurrentNumberOfTasks
 2679              	@ ../freertos/tasks.c:2194: 			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
2194:../freertos/tasks.c **** 			{
 2680              		.loc 1 2194 6 view .LVU722
 2681 0724 002B     		cmp	r3, #0	@ uxCurrentNumberOfTasks.58_4
 2682 0726 F6D0     		beq	.L175	@
 2683              	@ ../freertos/tasks.c:2203: 					prvAddTaskToReadyList( pxTCB );
2203:../freertos/tasks.c **** 
 2684              		.loc 1 2203 6 view .LVU723
 2685 0728 0126     		movs	r6, #1	@ tmp168,
 2686 072a 4FF01408 		mov	r8, #20	@ tmp170,
 2687 072e 04F14807 		add	r7, r4, #72	@ tmp169, tmp135,
 2688 0732 1DE0     		b	.L174		@
 2689              	.LVL164:
 2690              	.L177:
2200:../freertos/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 2691              		.loc 1 2200 6 is_stmt 1 view .LVU724
 2692              	@ ../freertos/tasks.c:2200: 					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*l
2200:../freertos/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 2693              		.loc 1 2200 12 is_stmt 0 view .LVU725
 2694 0734 D4F8E030 		ldr	r3, [r4, #224]	@ xPendingReadyList.xListEnd.pxNext, xPendingReadyList.xListEnd.pxNext
 2695 0738 DD68     		ldr	r5, [r3, #12]	@ pxTCB, _5->pvOwner
 2696              	.LVL165:
2201:../freertos/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 2697              		.loc 1 2201 6 is_stmt 1 view .LVU726
 2698              	@ ../freertos/tasks.c:2202: 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2202:../freertos/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 2699              		.loc 1 2202 15 is_stmt 0 view .LVU727
 2700 073a 05F10409 		add	r9, r5, #4	@ _7, pxTCB,
 2701              	@ ../freertos/tasks.c:2201: 					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2201:../freertos/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 2702              		.loc 1 2201 15 view .LVU728
 2703 073e 05F11800 		add	r0, r5, #24	@, pxTCB,
 2704 0742 FFF7FEFF 		bl	uxListRemove		@
 2705              	.LVL166:
2202:../freertos/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 2706              		.loc 1 2202 6 is_stmt 1 view .LVU729
 2707              	@ ../freertos/tasks.c:2202: 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2202:../freertos/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 2708              		.loc 1 2202 15 is_stmt 0 view .LVU730
 2709 0746 4846     		mov	r0, r9	@, _7
 2710 0748 FFF7FEFF 		bl	uxListRemove		@
 2711              	.LVL167:
2203:../freertos/tasks.c **** 
 2712              		.loc 1 2203 6 is_stmt 1 view .LVU731
2203:../freertos/tasks.c **** 
 2713              		.loc 1 2203 6 view .LVU732
ARM GAS  /tmp/ccaP1CVS.s 			page 156


 2714 074c E86A     		ldr	r0, [r5, #44]	@ _8, pxTCB_42->uxPriority
 2715 074e A268     		ldr	r2, [r4, #8]	@ uxTopReadyPriority.59_10, uxTopReadyPriority
 2716 0750 06FA00F3 		lsl	r3, r6, r0	@ tmp143, tmp168, _8
 2717 0754 1343     		orrs	r3, r3, r2	@, _11, tmp143, uxTopReadyPriority.59_10
 2718 0756 4946     		mov	r1, r9	@, _7
 2719 0758 08FB0070 		mla	r0, r8, r0, r7	@, tmp170, _8, tmp169
 2720 075c A360     		str	r3, [r4, #8]	@ _11, uxTopReadyPriority
2203:../freertos/tasks.c **** 
 2721              		.loc 1 2203 6 view .LVU733
 2722 075e FFF7FEFF 		bl	vListInsertEnd		@
 2723              	.LVL168:
2203:../freertos/tasks.c **** 
 2724              		.loc 1 2203 36 view .LVU734
2207:../freertos/tasks.c **** 					{
 2725              		.loc 1 2207 6 view .LVU735
 2726              	@ ../freertos/tasks.c:2207: 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
2207:../freertos/tasks.c **** 					{
 2727              		.loc 1 2207 43 is_stmt 0 view .LVU736
 2728 0762 6368     		ldr	r3, [r4, #4]	@ pxCurrentTCB.60_16, pxCurrentTCB
 2729              	@ ../freertos/tasks.c:2207: 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
2207:../freertos/tasks.c **** 					{
 2730              		.loc 1 2207 8 view .LVU737
 2731 0764 EA6A     		ldr	r2, [r5, #44]	@ pxTCB_42->uxPriority, pxTCB_42->uxPriority
 2732 0766 DB6A     		ldr	r3, [r3, #44]	@ pxCurrentTCB.60_16->uxPriority, pxCurrentTCB.60_16->uxPriority
 2733 0768 9A42     		cmp	r2, r3	@ pxTCB_42->uxPriority, pxCurrentTCB.60_16->uxPriority
 2734 076a 01D3     		bcc	.L174		@,
2209:../freertos/tasks.c **** 					}
 2735              		.loc 1 2209 7 is_stmt 1 view .LVU738
 2736              	@ ../freertos/tasks.c:2209: 						xYieldPending = pdTRUE;
2209:../freertos/tasks.c **** 					}
 2737              		.loc 1 2209 21 is_stmt 0 view .LVU739
 2738 076c C4F80061 		str	r6, [r4, #256]	@ tmp168, xYieldPending
 2739              	.LVL169:
 2740              	.L174:
2213:../freertos/tasks.c **** 					}
 2741              		.loc 1 2213 31 is_stmt 1 view .LVU740
2198:../freertos/tasks.c **** 				{
 2742              		.loc 1 2198 10 view .LVU741
 2743              	@ ../freertos/tasks.c:2198: 				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
2198:../freertos/tasks.c **** 				{
 2744              		.loc 1 2198 12 is_stmt 0 view .LVU742
 2745 0770 D4F8D430 		ldr	r3, [r4, #212]	@ _18, xPendingReadyList.uxNumberOfItems
 2746              	@ ../freertos/tasks.c:2198: 				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
2198:../freertos/tasks.c **** 				{
 2747              		.loc 1 2198 10 view .LVU743
 2748 0774 002B     		cmp	r3, #0	@ _18
 2749 0776 DDD1     		bne	.L177	@
2217:../freertos/tasks.c **** 				{
 2750              		.loc 1 2217 5 is_stmt 1 view .LVU744
 2751              	@ ../freertos/tasks.c:2217: 				if( pxTCB != NULL )
2217:../freertos/tasks.c **** 				{
 2752              		.loc 1 2217 7 is_stmt 0 view .LVU745
 2753 0778 0DB1     		cbz	r5, .L178	@ pxTCB,
2225:../freertos/tasks.c **** 				}
 2754              		.loc 1 2225 6 is_stmt 1 view .LVU746
 2755 077a FFF777FC 		bl	prvResetNextTaskUnblockTime		@
 2756              	.LVL170:
ARM GAS  /tmp/ccaP1CVS.s 			page 157


 2757              	.L178:
 2758              	.LBB118:
2233:../freertos/tasks.c **** 
 2759              		.loc 1 2233 6 view .LVU747
 2760              	@ ../freertos/tasks.c:2233: 					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. 
2233:../freertos/tasks.c **** 
 2761              		.loc 1 2233 18 is_stmt 0 view .LVU748
 2762 077e D4F8FC50 		ldr	r5, [r4, #252]	@ uxPendedCounts, uxPendedTicks
 2763              	.LVL171:
2235:../freertos/tasks.c **** 					{
 2764              		.loc 1 2235 6 is_stmt 1 view .LVU749
 2765              	@ ../freertos/tasks.c:2235: 					if( uxPendedCounts > ( UBaseType_t ) 0U )
2235:../freertos/tasks.c **** 					{
 2766              		.loc 1 2235 8 is_stmt 0 view .LVU750
 2767 0782 4DB1     		cbz	r5, .L179	@ uxPendedCounts,
 2768              	@ ../freertos/tasks.c:2241: 								xYieldPending = pdTRUE;
2241:../freertos/tasks.c **** 							}
 2769              		.loc 1 2241 23 view .LVU751
 2770 0784 0126     		movs	r6, #1	@ tmp167,
 2771              	.L181:
2237:../freertos/tasks.c **** 						{
 2772              		.loc 1 2237 7 is_stmt 1 view .LVU752
2239:../freertos/tasks.c **** 							{
 2773              		.loc 1 2239 8 view .LVU753
 2774              	@ ../freertos/tasks.c:2239: 							if( xTaskIncrementTick() != pdFALSE )
2239:../freertos/tasks.c **** 							{
 2775              		.loc 1 2239 12 is_stmt 0 view .LVU754
 2776 0786 FFF7FEFF 		bl	xTaskIncrementTick		@
 2777              	.LVL172:
 2778              	@ ../freertos/tasks.c:2239: 							if( xTaskIncrementTick() != pdFALSE )
2239:../freertos/tasks.c **** 							{
 2779              		.loc 1 2239 10 view .LVU755
 2780 078a 08B1     		cbz	r0, .L180	@ tmp171,
2241:../freertos/tasks.c **** 							}
 2781              		.loc 1 2241 9 is_stmt 1 view .LVU756
 2782              	@ ../freertos/tasks.c:2241: 								xYieldPending = pdTRUE;
2241:../freertos/tasks.c **** 							}
 2783              		.loc 1 2241 23 is_stmt 0 view .LVU757
 2784 078c C4F80061 		str	r6, [r4, #256]	@ tmp167, xYieldPending
 2785              	.L180:
2245:../freertos/tasks.c **** 							}
 2786              		.loc 1 2245 33 is_stmt 1 view .LVU758
2247:../freertos/tasks.c **** 						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 2787              		.loc 1 2247 8 view .LVU759
 2788              	.LVL173:
2248:../freertos/tasks.c **** 
 2789              		.loc 1 2248 14 view .LVU760
 2790              	@ ../freertos/tasks.c:2248: 						} while( uxPendedCounts > ( UBaseType_t ) 0U );
2248:../freertos/tasks.c **** 
 2791              		.loc 1 2248 7 is_stmt 0 view .LVU761
 2792 0790 013D     		subs	r5, r5, #1	@ uxPendedCounts, uxPendedCounts,
 2793              	.LVL174:
2248:../freertos/tasks.c **** 
 2794              		.loc 1 2248 7 view .LVU762
 2795 0792 F8D1     		bne	.L181		@,
2250:../freertos/tasks.c **** 					}
 2796              		.loc 1 2250 7 is_stmt 1 view .LVU763
ARM GAS  /tmp/ccaP1CVS.s 			page 158


 2797              	@ ../freertos/tasks.c:2250: 						uxPendedTicks = 0;
2250:../freertos/tasks.c **** 					}
 2798              		.loc 1 2250 21 is_stmt 0 view .LVU764
 2799 0794 C4F8FC50 		str	r5, [r4, #252]	@ uxPendedCounts, uxPendedTicks
 2800              	.L179:
2254:../freertos/tasks.c **** 					}
 2801              		.loc 1 2254 31 is_stmt 1 view .LVU765
 2802              	.LBE118:
2258:../freertos/tasks.c **** 				{
 2803              		.loc 1 2258 5 view .LVU766
 2804              	@ ../freertos/tasks.c:2258: 				if( xYieldPending != pdFALSE )
2258:../freertos/tasks.c **** 				{
 2805              		.loc 1 2258 23 is_stmt 0 view .LVU767
 2806 0798 D4F80031 		ldr	r3, [r4, #256]	@ xYieldPending.61_20, xYieldPending
 2807              	@ ../freertos/tasks.c:2258: 				if( xYieldPending != pdFALSE )
2258:../freertos/tasks.c **** 				{
 2808              		.loc 1 2258 7 view .LVU768
 2809 079c 002B     		cmp	r3, #0	@ xYieldPending.61_20
 2810 079e BAD0     		beq	.L175	@
2262:../freertos/tasks.c **** 					}
 2811              		.loc 1 2262 7 is_stmt 1 view .LVU769
 2812              	.LVL175:
2265:../freertos/tasks.c **** 				}
 2813              		.loc 1 2265 6 view .LVU770
 2814 07a0 4FF0E023 		mov	r3, #-536813568	@ tmp163,
 2815 07a4 4FF08052 		mov	r2, #268435456	@ tmp164,
 2816 07a8 C3F8042D 		str	r2, [r3, #3332]	@ tmp164, MEM[(volatile uint32_t *)3758157060B]
2265:../freertos/tasks.c **** 				}
 2817              		.loc 1 2265 6 view .LVU771
 2818              		.syntax unified
 2819              	@ 2265 "../freertos/tasks.c" 1
 2820 07ac BFF34F8F 		dsb	
 2821              	@ 0 "" 2
2265:../freertos/tasks.c **** 				}
 2822              		.loc 1 2265 6 view .LVU772
 2823              	@ 2265 "../freertos/tasks.c" 1
 2824 07b0 BFF36F8F 		isb
 2825              	@ 0 "" 2
2265:../freertos/tasks.c **** 				}
 2826              		.loc 1 2265 37 view .LVU773
 2827              	@ ../freertos/tasks.c:2262: 						xAlreadyYielded = pdTRUE;
2262:../freertos/tasks.c **** 					}
 2828              		.loc 1 2262 23 is_stmt 0 view .LVU774
 2829              		.thumb
 2830              		.syntax unified
 2831 07b4 0124     		movs	r4, #1	@ <retval>,
 2832 07b6 AFE7     		b	.L173		@
 2833              	.L197:
 2834              		.align	2
 2835              	.L196:
 2836 07b8 00000000 		.word	.LANCHOR0
 2837              		.cfi_endproc
 2838              	.LFE22:
 2839              		.size	xTaskResumeAll, .-xTaskResumeAll
 2840              		.align	1
 2841              		.global	vTaskDelayUntil
 2842              		.syntax unified
ARM GAS  /tmp/ccaP1CVS.s 			page 159


 2843              		.thumb
 2844              		.thumb_func
 2845              		.type	vTaskDelayUntil, %function
 2846              	vTaskDelayUntil:
 2847              	.LVL176:
 2848              	.LFB9:
1250:../freertos/tasks.c **** 	TickType_t xTimeToWake;
 2849              		.loc 1 1250 2 is_stmt 1 view -0
 2850              		.cfi_startproc
 2851              		@ args = 0, pretend = 0, frame = 0
 2852              		@ frame_needed = 0, uses_anonymous_args = 0
1251:../freertos/tasks.c **** 	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 2853              		.loc 1 1251 2 view .LVU776
1252:../freertos/tasks.c **** 
 2854              		.loc 1 1252 2 view .LVU777
1254:../freertos/tasks.c **** 		configASSERT( ( xTimeIncrement > 0U ) );
 2855              		.loc 1 1254 37 view .LVU778
1255:../freertos/tasks.c **** 		configASSERT( uxSchedulerSuspended == 0 );
 2856              		.loc 1 1255 42 view .LVU779
1256:../freertos/tasks.c **** 
 2857              		.loc 1 1256 44 view .LVU780
1258:../freertos/tasks.c **** 		{
 2858              		.loc 1 1258 3 view .LVU781
 2859              	@ ../freertos/tasks.c:1250: 	{
1250:../freertos/tasks.c **** 	TickType_t xTimeToWake;
 2860              		.loc 1 1250 2 is_stmt 0 view .LVU782
 2861 07bc 10B5     		push	{r4, lr}	@
 2862              	.LCFI24:
 2863              		.cfi_def_cfa_offset 8
 2864              		.cfi_offset 4, -8
 2865              		.cfi_offset 14, -4
 2866              	@ ../freertos/tasks.c:1258: 		vTaskSuspendAll();
1258:../freertos/tasks.c **** 		{
 2867              		.loc 1 1258 3 view .LVU783
 2868 07be FFF7FEFF 		bl	vTaskSuspendAll		@
 2869              	.LVL177:
 2870              	.LBB119:
1262:../freertos/tasks.c **** 
 2871              		.loc 1 1262 4 is_stmt 1 view .LVU784
 2872              	@ ../freertos/tasks.c:1262: 			const TickType_t xConstTickCount = xTickCount;
1262:../freertos/tasks.c **** 
 2873              		.loc 1 1262 21 is_stmt 0 view .LVU785
 2874 07c2 104B     		ldr	r3, .L210	@ tmp123,
 2875              	@ ../freertos/tasks.c:1265: 			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
1265:../freertos/tasks.c **** 
 2876              		.loc 1 1265 18 view .LVU786
 2877 07c4 0468     		ldr	r4, [r0]	@ _1, *pxPreviousWakeTime_9(D)
 2878              	@ ../freertos/tasks.c:1262: 			const TickType_t xConstTickCount = xTickCount;
1262:../freertos/tasks.c **** 
 2879              		.loc 1 1262 21 view .LVU787
 2880 07c6 1A68     		ldr	r2, [r3]	@ xConstTickCount, xTickCount
 2881              	.LVL178:
1265:../freertos/tasks.c **** 
 2882              		.loc 1 1265 4 is_stmt 1 view .LVU788
 2883 07c8 6318     		adds	r3, r4, r1	@ tmp124, _1, xTimeIncrement
 2884 07ca 2CBF     		ite	cs
 2885 07cc 0121     		movcs	r1, #1	@ _29,
ARM GAS  /tmp/ccaP1CVS.s 			page 160


 2886              	.LVL179:
1265:../freertos/tasks.c **** 
 2887              		.loc 1 1265 4 is_stmt 0 view .LVU789
 2888 07ce 0021     		movcc	r1, #0	@ _29,
 2889              	.LVL180:
1267:../freertos/tasks.c **** 			{
 2890              		.loc 1 1267 4 is_stmt 1 view .LVU790
 2891              	@ ../freertos/tasks.c:1267: 			if( xConstTickCount < *pxPreviousWakeTime )
1267:../freertos/tasks.c **** 			{
 2892              		.loc 1 1267 6 is_stmt 0 view .LVU791
 2893 07d0 9442     		cmp	r4, r2	@ _1, xConstTickCount
 2894              	@ ../freertos/tasks.c:1299: 			*pxPreviousWakeTime = xTimeToWake;
1299:../freertos/tasks.c **** 
 2895              		.loc 1 1299 24 view .LVU792
 2896 07d2 0360     		str	r3, [r0]	@ tmp124, *pxPreviousWakeTime_9(D)
 2897              	@ ../freertos/tasks.c:1267: 			if( xConstTickCount < *pxPreviousWakeTime )
1267:../freertos/tasks.c **** 			{
 2898              		.loc 1 1267 6 view .LVU793
 2899 07d4 0ED9     		bls	.L201		@,
1274:../freertos/tasks.c **** 				{
 2900              		.loc 1 1274 5 is_stmt 1 view .LVU794
 2901              	@ ../freertos/tasks.c:1274: 				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConst
1274:../freertos/tasks.c **** 				{
 2902              		.loc 1 1274 7 is_stmt 0 view .LVU795
 2903 07d6 71B9     		cbnz	r1, .L209	@ _29,
 2904              	.LVL181:
 2905              	.L203:
1311:../freertos/tasks.c **** 			}
 2906              		.loc 1 1311 29 is_stmt 1 view .LVU796
 2907              	.LBE119:
1314:../freertos/tasks.c **** 
 2908              		.loc 1 1314 3 view .LVU797
 2909              	@ ../freertos/tasks.c:1314: 		xAlreadyYielded = xTaskResumeAll();
1314:../freertos/tasks.c **** 
 2910              		.loc 1 1314 21 is_stmt 0 view .LVU798
 2911 07d8 FFF7FEFF 		bl	xTaskResumeAll		@
 2912              	.LVL182:
1318:../freertos/tasks.c **** 		{
 2913              		.loc 1 1318 3 is_stmt 1 view .LVU799
 2914              	@ ../freertos/tasks.c:1318: 		if( xAlreadyYielded == pdFALSE )
1318:../freertos/tasks.c **** 		{
 2915              		.loc 1 1318 5 is_stmt 0 view .LVU800
 2916 07dc 48B9     		cbnz	r0, .L198	@ tmp130,
1320:../freertos/tasks.c **** 		}
 2917              		.loc 1 1320 4 is_stmt 1 view .LVU801
 2918 07de 4FF0E023 		mov	r3, #-536813568	@ tmp126,
 2919 07e2 4FF08052 		mov	r2, #268435456	@ tmp127,
 2920 07e6 C3F8042D 		str	r2, [r3, #3332]	@ tmp127, MEM[(volatile uint32_t *)3758157060B]
1320:../freertos/tasks.c **** 		}
 2921              		.loc 1 1320 4 view .LVU802
 2922              		.syntax unified
 2923              	@ 1320 "../freertos/tasks.c" 1
 2924 07ea BFF34F8F 		dsb	
 2925              	@ 0 "" 2
1320:../freertos/tasks.c **** 		}
 2926              		.loc 1 1320 4 view .LVU803
 2927              	@ 1320 "../freertos/tasks.c" 1
ARM GAS  /tmp/ccaP1CVS.s 			page 161


 2928 07ee BFF36F8F 		isb
 2929              	@ 0 "" 2
1320:../freertos/tasks.c **** 		}
 2930              		.loc 1 1320 26 view .LVU804
1324:../freertos/tasks.c **** 		}
 2931              		.loc 1 1324 28 view .LVU805
 2932              		.thumb
 2933              		.syntax unified
 2934              	.L198:
 2935              	@ ../freertos/tasks.c:1326: 	}
1326:../freertos/tasks.c **** 
 2936              		.loc 1 1326 2 is_stmt 0 view .LVU806
 2937 07f2 10BD     		pop	{r4, pc}	@
 2938              	.LVL183:
 2939              	.L201:
 2940              	.LBB120:
1288:../freertos/tasks.c **** 				{
 2941              		.loc 1 1288 5 is_stmt 1 view .LVU807
 2942              	@ ../freertos/tasks.c:1288: 				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConst
1288:../freertos/tasks.c **** 				{
 2943              		.loc 1 1288 7 is_stmt 0 view .LVU808
 2944 07f4 09B9     		cbnz	r1, .L205	@ _29,
 2945              	.L209:
 2946              	@ ../freertos/tasks.c:1288: 				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConst
1288:../freertos/tasks.c **** 				{
 2947              		.loc 1 1288 47 discriminator 1 view .LVU809
 2948 07f6 9A42     		cmp	r2, r3	@ xConstTickCount, tmp124
 2949 07f8 EED2     		bcs	.L203		@,
 2950              	.L205:
1303:../freertos/tasks.c **** 
 2951              		.loc 1 1303 41 is_stmt 1 view .LVU810
1307:../freertos/tasks.c **** 			}
 2952              		.loc 1 1307 5 view .LVU811
 2953 07fa 0021     		movs	r1, #0	@,
 2954 07fc 981A     		subs	r0, r3, r2	@, tmp124, xConstTickCount
 2955              	.LVL184:
1307:../freertos/tasks.c **** 			}
 2956              		.loc 1 1307 5 is_stmt 0 view .LVU812
 2957 07fe FFF7FFFB 		bl	prvAddCurrentTaskToDelayedList		@
 2958              	.LVL185:
1307:../freertos/tasks.c **** 			}
 2959              		.loc 1 1307 5 view .LVU813
 2960 0802 E9E7     		b	.L203		@
 2961              	.L211:
 2962              		.align	2
 2963              	.L210:
 2964 0804 00000000 		.word	.LANCHOR0
 2965              	.LBE120:
 2966              		.cfi_endproc
 2967              	.LFE9:
 2968              		.size	vTaskDelayUntil, .-vTaskDelayUntil
 2969              		.align	1
 2970              		.global	vTaskDelay
 2971              		.syntax unified
 2972              		.thumb
 2973              		.thumb_func
 2974              		.type	vTaskDelay, %function
ARM GAS  /tmp/ccaP1CVS.s 			page 162


 2975              	vTaskDelay:
 2976              	.LVL186:
 2977              	.LFB10:
1334:../freertos/tasks.c **** 	BaseType_t xAlreadyYielded = pdFALSE;
 2978              		.loc 1 1334 2 is_stmt 1 view -0
 2979              		.cfi_startproc
 2980              		@ args = 0, pretend = 0, frame = 0
 2981              		@ frame_needed = 0, uses_anonymous_args = 0
1335:../freertos/tasks.c **** 
 2982              		.loc 1 1335 2 view .LVU815
1338:../freertos/tasks.c **** 		{
 2983              		.loc 1 1338 3 view .LVU816
 2984              	@ ../freertos/tasks.c:1334: 	{
1334:../freertos/tasks.c **** 	BaseType_t xAlreadyYielded = pdFALSE;
 2985              		.loc 1 1334 2 is_stmt 0 view .LVU817
 2986 0808 08B5     		push	{r3, lr}	@
 2987              	.LCFI25:
 2988              		.cfi_def_cfa_offset 8
 2989              		.cfi_offset 3, -8
 2990              		.cfi_offset 14, -4
 2991              	@ ../freertos/tasks.c:1338: 		if( xTicksToDelay > ( TickType_t ) 0U )
1338:../freertos/tasks.c **** 		{
 2992              		.loc 1 1338 5 view .LVU818
 2993 080a 50B9     		cbnz	r0, .L213	@ tmp117,
 2994              	.LVL187:
 2995              	.L215:
1365:../freertos/tasks.c **** 		}
 2996              		.loc 1 1365 4 is_stmt 1 view .LVU819
 2997 080c 4FF0E023 		mov	r3, #-536813568	@ tmp115,
 2998 0810 4FF08052 		mov	r2, #268435456	@ tmp116,
 2999 0814 C3F8042D 		str	r2, [r3, #3332]	@ tmp116, MEM[(volatile uint32_t *)3758157060B]
1365:../freertos/tasks.c **** 		}
 3000              		.loc 1 1365 4 view .LVU820
 3001              		.syntax unified
 3002              	@ 1365 "../freertos/tasks.c" 1
 3003 0818 BFF34F8F 		dsb	
 3004              	@ 0 "" 2
1365:../freertos/tasks.c **** 		}
 3005              		.loc 1 1365 4 view .LVU821
 3006              	@ 1365 "../freertos/tasks.c" 1
 3007 081c BFF36F8F 		isb
 3008              	@ 0 "" 2
1365:../freertos/tasks.c **** 		}
 3009              		.loc 1 1365 26 view .LVU822
 3010              		.thumb
 3011              		.syntax unified
 3012              	.L212:
 3013              	@ ../freertos/tasks.c:1371: 	}
1371:../freertos/tasks.c **** 
 3014              		.loc 1 1371 2 is_stmt 0 view .LVU823
 3015 0820 08BD     		pop	{r3, pc}	@
 3016              	.LVL188:
 3017              	.L213:
1340:../freertos/tasks.c **** 			vTaskSuspendAll();
 3018              		.loc 1 1340 45 is_stmt 1 view .LVU824
1341:../freertos/tasks.c **** 			{
 3019              		.loc 1 1341 4 view .LVU825
ARM GAS  /tmp/ccaP1CVS.s 			page 163


 3020              	@ ../freertos/tasks.c:1352: 				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
1352:../freertos/tasks.c **** 			}
 3021              		.loc 1 1352 5 is_stmt 0 view .LVU826
 3022 0822 0021     		movs	r1, #0	@,
 3023              	@ ../freertos/tasks.c:1341: 			vTaskSuspendAll();
1341:../freertos/tasks.c **** 			{
 3024              		.loc 1 1341 4 view .LVU827
 3025 0824 FFF7FEFF 		bl	vTaskSuspendAll		@
 3026              	.LVL189:
1343:../freertos/tasks.c **** 
 3027              		.loc 1 1343 22 is_stmt 1 view .LVU828
1352:../freertos/tasks.c **** 			}
 3028              		.loc 1 1352 5 view .LVU829
 3029 0828 FFF7EAFB 		bl	prvAddCurrentTaskToDelayedList		@
 3030              	.LVL190:
1354:../freertos/tasks.c **** 		}
 3031              		.loc 1 1354 4 view .LVU830
 3032              	@ ../freertos/tasks.c:1354: 			xAlreadyYielded = xTaskResumeAll();
1354:../freertos/tasks.c **** 		}
 3033              		.loc 1 1354 22 is_stmt 0 view .LVU831
 3034 082c FFF7FEFF 		bl	xTaskResumeAll		@
 3035              	.LVL191:
1358:../freertos/tasks.c **** 		}
 3036              		.loc 1 1358 28 is_stmt 1 view .LVU832
1363:../freertos/tasks.c **** 		{
 3037              		.loc 1 1363 3 view .LVU833
 3038              	@ ../freertos/tasks.c:1363: 		if( xAlreadyYielded == pdFALSE )
1363:../freertos/tasks.c **** 		{
 3039              		.loc 1 1363 5 is_stmt 0 view .LVU834
 3040 0830 0028     		cmp	r0, #0	@ tmp118
 3041 0832 EBD0     		beq	.L215	@
 3042 0834 F4E7     		b	.L212		@
 3043              		.cfi_endproc
 3044              	.LFE10:
 3045              		.size	vTaskDelay, .-vTaskDelay
 3046              		.align	1
 3047              		.global	vTaskSwitchContext
 3048              		.syntax unified
 3049              		.thumb
 3050              		.thumb_func
 3051              		.type	vTaskSwitchContext, %function
 3052              	vTaskSwitchContext:
 3053              	.LFB29:
2948:../freertos/tasks.c **** 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 3054              		.loc 1 2948 1 is_stmt 1 view -0
 3055              		.cfi_startproc
 3056              		@ args = 0, pretend = 0, frame = 0
 3057              		@ frame_needed = 0, uses_anonymous_args = 0
2949:../freertos/tasks.c **** 	{
 3058              		.loc 1 2949 2 view .LVU836
 3059              	@ ../freertos/tasks.c:2949: 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
2949:../freertos/tasks.c **** 	{
 3060              		.loc 1 2949 27 is_stmt 0 view .LVU837
 3061 0836 124A     		ldr	r2, .L223	@ tmp126,
 3062              	@ ../freertos/tasks.c:2948: {
2948:../freertos/tasks.c **** 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 3063              		.loc 1 2948 1 view .LVU838
ARM GAS  /tmp/ccaP1CVS.s 			page 164


 3064 0838 30B5     		push	{r4, r5, lr}	@
 3065              	.LCFI26:
 3066              		.cfi_def_cfa_offset 12
 3067              		.cfi_offset 4, -12
 3068              		.cfi_offset 5, -8
 3069              		.cfi_offset 14, -4
 3070              	@ ../freertos/tasks.c:2949: 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
2949:../freertos/tasks.c **** 	{
 3071              		.loc 1 2949 27 view .LVU839
 3072 083a D2F8F030 		ldr	r3, [r2, #240]	@ uxSchedulerSuspended.78_1, uxSchedulerSuspended
 3073              	@ ../freertos/tasks.c:2949: 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
2949:../freertos/tasks.c **** 	{
 3074              		.loc 1 2949 4 view .LVU840
 3075 083e 1BB1     		cbz	r3, .L220	@ uxSchedulerSuspended.78_1,
2953:../freertos/tasks.c **** 	}
 3076              		.loc 1 2953 3 is_stmt 1 view .LVU841
 3077              	@ ../freertos/tasks.c:2953: 		xYieldPending = pdTRUE;
2953:../freertos/tasks.c **** 	}
 3078              		.loc 1 2953 17 is_stmt 0 view .LVU842
 3079 0840 0123     		movs	r3, #1	@ tmp128,
 3080 0842 C2F80031 		str	r3, [r2, #256]	@ tmp128, xYieldPending
 3081              	.L219:
 3082              	@ ../freertos/tasks.c:3017: }
3017:../freertos/tasks.c **** /*-----------------------------------------------------------*/
 3083              		.loc 1 3017 1 view .LVU843
 3084 0846 30BD     		pop	{r4, r5, pc}	@
 3085              	.L220:
 3086              	.LBB127:
 3087              	.LBI127:
2947:../freertos/tasks.c **** {
 3088              		.loc 1 2947 6 is_stmt 1 view .LVU844
 3089              	.LBB128:
2957:../freertos/tasks.c **** 		traceTASK_SWITCHED_OUT();
 3090              		.loc 1 2957 3 view .LVU845
 3091              	@ ../freertos/tasks.c:2957: 		xYieldPending = pdFALSE;
2957:../freertos/tasks.c **** 		traceTASK_SWITCHED_OUT();
 3092              		.loc 1 2957 17 is_stmt 0 view .LVU846
 3093 0848 C2F80031 		str	r3, [r2, #256]	@ uxSchedulerSuspended.78_1, xYieldPending
2958:../freertos/tasks.c **** 
 3094              		.loc 1 2958 27 is_stmt 1 view .LVU847
2988:../freertos/tasks.c **** 
 3095              		.loc 1 2988 33 view .LVU848
 3096              	.LBB129:
2999:../freertos/tasks.c **** 		traceTASK_SWITCHED_IN();
 3097              		.loc 1 2999 3 view .LVU849
2999:../freertos/tasks.c **** 		traceTASK_SWITCHED_IN();
 3098              		.loc 1 2999 3 view .LVU850
 3099 084c 9368     		ldr	r3, [r2, #8]	@ uxTopReadyPriority.79_6, uxTopReadyPriority
 3100              	.LVL192:
 3101              	.LBB130:
 3102              	.LBI130:
 130:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	{
 3103              		.loc 2 130 59 view .LVU851
 3104              	.LBB131:
 132:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 
 3105              		.loc 2 132 2 view .LVU852
 134:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 		return ucReturn;
ARM GAS  /tmp/ccaP1CVS.s 			page 165


 3106              		.loc 2 134 3 view .LVU853
 3107              		.syntax unified
 3108              	@ 134 "../freertos/portable/GCC/ARM_CM3/portmacro.h" 1
 3109 084e B3FA83F3 		clz r3, r3	@ ucReturn, uxTopReadyPriority.79_6
 3110              	@ 0 "" 2
 3111              	.LVL193:
 134:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 		return ucReturn;
 3112              		.loc 2 134 3 is_stmt 0 view .LVU854
 3113              		.thumb
 3114              		.syntax unified
 3115              	.LBE131:
 3116              	.LBE130:
 3117              	.LBB133:
 3118              	@ ../freertos/tasks.c:2999: 		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as t
2999:../freertos/tasks.c **** 		traceTASK_SWITCHED_IN();
 3119              		.loc 1 2999 3 view .LVU855
 3120 0852 1425     		movs	r5, #20	@ tmp135,
 3121              	.LBE133:
 3122              	.LBB134:
 3123              	.LBB132:
 3124              	@ ../freertos/portable/GCC/ARM_CM3/portmacro.h:134: 		__asm volatile ( "clz %0, %1" : "=r" ( ucRetu
 134:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 		return ucReturn;
 3125              		.loc 2 134 3 view .LVU856
 3126 0854 DBB2     		uxtb	r3, r3	@ ucReturn, ucReturn
 3127              	.LVL194:
 135:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	}
 3128              		.loc 2 135 3 is_stmt 1 view .LVU857
 135:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	}
 3129              		.loc 2 135 3 is_stmt 0 view .LVU858
 3130              	.LBE132:
 3131              	.LBE134:
 3132              	@ ../freertos/tasks.c:2999: 		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as t
2999:../freertos/tasks.c **** 		traceTASK_SWITCHED_IN();
 3133              		.loc 1 2999 3 view .LVU859
 3134 0856 C3F11F03 		rsb	r3, r3, #31	@ uxTopPriority, ucReturn,
 3135              	.LVL195:
2999:../freertos/tasks.c **** 		traceTASK_SWITCHED_IN();
 3136              		.loc 1 2999 3 is_stmt 1 view .LVU860
 3137              	.LBB135:
2999:../freertos/tasks.c **** 		traceTASK_SWITCHED_IN();
 3138              		.loc 1 2999 3 view .LVU861
2999:../freertos/tasks.c **** 		traceTASK_SWITCHED_IN();
 3139              		.loc 1 2999 3 view .LVU862
 3140 085a 05FB03F1 		mul	r1, r5, r3	@ tmp134, tmp135, uxTopPriority
 3141 085e 5018     		adds	r0, r2, r1	@ tmp136, tmp126, tmp134
 3142 0860 0146     		mov	r1, r0	@ tmp148, tmp136
 3143 0862 C46C     		ldr	r4, [r0, #76]	@ MEM <struct List_t[5]> [(struct List_t *)&pxReadyTasksLists][uxTopPriority_9].
 3144 0864 5031     		adds	r1, r1, #80	@ tmp149, tmp148,
 3145 0866 6468     		ldr	r4, [r4, #4]	@ _11, _10->pxNext
 3146 0868 05FB0323 		mla	r3, r5, r3, r2	@ tmp159, tmp135, uxTopPriority, tmp126
 3147              	.LVL196:
2999:../freertos/tasks.c **** 		traceTASK_SWITCHED_IN();
 3148              		.loc 1 2999 3 is_stmt 0 view .LVU863
 3149 086c 8C42     		cmp	r4, r1	@ _11, tmp149
 3150 086e 08BF     		it	eq
 3151 0870 6168     		ldreq	r1, [r4, #4]	@ MEM[(struct ListItem_t *)_11].pxNext, MEM[(struct ListItem_t *)_11].pxNext
 3152 0872 C464     		str	r4, [r0, #76]	@ _11, MEM <struct List_t[5]> [(struct List_t *)&pxReadyTasksLists][uxTopPriorit
ARM GAS  /tmp/ccaP1CVS.s 			page 166


2999:../freertos/tasks.c **** 		traceTASK_SWITCHED_IN();
 3153              		.loc 1 2999 3 is_stmt 1 view .LVU864
2999:../freertos/tasks.c **** 		traceTASK_SWITCHED_IN();
 3154              		.loc 1 2999 3 view .LVU865
 3155 0874 08BF     		it	eq
 3156 0876 C164     		streq	r1, [r0, #76]	@ MEM[(struct ListItem_t *)_11].pxNext, MEM <struct List_t[5]> [(struct List_t
2999:../freertos/tasks.c **** 		traceTASK_SWITCHED_IN();
 3157              		.loc 1 2999 3 view .LVU866
 3158 0878 DB6C     		ldr	r3, [r3, #76]	@ MEM <struct List_t[5]> [(struct List_t *)&pxReadyTasksLists][uxTopPriority_9].
 3159 087a DB68     		ldr	r3, [r3, #12]	@ _15, _14->pvOwner
 3160 087c 5360     		str	r3, [r2, #4]	@ _15, pxCurrentTCB
 3161              	.LBE135:
2999:../freertos/tasks.c **** 		traceTASK_SWITCHED_IN();
 3162              		.loc 1 2999 3 view .LVU867
 3163              	.LBE129:
2999:../freertos/tasks.c **** 		traceTASK_SWITCHED_IN();
 3164              		.loc 1 2999 37 view .LVU868
3000:../freertos/tasks.c **** 
 3165              		.loc 1 3000 26 view .LVU869
3000:../freertos/tasks.c **** 
 3166              		.loc 1 3000 26 is_stmt 0 view .LVU870
 3167              	.LBE128:
 3168              	.LBE127:
2999:../freertos/tasks.c **** 		traceTASK_SWITCHED_IN();
 3169              		.loc 1 2999 3 is_stmt 1 view .LVU871
2999:../freertos/tasks.c **** 		traceTASK_SWITCHED_IN();
 3170              		.loc 1 2999 37 view .LVU872
3000:../freertos/tasks.c **** 
 3171              		.loc 1 3000 26 view .LVU873
 3172              	@ ../freertos/tasks.c:3017: }
3017:../freertos/tasks.c **** /*-----------------------------------------------------------*/
 3173              		.loc 1 3017 1 is_stmt 0 view .LVU874
 3174 087e E2E7     		b	.L219		@
 3175              	.L224:
 3176              		.align	2
 3177              	.L223:
 3178 0880 00000000 		.word	.LANCHOR0
 3179              		.cfi_endproc
 3180              	.LFE29:
 3181              		.size	vTaskSwitchContext, .-vTaskSwitchContext
 3182              		.align	1
 3183              		.global	vTaskSuspend
 3184              		.syntax unified
 3185              		.thumb
 3186              		.thumb_func
 3187              		.type	vTaskSuspend, %function
 3188              	vTaskSuspend:
 3189              	.LVL197:
 3190              	.LFB15:
1697:../freertos/tasks.c **** 	TCB_t *pxTCB;
 3191              		.loc 1 1697 2 is_stmt 1 view -0
 3192              		.cfi_startproc
 3193              		@ args = 0, pretend = 0, frame = 0
 3194              		@ frame_needed = 0, uses_anonymous_args = 0
1698:../freertos/tasks.c **** 
 3195              		.loc 1 1698 2 view .LVU876
1700:../freertos/tasks.c **** 		{
ARM GAS  /tmp/ccaP1CVS.s 			page 167


 3196              		.loc 1 1700 3 view .LVU877
 3197              	@ ../freertos/tasks.c:1697: 	{
1697:../freertos/tasks.c **** 	TCB_t *pxTCB;
 3198              		.loc 1 1697 2 is_stmt 0 view .LVU878
 3199 0884 70B5     		push	{r4, r5, r6, lr}	@
 3200              	.LCFI27:
 3201              		.cfi_def_cfa_offset 16
 3202              		.cfi_offset 4, -16
 3203              		.cfi_offset 5, -12
 3204              		.cfi_offset 6, -8
 3205              		.cfi_offset 14, -4
 3206              	@ ../freertos/tasks.c:1697: 	{
1697:../freertos/tasks.c **** 	TCB_t *pxTCB;
 3207              		.loc 1 1697 2 view .LVU879
 3208 0886 0446     		mov	r4, r0	@ xTaskToSuspend, tmp160
 3209 0888 264D     		ldr	r5, .L240	@ tmp159,
 3210              	@ ../freertos/tasks.c:1700: 		taskENTER_CRITICAL();
1700:../freertos/tasks.c **** 		{
 3211              		.loc 1 1700 3 view .LVU880
 3212 088a FFF7FEFF 		bl	vPortEnterCritical		@
 3213              	.LVL198:
1704:../freertos/tasks.c **** 
 3214              		.loc 1 1704 4 is_stmt 1 view .LVU881
 3215              	@ ../freertos/tasks.c:1704: 			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
1704:../freertos/tasks.c **** 
 3216              		.loc 1 1704 12 is_stmt 0 view .LVU882
 3217 088e 04B9     		cbnz	r4, .L226	@ xTaskToSuspend,
 3218              	@ ../freertos/tasks.c:1704: 			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
1704:../freertos/tasks.c **** 
 3219              		.loc 1 1704 12 discriminator 1 view .LVU883
 3220 0890 6C68     		ldr	r4, [r5, #4]	@ xTaskToSuspend, pxCurrentTCB
 3221              	.LVL199:
 3222              	.L226:
1706:../freertos/tasks.c **** 
 3223              		.loc 1 1706 30 is_stmt 1 discriminator 4 view .LVU884
1710:../freertos/tasks.c **** 			{
 3224              		.loc 1 1710 4 discriminator 4 view .LVU885
 3225              	@ ../freertos/tasks.c:1710: 			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 
1710:../freertos/tasks.c **** 			{
 3226              		.loc 1 1710 8 is_stmt 0 discriminator 4 view .LVU886
 3227 0892 261D     		adds	r6, r4, #4	@ _1, xTaskToSuspend,
 3228 0894 3046     		mov	r0, r6	@, _1
 3229 0896 FFF7FEFF 		bl	uxListRemove		@
 3230              	.LVL200:
 3231              	@ ../freertos/tasks.c:1710: 			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 
1710:../freertos/tasks.c **** 			{
 3232              		.loc 1 1710 6 discriminator 4 view .LVU887
 3233 089a 58B9     		cbnz	r0, .L227	@ tmp161,
1712:../freertos/tasks.c **** 			}
 3234              		.loc 1 1712 5 is_stmt 1 view .LVU888
 3235 089c 1420     		movs	r0, #20	@ tmp133,
 3236 089e E16A     		ldr	r1, [r4, #44]	@ _3, iftmp.40_17->uxPriority
 3237 08a0 00FB0150 		mla	r0, r0, r1, r5	@ tmp134, tmp133, _3, tmp159
 3238 08a4 836C     		ldr	r3, [r0, #72]	@ _4, pxReadyTasksLists[_3].uxNumberOfItems
 3239 08a6 2BB9     		cbnz	r3, .L227	@ _4,
1712:../freertos/tasks.c **** 			}
 3240              		.loc 1 1712 5 discriminator 1 view .LVU889
ARM GAS  /tmp/ccaP1CVS.s 			page 168


 3241 08a8 0122     		movs	r2, #1	@ tmp138,
 3242 08aa AB68     		ldr	r3, [r5, #8]	@ uxTopReadyPriority.41_7, uxTopReadyPriority
 3243 08ac 8A40     		lsls	r2, r2, r1	@ tmp137, tmp138, _3
 3244 08ae 23EA0203 		bic	r3, r3, r2	@ _8, uxTopReadyPriority.41_7, tmp137
 3245 08b2 AB60     		str	r3, [r5, #8]	@ _8, uxTopReadyPriority
 3246              	.L227:
1716:../freertos/tasks.c **** 			}
 3247              		.loc 1 1716 29 view .LVU890
1720:../freertos/tasks.c **** 			{
 3248              		.loc 1 1720 4 view .LVU891
 3249              	@ ../freertos/tasks.c:1720: 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1720:../freertos/tasks.c **** 			{
 3250              		.loc 1 1720 6 is_stmt 0 view .LVU892
 3251 08b4 A36A     		ldr	r3, [r4, #40]	@ iftmp.40_17->xEventListItem.pvContainer, iftmp.40_17->xEventListItem.pvContain
 3252 08b6 1BB1     		cbz	r3, .L228	@ iftmp.40_17->xEventListItem.pvContainer,
1722:../freertos/tasks.c **** 			}
 3253              		.loc 1 1722 5 is_stmt 1 view .LVU893
 3254              	@ ../freertos/tasks.c:1722: 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1722:../freertos/tasks.c **** 			}
 3255              		.loc 1 1722 14 is_stmt 0 view .LVU894
 3256 08b8 04F11800 		add	r0, r4, #24	@, xTaskToSuspend,
 3257 08bc FFF7FEFF 		bl	uxListRemove		@
 3258              	.LVL201:
 3259              	.L228:
1726:../freertos/tasks.c **** 			}
 3260              		.loc 1 1726 29 is_stmt 1 view .LVU895
1729:../freertos/tasks.c **** 
 3261              		.loc 1 1729 4 view .LVU896
 3262 08c0 3146     		mov	r1, r6	@, _1
 3263 08c2 1948     		ldr	r0, .L240+4	@,
 3264 08c4 FFF7FEFF 		bl	vListInsertEnd		@
 3265              	.LVL202:
1733:../freertos/tasks.c **** 				{
 3266              		.loc 1 1733 5 view .LVU897
 3267              	@ ../freertos/tasks.c:1733: 				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
1733:../freertos/tasks.c **** 				{
 3268              		.loc 1 1733 14 is_stmt 0 view .LVU898
 3269 08c8 94F85830 		ldrb	r3, [r4, #88]	@ zero_extendqisi2	@ iftmp.40_17->ucNotifyState, iftmp.40_17->ucNotifyState
 3270              	@ ../freertos/tasks.c:1733: 				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
1733:../freertos/tasks.c **** 				{
 3271              		.loc 1 1733 7 view .LVU899
 3272 08cc 012B     		cmp	r3, #1	@ iftmp.40_17->ucNotifyState,
1737:../freertos/tasks.c **** 				}
 3273              		.loc 1 1737 6 is_stmt 1 view .LVU900
 3274              	@ ../freertos/tasks.c:1737: 					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
1737:../freertos/tasks.c **** 				}
 3275              		.loc 1 1737 27 is_stmt 0 view .LVU901
 3276 08ce 04BF     		itt	eq
 3277 08d0 0023     		moveq	r3, #0	@ tmp148,
 3278 08d2 84F85830 		strbeq	r3, [r4, #88]	@ tmp148, iftmp.40_17->ucNotifyState
1742:../freertos/tasks.c **** 
 3279              		.loc 1 1742 3 is_stmt 1 view .LVU902
 3280 08d6 FFF7FEFF 		bl	vPortExitCritical		@
 3281              	.LVL203:
1744:../freertos/tasks.c **** 		{
 3282              		.loc 1 1744 3 view .LVU903
 3283              	@ ../freertos/tasks.c:1744: 		if( xSchedulerRunning != pdFALSE )
ARM GAS  /tmp/ccaP1CVS.s 			page 169


1744:../freertos/tasks.c **** 		{
 3284              		.loc 1 1744 25 is_stmt 0 view .LVU904
 3285 08da D5F8E830 		ldr	r3, [r5, #232]	@ xSchedulerRunning.42_12, xSchedulerRunning
 3286              	@ ../freertos/tasks.c:1744: 		if( xSchedulerRunning != pdFALSE )
1744:../freertos/tasks.c **** 		{
 3287              		.loc 1 1744 5 view .LVU905
 3288 08de 2BB1     		cbz	r3, .L230	@ xSchedulerRunning.42_12,
1748:../freertos/tasks.c **** 			{
 3289              		.loc 1 1748 4 is_stmt 1 view .LVU906
 3290 08e0 FFF7FEFF 		bl	vPortEnterCritical		@
 3291              	.LVL204:
1750:../freertos/tasks.c **** 			}
 3292              		.loc 1 1750 5 view .LVU907
 3293 08e4 FFF7C2FB 		bl	prvResetNextTaskUnblockTime		@
 3294              	.LVL205:
1752:../freertos/tasks.c **** 		}
 3295              		.loc 1 1752 4 view .LVU908
 3296 08e8 FFF7FEFF 		bl	vPortExitCritical		@
 3297              	.LVL206:
 3298              	.L230:
1756:../freertos/tasks.c **** 		}
 3299              		.loc 1 1756 28 view .LVU909
1759:../freertos/tasks.c **** 		{
 3300              		.loc 1 1759 3 view .LVU910
 3301              	@ ../freertos/tasks.c:1759: 		if( pxTCB == pxCurrentTCB )
1759:../freertos/tasks.c **** 		{
 3302              		.loc 1 1759 13 is_stmt 0 view .LVU911
 3303 08ec 6B68     		ldr	r3, [r5, #4]	@ pxCurrentTCB.43_13, pxCurrentTCB
 3304              	@ ../freertos/tasks.c:1759: 		if( pxTCB == pxCurrentTCB )
1759:../freertos/tasks.c **** 		{
 3305              		.loc 1 1759 5 view .LVU912
 3306 08ee A342     		cmp	r3, r4	@ pxCurrentTCB.43_13, xTaskToSuspend
 3307 08f0 0CD1     		bne	.L225		@,
1761:../freertos/tasks.c **** 			{
 3308              		.loc 1 1761 4 is_stmt 1 view .LVU913
 3309              	@ ../freertos/tasks.c:1761: 			if( xSchedulerRunning != pdFALSE )
1761:../freertos/tasks.c **** 			{
 3310              		.loc 1 1761 26 is_stmt 0 view .LVU914
 3311 08f2 D5F8E830 		ldr	r3, [r5, #232]	@ xSchedulerRunning.44_14, xSchedulerRunning
 3312              	@ ../freertos/tasks.c:1761: 			if( xSchedulerRunning != pdFALSE )
1761:../freertos/tasks.c **** 			{
 3313              		.loc 1 1761 6 view .LVU915
 3314 08f6 53B1     		cbz	r3, .L232	@ xSchedulerRunning.44_14,
1764:../freertos/tasks.c **** 				portYIELD_WITHIN_API();
 3315              		.loc 1 1764 46 is_stmt 1 view .LVU916
1765:../freertos/tasks.c **** 			}
 3316              		.loc 1 1765 5 view .LVU917
 3317 08f8 4FF0E023 		mov	r3, #-536813568	@ tmp153,
 3318 08fc 4FF08052 		mov	r2, #268435456	@ tmp154,
 3319 0900 C3F8042D 		str	r2, [r3, #3332]	@ tmp154, MEM[(volatile uint32_t *)3758157060B]
1765:../freertos/tasks.c **** 			}
 3320              		.loc 1 1765 5 view .LVU918
 3321              		.syntax unified
 3322              	@ 1765 "../freertos/tasks.c" 1
 3323 0904 BFF34F8F 		dsb	
 3324              	@ 0 "" 2
1765:../freertos/tasks.c **** 			}
ARM GAS  /tmp/ccaP1CVS.s 			page 170


 3325              		.loc 1 1765 5 view .LVU919
 3326              	@ 1765 "../freertos/tasks.c" 1
 3327 0908 BFF36F8F 		isb
 3328              	@ 0 "" 2
1765:../freertos/tasks.c **** 			}
 3329              		.loc 1 1765 27 view .LVU920
 3330              		.thumb
 3331              		.syntax unified
 3332              	.L225:
 3333              	@ ../freertos/tasks.c:1790: 	}
1790:../freertos/tasks.c **** 
 3334              		.loc 1 1790 2 is_stmt 0 view .LVU921
 3335 090c 70BD     		pop	{r4, r5, r6, pc}	@
 3336              	.LVL207:
 3337              	.L232:
1772:../freertos/tasks.c **** 				{
 3338              		.loc 1 1772 5 is_stmt 1 view .LVU922
 3339              	@ ../freertos/tasks.c:1772: 				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumb
1772:../freertos/tasks.c **** 				{
 3340              		.loc 1 1772 9 is_stmt 0 view .LVU923
 3341 090e E968     		ldr	r1, [r5, #12]	@ _15, xSuspendedTaskList.uxNumberOfItems
 3342              	@ ../freertos/tasks.c:1772: 				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumb
1772:../freertos/tasks.c **** 				{
 3343              		.loc 1 1772 56 view .LVU924
 3344 0910 2A6C     		ldr	r2, [r5, #64]	@ uxCurrentNumberOfTasks.45_16, uxCurrentNumberOfTasks
 3345              	@ ../freertos/tasks.c:1772: 				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumb
1772:../freertos/tasks.c **** 				{
 3346              		.loc 1 1772 7 view .LVU925
 3347 0912 9142     		cmp	r1, r2	@ _15, uxCurrentNumberOfTasks.45_16
 3348 0914 01D1     		bne	.L233		@,
1778:../freertos/tasks.c **** 				}
 3349              		.loc 1 1778 6 is_stmt 1 view .LVU926
 3350              	@ ../freertos/tasks.c:1778: 					pxCurrentTCB = NULL;
1778:../freertos/tasks.c **** 				}
 3351              		.loc 1 1778 19 is_stmt 0 view .LVU927
 3352 0916 6B60     		str	r3, [r5, #4]	@ xSchedulerRunning.44_14, pxCurrentTCB
 3353 0918 F8E7     		b	.L225		@
 3354              	.L233:
1782:../freertos/tasks.c **** 				}
 3355              		.loc 1 1782 6 is_stmt 1 view .LVU928
 3356              	@ ../freertos/tasks.c:1790: 	}
1790:../freertos/tasks.c **** 
 3357              		.loc 1 1790 2 is_stmt 0 view .LVU929
 3358 091a BDE87040 		pop	{r4, r5, r6, lr}	@
 3359              	.LCFI28:
 3360              		.cfi_restore 14
 3361              		.cfi_restore 6
 3362              		.cfi_restore 5
 3363              		.cfi_restore 4
 3364              		.cfi_def_cfa_offset 0
 3365              	.LVL208:
 3366              	@ ../freertos/tasks.c:1782: 					vTaskSwitchContext();
1782:../freertos/tasks.c **** 				}
 3367              		.loc 1 1782 6 view .LVU930
 3368 091e FFF7FEBF 		b	vTaskSwitchContext		@
 3369              	.LVL209:
 3370              	.L241:
ARM GAS  /tmp/ccaP1CVS.s 			page 171


 3371 0922 00BF     		.align	2
 3372              	.L240:
 3373 0924 00000000 		.word	.LANCHOR0
 3374 0928 0C000000 		.word	.LANCHOR0+12
 3375              		.cfi_endproc
 3376              	.LFE15:
 3377              		.size	vTaskSuspend, .-vTaskSuspend
 3378              		.align	1
 3379              		.global	vTaskPlaceOnEventList
 3380              		.syntax unified
 3381              		.thumb
 3382              		.thumb_func
 3383              		.type	vTaskPlaceOnEventList, %function
 3384              	vTaskPlaceOnEventList:
 3385              	.LVL210:
 3386              	.LFB30:
3021:../freertos/tasks.c **** 	configASSERT( pxEventList );
 3387              		.loc 1 3021 1 is_stmt 1 view -0
 3388              		.cfi_startproc
 3389              		@ args = 0, pretend = 0, frame = 0
 3390              		@ frame_needed = 0, uses_anonymous_args = 0
3022:../freertos/tasks.c **** 
 3391              		.loc 1 3022 29 view .LVU932
3031:../freertos/tasks.c **** 
 3392              		.loc 1 3031 2 view .LVU933
 3393              	@ ../freertos/tasks.c:3021: {
3021:../freertos/tasks.c **** 	configASSERT( pxEventList );
 3394              		.loc 1 3021 1 is_stmt 0 view .LVU934
 3395 092c 10B5     		push	{r4, lr}	@
 3396              	.LCFI29:
 3397              		.cfi_def_cfa_offset 8
 3398              		.cfi_offset 4, -8
 3399              		.cfi_offset 14, -4
 3400              	@ ../freertos/tasks.c:3021: {
3021:../freertos/tasks.c **** 	configASSERT( pxEventList );
 3401              		.loc 1 3021 1 view .LVU935
 3402 092e 0C46     		mov	r4, r1	@ xTicksToWait, tmp119
 3403              	@ ../freertos/tasks.c:3031: 	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
3031:../freertos/tasks.c **** 
 3404              		.loc 1 3031 43 view .LVU936
 3405 0930 054B     		ldr	r3, .L243	@ tmp117,
 3406 0932 5968     		ldr	r1, [r3, #4]	@ pxCurrentTCB.80_1, pxCurrentTCB
 3407              	.LVL211:
 3408              	@ ../freertos/tasks.c:3031: 	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
3031:../freertos/tasks.c **** 
 3409              		.loc 1 3031 2 view .LVU937
 3410 0934 1831     		adds	r1, r1, #24	@, pxCurrentTCB.80_1,
 3411 0936 FFF7FEFF 		bl	vListInsert		@
 3412              	.LVL212:
3033:../freertos/tasks.c **** }
 3413              		.loc 1 3033 2 is_stmt 1 view .LVU938
 3414 093a 2046     		mov	r0, r4	@, xTicksToWait
 3415              	@ ../freertos/tasks.c:3034: }
3034:../freertos/tasks.c **** /*-----------------------------------------------------------*/
 3416              		.loc 1 3034 1 is_stmt 0 view .LVU939
 3417 093c BDE81040 		pop	{r4, lr}	@
 3418              	.LCFI30:
ARM GAS  /tmp/ccaP1CVS.s 			page 172


 3419              		.cfi_restore 14
 3420              		.cfi_restore 4
 3421              		.cfi_def_cfa_offset 0
 3422              	.LVL213:
 3423              	@ ../freertos/tasks.c:3033: 	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
3033:../freertos/tasks.c **** }
 3424              		.loc 1 3033 2 view .LVU940
 3425 0940 0121     		movs	r1, #1	@,
 3426 0942 FFF75DBB 		b	prvAddCurrentTaskToDelayedList		@
 3427              	.LVL214:
 3428              	.L244:
3033:../freertos/tasks.c **** }
 3429              		.loc 1 3033 2 view .LVU941
 3430 0946 00BF     		.align	2
 3431              	.L243:
 3432 0948 00000000 		.word	.LANCHOR0
 3433              		.cfi_endproc
 3434              	.LFE30:
 3435              		.size	vTaskPlaceOnEventList, .-vTaskPlaceOnEventList
 3436              		.align	1
 3437              		.global	vTaskPlaceOnUnorderedEventList
 3438              		.syntax unified
 3439              		.thumb
 3440              		.thumb_func
 3441              		.type	vTaskPlaceOnUnorderedEventList, %function
 3442              	vTaskPlaceOnUnorderedEventList:
 3443              	.LVL215:
 3444              	.LFB31:
3038:../freertos/tasks.c **** 	configASSERT( pxEventList );
 3445              		.loc 1 3038 1 is_stmt 1 view -0
 3446              		.cfi_startproc
 3447              		@ args = 0, pretend = 0, frame = 0
 3448              		@ frame_needed = 0, uses_anonymous_args = 0
3039:../freertos/tasks.c **** 
 3449              		.loc 1 3039 29 view .LVU943
3043:../freertos/tasks.c **** 
 3450              		.loc 1 3043 43 view .LVU944
3048:../freertos/tasks.c **** 
 3451              		.loc 1 3048 2 view .LVU945
 3452              	@ ../freertos/tasks.c:3038: {
3038:../freertos/tasks.c **** 	configASSERT( pxEventList );
 3453              		.loc 1 3038 1 is_stmt 0 view .LVU946
 3454 094c 10B5     		push	{r4, lr}	@
 3455              	.LCFI31:
 3456              		.cfi_def_cfa_offset 8
 3457              		.cfi_offset 4, -8
 3458              		.cfi_offset 14, -4
 3459              	@ ../freertos/tasks.c:3038: {
3038:../freertos/tasks.c **** 	configASSERT( pxEventList );
 3460              		.loc 1 3038 1 view .LVU947
 3461 094e 1446     		mov	r4, r2	@ xTicksToWait, tmp125
 3462              	@ ../freertos/tasks.c:3048: 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue
3048:../freertos/tasks.c **** 
 3463              		.loc 1 3048 2 view .LVU948
 3464 0950 074B     		ldr	r3, .L246	@ tmp120,
 3465 0952 41F00041 		orr	r1, r1, #-2147483648	@ tmp121, tmp124,
 3466              	.LVL216:
ARM GAS  /tmp/ccaP1CVS.s 			page 173


3048:../freertos/tasks.c **** 
 3467              		.loc 1 3048 2 view .LVU949
 3468 0956 5A68     		ldr	r2, [r3, #4]	@ pxCurrentTCB.81_1, pxCurrentTCB
 3469              	.LVL217:
3048:../freertos/tasks.c **** 
 3470              		.loc 1 3048 2 view .LVU950
 3471 0958 9161     		str	r1, [r2, #24]	@ tmp121, pxCurrentTCB.81_1->xEventListItem.xItemValue
3055:../freertos/tasks.c **** 
 3472              		.loc 1 3055 2 is_stmt 1 view .LVU951
 3473              	@ ../freertos/tasks.c:3055: 	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
3055:../freertos/tasks.c **** 
 3474              		.loc 1 3055 46 is_stmt 0 view .LVU952
 3475 095a 5968     		ldr	r1, [r3, #4]	@ pxCurrentTCB.82_3, pxCurrentTCB
 3476              	@ ../freertos/tasks.c:3055: 	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
3055:../freertos/tasks.c **** 
 3477              		.loc 1 3055 2 view .LVU953
 3478 095c 1831     		adds	r1, r1, #24	@, pxCurrentTCB.82_3,
 3479 095e FFF7FEFF 		bl	vListInsertEnd		@
 3480              	.LVL218:
3057:../freertos/tasks.c **** }
 3481              		.loc 1 3057 2 is_stmt 1 view .LVU954
 3482 0962 2046     		mov	r0, r4	@, xTicksToWait
 3483              	@ ../freertos/tasks.c:3058: }
3058:../freertos/tasks.c **** /*-----------------------------------------------------------*/
 3484              		.loc 1 3058 1 is_stmt 0 view .LVU955
 3485 0964 BDE81040 		pop	{r4, lr}	@
 3486              	.LCFI32:
 3487              		.cfi_restore 14
 3488              		.cfi_restore 4
 3489              		.cfi_def_cfa_offset 0
 3490              	.LVL219:
 3491              	@ ../freertos/tasks.c:3057: 	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
3057:../freertos/tasks.c **** }
 3492              		.loc 1 3057 2 view .LVU956
 3493 0968 0121     		movs	r1, #1	@,
 3494 096a FFF749BB 		b	prvAddCurrentTaskToDelayedList		@
 3495              	.LVL220:
 3496              	.L247:
3057:../freertos/tasks.c **** }
 3497              		.loc 1 3057 2 view .LVU957
 3498 096e 00BF     		.align	2
 3499              	.L246:
 3500 0970 00000000 		.word	.LANCHOR0
 3501              		.cfi_endproc
 3502              	.LFE31:
 3503              		.size	vTaskPlaceOnUnorderedEventList, .-vTaskPlaceOnUnorderedEventList
 3504              		.align	1
 3505              		.global	vTaskPlaceOnEventListRestricted
 3506              		.syntax unified
 3507              		.thumb
 3508              		.thumb_func
 3509              		.type	vTaskPlaceOnEventListRestricted, %function
 3510              	vTaskPlaceOnEventListRestricted:
 3511              	.LVL221:
 3512              	.LFB32:
3064:../freertos/tasks.c **** 		configASSERT( pxEventList );
 3513              		.loc 1 3064 2 is_stmt 1 view -0
ARM GAS  /tmp/ccaP1CVS.s 			page 174


 3514              		.cfi_startproc
 3515              		@ args = 0, pretend = 0, frame = 0
 3516              		@ frame_needed = 0, uses_anonymous_args = 0
3065:../freertos/tasks.c **** 
 3517              		.loc 1 3065 30 view .LVU959
3077:../freertos/tasks.c **** 
 3518              		.loc 1 3077 3 view .LVU960
 3519              	@ ../freertos/tasks.c:3064: 	{
3064:../freertos/tasks.c **** 		configASSERT( pxEventList );
 3520              		.loc 1 3064 2 is_stmt 0 view .LVU961
 3521 0974 38B5     		push	{r3, r4, r5, lr}	@
 3522              	.LCFI33:
 3523              		.cfi_def_cfa_offset 16
 3524              		.cfi_offset 3, -16
 3525              		.cfi_offset 4, -12
 3526              		.cfi_offset 5, -8
 3527              		.cfi_offset 14, -4
 3528              	@ ../freertos/tasks.c:3064: 	{
3064:../freertos/tasks.c **** 		configASSERT( pxEventList );
 3529              		.loc 1 3064 2 view .LVU962
 3530 0976 1446     		mov	r4, r2	@ xWaitIndefinitely, tmp121
 3531 0978 0D46     		mov	r5, r1	@ xTicksToWait, tmp120
 3532              	@ ../freertos/tasks.c:3077: 		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
3077:../freertos/tasks.c **** 
 3533              		.loc 1 3077 47 view .LVU963
 3534 097a 084B     		ldr	r3, .L252	@ tmp118,
 3535 097c 5968     		ldr	r1, [r3, #4]	@ pxCurrentTCB.83_1, pxCurrentTCB
 3536              	.LVL222:
 3537              	@ ../freertos/tasks.c:3077: 		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
3077:../freertos/tasks.c **** 
 3538              		.loc 1 3077 3 view .LVU964
 3539 097e 1831     		adds	r1, r1, #24	@, pxCurrentTCB.83_1,
 3540 0980 FFF7FEFF 		bl	vListInsertEnd		@
 3541              	.LVL223:
3082:../freertos/tasks.c **** 		{
 3542              		.loc 1 3082 3 is_stmt 1 view .LVU965
 3543              	@ ../freertos/tasks.c:3084: 			xTicksToWait = portMAX_DELAY;
3084:../freertos/tasks.c **** 		}
 3544              		.loc 1 3084 17 is_stmt 0 view .LVU966
 3545 0984 002C     		cmp	r4, #0	@ xWaitIndefinitely,
 3546              	.LVL224:
3087:../freertos/tasks.c **** 		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 3547              		.loc 1 3087 57 is_stmt 1 view .LVU967
3088:../freertos/tasks.c **** 	}
 3548              		.loc 1 3088 3 view .LVU968
 3549 0986 2146     		mov	r1, r4	@, xWaitIndefinitely
 3550 0988 08BF     		it	eq
 3551 098a 2846     		moveq	r0, r5	@, xTicksToWait
 3552              	@ ../freertos/tasks.c:3089: 	}
3089:../freertos/tasks.c **** 
 3553              		.loc 1 3089 2 is_stmt 0 view .LVU969
 3554 098c BDE83840 		pop	{r3, r4, r5, lr}	@
 3555              	.LCFI34:
 3556              		.cfi_restore 14
 3557              		.cfi_restore 5
 3558              		.cfi_restore 4
 3559              		.cfi_restore 3
ARM GAS  /tmp/ccaP1CVS.s 			page 175


 3560              		.cfi_def_cfa_offset 0
 3561              	.LVL225:
 3562              	@ ../freertos/tasks.c:3088: 		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
3088:../freertos/tasks.c **** 	}
 3563              		.loc 1 3088 3 view .LVU970
 3564 0990 18BF     		it	ne
 3565 0992 4FF0FF30 		movne	r0, #-1	@,
 3566 0996 FFF733BB 		b	prvAddCurrentTaskToDelayedList		@
 3567              	.LVL226:
 3568              	.L253:
3088:../freertos/tasks.c **** 	}
 3569              		.loc 1 3088 3 view .LVU971
 3570 099a 00BF     		.align	2
 3571              	.L252:
 3572 099c 00000000 		.word	.LANCHOR0
 3573              		.cfi_endproc
 3574              	.LFE32:
 3575              		.size	vTaskPlaceOnEventListRestricted, .-vTaskPlaceOnEventListRestricted
 3576              		.align	1
 3577              		.global	xTaskRemoveFromEventList
 3578              		.syntax unified
 3579              		.thumb
 3580              		.thumb_func
 3581              		.type	xTaskRemoveFromEventList, %function
 3582              	xTaskRemoveFromEventList:
 3583              	.LVL227:
 3584              	.LFB33:
3095:../freertos/tasks.c **** TCB_t *pxUnblockedTCB;
 3585              		.loc 1 3095 1 is_stmt 1 view -0
 3586              		.cfi_startproc
 3587              		@ args = 0, pretend = 0, frame = 0
 3588              		@ frame_needed = 0, uses_anonymous_args = 0
3096:../freertos/tasks.c **** BaseType_t xReturn;
 3589              		.loc 1 3096 1 view .LVU973
3097:../freertos/tasks.c **** 
 3590              		.loc 1 3097 1 view .LVU974
3112:../freertos/tasks.c **** 	configASSERT( pxUnblockedTCB );
 3591              		.loc 1 3112 2 view .LVU975
 3592              	@ ../freertos/tasks.c:3112: 	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e
3112:../freertos/tasks.c **** 	configASSERT( pxUnblockedTCB );
 3593              		.loc 1 3112 17 is_stmt 0 view .LVU976
 3594 09a0 C368     		ldr	r3, [r0, #12]	@ pxEventList_17(D)->xListEnd.pxNext, pxEventList_17(D)->xListEnd.pxNext
 3595              	@ ../freertos/tasks.c:3095: {
3095:../freertos/tasks.c **** TCB_t *pxUnblockedTCB;
 3596              		.loc 1 3095 1 view .LVU977
 3597 09a2 70B5     		push	{r4, r5, r6, lr}	@
 3598              	.LCFI35:
 3599              		.cfi_def_cfa_offset 16
 3600              		.cfi_offset 4, -16
 3601              		.cfi_offset 5, -12
 3602              		.cfi_offset 6, -8
 3603              		.cfi_offset 14, -4
 3604              	@ ../freertos/tasks.c:3112: 	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e
3112:../freertos/tasks.c **** 	configASSERT( pxUnblockedTCB );
 3605              		.loc 1 3112 17 view .LVU978
 3606 09a4 DD68     		ldr	r5, [r3, #12]	@ pxUnblockedTCB, _1->pvOwner
 3607              	.LVL228:
ARM GAS  /tmp/ccaP1CVS.s 			page 176


3113:../freertos/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 3608              		.loc 1 3113 32 is_stmt 1 view .LVU979
3114:../freertos/tasks.c **** 
 3609              		.loc 1 3114 2 view .LVU980
 3610              	@ ../freertos/tasks.c:3116: 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
3116:../freertos/tasks.c **** 	{
 3611              		.loc 1 3116 27 is_stmt 0 view .LVU981
 3612 09a6 144C     		ldr	r4, .L260	@ tmp130,
 3613              	@ ../freertos/tasks.c:3114: 	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
3114:../freertos/tasks.c **** 
 3614              		.loc 1 3114 11 view .LVU982
 3615 09a8 05F11806 		add	r6, r5, #24	@ _2, pxUnblockedTCB,
 3616 09ac 3046     		mov	r0, r6	@, _2
 3617              	.LVL229:
3114:../freertos/tasks.c **** 
 3618              		.loc 1 3114 11 view .LVU983
 3619 09ae FFF7FEFF 		bl	uxListRemove		@
 3620              	.LVL230:
3116:../freertos/tasks.c **** 	{
 3621              		.loc 1 3116 2 is_stmt 1 view .LVU984
 3622              	@ ../freertos/tasks.c:3116: 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
3116:../freertos/tasks.c **** 	{
 3623              		.loc 1 3116 27 is_stmt 0 view .LVU985
 3624 09b2 D4F8F030 		ldr	r3, [r4, #240]	@ uxSchedulerSuspended.84_3, uxSchedulerSuspended
 3625              	@ ../freertos/tasks.c:3116: 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
3116:../freertos/tasks.c **** 	{
 3626              		.loc 1 3116 4 view .LVU986
 3627 09b6 DBB9     		cbnz	r3, .L255	@ uxSchedulerSuspended.84_3,
3118:../freertos/tasks.c **** 		prvAddTaskToReadyList( pxUnblockedTCB );
 3628              		.loc 1 3118 3 is_stmt 1 view .LVU987
 3629              	@ ../freertos/tasks.c:3118: 		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
3118:../freertos/tasks.c **** 		prvAddTaskToReadyList( pxUnblockedTCB );
 3630              		.loc 1 3118 12 is_stmt 0 view .LVU988
 3631 09b8 2E1D     		adds	r6, r5, #4	@ _4, pxUnblockedTCB,
 3632 09ba 3046     		mov	r0, r6	@, _4
 3633 09bc FFF7FEFF 		bl	uxListRemove		@
 3634              	.LVL231:
3119:../freertos/tasks.c **** 
 3635              		.loc 1 3119 3 is_stmt 1 view .LVU989
3119:../freertos/tasks.c **** 
 3636              		.loc 1 3119 3 view .LVU990
 3637 09c0 0123     		movs	r3, #1	@ tmp133,
 3638 09c2 1420     		movs	r0, #20	@ tmp138,
 3639 09c4 EA6A     		ldr	r2, [r5, #44]	@ _5, pxUnblockedTCB_18->uxPriority
 3640 09c6 A168     		ldr	r1, [r4, #8]	@ uxTopReadyPriority.85_7, uxTopReadyPriority
 3641 09c8 9340     		lsls	r3, r3, r2	@ tmp132, tmp133, _5
 3642 09ca 0B43     		orrs	r3, r3, r1	@, _8, tmp132, uxTopReadyPriority.85_7
 3643 09cc 3146     		mov	r1, r6	@, _4
 3644 09ce A360     		str	r3, [r4, #8]	@ _8, uxTopReadyPriority
3119:../freertos/tasks.c **** 
 3645              		.loc 1 3119 3 view .LVU991
 3646 09d0 04F14803 		add	r3, r4, #72	@ tmp136, tmp130,
 3647 09d4 00FB0230 		mla	r0, r0, r2, r3	@, tmp138, _5, tmp136
 3648              	.L259:
 3649              	@ ../freertos/tasks.c:3139: 		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventList
3139:../freertos/tasks.c **** 	}
 3650              		.loc 1 3139 3 is_stmt 0 view .LVU992
ARM GAS  /tmp/ccaP1CVS.s 			page 177


 3651 09d8 FFF7FEFF 		bl	vListInsertEnd		@
 3652              	.LVL232:
3142:../freertos/tasks.c **** 	{
 3653              		.loc 1 3142 2 is_stmt 1 view .LVU993
 3654              	@ ../freertos/tasks.c:3142: 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
3142:../freertos/tasks.c **** 	{
 3655              		.loc 1 3142 47 is_stmt 0 view .LVU994
 3656 09dc 6368     		ldr	r3, [r4, #4]	@ pxCurrentTCB.86_11, pxCurrentTCB
 3657              	@ ../freertos/tasks.c:3142: 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
3142:../freertos/tasks.c **** 	{
 3658              		.loc 1 3142 4 view .LVU995
 3659 09de EA6A     		ldr	r2, [r5, #44]	@ pxUnblockedTCB_18->uxPriority, pxUnblockedTCB_18->uxPriority
 3660 09e0 DB6A     		ldr	r3, [r3, #44]	@ pxCurrentTCB.86_11->uxPriority, pxCurrentTCB.86_11->uxPriority
 3661 09e2 9A42     		cmp	r2, r3	@ pxUnblockedTCB_18->uxPriority, pxCurrentTCB.86_11->uxPriority
3147:../freertos/tasks.c **** 
 3662              		.loc 1 3147 3 is_stmt 1 view .LVU996
 3663              	.LVL233:
3151:../freertos/tasks.c **** 	}
 3664              		.loc 1 3151 3 view .LVU997
 3665              	@ ../freertos/tasks.c:3151: 		xYieldPending = pdTRUE;
3151:../freertos/tasks.c **** 	}
 3666              		.loc 1 3151 17 is_stmt 0 view .LVU998
 3667 09e4 8ABF     		itet	hi
 3668 09e6 0120     		movhi	r0, #1	@ tmp146,
 3669              	@ ../freertos/tasks.c:3155: 		xReturn = pdFALSE;
3155:../freertos/tasks.c **** 	}
 3670              		.loc 1 3155 11 view .LVU999
 3671 09e8 0020     		movls	r0, #0	@ <retval>,
 3672              	.LVL234:
3158:../freertos/tasks.c **** }
 3673              		.loc 1 3158 2 is_stmt 1 view .LVU1000
 3674              	@ ../freertos/tasks.c:3151: 		xYieldPending = pdTRUE;
3151:../freertos/tasks.c **** 	}
 3675              		.loc 1 3151 17 is_stmt 0 view .LVU1001
 3676 09ea C4F80001 		strhi	r0, [r4, #256]	@ tmp146, xYieldPending
 3677              	@ ../freertos/tasks.c:3159: }
3159:../freertos/tasks.c **** /*-----------------------------------------------------------*/
 3678              		.loc 1 3159 1 view .LVU1002
 3679 09ee 70BD     		pop	{r4, r5, r6, pc}	@
 3680              	.LVL235:
 3681              	.L255:
3139:../freertos/tasks.c **** 	}
 3682              		.loc 1 3139 3 is_stmt 1 view .LVU1003
 3683 09f0 3146     		mov	r1, r6	@, _2
 3684 09f2 04F1D400 		add	r0, r4, #212	@, tmp130,
 3685 09f6 EFE7     		b	.L259		@
 3686              	.L261:
 3687              		.align	2
 3688              	.L260:
 3689 09f8 00000000 		.word	.LANCHOR0
 3690              		.cfi_endproc
 3691              	.LFE33:
 3692              		.size	xTaskRemoveFromEventList, .-xTaskRemoveFromEventList
 3693              		.align	1
 3694              		.global	vTaskRemoveFromUnorderedEventList
 3695              		.syntax unified
 3696              		.thumb
ARM GAS  /tmp/ccaP1CVS.s 			page 178


 3697              		.thumb_func
 3698              		.type	vTaskRemoveFromUnorderedEventList, %function
 3699              	vTaskRemoveFromUnorderedEventList:
 3700              	.LVL236:
 3701              	.LFB34:
3163:../freertos/tasks.c **** TCB_t *pxUnblockedTCB;
 3702              		.loc 1 3163 1 view -0
 3703              		.cfi_startproc
 3704              		@ args = 0, pretend = 0, frame = 0
 3705              		@ frame_needed = 0, uses_anonymous_args = 0
3164:../freertos/tasks.c **** 
 3706              		.loc 1 3164 1 view .LVU1005
3168:../freertos/tasks.c **** 
 3707              		.loc 1 3168 49 view .LVU1006
3171:../freertos/tasks.c **** 
 3708              		.loc 1 3171 2 view .LVU1007
 3709              	@ ../freertos/tasks.c:3163: {
3163:../freertos/tasks.c **** TCB_t *pxUnblockedTCB;
 3710              		.loc 1 3163 1 is_stmt 0 view .LVU1008
 3711 09fc F8B5     		push	{r3, r4, r5, r6, r7, lr}	@
 3712              	.LCFI36:
 3713              		.cfi_def_cfa_offset 24
 3714              		.cfi_offset 3, -24
 3715              		.cfi_offset 4, -20
 3716              		.cfi_offset 5, -16
 3717              		.cfi_offset 6, -12
 3718              		.cfi_offset 7, -8
 3719              		.cfi_offset 14, -4
 3720              	@ ../freertos/tasks.c:3175: 	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e
3175:../freertos/tasks.c **** 	configASSERT( pxUnblockedTCB );
 3721              		.loc 1 3175 17 view .LVU1009
 3722 09fe C568     		ldr	r5, [r0, #12]	@ pxUnblockedTCB, pxEventListItem_14(D)->pvOwner
 3723              	@ ../freertos/tasks.c:3171: 	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_
3171:../freertos/tasks.c **** 
 3724              		.loc 1 3171 2 view .LVU1010
 3725 0a00 41F00041 		orr	r1, r1, #-2147483648	@ tmp127, tmp143,
 3726              	.LVL237:
 3727              	@ ../freertos/tasks.c:3183: 	prvAddTaskToReadyList( pxUnblockedTCB );
3183:../freertos/tasks.c **** 
 3728              		.loc 1 3183 2 view .LVU1011
 3729 0a04 0126     		movs	r6, #1	@ tmp130,
 3730              	@ ../freertos/tasks.c:3171: 	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_
3171:../freertos/tasks.c **** 
 3731              		.loc 1 3171 2 view .LVU1012
 3732 0a06 0160     		str	r1, [r0]	@ tmp127, pxEventListItem_14(D)->xItemValue
3175:../freertos/tasks.c **** 	configASSERT( pxUnblockedTCB );
 3733              		.loc 1 3175 2 is_stmt 1 view .LVU1013
 3734              	.LVL238:
3176:../freertos/tasks.c **** 	( void ) uxListRemove( pxEventListItem );
 3735              		.loc 1 3176 32 view .LVU1014
3177:../freertos/tasks.c **** 
 3736              		.loc 1 3177 2 view .LVU1015
 3737              	@ ../freertos/tasks.c:3182: 	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
3182:../freertos/tasks.c **** 	prvAddTaskToReadyList( pxUnblockedTCB );
 3738              		.loc 1 3182 11 is_stmt 0 view .LVU1016
 3739 0a08 2F1D     		adds	r7, r5, #4	@ _2, pxUnblockedTCB,
 3740              	@ ../freertos/tasks.c:3177: 	( void ) uxListRemove( pxEventListItem );
ARM GAS  /tmp/ccaP1CVS.s 			page 179


3177:../freertos/tasks.c **** 
 3741              		.loc 1 3177 11 view .LVU1017
 3742 0a0a FFF7FEFF 		bl	uxListRemove		@
 3743              	.LVL239:
3182:../freertos/tasks.c **** 	prvAddTaskToReadyList( pxUnblockedTCB );
 3744              		.loc 1 3182 2 is_stmt 1 view .LVU1018
 3745              	@ ../freertos/tasks.c:3182: 	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
3182:../freertos/tasks.c **** 	prvAddTaskToReadyList( pxUnblockedTCB );
 3746              		.loc 1 3182 11 is_stmt 0 view .LVU1019
 3747 0a0e 3846     		mov	r0, r7	@, _2
 3748 0a10 FFF7FEFF 		bl	uxListRemove		@
 3749              	.LVL240:
3183:../freertos/tasks.c **** 
 3750              		.loc 1 3183 2 is_stmt 1 view .LVU1020
3183:../freertos/tasks.c **** 
 3751              		.loc 1 3183 2 view .LVU1021
 3752 0a14 1420     		movs	r0, #20	@ tmp135,
 3753 0a16 0B4C     		ldr	r4, .L264	@ tmp128,
 3754 0a18 EA6A     		ldr	r2, [r5, #44]	@ _3, pxUnblockedTCB_16->uxPriority
 3755 0a1a A168     		ldr	r1, [r4, #8]	@ uxTopReadyPriority.87_5, uxTopReadyPriority
 3756 0a1c 06FA02F3 		lsl	r3, r6, r2	@ tmp129, tmp130, _3
 3757 0a20 0B43     		orrs	r3, r3, r1	@, _6, tmp129, uxTopReadyPriority.87_5
 3758 0a22 A360     		str	r3, [r4, #8]	@ _6, uxTopReadyPriority
3183:../freertos/tasks.c **** 
 3759              		.loc 1 3183 2 view .LVU1022
 3760 0a24 04F14803 		add	r3, r4, #72	@ tmp133, tmp128,
 3761 0a28 00FB0230 		mla	r0, r0, r2, r3	@, tmp135, _3, tmp133
 3762 0a2c 3946     		mov	r1, r7	@, _2
 3763 0a2e FFF7FEFF 		bl	vListInsertEnd		@
 3764              	.LVL241:
3183:../freertos/tasks.c **** 
 3765              		.loc 1 3183 41 view .LVU1023
3185:../freertos/tasks.c **** 	{
 3766              		.loc 1 3185 2 view .LVU1024
 3767              	@ ../freertos/tasks.c:3185: 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
3185:../freertos/tasks.c **** 	{
 3768              		.loc 1 3185 47 is_stmt 0 view .LVU1025
 3769 0a32 6368     		ldr	r3, [r4, #4]	@ pxCurrentTCB.88_9, pxCurrentTCB
 3770              	@ ../freertos/tasks.c:3185: 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
3185:../freertos/tasks.c **** 	{
 3771              		.loc 1 3185 4 view .LVU1026
 3772 0a34 EA6A     		ldr	r2, [r5, #44]	@ pxUnblockedTCB_16->uxPriority, pxUnblockedTCB_16->uxPriority
 3773 0a36 DB6A     		ldr	r3, [r3, #44]	@ pxCurrentTCB.88_9->uxPriority, pxCurrentTCB.88_9->uxPriority
 3774 0a38 9A42     		cmp	r2, r3	@ pxUnblockedTCB_16->uxPriority, pxCurrentTCB.88_9->uxPriority
3191:../freertos/tasks.c **** 	}
 3775              		.loc 1 3191 3 is_stmt 1 view .LVU1027
 3776              	@ ../freertos/tasks.c:3191: 		xYieldPending = pdTRUE;
3191:../freertos/tasks.c **** 	}
 3777              		.loc 1 3191 17 is_stmt 0 view .LVU1028
 3778 0a3a 88BF     		it	hi
 3779 0a3c C4F80061 		strhi	r6, [r4, #256]	@ tmp130, xYieldPending
 3780              	@ ../freertos/tasks.c:3193: }
3193:../freertos/tasks.c **** /*-----------------------------------------------------------*/
 3781              		.loc 1 3193 1 view .LVU1029
 3782 0a40 F8BD     		pop	{r3, r4, r5, r6, r7, pc}	@
 3783              	.LVL242:
 3784              	.L265:
ARM GAS  /tmp/ccaP1CVS.s 			page 180


3193:../freertos/tasks.c **** /*-----------------------------------------------------------*/
 3785              		.loc 1 3193 1 view .LVU1030
 3786 0a42 00BF     		.align	2
 3787              	.L264:
 3788 0a44 00000000 		.word	.LANCHOR0
 3789              		.cfi_endproc
 3790              	.LFE34:
 3791              		.size	vTaskRemoveFromUnorderedEventList, .-vTaskRemoveFromUnorderedEventList
 3792              		.align	1
 3793              		.global	vTaskSetTimeOutState
 3794              		.syntax unified
 3795              		.thumb
 3796              		.thumb_func
 3797              		.type	vTaskSetTimeOutState, %function
 3798              	vTaskSetTimeOutState:
 3799              	.LVL243:
 3800              	.LFB35:
3197:../freertos/tasks.c **** 	configASSERT( pxTimeOut );
 3801              		.loc 1 3197 1 is_stmt 1 view -0
 3802              		.cfi_startproc
 3803              		@ args = 0, pretend = 0, frame = 0
 3804              		@ frame_needed = 0, uses_anonymous_args = 0
3198:../freertos/tasks.c **** 	taskENTER_CRITICAL();
 3805              		.loc 1 3198 27 view .LVU1032
3199:../freertos/tasks.c **** 	{
 3806              		.loc 1 3199 2 view .LVU1033
 3807              	@ ../freertos/tasks.c:3197: {
3197:../freertos/tasks.c **** 	configASSERT( pxTimeOut );
 3808              		.loc 1 3197 1 is_stmt 0 view .LVU1034
 3809 0a48 10B5     		push	{r4, lr}	@
 3810              	.LCFI37:
 3811              		.cfi_def_cfa_offset 8
 3812              		.cfi_offset 4, -8
 3813              		.cfi_offset 14, -4
 3814              	@ ../freertos/tasks.c:3197: {
3197:../freertos/tasks.c **** 	configASSERT( pxTimeOut );
 3815              		.loc 1 3197 1 view .LVU1035
 3816 0a4a 0446     		mov	r4, r0	@ pxTimeOut, tmp118
 3817              	@ ../freertos/tasks.c:3199: 	taskENTER_CRITICAL();
3199:../freertos/tasks.c **** 	{
 3818              		.loc 1 3199 2 view .LVU1036
 3819 0a4c FFF7FEFF 		bl	vPortEnterCritical		@
 3820              	.LVL244:
3201:../freertos/tasks.c **** 		pxTimeOut->xTimeOnEntering = xTickCount;
 3821              		.loc 1 3201 3 is_stmt 1 view .LVU1037
 3822              	@ ../freertos/tasks.c:3201: 		pxTimeOut->xOverflowCount = xNumOfOverflows;
3201:../freertos/tasks.c **** 		pxTimeOut->xTimeOnEntering = xTickCount;
 3823              		.loc 1 3201 29 is_stmt 0 view .LVU1038
 3824 0a50 044B     		ldr	r3, .L267	@ tmp116,
 3825 0a52 D3F8F820 		ldr	r2, [r3, #248]	@ xNumOfOverflows.89_1, xNumOfOverflows
 3826              	@ ../freertos/tasks.c:3202: 		pxTimeOut->xTimeOnEntering = xTickCount;
3202:../freertos/tasks.c **** 	}
 3827              		.loc 1 3202 30 view .LVU1039
 3828 0a56 1B68     		ldr	r3, [r3]	@ xTickCount.90_2, xTickCount
 3829              	@ ../freertos/tasks.c:3201: 		pxTimeOut->xOverflowCount = xNumOfOverflows;
3201:../freertos/tasks.c **** 		pxTimeOut->xTimeOnEntering = xTickCount;
 3830              		.loc 1 3201 29 view .LVU1040
ARM GAS  /tmp/ccaP1CVS.s 			page 181


 3831 0a58 2260     		str	r2, [r4]	@ xNumOfOverflows.89_1, pxTimeOut_5(D)->xOverflowCount
3202:../freertos/tasks.c **** 	}
 3832              		.loc 1 3202 3 is_stmt 1 view .LVU1041
 3833              	@ ../freertos/tasks.c:3202: 		pxTimeOut->xTimeOnEntering = xTickCount;
3202:../freertos/tasks.c **** 	}
 3834              		.loc 1 3202 30 is_stmt 0 view .LVU1042
 3835 0a5a 6360     		str	r3, [r4, #4]	@ xTickCount.90_2, pxTimeOut_5(D)->xTimeOnEntering
3204:../freertos/tasks.c **** }
 3836              		.loc 1 3204 2 is_stmt 1 view .LVU1043
 3837              	@ ../freertos/tasks.c:3205: }
3205:../freertos/tasks.c **** /*-----------------------------------------------------------*/
 3838              		.loc 1 3205 1 is_stmt 0 view .LVU1044
 3839 0a5c BDE81040 		pop	{r4, lr}	@
 3840              	.LCFI38:
 3841              		.cfi_restore 14
 3842              		.cfi_restore 4
 3843              		.cfi_def_cfa_offset 0
 3844              	.LVL245:
 3845              	@ ../freertos/tasks.c:3204: 	taskEXIT_CRITICAL();
3204:../freertos/tasks.c **** }
 3846              		.loc 1 3204 2 view .LVU1045
 3847 0a60 FFF7FEBF 		b	vPortExitCritical		@
 3848              	.LVL246:
 3849              	.L268:
 3850              		.align	2
 3851              	.L267:
 3852 0a64 00000000 		.word	.LANCHOR0
 3853              		.cfi_endproc
 3854              	.LFE35:
 3855              		.size	vTaskSetTimeOutState, .-vTaskSetTimeOutState
 3856              		.align	1
 3857              		.global	vTaskInternalSetTimeOutState
 3858              		.syntax unified
 3859              		.thumb
 3860              		.thumb_func
 3861              		.type	vTaskInternalSetTimeOutState, %function
 3862              	vTaskInternalSetTimeOutState:
 3863              	.LVL247:
 3864              	.LFB36:
3209:../freertos/tasks.c **** 	/* For internal use only as it does not use a critical section. */
 3865              		.loc 1 3209 1 is_stmt 1 view -0
 3866              		.cfi_startproc
 3867              		@ args = 0, pretend = 0, frame = 0
 3868              		@ frame_needed = 0, uses_anonymous_args = 0
 3869              		@ link register save eliminated.
3211:../freertos/tasks.c **** 	pxTimeOut->xTimeOnEntering = xTickCount;
 3870              		.loc 1 3211 2 view .LVU1047
 3871              	@ ../freertos/tasks.c:3211: 	pxTimeOut->xOverflowCount = xNumOfOverflows;
3211:../freertos/tasks.c **** 	pxTimeOut->xTimeOnEntering = xTickCount;
 3872              		.loc 1 3211 28 is_stmt 0 view .LVU1048
 3873 0a68 034B     		ldr	r3, .L270	@ tmp116,
 3874 0a6a D3F8F820 		ldr	r2, [r3, #248]	@ xNumOfOverflows.91_1, xNumOfOverflows
 3875              	@ ../freertos/tasks.c:3212: 	pxTimeOut->xTimeOnEntering = xTickCount;
3212:../freertos/tasks.c **** }
 3876              		.loc 1 3212 29 view .LVU1049
 3877 0a6e 1B68     		ldr	r3, [r3]	@ xTickCount.92_2, xTickCount
 3878              	@ ../freertos/tasks.c:3211: 	pxTimeOut->xOverflowCount = xNumOfOverflows;
ARM GAS  /tmp/ccaP1CVS.s 			page 182


3211:../freertos/tasks.c **** 	pxTimeOut->xTimeOnEntering = xTickCount;
 3879              		.loc 1 3211 28 view .LVU1050
 3880 0a70 0260     		str	r2, [r0]	@ xNumOfOverflows.91_1, pxTimeOut_4(D)->xOverflowCount
3212:../freertos/tasks.c **** }
 3881              		.loc 1 3212 2 is_stmt 1 view .LVU1051
 3882              	@ ../freertos/tasks.c:3212: 	pxTimeOut->xTimeOnEntering = xTickCount;
3212:../freertos/tasks.c **** }
 3883              		.loc 1 3212 29 is_stmt 0 view .LVU1052
 3884 0a72 4360     		str	r3, [r0, #4]	@ xTickCount.92_2, pxTimeOut_4(D)->xTimeOnEntering
 3885              	@ ../freertos/tasks.c:3213: }
3213:../freertos/tasks.c **** /*-----------------------------------------------------------*/
 3886              		.loc 1 3213 1 view .LVU1053
 3887 0a74 7047     		bx	lr	@
 3888              	.L271:
 3889 0a76 00BF     		.align	2
 3890              	.L270:
 3891 0a78 00000000 		.word	.LANCHOR0
 3892              		.cfi_endproc
 3893              	.LFE36:
 3894              		.size	vTaskInternalSetTimeOutState, .-vTaskInternalSetTimeOutState
 3895              		.align	1
 3896              		.global	xTaskCheckForTimeOut
 3897              		.syntax unified
 3898              		.thumb
 3899              		.thumb_func
 3900              		.type	xTaskCheckForTimeOut, %function
 3901              	xTaskCheckForTimeOut:
 3902              	.LVL248:
 3903              	.LFB37:
3217:../freertos/tasks.c **** BaseType_t xReturn;
 3904              		.loc 1 3217 1 is_stmt 1 view -0
 3905              		.cfi_startproc
 3906              		@ args = 0, pretend = 0, frame = 0
 3907              		@ frame_needed = 0, uses_anonymous_args = 0
3218:../freertos/tasks.c **** 
 3908              		.loc 1 3218 1 view .LVU1055
3220:../freertos/tasks.c **** 	configASSERT( pxTicksToWait );
 3909              		.loc 1 3220 27 view .LVU1056
3221:../freertos/tasks.c **** 
 3910              		.loc 1 3221 31 view .LVU1057
3223:../freertos/tasks.c **** 	{
 3911              		.loc 1 3223 2 view .LVU1058
 3912              	@ ../freertos/tasks.c:3217: {
3217:../freertos/tasks.c **** BaseType_t xReturn;
 3913              		.loc 1 3217 1 is_stmt 0 view .LVU1059
 3914 0a7c 70B5     		push	{r4, r5, r6, lr}	@
 3915              	.LCFI39:
 3916              		.cfi_def_cfa_offset 16
 3917              		.cfi_offset 4, -16
 3918              		.cfi_offset 5, -12
 3919              		.cfi_offset 6, -8
 3920              		.cfi_offset 14, -4
 3921              	@ ../freertos/tasks.c:3217: {
3217:../freertos/tasks.c **** BaseType_t xReturn;
 3922              		.loc 1 3217 1 view .LVU1060
 3923 0a7e 0C46     		mov	r4, r1	@ pxTicksToWait, tmp133
 3924 0a80 0546     		mov	r5, r0	@ pxTimeOut, tmp132
ARM GAS  /tmp/ccaP1CVS.s 			page 183


 3925              	@ ../freertos/tasks.c:3223: 	taskENTER_CRITICAL();
3223:../freertos/tasks.c **** 	{
 3926              		.loc 1 3223 2 view .LVU1061
 3927 0a82 FFF7FEFF 		bl	vPortEnterCritical		@
 3928              	.LVL249:
 3929              	.LBB136:
3226:../freertos/tasks.c **** 		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 3930              		.loc 1 3226 3 is_stmt 1 view .LVU1062
 3931              	@ ../freertos/tasks.c:3241: 			if( *pxTicksToWait == portMAX_DELAY )
3241:../freertos/tasks.c **** 			{
 3932              		.loc 1 3241 8 is_stmt 0 view .LVU1063
 3933 0a86 2368     		ldr	r3, [r4]	@ _2, *pxTicksToWait_13(D)
 3934              	@ ../freertos/tasks.c:3226: 		const TickType_t xConstTickCount = xTickCount;
3226:../freertos/tasks.c **** 		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 3935              		.loc 1 3226 20 view .LVU1064
 3936 0a88 0E48     		ldr	r0, .L278	@ tmp124,
 3937              	@ ../freertos/tasks.c:3241: 			if( *pxTicksToWait == portMAX_DELAY )
3241:../freertos/tasks.c **** 			{
 3938              		.loc 1 3241 6 view .LVU1065
 3939 0a8a 5A1C     		adds	r2, r3, #1	@, _2,
 3940              	@ ../freertos/tasks.c:3226: 		const TickType_t xConstTickCount = xTickCount;
3226:../freertos/tasks.c **** 		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 3941              		.loc 1 3226 20 view .LVU1066
 3942 0a8c 0168     		ldr	r1, [r0]	@ xConstTickCount, xTickCount
 3943              	.LVL250:
3227:../freertos/tasks.c **** 
 3944              		.loc 1 3227 3 is_stmt 1 view .LVU1067
3241:../freertos/tasks.c **** 			{
 3945              		.loc 1 3241 4 view .LVU1068
 3946              	@ ../freertos/tasks.c:3241: 			if( *pxTicksToWait == portMAX_DELAY )
3241:../freertos/tasks.c **** 			{
 3947              		.loc 1 3241 6 is_stmt 0 view .LVU1069
 3948 0a8e 10D0     		beq	.L276		@,
 3949              	@ ../freertos/tasks.c:3251: 		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickC
3251:../freertos/tasks.c **** 		{
 3950              		.loc 1 3251 25 view .LVU1070
 3951 0a90 D0F8F800 		ldr	r0, [r0, #248]	@ xNumOfOverflows.93_4, xNumOfOverflows
 3952              	@ ../freertos/tasks.c:3251: 		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickC
3251:../freertos/tasks.c **** 		{
 3953              		.loc 1 3251 5 view .LVU1071
 3954 0a94 2E68     		ldr	r6, [r5]	@ pxTimeOut_11(D)->xOverflowCount, pxTimeOut_11(D)->xOverflowCount
 3955              	@ ../freertos/tasks.c:3227: 		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnE
3227:../freertos/tasks.c **** 
 3956              		.loc 1 3227 62 view .LVU1072
 3957 0a96 6A68     		ldr	r2, [r5, #4]	@ _1, pxTimeOut_11(D)->xTimeOnEntering
3251:../freertos/tasks.c **** 		{
 3958              		.loc 1 3251 3 is_stmt 1 view .LVU1073
 3959              	@ ../freertos/tasks.c:3251: 		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickC
3251:../freertos/tasks.c **** 		{
 3960              		.loc 1 3251 5 is_stmt 0 view .LVU1074
 3961 0a98 8642     		cmp	r6, r0	@ pxTimeOut_11(D)->xOverflowCount, xNumOfOverflows.93_4
 3962 0a9a 01D0     		beq	.L274		@,
 3963              	@ ../freertos/tasks.c:3251: 		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickC
3251:../freertos/tasks.c **** 		{
 3964              		.loc 1 3251 56 discriminator 1 view .LVU1075
 3965 0a9c 8A42     		cmp	r2, r1	@ _1, xConstTickCount
 3966 0a9e 0FD9     		bls	.L277		@,
ARM GAS  /tmp/ccaP1CVS.s 			page 184


 3967              	.L274:
3260:../freertos/tasks.c **** 		{
 3968              		.loc 1 3260 8 is_stmt 1 view .LVU1076
 3969              	@ ../freertos/tasks.c:3227: 		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnE
3227:../freertos/tasks.c **** 
 3970              		.loc 1 3227 20 is_stmt 0 view .LVU1077
 3971 0aa0 881A     		subs	r0, r1, r2	@ xElapsedTime, xConstTickCount, _1
 3972              	@ ../freertos/tasks.c:3260: 		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit castin
3260:../freertos/tasks.c **** 		{
 3973              		.loc 1 3260 10 view .LVU1078
 3974 0aa2 8342     		cmp	r3, r0	@ _2, xElapsedTime
 3975 0aa4 0AD9     		bls	.L275		@,
3263:../freertos/tasks.c **** 			vTaskInternalSetTimeOutState( pxTimeOut );
 3976              		.loc 1 3263 4 is_stmt 1 view .LVU1079
 3977              	@ ../freertos/tasks.c:3263: 			*pxTicksToWait -= xElapsedTime;
3263:../freertos/tasks.c **** 			vTaskInternalSetTimeOutState( pxTimeOut );
 3978              		.loc 1 3263 19 is_stmt 0 view .LVU1080
 3979 0aa6 5B1A     		subs	r3, r3, r1	@ tmp128, _2, xConstTickCount
 3980 0aa8 1344     		add	r3, r3, r2	@ tmp129, _1
 3981              	@ ../freertos/tasks.c:3264: 			vTaskInternalSetTimeOutState( pxTimeOut );
3264:../freertos/tasks.c **** 			xReturn = pdFALSE;
 3982              		.loc 1 3264 4 view .LVU1081
 3983 0aaa 2846     		mov	r0, r5	@, pxTimeOut
 3984              	@ ../freertos/tasks.c:3263: 			*pxTicksToWait -= xElapsedTime;
3263:../freertos/tasks.c **** 			vTaskInternalSetTimeOutState( pxTimeOut );
 3985              		.loc 1 3263 19 view .LVU1082
 3986 0aac 2360     		str	r3, [r4]	@ tmp129, *pxTicksToWait_13(D)
 3987              	.LVL251:
3264:../freertos/tasks.c **** 			xReturn = pdFALSE;
 3988              		.loc 1 3264 4 is_stmt 1 view .LVU1083
 3989 0aae FFF7FEFF 		bl	vTaskInternalSetTimeOutState		@
 3990              	.LVL252:
3265:../freertos/tasks.c **** 		}
 3991              		.loc 1 3265 4 view .LVU1084
 3992              	.L276:
 3993              	@ ../freertos/tasks.c:3246: 				xReturn = pdFALSE;
3246:../freertos/tasks.c **** 			}
 3994              		.loc 1 3246 13 is_stmt 0 view .LVU1085
 3995 0ab2 0024     		movs	r4, #0	@ <retval>,
 3996              	.LVL253:
 3997              	.L273:
3246:../freertos/tasks.c **** 			}
 3998              		.loc 1 3246 13 view .LVU1086
 3999              	.LBE136:
3273:../freertos/tasks.c **** 
 4000              		.loc 1 3273 2 is_stmt 1 view .LVU1087
 4001 0ab4 FFF7FEFF 		bl	vPortExitCritical		@
 4002              	.LVL254:
3275:../freertos/tasks.c **** }
 4003              		.loc 1 3275 2 view .LVU1088
 4004              	@ ../freertos/tasks.c:3276: }
3276:../freertos/tasks.c **** /*-----------------------------------------------------------*/
 4005              		.loc 1 3276 1 is_stmt 0 view .LVU1089
 4006 0ab8 2046     		mov	r0, r4	@, <retval>
 4007 0aba 70BD     		pop	{r4, r5, r6, pc}	@
 4008              	.LVL255:
 4009              	.L275:
ARM GAS  /tmp/ccaP1CVS.s 			page 185


 4010              	.LBB137:
3269:../freertos/tasks.c **** 			xReturn = pdTRUE;
 4011              		.loc 1 3269 4 is_stmt 1 view .LVU1090
 4012              	@ ../freertos/tasks.c:3269: 			*pxTicksToWait = 0;
3269:../freertos/tasks.c **** 			xReturn = pdTRUE;
 4013              		.loc 1 3269 19 is_stmt 0 view .LVU1091
 4014 0abc 0023     		movs	r3, #0	@ tmp130,
 4015 0abe 2360     		str	r3, [r4]	@ tmp130, *pxTicksToWait_13(D)
3270:../freertos/tasks.c **** 		}
 4016              		.loc 1 3270 4 is_stmt 1 view .LVU1092
 4017              	.LVL256:
 4018              	.L277:
 4019              	@ ../freertos/tasks.c:3258: 			xReturn = pdTRUE;
3258:../freertos/tasks.c **** 		}
 4020              		.loc 1 3258 12 is_stmt 0 view .LVU1093
 4021 0ac0 0124     		movs	r4, #1	@ <retval>,
 4022              	.LVL257:
3258:../freertos/tasks.c **** 		}
 4023              		.loc 1 3258 12 view .LVU1094
 4024 0ac2 F7E7     		b	.L273		@
 4025              	.L279:
 4026              		.align	2
 4027              	.L278:
 4028 0ac4 00000000 		.word	.LANCHOR0
 4029              	.LBE137:
 4030              		.cfi_endproc
 4031              	.LFE37:
 4032              		.size	xTaskCheckForTimeOut, .-xTaskCheckForTimeOut
 4033              		.align	1
 4034              		.global	vTaskMissedYield
 4035              		.syntax unified
 4036              		.thumb
 4037              		.thumb_func
 4038              		.type	vTaskMissedYield, %function
 4039              	vTaskMissedYield:
 4040              	.LFB38:
3280:../freertos/tasks.c **** 	xYieldPending = pdTRUE;
 4041              		.loc 1 3280 1 is_stmt 1 view -0
 4042              		.cfi_startproc
 4043              		@ args = 0, pretend = 0, frame = 0
 4044              		@ frame_needed = 0, uses_anonymous_args = 0
 4045              		@ link register save eliminated.
3281:../freertos/tasks.c **** }
 4046              		.loc 1 3281 2 view .LVU1096
 4047              	@ ../freertos/tasks.c:3281: 	xYieldPending = pdTRUE;
3281:../freertos/tasks.c **** }
 4048              		.loc 1 3281 16 is_stmt 0 view .LVU1097
 4049 0ac8 0122     		movs	r2, #1	@ tmp114,
 4050 0aca 024B     		ldr	r3, .L281	@ tmp113,
 4051 0acc C3F80021 		str	r2, [r3, #256]	@ tmp114, xYieldPending
 4052              	@ ../freertos/tasks.c:3282: }
3282:../freertos/tasks.c **** /*-----------------------------------------------------------*/
 4053              		.loc 1 3282 1 view .LVU1098
 4054 0ad0 7047     		bx	lr	@
 4055              	.L282:
 4056 0ad2 00BF     		.align	2
 4057              	.L281:
ARM GAS  /tmp/ccaP1CVS.s 			page 186


 4058 0ad4 00000000 		.word	.LANCHOR0
 4059              		.cfi_endproc
 4060              	.LFE38:
 4061              		.size	vTaskMissedYield, .-vTaskMissedYield
 4062              		.align	1
 4063              		.global	uxTaskGetTaskNumber
 4064              		.syntax unified
 4065              		.thumb
 4066              		.thumb_func
 4067              		.type	uxTaskGetTaskNumber, %function
 4068              	uxTaskGetTaskNumber:
 4069              	.LVL258:
 4070              	.LFB39:
3288:../freertos/tasks.c **** 	UBaseType_t uxReturn;
 4071              		.loc 1 3288 2 is_stmt 1 view -0
 4072              		.cfi_startproc
 4073              		@ args = 0, pretend = 0, frame = 0
 4074              		@ frame_needed = 0, uses_anonymous_args = 0
 4075              		@ link register save eliminated.
3289:../freertos/tasks.c **** 	TCB_t const *pxTCB;
 4076              		.loc 1 3289 2 view .LVU1100
3290:../freertos/tasks.c **** 
 4077              		.loc 1 3290 2 view .LVU1101
3292:../freertos/tasks.c **** 		{
 4078              		.loc 1 3292 3 view .LVU1102
 4079              	@ ../freertos/tasks.c:3292: 		if( xTask != NULL )
3292:../freertos/tasks.c **** 		{
 4080              		.loc 1 3292 5 is_stmt 0 view .LVU1103
 4081 0ad8 00B1     		cbz	r0, .L283	@ xTask,
3294:../freertos/tasks.c **** 			uxReturn = pxTCB->uxTaskNumber;
 4082              		.loc 1 3294 4 is_stmt 1 view .LVU1104
 4083              	.LVL259:
3295:../freertos/tasks.c **** 		}
 4084              		.loc 1 3295 4 view .LVU1105
 4085              	@ ../freertos/tasks.c:3295: 			uxReturn = pxTCB->uxTaskNumber;
3295:../freertos/tasks.c **** 		}
 4086              		.loc 1 3295 13 is_stmt 0 view .LVU1106
 4087 0ada 806C     		ldr	r0, [r0, #72]	@ <retval>, MEM[(const struct TCB_t *)xTask_2(D)].uxTaskNumber
 4088              	.LVL260:
 4089              	.L283:
 4090              	@ ../freertos/tasks.c:3303: 	}
3303:../freertos/tasks.c **** 
 4091              		.loc 1 3303 2 view .LVU1107
 4092 0adc 7047     		bx	lr	@
 4093              		.cfi_endproc
 4094              	.LFE39:
 4095              		.size	uxTaskGetTaskNumber, .-uxTaskGetTaskNumber
 4096              		.align	1
 4097              		.global	vTaskSetTaskNumber
 4098              		.syntax unified
 4099              		.thumb
 4100              		.thumb_func
 4101              		.type	vTaskSetTaskNumber, %function
 4102              	vTaskSetTaskNumber:
 4103              	.LVL261:
 4104              	.LFB40:
3311:../freertos/tasks.c **** 	TCB_t * pxTCB;
ARM GAS  /tmp/ccaP1CVS.s 			page 187


 4105              		.loc 1 3311 2 is_stmt 1 view -0
 4106              		.cfi_startproc
 4107              		@ args = 0, pretend = 0, frame = 0
 4108              		@ frame_needed = 0, uses_anonymous_args = 0
 4109              		@ link register save eliminated.
3312:../freertos/tasks.c **** 
 4110              		.loc 1 3312 2 view .LVU1109
3314:../freertos/tasks.c **** 		{
 4111              		.loc 1 3314 3 view .LVU1110
 4112              	@ ../freertos/tasks.c:3314: 		if( xTask != NULL )
3314:../freertos/tasks.c **** 		{
 4113              		.loc 1 3314 5 is_stmt 0 view .LVU1111
 4114 0ade 00B1     		cbz	r0, .L286	@ xTask,
3316:../freertos/tasks.c **** 			pxTCB->uxTaskNumber = uxHandle;
 4115              		.loc 1 3316 4 is_stmt 1 view .LVU1112
 4116              	.LVL262:
3317:../freertos/tasks.c **** 		}
 4117              		.loc 1 3317 4 view .LVU1113
 4118              	@ ../freertos/tasks.c:3317: 			pxTCB->uxTaskNumber = uxHandle;
3317:../freertos/tasks.c **** 		}
 4119              		.loc 1 3317 24 is_stmt 0 view .LVU1114
 4120 0ae0 8164     		str	r1, [r0, #72]	@ uxHandle, MEM[(struct TCB_t *)xTask_2(D)].uxTaskNumber
 4121              	.LVL263:
 4122              	.L286:
 4123              	@ ../freertos/tasks.c:3319: 	}
3319:../freertos/tasks.c **** 
 4124              		.loc 1 3319 2 view .LVU1115
 4125 0ae2 7047     		bx	lr	@
 4126              		.cfi_endproc
 4127              	.LFE40:
 4128              		.size	vTaskSetTaskNumber, .-vTaskSetTaskNumber
 4129              		.align	1
 4130              		.global	vTaskGetInfo
 4131              		.syntax unified
 4132              		.thumb
 4133              		.thumb_func
 4134              		.type	vTaskGetInfo, %function
 4135              	vTaskGetInfo:
 4136              	.LVL264:
 4137              	.LFB44:
3610:../freertos/tasks.c **** 	TCB_t *pxTCB;
 4138              		.loc 1 3610 2 is_stmt 1 view -0
 4139              		.cfi_startproc
 4140              		@ args = 0, pretend = 0, frame = 0
 4141              		@ frame_needed = 0, uses_anonymous_args = 0
3611:../freertos/tasks.c **** 
 4142              		.loc 1 3611 2 view .LVU1117
3614:../freertos/tasks.c **** 
 4143              		.loc 1 3614 3 view .LVU1118
 4144              	@ ../freertos/tasks.c:3610: 	{
3610:../freertos/tasks.c **** 	TCB_t *pxTCB;
 4145              		.loc 1 3610 2 is_stmt 0 view .LVU1119
 4146 0ae4 70B5     		push	{r4, r5, r6, lr}	@
 4147              	.LCFI40:
 4148              		.cfi_def_cfa_offset 16
 4149              		.cfi_offset 4, -16
 4150              		.cfi_offset 5, -12
ARM GAS  /tmp/ccaP1CVS.s 			page 188


 4151              		.cfi_offset 6, -8
 4152              		.cfi_offset 14, -4
 4153              	@ ../freertos/tasks.c:3610: 	{
3610:../freertos/tasks.c **** 	TCB_t *pxTCB;
 4154              		.loc 1 3610 2 view .LVU1120
 4155 0ae6 0C46     		mov	r4, r1	@ pxTaskStatus, tmp153
 4156 0ae8 1646     		mov	r6, r2	@ xGetFreeStackSpace, tmp154
 4157              	@ ../freertos/tasks.c:3614: 		pxTCB = prvGetTCBFromHandle( xTask );
3614:../freertos/tasks.c **** 
 4158              		.loc 1 3614 11 view .LVU1121
 4159 0aea 0546     		mov	r5, r0	@ xTask, tmp152
 4160 0aec 08B9     		cbnz	r0, .L292	@ xTask,
 4161              	@ ../freertos/tasks.c:3614: 		pxTCB = prvGetTCBFromHandle( xTask );
3614:../freertos/tasks.c **** 
 4162              		.loc 1 3614 11 discriminator 1 view .LVU1122
 4163 0aee 1B4A     		ldr	r2, .L304	@ tmp130,
 4164              	.LVL265:
3614:../freertos/tasks.c **** 
 4165              		.loc 1 3614 11 discriminator 1 view .LVU1123
 4166 0af0 5568     		ldr	r5, [r2, #4]	@ xTask, pxCurrentTCB
 4167              	.LVL266:
 4168              	.L292:
3616:../freertos/tasks.c **** 		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 4169              		.loc 1 3616 3 is_stmt 1 discriminator 4 view .LVU1124
 4170              	@ ../freertos/tasks.c:3617: 		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 
3617:../freertos/tasks.c **** 		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 4171              		.loc 1 3617 47 is_stmt 0 discriminator 4 view .LVU1125
 4172 0af2 05F13402 		add	r2, r5, #52	@ tmp131, xTask,
 4173              	@ ../freertos/tasks.c:3617: 		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 
3617:../freertos/tasks.c **** 		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 4174              		.loc 1 3617 28 discriminator 4 view .LVU1126
 4175 0af6 6260     		str	r2, [r4, #4]	@ tmp131, pxTaskStatus_18(D)->pcTaskName
 4176              	@ ../freertos/tasks.c:3618: 		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
3618:../freertos/tasks.c **** 		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 4177              		.loc 1 3618 35 discriminator 4 view .LVU1127
 4178 0af8 EA6A     		ldr	r2, [r5, #44]	@ iftmp.94_11->uxPriority, iftmp.94_11->uxPriority
 4179              	@ ../freertos/tasks.c:3645: 		if( eState != eInvalid )
3645:../freertos/tasks.c **** 		{
 4180              		.loc 1 3645 5 discriminator 4 view .LVU1128
 4181 0afa 052B     		cmp	r3, #5	@ eState,
 4182              	@ ../freertos/tasks.c:3618: 		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
3618:../freertos/tasks.c **** 		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 4183              		.loc 1 3618 35 discriminator 4 view .LVU1129
 4184 0afc 2261     		str	r2, [r4, #16]	@ iftmp.94_11->uxPriority, pxTaskStatus_18(D)->uxCurrentPriority
 4185              	@ ../freertos/tasks.c:3619: 		pxTaskStatus->pxStackBase = pxTCB->pxStack;
3619:../freertos/tasks.c **** 		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 4186              		.loc 1 3619 29 discriminator 4 view .LVU1130
 4187 0afe 2A6B     		ldr	r2, [r5, #48]	@ iftmp.94_11->pxStack, iftmp.94_11->pxStack
 4188              	@ ../freertos/tasks.c:3616: 		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
3616:../freertos/tasks.c **** 		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 4189              		.loc 1 3616 25 discriminator 4 view .LVU1131
 4190 0b00 2560     		str	r5, [r4]	@ xTask, pxTaskStatus_18(D)->xHandle
3617:../freertos/tasks.c **** 		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 4191              		.loc 1 3617 3 is_stmt 1 discriminator 4 view .LVU1132
3618:../freertos/tasks.c **** 		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 4192              		.loc 1 3618 3 discriminator 4 view .LVU1133
3619:../freertos/tasks.c **** 		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
ARM GAS  /tmp/ccaP1CVS.s 			page 189


 4193              		.loc 1 3619 3 discriminator 4 view .LVU1134
 4194              	@ ../freertos/tasks.c:3619: 		pxTaskStatus->pxStackBase = pxTCB->pxStack;
3619:../freertos/tasks.c **** 		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 4195              		.loc 1 3619 29 is_stmt 0 discriminator 4 view .LVU1135
 4196 0b02 E261     		str	r2, [r4, #28]	@ iftmp.94_11->pxStack, pxTaskStatus_18(D)->pxStackBase
3620:../freertos/tasks.c **** 
 4197              		.loc 1 3620 3 is_stmt 1 discriminator 4 view .LVU1136
 4198              	@ ../freertos/tasks.c:3620: 		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
3620:../freertos/tasks.c **** 
 4199              		.loc 1 3620 29 is_stmt 0 discriminator 4 view .LVU1137
 4200 0b04 6A6C     		ldr	r2, [r5, #68]	@ iftmp.94_11->uxTCBNumber, iftmp.94_11->uxTCBNumber
 4201 0b06 A260     		str	r2, [r4, #8]	@ iftmp.94_11->uxTCBNumber, pxTaskStatus_18(D)->xTaskNumber
3624:../freertos/tasks.c **** 		}
 4202              		.loc 1 3624 4 is_stmt 1 discriminator 4 view .LVU1138
 4203              	@ ../freertos/tasks.c:3624: 			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
3624:../freertos/tasks.c **** 		}
 4204              		.loc 1 3624 33 is_stmt 0 discriminator 4 view .LVU1139
 4205 0b08 EA6C     		ldr	r2, [r5, #76]	@ iftmp.94_11->uxBasePriority, iftmp.94_11->uxBasePriority
 4206 0b0a 6261     		str	r2, [r4, #20]	@ iftmp.94_11->uxBasePriority, pxTaskStatus_18(D)->uxBasePriority
3638:../freertos/tasks.c **** 		}
 4207              		.loc 1 3638 4 is_stmt 1 discriminator 4 view .LVU1140
 4208              	@ ../freertos/tasks.c:3638: 			pxTaskStatus->ulRunTimeCounter = 0;
3638:../freertos/tasks.c **** 		}
 4209              		.loc 1 3638 35 is_stmt 0 discriminator 4 view .LVU1141
 4210 0b0c 4FF00002 		mov	r2, #0	@ tmp136,
 4211 0b10 A261     		str	r2, [r4, #24]	@ tmp136, pxTaskStatus_18(D)->ulRunTimeCounter
3645:../freertos/tasks.c **** 		{
 4212              		.loc 1 3645 3 is_stmt 1 discriminator 4 view .LVU1142
 4213              	@ ../freertos/tasks.c:3645: 		if( eState != eInvalid )
3645:../freertos/tasks.c **** 		{
 4214              		.loc 1 3645 5 is_stmt 0 discriminator 4 view .LVU1143
 4215 0b12 19D0     		beq	.L293		@,
3647:../freertos/tasks.c **** 			{
 4216              		.loc 1 3647 4 is_stmt 1 view .LVU1144
 4217              	@ ../freertos/tasks.c:3647: 			if( pxTCB == pxCurrentTCB )
3647:../freertos/tasks.c **** 			{
 4218              		.loc 1 3647 14 is_stmt 0 view .LVU1145
 4219 0b14 1149     		ldr	r1, .L304	@ tmp137,
 4220              	.LVL267:
3647:../freertos/tasks.c **** 			{
 4221              		.loc 1 3647 14 view .LVU1146
 4222 0b16 4968     		ldr	r1, [r1, #4]	@ pxCurrentTCB.95_6, pxCurrentTCB
 4223              	@ ../freertos/tasks.c:3647: 			if( pxTCB == pxCurrentTCB )
3647:../freertos/tasks.c **** 			{
 4224              		.loc 1 3647 6 view .LVU1147
 4225 0b18 A942     		cmp	r1, r5	@ pxCurrentTCB.95_6, xTask
 4226 0b1a 09D1     		bne	.L294		@,
3649:../freertos/tasks.c **** 			}
 4227              		.loc 1 3649 5 is_stmt 1 view .LVU1148
 4228              	@ ../freertos/tasks.c:3649: 				pxTaskStatus->eCurrentState = eRunning;
3649:../freertos/tasks.c **** 			}
 4229              		.loc 1 3649 33 is_stmt 0 view .LVU1149
 4230 0b1c 2273     		strb	r2, [r4, #12]	@ tmp136, pxTaskStatus_18(D)->eCurrentState
 4231              	.LVL268:
 4232              	.L295:
3682:../freertos/tasks.c **** 		{
 4233              		.loc 1 3682 3 is_stmt 1 view .LVU1150
ARM GAS  /tmp/ccaP1CVS.s 			page 190


 4234              	@ ../freertos/tasks.c:3682: 		if( xGetFreeStackSpace != pdFALSE )
3682:../freertos/tasks.c **** 		{
 4235              		.loc 1 3682 5 is_stmt 0 view .LVU1151
 4236 0b1e D6B1     		cbz	r6, .L297	@ xGetFreeStackSpace,
3690:../freertos/tasks.c **** 			}
 4237              		.loc 1 3690 5 is_stmt 1 view .LVU1152
 4238              	.LBB140:
 4239              	.LBB141:
 4240              	@ ../freertos/tasks.c:3740: 	uint32_t ulCount = 0U;
3740:../freertos/tasks.c **** 
 4241              		.loc 1 3740 11 is_stmt 0 view .LVU1153
 4242 0b20 0023     		movs	r3, #0	@ ulCount,
 4243              	.LBE141:
 4244              	.LBE140:
 4245              	@ ../freertos/tasks.c:3690: 				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( 
3690:../freertos/tasks.c **** 			}
 4246              		.loc 1 3690 89 view .LVU1154
 4247 0b22 296B     		ldr	r1, [r5, #48]	@ _9, iftmp.94_11->pxStack
 4248              	.LVL269:
 4249              	.LBB144:
 4250              	.LBI140:
3738:../freertos/tasks.c **** 	{
 4251              		.loc 1 3738 32 is_stmt 1 view .LVU1155
 4252              	.LBB142:
3740:../freertos/tasks.c **** 
 4253              		.loc 1 3740 2 view .LVU1156
3742:../freertos/tasks.c **** 		{
 4254              		.loc 1 3742 3 view .LVU1157
 4255              	.L298:
3742:../freertos/tasks.c **** 		{
 4256              		.loc 1 3742 8 view .LVU1158
 4257 0b24 CA5C     		ldrb	r2, [r1, r3]	@ zero_extendqisi2	@ MEM[base: _9, index: ulCount_39, offset: 0B], MEM[base: _9,
 4258 0b26 A52A     		cmp	r2, #165	@ MEM[base: _9, index: ulCount_39, offset: 0B],
 4259 0b28 13D0     		beq	.L299		@,
3748:../freertos/tasks.c **** 
 4260              		.loc 1 3748 3 view .LVU1159
 4261              	.LVL270:
3750:../freertos/tasks.c **** 	}
 4262              		.loc 1 3750 3 view .LVU1160
 4263              	@ ../freertos/tasks.c:3748: 		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting i
3748:../freertos/tasks.c **** 
 4264              		.loc 1 3748 11 is_stmt 0 view .LVU1161
 4265 0b2a 9B08     		lsrs	r3, r3, #2	@ ulCount, ulCount,
 4266              	@ ../freertos/tasks.c:3750: 		return ( configSTACK_DEPTH_TYPE ) ulCount;
3750:../freertos/tasks.c **** 	}
 4267              		.loc 1 3750 10 view .LVU1162
 4268 0b2c 2384     		strh	r3, [r4, #32]	@ movhi	@ ulCount, pxTaskStatus_18(D)->usStackHighWaterMark
 4269              	.L291:
3750:../freertos/tasks.c **** 	}
 4270              		.loc 1 3750 10 view .LVU1163
 4271              	.LBE142:
 4272              	.LBE144:
 4273              	@ ../freertos/tasks.c:3698: 	}
3698:../freertos/tasks.c **** 
 4274              		.loc 1 3698 2 view .LVU1164
 4275 0b2e 70BD     		pop	{r4, r5, r6, pc}	@
 4276              	.LVL271:
ARM GAS  /tmp/ccaP1CVS.s 			page 191


 4277              	.L294:
3653:../freertos/tasks.c **** 
 4278              		.loc 1 3653 5 is_stmt 1 view .LVU1165
 4279              	@ ../freertos/tasks.c:3660: 					if( eState == eSuspended )
3660:../freertos/tasks.c **** 					{
 4280              		.loc 1 3660 8 is_stmt 0 view .LVU1166
 4281 0b30 032B     		cmp	r3, #3	@ eState,
 4282              	@ ../freertos/tasks.c:3653: 				pxTaskStatus->eCurrentState = eState;
3653:../freertos/tasks.c **** 
 4283              		.loc 1 3653 33 view .LVU1167
 4284 0b32 2373     		strb	r3, [r4, #12]	@ eState, pxTaskStatus_18(D)->eCurrentState
3660:../freertos/tasks.c **** 					{
 4285              		.loc 1 3660 6 is_stmt 1 view .LVU1168
 4286              	@ ../freertos/tasks.c:3660: 					if( eState == eSuspended )
3660:../freertos/tasks.c **** 					{
 4287              		.loc 1 3660 8 is_stmt 0 view .LVU1169
 4288 0b34 F3D1     		bne	.L295		@,
3662:../freertos/tasks.c **** 						{
 4289              		.loc 1 3662 7 is_stmt 1 view .LVU1170
 4290 0b36 FFF7FEFF 		bl	vTaskSuspendAll		@
 4291              	.LVL272:
3664:../freertos/tasks.c **** 							{
 4292              		.loc 1 3664 8 view .LVU1171
 4293              	@ ../freertos/tasks.c:3664: 							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NUL
3664:../freertos/tasks.c **** 							{
 4294              		.loc 1 3664 10 is_stmt 0 view .LVU1172
 4295 0b3a AB6A     		ldr	r3, [r5, #40]	@ iftmp.94_11->xEventListItem.pvContainer, iftmp.94_11->xEventListItem.pvContain
 4296 0b3c 0BB1     		cbz	r3, .L296	@ iftmp.94_11->xEventListItem.pvContainer,
3666:../freertos/tasks.c **** 							}
 4297              		.loc 1 3666 9 is_stmt 1 view .LVU1173
 4298              	@ ../freertos/tasks.c:3666: 								pxTaskStatus->eCurrentState = eBlocked;
3666:../freertos/tasks.c **** 							}
 4299              		.loc 1 3666 37 is_stmt 0 view .LVU1174
 4300 0b3e 0223     		movs	r3, #2	@ tmp142,
 4301 0b40 2373     		strb	r3, [r4, #12]	@ tmp142, pxTaskStatus_18(D)->eCurrentState
 4302              	.L296:
3669:../freertos/tasks.c **** 					}
 4303              		.loc 1 3669 7 is_stmt 1 view .LVU1175
 4304              	@ ../freertos/tasks.c:3669: 						( void ) xTaskResumeAll();
3669:../freertos/tasks.c **** 					}
 4305              		.loc 1 3669 16 is_stmt 0 view .LVU1176
 4306 0b42 FFF7FEFF 		bl	xTaskResumeAll		@
 4307              	.LVL273:
 4308 0b46 EAE7     		b	.L295		@
 4309              	.LVL274:
 4310              	.L293:
3677:../freertos/tasks.c **** 		}
 4311              		.loc 1 3677 4 is_stmt 1 view .LVU1177
 4312              	@ ../freertos/tasks.c:3677: 			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
3677:../freertos/tasks.c **** 		}
 4313              		.loc 1 3677 34 is_stmt 0 view .LVU1178
 4314 0b48 2846     		mov	r0, r5	@, xTask
 4315 0b4a FFF7FEFF 		bl	eTaskGetState		@
 4316              	.LVL275:
 4317              	@ ../freertos/tasks.c:3677: 			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
3677:../freertos/tasks.c **** 		}
 4318              		.loc 1 3677 32 view .LVU1179
ARM GAS  /tmp/ccaP1CVS.s 			page 192


 4319 0b4e 2073     		strb	r0, [r4, #12]	@ tmp156, pxTaskStatus_18(D)->eCurrentState
 4320 0b50 E5E7     		b	.L295		@
 4321              	.LVL276:
 4322              	.L299:
 4323              	.LBB145:
 4324              	.LBB143:
3744:../freertos/tasks.c **** 			ulCount++;
 4325              		.loc 1 3744 4 is_stmt 1 view .LVU1180
3745:../freertos/tasks.c **** 		}
 4326              		.loc 1 3745 4 view .LVU1181
 4327              	@ ../freertos/tasks.c:3745: 			ulCount++;
3745:../freertos/tasks.c **** 		}
 4328              		.loc 1 3745 11 is_stmt 0 view .LVU1182
 4329 0b52 0133     		adds	r3, r3, #1	@ ulCount, ulCount,
 4330              	.LVL277:
3745:../freertos/tasks.c **** 		}
 4331              		.loc 1 3745 11 view .LVU1183
 4332 0b54 E6E7     		b	.L298		@
 4333              	.LVL278:
 4334              	.L297:
3745:../freertos/tasks.c **** 		}
 4335              		.loc 1 3745 11 view .LVU1184
 4336              	.LBE143:
 4337              	.LBE145:
3696:../freertos/tasks.c **** 		}
 4338              		.loc 1 3696 4 is_stmt 1 view .LVU1185
 4339              	@ ../freertos/tasks.c:3696: 			pxTaskStatus->usStackHighWaterMark = 0;
3696:../freertos/tasks.c **** 		}
 4340              		.loc 1 3696 39 is_stmt 0 view .LVU1186
 4341 0b56 2684     		strh	r6, [r4, #32]	@ movhi	@ xGetFreeStackSpace, pxTaskStatus_18(D)->usStackHighWaterMark
 4342              	@ ../freertos/tasks.c:3698: 	}
3698:../freertos/tasks.c **** 
 4343              		.loc 1 3698 2 view .LVU1187
 4344 0b58 E9E7     		b	.L291		@
 4345              	.L305:
 4346 0b5a 00BF     		.align	2
 4347              	.L304:
 4348 0b5c 00000000 		.word	.LANCHOR0
 4349              		.cfi_endproc
 4350              	.LFE44:
 4351              		.size	vTaskGetInfo, .-vTaskGetInfo
 4352              		.align	1
 4353              		.syntax unified
 4354              		.thumb
 4355              		.thumb_func
 4356              		.type	prvListTasksWithinSingleList, %function
 4357              	prvListTasksWithinSingleList:
 4358              	.LVL279:
 4359              	.LFB45:
3706:../freertos/tasks.c **** 	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
 4360              		.loc 1 3706 2 is_stmt 1 view -0
 4361              		.cfi_startproc
 4362              		@ args = 0, pretend = 0, frame = 0
 4363              		@ frame_needed = 0, uses_anonymous_args = 0
3707:../freertos/tasks.c **** 	UBaseType_t uxTask = 0;
 4364              		.loc 1 3707 22 view .LVU1189
3708:../freertos/tasks.c **** 
ARM GAS  /tmp/ccaP1CVS.s 			page 193


 4365              		.loc 1 3708 2 view .LVU1190
3710:../freertos/tasks.c **** 		{
 4366              		.loc 1 3710 3 view .LVU1191
 4367              	@ ../freertos/tasks.c:3706: 	{
3706:../freertos/tasks.c **** 	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
 4368              		.loc 1 3706 2 is_stmt 0 view .LVU1192
 4369 0b60 2DE9F84F 		push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 4370              	.LCFI41:
 4371              		.cfi_def_cfa_offset 40
 4372              		.cfi_offset 3, -40
 4373              		.cfi_offset 4, -36
 4374              		.cfi_offset 5, -32
 4375              		.cfi_offset 6, -28
 4376              		.cfi_offset 7, -24
 4377              		.cfi_offset 8, -20
 4378              		.cfi_offset 9, -16
 4379              		.cfi_offset 10, -12
 4380              		.cfi_offset 11, -8
 4381              		.cfi_offset 14, -4
 4382              	@ ../freertos/tasks.c:3710: 		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
3710:../freertos/tasks.c **** 		{
 4383              		.loc 1 3710 7 view .LVU1193
 4384 0b64 0D68     		ldr	r5, [r1]	@ <retval>, pxList_7(D)->uxNumberOfItems
 4385              	@ ../freertos/tasks.c:3706: 	{
3706:../freertos/tasks.c **** 	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
 4386              		.loc 1 3706 2 view .LVU1194
 4387 0b66 0646     		mov	r6, r0	@ pxTaskStatusArray, tmp143
 4388 0b68 0C46     		mov	r4, r1	@ pxList, tmp144
 4389 0b6a 1746     		mov	r7, r2	@ eState, tmp145
 4390              	@ ../freertos/tasks.c:3710: 		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
3710:../freertos/tasks.c **** 		{
 4391              		.loc 1 3710 5 view .LVU1195
 4392 0b6c 2DB3     		cbz	r5, .L306	@ <retval>,
 4393              	.LVL280:
 4394              	.LBB150:
 4395              	.LBI150:
3705:../freertos/tasks.c **** 	{
 4396              		.loc 1 3705 21 is_stmt 1 view .LVU1196
 4397              	.LBB151:
 4398              	.LBB152:
3712:../freertos/tasks.c **** 
 4399              		.loc 1 3712 4 view .LVU1197
3712:../freertos/tasks.c **** 
 4400              		.loc 1 3712 4 view .LVU1198
 4401              	.LBE152:
 4402              	@ ../freertos/tasks.c:3708: 	UBaseType_t uxTask = 0;
3708:../freertos/tasks.c **** 
 4403              		.loc 1 3708 14 is_stmt 0 view .LVU1199
 4404 0b6e 0025     		movs	r5, #0	@ <retval>,
 4405              	@ ../freertos/tasks.c:3721: 				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxT
3721:../freertos/tasks.c **** 				uxTask++;
 4406              		.loc 1 3721 5 view .LVU1200
 4407 0b70 4FF0240B 		mov	fp, #36	@ tmp139,
 4408              	.LBB153:
 4409              	@ ../freertos/tasks.c:3712: 			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 voi
3712:../freertos/tasks.c **** 
 4410              		.loc 1 3712 4 view .LVU1201
ARM GAS  /tmp/ccaP1CVS.s 			page 194


 4411 0b74 4B68     		ldr	r3, [r1, #4]	@ pxList_7(D)->pxIndex, pxList_7(D)->pxIndex
 4412 0b76 01F10808 		add	r8, r1, #8	@ _12, pxList,
 4413 0b7a 5B68     		ldr	r3, [r3, #4]	@ _11, _10->pxNext
 4414 0b7c 4345     		cmp	r3, r8	@ _11, _12
 4415 0b7e 4B60     		str	r3, [r1, #4]	@ _11, pxList_7(D)->pxIndex
3712:../freertos/tasks.c **** 
 4416              		.loc 1 3712 4 is_stmt 1 view .LVU1202
3712:../freertos/tasks.c **** 
 4417              		.loc 1 3712 4 view .LVU1203
 4418 0b80 04BF     		itt	eq
 4419 0b82 CB68     		ldreq	r3, [r1, #12]	@ MEM[(struct ListItem_t *)pxList_7(D) + 8B].pxNext, MEM[(struct ListItem_t *)
 4420 0b84 4B60     		streq	r3, [r1, #4]	@ MEM[(struct ListItem_t *)pxList_7(D) + 8B].pxNext, pxList_7(D)->pxIndex
3712:../freertos/tasks.c **** 
 4421              		.loc 1 3712 4 view .LVU1204
 4422 0b86 4B68     		ldr	r3, [r1, #4]	@ pxList_7(D)->pxIndex, pxList_7(D)->pxIndex
 4423 0b88 D3F80CA0 		ldr	r10, [r3, #12]	@ pxFirstTCB, _14->pvOwner
 4424              	.LVL281:
 4425              	.L310:
3712:../freertos/tasks.c **** 
 4426              		.loc 1 3712 4 is_stmt 0 view .LVU1205
 4427              	.LBE153:
3712:../freertos/tasks.c **** 
 4428              		.loc 1 3712 53 is_stmt 1 view .LVU1206
3718:../freertos/tasks.c **** 			{
 4429              		.loc 1 3718 4 view .LVU1207
 4430              	.LBB154:
3720:../freertos/tasks.c **** 				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 4431              		.loc 1 3720 5 view .LVU1208
3720:../freertos/tasks.c **** 				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 4432              		.loc 1 3720 5 view .LVU1209
 4433 0b8c 6368     		ldr	r3, [r4, #4]	@ pxList_7(D)->pxIndex, pxList_7(D)->pxIndex
 4434              	.LBE154:
 4435              	@ ../freertos/tasks.c:3721: 				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxT
3721:../freertos/tasks.c **** 				uxTask++;
 4436              		.loc 1 3721 5 is_stmt 0 view .LVU1210
 4437 0b8e 0BFB0561 		mla	r1, fp, r5, r6	@, tmp139, <retval>, pxTaskStatusArray
 4438              	.LBB155:
 4439              	@ ../freertos/tasks.c:3720: 				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 voi
3720:../freertos/tasks.c **** 				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 4440              		.loc 1 3720 5 view .LVU1211
 4441 0b92 5B68     		ldr	r3, [r3, #4]	@ _17, _16->pxNext
 4442              	.LBE155:
 4443              	@ ../freertos/tasks.c:3721: 				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxT
3721:../freertos/tasks.c **** 				uxTask++;
 4444              		.loc 1 3721 5 view .LVU1212
 4445 0b94 0122     		movs	r2, #1	@,
 4446              	.LBB156:
 4447              	@ ../freertos/tasks.c:3720: 				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 voi
3720:../freertos/tasks.c **** 				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 4448              		.loc 1 3720 5 view .LVU1213
 4449 0b96 9845     		cmp	r8, r3	@ _12, _17
 4450 0b98 6360     		str	r3, [r4, #4]	@ _17, pxList_7(D)->pxIndex
3720:../freertos/tasks.c **** 				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 4451              		.loc 1 3720 5 is_stmt 1 view .LVU1214
3720:../freertos/tasks.c **** 				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 4452              		.loc 1 3720 5 view .LVU1215
 4453 0b9a 08BF     		it	eq
ARM GAS  /tmp/ccaP1CVS.s 			page 195


 4454 0b9c D8F80430 		ldreq	r3, [r8, #4]	@ MEM[(struct ListItem_t *)_17].pxNext, MEM[(struct ListItem_t *)_17].pxNext
 4455              	.LBE156:
 4456              	@ ../freertos/tasks.c:3722: 				uxTask++;
3722:../freertos/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
 4457              		.loc 1 3722 11 is_stmt 0 view .LVU1216
 4458 0ba0 05F10105 		add	r5, r5, #1	@ <retval>, <retval>,
 4459              	.LVL282:
 4460              	.LBB157:
 4461              	@ ../freertos/tasks.c:3720: 				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 voi
3720:../freertos/tasks.c **** 				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 4462              		.loc 1 3720 5 view .LVU1217
 4463 0ba4 08BF     		it	eq
 4464 0ba6 6360     		streq	r3, [r4, #4]	@ MEM[(struct ListItem_t *)_17].pxNext, pxList_7(D)->pxIndex
3720:../freertos/tasks.c **** 				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 4465              		.loc 1 3720 5 is_stmt 1 view .LVU1218
 4466 0ba8 6368     		ldr	r3, [r4, #4]	@ pxList_7(D)->pxIndex, pxList_7(D)->pxIndex
 4467 0baa D3F80C90 		ldr	r9, [r3, #12]	@ pxNextTCB, _19->pvOwner
 4468              	.LVL283:
3720:../freertos/tasks.c **** 				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 4469              		.loc 1 3720 5 is_stmt 0 view .LVU1219
 4470              	.LBE157:
3720:../freertos/tasks.c **** 				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 4471              		.loc 1 3720 53 is_stmt 1 view .LVU1220
3721:../freertos/tasks.c **** 				uxTask++;
 4472              		.loc 1 3721 5 view .LVU1221
 4473 0bae 3B46     		mov	r3, r7	@, eState
 4474 0bb0 4846     		mov	r0, r9	@, pxNextTCB
 4475 0bb2 FFF7FEFF 		bl	vTaskGetInfo		@
 4476              	.LVL284:
3722:../freertos/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
 4477              		.loc 1 3722 5 view .LVU1222
3723:../freertos/tasks.c **** 		}
 4478              		.loc 1 3723 11 view .LVU1223
 4479              	@ ../freertos/tasks.c:3723: 			} while( pxNextTCB != pxFirstTCB );
3723:../freertos/tasks.c **** 		}
 4480              		.loc 1 3723 4 is_stmt 0 view .LVU1224
 4481 0bb6 CA45     		cmp	r10, r9	@ pxFirstTCB, pxNextTCB
 4482 0bb8 E8D1     		bne	.L310		@,
 4483              	.LVL285:
 4484              	.L306:
3723:../freertos/tasks.c **** 		}
 4485              		.loc 1 3723 4 view .LVU1225
 4486              	.LBE151:
 4487              	.LBE150:
 4488              	@ ../freertos/tasks.c:3731: 	}
3731:../freertos/tasks.c **** 
 4489              		.loc 1 3731 2 view .LVU1226
 4490 0bba 2846     		mov	r0, r5	@, <retval>
 4491 0bbc BDE8F88F 		pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
3731:../freertos/tasks.c **** 
 4492              		.loc 1 3731 2 view .LVU1227
 4493              		.cfi_endproc
 4494              	.LFE45:
 4495              		.size	prvListTasksWithinSingleList, .-prvListTasksWithinSingleList
 4496              		.align	1
 4497              		.global	uxTaskGetSystemState
 4498              		.syntax unified
ARM GAS  /tmp/ccaP1CVS.s 			page 196


 4499              		.thumb
 4500              		.thumb_func
 4501              		.type	uxTaskGetSystemState, %function
 4502              	uxTaskGetSystemState:
 4503              	.LVL286:
 4504              	.LFB27:
2486:../freertos/tasks.c **** 	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 4505              		.loc 1 2486 2 is_stmt 1 view -0
 4506              		.cfi_startproc
 4507              		@ args = 0, pretend = 0, frame = 0
 4508              		@ frame_needed = 0, uses_anonymous_args = 0
2487:../freertos/tasks.c **** 
 4509              		.loc 1 2487 2 view .LVU1229
2489:../freertos/tasks.c **** 		{
 4510              		.loc 1 2489 3 view .LVU1230
 4511              	@ ../freertos/tasks.c:2486: 	{
2486:../freertos/tasks.c **** 	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 4512              		.loc 1 2486 2 is_stmt 0 view .LVU1231
 4513 0bc0 2DE9F84F 		push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 4514              	.LCFI42:
 4515              		.cfi_def_cfa_offset 40
 4516              		.cfi_offset 3, -40
 4517              		.cfi_offset 4, -36
 4518              		.cfi_offset 5, -32
 4519              		.cfi_offset 6, -28
 4520              		.cfi_offset 7, -24
 4521              		.cfi_offset 8, -20
 4522              		.cfi_offset 9, -16
 4523              		.cfi_offset 10, -12
 4524              		.cfi_offset 11, -8
 4525              		.cfi_offset 14, -4
 4526              	@ ../freertos/tasks.c:2492: 			if( uxArraySize >= uxCurrentNumberOfTasks )
2492:../freertos/tasks.c **** 			{
 4527              		.loc 1 2492 20 view .LVU1232
 4528 0bc4 DFF88490 		ldr	r9, .L323	@ tmp144,
 4529              	@ ../freertos/tasks.c:2486: 	{
2486:../freertos/tasks.c **** 	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 4530              		.loc 1 2486 2 view .LVU1233
 4531 0bc8 1746     		mov	r7, r2	@ pulTotalRunTime, tmp178
 4532              	@ ../freertos/tasks.c:2489: 		vTaskSuspendAll();
2489:../freertos/tasks.c **** 		{
 4533              		.loc 1 2489 3 view .LVU1234
 4534 0bca FFF7FEFF 		bl	vTaskSuspendAll		@
 4535              	.LVL287:
2492:../freertos/tasks.c **** 			{
 4536              		.loc 1 2492 4 is_stmt 1 view .LVU1235
 4537              	@ ../freertos/tasks.c:2492: 			if( uxArraySize >= uxCurrentNumberOfTasks )
2492:../freertos/tasks.c **** 			{
 4538              		.loc 1 2492 20 is_stmt 0 view .LVU1236
 4539 0bce D9F84030 		ldr	r3, [r9, #64]	@ uxCurrentNumberOfTasks.63_1, uxCurrentNumberOfTasks
 4540              	@ ../freertos/tasks.c:2486: 	{
2486:../freertos/tasks.c **** 	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 4541              		.loc 1 2486 2 view .LVU1237
 4542 0bd2 0546     		mov	r5, r0	@ pxTaskStatusArray, tmp176
 4543              	@ ../freertos/tasks.c:2492: 			if( uxArraySize >= uxCurrentNumberOfTasks )
2492:../freertos/tasks.c **** 			{
 4544              		.loc 1 2492 6 view .LVU1238
ARM GAS  /tmp/ccaP1CVS.s 			page 197


 4545 0bd4 8B42     		cmp	r3, r1	@ uxCurrentNumberOfTasks.63_1, uxArraySize
 4546 0bd6 37D8     		bhi	.L318		@,
 4547              	@ ../freertos/tasks.c:2487: 	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
2487:../freertos/tasks.c **** 
 4548              		.loc 1 2487 26 view .LVU1239
 4549 0bd8 0526     		movs	r6, #5	@ uxQueue,
 4550              	@ ../freertos/tasks.c:2487: 	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
2487:../freertos/tasks.c **** 
 4551              		.loc 1 2487 14 view .LVU1240
 4552 0bda 0024     		movs	r4, #0	@ uxTask,
 4553              	@ ../freertos/tasks.c:2499: 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTa
2499:../freertos/tasks.c **** 
 4554              		.loc 1 2499 16 view .LVU1241
 4555 0bdc 4FF0140B 		mov	fp, #20	@ tmp146,
 4556              	@ ../freertos/tasks.c:2499: 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTa
2499:../freertos/tasks.c **** 
 4557              		.loc 1 2499 66 view .LVU1242
 4558 0be0 4FF02408 		mov	r8, #36	@ tmp151,
 4559              	@ ../freertos/tasks.c:2499: 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTa
2499:../freertos/tasks.c **** 
 4560              		.loc 1 2499 16 view .LVU1243
 4561 0be4 09F1480A 		add	r10, r9, #72	@ tmp148, tmp144,
 4562              	.LVL288:
 4563              	.L317:
2496:../freertos/tasks.c **** 				{
 4564              		.loc 1 2496 5 is_stmt 1 discriminator 1 view .LVU1244
2498:../freertos/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists
 4565              		.loc 1 2498 6 discriminator 1 view .LVU1245
 4566              	@ ../freertos/tasks.c:2498: 					uxQueue--;
2498:../freertos/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists
 4567              		.loc 1 2498 13 is_stmt 0 discriminator 1 view .LVU1246
 4568 0be8 013E     		subs	r6, r6, #1	@ uxQueue, uxQueue,
 4569              	.LVL289:
2499:../freertos/tasks.c **** 
 4570              		.loc 1 2499 6 is_stmt 1 discriminator 1 view .LVU1247
 4571              	@ ../freertos/tasks.c:2499: 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTa
2499:../freertos/tasks.c **** 
 4572              		.loc 1 2499 16 is_stmt 0 discriminator 1 view .LVU1248
 4573 0bea 08FB0450 		mla	r0, r8, r4, r5	@, tmp151, uxTask, pxTaskStatusArray
 4574 0bee 0122     		movs	r2, #1	@,
 4575 0bf0 0BFB06A1 		mla	r1, fp, r6, r10	@, tmp146, uxQueue, tmp148
 4576 0bf4 FFF7B4FF 		bl	prvListTasksWithinSingleList		@
 4577              	.LVL290:
 4578              	@ ../freertos/tasks.c:2499: 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTa
2499:../freertos/tasks.c **** 
 4579              		.loc 1 2499 13 discriminator 1 view .LVU1249
 4580 0bf8 0444     		add	r4, r4, r0	@ uxTask, tmp179
 4581              	.LVL291:
2501:../freertos/tasks.c **** 
 4582              		.loc 1 2501 12 is_stmt 1 discriminator 1 view .LVU1250
 4583              	@ ../freertos/tasks.c:2501: 				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961
2501:../freertos/tasks.c **** 
 4584              		.loc 1 2501 5 is_stmt 0 discriminator 1 view .LVU1251
 4585 0bfa 002E     		cmp	r6, #0	@ uxQueue
 4586 0bfc F4D1     		bne	.L317	@
2505:../freertos/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverfl
 4587              		.loc 1 2505 5 is_stmt 1 view .LVU1252
ARM GAS  /tmp/ccaP1CVS.s 			page 198


 4588              	@ ../freertos/tasks.c:2505: 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTas
2505:../freertos/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverfl
 4589              		.loc 1 2505 15 is_stmt 0 view .LVU1253
 4590 0bfe 0222     		movs	r2, #2	@,
 4591 0c00 08FB0450 		mla	r0, r8, r4, r5	@, tmp151, uxTask, pxTaskStatusArray
 4592 0c04 D9F82410 		ldr	r1, [r9, #36]	@ pxDelayedTaskList.64_7, pxDelayedTaskList
 4593 0c08 FFF7AAFF 		bl	prvListTasksWithinSingleList		@
 4594              	.LVL292:
 4595              	@ ../freertos/tasks.c:2505: 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTas
2505:../freertos/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverfl
 4596              		.loc 1 2505 12 view .LVU1254
 4597 0c0c 0444     		add	r4, r4, r0	@ uxTask, tmp180
 4598              	.LVL293:
2506:../freertos/tasks.c **** 
 4599              		.loc 1 2506 5 is_stmt 1 view .LVU1255
 4600              	@ ../freertos/tasks.c:2506: 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTas
2506:../freertos/tasks.c **** 
 4601              		.loc 1 2506 15 is_stmt 0 view .LVU1256
 4602 0c0e 0222     		movs	r2, #2	@,
 4603 0c10 08FB0450 		mla	r0, r8, r4, r5	@, tmp151, uxTask, pxTaskStatusArray
 4604 0c14 D9F82010 		ldr	r1, [r9, #32]	@ pxOverflowDelayedTaskList.65_10, pxOverflowDelayedTaskList
 4605 0c18 FFF7A2FF 		bl	prvListTasksWithinSingleList		@
 4606              	.LVL294:
 4607              	@ ../freertos/tasks.c:2506: 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTas
2506:../freertos/tasks.c **** 
 4608              		.loc 1 2506 12 view .LVU1257
 4609 0c1c 0444     		add	r4, r4, r0	@ uxTask, tmp181
 4610              	.LVL295:
2512:../freertos/tasks.c **** 				}
 4611              		.loc 1 2512 6 is_stmt 1 view .LVU1258
 4612              	@ ../freertos/tasks.c:2512: 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTa
2512:../freertos/tasks.c **** 				}
 4613              		.loc 1 2512 16 is_stmt 0 view .LVU1259
 4614 0c1e 0422     		movs	r2, #4	@,
 4615 0c20 08FB0450 		mla	r0, r8, r4, r5	@, tmp151, uxTask, pxTaskStatusArray
 4616 0c24 0A49     		ldr	r1, .L323+4	@,
 4617 0c26 FFF79BFF 		bl	prvListTasksWithinSingleList		@
 4618              	.LVL296:
 4619              	@ ../freertos/tasks.c:2512: 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTa
2512:../freertos/tasks.c **** 				}
 4620              		.loc 1 2512 13 view .LVU1260
 4621 0c2a 0444     		add	r4, r4, r0	@ uxTask, tmp182
 4622              	.LVL297:
2520:../freertos/tasks.c **** 				}
 4623              		.loc 1 2520 6 is_stmt 1 view .LVU1261
 4624              	@ ../freertos/tasks.c:2520: 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTa
2520:../freertos/tasks.c **** 				}
 4625              		.loc 1 2520 16 is_stmt 0 view .LVU1262
 4626 0c2c 08FB0450 		mla	r0, r8, r4, r5	@, tmp151, uxTask, pxTaskStatusArray
 4627 0c30 0322     		movs	r2, #3	@,
 4628 0c32 0849     		ldr	r1, .L323+8	@,
 4629 0c34 FFF794FF 		bl	prvListTasksWithinSingleList		@
 4630              	.LVL298:
 4631              	@ ../freertos/tasks.c:2520: 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTa
2520:../freertos/tasks.c **** 				}
 4632              		.loc 1 2520 13 view .LVU1263
 4633 0c38 0444     		add	r4, r4, r0	@ <retval>, tmp183
ARM GAS  /tmp/ccaP1CVS.s 			page 199


 4634              	.LVL299:
2537:../freertos/tasks.c **** 					{
 4635              		.loc 1 2537 6 is_stmt 1 view .LVU1264
 4636              	@ ../freertos/tasks.c:2537: 					if( pulTotalRunTime != NULL )
2537:../freertos/tasks.c **** 					{
 4637              		.loc 1 2537 8 is_stmt 0 view .LVU1265
 4638 0c3a 07B1     		cbz	r7, .L316	@ pulTotalRunTime,
2539:../freertos/tasks.c **** 					}
 4639              		.loc 1 2539 7 is_stmt 1 view .LVU1266
 4640              	@ ../freertos/tasks.c:2539: 						*pulTotalRunTime = 0;
2539:../freertos/tasks.c **** 					}
 4641              		.loc 1 2539 24 is_stmt 0 view .LVU1267
 4642 0c3c 3E60     		str	r6, [r7]	@ uxQueue, *pulTotalRunTime_41(D)
 4643              	.LVL300:
 4644              	.L316:
2546:../freertos/tasks.c **** 			}
 4645              		.loc 1 2546 29 is_stmt 1 view .LVU1268
2549:../freertos/tasks.c **** 
 4646              		.loc 1 2549 3 view .LVU1269
 4647              	@ ../freertos/tasks.c:2549: 		( void ) xTaskResumeAll();
2549:../freertos/tasks.c **** 
 4648              		.loc 1 2549 12 is_stmt 0 view .LVU1270
 4649 0c3e FFF7FEFF 		bl	xTaskResumeAll		@
 4650              	.LVL301:
2551:../freertos/tasks.c **** 	}
 4651              		.loc 1 2551 3 is_stmt 1 view .LVU1271
 4652              	@ ../freertos/tasks.c:2552: 	}
2552:../freertos/tasks.c **** 
 4653              		.loc 1 2552 2 is_stmt 0 view .LVU1272
 4654 0c42 2046     		mov	r0, r4	@, <retval>
 4655 0c44 BDE8F88F 		pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 4656              	.LVL302:
 4657              	.L318:
 4658              	@ ../freertos/tasks.c:2487: 	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
2487:../freertos/tasks.c **** 
 4659              		.loc 1 2487 14 view .LVU1273
 4660 0c48 0024     		movs	r4, #0	@ <retval>,
 4661 0c4a F8E7     		b	.L316		@
 4662              	.L324:
 4663              		.align	2
 4664              	.L323:
 4665 0c4c 00000000 		.word	.LANCHOR0
 4666 0c50 2C000000 		.word	.LANCHOR0+44
 4667 0c54 0C000000 		.word	.LANCHOR0+12
 4668              		.cfi_endproc
 4669              	.LFE27:
 4670              		.size	uxTaskGetSystemState, .-uxTaskGetSystemState
 4671              		.align	1
 4672              		.global	xTaskGetCurrentTaskHandle
 4673              		.syntax unified
 4674              		.thumb
 4675              		.thumb_func
 4676              		.type	xTaskGetCurrentTaskHandle, %function
 4677              	xTaskGetCurrentTaskHandle:
 4678              	.LFB49:
3907:../freertos/tasks.c **** 	TaskHandle_t xReturn;
 4679              		.loc 1 3907 2 is_stmt 1 view -0
ARM GAS  /tmp/ccaP1CVS.s 			page 200


 4680              		.cfi_startproc
 4681              		@ args = 0, pretend = 0, frame = 0
 4682              		@ frame_needed = 0, uses_anonymous_args = 0
 4683              		@ link register save eliminated.
3908:../freertos/tasks.c **** 
 4684              		.loc 1 3908 2 view .LVU1275
3913:../freertos/tasks.c **** 
 4685              		.loc 1 3913 3 view .LVU1276
 4686              	@ ../freertos/tasks.c:3913: 		xReturn = pxCurrentTCB;
3913:../freertos/tasks.c **** 
 4687              		.loc 1 3913 11 is_stmt 0 view .LVU1277
 4688 0c58 014B     		ldr	r3, .L326	@ tmp114,
 4689 0c5a 5868     		ldr	r0, [r3, #4]	@ <retval>, pxCurrentTCB
 4690              	.LVL303:
3915:../freertos/tasks.c **** 	}
 4691              		.loc 1 3915 3 is_stmt 1 view .LVU1278
 4692              	@ ../freertos/tasks.c:3916: 	}
3916:../freertos/tasks.c **** 
 4693              		.loc 1 3916 2 is_stmt 0 view .LVU1279
 4694 0c5c 7047     		bx	lr	@
 4695              	.L327:
 4696 0c5e 00BF     		.align	2
 4697              	.L326:
 4698 0c60 00000000 		.word	.LANCHOR0
 4699              		.cfi_endproc
 4700              	.LFE49:
 4701              		.size	xTaskGetCurrentTaskHandle, .-xTaskGetCurrentTaskHandle
 4702              		.align	1
 4703              		.global	xTaskGetSchedulerState
 4704              		.syntax unified
 4705              		.thumb
 4706              		.thumb_func
 4707              		.type	xTaskGetSchedulerState, %function
 4708              	xTaskGetSchedulerState:
 4709              	.LFB50:
3924:../freertos/tasks.c **** 	BaseType_t xReturn;
 4710              		.loc 1 3924 2 is_stmt 1 view -0
 4711              		.cfi_startproc
 4712              		@ args = 0, pretend = 0, frame = 0
 4713              		@ frame_needed = 0, uses_anonymous_args = 0
 4714              		@ link register save eliminated.
3925:../freertos/tasks.c **** 
 4715              		.loc 1 3925 2 view .LVU1281
3927:../freertos/tasks.c **** 		{
 4716              		.loc 1 3927 3 view .LVU1282
 4717              	@ ../freertos/tasks.c:3927: 		if( xSchedulerRunning == pdFALSE )
3927:../freertos/tasks.c **** 		{
 4718              		.loc 1 3927 25 is_stmt 0 view .LVU1283
 4719 0c64 064B     		ldr	r3, .L332	@ tmp116,
 4720 0c66 D3F8E820 		ldr	r2, [r3, #232]	@ xSchedulerRunning.96_1, xSchedulerRunning
 4721              	@ ../freertos/tasks.c:3927: 		if( xSchedulerRunning == pdFALSE )
3927:../freertos/tasks.c **** 		{
 4722              		.loc 1 3927 5 view .LVU1284
 4723 0c6a 32B1     		cbz	r2, .L330	@ xSchedulerRunning.96_1,
3933:../freertos/tasks.c **** 			{
 4724              		.loc 1 3933 4 is_stmt 1 view .LVU1285
 4725              	@ ../freertos/tasks.c:3933: 			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
ARM GAS  /tmp/ccaP1CVS.s 			page 201


3933:../freertos/tasks.c **** 			{
 4726              		.loc 1 3933 29 is_stmt 0 view .LVU1286
 4727 0c6c D3F8F030 		ldr	r3, [r3, #240]	@ uxSchedulerSuspended.97_2, uxSchedulerSuspended
 4728              	@ ../freertos/tasks.c:3939: 				xReturn = taskSCHEDULER_SUSPENDED;
3939:../freertos/tasks.c **** 			}
 4729              		.loc 1 3939 13 view .LVU1287
 4730 0c70 002B     		cmp	r3, #0	@ uxSchedulerSuspended.97_2,
 4731 0c72 0CBF     		ite	eq
 4732 0c74 0220     		moveq	r0, #2	@ <retval>,
 4733 0c76 0020     		movne	r0, #0	@ <retval>,
 4734 0c78 7047     		bx	lr	@
 4735              	.L330:
 4736              	@ ../freertos/tasks.c:3929: 			xReturn = taskSCHEDULER_NOT_STARTED;
3929:../freertos/tasks.c **** 		}
 4737              		.loc 1 3929 12 view .LVU1288
 4738 0c7a 0120     		movs	r0, #1	@ <retval>,
 4739              	@ ../freertos/tasks.c:3944: 	}
3944:../freertos/tasks.c **** 
 4740              		.loc 1 3944 2 view .LVU1289
 4741 0c7c 7047     		bx	lr	@
 4742              	.L333:
 4743 0c7e 00BF     		.align	2
 4744              	.L332:
 4745 0c80 00000000 		.word	.LANCHOR0
 4746              		.cfi_endproc
 4747              	.LFE50:
 4748              		.size	xTaskGetSchedulerState, .-xTaskGetSchedulerState
 4749              		.align	1
 4750              		.global	xTaskPriorityInherit
 4751              		.syntax unified
 4752              		.thumb
 4753              		.thumb_func
 4754              		.type	xTaskPriorityInherit, %function
 4755              	xTaskPriorityInherit:
 4756              	.LVL304:
 4757              	.LFB51:
3952:../freertos/tasks.c **** 	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 4758              		.loc 1 3952 2 is_stmt 1 view -0
 4759              		.cfi_startproc
 4760              		@ args = 0, pretend = 0, frame = 0
 4761              		@ frame_needed = 0, uses_anonymous_args = 0
3953:../freertos/tasks.c **** 	BaseType_t xReturn = pdFALSE;
 4762              		.loc 1 3953 2 view .LVU1291
3954:../freertos/tasks.c **** 
 4763              		.loc 1 3954 2 view .LVU1292
3959:../freertos/tasks.c **** 		{
 4764              		.loc 1 3959 3 view .LVU1293
 4765              	@ ../freertos/tasks.c:3952: 	{
3952:../freertos/tasks.c **** 	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 4766              		.loc 1 3952 2 is_stmt 0 view .LVU1294
 4767 0c84 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}	@
 4768              	.LCFI43:
 4769              		.cfi_def_cfa_offset 24
 4770              		.cfi_offset 4, -24
 4771              		.cfi_offset 5, -20
 4772              		.cfi_offset 6, -16
 4773              		.cfi_offset 7, -12
ARM GAS  /tmp/ccaP1CVS.s 			page 202


 4774              		.cfi_offset 8, -8
 4775              		.cfi_offset 14, -4
 4776              	@ ../freertos/tasks.c:3959: 		if( pxMutexHolder != NULL )
3959:../freertos/tasks.c **** 		{
 4777              		.loc 1 3959 5 view .LVU1295
 4778 0c88 0446     		mov	r4, r0	@ pxMutexHolder, tmp188
 4779 0c8a 0028     		cmp	r0, #0	@ pxMutexHolder
 4780 0c8c 35D0     		beq	.L340	@
3964:../freertos/tasks.c **** 			{
 4781              		.loc 1 3964 4 is_stmt 1 view .LVU1296
 4782              	@ ../freertos/tasks.c:3964: 			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
3964:../freertos/tasks.c **** 			{
 4783              		.loc 1 3964 51 is_stmt 0 view .LVU1297
 4784 0c8e 234D     		ldr	r5, .L341	@ tmp147,
 4785              	@ ../freertos/tasks.c:3964: 			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
3964:../freertos/tasks.c **** 			{
 4786              		.loc 1 3964 24 view .LVU1298
 4787 0c90 C36A     		ldr	r3, [r0, #44]	@ _1, MEM[(struct TCB_t *)pxMutexHolder_34(D)].uxPriority
 4788              	@ ../freertos/tasks.c:3964: 			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
3964:../freertos/tasks.c **** 			{
 4789              		.loc 1 3964 51 view .LVU1299
 4790 0c92 6A68     		ldr	r2, [r5, #4]	@ pxCurrentTCB.98_2, pxCurrentTCB
 4791              	@ ../freertos/tasks.c:3964: 			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
3964:../freertos/tasks.c **** 			{
 4792              		.loc 1 3964 6 view .LVU1300
 4793 0c94 D26A     		ldr	r2, [r2, #44]	@ pxCurrentTCB.98_2->uxPriority, pxCurrentTCB.98_2->uxPriority
 4794 0c96 9342     		cmp	r3, r2	@ _1, pxCurrentTCB.98_2->uxPriority
 4795 0c98 37D2     		bcs	.L336		@,
3969:../freertos/tasks.c **** 				{
 4796              		.loc 1 3969 5 is_stmt 1 view .LVU1301
 4797              	@ ../freertos/tasks.c:3980: 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB
3980:../freertos/tasks.c **** 				{
 4798              		.loc 1 3980 9 is_stmt 0 view .LVU1302
 4799 0c9a 1426     		movs	r6, #20	@ tmp156,
 4800              	@ ../freertos/tasks.c:3969: 				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem 
3969:../freertos/tasks.c **** 				{
 4801              		.loc 1 3969 7 view .LVU1303
 4802 0c9c 8269     		ldr	r2, [r0, #24]	@ MEM[(struct TCB_t *)pxMutexHolder_34(D)].xEventListItem.xItemValue, MEM[(struc
 4803              	@ ../freertos/tasks.c:3980: 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB
3980:../freertos/tasks.c **** 				{
 4804              		.loc 1 3980 9 view .LVU1304
 4805 0c9e 204F     		ldr	r7, .L341+4	@ tmp154,
 4806              	@ ../freertos/tasks.c:3969: 				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem 
3969:../freertos/tasks.c **** 				{
 4807              		.loc 1 3969 7 view .LVU1305
 4808 0ca0 002A     		cmp	r2, #0	@ MEM[(struct TCB_t *)pxMutexHolder_34(D)].xEventListItem.xItemValue,
3971:../freertos/tasks.c **** 				}
 4809              		.loc 1 3971 6 is_stmt 1 view .LVU1306
 4810 0ca2 A8BF     		it	ge
 4811 0ca4 6A68     		ldrge	r2, [r5, #4]	@ pxCurrentTCB.99_6, pxCurrentTCB
 4812              	@ ../freertos/tasks.c:3980: 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB
3980:../freertos/tasks.c **** 				{
 4813              		.loc 1 3980 9 is_stmt 0 view .LVU1307
 4814 0ca6 06FB0373 		mla	r3, r6, r3, r7	@ tmp157, tmp156, _1, tmp154
 4815              	@ ../freertos/tasks.c:3971: 					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( 
3971:../freertos/tasks.c **** 				}
 4816              		.loc 1 3971 6 view .LVU1308
ARM GAS  /tmp/ccaP1CVS.s 			page 203


 4817 0caa A2BF     		ittt	ge
 4818 0cac D26A     		ldrge	r2, [r2, #44]	@ pxCurrentTCB.99_6->uxPriority, pxCurrentTCB.99_6->uxPriority
 4819 0cae C2F10502 		rsbge	r2, r2, #5	@ tmp151, pxCurrentTCB.99_6->uxPriority,
 4820 0cb2 8261     		strge	r2, [r0, #24]	@ tmp151, MEM[(struct TCB_t *)pxMutexHolder_34(D)].xEventListItem.xItemValue
3975:../freertos/tasks.c **** 				}
 4821              		.loc 1 3975 30 is_stmt 1 view .LVU1309
3980:../freertos/tasks.c **** 				{
 4822              		.loc 1 3980 5 view .LVU1310
 4823              	@ ../freertos/tasks.c:3980: 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB
3980:../freertos/tasks.c **** 				{
 4824              		.loc 1 3980 7 is_stmt 0 view .LVU1311
 4825 0cb4 4269     		ldr	r2, [r0, #20]	@ MEM[(struct TCB_t *)pxMutexHolder_34(D)].xStateListItem.pvContainer, MEM[(stru
 4826 0cb6 9A42     		cmp	r2, r3	@ MEM[(struct TCB_t *)pxMutexHolder_34(D)].xStateListItem.pvContainer, tmp157
 4827 0cb8 21D1     		bne	.L338		@,
3982:../freertos/tasks.c **** 					{
 4828              		.loc 1 3982 6 is_stmt 1 view .LVU1312
 4829              	@ ../freertos/tasks.c:3982: 					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBa
3982:../freertos/tasks.c **** 					{
 4830              		.loc 1 3982 10 is_stmt 0 view .LVU1313
 4831 0cba 00F10408 		add	r8, r0, #4	@ _11, pxMutexHolder,
 4832 0cbe 4046     		mov	r0, r8	@, _11
 4833              	.LVL305:
3982:../freertos/tasks.c **** 					{
 4834              		.loc 1 3982 10 view .LVU1314
 4835 0cc0 FFF7FEFF 		bl	uxListRemove		@
 4836              	.LVL306:
 4837              	@ ../freertos/tasks.c:3982: 					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBa
3982:../freertos/tasks.c **** 					{
 4838              		.loc 1 3982 8 view .LVU1315
 4839 0cc4 50B9     		cbnz	r0, .L339	@ tmp189,
3984:../freertos/tasks.c **** 					}
 4840              		.loc 1 3984 7 is_stmt 1 view .LVU1316
 4841 0cc6 E16A     		ldr	r1, [r4, #44]	@ _13, MEM[(struct TCB_t *)pxMutexHolder_34(D)].uxPriority
 4842 0cc8 06FB0156 		mla	r6, r6, r1, r5	@ tmp162, tmp156, _13, tmp147
 4843 0ccc B36C     		ldr	r3, [r6, #72]	@ _14, pxReadyTasksLists[_13].uxNumberOfItems
 4844 0cce 2BB9     		cbnz	r3, .L339	@ _14,
3984:../freertos/tasks.c **** 					}
 4845              		.loc 1 3984 7 discriminator 1 view .LVU1317
 4846 0cd0 0122     		movs	r2, #1	@ tmp166,
 4847 0cd2 AB68     		ldr	r3, [r5, #8]	@ uxTopReadyPriority.100_17, uxTopReadyPriority
 4848 0cd4 8A40     		lsls	r2, r2, r1	@ tmp165, tmp166, _13
 4849 0cd6 23EA0203 		bic	r3, r3, r2	@ _18, uxTopReadyPriority.100_17, tmp165
 4850 0cda AB60     		str	r3, [r5, #8]	@ _18, uxTopReadyPriority
 4851              	.L339:
3988:../freertos/tasks.c **** 					}
 4852              		.loc 1 3988 31 view .LVU1318
3992:../freertos/tasks.c **** 					prvAddTaskToReadyList( pxMutexHolderTCB );
 4853              		.loc 1 3992 6 view .LVU1319
 4854              	@ ../freertos/tasks.c:3992: 					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
3992:../freertos/tasks.c **** 					prvAddTaskToReadyList( pxMutexHolderTCB );
 4855              		.loc 1 3992 49 is_stmt 0 view .LVU1320
 4856 0cdc 6B68     		ldr	r3, [r5, #4]	@ pxCurrentTCB.101_19, pxCurrentTCB
 4857              	@ ../freertos/tasks.c:3993: 					prvAddTaskToReadyList( pxMutexHolderTCB );
3993:../freertos/tasks.c **** 				}
 4858              		.loc 1 3993 6 view .LVU1321
 4859 0cde 1420     		movs	r0, #20	@ tmp177,
 4860              	@ ../freertos/tasks.c:3992: 					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
ARM GAS  /tmp/ccaP1CVS.s 			page 204


3992:../freertos/tasks.c **** 					prvAddTaskToReadyList( pxMutexHolderTCB );
 4861              		.loc 1 3992 49 view .LVU1322
 4862 0ce0 DB6A     		ldr	r3, [r3, #44]	@ _20, pxCurrentTCB.101_19->uxPriority
 4863              	@ ../freertos/tasks.c:3993: 					prvAddTaskToReadyList( pxMutexHolderTCB );
3993:../freertos/tasks.c **** 				}
 4864              		.loc 1 3993 6 view .LVU1323
 4865 0ce2 A968     		ldr	r1, [r5, #8]	@ uxTopReadyPriority.102_22, uxTopReadyPriority
 4866              	@ ../freertos/tasks.c:3992: 					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
3992:../freertos/tasks.c **** 					prvAddTaskToReadyList( pxMutexHolderTCB );
 4867              		.loc 1 3992 35 view .LVU1324
 4868 0ce4 E362     		str	r3, [r4, #44]	@ _20, MEM[(struct TCB_t *)pxMutexHolder_34(D)].uxPriority
3993:../freertos/tasks.c **** 				}
 4869              		.loc 1 3993 6 is_stmt 1 view .LVU1325
3993:../freertos/tasks.c **** 				}
 4870              		.loc 1 3993 6 view .LVU1326
 4871 0ce6 0124     		movs	r4, #1	@ tmp172,
 4872              	.LVL307:
3993:../freertos/tasks.c **** 				}
 4873              		.loc 1 3993 6 is_stmt 0 view .LVU1327
 4874 0ce8 04FA03F2 		lsl	r2, r4, r3	@ tmp171, tmp172, _20
 4875 0cec 0A43     		orrs	r2, r2, r1	@, _23, tmp171, uxTopReadyPriority.102_22
 4876 0cee 00FB0370 		mla	r0, r0, r3, r7	@, tmp177, _20, tmp154
 4877 0cf2 4146     		mov	r1, r8	@, _11
 4878 0cf4 AA60     		str	r2, [r5, #8]	@ _23, uxTopReadyPriority
3993:../freertos/tasks.c **** 				}
 4879              		.loc 1 3993 6 is_stmt 1 view .LVU1328
 4880 0cf6 FFF7FEFF 		bl	vListInsertEnd		@
 4881              	.LVL308:
3993:../freertos/tasks.c **** 				}
 4882              		.loc 1 3993 47 view .LVU1329
 4883              	.L340:
 4884              	@ ../freertos/tasks.c:3954: 	BaseType_t xReturn = pdFALSE;
3954:../freertos/tasks.c **** 
 4885              		.loc 1 3954 13 is_stmt 0 view .LVU1330
 4886 0cfa 2046     		mov	r0, r4	@ <retval>, pxMutexHolder
 4887              	.LVL309:
4027:../freertos/tasks.c **** 		}
 4888              		.loc 1 4027 28 is_stmt 1 view .LVU1331
4030:../freertos/tasks.c **** 	}
 4889              		.loc 1 4030 3 view .LVU1332
 4890              	@ ../freertos/tasks.c:4030: 		return xReturn;
4030:../freertos/tasks.c **** 	}
 4891              		.loc 1 4030 10 is_stmt 0 view .LVU1333
 4892 0cfc 03E0     		b	.L334		@
 4893              	.LVL310:
 4894              	.L338:
3998:../freertos/tasks.c **** 				}
 4895              		.loc 1 3998 6 is_stmt 1 view .LVU1334
 4896              	@ ../freertos/tasks.c:3998: 					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
3998:../freertos/tasks.c **** 				}
 4897              		.loc 1 3998 49 is_stmt 0 view .LVU1335
 4898 0cfe 6B68     		ldr	r3, [r5, #4]	@ pxCurrentTCB.103_25, pxCurrentTCB
 4899 0d00 DB6A     		ldr	r3, [r3, #44]	@ _26, pxCurrentTCB.103_25->uxPriority
 4900              	@ ../freertos/tasks.c:3998: 					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
3998:../freertos/tasks.c **** 				}
 4901              		.loc 1 3998 35 view .LVU1336
 4902 0d02 C362     		str	r3, [r0, #44]	@ _26, MEM[(struct TCB_t *)pxMutexHolder_34(D)].uxPriority
ARM GAS  /tmp/ccaP1CVS.s 			page 205


 4903              	@ ../freertos/tasks.c:4004: 				xReturn = pdTRUE;
4004:../freertos/tasks.c **** 			}
 4904              		.loc 1 4004 13 view .LVU1337
 4905 0d04 0120     		movs	r0, #1	@ <retval>,
 4906              	.LVL311:
 4907              	.L334:
 4908              	@ ../freertos/tasks.c:4031: 	}
4031:../freertos/tasks.c **** 
 4909              		.loc 1 4031 2 view .LVU1338
 4910 0d06 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}	@
 4911              	.LVL312:
 4912              	.L336:
4008:../freertos/tasks.c **** 				{
 4913              		.loc 1 4008 5 is_stmt 1 view .LVU1339
 4914              	@ ../freertos/tasks.c:4008: 				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
4008:../freertos/tasks.c **** 				{
 4915              		.loc 1 4008 56 is_stmt 0 view .LVU1340
 4916 0d0a 6B68     		ldr	r3, [r5, #4]	@ pxCurrentTCB.104_28, pxCurrentTCB
 4917              	@ ../freertos/tasks.c:4008: 				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
4008:../freertos/tasks.c **** 				{
 4918              		.loc 1 4008 7 view .LVU1341
 4919 0d0c C06C     		ldr	r0, [r0, #76]	@ MEM[(struct TCB_t *)pxMutexHolder_34(D)].uxBasePriority, MEM[(struct TCB_t *)p
 4920              	.LVL313:
4008:../freertos/tasks.c **** 				{
 4921              		.loc 1 4008 7 view .LVU1342
 4922 0d0e DC6A     		ldr	r4, [r3, #44]	@ pxCurrentTCB.104_28->uxPriority, pxCurrentTCB.104_28->uxPriority
 4923              	.LVL314:
4008:../freertos/tasks.c **** 				{
 4924              		.loc 1 4008 7 view .LVU1343
 4925 0d10 A042     		cmp	r0, r4	@ MEM[(struct TCB_t *)pxMutexHolder_34(D)].uxBasePriority, pxCurrentTCB.104_28->uxPrior
 4926 0d12 2CBF     		ite	cs
 4927 0d14 0020     		movcs	r0, #0	@ <retval>,
 4928 0d16 0120     		movcc	r0, #1	@ <retval>,
 4929 0d18 F5E7     		b	.L334		@
 4930              	.L342:
 4931 0d1a 00BF     		.align	2
 4932              	.L341:
 4933 0d1c 00000000 		.word	.LANCHOR0
 4934 0d20 48000000 		.word	.LANCHOR0+72
 4935              		.cfi_endproc
 4936              	.LFE51:
 4937              		.size	xTaskPriorityInherit, .-xTaskPriorityInherit
 4938              		.align	1
 4939              		.global	xTaskPriorityDisinherit
 4940              		.syntax unified
 4941              		.thumb
 4942              		.thumb_func
 4943              		.type	xTaskPriorityDisinherit, %function
 4944              	xTaskPriorityDisinherit:
 4945              	.LVL315:
 4946              	.LFB52:
4039:../freertos/tasks.c **** 	TCB_t * const pxTCB = pxMutexHolder;
 4947              		.loc 1 4039 2 is_stmt 1 view -0
 4948              		.cfi_startproc
 4949              		@ args = 0, pretend = 0, frame = 0
 4950              		@ frame_needed = 0, uses_anonymous_args = 0
4040:../freertos/tasks.c **** 	BaseType_t xReturn = pdFALSE;
ARM GAS  /tmp/ccaP1CVS.s 			page 206


 4951              		.loc 1 4040 2 view .LVU1345
4041:../freertos/tasks.c **** 
 4952              		.loc 1 4041 2 view .LVU1346
4043:../freertos/tasks.c **** 		{
 4953              		.loc 1 4043 3 view .LVU1347
 4954              	@ ../freertos/tasks.c:4039: 	{
4039:../freertos/tasks.c **** 	TCB_t * const pxTCB = pxMutexHolder;
 4955              		.loc 1 4039 2 is_stmt 0 view .LVU1348
 4956 0d24 70B5     		push	{r4, r5, r6, lr}	@
 4957              	.LCFI44:
 4958              		.cfi_def_cfa_offset 16
 4959              		.cfi_offset 4, -16
 4960              		.cfi_offset 5, -12
 4961              		.cfi_offset 6, -8
 4962              		.cfi_offset 14, -4
 4963              	@ ../freertos/tasks.c:4043: 		if( pxMutexHolder != NULL )
4043:../freertos/tasks.c **** 		{
 4964              		.loc 1 4043 5 view .LVU1349
 4965 0d26 0446     		mov	r4, r0	@ pxMutexHolder, tmp159
 4966 0d28 08B9     		cbnz	r0, .L344	@ pxMutexHolder,
 4967              	.L346:
 4968              	@ ../freertos/tasks.c:4041: 	BaseType_t xReturn = pdFALSE;
4041:../freertos/tasks.c **** 
 4969              		.loc 1 4041 13 view .LVU1350
 4970 0d2a 0020     		movs	r0, #0	@ <retval>,
 4971              	.LVL316:
 4972              	.L343:
 4973              	@ ../freertos/tasks.c:4111: 	}
4111:../freertos/tasks.c **** 
 4974              		.loc 1 4111 2 view .LVU1351
 4975 0d2c 70BD     		pop	{r4, r5, r6, pc}	@
 4976              	.LVL317:
 4977              	.L344:
4049:../freertos/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
 4978              		.loc 1 4049 41 is_stmt 1 view .LVU1352
4050:../freertos/tasks.c **** 			( pxTCB->uxMutexesHeld )--;
 4979              		.loc 1 4050 40 view .LVU1353
4051:../freertos/tasks.c **** 
 4980              		.loc 1 4051 4 view .LVU1354
 4981              	@ ../freertos/tasks.c:4051: 			( pxTCB->uxMutexesHeld )--;
4051:../freertos/tasks.c **** 
 4982              		.loc 1 4051 28 is_stmt 0 view .LVU1355
 4983 0d2e 036D     		ldr	r3, [r0, #80]	@ MEM[(struct TCB_t *)pxMutexHolder_22(D)].uxMutexesHeld, MEM[(struct TCB_t *)px
 4984              	@ ../freertos/tasks.c:4055: 			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
4055:../freertos/tasks.c **** 			{
 4985              		.loc 1 4055 6 view .LVU1356
 4986 0d30 C16A     		ldr	r1, [r0, #44]	@ MEM[(struct TCB_t *)pxMutexHolder_22(D)].uxPriority, MEM[(struct TCB_t *)pxMut
 4987 0d32 C26C     		ldr	r2, [r0, #76]	@ MEM[(struct TCB_t *)pxMutexHolder_22(D)].uxBasePriority, MEM[(struct TCB_t *)p
 4988              	@ ../freertos/tasks.c:4051: 			( pxTCB->uxMutexesHeld )--;
4051:../freertos/tasks.c **** 
 4989              		.loc 1 4051 28 view .LVU1357
 4990 0d34 013B     		subs	r3, r3, #1	@ _2, MEM[(struct TCB_t *)pxMutexHolder_22(D)].uxMutexesHeld,
 4991              	@ ../freertos/tasks.c:4055: 			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
4055:../freertos/tasks.c **** 			{
 4992              		.loc 1 4055 6 view .LVU1358
 4993 0d36 9142     		cmp	r1, r2	@ MEM[(struct TCB_t *)pxMutexHolder_22(D)].uxPriority, MEM[(struct TCB_t *)pxMutexHolde
 4994              	@ ../freertos/tasks.c:4051: 			( pxTCB->uxMutexesHeld )--;
ARM GAS  /tmp/ccaP1CVS.s 			page 207


4051:../freertos/tasks.c **** 
 4995              		.loc 1 4051 28 view .LVU1359
 4996 0d38 0365     		str	r3, [r0, #80]	@ _2, MEM[(struct TCB_t *)pxMutexHolder_22(D)].uxMutexesHeld
4055:../freertos/tasks.c **** 			{
 4997              		.loc 1 4055 4 is_stmt 1 view .LVU1360
 4998              	@ ../freertos/tasks.c:4055: 			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
4055:../freertos/tasks.c **** 			{
 4999              		.loc 1 4055 6 is_stmt 0 view .LVU1361
 5000 0d3a F6D0     		beq	.L346		@,
4058:../freertos/tasks.c **** 				{
 5001              		.loc 1 4058 5 is_stmt 1 view .LVU1362
 5002              	@ ../freertos/tasks.c:4058: 				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
4058:../freertos/tasks.c **** 				{
 5003              		.loc 1 4058 7 is_stmt 0 view .LVU1363
 5004 0d3c 002B     		cmp	r3, #0	@ _2
 5005 0d3e F4D1     		bne	.L346	@
4065:../freertos/tasks.c **** 					{
 5006              		.loc 1 4065 6 is_stmt 1 view .LVU1364
 5007              	@ ../freertos/tasks.c:4065: 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 
4065:../freertos/tasks.c **** 					{
 5008              		.loc 1 4065 10 is_stmt 0 view .LVU1365
 5009 0d40 051D     		adds	r5, r0, #4	@ _5, pxMutexHolder,
 5010 0d42 2846     		mov	r0, r5	@, _5
 5011              	.LVL318:
4065:../freertos/tasks.c **** 					{
 5012              		.loc 1 4065 10 view .LVU1366
 5013 0d44 FFF7FEFF 		bl	uxListRemove		@
 5014              	.LVL319:
 5015 0d48 104B     		ldr	r3, .L348	@ tmp158,
 5016              	@ ../freertos/tasks.c:4065: 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 
4065:../freertos/tasks.c **** 					{
 5017              		.loc 1 4065 8 view .LVU1367
 5018 0d4a 58B9     		cbnz	r0, .L347	@ tmp160,
4067:../freertos/tasks.c **** 					}
 5019              		.loc 1 4067 7 is_stmt 1 view .LVU1368
 5020 0d4c 1421     		movs	r1, #20	@ tmp139,
 5021 0d4e E66A     		ldr	r6, [r4, #44]	@ _7, MEM[(struct TCB_t *)pxMutexHolder_22(D)].uxPriority
 5022 0d50 01FB0631 		mla	r1, r1, r6, r3	@ tmp140, tmp139, _7, tmp158
 5023 0d54 8A6C     		ldr	r2, [r1, #72]	@ _8, pxReadyTasksLists[_7].uxNumberOfItems
 5024 0d56 2AB9     		cbnz	r2, .L347	@ _8,
4067:../freertos/tasks.c **** 					}
 5025              		.loc 1 4067 7 discriminator 1 view .LVU1369
 5026 0d58 0120     		movs	r0, #1	@ tmp144,
 5027 0d5a 9A68     		ldr	r2, [r3, #8]	@ uxTopReadyPriority.105_11, uxTopReadyPriority
 5028 0d5c B040     		lsls	r0, r0, r6	@ tmp143, tmp144, _7
 5029 0d5e 22EA0002 		bic	r2, r2, r0	@ _12, uxTopReadyPriority.105_11, tmp143
 5030 0d62 9A60     		str	r2, [r3, #8]	@ _12, uxTopReadyPriority
 5031              	.L347:
4071:../freertos/tasks.c **** 					}
 5032              		.loc 1 4071 31 view .LVU1370
4076:../freertos/tasks.c **** 					pxTCB->uxPriority = pxTCB->uxBasePriority;
 5033              		.loc 1 4076 67 view .LVU1371
4077:../freertos/tasks.c **** 
 5034              		.loc 1 4077 6 view .LVU1372
 5035              	@ ../freertos/tasks.c:4077: 					pxTCB->uxPriority = pxTCB->uxBasePriority;
4077:../freertos/tasks.c **** 
 5036              		.loc 1 4077 31 is_stmt 0 view .LVU1373
ARM GAS  /tmp/ccaP1CVS.s 			page 208


 5037 0d64 E26C     		ldr	r2, [r4, #76]	@ _13, MEM[(struct TCB_t *)pxMutexHolder_22(D)].uxBasePriority
 5038              	@ ../freertos/tasks.c:4082: 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t 
4082:../freertos/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 5039              		.loc 1 4082 6 view .LVU1374
 5040 0d66 C2F10501 		rsb	r1, r2, #5	@ tmp147, _13,
 5041 0d6a A161     		str	r1, [r4, #24]	@ tmp147, MEM[(struct TCB_t *)pxMutexHolder_22(D)].xEventListItem.xItemValue
 5042              	@ ../freertos/tasks.c:4077: 					pxTCB->uxPriority = pxTCB->uxBasePriority;
4077:../freertos/tasks.c **** 
 5043              		.loc 1 4077 24 view .LVU1375
 5044 0d6c E262     		str	r2, [r4, #44]	@ _13, MEM[(struct TCB_t *)pxMutexHolder_22(D)].uxPriority
4082:../freertos/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 5045              		.loc 1 4082 6 is_stmt 1 view .LVU1376
4083:../freertos/tasks.c **** 
 5046              		.loc 1 4083 6 view .LVU1377
4083:../freertos/tasks.c **** 
 5047              		.loc 1 4083 6 view .LVU1378
 5048 0d6e 0124     		movs	r4, #1	@ tmp150,
 5049              	.LVL320:
4083:../freertos/tasks.c **** 
 5050              		.loc 1 4083 6 is_stmt 0 view .LVU1379
 5051 0d70 9968     		ldr	r1, [r3, #8]	@ uxTopReadyPriority.106_16, uxTopReadyPriority
 5052 0d72 04FA02F0 		lsl	r0, r4, r2	@ tmp149, tmp150, _13
 5053 0d76 0843     		orrs	r0, r0, r1	@, _17, tmp149, uxTopReadyPriority.106_16
 5054 0d78 9860     		str	r0, [r3, #8]	@ _17, uxTopReadyPriority
4083:../freertos/tasks.c **** 
 5055              		.loc 1 4083 6 is_stmt 1 view .LVU1380
 5056 0d7a 1420     		movs	r0, #20	@ tmp155,
 5057 0d7c 044B     		ldr	r3, .L348+4	@ tmp153,
 5058 0d7e 2946     		mov	r1, r5	@, _5
 5059 0d80 00FB0230 		mla	r0, r0, r2, r3	@, tmp155, _13, tmp153
 5060 0d84 FFF7FEFF 		bl	vListInsertEnd		@
 5061              	.LVL321:
4083:../freertos/tasks.c **** 
 5062              		.loc 1 4083 36 view .LVU1381
4093:../freertos/tasks.c **** 				}
 5063              		.loc 1 4093 6 view .LVU1382
 5064              	@ ../freertos/tasks.c:4093: 					xReturn = pdTRUE;
4093:../freertos/tasks.c **** 				}
 5065              		.loc 1 4093 14 is_stmt 0 view .LVU1383
 5066 0d88 2046     		mov	r0, r4	@ <retval>, tmp150
4107:../freertos/tasks.c **** 		}
 5067              		.loc 1 4107 28 is_stmt 1 view .LVU1384
4110:../freertos/tasks.c **** 	}
 5068              		.loc 1 4110 3 view .LVU1385
 5069              	@ ../freertos/tasks.c:4110: 		return xReturn;
4110:../freertos/tasks.c **** 	}
 5070              		.loc 1 4110 10 is_stmt 0 view .LVU1386
 5071 0d8a CFE7     		b	.L343		@
 5072              	.L349:
 5073              		.align	2
 5074              	.L348:
 5075 0d8c 00000000 		.word	.LANCHOR0
 5076 0d90 48000000 		.word	.LANCHOR0+72
 5077              		.cfi_endproc
 5078              	.LFE52:
 5079              		.size	xTaskPriorityDisinherit, .-xTaskPriorityDisinherit
 5080              		.align	1
ARM GAS  /tmp/ccaP1CVS.s 			page 209


 5081              		.global	vTaskPriorityDisinheritAfterTimeout
 5082              		.syntax unified
 5083              		.thumb
 5084              		.thumb_func
 5085              		.type	vTaskPriorityDisinheritAfterTimeout, %function
 5086              	vTaskPriorityDisinheritAfterTimeout:
 5087              	.LVL322:
 5088              	.LFB53:
4119:../freertos/tasks.c **** 	TCB_t * const pxTCB = pxMutexHolder;
 5089              		.loc 1 4119 2 is_stmt 1 view -0
 5090              		.cfi_startproc
 5091              		@ args = 0, pretend = 0, frame = 0
 5092              		@ frame_needed = 0, uses_anonymous_args = 0
4120:../freertos/tasks.c **** 	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
 5093              		.loc 1 4120 2 view .LVU1388
4121:../freertos/tasks.c **** 	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 5094              		.loc 1 4121 2 view .LVU1389
4122:../freertos/tasks.c **** 
 5095              		.loc 1 4122 2 view .LVU1390
4124:../freertos/tasks.c **** 		{
 5096              		.loc 1 4124 3 view .LVU1391
 5097              	@ ../freertos/tasks.c:4119: 	{
4119:../freertos/tasks.c **** 	TCB_t * const pxTCB = pxMutexHolder;
 5098              		.loc 1 4119 2 is_stmt 0 view .LVU1392
 5099 0d94 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}	@
 5100              	.LCFI45:
 5101              		.cfi_def_cfa_offset 24
 5102              		.cfi_offset 4, -24
 5103              		.cfi_offset 5, -20
 5104              		.cfi_offset 6, -16
 5105              		.cfi_offset 7, -12
 5106              		.cfi_offset 8, -8
 5107              		.cfi_offset 14, -4
 5108              	@ ../freertos/tasks.c:4124: 		if( pxMutexHolder != NULL )
4124:../freertos/tasks.c **** 		{
 5109              		.loc 1 4124 5 view .LVU1393
 5110 0d98 0446     		mov	r4, r0	@ pxMutexHolder, tmp172
 5111 0d9a 0028     		cmp	r0, #0	@ pxMutexHolder
 5112 0d9c 37D0     		beq	.L350	@
4128:../freertos/tasks.c **** 
 5113              		.loc 1 4128 40 is_stmt 1 view .LVU1394
4134:../freertos/tasks.c **** 			{
 5114              		.loc 1 4134 4 view .LVU1395
 5115 0d9e C36C     		ldr	r3, [r0, #76]	@ MEM[(struct TCB_t *)pxMutexHolder_25(D)].uxBasePriority, MEM[(struct TCB_t *)p
 5116 0da0 9942     		cmp	r1, r3	@ uxHighestPriorityWaitingTask, MEM[(struct TCB_t *)pxMutexHolder_25(D)].uxBasePriority
 5117 0da2 38BF     		it	cc
 5118 0da4 1946     		movcc	r1, r3	@ uxPriorityToUse, MEM[(struct TCB_t *)pxMutexHolder_25(D)].uxBasePriority
 5119              	.LVL323:
4144:../freertos/tasks.c **** 			{
 5120              		.loc 1 4144 4 view .LVU1396
 5121              	@ ../freertos/tasks.c:4144: 			if( pxTCB->uxPriority != uxPriorityToUse )
4144:../freertos/tasks.c **** 			{
 5122              		.loc 1 4144 13 is_stmt 0 view .LVU1397
 5123 0da6 C36A     		ldr	r3, [r0, #44]	@ _2, MEM[(struct TCB_t *)pxMutexHolder_25(D)].uxPriority
 5124              	@ ../freertos/tasks.c:4144: 			if( pxTCB->uxPriority != uxPriorityToUse )
4144:../freertos/tasks.c **** 			{
 5125              		.loc 1 4144 6 view .LVU1398
ARM GAS  /tmp/ccaP1CVS.s 			page 210


 5126 0da8 8B42     		cmp	r3, r1	@ _2, uxPriorityToUse
 5127 0daa 30D0     		beq	.L350		@,
4150:../freertos/tasks.c **** 				{
 5128              		.loc 1 4150 5 is_stmt 1 view .LVU1399
 5129              	@ ../freertos/tasks.c:4150: 				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
4150:../freertos/tasks.c **** 				{
 5130              		.loc 1 4150 7 is_stmt 0 view .LVU1400
 5131 0dac 026D     		ldr	r2, [r0, #80]	@ MEM[(struct TCB_t *)pxMutexHolder_25(D)].uxMutexesHeld, MEM[(struct TCB_t *)px
 5132 0dae 012A     		cmp	r2, #1	@ MEM[(struct TCB_t *)pxMutexHolder_25(D)].uxMutexesHeld,
 5133 0db0 2DD1     		bne	.L350		@,
4155:../freertos/tasks.c **** 
 5134              		.loc 1 4155 43 is_stmt 1 view .LVU1401
4160:../freertos/tasks.c **** 					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 5135              		.loc 1 4160 67 view .LVU1402
4161:../freertos/tasks.c **** 					pxTCB->uxPriority = uxPriorityToUse;
 5136              		.loc 1 4161 6 view .LVU1403
 5137              	.LVL324:
4162:../freertos/tasks.c **** 
 5138              		.loc 1 4162 6 view .LVU1404
 5139              	@ ../freertos/tasks.c:4181: 					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedO
4181:../freertos/tasks.c **** 					{
 5140              		.loc 1 4181 10 is_stmt 0 view .LVU1405
 5141 0db2 1426     		movs	r6, #20	@ tmp146,
 5142 0db4 174D     		ldr	r5, .L356	@ tmp143,
 5143              	@ ../freertos/tasks.c:4166: 					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & task
4166:../freertos/tasks.c **** 					{
 5144              		.loc 1 4166 8 view .LVU1406
 5145 0db6 8269     		ldr	r2, [r0, #24]	@ MEM[(struct TCB_t *)pxMutexHolder_25(D)].xEventListItem.xItemValue, MEM[(struc
 5146              	@ ../freertos/tasks.c:4181: 					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedO
4181:../freertos/tasks.c **** 					{
 5147              		.loc 1 4181 10 view .LVU1407
 5148 0db8 05F14807 		add	r7, r5, #72	@ tmp144, tmp143,
 5149 0dbc 06FB0373 		mla	r3, r6, r3, r7	@ tmp147, tmp146, _2, tmp144
 5150              	.LVL325:
 5151              	@ ../freertos/tasks.c:4166: 					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & task
4166:../freertos/tasks.c **** 					{
 5152              		.loc 1 4166 8 view .LVU1408
 5153 0dc0 002A     		cmp	r2, #0	@ MEM[(struct TCB_t *)pxMutexHolder_25(D)].xEventListItem.xItemValue,
 5154              	@ ../freertos/tasks.c:4181: 					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedO
4181:../freertos/tasks.c **** 					{
 5155              		.loc 1 4181 8 view .LVU1409
 5156 0dc2 4269     		ldr	r2, [r0, #20]	@ MEM[(struct TCB_t *)pxMutexHolder_25(D)].xStateListItem.pvContainer, MEM[(stru
 5157              	@ ../freertos/tasks.c:4162: 					pxTCB->uxPriority = uxPriorityToUse;
4162:../freertos/tasks.c **** 
 5158              		.loc 1 4162 24 view .LVU1410
 5159 0dc4 C162     		str	r1, [r0, #44]	@ uxPriorityToUse, MEM[(struct TCB_t *)pxMutexHolder_25(D)].uxPriority
 5160              	.LVL326:
4166:../freertos/tasks.c **** 					{
 5161              		.loc 1 4166 6 is_stmt 1 view .LVU1411
4168:../freertos/tasks.c **** 					}
 5162              		.loc 1 4168 7 view .LVU1412
 5163 0dc6 A4BF     		itt	ge
 5164 0dc8 C1F10501 		rsbge	r1, r1, #5	@ tmp142, uxPriorityToUse,
 5165              	.LVL327:
4168:../freertos/tasks.c **** 					}
 5166              		.loc 1 4168 7 is_stmt 0 view .LVU1413
 5167 0dcc 8161     		strge	r1, [r0, #24]	@ tmp142, MEM[(struct TCB_t *)pxMutexHolder_25(D)].xEventListItem.xItemValue
ARM GAS  /tmp/ccaP1CVS.s 			page 211


4172:../freertos/tasks.c **** 					}
 5168              		.loc 1 4172 31 is_stmt 1 view .LVU1414
4181:../freertos/tasks.c **** 					{
 5169              		.loc 1 4181 6 view .LVU1415
 5170              	@ ../freertos/tasks.c:4181: 					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedO
4181:../freertos/tasks.c **** 					{
 5171              		.loc 1 4181 8 is_stmt 0 view .LVU1416
 5172 0dce 9A42     		cmp	r2, r3	@ MEM[(struct TCB_t *)pxMutexHolder_25(D)].xStateListItem.pvContainer, tmp147
 5173 0dd0 1DD1     		bne	.L350		@,
4183:../freertos/tasks.c **** 						{
 5174              		.loc 1 4183 7 is_stmt 1 view .LVU1417
 5175              	@ ../freertos/tasks.c:4183: 						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t )
4183:../freertos/tasks.c **** 						{
 5176              		.loc 1 4183 11 is_stmt 0 view .LVU1418
 5177 0dd2 00F10408 		add	r8, r0, #4	@ _9, pxMutexHolder,
 5178 0dd6 4046     		mov	r0, r8	@, _9
 5179              	.LVL328:
4183:../freertos/tasks.c **** 						{
 5180              		.loc 1 4183 11 view .LVU1419
 5181 0dd8 FFF7FEFF 		bl	uxListRemove		@
 5182              	.LVL329:
4183:../freertos/tasks.c **** 						{
 5183              		.loc 1 4183 11 view .LVU1420
 5184 0ddc E26A     		ldr	r2, [r4, #44]	@ _17, MEM[(struct TCB_t *)pxMutexHolder_25(D)].uxPriority
 5185              	@ ../freertos/tasks.c:4183: 						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t )
4183:../freertos/tasks.c **** 						{
 5186              		.loc 1 4183 9 view .LVU1421
 5187 0dde 48B9     		cbnz	r0, .L355	@ tmp174,
4185:../freertos/tasks.c **** 						}
 5188              		.loc 1 4185 8 is_stmt 1 view .LVU1422
 5189 0de0 06FB0256 		mla	r6, r6, r2, r5	@ tmp152, tmp146, _17, tmp143
 5190 0de4 B36C     		ldr	r3, [r6, #72]	@ _12, pxReadyTasksLists[_11].uxNumberOfItems
 5191 0de6 2BB9     		cbnz	r3, .L355	@ _12,
4185:../freertos/tasks.c **** 						}
 5192              		.loc 1 4185 8 discriminator 1 view .LVU1423
 5193 0de8 0121     		movs	r1, #1	@ tmp156,
 5194 0dea AB68     		ldr	r3, [r5, #8]	@ uxTopReadyPriority.107_15, uxTopReadyPriority
 5195 0dec 9140     		lsls	r1, r1, r2	@ tmp155, tmp156, _17
 5196 0dee 23EA0103 		bic	r3, r3, r1	@ _16, uxTopReadyPriority.107_15, tmp155
 5197 0df2 AB60     		str	r3, [r5, #8]	@ _16, uxTopReadyPriority
 5198              	.L355:
4189:../freertos/tasks.c **** 						}
 5199              		.loc 1 4189 32 view .LVU1424
4192:../freertos/tasks.c **** 					}
 5200              		.loc 1 4192 7 view .LVU1425
4192:../freertos/tasks.c **** 					}
 5201              		.loc 1 4192 7 view .LVU1426
 5202 0df4 0123     		movs	r3, #1	@ tmp161,
 5203 0df6 1420     		movs	r0, #20	@ tmp166,
 5204 0df8 A968     		ldr	r1, [r5, #8]	@ uxTopReadyPriority.108_19, uxTopReadyPriority
 5205 0dfa 9340     		lsls	r3, r3, r2	@ tmp160, tmp161, _17
 5206 0dfc 0B43     		orrs	r3, r3, r1	@, _20, tmp160, uxTopReadyPriority.108_19
 5207 0dfe 00FB0270 		mla	r0, r0, r2, r7	@, tmp166, _17, tmp144
 5208 0e02 4146     		mov	r1, r8	@, _9
 5209 0e04 AB60     		str	r3, [r5, #8]	@ _20, uxTopReadyPriority
4192:../freertos/tasks.c **** 					}
 5210              		.loc 1 4192 7 view .LVU1427
ARM GAS  /tmp/ccaP1CVS.s 			page 212


 5211              	@ ../freertos/tasks.c:4213: 	}
4213:../freertos/tasks.c **** 
 5212              		.loc 1 4213 2 is_stmt 0 view .LVU1428
 5213 0e06 BDE8F041 		pop	{r4, r5, r6, r7, r8, lr}	@
 5214              	.LCFI46:
 5215              		.cfi_remember_state
 5216              		.cfi_restore 14
 5217              		.cfi_restore 8
 5218              		.cfi_restore 7
 5219              		.cfi_restore 6
 5220              		.cfi_restore 5
 5221              		.cfi_restore 4
 5222              		.cfi_def_cfa_offset 0
 5223              	.LVL330:
 5224              	@ ../freertos/tasks.c:4192: 						prvAddTaskToReadyList( pxTCB );
4192:../freertos/tasks.c **** 					}
 5225              		.loc 1 4192 7 view .LVU1429
 5226 0e0a FFF7FEBF 		b	vListInsertEnd		@
 5227              	.LVL331:
 5228              	.L350:
 5229              	.LCFI47:
 5230              		.cfi_restore_state
 5231              	@ ../freertos/tasks.c:4213: 	}
4213:../freertos/tasks.c **** 
 5232              		.loc 1 4213 2 view .LVU1430
 5233 0e0e BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}	@
 5234              	.L357:
 5235 0e12 00BF     		.align	2
 5236              	.L356:
 5237 0e14 00000000 		.word	.LANCHOR0
 5238              		.cfi_endproc
 5239              	.LFE53:
 5240              		.size	vTaskPriorityDisinheritAfterTimeout, .-vTaskPriorityDisinheritAfterTimeout
 5241              		.align	1
 5242              		.global	uxTaskResetEventItemValue
 5243              		.syntax unified
 5244              		.thumb
 5245              		.thumb_func
 5246              		.type	uxTaskResetEventItemValue, %function
 5247              	uxTaskResetEventItemValue:
 5248              	.LFB54:
4534:../freertos/tasks.c **** TickType_t uxReturn;
 5249              		.loc 1 4534 1 is_stmt 1 view -0
 5250              		.cfi_startproc
 5251              		@ args = 0, pretend = 0, frame = 0
 5252              		@ frame_needed = 0, uses_anonymous_args = 0
 5253              		@ link register save eliminated.
4535:../freertos/tasks.c **** 
 5254              		.loc 1 4535 1 view .LVU1432
4537:../freertos/tasks.c **** 
 5255              		.loc 1 4537 2 view .LVU1433
 5256              	@ ../freertos/tasks.c:4537: 	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) 
4537:../freertos/tasks.c **** 
 5257              		.loc 1 4537 13 is_stmt 0 view .LVU1434
 5258 0e18 044B     		ldr	r3, .L359	@ tmp119,
 5259 0e1a 5A68     		ldr	r2, [r3, #4]	@ pxCurrentTCB.109_1, pxCurrentTCB
 5260              	@ ../freertos/tasks.c:4541: 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickTy
ARM GAS  /tmp/ccaP1CVS.s 			page 213


4541:../freertos/tasks.c **** 
 5261              		.loc 1 4541 2 view .LVU1435
 5262 0e1c 5968     		ldr	r1, [r3, #4]	@ pxCurrentTCB.110_2, pxCurrentTCB
 5263              	@ ../freertos/tasks.c:4537: 	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) 
4537:../freertos/tasks.c **** 
 5264              		.loc 1 4537 11 view .LVU1436
 5265 0e1e 9069     		ldr	r0, [r2, #24]	@ <retval>, pxCurrentTCB.109_1->xEventListItem.xItemValue
 5266              	.LVL332:
4541:../freertos/tasks.c **** 
 5267              		.loc 1 4541 2 is_stmt 1 view .LVU1437
 5268 0e20 5A68     		ldr	r2, [r3, #4]	@ pxCurrentTCB.111_4, pxCurrentTCB
 5269 0e22 CB6A     		ldr	r3, [r1, #44]	@ pxCurrentTCB.110_2->uxPriority, pxCurrentTCB.110_2->uxPriority
 5270 0e24 C3F10503 		rsb	r3, r3, #5	@ tmp122, pxCurrentTCB.110_2->uxPriority,
 5271 0e28 9361     		str	r3, [r2, #24]	@ tmp122, pxCurrentTCB.111_4->xEventListItem.xItemValue
4543:../freertos/tasks.c **** }
 5272              		.loc 1 4543 2 view .LVU1438
 5273              	@ ../freertos/tasks.c:4544: }
4544:../freertos/tasks.c **** /*-----------------------------------------------------------*/
 5274              		.loc 1 4544 1 is_stmt 0 view .LVU1439
 5275 0e2a 7047     		bx	lr	@
 5276              	.L360:
 5277              		.align	2
 5278              	.L359:
 5279 0e2c 00000000 		.word	.LANCHOR0
 5280              		.cfi_endproc
 5281              	.LFE54:
 5282              		.size	uxTaskResetEventItemValue, .-uxTaskResetEventItemValue
 5283              		.align	1
 5284              		.global	pvTaskIncrementMutexHeldCount
 5285              		.syntax unified
 5286              		.thumb
 5287              		.thumb_func
 5288              		.type	pvTaskIncrementMutexHeldCount, %function
 5289              	pvTaskIncrementMutexHeldCount:
 5290              	.LFB55:
4550:../freertos/tasks.c **** 		/* If xSemaphoreCreateMutex() is called before any tasks have been created
 5291              		.loc 1 4550 2 is_stmt 1 view -0
 5292              		.cfi_startproc
 5293              		@ args = 0, pretend = 0, frame = 0
 5294              		@ frame_needed = 0, uses_anonymous_args = 0
 5295              		@ link register save eliminated.
4553:../freertos/tasks.c **** 		{
 5296              		.loc 1 4553 3 view .LVU1441
 5297              	@ ../freertos/tasks.c:4553: 		if( pxCurrentTCB != NULL )
4553:../freertos/tasks.c **** 		{
 5298              		.loc 1 4553 20 is_stmt 0 view .LVU1442
 5299 0e30 044B     		ldr	r3, .L366	@ tmp118,
 5300 0e32 5A68     		ldr	r2, [r3, #4]	@ pxCurrentTCB.112_1, pxCurrentTCB
 5301              	@ ../freertos/tasks.c:4553: 		if( pxCurrentTCB != NULL )
4553:../freertos/tasks.c **** 		{
 5302              		.loc 1 4553 5 view .LVU1443
 5303 0e34 1AB1     		cbz	r2, .L362	@ pxCurrentTCB.112_1,
4555:../freertos/tasks.c **** 		}
 5304              		.loc 1 4555 4 is_stmt 1 view .LVU1444
 5305              	@ ../freertos/tasks.c:4555: 			( pxCurrentTCB->uxMutexesHeld )++;
4555:../freertos/tasks.c **** 		}
 5306              		.loc 1 4555 18 is_stmt 0 view .LVU1445
ARM GAS  /tmp/ccaP1CVS.s 			page 214


 5307 0e36 5968     		ldr	r1, [r3, #4]	@ pxCurrentTCB.113_2, pxCurrentTCB
 5308              	@ ../freertos/tasks.c:4555: 			( pxCurrentTCB->uxMutexesHeld )++;
4555:../freertos/tasks.c **** 		}
 5309              		.loc 1 4555 35 view .LVU1446
 5310 0e38 0A6D     		ldr	r2, [r1, #80]	@ pxCurrentTCB.113_2->uxMutexesHeld, pxCurrentTCB.113_2->uxMutexesHeld
 5311 0e3a 0132     		adds	r2, r2, #1	@ tmp120, pxCurrentTCB.113_2->uxMutexesHeld,
 5312 0e3c 0A65     		str	r2, [r1, #80]	@ tmp120, pxCurrentTCB.113_2->uxMutexesHeld
 5313              	.L362:
4558:../freertos/tasks.c **** 	}
 5314              		.loc 1 4558 3 is_stmt 1 view .LVU1447
 5315              	@ ../freertos/tasks.c:4558: 		return pxCurrentTCB;
4558:../freertos/tasks.c **** 	}
 5316              		.loc 1 4558 10 is_stmt 0 view .LVU1448
 5317 0e3e 5868     		ldr	r0, [r3, #4]	@ <retval>, pxCurrentTCB
 5318              	@ ../freertos/tasks.c:4559: 	}
4559:../freertos/tasks.c **** 
 5319              		.loc 1 4559 2 view .LVU1449
 5320 0e40 7047     		bx	lr	@
 5321              	.L367:
 5322 0e42 00BF     		.align	2
 5323              	.L366:
 5324 0e44 00000000 		.word	.LANCHOR0
 5325              		.cfi_endproc
 5326              	.LFE55:
 5327              		.size	pvTaskIncrementMutexHeldCount, .-pvTaskIncrementMutexHeldCount
 5328              		.align	1
 5329              		.global	ulTaskNotifyTake
 5330              		.syntax unified
 5331              		.thumb
 5332              		.thumb_func
 5333              		.type	ulTaskNotifyTake, %function
 5334              	ulTaskNotifyTake:
 5335              	.LVL333:
 5336              	.LFB56:
4567:../freertos/tasks.c **** 	uint32_t ulReturn;
 5337              		.loc 1 4567 2 is_stmt 1 view -0
 5338              		.cfi_startproc
 5339              		@ args = 0, pretend = 0, frame = 0
 5340              		@ frame_needed = 0, uses_anonymous_args = 0
4568:../freertos/tasks.c **** 
 5341              		.loc 1 4568 2 view .LVU1451
4570:../freertos/tasks.c **** 		{
 5342              		.loc 1 4570 3 view .LVU1452
 5343              	@ ../freertos/tasks.c:4567: 	{
4567:../freertos/tasks.c **** 	uint32_t ulReturn;
 5344              		.loc 1 4567 2 is_stmt 0 view .LVU1453
 5345 0e48 70B5     		push	{r4, r5, r6, lr}	@
 5346              	.LCFI48:
 5347              		.cfi_def_cfa_offset 16
 5348              		.cfi_offset 4, -16
 5349              		.cfi_offset 5, -12
 5350              		.cfi_offset 6, -8
 5351              		.cfi_offset 14, -4
 5352              	@ ../freertos/tasks.c:4573: 			if( pxCurrentTCB->ulNotifiedValue == 0UL )
4573:../freertos/tasks.c **** 			{
 5353              		.loc 1 4573 20 view .LVU1454
 5354 0e4a 174C     		ldr	r4, .L381	@ tmp124,
ARM GAS  /tmp/ccaP1CVS.s 			page 215


 5355              	@ ../freertos/tasks.c:4567: 	{
4567:../freertos/tasks.c **** 	uint32_t ulReturn;
 5356              		.loc 1 4567 2 view .LVU1455
 5357 0e4c 0646     		mov	r6, r0	@ xClearCountOnExit, tmp139
 5358 0e4e 0D46     		mov	r5, r1	@ xTicksToWait, tmp140
 5359              	@ ../freertos/tasks.c:4570: 		taskENTER_CRITICAL();
4570:../freertos/tasks.c **** 		{
 5360              		.loc 1 4570 3 view .LVU1456
 5361 0e50 FFF7FEFF 		bl	vPortEnterCritical		@
 5362              	.LVL334:
4573:../freertos/tasks.c **** 			{
 5363              		.loc 1 4573 4 is_stmt 1 view .LVU1457
 5364              	@ ../freertos/tasks.c:4573: 			if( pxCurrentTCB->ulNotifiedValue == 0UL )
4573:../freertos/tasks.c **** 			{
 5365              		.loc 1 4573 20 is_stmt 0 view .LVU1458
 5366 0e54 6368     		ldr	r3, [r4, #4]	@ pxCurrentTCB.114_1, pxCurrentTCB
 5367 0e56 5B6D     		ldr	r3, [r3, #84]	@ _2, pxCurrentTCB.114_1->ulNotifiedValue
 5368              	@ ../freertos/tasks.c:4573: 			if( pxCurrentTCB->ulNotifiedValue == 0UL )
4573:../freertos/tasks.c **** 			{
 5369              		.loc 1 4573 6 view .LVU1459
 5370 0e58 8BB9     		cbnz	r3, .L370	@ _2,
4576:../freertos/tasks.c **** 
 5371              		.loc 1 4576 5 is_stmt 1 view .LVU1460
 5372              	@ ../freertos/tasks.c:4576: 				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
4576:../freertos/tasks.c **** 
 5373              		.loc 1 4576 33 is_stmt 0 view .LVU1461
 5374 0e5a 0121     		movs	r1, #1	@ tmp126,
 5375              	@ ../freertos/tasks.c:4576: 				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
4576:../freertos/tasks.c **** 
 5376              		.loc 1 4576 17 view .LVU1462
 5377 0e5c 6368     		ldr	r3, [r4, #4]	@ pxCurrentTCB.115_3, pxCurrentTCB
 5378              	@ ../freertos/tasks.c:4576: 				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
4576:../freertos/tasks.c **** 
 5379              		.loc 1 4576 33 view .LVU1463
 5380 0e5e 83F85810 		strb	r1, [r3, #88]	@ tmp126, pxCurrentTCB.115_3->ucNotifyState
4578:../freertos/tasks.c **** 				{
 5381              		.loc 1 4578 5 is_stmt 1 view .LVU1464
 5382              	@ ../freertos/tasks.c:4578: 				if( xTicksToWait > ( TickType_t ) 0 )
4578:../freertos/tasks.c **** 				{
 5383              		.loc 1 4578 7 is_stmt 0 view .LVU1465
 5384 0e62 65B1     		cbz	r5, .L370	@ xTicksToWait,
4580:../freertos/tasks.c **** 					traceTASK_NOTIFY_TAKE_BLOCK();
 5385              		.loc 1 4580 6 is_stmt 1 view .LVU1466
 5386 0e64 2846     		mov	r0, r5	@, xTicksToWait
 5387 0e66 FFF7CBF8 		bl	prvAddCurrentTaskToDelayedList		@
 5388              	.LVL335:
4581:../freertos/tasks.c **** 
 5389              		.loc 1 4581 35 view .LVU1467
4587:../freertos/tasks.c **** 				}
 5390              		.loc 1 4587 6 view .LVU1468
 5391 0e6a 4FF0E023 		mov	r3, #-536813568	@ tmp128,
 5392 0e6e 4FF08052 		mov	r2, #268435456	@ tmp129,
 5393 0e72 C3F8042D 		str	r2, [r3, #3332]	@ tmp129, MEM[(volatile uint32_t *)3758157060B]
4587:../freertos/tasks.c **** 				}
 5394              		.loc 1 4587 6 view .LVU1469
 5395              		.syntax unified
 5396              	@ 4587 "../freertos/tasks.c" 1
ARM GAS  /tmp/ccaP1CVS.s 			page 216


 5397 0e76 BFF34F8F 		dsb	
 5398              	@ 0 "" 2
4587:../freertos/tasks.c **** 				}
 5399              		.loc 1 4587 6 view .LVU1470
 5400              	@ 4587 "../freertos/tasks.c" 1
 5401 0e7a BFF36F8F 		isb
 5402              	@ 0 "" 2
4587:../freertos/tasks.c **** 				}
 5403              		.loc 1 4587 28 view .LVU1471
 5404              		.thumb
 5405              		.syntax unified
 5406              	.L370:
4596:../freertos/tasks.c **** 			}
 5407              		.loc 1 4596 29 view .LVU1472
4599:../freertos/tasks.c **** 
 5408              		.loc 1 4599 3 view .LVU1473
 5409 0e7e FFF7FEFF 		bl	vPortExitCritical		@
 5410              	.LVL336:
4601:../freertos/tasks.c **** 		{
 5411              		.loc 1 4601 3 view .LVU1474
 5412 0e82 FFF7FEFF 		bl	vPortEnterCritical		@
 5413              	.LVL337:
4603:../freertos/tasks.c **** 			ulReturn = pxCurrentTCB->ulNotifiedValue;
 5414              		.loc 1 4603 27 view .LVU1475
4604:../freertos/tasks.c **** 
 5415              		.loc 1 4604 4 view .LVU1476
 5416              	@ ../freertos/tasks.c:4604: 			ulReturn = pxCurrentTCB->ulNotifiedValue;
4604:../freertos/tasks.c **** 
 5417              		.loc 1 4604 27 is_stmt 0 view .LVU1477
 5418 0e86 6368     		ldr	r3, [r4, #4]	@ pxCurrentTCB.116_4, pxCurrentTCB
 5419              	@ ../freertos/tasks.c:4604: 			ulReturn = pxCurrentTCB->ulNotifiedValue;
4604:../freertos/tasks.c **** 
 5420              		.loc 1 4604 13 view .LVU1478
 5421 0e88 5D6D     		ldr	r5, [r3, #84]	@ <retval>, pxCurrentTCB.116_4->ulNotifiedValue
 5422              	.LVL338:
4606:../freertos/tasks.c **** 			{
 5423              		.loc 1 4606 4 is_stmt 1 view .LVU1479
 5424              	@ ../freertos/tasks.c:4606: 			if( ulReturn != 0UL )
4606:../freertos/tasks.c **** 			{
 5425              		.loc 1 4606 6 is_stmt 0 view .LVU1480
 5426 0e8a 1DB1     		cbz	r5, .L372	@ <retval>,
4608:../freertos/tasks.c **** 				{
 5427              		.loc 1 4608 5 is_stmt 1 view .LVU1481
 5428              	@ ../freertos/tasks.c:4610: 					pxCurrentTCB->ulNotifiedValue = 0UL;
4610:../freertos/tasks.c **** 				}
 5429              		.loc 1 4610 18 is_stmt 0 view .LVU1482
 5430 0e8c 6368     		ldr	r3, [r4, #4]	@ pxCurrentTCB.117_5, pxCurrentTCB
 5431              	@ ../freertos/tasks.c:4608: 				if( xClearCountOnExit != pdFALSE )
4608:../freertos/tasks.c **** 				{
 5432              		.loc 1 4608 7 view .LVU1483
 5433 0e8e 4EB1     		cbz	r6, .L373	@ xClearCountOnExit,
4610:../freertos/tasks.c **** 				}
 5434              		.loc 1 4610 6 is_stmt 1 view .LVU1484
 5435              	@ ../freertos/tasks.c:4610: 					pxCurrentTCB->ulNotifiedValue = 0UL;
4610:../freertos/tasks.c **** 				}
 5436              		.loc 1 4610 36 is_stmt 0 view .LVU1485
 5437 0e90 0022     		movs	r2, #0	@ tmp132,
ARM GAS  /tmp/ccaP1CVS.s 			page 217


 5438              	.L380:
 5439              	@ ../freertos/tasks.c:4614: 					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
4614:../freertos/tasks.c **** 				}
 5440              		.loc 1 4614 36 view .LVU1486
 5441 0e92 5A65     		str	r2, [r3, #84]	@ _7,
 5442              	.L372:
4619:../freertos/tasks.c **** 			}
 5443              		.loc 1 4619 29 is_stmt 1 view .LVU1487
4622:../freertos/tasks.c **** 		}
 5444              		.loc 1 4622 4 view .LVU1488
 5445              	@ ../freertos/tasks.c:4622: 			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
4622:../freertos/tasks.c **** 		}
 5446              		.loc 1 4622 32 is_stmt 0 view .LVU1489
 5447 0e94 0022     		movs	r2, #0	@ tmp135,
 5448              	@ ../freertos/tasks.c:4622: 			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
4622:../freertos/tasks.c **** 		}
 5449              		.loc 1 4622 16 view .LVU1490
 5450 0e96 6368     		ldr	r3, [r4, #4]	@ pxCurrentTCB.119_8, pxCurrentTCB
 5451              	@ ../freertos/tasks.c:4622: 			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
4622:../freertos/tasks.c **** 		}
 5452              		.loc 1 4622 32 view .LVU1491
 5453 0e98 83F85820 		strb	r2, [r3, #88]	@ tmp135, pxCurrentTCB.119_8->ucNotifyState
4624:../freertos/tasks.c **** 
 5454              		.loc 1 4624 3 is_stmt 1 view .LVU1492
 5455 0e9c FFF7FEFF 		bl	vPortExitCritical		@
 5456              	.LVL339:
4626:../freertos/tasks.c **** 	}
 5457              		.loc 1 4626 3 view .LVU1493
 5458              	@ ../freertos/tasks.c:4627: 	}
4627:../freertos/tasks.c **** 
 5459              		.loc 1 4627 2 is_stmt 0 view .LVU1494
 5460 0ea0 2846     		mov	r0, r5	@, <retval>
 5461 0ea2 70BD     		pop	{r4, r5, r6, pc}	@
 5462              	.LVL340:
 5463              	.L373:
4614:../freertos/tasks.c **** 				}
 5464              		.loc 1 4614 6 is_stmt 1 view .LVU1495
 5465              	@ ../freertos/tasks.c:4614: 					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
4614:../freertos/tasks.c **** 				}
 5466              		.loc 1 4614 47 is_stmt 0 view .LVU1496
 5467 0ea4 6A1E     		subs	r2, r5, #1	@ _7, <retval>,
 5468 0ea6 F4E7     		b	.L380		@
 5469              	.L382:
 5470              		.align	2
 5471              	.L381:
 5472 0ea8 00000000 		.word	.LANCHOR0
 5473              		.cfi_endproc
 5474              	.LFE56:
 5475              		.size	ulTaskNotifyTake, .-ulTaskNotifyTake
 5476              		.align	1
 5477              		.global	xTaskNotifyWait
 5478              		.syntax unified
 5479              		.thumb
 5480              		.thumb_func
 5481              		.type	xTaskNotifyWait, %function
 5482              	xTaskNotifyWait:
 5483              	.LVL341:
ARM GAS  /tmp/ccaP1CVS.s 			page 218


 5484              	.LFB57:
4635:../freertos/tasks.c **** 	BaseType_t xReturn;
 5485              		.loc 1 4635 2 is_stmt 1 view -0
 5486              		.cfi_startproc
 5487              		@ args = 0, pretend = 0, frame = 0
 5488              		@ frame_needed = 0, uses_anonymous_args = 0
4636:../freertos/tasks.c **** 
 5489              		.loc 1 4636 2 view .LVU1498
4638:../freertos/tasks.c **** 		{
 5490              		.loc 1 4638 3 view .LVU1499
 5491              	@ ../freertos/tasks.c:4635: 	{
4635:../freertos/tasks.c **** 	BaseType_t xReturn;
 5492              		.loc 1 4635 2 is_stmt 0 view .LVU1500
 5493 0eac 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}	@
 5494              	.LCFI49:
 5495              		.cfi_def_cfa_offset 24
 5496              		.cfi_offset 4, -24
 5497              		.cfi_offset 5, -20
 5498              		.cfi_offset 6, -16
 5499              		.cfi_offset 7, -12
 5500              		.cfi_offset 8, -8
 5501              		.cfi_offset 14, -4
 5502              	@ ../freertos/tasks.c:4641: 			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
4641:../freertos/tasks.c **** 			{
 5503              		.loc 1 4641 20 view .LVU1501
 5504 0eb0 1F4C     		ldr	r4, .L396	@ tmp134,
 5505              	@ ../freertos/tasks.c:4635: 	{
4635:../freertos/tasks.c **** 	BaseType_t xReturn;
 5506              		.loc 1 4635 2 view .LVU1502
 5507 0eb2 1E46     		mov	r6, r3	@ xTicksToWait, tmp160
 5508 0eb4 8046     		mov	r8, r0	@ ulBitsToClearOnEntry, tmp157
 5509 0eb6 0F46     		mov	r7, r1	@ ulBitsToClearOnExit, tmp158
 5510 0eb8 1546     		mov	r5, r2	@ pulNotificationValue, tmp159
 5511              	@ ../freertos/tasks.c:4638: 		taskENTER_CRITICAL();
4638:../freertos/tasks.c **** 		{
 5512              		.loc 1 4638 3 view .LVU1503
 5513 0eba FFF7FEFF 		bl	vPortEnterCritical		@
 5514              	.LVL342:
4641:../freertos/tasks.c **** 			{
 5515              		.loc 1 4641 4 is_stmt 1 view .LVU1504
 5516              	@ ../freertos/tasks.c:4641: 			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
4641:../freertos/tasks.c **** 			{
 5517              		.loc 1 4641 20 is_stmt 0 view .LVU1505
 5518 0ebe 6368     		ldr	r3, [r4, #4]	@ pxCurrentTCB.120_1, pxCurrentTCB
 5519 0ec0 93F85830 		ldrb	r3, [r3, #88]	@ zero_extendqisi2	@ pxCurrentTCB.120_1->ucNotifyState, pxCurrentTCB.120_1->ucN
 5520              	@ ../freertos/tasks.c:4641: 			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
4641:../freertos/tasks.c **** 			{
 5521              		.loc 1 4641 6 view .LVU1506
 5522 0ec4 022B     		cmp	r3, #2	@ pxCurrentTCB.120_1->ucNotifyState,
 5523 0ec6 16D0     		beq	.L385		@,
4646:../freertos/tasks.c **** 
 5524              		.loc 1 4646 5 is_stmt 1 view .LVU1507
 5525              	@ ../freertos/tasks.c:4649: 				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
4649:../freertos/tasks.c **** 
 5526              		.loc 1 4649 33 is_stmt 0 view .LVU1508
 5527 0ec8 0121     		movs	r1, #1	@ tmp141,
 5528              	@ ../freertos/tasks.c:4646: 				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
ARM GAS  /tmp/ccaP1CVS.s 			page 219


4646:../freertos/tasks.c **** 
 5529              		.loc 1 4646 35 view .LVU1509
 5530 0eca 6268     		ldr	r2, [r4, #4]	@ pxCurrentTCB.121_21, pxCurrentTCB
 5531 0ecc 536D     		ldr	r3, [r2, #84]	@ _3, pxCurrentTCB.121_21->ulNotifiedValue
 5532 0ece 23EA0803 		bic	r3, r3, r8	@ _5, _3, ulBitsToClearOnEntry
 5533 0ed2 5365     		str	r3, [r2, #84]	@ _5, pxCurrentTCB.121_21->ulNotifiedValue
4649:../freertos/tasks.c **** 
 5534              		.loc 1 4649 5 is_stmt 1 view .LVU1510
 5535              	@ ../freertos/tasks.c:4649: 				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
4649:../freertos/tasks.c **** 
 5536              		.loc 1 4649 17 is_stmt 0 view .LVU1511
 5537 0ed4 6368     		ldr	r3, [r4, #4]	@ pxCurrentTCB.122_6, pxCurrentTCB
 5538              	@ ../freertos/tasks.c:4649: 				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
4649:../freertos/tasks.c **** 
 5539              		.loc 1 4649 33 view .LVU1512
 5540 0ed6 83F85810 		strb	r1, [r3, #88]	@ tmp141, pxCurrentTCB.122_6->ucNotifyState
4651:../freertos/tasks.c **** 				{
 5541              		.loc 1 4651 5 is_stmt 1 view .LVU1513
 5542              	@ ../freertos/tasks.c:4651: 				if( xTicksToWait > ( TickType_t ) 0 )
4651:../freertos/tasks.c **** 				{
 5543              		.loc 1 4651 7 is_stmt 0 view .LVU1514
 5544 0eda 66B1     		cbz	r6, .L385	@ xTicksToWait,
4653:../freertos/tasks.c **** 					traceTASK_NOTIFY_WAIT_BLOCK();
 5545              		.loc 1 4653 6 is_stmt 1 view .LVU1515
 5546 0edc 3046     		mov	r0, r6	@, xTicksToWait
 5547 0ede FFF78FF8 		bl	prvAddCurrentTaskToDelayedList		@
 5548              	.LVL343:
4654:../freertos/tasks.c **** 
 5549              		.loc 1 4654 35 view .LVU1516
4660:../freertos/tasks.c **** 				}
 5550              		.loc 1 4660 6 view .LVU1517
 5551 0ee2 4FF0E023 		mov	r3, #-536813568	@ tmp143,
 5552 0ee6 4FF08052 		mov	r2, #268435456	@ tmp144,
 5553 0eea C3F8042D 		str	r2, [r3, #3332]	@ tmp144, MEM[(volatile uint32_t *)3758157060B]
4660:../freertos/tasks.c **** 				}
 5554              		.loc 1 4660 6 view .LVU1518
 5555              		.syntax unified
 5556              	@ 4660 "../freertos/tasks.c" 1
 5557 0eee BFF34F8F 		dsb	
 5558              	@ 0 "" 2
4660:../freertos/tasks.c **** 				}
 5559              		.loc 1 4660 6 view .LVU1519
 5560              	@ 4660 "../freertos/tasks.c" 1
 5561 0ef2 BFF36F8F 		isb
 5562              	@ 0 "" 2
4660:../freertos/tasks.c **** 				}
 5563              		.loc 1 4660 28 view .LVU1520
 5564              		.thumb
 5565              		.syntax unified
 5566              	.L385:
4669:../freertos/tasks.c **** 			}
 5567              		.loc 1 4669 29 view .LVU1521
4672:../freertos/tasks.c **** 
 5568              		.loc 1 4672 3 view .LVU1522
 5569 0ef6 FFF7FEFF 		bl	vPortExitCritical		@
 5570              	.LVL344:
4674:../freertos/tasks.c **** 		{
ARM GAS  /tmp/ccaP1CVS.s 			page 220


 5571              		.loc 1 4674 3 view .LVU1523
 5572 0efa FFF7FEFF 		bl	vPortEnterCritical		@
 5573              	.LVL345:
4676:../freertos/tasks.c **** 
 5574              		.loc 1 4676 27 view .LVU1524
4678:../freertos/tasks.c **** 			{
 5575              		.loc 1 4678 4 view .LVU1525
 5576              	@ ../freertos/tasks.c:4678: 			if( pulNotificationValue != NULL )
4678:../freertos/tasks.c **** 			{
 5577              		.loc 1 4678 6 is_stmt 0 view .LVU1526
 5578 0efe 15B1     		cbz	r5, .L387	@ pulNotificationValue,
4682:../freertos/tasks.c **** 			}
 5579              		.loc 1 4682 5 is_stmt 1 view .LVU1527
 5580              	@ ../freertos/tasks.c:4682: 				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
4682:../freertos/tasks.c **** 			}
 5581              		.loc 1 4682 41 is_stmt 0 view .LVU1528
 5582 0f00 6368     		ldr	r3, [r4, #4]	@ pxCurrentTCB.123_7, pxCurrentTCB
 5583 0f02 5B6D     		ldr	r3, [r3, #84]	@ _8, pxCurrentTCB.123_7->ulNotifiedValue
 5584              	@ ../freertos/tasks.c:4682: 				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
4682:../freertos/tasks.c **** 			}
 5585              		.loc 1 4682 27 view .LVU1529
 5586 0f04 2B60     		str	r3, [r5]	@ _8, *pulNotificationValue_32(D)
 5587              	.L387:
4689:../freertos/tasks.c **** 			{
 5588              		.loc 1 4689 4 is_stmt 1 view .LVU1530
 5589              	@ ../freertos/tasks.c:4689: 			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
4689:../freertos/tasks.c **** 			{
 5590              		.loc 1 4689 20 is_stmt 0 view .LVU1531
 5591 0f06 6368     		ldr	r3, [r4, #4]	@ pxCurrentTCB.124_9, pxCurrentTCB
 5592 0f08 93F85830 		ldrb	r3, [r3, #88]	@ zero_extendqisi2	@ pxCurrentTCB.124_9->ucNotifyState, pxCurrentTCB.124_9->ucN
 5593              	@ ../freertos/tasks.c:4689: 			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
4689:../freertos/tasks.c **** 			{
 5594              		.loc 1 4689 6 view .LVU1532
 5595 0f0c 022B     		cmp	r3, #2	@ pxCurrentTCB.124_9->ucNotifyState,
4698:../freertos/tasks.c **** 				xReturn = pdTRUE;
 5596              		.loc 1 4698 5 is_stmt 1 view .LVU1533
 5597              	@ ../freertos/tasks.c:4698: 				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
4698:../freertos/tasks.c **** 				xReturn = pdTRUE;
 5598              		.loc 1 4698 35 is_stmt 0 view .LVU1534
 5599 0f0e 03BF     		ittte	eq
 5600 0f10 6268     		ldreq	r2, [r4, #4]	@ pxCurrentTCB.125_34, pxCurrentTCB
 5601              	@ ../freertos/tasks.c:4699: 				xReturn = pdTRUE;
4699:../freertos/tasks.c **** 			}
 5602              		.loc 1 4699 13 view .LVU1535
 5603 0f12 0125     		moveq	r5, #1	@ <retval>,
 5604              	.LVL346:
 5605              	@ ../freertos/tasks.c:4698: 				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
4698:../freertos/tasks.c **** 				xReturn = pdTRUE;
 5606              		.loc 1 4698 35 view .LVU1536
 5607 0f14 536D     		ldreq	r3, [r2, #84]	@ _11, pxCurrentTCB.125_34->ulNotifiedValue
 5608              	@ ../freertos/tasks.c:4692: 				xReturn = pdFALSE;
4692:../freertos/tasks.c **** 			}
 5609              		.loc 1 4692 13 view .LVU1537
 5610 0f16 0025     		movne	r5, #0	@ <retval>,
 5611              	@ ../freertos/tasks.c:4698: 				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
4698:../freertos/tasks.c **** 				xReturn = pdTRUE;
 5612              		.loc 1 4698 35 view .LVU1538
ARM GAS  /tmp/ccaP1CVS.s 			page 221


 5613 0f18 04BF     		itt	eq
 5614 0f1a BB43     		biceq	r3, r3, r7	@ _13, _11, ulBitsToClearOnExit
 5615 0f1c 5365     		streq	r3, [r2, #84]	@ _13, pxCurrentTCB.125_34->ulNotifiedValue
4699:../freertos/tasks.c **** 			}
 5616              		.loc 1 4699 5 is_stmt 1 view .LVU1539
 5617              	.LVL347:
4702:../freertos/tasks.c **** 		}
 5618              		.loc 1 4702 4 view .LVU1540
 5619              	@ ../freertos/tasks.c:4702: 			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
4702:../freertos/tasks.c **** 		}
 5620              		.loc 1 4702 32 is_stmt 0 view .LVU1541
 5621 0f1e 0022     		movs	r2, #0	@ tmp153,
 5622              	@ ../freertos/tasks.c:4702: 			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
4702:../freertos/tasks.c **** 		}
 5623              		.loc 1 4702 16 view .LVU1542
 5624 0f20 6368     		ldr	r3, [r4, #4]	@ pxCurrentTCB.126_14, pxCurrentTCB
 5625              	@ ../freertos/tasks.c:4702: 			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
4702:../freertos/tasks.c **** 		}
 5626              		.loc 1 4702 32 view .LVU1543
 5627 0f22 83F85820 		strb	r2, [r3, #88]	@ tmp153, pxCurrentTCB.126_14->ucNotifyState
4704:../freertos/tasks.c **** 
 5628              		.loc 1 4704 3 is_stmt 1 view .LVU1544
 5629 0f26 FFF7FEFF 		bl	vPortExitCritical		@
 5630              	.LVL348:
4706:../freertos/tasks.c **** 	}
 5631              		.loc 1 4706 3 view .LVU1545
 5632              	@ ../freertos/tasks.c:4707: 	}
4707:../freertos/tasks.c **** 
 5633              		.loc 1 4707 2 is_stmt 0 view .LVU1546
 5634 0f2a 2846     		mov	r0, r5	@, <retval>
 5635 0f2c BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}	@
 5636              	.LVL349:
 5637              	.L397:
4707:../freertos/tasks.c **** 
 5638              		.loc 1 4707 2 view .LVU1547
 5639              		.align	2
 5640              	.L396:
 5641 0f30 00000000 		.word	.LANCHOR0
 5642              		.cfi_endproc
 5643              	.LFE57:
 5644              		.size	xTaskNotifyWait, .-xTaskNotifyWait
 5645              		.align	1
 5646              		.global	xTaskGenericNotify
 5647              		.syntax unified
 5648              		.thumb
 5649              		.thumb_func
 5650              		.type	xTaskGenericNotify, %function
 5651              	xTaskGenericNotify:
 5652              	.LVL350:
 5653              	.LFB58:
4715:../freertos/tasks.c **** 	TCB_t * pxTCB;
 5654              		.loc 1 4715 2 is_stmt 1 view -0
 5655              		.cfi_startproc
 5656              		@ args = 0, pretend = 0, frame = 0
 5657              		@ frame_needed = 0, uses_anonymous_args = 0
4716:../freertos/tasks.c **** 	BaseType_t xReturn = pdPASS;
 5658              		.loc 1 4716 2 view .LVU1549
ARM GAS  /tmp/ccaP1CVS.s 			page 222


4717:../freertos/tasks.c **** 	uint8_t ucOriginalNotifyState;
 5659              		.loc 1 4717 2 view .LVU1550
4718:../freertos/tasks.c **** 
 5660              		.loc 1 4718 2 view .LVU1551
4720:../freertos/tasks.c **** 		pxTCB = xTaskToNotify;
 5661              		.loc 1 4720 32 view .LVU1552
4721:../freertos/tasks.c **** 
 5662              		.loc 1 4721 3 view .LVU1553
 5663              	@ ../freertos/tasks.c:4715: 	{
4715:../freertos/tasks.c **** 	TCB_t * pxTCB;
 5664              		.loc 1 4715 2 is_stmt 0 view .LVU1554
 5665 0f34 F8B5     		push	{r3, r4, r5, r6, r7, lr}	@
 5666              	.LCFI50:
 5667              		.cfi_def_cfa_offset 24
 5668              		.cfi_offset 3, -24
 5669              		.cfi_offset 4, -20
 5670              		.cfi_offset 5, -16
 5671              		.cfi_offset 6, -12
 5672              		.cfi_offset 7, -8
 5673              		.cfi_offset 14, -4
 5674              	@ ../freertos/tasks.c:4715: 	{
4715:../freertos/tasks.c **** 	TCB_t * pxTCB;
 5675              		.loc 1 4715 2 view .LVU1555
 5676 0f36 1D46     		mov	r5, r3	@ pulPreviousNotificationValue, tmp158
 5677 0f38 0446     		mov	r4, r0	@ xTaskToNotify, tmp155
 5678              	.LVL351:
4723:../freertos/tasks.c **** 		{
 5679              		.loc 1 4723 3 is_stmt 1 view .LVU1556
 5680              	@ ../freertos/tasks.c:4715: 	{
4715:../freertos/tasks.c **** 	TCB_t * pxTCB;
 5681              		.loc 1 4715 2 is_stmt 0 view .LVU1557
 5682 0f3a 0F46     		mov	r7, r1	@ ulValue, tmp156
 5683 0f3c 1646     		mov	r6, r2	@ eAction, tmp157
 5684              	@ ../freertos/tasks.c:4723: 		taskENTER_CRITICAL();
4723:../freertos/tasks.c **** 		{
 5685              		.loc 1 4723 3 view .LVU1558
 5686 0f3e FFF7FEFF 		bl	vPortEnterCritical		@
 5687              	.LVL352:
4725:../freertos/tasks.c **** 			{
 5688              		.loc 1 4725 4 is_stmt 1 view .LVU1559
 5689              	@ ../freertos/tasks.c:4725: 			if( pulPreviousNotificationValue != NULL )
4725:../freertos/tasks.c **** 			{
 5690              		.loc 1 4725 6 is_stmt 0 view .LVU1560
 5691 0f42 0DB1     		cbz	r5, .L399	@ pulPreviousNotificationValue,
4727:../freertos/tasks.c **** 			}
 5692              		.loc 1 4727 5 is_stmt 1 view .LVU1561
 5693              	@ ../freertos/tasks.c:4727: 				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
4727:../freertos/tasks.c **** 			}
 5694              		.loc 1 4727 42 is_stmt 0 view .LVU1562
 5695 0f44 636D     		ldr	r3, [r4, #84]	@ _1, MEM[(struct TCB_t *)xTaskToNotify_19(D)].ulNotifiedValue
 5696              	@ ../freertos/tasks.c:4727: 				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
4727:../freertos/tasks.c **** 			}
 5697              		.loc 1 4727 35 view .LVU1563
 5698 0f46 2B60     		str	r3, [r5]	@ _1, *pulPreviousNotificationValue_22(D)
 5699              	.L399:
4730:../freertos/tasks.c **** 
 5700              		.loc 1 4730 4 is_stmt 1 view .LVU1564
ARM GAS  /tmp/ccaP1CVS.s 			page 223


 5701              	@ ../freertos/tasks.c:4732: 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
4732:../freertos/tasks.c **** 
 5702              		.loc 1 4732 25 is_stmt 0 view .LVU1565
 5703 0f48 0223     		movs	r3, #2	@ tmp137,
 5704              	@ ../freertos/tasks.c:4730: 			ucOriginalNotifyState = pxTCB->ucNotifyState;
4730:../freertos/tasks.c **** 
 5705              		.loc 1 4730 26 view .LVU1566
 5706 0f4a 94F85850 		ldrb	r5, [r4, #88]	@ zero_extendqisi2	@ MEM[(struct TCB_t *)xTaskToNotify_19(D)].ucNotifyState, ME
 5707              	.LVL353:
 5708              	@ ../freertos/tasks.c:4734: 			switch( eAction )
4734:../freertos/tasks.c **** 			{
 5709              		.loc 1 4734 4 view .LVU1567
 5710 0f4e 721E     		subs	r2, r6, #1	@ tmp139, eAction,
 5711              	@ ../freertos/tasks.c:4730: 			ucOriginalNotifyState = pxTCB->ucNotifyState;
4730:../freertos/tasks.c **** 
 5712              		.loc 1 4730 26 view .LVU1568
 5713 0f50 EDB2     		uxtb	r5, r5	@ ucOriginalNotifyState, MEM[(struct TCB_t *)xTaskToNotify_19(D)].ucNotifyState
 5714              	.LVL354:
4732:../freertos/tasks.c **** 
 5715              		.loc 1 4732 4 is_stmt 1 view .LVU1569
 5716              	@ ../freertos/tasks.c:4732: 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
4732:../freertos/tasks.c **** 
 5717              		.loc 1 4732 25 is_stmt 0 view .LVU1570
 5718 0f52 84F85830 		strb	r3, [r4, #88]	@ tmp137, MEM[(struct TCB_t *)xTaskToNotify_19(D)].ucNotifyState
4734:../freertos/tasks.c **** 			{
 5719              		.loc 1 4734 4 is_stmt 1 view .LVU1571
 5720 0f56 032A     		cmp	r2, #3	@ tmp139,
 5721 0f58 0AD8     		bhi	.L400		@
 5722 0f5a DFE802F0 		tbb	[pc, r2]	@ tmp139
 5723              	.L402:
 5724 0f5e 02       		.byte	(.L405-.L402)/2
 5725 0f5f 06       		.byte	(.L404-.L402)/2
 5726 0f60 04       		.byte	(.L413-.L402)/2
 5727 0f61 10       		.byte	(.L401-.L402)/2
 5728              		.p2align 1
 5729              	.L405:
4737:../freertos/tasks.c **** 					break;
 5730              		.loc 1 4737 6 view .LVU1572
 5731              	@ ../freertos/tasks.c:4737: 					pxTCB->ulNotifiedValue |= ulValue;
4737:../freertos/tasks.c **** 					break;
 5732              		.loc 1 4737 29 is_stmt 0 view .LVU1573
 5733 0f62 616D     		ldr	r1, [r4, #84]	@ _2, MEM[(struct TCB_t *)xTaskToNotify_19(D)].ulNotifiedValue
 5734 0f64 0F43     		orrs	r7, r7, r1	@, _3, ulValue, _2
 5735              	.LVL355:
 5736              	.L413:
4751:../freertos/tasks.c **** 					}
 5737              		.loc 1 4751 7 is_stmt 1 view .LVU1574
 5738              	@ ../freertos/tasks.c:4751: 						pxTCB->ulNotifiedValue = ulValue;
4751:../freertos/tasks.c **** 					}
 5739              		.loc 1 4751 30 is_stmt 0 view .LVU1575
 5740 0f66 6765     		str	r7, [r4, #84]	@ ulValue,
 5741 0f68 02E0     		b	.L400		@
 5742              	.LVL356:
 5743              	.L404:
4741:../freertos/tasks.c **** 					break;
 5744              		.loc 1 4741 6 is_stmt 1 view .LVU1576
 5745              	@ ../freertos/tasks.c:4741: 					( pxTCB->ulNotifiedValue )++;
ARM GAS  /tmp/ccaP1CVS.s 			page 224


4741:../freertos/tasks.c **** 					break;
 5746              		.loc 1 4741 13 is_stmt 0 view .LVU1577
 5747 0f6a 636D     		ldr	r3, [r4, #84]	@ _4, MEM[(struct TCB_t *)xTaskToNotify_19(D)].ulNotifiedValue
 5748              	@ ../freertos/tasks.c:4741: 					( pxTCB->ulNotifiedValue )++;
4741:../freertos/tasks.c **** 					break;
 5749              		.loc 1 4741 32 view .LVU1578
 5750 0f6c 0133     		adds	r3, r3, #1	@ _5, _4,
 5751 0f6e 6365     		str	r3, [r4, #84]	@ _5, MEM[(struct TCB_t *)xTaskToNotify_19(D)].ulNotifiedValue
4742:../freertos/tasks.c **** 
 5752              		.loc 1 4742 6 is_stmt 1 view .LVU1579
 5753              	.LVL357:
 5754              	.L400:
4774:../freertos/tasks.c **** 
 5755              		.loc 1 4774 22 view .LVU1580
4778:../freertos/tasks.c **** 			{
 5756              		.loc 1 4778 4 view .LVU1581
 5757              	@ ../freertos/tasks.c:4778: 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
4778:../freertos/tasks.c **** 			{
 5758              		.loc 1 4778 6 is_stmt 0 view .LVU1582
 5759 0f70 012D     		cmp	r5, #1	@ ucOriginalNotifyState,
 5760 0f72 08D0     		beq	.L407		@,
 5761              	.L408:
 5762              	@ ../freertos/tasks.c:4715: 	{
4715:../freertos/tasks.c **** 	TCB_t * pxTCB;
 5763              		.loc 1 4715 2 view .LVU1583
 5764 0f74 0125     		movs	r5, #1	@ <retval>,
 5765              	.LVL358:
 5766              	.L406:
4815:../freertos/tasks.c **** 			}
 5767              		.loc 1 4815 29 is_stmt 1 view .LVU1584
4818:../freertos/tasks.c **** 
 5768              		.loc 1 4818 3 view .LVU1585
 5769 0f76 FFF7FEFF 		bl	vPortExitCritical		@
 5770              	.LVL359:
4820:../freertos/tasks.c **** 	}
 5771              		.loc 1 4820 3 view .LVU1586
 5772              	@ ../freertos/tasks.c:4821: 	}
4821:../freertos/tasks.c **** 
 5773              		.loc 1 4821 2 is_stmt 0 view .LVU1587
 5774 0f7a 2846     		mov	r0, r5	@, <retval>
 5775 0f7c F8BD     		pop	{r3, r4, r5, r6, r7, pc}	@
 5776              	.LVL360:
 5777              	.L401:
4749:../freertos/tasks.c **** 					{
 5778              		.loc 1 4749 6 is_stmt 1 view .LVU1588
 5779              	@ ../freertos/tasks.c:4749: 					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
4749:../freertos/tasks.c **** 					{
 5780              		.loc 1 4749 8 is_stmt 0 view .LVU1589
 5781 0f7e 022D     		cmp	r5, #2	@ ucOriginalNotifyState,
 5782 0f80 F1D1     		bne	.L413		@,
 5783              	@ ../freertos/tasks.c:4756: 						xReturn = pdFAIL;
4756:../freertos/tasks.c **** 					}
 5784              		.loc 1 4756 15 view .LVU1590
 5785 0f82 0025     		movs	r5, #0	@ <retval>,
 5786              	.LVL361:
4756:../freertos/tasks.c **** 					}
 5787              		.loc 1 4756 15 view .LVU1591
ARM GAS  /tmp/ccaP1CVS.s 			page 225


 5788 0f84 F7E7     		b	.L406		@
 5789              	.LVL362:
 5790              	.L407:
4780:../freertos/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
 5791              		.loc 1 4780 5 is_stmt 1 view .LVU1592
 5792              	@ ../freertos/tasks.c:4780: 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
4780:../freertos/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
 5793              		.loc 1 4780 14 is_stmt 0 view .LVU1593
 5794 0f86 271D     		adds	r7, r4, #4	@ _6, xTaskToNotify,
 5795 0f88 3846     		mov	r0, r7	@, _6
 5796 0f8a FFF7FEFF 		bl	uxListRemove		@
 5797              	.LVL363:
4781:../freertos/tasks.c **** 
 5798              		.loc 1 4781 5 is_stmt 1 view .LVU1594
4781:../freertos/tasks.c **** 
 5799              		.loc 1 4781 5 view .LVU1595
 5800 0f8e 1420     		movs	r0, #20	@ tmp147,
 5801 0f90 0E4E     		ldr	r6, .L414	@ tmp140,
 5802 0f92 E26A     		ldr	r2, [r4, #44]	@ _7, MEM[(struct TCB_t *)xTaskToNotify_19(D)].uxPriority
 5803 0f94 B168     		ldr	r1, [r6, #8]	@ uxTopReadyPriority.127_9, uxTopReadyPriority
 5804 0f96 05FA02F3 		lsl	r3, r5, r2	@ tmp141, ucOriginalNotifyState, _7
 5805 0f9a 0B43     		orrs	r3, r3, r1	@, _10, tmp141, uxTopReadyPriority.127_9
 5806 0f9c B360     		str	r3, [r6, #8]	@ _10, uxTopReadyPriority
4781:../freertos/tasks.c **** 
 5807              		.loc 1 4781 5 view .LVU1596
 5808 0f9e 06F14803 		add	r3, r6, #72	@ tmp145, tmp140,
 5809 0fa2 00FB0230 		mla	r0, r0, r2, r3	@, tmp147, _7, tmp145
 5810 0fa6 3946     		mov	r1, r7	@, _6
 5811 0fa8 FFF7FEFF 		bl	vListInsertEnd		@
 5812              	.LVL364:
4781:../freertos/tasks.c **** 
 5813              		.loc 1 4781 35 view .LVU1597
4784:../freertos/tasks.c **** 
 5814              		.loc 1 4784 82 view .LVU1598
4802:../freertos/tasks.c **** 				{
 5815              		.loc 1 4802 5 view .LVU1599
 5816              	@ ../freertos/tasks.c:4802: 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
4802:../freertos/tasks.c **** 				{
 5817              		.loc 1 4802 41 is_stmt 0 view .LVU1600
 5818 0fac 7368     		ldr	r3, [r6, #4]	@ pxCurrentTCB.128_13, pxCurrentTCB
 5819              	@ ../freertos/tasks.c:4802: 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
4802:../freertos/tasks.c **** 				{
 5820              		.loc 1 4802 7 view .LVU1601
 5821 0fae E26A     		ldr	r2, [r4, #44]	@ MEM[(struct TCB_t *)xTaskToNotify_19(D)].uxPriority, MEM[(struct TCB_t *)xTask
 5822 0fb0 DB6A     		ldr	r3, [r3, #44]	@ pxCurrentTCB.128_13->uxPriority, pxCurrentTCB.128_13->uxPriority
 5823 0fb2 9A42     		cmp	r2, r3	@ MEM[(struct TCB_t *)xTaskToNotify_19(D)].uxPriority, pxCurrentTCB.128_13->uxPriority
 5824 0fb4 DED9     		bls	.L408		@,
4806:../freertos/tasks.c **** 				}
 5825              		.loc 1 4806 6 is_stmt 1 view .LVU1602
 5826 0fb6 4FF0E023 		mov	r3, #-536813568	@ tmp152,
 5827 0fba 4FF08052 		mov	r2, #268435456	@ tmp153,
 5828 0fbe C3F8042D 		str	r2, [r3, #3332]	@ tmp153, MEM[(volatile uint32_t *)3758157060B]
4806:../freertos/tasks.c **** 				}
 5829              		.loc 1 4806 6 view .LVU1603
 5830              		.syntax unified
 5831              	@ 4806 "../freertos/tasks.c" 1
 5832 0fc2 BFF34F8F 		dsb	
ARM GAS  /tmp/ccaP1CVS.s 			page 226


 5833              	@ 0 "" 2
4806:../freertos/tasks.c **** 				}
 5834              		.loc 1 4806 6 view .LVU1604
 5835              	@ 4806 "../freertos/tasks.c" 1
 5836 0fc6 BFF36F8F 		isb
 5837              	@ 0 "" 2
4806:../freertos/tasks.c **** 				}
 5838              		.loc 1 4806 37 view .LVU1605
 5839              		.thumb
 5840              		.syntax unified
 5841 0fca D4E7     		b	.L406		@
 5842              	.L415:
 5843              		.align	2
 5844              	.L414:
 5845 0fcc 00000000 		.word	.LANCHOR0
 5846              		.cfi_endproc
 5847              	.LFE58:
 5848              		.size	xTaskGenericNotify, .-xTaskGenericNotify
 5849              		.align	1
 5850              		.global	xTaskGenericNotifyFromISR
 5851              		.syntax unified
 5852              		.thumb
 5853              		.thumb_func
 5854              		.type	xTaskGenericNotifyFromISR, %function
 5855              	xTaskGenericNotifyFromISR:
 5856              	.LVL365:
 5857              	.LFB59:
4829:../freertos/tasks.c **** 	TCB_t * pxTCB;
 5858              		.loc 1 4829 2 view -0
 5859              		.cfi_startproc
 5860              		@ args = 4, pretend = 0, frame = 0
 5861              		@ frame_needed = 0, uses_anonymous_args = 0
4830:../freertos/tasks.c **** 	uint8_t ucOriginalNotifyState;
 5862              		.loc 1 4830 2 view .LVU1607
4831:../freertos/tasks.c **** 	BaseType_t xReturn = pdPASS;
 5863              		.loc 1 4831 2 view .LVU1608
4832:../freertos/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 5864              		.loc 1 4832 2 view .LVU1609
4833:../freertos/tasks.c **** 
 5865              		.loc 1 4833 2 view .LVU1610
4835:../freertos/tasks.c **** 
 5866              		.loc 1 4835 32 view .LVU1611
4853:../freertos/tasks.c **** 
 5867              		.loc 1 4853 45 view .LVU1612
4855:../freertos/tasks.c **** 
 5868              		.loc 1 4855 3 view .LVU1613
 5869              	@ ../freertos/tasks.c:4829: 	{
4829:../freertos/tasks.c **** 	TCB_t * pxTCB;
 5870              		.loc 1 4829 2 is_stmt 0 view .LVU1614
 5871 0fd0 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}	@
 5872              	.LCFI51:
 5873              		.cfi_def_cfa_offset 32
 5874              		.cfi_offset 3, -32
 5875              		.cfi_offset 4, -28
 5876              		.cfi_offset 5, -24
 5877              		.cfi_offset 6, -20
 5878              		.cfi_offset 7, -16
ARM GAS  /tmp/ccaP1CVS.s 			page 227


 5879              		.cfi_offset 8, -12
 5880              		.cfi_offset 9, -8
 5881              		.cfi_offset 14, -4
 5882              	@ ../freertos/tasks.c:4829: 	{
4829:../freertos/tasks.c **** 	TCB_t * pxTCB;
 5883              		.loc 1 4829 2 view .LVU1615
 5884 0fd4 089F     		ldr	r7, [sp, #32]	@ pxHigherPriorityTaskWoken, pxHigherPriorityTaskWoken
 5885 0fd6 0446     		mov	r4, r0	@ xTaskToNotify, tmp170
 5886              	.LVL366:
4857:../freertos/tasks.c **** 		{
 5887              		.loc 1 4857 3 is_stmt 1 view .LVU1616
 5888              	.LBB158:
 5889              	.LBI158:
 207:../freertos/portable/GCC/ARM_CM3/portmacro.h **** {
 5890              		.loc 2 207 34 view .LVU1617
 5891              	.LBB159:
 209:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 
 5892              		.loc 2 209 1 view .LVU1618
 211:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	(
 5893              		.loc 2 211 2 view .LVU1619
 5894              		.syntax unified
 5895              	@ 211 "../freertos/portable/GCC/ARM_CM3/portmacro.h" 1
 5896 0fd8 EFF31188 			mrs r8, basepri												@ ulOriginalBASEPRI
 5897 0fdc 4FF01000 		mov r0, #16													@ ulNewBASEPRI,
 5898 0fe0 80F31188 		msr basepri, r0												@ ulNewBASEPRI
 5899 0fe4 BFF36F8F 		isb														
 5900 0fe8 BFF34F8F 		dsb														
 5901              	
 5902              	@ 0 "" 2
 5903              	.LVL367:
 223:../freertos/portable/GCC/ARM_CM3/portmacro.h **** }
 5904              		.loc 2 223 2 view .LVU1620
 223:../freertos/portable/GCC/ARM_CM3/portmacro.h **** }
 5905              		.loc 2 223 2 is_stmt 0 view .LVU1621
 5906              		.thumb
 5907              		.syntax unified
 5908              	.LBE159:
 5909              	.LBE158:
4859:../freertos/tasks.c **** 			{
 5910              		.loc 1 4859 4 is_stmt 1 view .LVU1622
 5911              	@ ../freertos/tasks.c:4859: 			if( pulPreviousNotificationValue != NULL )
4859:../freertos/tasks.c **** 			{
 5912              		.loc 1 4859 6 is_stmt 0 view .LVU1623
 5913 0fec 0BB1     		cbz	r3, .L417	@ pulPreviousNotificationValue,
4861:../freertos/tasks.c **** 			}
 5914              		.loc 1 4861 5 is_stmt 1 view .LVU1624
 5915              	@ ../freertos/tasks.c:4861: 				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
4861:../freertos/tasks.c **** 			}
 5916              		.loc 1 4861 42 is_stmt 0 view .LVU1625
 5917 0fee 606D     		ldr	r0, [r4, #84]	@ _1, MEM[(struct TCB_t *)xTaskToNotify_23(D)].ulNotifiedValue
 5918              	@ ../freertos/tasks.c:4861: 				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
4861:../freertos/tasks.c **** 			}
 5919              		.loc 1 4861 35 view .LVU1626
 5920 0ff0 1860     		str	r0, [r3]	@ _1, *pulPreviousNotificationValue_25(D)
 5921              	.L417:
4864:../freertos/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 5922              		.loc 1 4864 4 is_stmt 1 view .LVU1627
ARM GAS  /tmp/ccaP1CVS.s 			page 228


 5923              	@ ../freertos/tasks.c:4865: 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
4865:../freertos/tasks.c **** 
 5924              		.loc 1 4865 25 is_stmt 0 view .LVU1628
 5925 0ff2 0223     		movs	r3, #2	@ tmp144,
 5926              	.LVL368:
 5927              	@ ../freertos/tasks.c:4864: 			ucOriginalNotifyState = pxTCB->ucNotifyState;
4864:../freertos/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 5928              		.loc 1 4864 26 view .LVU1629
 5929 0ff4 94F85850 		ldrb	r5, [r4, #88]	@ zero_extendqisi2	@ MEM[(struct TCB_t *)xTaskToNotify_23(D)].ucNotifyState, ME
 5930              	@ ../freertos/tasks.c:4867: 			switch( eAction )
4867:../freertos/tasks.c **** 			{
 5931              		.loc 1 4867 4 view .LVU1630
 5932 0ff8 013A     		subs	r2, r2, #1	@ tmp146, eAction,
 5933              	.LVL369:
 5934              	@ ../freertos/tasks.c:4864: 			ucOriginalNotifyState = pxTCB->ucNotifyState;
4864:../freertos/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 5935              		.loc 1 4864 26 view .LVU1631
 5936 0ffa EDB2     		uxtb	r5, r5	@ ucOriginalNotifyState, MEM[(struct TCB_t *)xTaskToNotify_23(D)].ucNotifyState
 5937              	.LVL370:
4865:../freertos/tasks.c **** 
 5938              		.loc 1 4865 4 is_stmt 1 view .LVU1632
 5939              	@ ../freertos/tasks.c:4865: 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
4865:../freertos/tasks.c **** 
 5940              		.loc 1 4865 25 is_stmt 0 view .LVU1633
 5941 0ffc 84F85830 		strb	r3, [r4, #88]	@ tmp144, MEM[(struct TCB_t *)xTaskToNotify_23(D)].ucNotifyState
4867:../freertos/tasks.c **** 			{
 5942              		.loc 1 4867 4 is_stmt 1 view .LVU1634
 5943 1000 032A     		cmp	r2, #3	@ tmp146,
 5944 1002 0AD8     		bhi	.L418		@
 5945 1004 DFE802F0 		tbb	[pc, r2]	@ tmp146
 5946              	.L420:
 5947 1008 02       		.byte	(.L423-.L420)/2
 5948 1009 06       		.byte	(.L422-.L420)/2
 5949 100a 04       		.byte	(.L437-.L420)/2
 5950 100b 10       		.byte	(.L419-.L420)/2
 5951              		.p2align 1
 5952              	.L423:
4870:../freertos/tasks.c **** 					break;
 5953              		.loc 1 4870 6 view .LVU1635
 5954              	@ ../freertos/tasks.c:4870: 					pxTCB->ulNotifiedValue |= ulValue;
4870:../freertos/tasks.c **** 					break;
 5955              		.loc 1 4870 29 is_stmt 0 view .LVU1636
 5956 100c 636D     		ldr	r3, [r4, #84]	@ _2, MEM[(struct TCB_t *)xTaskToNotify_23(D)].ulNotifiedValue
 5957 100e 1943     		orrs	r1, r1, r3	@, _3, ulValue, _2
 5958              	.LVL371:
 5959              	.L437:
4884:../freertos/tasks.c **** 					}
 5960              		.loc 1 4884 7 is_stmt 1 view .LVU1637
 5961              	@ ../freertos/tasks.c:4884: 						pxTCB->ulNotifiedValue = ulValue;
4884:../freertos/tasks.c **** 					}
 5962              		.loc 1 4884 30 is_stmt 0 view .LVU1638
 5963 1010 6165     		str	r1, [r4, #84]	@ ulValue,
 5964 1012 02E0     		b	.L418		@
 5965              	.LVL372:
 5966              	.L422:
4874:../freertos/tasks.c **** 					break;
 5967              		.loc 1 4874 6 is_stmt 1 view .LVU1639
ARM GAS  /tmp/ccaP1CVS.s 			page 229


 5968              	@ ../freertos/tasks.c:4874: 					( pxTCB->ulNotifiedValue )++;
4874:../freertos/tasks.c **** 					break;
 5969              		.loc 1 4874 13 is_stmt 0 view .LVU1640
 5970 1014 636D     		ldr	r3, [r4, #84]	@ _4, MEM[(struct TCB_t *)xTaskToNotify_23(D)].ulNotifiedValue
 5971              	@ ../freertos/tasks.c:4874: 					( pxTCB->ulNotifiedValue )++;
4874:../freertos/tasks.c **** 					break;
 5972              		.loc 1 4874 32 view .LVU1641
 5973 1016 0133     		adds	r3, r3, #1	@ _5, _4,
 5974 1018 6365     		str	r3, [r4, #84]	@ _5, MEM[(struct TCB_t *)xTaskToNotify_23(D)].ulNotifiedValue
4875:../freertos/tasks.c **** 
 5975              		.loc 1 4875 6 is_stmt 1 view .LVU1642
 5976              	.LVL373:
 5977              	.L418:
4906:../freertos/tasks.c **** 
 5978              		.loc 1 4906 31 view .LVU1643
4910:../freertos/tasks.c **** 			{
 5979              		.loc 1 4910 4 view .LVU1644
 5980              	@ ../freertos/tasks.c:4910: 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
4910:../freertos/tasks.c **** 			{
 5981              		.loc 1 4910 6 is_stmt 0 view .LVU1645
 5982 101a 012D     		cmp	r5, #1	@ ucOriginalNotifyState,
 5983 101c 08D0     		beq	.L425		@,
 5984              	.LVL374:
 5985              	.L439:
4910:../freertos/tasks.c **** 			{
 5986              		.loc 1 4910 6 view .LVU1646
 5987 101e 0120     		movs	r0, #1	@ <retval>,
 5988              	.L424:
 5989              	.LVL375:
4943:../freertos/tasks.c **** 				}
 5990              		.loc 1 4943 30 is_stmt 1 view .LVU1647
4947:../freertos/tasks.c **** 
 5991              		.loc 1 4947 3 view .LVU1648
 5992              	.LBB160:
 5993              	.LBI160:
 227:../freertos/portable/GCC/ARM_CM3/portmacro.h **** {
 5994              		.loc 2 227 30 view .LVU1649
 5995              	.LBB161:
 5996              		.loc 2 229 2 view .LVU1650
 5997              		.syntax unified
 5998              	@ 229 "../freertos/portable/GCC/ARM_CM3/portmacro.h" 1
 5999 1020 88F31188 			msr basepri, r8		@ ulOriginalBASEPRI
 6000              	@ 0 "" 2
 6001              	.LVL376:
 6002              		.loc 2 229 2 is_stmt 0 view .LVU1651
 6003              		.thumb
 6004              		.syntax unified
 6005              	.LBE161:
 6006              	.LBE160:
4949:../freertos/tasks.c **** 	}
 6007              		.loc 1 4949 3 is_stmt 1 view .LVU1652
 6008              	@ ../freertos/tasks.c:4950: 	}
4950:../freertos/tasks.c **** 
 6009              		.loc 1 4950 2 is_stmt 0 view .LVU1653
 6010 1024 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}	@
 6011              	.LVL377:
 6012              	.L419:
ARM GAS  /tmp/ccaP1CVS.s 			page 230


4882:../freertos/tasks.c **** 					{
 6013              		.loc 1 4882 6 is_stmt 1 view .LVU1654
 6014              	@ ../freertos/tasks.c:4882: 					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
4882:../freertos/tasks.c **** 					{
 6015              		.loc 1 4882 8 is_stmt 0 view .LVU1655
 6016 1028 022D     		cmp	r5, #2	@ ucOriginalNotifyState,
 6017 102a F1D1     		bne	.L437		@,
 6018              	@ ../freertos/tasks.c:4889: 						xReturn = pdFAIL;
4889:../freertos/tasks.c **** 					}
 6019              		.loc 1 4889 15 view .LVU1656
 6020 102c 0020     		movs	r0, #0	@ <retval>,
 6021 102e F7E7     		b	.L424		@
 6022              	.LVL378:
 6023              	.L425:
4913:../freertos/tasks.c **** 
 6024              		.loc 1 4913 82 is_stmt 1 view .LVU1657
4915:../freertos/tasks.c **** 				{
 6025              		.loc 1 4915 5 view .LVU1658
 6026              	@ ../freertos/tasks.c:4915: 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
4915:../freertos/tasks.c **** 				{
 6027              		.loc 1 4915 30 is_stmt 0 view .LVU1659
 6028 1030 124E     		ldr	r6, .L440	@ tmp147,
 6029 1032 D6F8F030 		ldr	r3, [r6, #240]	@ uxSchedulerSuspended.129_6, uxSchedulerSuspended
 6030              	@ ../freertos/tasks.c:4915: 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
4915:../freertos/tasks.c **** 				{
 6031              		.loc 1 4915 7 view .LVU1660
 6032 1036 E3B9     		cbnz	r3, .L426	@ uxSchedulerSuspended.129_6,
4917:../freertos/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 6033              		.loc 1 4917 6 is_stmt 1 view .LVU1661
 6034              	@ ../freertos/tasks.c:4917: 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
4917:../freertos/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 6035              		.loc 1 4917 15 is_stmt 0 view .LVU1662
 6036 1038 04F10409 		add	r9, r4, #4	@ _7, xTaskToNotify,
 6037 103c 4846     		mov	r0, r9	@, _7
 6038 103e FFF7FEFF 		bl	uxListRemove		@
 6039              	.LVL379:
4918:../freertos/tasks.c **** 				}
 6040              		.loc 1 4918 6 is_stmt 1 view .LVU1663
4918:../freertos/tasks.c **** 				}
 6041              		.loc 1 4918 6 view .LVU1664
 6042 1042 1420     		movs	r0, #20	@ tmp155,
 6043 1044 4946     		mov	r1, r9	@, _7
 6044 1046 E36A     		ldr	r3, [r4, #44]	@ _8, MEM[(struct TCB_t *)xTaskToNotify_23(D)].uxPriority
 6045 1048 B268     		ldr	r2, [r6, #8]	@ uxTopReadyPriority.130_10, uxTopReadyPriority
 6046 104a 9D40     		lsls	r5, r5, r3	@ tmp149, ucOriginalNotifyState, _8
 6047              	.LVL380:
4918:../freertos/tasks.c **** 				}
 6048              		.loc 1 4918 6 is_stmt 0 view .LVU1665
 6049 104c 1543     		orrs	r5, r5, r2	@, _11, tmp149, uxTopReadyPriority.130_10
 6050 104e 06F14802 		add	r2, r6, #72	@ tmp153, tmp147,
 6051 1052 00FB0320 		mla	r0, r0, r3, r2	@, tmp155, _8, tmp153
 6052 1056 B560     		str	r5, [r6, #8]	@ _11, uxTopReadyPriority
4918:../freertos/tasks.c **** 				}
 6053              		.loc 1 4918 6 is_stmt 1 view .LVU1666
 6054              	.L438:
 6055              	@ ../freertos/tasks.c:4924: 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem )
4924:../freertos/tasks.c **** 				}
ARM GAS  /tmp/ccaP1CVS.s 			page 231


 6056              		.loc 1 4924 6 is_stmt 0 view .LVU1667
 6057 1058 FFF7FEFF 		bl	vListInsertEnd		@
 6058              	.LVL381:
4927:../freertos/tasks.c **** 				{
 6059              		.loc 1 4927 5 is_stmt 1 view .LVU1668
 6060              	@ ../freertos/tasks.c:4927: 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
4927:../freertos/tasks.c **** 				{
 6061              		.loc 1 4927 41 is_stmt 0 view .LVU1669
 6062 105c 7368     		ldr	r3, [r6, #4]	@ pxCurrentTCB.131_15, pxCurrentTCB
 6063              	@ ../freertos/tasks.c:4927: 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
4927:../freertos/tasks.c **** 				{
 6064              		.loc 1 4927 7 view .LVU1670
 6065 105e E26A     		ldr	r2, [r4, #44]	@ MEM[(struct TCB_t *)xTaskToNotify_23(D)].uxPriority, MEM[(struct TCB_t *)xTask
 6066 1060 DB6A     		ldr	r3, [r3, #44]	@ pxCurrentTCB.131_15->uxPriority, pxCurrentTCB.131_15->uxPriority
 6067 1062 9A42     		cmp	r2, r3	@ MEM[(struct TCB_t *)xTaskToNotify_23(D)].uxPriority, pxCurrentTCB.131_15->uxPriority
 6068 1064 DBD9     		bls	.L439		@,
4931:../freertos/tasks.c **** 					{
 6069              		.loc 1 4931 6 is_stmt 1 view .LVU1671
 6070 1066 0123     		movs	r3, #1	@ tmp168,
 6071              	@ ../freertos/tasks.c:4931: 					if( pxHigherPriorityTaskWoken != NULL )
4931:../freertos/tasks.c **** 					{
 6072              		.loc 1 4931 8 is_stmt 0 view .LVU1672
 6073 1068 07B1     		cbz	r7, .L429	@ pxHigherPriorityTaskWoken,
4933:../freertos/tasks.c **** 					}
 6074              		.loc 1 4933 7 is_stmt 1 view .LVU1673
 6075              	@ ../freertos/tasks.c:4933: 						*pxHigherPriorityTaskWoken = pdTRUE;
4933:../freertos/tasks.c **** 					}
 6076              		.loc 1 4933 34 is_stmt 0 view .LVU1674
 6077 106a 3B60     		str	r3, [r7]	@ tmp168, *pxHigherPriorityTaskWoken_39(D)
 6078              	.L429:
4939:../freertos/tasks.c **** 				}
 6079              		.loc 1 4939 6 is_stmt 1 view .LVU1675
 6080              	@ ../freertos/tasks.c:4939: 					xYieldPending = pdTRUE;
4939:../freertos/tasks.c **** 				}
 6081              		.loc 1 4939 20 is_stmt 0 view .LVU1676
 6082 106c C6F80031 		str	r3, [r6, #256]	@ tmp168, xYieldPending
 6083 1070 D5E7     		b	.L439		@
 6084              	.LVL382:
 6085              	.L426:
4924:../freertos/tasks.c **** 				}
 6086              		.loc 1 4924 6 is_stmt 1 view .LVU1677
 6087 1072 04F11801 		add	r1, r4, #24	@, xTaskToNotify,
 6088 1076 06F1D400 		add	r0, r6, #212	@, tmp147,
 6089 107a EDE7     		b	.L438		@
 6090              	.L441:
 6091              		.align	2
 6092              	.L440:
 6093 107c 00000000 		.word	.LANCHOR0
 6094              		.cfi_endproc
 6095              	.LFE59:
 6096              		.size	xTaskGenericNotifyFromISR, .-xTaskGenericNotifyFromISR
 6097              		.align	1
 6098              		.global	vTaskNotifyGiveFromISR
 6099              		.syntax unified
 6100              		.thumb
 6101              		.thumb_func
 6102              		.type	vTaskNotifyGiveFromISR, %function
ARM GAS  /tmp/ccaP1CVS.s 			page 232


 6103              	vTaskNotifyGiveFromISR:
 6104              	.LVL383:
 6105              	.LFB60:
4958:../freertos/tasks.c **** 	TCB_t * pxTCB;
 6106              		.loc 1 4958 2 view -0
 6107              		.cfi_startproc
 6108              		@ args = 0, pretend = 0, frame = 0
 6109              		@ frame_needed = 0, uses_anonymous_args = 0
4959:../freertos/tasks.c **** 	uint8_t ucOriginalNotifyState;
 6110              		.loc 1 4959 2 view .LVU1679
4960:../freertos/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 6111              		.loc 1 4960 2 view .LVU1680
4961:../freertos/tasks.c **** 
 6112              		.loc 1 4961 2 view .LVU1681
4963:../freertos/tasks.c **** 
 6113              		.loc 1 4963 32 view .LVU1682
4981:../freertos/tasks.c **** 
 6114              		.loc 1 4981 45 view .LVU1683
4983:../freertos/tasks.c **** 
 6115              		.loc 1 4983 3 view .LVU1684
4985:../freertos/tasks.c **** 		{
 6116              		.loc 1 4985 3 view .LVU1685
 6117              	.LBB162:
 6118              	.LBI162:
 207:../freertos/portable/GCC/ARM_CM3/portmacro.h **** {
 6119              		.loc 2 207 34 view .LVU1686
 6120              	.LBB163:
 209:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 
 6121              		.loc 2 209 1 view .LVU1687
 211:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	(
 6122              		.loc 2 211 2 view .LVU1688
 6123              	.LBE163:
 6124              	.LBE162:
 6125              	@ ../freertos/tasks.c:4958: 	{
4958:../freertos/tasks.c **** 	TCB_t * pxTCB;
 6126              		.loc 1 4958 2 is_stmt 0 view .LVU1689
 6127 1080 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}	@
 6128              	.LCFI52:
 6129              		.cfi_def_cfa_offset 32
 6130              		.cfi_offset 3, -32
 6131              		.cfi_offset 4, -28
 6132              		.cfi_offset 5, -24
 6133              		.cfi_offset 6, -20
 6134              		.cfi_offset 7, -16
 6135              		.cfi_offset 8, -12
 6136              		.cfi_offset 9, -8
 6137              		.cfi_offset 14, -4
 6138              	@ ../freertos/tasks.c:4958: 	{
4958:../freertos/tasks.c **** 	TCB_t * pxTCB;
 6139              		.loc 1 4958 2 view .LVU1690
 6140 1084 0446     		mov	r4, r0	@ xTaskToNotify, tmp161
 6141 1086 0F46     		mov	r7, r1	@ pxHigherPriorityTaskWoken, tmp162
 6142              	.LBB165:
 6143              	.LBB164:
 6144              	@ ../freertos/portable/GCC/ARM_CM3/portmacro.h:211: 	__asm volatile
 211:../freertos/portable/GCC/ARM_CM3/portmacro.h **** 	(
 6145              		.loc 2 211 2 view .LVU1691
ARM GAS  /tmp/ccaP1CVS.s 			page 233


 6146              		.syntax unified
 6147              	@ 211 "../freertos/portable/GCC/ARM_CM3/portmacro.h" 1
 6148 1088 EFF31188 			mrs r8, basepri												@ ulOriginalBASEPRI
 6149 108c 4FF01003 		mov r3, #16													@ ulNewBASEPRI,
 6150 1090 83F31188 		msr basepri, r3												@ ulNewBASEPRI
 6151 1094 BFF36F8F 		isb														
 6152 1098 BFF34F8F 		dsb														
 6153              	
 6154              	@ 0 "" 2
 6155              	.LVL384:
 223:../freertos/portable/GCC/ARM_CM3/portmacro.h **** }
 6156              		.loc 2 223 2 is_stmt 1 view .LVU1692
 223:../freertos/portable/GCC/ARM_CM3/portmacro.h **** }
 6157              		.loc 2 223 2 is_stmt 0 view .LVU1693
 6158              		.thumb
 6159              		.syntax unified
 6160              	.LBE164:
 6161              	.LBE165:
4987:../freertos/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 6162              		.loc 1 4987 4 is_stmt 1 view .LVU1694
 6163              	@ ../freertos/tasks.c:4988: 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
4988:../freertos/tasks.c **** 
 6164              		.loc 1 4988 25 is_stmt 0 view .LVU1695
 6165 109c 0223     		movs	r3, #2	@ tmp137,
 6166              	@ ../freertos/tasks.c:4987: 			ucOriginalNotifyState = pxTCB->ucNotifyState;
4987:../freertos/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 6167              		.loc 1 4987 26 view .LVU1696
 6168 109e 90F85820 		ldrb	r2, [r0, #88]	@ zero_extendqisi2	@ MEM[(struct TCB_t *)xTaskToNotify_17(D)].ucNotifyState, ME
 6169              	@ ../freertos/tasks.c:4988: 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
4988:../freertos/tasks.c **** 
 6170              		.loc 1 4988 25 view .LVU1697
 6171 10a2 80F85830 		strb	r3, [r0, #88]	@ tmp137, MEM[(struct TCB_t *)xTaskToNotify_17(D)].ucNotifyState
 6172              	@ ../freertos/tasks.c:4992: 			( pxTCB->ulNotifiedValue )++;
4992:../freertos/tasks.c **** 
 6173              		.loc 1 4992 11 view .LVU1698
 6174 10a6 436D     		ldr	r3, [r0, #84]	@ _1, MEM[(struct TCB_t *)xTaskToNotify_17(D)].ulNotifiedValue
 6175              	@ ../freertos/tasks.c:4998: 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
4998:../freertos/tasks.c **** 			{
 6176              		.loc 1 4998 6 view .LVU1699
 6177 10a8 012A     		cmp	r2, #1	@ MEM[(struct TCB_t *)xTaskToNotify_17(D)].ucNotifyState,
 6178              	@ ../freertos/tasks.c:4992: 			( pxTCB->ulNotifiedValue )++;
4992:../freertos/tasks.c **** 
 6179              		.loc 1 4992 30 view .LVU1700
 6180 10aa 03F10103 		add	r3, r3, #1	@ _2, _1,
 6181              	@ ../freertos/tasks.c:4987: 			ucOriginalNotifyState = pxTCB->ucNotifyState;
4987:../freertos/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 6182              		.loc 1 4987 26 view .LVU1701
 6183 10ae D6B2     		uxtb	r6, r2	@ ucOriginalNotifyState, MEM[(struct TCB_t *)xTaskToNotify_17(D)].ucNotifyState
 6184              	.LVL385:
4988:../freertos/tasks.c **** 
 6185              		.loc 1 4988 4 is_stmt 1 view .LVU1702
4992:../freertos/tasks.c **** 
 6186              		.loc 1 4992 4 view .LVU1703
 6187              	@ ../freertos/tasks.c:4992: 			( pxTCB->ulNotifiedValue )++;
4992:../freertos/tasks.c **** 
 6188              		.loc 1 4992 30 is_stmt 0 view .LVU1704
 6189 10b0 4365     		str	r3, [r0, #84]	@ _2, MEM[(struct TCB_t *)xTaskToNotify_17(D)].ulNotifiedValue
ARM GAS  /tmp/ccaP1CVS.s 			page 234


4994:../freertos/tasks.c **** 
 6190              		.loc 1 4994 36 is_stmt 1 view .LVU1705
4998:../freertos/tasks.c **** 			{
 6191              		.loc 1 4998 4 view .LVU1706
 6192              	@ ../freertos/tasks.c:4998: 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
4998:../freertos/tasks.c **** 			{
 6193              		.loc 1 4998 6 is_stmt 0 view .LVU1707
 6194 10b2 1FD1     		bne	.L444		@,
5001:../freertos/tasks.c **** 
 6195              		.loc 1 5001 82 is_stmt 1 view .LVU1708
5003:../freertos/tasks.c **** 				{
 6196              		.loc 1 5003 5 view .LVU1709
 6197              	@ ../freertos/tasks.c:5003: 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
5003:../freertos/tasks.c **** 				{
 6198              		.loc 1 5003 30 is_stmt 0 view .LVU1710
 6199 10b4 144D     		ldr	r5, .L453	@ tmp139,
 6200 10b6 D5F8F030 		ldr	r3, [r5, #240]	@ uxSchedulerSuspended.132_3, uxSchedulerSuspended
 6201              	@ ../freertos/tasks.c:5003: 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
5003:../freertos/tasks.c **** 				{
 6202              		.loc 1 5003 7 view .LVU1711
 6203 10ba FBB9     		cbnz	r3, .L445	@ uxSchedulerSuspended.132_3,
5005:../freertos/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 6204              		.loc 1 5005 6 is_stmt 1 view .LVU1712
 6205              	@ ../freertos/tasks.c:5005: 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
5005:../freertos/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 6206              		.loc 1 5005 15 is_stmt 0 view .LVU1713
 6207 10bc 00F10409 		add	r9, r0, #4	@ _4, xTaskToNotify,
 6208 10c0 4846     		mov	r0, r9	@, _4
 6209              	.LVL386:
5005:../freertos/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 6210              		.loc 1 5005 15 view .LVU1714
 6211 10c2 FFF7FEFF 		bl	uxListRemove		@
 6212              	.LVL387:
5006:../freertos/tasks.c **** 				}
 6213              		.loc 1 5006 6 is_stmt 1 view .LVU1715
5006:../freertos/tasks.c **** 				}
 6214              		.loc 1 5006 6 view .LVU1716
 6215 10c6 1420     		movs	r0, #20	@ tmp147,
 6216 10c8 4946     		mov	r1, r9	@, _4
 6217 10ca E36A     		ldr	r3, [r4, #44]	@ _5, MEM[(struct TCB_t *)xTaskToNotify_17(D)].uxPriority
 6218 10cc AA68     		ldr	r2, [r5, #8]	@ uxTopReadyPriority.133_7, uxTopReadyPriority
 6219 10ce 9E40     		lsls	r6, r6, r3	@ tmp141, ucOriginalNotifyState, _5
 6220              	.LVL388:
5006:../freertos/tasks.c **** 				}
 6221              		.loc 1 5006 6 is_stmt 0 view .LVU1717
 6222 10d0 1643     		orrs	r6, r6, r2	@, _8, tmp141, uxTopReadyPriority.133_7
 6223 10d2 05F14802 		add	r2, r5, #72	@ tmp145, tmp139,
 6224 10d6 00FB0320 		mla	r0, r0, r3, r2	@, tmp147, _5, tmp145
 6225 10da AE60     		str	r6, [r5, #8]	@ _8, uxTopReadyPriority
5006:../freertos/tasks.c **** 				}
 6226              		.loc 1 5006 6 is_stmt 1 view .LVU1718
 6227              	.L452:
 6228              	@ ../freertos/tasks.c:5012: 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem )
5012:../freertos/tasks.c **** 				}
 6229              		.loc 1 5012 6 is_stmt 0 view .LVU1719
 6230 10dc FFF7FEFF 		bl	vListInsertEnd		@
 6231              	.LVL389:
ARM GAS  /tmp/ccaP1CVS.s 			page 235


5015:../freertos/tasks.c **** 				{
 6232              		.loc 1 5015 5 is_stmt 1 view .LVU1720
 6233              	@ ../freertos/tasks.c:5015: 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
5015:../freertos/tasks.c **** 				{
 6234              		.loc 1 5015 41 is_stmt 0 view .LVU1721
 6235 10e0 6B68     		ldr	r3, [r5, #4]	@ pxCurrentTCB.134_12, pxCurrentTCB
 6236              	@ ../freertos/tasks.c:5015: 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
5015:../freertos/tasks.c **** 				{
 6237              		.loc 1 5015 7 view .LVU1722
 6238 10e2 E26A     		ldr	r2, [r4, #44]	@ MEM[(struct TCB_t *)xTaskToNotify_17(D)].uxPriority, MEM[(struct TCB_t *)xTask
 6239 10e4 DB6A     		ldr	r3, [r3, #44]	@ pxCurrentTCB.134_12->uxPriority, pxCurrentTCB.134_12->uxPriority
 6240 10e6 9A42     		cmp	r2, r3	@ MEM[(struct TCB_t *)xTaskToNotify_17(D)].uxPriority, pxCurrentTCB.134_12->uxPriority
 6241 10e8 04D9     		bls	.L444		@,
5019:../freertos/tasks.c **** 					{
 6242              		.loc 1 5019 6 is_stmt 1 view .LVU1723
 6243 10ea 0123     		movs	r3, #1	@ tmp159,
 6244              	@ ../freertos/tasks.c:5019: 					if( pxHigherPriorityTaskWoken != NULL )
5019:../freertos/tasks.c **** 					{
 6245              		.loc 1 5019 8 is_stmt 0 view .LVU1724
 6246 10ec 07B1     		cbz	r7, .L448	@ pxHigherPriorityTaskWoken,
5021:../freertos/tasks.c **** 					}
 6247              		.loc 1 5021 7 is_stmt 1 view .LVU1725
 6248              	@ ../freertos/tasks.c:5021: 						*pxHigherPriorityTaskWoken = pdTRUE;
5021:../freertos/tasks.c **** 					}
 6249              		.loc 1 5021 34 is_stmt 0 view .LVU1726
 6250 10ee 3B60     		str	r3, [r7]	@ tmp159, *pxHigherPriorityTaskWoken_26(D)
 6251              	.L448:
5027:../freertos/tasks.c **** 				}
 6252              		.loc 1 5027 6 is_stmt 1 view .LVU1727
 6253              	@ ../freertos/tasks.c:5027: 					xYieldPending = pdTRUE;
5027:../freertos/tasks.c **** 				}
 6254              		.loc 1 5027 20 is_stmt 0 view .LVU1728
 6255 10f0 C5F80031 		str	r3, [r5, #256]	@ tmp159, xYieldPending
 6256              	.L444:
5031:../freertos/tasks.c **** 				}
 6257              		.loc 1 5031 30 is_stmt 1 view .LVU1729
5035:../freertos/tasks.c **** 	}
 6258              		.loc 1 5035 3 view .LVU1730
 6259              	.LVL390:
 6260              	.LBB166:
 6261              	.LBI166:
 227:../freertos/portable/GCC/ARM_CM3/portmacro.h **** {
 6262              		.loc 2 227 30 view .LVU1731
 6263              	.LBB167:
 6264              		.loc 2 229 2 view .LVU1732
 6265              		.syntax unified
 6266              	@ 229 "../freertos/portable/GCC/ARM_CM3/portmacro.h" 1
 6267 10f4 88F31188 			msr basepri, r8		@ ulOriginalBASEPRI
 6268              	@ 0 "" 2
 6269              	.LVL391:
 6270              		.loc 2 229 2 is_stmt 0 view .LVU1733
 6271              		.thumb
 6272              		.syntax unified
 6273              	.LBE167:
 6274              	.LBE166:
 6275              	@ ../freertos/tasks.c:5036: 	}
5036:../freertos/tasks.c **** 
ARM GAS  /tmp/ccaP1CVS.s 			page 236


 6276              		.loc 1 5036 2 view .LVU1734
 6277 10f8 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}	@
 6278              	.LVL392:
 6279              	.L445:
5012:../freertos/tasks.c **** 				}
 6280              		.loc 1 5012 6 is_stmt 1 view .LVU1735
 6281 10fc 00F11801 		add	r1, r0, #24	@, xTaskToNotify,
 6282              	.LVL393:
5012:../freertos/tasks.c **** 				}
 6283              		.loc 1 5012 6 is_stmt 0 view .LVU1736
 6284 1100 05F1D400 		add	r0, r5, #212	@, tmp139,
 6285              	.LVL394:
5012:../freertos/tasks.c **** 				}
 6286              		.loc 1 5012 6 view .LVU1737
 6287 1104 EAE7     		b	.L452		@
 6288              	.L454:
 6289 1106 00BF     		.align	2
 6290              	.L453:
 6291 1108 00000000 		.word	.LANCHOR0
 6292              		.cfi_endproc
 6293              	.LFE60:
 6294              		.size	vTaskNotifyGiveFromISR, .-vTaskNotifyGiveFromISR
 6295              		.align	1
 6296              		.global	xTaskNotifyStateClear
 6297              		.syntax unified
 6298              		.thumb
 6299              		.thumb_func
 6300              		.type	xTaskNotifyStateClear, %function
 6301              	xTaskNotifyStateClear:
 6302              	.LVL395:
 6303              	.LFB61:
5045:../freertos/tasks.c **** 	TCB_t *pxTCB;
 6304              		.loc 1 5045 2 is_stmt 1 view -0
 6305              		.cfi_startproc
 6306              		@ args = 0, pretend = 0, frame = 0
 6307              		@ frame_needed = 0, uses_anonymous_args = 0
5046:../freertos/tasks.c **** 	BaseType_t xReturn;
 6308              		.loc 1 5046 2 view .LVU1739
5047:../freertos/tasks.c **** 
 6309              		.loc 1 5047 2 view .LVU1740
5051:../freertos/tasks.c **** 
 6310              		.loc 1 5051 3 view .LVU1741
 6311              	@ ../freertos/tasks.c:5045: 	{
5045:../freertos/tasks.c **** 	TCB_t *pxTCB;
 6312              		.loc 1 5045 2 is_stmt 0 view .LVU1742
 6313 110c 10B5     		push	{r4, lr}	@
 6314              	.LCFI53:
 6315              		.cfi_def_cfa_offset 8
 6316              		.cfi_offset 4, -8
 6317              		.cfi_offset 14, -4
 6318              	@ ../freertos/tasks.c:5051: 		pxTCB = prvGetTCBFromHandle( xTask );
5051:../freertos/tasks.c **** 
 6319              		.loc 1 5051 11 view .LVU1743
 6320 110e 0446     		mov	r4, r0	@ xTask, tmp124
 6321 1110 08B9     		cbnz	r0, .L456	@ xTask,
 6322              	@ ../freertos/tasks.c:5051: 		pxTCB = prvGetTCBFromHandle( xTask );
5051:../freertos/tasks.c **** 
ARM GAS  /tmp/ccaP1CVS.s 			page 237


 6323              		.loc 1 5051 11 discriminator 1 view .LVU1744
 6324 1112 084B     		ldr	r3, .L459	@ tmp116,
 6325 1114 5C68     		ldr	r4, [r3, #4]	@ xTask, pxCurrentTCB
 6326              	.LVL396:
 6327              	.L456:
5053:../freertos/tasks.c **** 		{
 6328              		.loc 1 5053 3 is_stmt 1 discriminator 4 view .LVU1745
 6329 1116 FFF7FEFF 		bl	vPortEnterCritical		@
 6330              	.LVL397:
5055:../freertos/tasks.c **** 			{
 6331              		.loc 1 5055 4 discriminator 4 view .LVU1746
 6332 111a 0020     		movs	r0, #0	@ <retval>,
5057:../freertos/tasks.c **** 				xReturn = pdPASS;
 6333              		.loc 1 5057 5 discriminator 4 view .LVU1747
 6334              	@ ../freertos/tasks.c:5055: 			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
5055:../freertos/tasks.c **** 			{
 6335              		.loc 1 5055 13 is_stmt 0 discriminator 4 view .LVU1748
 6336 111c 94F85830 		ldrb	r3, [r4, #88]	@ zero_extendqisi2	@ iftmp.135_3->ucNotifyState, iftmp.135_3->ucNotifyState
 6337              	@ ../freertos/tasks.c:5055: 			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
5055:../freertos/tasks.c **** 			{
 6338              		.loc 1 5055 6 discriminator 4 view .LVU1749
 6339 1120 022B     		cmp	r3, #2	@ iftmp.135_3->ucNotifyState,
 6340              	@ ../freertos/tasks.c:5057: 				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
5057:../freertos/tasks.c **** 				xReturn = pdPASS;
 6341              		.loc 1 5057 26 discriminator 4 view .LVU1750
 6342 1122 0ABF     		itet	eq
 6343 1124 84F85800 		strbeq	r0, [r4, #88]	@ <retval>, iftmp.135_3->ucNotifyState
5058:../freertos/tasks.c **** 			}
 6344              		.loc 1 5058 5 is_stmt 1 discriminator 4 view .LVU1751
 6345              	.LVL398:
 6346              	@ ../freertos/tasks.c:5062: 				xReturn = pdFAIL;
5062:../freertos/tasks.c **** 			}
 6347              		.loc 1 5062 13 is_stmt 0 discriminator 4 view .LVU1752
 6348 1128 0446     		movne	r4, r0	@ <retval>, <retval>
 6349              	.LVL399:
 6350              	@ ../freertos/tasks.c:5058: 				xReturn = pdPASS;
5058:../freertos/tasks.c **** 			}
 6351              		.loc 1 5058 13 discriminator 4 view .LVU1753
 6352 112a 0124     		moveq	r4, #1	@ <retval>,
 6353              	.LVL400:
5065:../freertos/tasks.c **** 
 6354              		.loc 1 5065 3 is_stmt 1 discriminator 4 view .LVU1754
 6355 112c FFF7FEFF 		bl	vPortExitCritical		@
 6356              	.LVL401:
5067:../freertos/tasks.c **** 	}
 6357              		.loc 1 5067 3 discriminator 4 view .LVU1755
 6358              	@ ../freertos/tasks.c:5068: 	}
5068:../freertos/tasks.c **** 
 6359              		.loc 1 5068 2 is_stmt 0 discriminator 4 view .LVU1756
 6360 1130 2046     		mov	r0, r4	@, <retval>
 6361 1132 10BD     		pop	{r4, pc}	@
 6362              	.LVL402:
 6363              	.L460:
5068:../freertos/tasks.c **** 
 6364              		.loc 1 5068 2 discriminator 4 view .LVU1757
 6365              		.align	2
 6366              	.L459:
ARM GAS  /tmp/ccaP1CVS.s 			page 238


 6367 1134 00000000 		.word	.LANCHOR0
 6368              		.cfi_endproc
 6369              	.LFE61:
 6370              		.size	xTaskNotifyStateClear, .-xTaskNotifyStateClear
 6371              		.global	pxCurrentTCB
 6372              		.bss
 6373              		.align	2
 6374              		.set	.LANCHOR0,. + 0
 6375              		.type	xTickCount, %object
 6376              		.size	xTickCount, 4
 6377              	xTickCount:
 6378 0000 00000000 		.space	4
 6379              		.type	pxCurrentTCB, %object
 6380              		.size	pxCurrentTCB, 4
 6381              	pxCurrentTCB:
 6382 0004 00000000 		.space	4
 6383              		.type	uxTopReadyPriority, %object
 6384              		.size	uxTopReadyPriority, 4
 6385              	uxTopReadyPriority:
 6386 0008 00000000 		.space	4
 6387              		.type	xSuspendedTaskList, %object
 6388              		.size	xSuspendedTaskList, 20
 6389              	xSuspendedTaskList:
 6390 000c 00000000 		.space	20
 6390      00000000 
 6390      00000000 
 6390      00000000 
 6390      00000000 
 6391              		.type	pxOverflowDelayedTaskList, %object
 6392              		.size	pxOverflowDelayedTaskList, 4
 6393              	pxOverflowDelayedTaskList:
 6394 0020 00000000 		.space	4
 6395              		.type	pxDelayedTaskList, %object
 6396              		.size	pxDelayedTaskList, 4
 6397              	pxDelayedTaskList:
 6398 0024 00000000 		.space	4
 6399              		.type	xNextTaskUnblockTime, %object
 6400              		.size	xNextTaskUnblockTime, 4
 6401              	xNextTaskUnblockTime:
 6402 0028 00000000 		.space	4
 6403              		.type	xTasksWaitingTermination, %object
 6404              		.size	xTasksWaitingTermination, 20
 6405              	xTasksWaitingTermination:
 6406 002c 00000000 		.space	20
 6406      00000000 
 6406      00000000 
 6406      00000000 
 6406      00000000 
 6407              		.type	uxCurrentNumberOfTasks, %object
 6408              		.size	uxCurrentNumberOfTasks, 4
 6409              	uxCurrentNumberOfTasks:
 6410 0040 00000000 		.space	4
 6411              		.type	uxDeletedTasksWaitingCleanUp, %object
 6412              		.size	uxDeletedTasksWaitingCleanUp, 4
 6413              	uxDeletedTasksWaitingCleanUp:
 6414 0044 00000000 		.space	4
 6415              		.type	pxReadyTasksLists, %object
ARM GAS  /tmp/ccaP1CVS.s 			page 239


 6416              		.size	pxReadyTasksLists, 100
 6417              	pxReadyTasksLists:
 6418 0048 00000000 		.space	100
 6418      00000000 
 6418      00000000 
 6418      00000000 
 6418      00000000 
 6419              		.type	xDelayedTaskList1, %object
 6420              		.size	xDelayedTaskList1, 20
 6421              	xDelayedTaskList1:
 6422 00ac 00000000 		.space	20
 6422      00000000 
 6422      00000000 
 6422      00000000 
 6422      00000000 
 6423              		.type	xDelayedTaskList2, %object
 6424              		.size	xDelayedTaskList2, 20
 6425              	xDelayedTaskList2:
 6426 00c0 00000000 		.space	20
 6426      00000000 
 6426      00000000 
 6426      00000000 
 6426      00000000 
 6427              		.type	xPendingReadyList, %object
 6428              		.size	xPendingReadyList, 20
 6429              	xPendingReadyList:
 6430 00d4 00000000 		.space	20
 6430      00000000 
 6430      00000000 
 6430      00000000 
 6430      00000000 
 6431              		.type	xSchedulerRunning, %object
 6432              		.size	xSchedulerRunning, 4
 6433              	xSchedulerRunning:
 6434 00e8 00000000 		.space	4
 6435              		.type	uxTaskNumber, %object
 6436              		.size	uxTaskNumber, 4
 6437              	uxTaskNumber:
 6438 00ec 00000000 		.space	4
 6439              		.type	uxSchedulerSuspended, %object
 6440              		.size	uxSchedulerSuspended, 4
 6441              	uxSchedulerSuspended:
 6442 00f0 00000000 		.space	4
 6443              		.type	xIdleTaskHandle, %object
 6444              		.size	xIdleTaskHandle, 4
 6445              	xIdleTaskHandle:
 6446 00f4 00000000 		.space	4
 6447              		.type	xNumOfOverflows, %object
 6448              		.size	xNumOfOverflows, 4
 6449              	xNumOfOverflows:
 6450 00f8 00000000 		.space	4
 6451              		.type	uxPendedTicks, %object
 6452              		.size	uxPendedTicks, 4
 6453              	uxPendedTicks:
 6454 00fc 00000000 		.space	4
 6455              		.type	xYieldPending, %object
 6456              		.size	xYieldPending, 4
ARM GAS  /tmp/ccaP1CVS.s 			page 240


 6457              	xYieldPending:
 6458 0100 00000000 		.space	4
 6459              		.text
 6460              	.Letext0:
 6461              		.file 3 "/usr/lib/gcc/arm-none-eabi/10.3.1/include/stddef.h"
 6462              		.file 4 "/usr/arm-none-eabi/include/machine/_default_types.h"
 6463              		.file 5 "/usr/arm-none-eabi/include/sys/_stdint.h"
 6464              		.file 6 "../freertos/include/projdefs.h"
 6465              		.file 7 "../freertos/include/list.h"
 6466              		.file 8 "../freertos/include/task.h"
 6467              		.file 9 "../freertos/include/portable.h"
 6468              		.file 10 "../freertos/include/timers.h"
 6469              		.file 11 "/usr/arm-none-eabi/include/string.h"
 6470              		.section	.debug_info,"",%progbits
 6471              	.Ldebug_info0:
 6472 0000 2C2B0000 		.4byte	0x2b2c
 6473 0004 0200     		.2byte	0x2
 6474 0006 00000000 		.4byte	.Ldebug_abbrev0
 6475 000a 04       		.byte	0x4
 6476 000b 01       		.uleb128 0x1
 6477 000c 7D0A0000 		.4byte	.LASF263
 6478 0010 0C       		.byte	0xc
 6479 0011 E8010000 		.4byte	.LASF264
 6480 0015 7E100000 		.4byte	.LASF265
 6481 0019 00000000 		.4byte	.Ltext0
 6482 001d 38110000 		.4byte	.Letext0
 6483 0021 00000000 		.4byte	.Ldebug_line0
 6484 0025 02       		.uleb128 0x2
 6485 0026 1B050000 		.4byte	.LASF4
 6486 002a 03       		.byte	0x3
 6487 002b D1       		.byte	0xd1
 6488 002c 17       		.byte	0x17
 6489 002d 31000000 		.4byte	0x31
 6490 0031 03       		.uleb128 0x3
 6491 0032 04       		.byte	0x4
 6492 0033 07       		.byte	0x7
 6493 0034 55010000 		.4byte	.LASF0
 6494 0038 04       		.uleb128 0x4
 6495 0039 04       		.byte	0x4
 6496 003a 05       		.byte	0x5
 6497 003b 696E7400 		.ascii	"int\000"
 6498 003f 03       		.uleb128 0x3
 6499 0040 08       		.byte	0x8
 6500 0041 05       		.byte	0x5
 6501 0042 0F080000 		.4byte	.LASF1
 6502 0046 03       		.uleb128 0x3
 6503 0047 08       		.byte	0x8
 6504 0048 04       		.byte	0x4
 6505 0049 EB090000 		.4byte	.LASF2
 6506 004d 03       		.uleb128 0x3
 6507 004e 01       		.byte	0x1
 6508 004f 06       		.byte	0x6
 6509 0050 B40F0000 		.4byte	.LASF3
 6510 0054 02       		.uleb128 0x2
 6511 0055 A90C0000 		.4byte	.LASF5
 6512 0059 04       		.byte	0x4
 6513 005a 2B       		.byte	0x2b
ARM GAS  /tmp/ccaP1CVS.s 			page 241


 6514 005b 18       		.byte	0x18
 6515 005c 60000000 		.4byte	0x60
 6516 0060 03       		.uleb128 0x3
 6517 0061 01       		.byte	0x1
 6518 0062 08       		.byte	0x8
 6519 0063 ED0D0000 		.4byte	.LASF6
 6520 0067 03       		.uleb128 0x3
 6521 0068 02       		.byte	0x2
 6522 0069 05       		.byte	0x5
 6523 006a 260B0000 		.4byte	.LASF7
 6524 006e 02       		.uleb128 0x2
 6525 006f 8A040000 		.4byte	.LASF8
 6526 0073 04       		.byte	0x4
 6527 0074 39       		.byte	0x39
 6528 0075 19       		.byte	0x19
 6529 0076 7A000000 		.4byte	0x7a
 6530 007a 03       		.uleb128 0x3
 6531 007b 02       		.byte	0x2
 6532 007c 07       		.byte	0x7
 6533 007d C00F0000 		.4byte	.LASF9
 6534 0081 03       		.uleb128 0x3
 6535 0082 04       		.byte	0x4
 6536 0083 05       		.byte	0x5
 6537 0084 7F0B0000 		.4byte	.LASF10
 6538 0088 02       		.uleb128 0x2
 6539 0089 1A0E0000 		.4byte	.LASF11
 6540 008d 04       		.byte	0x4
 6541 008e 4F       		.byte	0x4f
 6542 008f 19       		.byte	0x19
 6543 0090 94000000 		.4byte	0x94
 6544 0094 03       		.uleb128 0x3
 6545 0095 04       		.byte	0x4
 6546 0096 07       		.byte	0x7
 6547 0097 1B0D0000 		.4byte	.LASF12
 6548 009b 03       		.uleb128 0x3
 6549 009c 08       		.byte	0x8
 6550 009d 07       		.byte	0x7
 6551 009e F9030000 		.4byte	.LASF13
 6552 00a2 05       		.uleb128 0x5
 6553 00a3 04       		.byte	0x4
 6554 00a4 06       		.uleb128 0x6
 6555 00a5 A2000000 		.4byte	0xa2
 6556 00a9 07       		.uleb128 0x7
 6557 00aa 04       		.byte	0x4
 6558 00ab AF000000 		.4byte	0xaf
 6559 00af 03       		.uleb128 0x3
 6560 00b0 01       		.byte	0x1
 6561 00b1 08       		.byte	0x8
 6562 00b2 AE060000 		.4byte	.LASF14
 6563 00b6 06       		.uleb128 0x6
 6564 00b7 AF000000 		.4byte	0xaf
 6565 00bb 07       		.uleb128 0x7
 6566 00bc 04       		.byte	0x4
 6567 00bd B6000000 		.4byte	0xb6
 6568 00c1 06       		.uleb128 0x6
 6569 00c2 BB000000 		.4byte	0xbb
 6570 00c6 02       		.uleb128 0x2
ARM GAS  /tmp/ccaP1CVS.s 			page 242


 6571 00c7 89070000 		.4byte	.LASF15
 6572 00cb 05       		.byte	0x5
 6573 00cc 18       		.byte	0x18
 6574 00cd 13       		.byte	0x13
 6575 00ce 54000000 		.4byte	0x54
 6576 00d2 08       		.uleb128 0x8
 6577 00d3 C6000000 		.4byte	0xc6
 6578 00d7 06       		.uleb128 0x6
 6579 00d8 C6000000 		.4byte	0xc6
 6580 00dc 02       		.uleb128 0x2
 6581 00dd 060A0000 		.4byte	.LASF16
 6582 00e1 05       		.byte	0x5
 6583 00e2 24       		.byte	0x24
 6584 00e3 14       		.byte	0x14
 6585 00e4 6E000000 		.4byte	0x6e
 6586 00e8 06       		.uleb128 0x6
 6587 00e9 DC000000 		.4byte	0xdc
 6588 00ed 02       		.uleb128 0x2
 6589 00ee 4F030000 		.4byte	.LASF17
 6590 00f2 05       		.byte	0x5
 6591 00f3 30       		.byte	0x30
 6592 00f4 14       		.byte	0x14
 6593 00f5 88000000 		.4byte	0x88
 6594 00f9 08       		.uleb128 0x8
 6595 00fa ED000000 		.4byte	0xed
 6596 00fe 06       		.uleb128 0x6
 6597 00ff ED000000 		.4byte	0xed
 6598 0103 02       		.uleb128 0x2
 6599 0104 B5080000 		.4byte	.LASF18
 6600 0108 06       		.byte	0x6
 6601 0109 23       		.byte	0x23
 6602 010a 10       		.byte	0x10
 6603 010b 0F010000 		.4byte	0x10f
 6604 010f 07       		.uleb128 0x7
 6605 0110 04       		.byte	0x4
 6606 0111 15010000 		.4byte	0x115
 6607 0115 09       		.uleb128 0x9
 6608 0116 01       		.byte	0x1
 6609 0117 21010000 		.4byte	0x121
 6610 011b 0A       		.uleb128 0xa
 6611 011c A2000000 		.4byte	0xa2
 6612 0120 00       		.byte	0
 6613 0121 02       		.uleb128 0x2
 6614 0122 88010000 		.4byte	.LASF19
 6615 0126 02       		.byte	0x2
 6616 0127 37       		.byte	0x37
 6617 0128 18       		.byte	0x18
 6618 0129 ED000000 		.4byte	0xed
 6619 012d 08       		.uleb128 0x8
 6620 012e 21010000 		.4byte	0x121
 6621 0132 02       		.uleb128 0x2
 6622 0133 70080000 		.4byte	.LASF20
 6623 0137 02       		.byte	0x2
 6624 0138 38       		.byte	0x38
 6625 0139 0E       		.byte	0xe
 6626 013a 81000000 		.4byte	0x81
 6627 013e 08       		.uleb128 0x8
ARM GAS  /tmp/ccaP1CVS.s 			page 243


 6628 013f 32010000 		.4byte	0x132
 6629 0143 06       		.uleb128 0x6
 6630 0144 32010000 		.4byte	0x132
 6631 0148 02       		.uleb128 0x2
 6632 0149 F5060000 		.4byte	.LASF21
 6633 014d 02       		.byte	0x2
 6634 014e 39       		.byte	0x39
 6635 014f 17       		.byte	0x17
 6636 0150 94000000 		.4byte	0x94
 6637 0154 08       		.uleb128 0x8
 6638 0155 48010000 		.4byte	0x148
 6639 0159 06       		.uleb128 0x6
 6640 015a 48010000 		.4byte	0x148
 6641 015e 02       		.uleb128 0x2
 6642 015f C3090000 		.4byte	.LASF22
 6643 0163 02       		.byte	0x2
 6644 0164 3F       		.byte	0x3f
 6645 0165 13       		.byte	0x13
 6646 0166 ED000000 		.4byte	0xed
 6647 016a 08       		.uleb128 0x8
 6648 016b 5E010000 		.4byte	0x15e
 6649 016f 06       		.uleb128 0x6
 6650 0170 5E010000 		.4byte	0x15e
 6651 0174 0B       		.uleb128 0xb
 6652 0175 BB010000 		.4byte	.LASF28
 6653 0179 14       		.byte	0x14
 6654 017a 07       		.byte	0x7
 6655 017b 8C       		.byte	0x8c
 6656 017c 08       		.byte	0x8
 6657 017d CD010000 		.4byte	0x1cd
 6658 0181 0C       		.uleb128 0xc
 6659 0182 740B0000 		.4byte	.LASF23
 6660 0186 07       		.byte	0x7
 6661 0187 8F       		.byte	0x8f
 6662 0188 21       		.byte	0x21
 6663 0189 5E010000 		.4byte	0x15e
 6664 018d 02       		.byte	0x2
 6665 018e 23       		.byte	0x23
 6666 018f 00       		.uleb128 0
 6667 0190 0C       		.uleb128 0xc
 6668 0191 C4080000 		.4byte	.LASF24
 6669 0195 07       		.byte	0x7
 6670 0196 90       		.byte	0x90
 6671 0197 2A       		.byte	0x2a
 6672 0198 CD010000 		.4byte	0x1cd
 6673 019c 02       		.byte	0x2
 6674 019d 23       		.byte	0x23
 6675 019e 04       		.uleb128 0x4
 6676 019f 0C       		.uleb128 0xc
 6677 01a0 66040000 		.4byte	.LASF25
 6678 01a4 07       		.byte	0x7
 6679 01a5 91       		.byte	0x91
 6680 01a6 2A       		.byte	0x2a
 6681 01a7 CD010000 		.4byte	0x1cd
 6682 01ab 02       		.byte	0x2
 6683 01ac 23       		.byte	0x23
 6684 01ad 08       		.uleb128 0x8
ARM GAS  /tmp/ccaP1CVS.s 			page 244


 6685 01ae 0C       		.uleb128 0xc
 6686 01af B10E0000 		.4byte	.LASF26
 6687 01b3 07       		.byte	0x7
 6688 01b4 92       		.byte	0x92
 6689 01b5 09       		.byte	0x9
 6690 01b6 A2000000 		.4byte	0xa2
 6691 01ba 02       		.byte	0x2
 6692 01bb 23       		.byte	0x23
 6693 01bc 0C       		.uleb128 0xc
 6694 01bd 0C       		.uleb128 0xc
 6695 01be 4E0A0000 		.4byte	.LASF27
 6696 01c2 07       		.byte	0x7
 6697 01c3 93       		.byte	0x93
 6698 01c4 25       		.byte	0x25
 6699 01c5 0E020000 		.4byte	0x20e
 6700 01c9 02       		.byte	0x2
 6701 01ca 23       		.byte	0x23
 6702 01cb 10       		.uleb128 0x10
 6703 01cc 00       		.byte	0
 6704 01cd 07       		.uleb128 0x7
 6705 01ce 04       		.byte	0x4
 6706 01cf 74010000 		.4byte	0x174
 6707 01d3 0B       		.uleb128 0xb
 6708 01d4 6F050000 		.4byte	.LASF29
 6709 01d8 14       		.byte	0x14
 6710 01d9 07       		.byte	0x7
 6711 01da A4       		.byte	0xa4
 6712 01db 10       		.byte	0x10
 6713 01dc 0E020000 		.4byte	0x20e
 6714 01e0 0C       		.uleb128 0xc
 6715 01e1 17000000 		.4byte	.LASF30
 6716 01e5 07       		.byte	0x7
 6717 01e6 A7       		.byte	0xa7
 6718 01e7 17       		.byte	0x17
 6719 01e8 54010000 		.4byte	0x154
 6720 01ec 02       		.byte	0x2
 6721 01ed 23       		.byte	0x23
 6722 01ee 00       		.uleb128 0
 6723 01ef 0C       		.uleb128 0xc
 6724 01f0 80010000 		.4byte	.LASF31
 6725 01f4 07       		.byte	0x7
 6726 01f5 A8       		.byte	0xa8
 6727 01f6 23       		.byte	0x23
 6728 01f7 67020000 		.4byte	0x267
 6729 01fb 02       		.byte	0x2
 6730 01fc 23       		.byte	0x23
 6731 01fd 04       		.uleb128 0x4
 6732 01fe 0C       		.uleb128 0xc
 6733 01ff 27070000 		.4byte	.LASF32
 6734 0203 07       		.byte	0x7
 6735 0204 A9       		.byte	0xa9
 6736 0205 11       		.byte	0x11
 6737 0206 5B020000 		.4byte	0x25b
 6738 020a 02       		.byte	0x2
 6739 020b 23       		.byte	0x23
 6740 020c 08       		.uleb128 0x8
 6741 020d 00       		.byte	0
ARM GAS  /tmp/ccaP1CVS.s 			page 245


 6742 020e 07       		.uleb128 0x7
 6743 020f 04       		.byte	0x4
 6744 0210 D3010000 		.4byte	0x1d3
 6745 0214 02       		.uleb128 0x2
 6746 0215 B3060000 		.4byte	.LASF33
 6747 0219 07       		.byte	0x7
 6748 021a 96       		.byte	0x96
 6749 021b 1B       		.byte	0x1b
 6750 021c 74010000 		.4byte	0x174
 6751 0220 0B       		.uleb128 0xb
 6752 0221 42050000 		.4byte	.LASF34
 6753 0225 0C       		.byte	0xc
 6754 0226 07       		.byte	0x7
 6755 0227 98       		.byte	0x98
 6756 0228 08       		.byte	0x8
 6757 0229 5B020000 		.4byte	0x25b
 6758 022d 0C       		.uleb128 0xc
 6759 022e 740B0000 		.4byte	.LASF23
 6760 0232 07       		.byte	0x7
 6761 0233 9B       		.byte	0x9b
 6762 0234 21       		.byte	0x21
 6763 0235 5E010000 		.4byte	0x15e
 6764 0239 02       		.byte	0x2
 6765 023a 23       		.byte	0x23
 6766 023b 00       		.uleb128 0
 6767 023c 0C       		.uleb128 0xc
 6768 023d C4080000 		.4byte	.LASF24
 6769 0241 07       		.byte	0x7
 6770 0242 9C       		.byte	0x9c
 6771 0243 2A       		.byte	0x2a
 6772 0244 CD010000 		.4byte	0x1cd
 6773 0248 02       		.byte	0x2
 6774 0249 23       		.byte	0x23
 6775 024a 04       		.uleb128 0x4
 6776 024b 0C       		.uleb128 0xc
 6777 024c 66040000 		.4byte	.LASF25
 6778 0250 07       		.byte	0x7
 6779 0251 9D       		.byte	0x9d
 6780 0252 2A       		.byte	0x2a
 6781 0253 CD010000 		.4byte	0x1cd
 6782 0257 02       		.byte	0x2
 6783 0258 23       		.byte	0x23
 6784 0259 08       		.uleb128 0x8
 6785 025a 00       		.byte	0
 6786 025b 02       		.uleb128 0x2
 6787 025c 41070000 		.4byte	.LASF35
 6788 0260 07       		.byte	0x7
 6789 0261 9F       		.byte	0x9f
 6790 0262 20       		.byte	0x20
 6791 0263 20020000 		.4byte	0x220
 6792 0267 07       		.uleb128 0x7
 6793 0268 04       		.byte	0x4
 6794 0269 14020000 		.4byte	0x214
 6795 026d 02       		.uleb128 0x2
 6796 026e AF090000 		.4byte	.LASF36
 6797 0272 07       		.byte	0x7
 6798 0273 AB       		.byte	0xab
ARM GAS  /tmp/ccaP1CVS.s 			page 246


 6799 0274 03       		.byte	0x3
 6800 0275 D3010000 		.4byte	0x1d3
 6801 0279 06       		.uleb128 0x6
 6802 027a 6D020000 		.4byte	0x26d
 6803 027e 02       		.uleb128 0x2
 6804 027f 4E090000 		.4byte	.LASF37
 6805 0283 08       		.byte	0x8
 6806 0284 46       		.byte	0x46
 6807 0285 25       		.byte	0x25
 6808 0286 8F020000 		.4byte	0x28f
 6809 028a 06       		.uleb128 0x6
 6810 028b 7E020000 		.4byte	0x27e
 6811 028f 07       		.uleb128 0x7
 6812 0290 04       		.byte	0x4
 6813 0291 95020000 		.4byte	0x295
 6814 0295 0B       		.uleb128 0xb
 6815 0296 A7000000 		.4byte	.LASF38
 6816 029a 5C       		.byte	0x5c
 6817 029b 01       		.byte	0x1
 6818 029c FC       		.byte	0xfc
 6819 029d 10       		.byte	0x10
 6820 029e 62030000 		.4byte	0x362
 6821 02a2 0C       		.uleb128 0xc
 6822 02a3 09100000 		.4byte	.LASF39
 6823 02a7 01       		.byte	0x1
 6824 02a8 FE       		.byte	0xfe
 6825 02a9 18       		.byte	0x18
 6826 02aa 05050000 		.4byte	0x505
 6827 02ae 02       		.byte	0x2
 6828 02af 23       		.byte	0x23
 6829 02b0 00       		.uleb128 0
 6830 02b1 0D       		.uleb128 0xd
 6831 02b2 DF0F0000 		.4byte	.LASF40
 6832 02b6 01       		.byte	0x1
 6833 02b7 0401     		.2byte	0x104
 6834 02b9 0F       		.byte	0xf
 6835 02ba 14020000 		.4byte	0x214
 6836 02be 02       		.byte	0x2
 6837 02bf 23       		.byte	0x23
 6838 02c0 04       		.uleb128 0x4
 6839 02c1 0D       		.uleb128 0xd
 6840 02c2 790E0000 		.4byte	.LASF41
 6841 02c6 01       		.byte	0x1
 6842 02c7 0501     		.2byte	0x105
 6843 02c9 0F       		.byte	0xf
 6844 02ca 14020000 		.4byte	0x214
 6845 02ce 02       		.byte	0x2
 6846 02cf 23       		.byte	0x23
 6847 02d0 18       		.uleb128 0x18
 6848 02d1 0D       		.uleb128 0xd
 6849 02d2 79000000 		.4byte	.LASF42
 6850 02d6 01       		.byte	0x1
 6851 02d7 0601     		.2byte	0x106
 6852 02d9 10       		.byte	0x10
 6853 02da 48010000 		.4byte	0x148
 6854 02de 02       		.byte	0x2
 6855 02df 23       		.byte	0x23
ARM GAS  /tmp/ccaP1CVS.s 			page 247


 6856 02e0 2C       		.uleb128 0x2c
 6857 02e1 0D       		.uleb128 0xd
 6858 02e2 390C0000 		.4byte	.LASF43
 6859 02e6 01       		.byte	0x1
 6860 02e7 0701     		.2byte	0x107
 6861 02e9 11       		.byte	0x11
 6862 02ea 5E040000 		.4byte	0x45e
 6863 02ee 02       		.byte	0x2
 6864 02ef 23       		.byte	0x23
 6865 02f0 30       		.uleb128 0x30
 6866 02f1 0D       		.uleb128 0xd
 6867 02f2 0C000000 		.4byte	.LASF44
 6868 02f6 01       		.byte	0x1
 6869 02f7 0801     		.2byte	0x108
 6870 02f9 0A       		.byte	0xa
 6871 02fa 0B050000 		.4byte	0x50b
 6872 02fe 02       		.byte	0x2
 6873 02ff 23       		.byte	0x23
 6874 0300 34       		.uleb128 0x34
 6875 0301 0D       		.uleb128 0xd
 6876 0302 E3020000 		.4byte	.LASF45
 6877 0306 01       		.byte	0x1
 6878 0307 1301     		.2byte	0x113
 6879 0309 10       		.byte	0x10
 6880 030a 48010000 		.4byte	0x148
 6881 030e 02       		.byte	0x2
 6882 030f 23       		.byte	0x23
 6883 0310 44       		.uleb128 0x44
 6884 0311 0D       		.uleb128 0xd
 6885 0312 41090000 		.4byte	.LASF46
 6886 0316 01       		.byte	0x1
 6887 0317 1401     		.2byte	0x114
 6888 0319 10       		.byte	0x10
 6889 031a 48010000 		.4byte	0x148
 6890 031e 02       		.byte	0x2
 6891 031f 23       		.byte	0x23
 6892 0320 48       		.uleb128 0x48
 6893 0321 0D       		.uleb128 0xd
 6894 0322 5A0E0000 		.4byte	.LASF47
 6895 0326 01       		.byte	0x1
 6896 0327 1801     		.2byte	0x118
 6897 0329 10       		.byte	0x10
 6898 032a 48010000 		.4byte	0x148
 6899 032e 02       		.byte	0x2
 6900 032f 23       		.byte	0x23
 6901 0330 4C       		.uleb128 0x4c
 6902 0331 0D       		.uleb128 0xd
 6903 0332 6F060000 		.4byte	.LASF48
 6904 0336 01       		.byte	0x1
 6905 0337 1901     		.2byte	0x119
 6906 0339 10       		.byte	0x10
 6907 033a 48010000 		.4byte	0x148
 6908 033e 02       		.byte	0x2
 6909 033f 23       		.byte	0x23
 6910 0340 50       		.uleb128 0x50
 6911 0341 0D       		.uleb128 0xd
 6912 0342 3D060000 		.4byte	.LASF49
ARM GAS  /tmp/ccaP1CVS.s 			page 248


 6913 0346 01       		.byte	0x1
 6914 0347 3401     		.2byte	0x134
 6915 0349 15       		.byte	0x15
 6916 034a F9000000 		.4byte	0xf9
 6917 034e 02       		.byte	0x2
 6918 034f 23       		.byte	0x23
 6919 0350 54       		.uleb128 0x54
 6920 0351 0D       		.uleb128 0xd
 6921 0352 58030000 		.4byte	.LASF50
 6922 0356 01       		.byte	0x1
 6923 0357 3501     		.2byte	0x135
 6924 0359 14       		.byte	0x14
 6925 035a D2000000 		.4byte	0xd2
 6926 035e 02       		.byte	0x2
 6927 035f 23       		.byte	0x23
 6928 0360 58       		.uleb128 0x58
 6929 0361 00       		.byte	0
 6930 0362 0E       		.uleb128 0xe
 6931 0363 07       		.byte	0x7
 6932 0364 01       		.byte	0x1
 6933 0365 60000000 		.4byte	0x60
 6934 0369 08       		.byte	0x8
 6935 036a 50       		.byte	0x50
 6936 036b 01       		.byte	0x1
 6937 036c 95030000 		.4byte	0x395
 6938 0370 0F       		.uleb128 0xf
 6939 0371 B70D0000 		.4byte	.LASF51
 6940 0375 00       		.byte	0
 6941 0376 0F       		.uleb128 0xf
 6942 0377 91070000 		.4byte	.LASF52
 6943 037b 01       		.byte	0x1
 6944 037c 0F       		.uleb128 0xf
 6945 037d C60E0000 		.4byte	.LASF53
 6946 0381 02       		.byte	0x2
 6947 0382 0F       		.uleb128 0xf
 6948 0383 9C000000 		.4byte	.LASF54
 6949 0387 03       		.byte	0x3
 6950 0388 0F       		.uleb128 0xf
 6951 0389 1D080000 		.4byte	.LASF55
 6952 038d 04       		.byte	0x4
 6953 038e 0F       		.uleb128 0xf
 6954 038f 430E0000 		.4byte	.LASF56
 6955 0393 05       		.byte	0x5
 6956 0394 00       		.byte	0
 6957 0395 02       		.uleb128 0x2
 6958 0396 A4090000 		.4byte	.LASF57
 6959 039a 08       		.byte	0x8
 6960 039b 57       		.byte	0x57
 6961 039c 03       		.byte	0x3
 6962 039d 62030000 		.4byte	0x362
 6963 03a1 0E       		.uleb128 0xe
 6964 03a2 07       		.byte	0x7
 6965 03a3 01       		.byte	0x1
 6966 03a4 60000000 		.4byte	0x60
 6967 03a8 08       		.byte	0x8
 6968 03a9 5B       		.byte	0x5b
 6969 03aa 01       		.byte	0x1
ARM GAS  /tmp/ccaP1CVS.s 			page 249


 6970 03ab CE030000 		.4byte	0x3ce
 6971 03af 0F       		.uleb128 0xf
 6972 03b0 2A010000 		.4byte	.LASF58
 6973 03b4 00       		.byte	0
 6974 03b5 0F       		.uleb128 0xf
 6975 03b6 E2090000 		.4byte	.LASF59
 6976 03ba 01       		.byte	0x1
 6977 03bb 0F       		.uleb128 0xf
 6978 03bc 37050000 		.4byte	.LASF60
 6979 03c0 02       		.byte	0x2
 6980 03c1 0F       		.uleb128 0xf
 6981 03c2 E2030000 		.4byte	.LASF61
 6982 03c6 03       		.byte	0x3
 6983 03c7 0F       		.uleb128 0xf
 6984 03c8 CB060000 		.4byte	.LASF62
 6985 03cc 04       		.byte	0x4
 6986 03cd 00       		.byte	0
 6987 03ce 02       		.uleb128 0x2
 6988 03cf FA040000 		.4byte	.LASF63
 6989 03d3 08       		.byte	0x8
 6990 03d4 61       		.byte	0x61
 6991 03d5 03       		.byte	0x3
 6992 03d6 A1030000 		.4byte	0x3a1
 6993 03da 0B       		.uleb128 0xb
 6994 03db 94010000 		.4byte	.LASF64
 6995 03df 08       		.byte	0x8
 6996 03e0 08       		.byte	0x8
 6997 03e1 66       		.byte	0x66
 6998 03e2 10       		.byte	0x10
 6999 03e3 06040000 		.4byte	0x406
 7000 03e7 0C       		.uleb128 0xc
 7001 03e8 8D020000 		.4byte	.LASF65
 7002 03ec 08       		.byte	0x8
 7003 03ed 68       		.byte	0x68
 7004 03ee 0D       		.byte	0xd
 7005 03ef 32010000 		.4byte	0x132
 7006 03f3 02       		.byte	0x2
 7007 03f4 23       		.byte	0x23
 7008 03f5 00       		.uleb128 0
 7009 03f6 0C       		.uleb128 0xc
 7010 03f7 97080000 		.4byte	.LASF66
 7011 03fb 08       		.byte	0x8
 7012 03fc 69       		.byte	0x69
 7013 03fd 0D       		.byte	0xd
 7014 03fe 5E010000 		.4byte	0x15e
 7015 0402 02       		.byte	0x2
 7016 0403 23       		.byte	0x23
 7017 0404 04       		.uleb128 0x4
 7018 0405 00       		.byte	0
 7019 0406 02       		.uleb128 0x2
 7020 0407 1A090000 		.4byte	.LASF67
 7021 040b 08       		.byte	0x8
 7022 040c 6A       		.byte	0x6a
 7023 040d 03       		.byte	0x3
 7024 040e DA030000 		.4byte	0x3da
 7025 0412 0B       		.uleb128 0xb
 7026 0413 F7090000 		.4byte	.LASF68
ARM GAS  /tmp/ccaP1CVS.s 			page 250


 7027 0417 0C       		.byte	0xc
 7028 0418 08       		.byte	0x8
 7029 0419 6F       		.byte	0x6f
 7030 041a 10       		.byte	0x10
 7031 041b 4D040000 		.4byte	0x44d
 7032 041f 0C       		.uleb128 0xc
 7033 0420 D10D0000 		.4byte	.LASF69
 7034 0424 08       		.byte	0x8
 7035 0425 71       		.byte	0x71
 7036 0426 08       		.byte	0x8
 7037 0427 A2000000 		.4byte	0xa2
 7038 042b 02       		.byte	0x2
 7039 042c 23       		.byte	0x23
 7040 042d 00       		.uleb128 0
 7041 042e 0C       		.uleb128 0xc
 7042 042f 60080000 		.4byte	.LASF70
 7043 0433 08       		.byte	0x8
 7044 0434 72       		.byte	0x72
 7045 0435 0B       		.byte	0xb
 7046 0436 ED000000 		.4byte	0xed
 7047 043a 02       		.byte	0x2
 7048 043b 23       		.byte	0x23
 7049 043c 04       		.uleb128 0x4
 7050 043d 0C       		.uleb128 0xc
 7051 043e EF020000 		.4byte	.LASF71
 7052 0442 08       		.byte	0x8
 7053 0443 73       		.byte	0x73
 7054 0444 0B       		.byte	0xb
 7055 0445 ED000000 		.4byte	0xed
 7056 0449 02       		.byte	0x2
 7057 044a 23       		.byte	0x23
 7058 044b 08       		.uleb128 0x8
 7059 044c 00       		.byte	0
 7060 044d 02       		.uleb128 0x2
 7061 044e C2070000 		.4byte	.LASF72
 7062 0452 08       		.byte	0x8
 7063 0453 74       		.byte	0x74
 7064 0454 03       		.byte	0x3
 7065 0455 12040000 		.4byte	0x412
 7066 0459 06       		.uleb128 0x6
 7067 045a 4D040000 		.4byte	0x44d
 7068 045e 07       		.uleb128 0x7
 7069 045f 04       		.byte	0x4
 7070 0460 21010000 		.4byte	0x121
 7071 0464 0B       		.uleb128 0xb
 7072 0465 880B0000 		.4byte	.LASF73
 7073 0469 24       		.byte	0x24
 7074 046a 08       		.byte	0x8
 7075 046b 89       		.byte	0x89
 7076 046c 10       		.byte	0x10
 7077 046d F9040000 		.4byte	0x4f9
 7078 0471 0C       		.uleb128 0xc
 7079 0472 22050000 		.4byte	.LASF74
 7080 0476 08       		.byte	0x8
 7081 0477 8B       		.byte	0x8b
 7082 0478 0F       		.byte	0xf
 7083 0479 7E020000 		.4byte	0x27e
ARM GAS  /tmp/ccaP1CVS.s 			page 251


 7084 047d 02       		.byte	0x2
 7085 047e 23       		.byte	0x23
 7086 047f 00       		.uleb128 0
 7087 0480 0C       		.uleb128 0xc
 7088 0481 0C000000 		.4byte	.LASF44
 7089 0485 08       		.byte	0x8
 7090 0486 8C       		.byte	0x8c
 7091 0487 0E       		.byte	0xe
 7092 0488 BB000000 		.4byte	0xbb
 7093 048c 02       		.byte	0x2
 7094 048d 23       		.byte	0x23
 7095 048e 04       		.uleb128 0x4
 7096 048f 0C       		.uleb128 0xc
 7097 0490 D7020000 		.4byte	.LASF75
 7098 0494 08       		.byte	0x8
 7099 0495 8D       		.byte	0x8d
 7100 0496 0E       		.byte	0xe
 7101 0497 48010000 		.4byte	0x148
 7102 049b 02       		.byte	0x2
 7103 049c 23       		.byte	0x23
 7104 049d 08       		.uleb128 0x8
 7105 049e 0C       		.uleb128 0xc
 7106 049f 300B0000 		.4byte	.LASF76
 7107 04a3 08       		.byte	0x8
 7108 04a4 8E       		.byte	0x8e
 7109 04a5 0D       		.byte	0xd
 7110 04a6 95030000 		.4byte	0x395
 7111 04aa 02       		.byte	0x2
 7112 04ab 23       		.byte	0x23
 7113 04ac 0C       		.uleb128 0xc
 7114 04ad 0C       		.uleb128 0xc
 7115 04ae 2B060000 		.4byte	.LASF77
 7116 04b2 08       		.byte	0x8
 7117 04b3 8F       		.byte	0x8f
 7118 04b4 0E       		.byte	0xe
 7119 04b5 48010000 		.4byte	0x148
 7120 04b9 02       		.byte	0x2
 7121 04ba 23       		.byte	0x23
 7122 04bb 10       		.uleb128 0x10
 7123 04bc 0C       		.uleb128 0xc
 7124 04bd 5A0E0000 		.4byte	.LASF47
 7125 04c1 08       		.byte	0x8
 7126 04c2 90       		.byte	0x90
 7127 04c3 0E       		.byte	0xe
 7128 04c4 48010000 		.4byte	0x148
 7129 04c8 02       		.byte	0x2
 7130 04c9 23       		.byte	0x23
 7131 04ca 14       		.uleb128 0x14
 7132 04cb 0C       		.uleb128 0xc
 7133 04cc C00D0000 		.4byte	.LASF78
 7134 04d0 08       		.byte	0x8
 7135 04d1 91       		.byte	0x91
 7136 04d2 0B       		.byte	0xb
 7137 04d3 ED000000 		.4byte	0xed
 7138 04d7 02       		.byte	0x2
 7139 04d8 23       		.byte	0x23
 7140 04d9 18       		.uleb128 0x18
ARM GAS  /tmp/ccaP1CVS.s 			page 252


 7141 04da 0C       		.uleb128 0xc
 7142 04db 1A0B0000 		.4byte	.LASF79
 7143 04df 08       		.byte	0x8
 7144 04e0 92       		.byte	0x92
 7145 04e1 0F       		.byte	0xf
 7146 04e2 5E040000 		.4byte	0x45e
 7147 04e6 02       		.byte	0x2
 7148 04e7 23       		.byte	0x23
 7149 04e8 1C       		.uleb128 0x1c
 7150 04e9 0C       		.uleb128 0xc
 7151 04ea 790F0000 		.4byte	.LASF80
 7152 04ee 08       		.byte	0x8
 7153 04ef 93       		.byte	0x93
 7154 04f0 19       		.byte	0x19
 7155 04f1 DC000000 		.4byte	0xdc
 7156 04f5 02       		.byte	0x2
 7157 04f6 23       		.byte	0x23
 7158 04f7 20       		.uleb128 0x20
 7159 04f8 00       		.byte	0
 7160 04f9 02       		.uleb128 0x2
 7161 04fa 2A050000 		.4byte	.LASF81
 7162 04fe 08       		.byte	0x8
 7163 04ff 94       		.byte	0x94
 7164 0500 03       		.byte	0x3
 7165 0501 64040000 		.4byte	0x464
 7166 0505 07       		.uleb128 0x7
 7167 0506 04       		.byte	0x4
 7168 0507 2D010000 		.4byte	0x12d
 7169 050b 10       		.uleb128 0x10
 7170 050c AF000000 		.4byte	0xaf
 7171 0510 1B050000 		.4byte	0x51b
 7172 0514 11       		.uleb128 0x11
 7173 0515 31000000 		.4byte	0x31
 7174 0519 0F       		.byte	0xf
 7175 051a 00       		.byte	0
 7176 051b 12       		.uleb128 0x12
 7177 051c 31030000 		.4byte	.LASF82
 7178 0520 01       		.byte	0x1
 7179 0521 4601     		.2byte	0x146
 7180 0523 03       		.byte	0x3
 7181 0524 95020000 		.4byte	0x295
 7182 0528 12       		.uleb128 0x12
 7183 0529 9E0E0000 		.4byte	.LASF83
 7184 052d 01       		.byte	0x1
 7185 052e 4A01     		.2byte	0x14a
 7186 0530 10       		.byte	0x10
 7187 0531 1B050000 		.4byte	0x51b
 7188 0535 06       		.uleb128 0x6
 7189 0536 28050000 		.4byte	0x528
 7190 053a 13       		.uleb128 0x13
 7191 053b 5A0A0000 		.4byte	.LASF105
 7192 053f 01       		.byte	0x1
 7193 0540 4E01     		.2byte	0x14e
 7194 0542 22       		.byte	0x22
 7195 0543 54050000 		.4byte	0x554
 7196 0547 01       		.byte	0x1
 7197 0548 05       		.byte	0x5
ARM GAS  /tmp/ccaP1CVS.s 			page 253


 7198 0549 03       		.byte	0x3
 7199 054a 00000000 		.4byte	pxCurrentTCB
 7200 054e 07       		.uleb128 0x7
 7201 054f 04       		.byte	0x4
 7202 0550 28050000 		.4byte	0x528
 7203 0554 08       		.uleb128 0x8
 7204 0555 4E050000 		.4byte	0x54e
 7205 0559 06       		.uleb128 0x6
 7206 055a 4E050000 		.4byte	0x54e
 7207 055e 10       		.uleb128 0x10
 7208 055f 6D020000 		.4byte	0x26d
 7209 0563 6E050000 		.4byte	0x56e
 7210 0567 11       		.uleb128 0x11
 7211 0568 31000000 		.4byte	0x31
 7212 056c 04       		.byte	0x4
 7213 056d 00       		.byte	0
 7214 056e 14       		.uleb128 0x14
 7215 056f C6010000 		.4byte	.LASF84
 7216 0573 01       		.byte	0x1
 7217 0574 5401     		.2byte	0x154
 7218 0576 1F       		.byte	0x1f
 7219 0577 5E050000 		.4byte	0x55e
 7220 057b 05       		.byte	0x5
 7221 057c 03       		.byte	0x3
 7222 057d 48000000 		.4byte	pxReadyTasksLists
 7223 0581 14       		.uleb128 0x14
 7224 0582 69020000 		.4byte	.LASF85
 7225 0586 01       		.byte	0x1
 7226 0587 5501     		.2byte	0x155
 7227 0589 1F       		.byte	0x1f
 7228 058a 6D020000 		.4byte	0x26d
 7229 058e 05       		.byte	0x5
 7230 058f 03       		.byte	0x3
 7231 0590 AC000000 		.4byte	xDelayedTaskList1
 7232 0594 14       		.uleb128 0x14
 7233 0595 7B020000 		.4byte	.LASF86
 7234 0599 01       		.byte	0x1
 7235 059a 5601     		.2byte	0x156
 7236 059c 1F       		.byte	0x1f
 7237 059d 6D020000 		.4byte	0x26d
 7238 05a1 05       		.byte	0x5
 7239 05a2 03       		.byte	0x3
 7240 05a3 C0000000 		.4byte	xDelayedTaskList2
 7241 05a7 14       		.uleb128 0x14
 7242 05a8 BB0B0000 		.4byte	.LASF87
 7243 05ac 01       		.byte	0x1
 7244 05ad 5701     		.2byte	0x157
 7245 05af 2A       		.byte	0x2a
 7246 05b0 C0050000 		.4byte	0x5c0
 7247 05b4 05       		.byte	0x5
 7248 05b5 03       		.byte	0x3
 7249 05b6 24000000 		.4byte	pxDelayedTaskList
 7250 05ba 07       		.uleb128 0x7
 7251 05bb 04       		.byte	0x4
 7252 05bc 6D020000 		.4byte	0x26d
 7253 05c0 08       		.uleb128 0x8
 7254 05c1 BA050000 		.4byte	0x5ba
ARM GAS  /tmp/ccaP1CVS.s 			page 254


 7255 05c5 06       		.uleb128 0x6
 7256 05c6 BA050000 		.4byte	0x5ba
 7257 05ca 14       		.uleb128 0x14
 7258 05cb D2050000 		.4byte	.LASF88
 7259 05cf 01       		.byte	0x1
 7260 05d0 5801     		.2byte	0x158
 7261 05d2 2A       		.byte	0x2a
 7262 05d3 C0050000 		.4byte	0x5c0
 7263 05d7 05       		.byte	0x5
 7264 05d8 03       		.byte	0x3
 7265 05d9 20000000 		.4byte	pxOverflowDelayedTaskList
 7266 05dd 14       		.uleb128 0x14
 7267 05de 54040000 		.4byte	.LASF89
 7268 05e2 01       		.byte	0x1
 7269 05e3 5901     		.2byte	0x159
 7270 05e5 1F       		.byte	0x1f
 7271 05e6 6D020000 		.4byte	0x26d
 7272 05ea 05       		.byte	0x5
 7273 05eb 03       		.byte	0x3
 7274 05ec D4000000 		.4byte	xPendingReadyList
 7275 05f0 14       		.uleb128 0x14
 7276 05f1 71040000 		.4byte	.LASF90
 7277 05f5 01       		.byte	0x1
 7278 05f6 5D01     		.2byte	0x15d
 7279 05f8 20       		.byte	0x20
 7280 05f9 6D020000 		.4byte	0x26d
 7281 05fd 05       		.byte	0x5
 7282 05fe 03       		.byte	0x3
 7283 05ff 2C000000 		.4byte	xTasksWaitingTermination
 7284 0603 14       		.uleb128 0x14
 7285 0604 9E010000 		.4byte	.LASF91
 7286 0608 01       		.byte	0x1
 7287 0609 5E01     		.2byte	0x15e
 7288 060b 2E       		.byte	0x2e
 7289 060c 54010000 		.4byte	0x154
 7290 0610 05       		.byte	0x5
 7291 0611 03       		.byte	0x3
 7292 0612 44000000 		.4byte	uxDeletedTasksWaitingCleanUp
 7293 0616 14       		.uleb128 0x14
 7294 0617 B8050000 		.4byte	.LASF92
 7295 061b 01       		.byte	0x1
 7296 061c 6401     		.2byte	0x164
 7297 061e 20       		.byte	0x20
 7298 061f 6D020000 		.4byte	0x26d
 7299 0623 05       		.byte	0x5
 7300 0624 03       		.byte	0x3
 7301 0625 0C000000 		.4byte	xSuspendedTaskList
 7302 0629 14       		.uleb128 0x14
 7303 062a 8E0F0000 		.4byte	.LASF93
 7304 062e 01       		.byte	0x1
 7305 062f 6F01     		.2byte	0x16f
 7306 0631 2D       		.byte	0x2d
 7307 0632 54010000 		.4byte	0x154
 7308 0636 05       		.byte	0x5
 7309 0637 03       		.byte	0x3
 7310 0638 40000000 		.4byte	uxCurrentNumberOfTasks
 7311 063c 14       		.uleb128 0x14
ARM GAS  /tmp/ccaP1CVS.s 			page 255


 7312 063d 64050000 		.4byte	.LASF94
 7313 0641 01       		.byte	0x1
 7314 0642 7001     		.2byte	0x170
 7315 0644 2C       		.byte	0x2c
 7316 0645 6A010000 		.4byte	0x16a
 7317 0649 05       		.byte	0x5
 7318 064a 03       		.byte	0x3
 7319 064b 00000000 		.4byte	xTickCount
 7320 064f 14       		.uleb128 0x14
 7321 0650 34010000 		.4byte	.LASF95
 7322 0654 01       		.byte	0x1
 7323 0655 7101     		.2byte	0x171
 7324 0657 2D       		.byte	0x2d
 7325 0658 54010000 		.4byte	0x154
 7326 065c 05       		.byte	0x5
 7327 065d 03       		.byte	0x3
 7328 065e 08000000 		.4byte	uxTopReadyPriority
 7329 0662 14       		.uleb128 0x14
 7330 0663 6E010000 		.4byte	.LASF96
 7331 0667 01       		.byte	0x1
 7332 0668 7201     		.2byte	0x172
 7333 066a 2C       		.byte	0x2c
 7334 066b 3E010000 		.4byte	0x13e
 7335 066f 05       		.byte	0x5
 7336 0670 03       		.byte	0x3
 7337 0671 E8000000 		.4byte	xSchedulerRunning
 7338 0675 14       		.uleb128 0x14
 7339 0676 0D0D0000 		.4byte	.LASF97
 7340 067a 01       		.byte	0x1
 7341 067b 7301     		.2byte	0x173
 7342 067d 2D       		.byte	0x2d
 7343 067e 54010000 		.4byte	0x154
 7344 0682 05       		.byte	0x5
 7345 0683 03       		.byte	0x3
 7346 0684 FC000000 		.4byte	uxPendedTicks
 7347 0688 14       		.uleb128 0x14
 7348 0689 DC100000 		.4byte	.LASF98
 7349 068d 01       		.byte	0x1
 7350 068e 7401     		.2byte	0x174
 7351 0690 2C       		.byte	0x2c
 7352 0691 3E010000 		.4byte	0x13e
 7353 0695 05       		.byte	0x5
 7354 0696 03       		.byte	0x3
 7355 0697 00010000 		.4byte	xYieldPending
 7356 069b 14       		.uleb128 0x14
 7357 069c 3E0A0000 		.4byte	.LASF99
 7358 06a0 01       		.byte	0x1
 7359 06a1 7501     		.2byte	0x175
 7360 06a3 2C       		.byte	0x2c
 7361 06a4 3E010000 		.4byte	0x13e
 7362 06a8 05       		.byte	0x5
 7363 06a9 03       		.byte	0x3
 7364 06aa F8000000 		.4byte	xNumOfOverflows
 7365 06ae 14       		.uleb128 0x14
 7366 06af 41090000 		.4byte	.LASF46
 7367 06b3 01       		.byte	0x1
 7368 06b4 7601     		.2byte	0x176
ARM GAS  /tmp/ccaP1CVS.s 			page 256


 7369 06b6 24       		.byte	0x24
 7370 06b7 48010000 		.4byte	0x148
 7371 06bb 05       		.byte	0x5
 7372 06bc 03       		.byte	0x3
 7373 06bd EC000000 		.4byte	uxTaskNumber
 7374 06c1 14       		.uleb128 0x14
 7375 06c2 D1070000 		.4byte	.LASF100
 7376 06c6 01       		.byte	0x1
 7377 06c7 7701     		.2byte	0x177
 7378 06c9 2C       		.byte	0x2c
 7379 06ca 6A010000 		.4byte	0x16a
 7380 06ce 05       		.byte	0x5
 7381 06cf 03       		.byte	0x3
 7382 06d0 28000000 		.4byte	xNextTaskUnblockTime
 7383 06d4 14       		.uleb128 0x14
 7384 06d5 B30C0000 		.4byte	.LASF101
 7385 06d9 01       		.byte	0x1
 7386 06da 7801     		.2byte	0x178
 7387 06dc 25       		.byte	0x25
 7388 06dd 7E020000 		.4byte	0x27e
 7389 06e1 05       		.byte	0x5
 7390 06e2 03       		.byte	0x3
 7391 06e3 F4000000 		.4byte	xIdleTaskHandle
 7392 06e7 14       		.uleb128 0x14
 7393 06e8 F40F0000 		.4byte	.LASF102
 7394 06ec 01       		.byte	0x1
 7395 06ed 8201     		.2byte	0x182
 7396 06ef 2D       		.byte	0x2d
 7397 06f0 54010000 		.4byte	0x154
 7398 06f4 05       		.byte	0x5
 7399 06f5 03       		.byte	0x3
 7400 06f6 F0000000 		.4byte	uxSchedulerSuspended
 7401 06fa 15       		.uleb128 0x15
 7402 06fb 5A0F0000 		.4byte	.LASF160
 7403 06ff 01       		.byte	0x1
 7404 0700 D913     		.2byte	0x13d9
 7405 0702 0D       		.byte	0xd
 7406 0703 01       		.byte	0x1
 7407 0704 00000000 		.4byte	.LFB62
 7408 0708 6C000000 		.4byte	.LFE62
 7409 070c 00000000 		.4byte	.LLST0
 7410 0710 01       		.byte	0x1
 7411 0711 9E070000 		.4byte	0x79e
 7412 0715 16       		.uleb128 0x16
 7413 0716 A40E0000 		.4byte	.LASF103
 7414 071a 01       		.byte	0x1
 7415 071b D913     		.2byte	0x13d9
 7416 071d 38       		.byte	0x38
 7417 071e 5E010000 		.4byte	0x15e
 7418 0722 5E000000 		.4byte	.LLST1
 7419 0726 50000000 		.4byte	.LVUS1
 7420 072a 16       		.uleb128 0x16
 7421 072b A10D0000 		.4byte	.LASF104
 7422 072f 01       		.byte	0x1
 7423 0730 D913     		.2byte	0x13d9
 7424 0732 57       		.byte	0x57
 7425 0733 43010000 		.4byte	0x143
ARM GAS  /tmp/ccaP1CVS.s 			page 257


 7426 0737 CA000000 		.4byte	.LLST2
 7427 073b BC000000 		.4byte	.LVUS2
 7428 073f 17       		.uleb128 0x17
 7429 0740 D30F0000 		.4byte	.LASF106
 7430 0744 01       		.byte	0x1
 7431 0745 DB13     		.2byte	0x13db
 7432 0747 0C       		.byte	0xc
 7433 0748 5E010000 		.4byte	0x15e
 7434 074c 2C010000 		.4byte	.LLST3
 7435 0750 28010000 		.4byte	.LVUS3
 7436 0754 17       		.uleb128 0x17
 7437 0755 99050000 		.4byte	.LASF107
 7438 0759 01       		.byte	0x1
 7439 075a DC13     		.2byte	0x13dc
 7440 075c 12       		.byte	0x12
 7441 075d 6F010000 		.4byte	0x16f
 7442 0761 4E010000 		.4byte	.LLST4
 7443 0765 4A010000 		.4byte	.LVUS4
 7444 0769 18       		.uleb128 0x18
 7445 076a 12000000 		.4byte	.LVL3
 7446 076e 652A0000 		.4byte	0x2a65
 7447 0772 19       		.uleb128 0x19
 7448 0773 38000000 		.4byte	.LVL5
 7449 0777 01       		.byte	0x1
 7450 0778 742A0000 		.4byte	0x2a74
 7451 077c 8A070000 		.4byte	0x78a
 7452 0780 1A       		.uleb128 0x1a
 7453 0781 01       		.byte	0x1
 7454 0782 50       		.byte	0x50
 7455 0783 05       		.byte	0x5
 7456 0784 03       		.byte	0x3
 7457 0785 0C000000 		.4byte	.LANCHOR0+12
 7458 0789 00       		.byte	0
 7459 078a 1B       		.uleb128 0x1b
 7460 078b 4E000000 		.4byte	.LVL8
 7461 078f 01       		.byte	0x1
 7462 0790 832A0000 		.4byte	0x2a83
 7463 0794 18       		.uleb128 0x18
 7464 0795 58000000 		.4byte	.LVL9
 7465 0799 832A0000 		.4byte	0x2a83
 7466 079d 00       		.byte	0
 7467 079e 1C       		.uleb128 0x1c
 7468 079f 01       		.byte	0x1
 7469 07a0 EC050000 		.4byte	.LASF115
 7470 07a4 01       		.byte	0x1
 7471 07a5 B413     		.2byte	0x13b4
 7472 07a7 0D       		.byte	0xd
 7473 07a8 01       		.byte	0x1
 7474 07a9 32010000 		.4byte	0x132
 7475 07ad 0C110000 		.4byte	.LFB61
 7476 07b1 38110000 		.4byte	.LFE61
 7477 07b5 6C010000 		.4byte	.LLST218
 7478 07b9 01       		.byte	0x1
 7479 07ba 10080000 		.4byte	0x810
 7480 07be 16       		.uleb128 0x16
 7481 07bf DC090000 		.4byte	.LASF108
 7482 07c3 01       		.byte	0x1
ARM GAS  /tmp/ccaP1CVS.s 			page 258


 7483 07c4 B413     		.2byte	0x13b4
 7484 07c6 31       		.byte	0x31
 7485 07c7 7E020000 		.4byte	0x27e
 7486 07cb 8E010000 		.4byte	.LLST219
 7487 07cf 8C010000 		.4byte	.LVUS219
 7488 07d3 17       		.uleb128 0x17
 7489 07d4 EE0F0000 		.4byte	.LASF109
 7490 07d8 01       		.byte	0x1
 7491 07d9 B613     		.2byte	0x13b6
 7492 07db 09       		.byte	0x9
 7493 07dc 4E050000 		.4byte	0x54e
 7494 07e0 A3010000 		.4byte	.LLST220
 7495 07e4 A1010000 		.4byte	.LVUS220
 7496 07e8 17       		.uleb128 0x17
 7497 07e9 F40C0000 		.4byte	.LASF110
 7498 07ed 01       		.byte	0x1
 7499 07ee B713     		.2byte	0x13b7
 7500 07f0 0D       		.byte	0xd
 7501 07f1 32010000 		.4byte	0x132
 7502 07f5 BC010000 		.4byte	.LLST221
 7503 07f9 B6010000 		.4byte	.LVUS221
 7504 07fd 18       		.uleb128 0x18
 7505 07fe 1A110000 		.4byte	.LVL397
 7506 0802 922A0000 		.4byte	0x2a92
 7507 0806 18       		.uleb128 0x18
 7508 0807 30110000 		.4byte	.LVL401
 7509 080b A02A0000 		.4byte	0x2aa0
 7510 080f 00       		.byte	0
 7511 0810 1D       		.uleb128 0x1d
 7512 0811 01       		.byte	0x1
 7513 0812 A40B0000 		.4byte	.LASF130
 7514 0816 01       		.byte	0x1
 7515 0817 5D13     		.2byte	0x135d
 7516 0819 07       		.byte	0x7
 7517 081a 01       		.byte	0x1
 7518 081b 80100000 		.4byte	.LFB60
 7519 081f 0C110000 		.4byte	.LFE60
 7520 0823 E6010000 		.4byte	.LLST210
 7521 0827 01       		.byte	0x1
 7522 0828 0A090000 		.4byte	0x90a
 7523 082c 16       		.uleb128 0x16
 7524 082d CE090000 		.4byte	.LASF111
 7525 0831 01       		.byte	0x1
 7526 0832 5D13     		.2byte	0x135d
 7527 0834 2C       		.byte	0x2c
 7528 0835 7E020000 		.4byte	0x27e
 7529 0839 0E020000 		.4byte	.LLST211
 7530 083d 06020000 		.4byte	.LVUS211
 7531 0841 16       		.uleb128 0x16
 7532 0842 10010000 		.4byte	.LASF112
 7533 0846 01       		.byte	0x1
 7534 0847 5D13     		.2byte	0x135d
 7535 0849 47       		.byte	0x47
 7536 084a 0A090000 		.4byte	0x90a
 7537 084e 4A020000 		.4byte	.LLST212
 7538 0852 42020000 		.4byte	.LVUS212
 7539 0856 17       		.uleb128 0x17
ARM GAS  /tmp/ccaP1CVS.s 			page 259


 7540 0857 EE0F0000 		.4byte	.LASF109
 7541 085b 01       		.byte	0x1
 7542 085c 5F13     		.2byte	0x135f
 7543 085e 0A       		.byte	0xa
 7544 085f 4E050000 		.4byte	0x54e
 7545 0863 86020000 		.4byte	.LLST213
 7546 0867 7E020000 		.4byte	.LVUS213
 7547 086b 17       		.uleb128 0x17
 7548 086c FC010000 		.4byte	.LASF113
 7549 0870 01       		.byte	0x1
 7550 0871 6013     		.2byte	0x1360
 7551 0873 0A       		.byte	0xa
 7552 0874 C6000000 		.4byte	0xc6
 7553 0878 BE020000 		.4byte	.LLST214
 7554 087c BA020000 		.4byte	.LVUS214
 7555 0880 17       		.uleb128 0x17
 7556 0881 38030000 		.4byte	.LASF114
 7557 0885 01       		.byte	0x1
 7558 0886 6113     		.2byte	0x1361
 7559 0888 0E       		.byte	0xe
 7560 0889 48010000 		.4byte	0x148
 7561 088d DE020000 		.4byte	.LLST215
 7562 0891 DC020000 		.4byte	.LVUS215
 7563 0895 1E       		.uleb128 0x1e
 7564 0896 31270000 		.4byte	0x2731
 7565 089a 80100000 		.4byte	.LBI162
 7566 089e 08       		.byte	.LVU1686
 7567 089f 98010000 		.4byte	.Ldebug_ranges0+0x198
 7568 08a3 01       		.byte	0x1
 7569 08a4 7913     		.2byte	0x1379
 7570 08a6 1C       		.byte	0x1c
 7571 08a7 C4080000 		.4byte	0x8c4
 7572 08ab 1F       		.uleb128 0x1f
 7573 08ac 98010000 		.4byte	.Ldebug_ranges0+0x198
 7574 08b0 20       		.uleb128 0x20
 7575 08b1 43270000 		.4byte	0x2743
 7576 08b5 F3020000 		.4byte	.LLST216
 7577 08b9 F1020000 		.4byte	.LVUS216
 7578 08bd 21       		.uleb128 0x21
 7579 08be 4F270000 		.4byte	0x274f
 7580 08c2 00       		.byte	0
 7581 08c3 00       		.byte	0
 7582 08c4 22       		.uleb128 0x22
 7583 08c5 16270000 		.4byte	0x2716
 7584 08c9 F4100000 		.4byte	.LBI166
 7585 08cd 02       		.byte	.LVU1731
 7586 08ce F4100000 		.4byte	.LBB166
 7587 08d2 F8100000 		.4byte	.LBE166
 7588 08d6 01       		.byte	0x1
 7589 08d7 AB13     		.2byte	0x13ab
 7590 08d9 03       		.byte	0x3
 7591 08da EC080000 		.4byte	0x8ec
 7592 08de 23       		.uleb128 0x23
 7593 08df 24270000 		.4byte	0x2724
 7594 08e3 08030000 		.4byte	.LLST217
 7595 08e7 06030000 		.4byte	.LVUS217
 7596 08eb 00       		.byte	0
ARM GAS  /tmp/ccaP1CVS.s 			page 260


 7597 08ec 24       		.uleb128 0x24
 7598 08ed C6100000 		.4byte	.LVL387
 7599 08f1 652A0000 		.4byte	0x2a65
 7600 08f5 00090000 		.4byte	0x900
 7601 08f9 1A       		.uleb128 0x1a
 7602 08fa 01       		.byte	0x1
 7603 08fb 50       		.byte	0x50
 7604 08fc 02       		.byte	0x2
 7605 08fd 79       		.byte	0x79
 7606 08fe 00       		.sleb128 0
 7607 08ff 00       		.byte	0
 7608 0900 18       		.uleb128 0x18
 7609 0901 E0100000 		.4byte	.LVL389
 7610 0905 742A0000 		.4byte	0x2a74
 7611 0909 00       		.byte	0
 7612 090a 07       		.uleb128 0x7
 7613 090b 04       		.byte	0x4
 7614 090c 32010000 		.4byte	0x132
 7615 0910 1C       		.uleb128 0x1c
 7616 0911 01       		.byte	0x1
 7617 0912 27020000 		.4byte	.LASF116
 7618 0916 01       		.byte	0x1
 7619 0917 DC12     		.2byte	0x12dc
 7620 0919 0D       		.byte	0xd
 7621 091a 01       		.byte	0x1
 7622 091b 32010000 		.4byte	0x132
 7623 091f D00F0000 		.4byte	.LFB59
 7624 0923 80100000 		.4byte	.LFE59
 7625 0927 1B030000 		.4byte	.LLST198
 7626 092b 01       		.byte	0x1
 7627 092c 600A0000 		.4byte	0xa60
 7628 0930 16       		.uleb128 0x16
 7629 0931 CE090000 		.4byte	.LASF111
 7630 0935 01       		.byte	0x1
 7631 0936 DC12     		.2byte	0x12dc
 7632 0938 35       		.byte	0x35
 7633 0939 7E020000 		.4byte	0x27e
 7634 093d 3F030000 		.4byte	.LLST199
 7635 0941 3B030000 		.4byte	.LVUS199
 7636 0945 16       		.uleb128 0x16
 7637 0946 4E0C0000 		.4byte	.LASF117
 7638 094a 01       		.byte	0x1
 7639 094b DC12     		.2byte	0x12dc
 7640 094d 4D       		.byte	0x4d
 7641 094e ED000000 		.4byte	0xed
 7642 0952 69030000 		.4byte	.LLST200
 7643 0956 5D030000 		.4byte	.LVUS200
 7644 095a 16       		.uleb128 0x16
 7645 095b 5B090000 		.4byte	.LASF118
 7646 095f 01       		.byte	0x1
 7647 0960 DC12     		.2byte	0x12dc
 7648 0962 64       		.byte	0x64
 7649 0963 CE030000 		.4byte	0x3ce
 7650 0967 C0030000 		.4byte	.LLST201
 7651 096b BC030000 		.4byte	.LVUS201
 7652 096f 16       		.uleb128 0x16
 7653 0970 CB080000 		.4byte	.LASF119
ARM GAS  /tmp/ccaP1CVS.s 			page 261


 7654 0974 01       		.byte	0x1
 7655 0975 DC12     		.2byte	0x12dc
 7656 0977 77       		.byte	0x77
 7657 0978 600A0000 		.4byte	0xa60
 7658 097c E5030000 		.4byte	.LLST202
 7659 0980 E1030000 		.4byte	.LVUS202
 7660 0984 16       		.uleb128 0x16
 7661 0985 10010000 		.4byte	.LASF112
 7662 0989 01       		.byte	0x1
 7663 098a DC12     		.2byte	0x12dc
 7664 098c A1       		.byte	0xa1
 7665 098d 0A090000 		.4byte	0x90a
 7666 0991 0A040000 		.4byte	.LLST203
 7667 0995 06040000 		.4byte	.LVUS203
 7668 0999 17       		.uleb128 0x17
 7669 099a EE0F0000 		.4byte	.LASF109
 7670 099e 01       		.byte	0x1
 7671 099f DE12     		.2byte	0x12de
 7672 09a1 0A       		.byte	0xa
 7673 09a2 4E050000 		.4byte	0x54e
 7674 09a6 2E040000 		.4byte	.LLST204
 7675 09aa 2A040000 		.4byte	.LVUS204
 7676 09ae 17       		.uleb128 0x17
 7677 09af FC010000 		.4byte	.LASF113
 7678 09b3 01       		.byte	0x1
 7679 09b4 DF12     		.2byte	0x12df
 7680 09b6 0A       		.byte	0xa
 7681 09b7 C6000000 		.4byte	0xc6
 7682 09bb 52040000 		.4byte	.LLST205
 7683 09bf 4C040000 		.4byte	.LVUS205
 7684 09c3 17       		.uleb128 0x17
 7685 09c4 F40C0000 		.4byte	.LASF110
 7686 09c8 01       		.byte	0x1
 7687 09c9 E012     		.2byte	0x12e0
 7688 09cb 0D       		.byte	0xd
 7689 09cc 32010000 		.4byte	0x132
 7690 09d0 7F040000 		.4byte	.LLST206
 7691 09d4 7B040000 		.4byte	.LVUS206
 7692 09d8 17       		.uleb128 0x17
 7693 09d9 38030000 		.4byte	.LASF114
 7694 09dd 01       		.byte	0x1
 7695 09de E112     		.2byte	0x12e1
 7696 09e0 0E       		.byte	0xe
 7697 09e1 48010000 		.4byte	0x148
 7698 09e5 A1040000 		.4byte	.LLST207
 7699 09e9 9F040000 		.4byte	.LVUS207
 7700 09ed 22       		.uleb128 0x22
 7701 09ee 31270000 		.4byte	0x2731
 7702 09f2 D80F0000 		.4byte	.LBI158
 7703 09f6 01       		.byte	.LVU1617
 7704 09f7 D80F0000 		.4byte	.LBB158
 7705 09fb EC0F0000 		.4byte	.LBE158
 7706 09ff 01       		.byte	0x1
 7707 0a00 F912     		.2byte	0x12f9
 7708 0a02 1C       		.byte	0x1c
 7709 0a03 1A0A0000 		.4byte	0xa1a
 7710 0a07 20       		.uleb128 0x20
ARM GAS  /tmp/ccaP1CVS.s 			page 262


 7711 0a08 43270000 		.4byte	0x2743
 7712 0a0c B6040000 		.4byte	.LLST208
 7713 0a10 B4040000 		.4byte	.LVUS208
 7714 0a14 21       		.uleb128 0x21
 7715 0a15 4F270000 		.4byte	0x274f
 7716 0a19 00       		.byte	0
 7717 0a1a 22       		.uleb128 0x22
 7718 0a1b 16270000 		.4byte	0x2716
 7719 0a1f 20100000 		.4byte	.LBI160
 7720 0a23 02       		.byte	.LVU1649
 7721 0a24 20100000 		.4byte	.LBB160
 7722 0a28 24100000 		.4byte	.LBE160
 7723 0a2c 01       		.byte	0x1
 7724 0a2d 5313     		.2byte	0x1353
 7725 0a2f 03       		.byte	0x3
 7726 0a30 420A0000 		.4byte	0xa42
 7727 0a34 23       		.uleb128 0x23
 7728 0a35 24270000 		.4byte	0x2724
 7729 0a39 CB040000 		.4byte	.LLST209
 7730 0a3d C9040000 		.4byte	.LVUS209
 7731 0a41 00       		.byte	0
 7732 0a42 24       		.uleb128 0x24
 7733 0a43 42100000 		.4byte	.LVL379
 7734 0a47 652A0000 		.4byte	0x2a65
 7735 0a4b 560A0000 		.4byte	0xa56
 7736 0a4f 1A       		.uleb128 0x1a
 7737 0a50 01       		.byte	0x1
 7738 0a51 50       		.byte	0x50
 7739 0a52 02       		.byte	0x2
 7740 0a53 79       		.byte	0x79
 7741 0a54 00       		.sleb128 0
 7742 0a55 00       		.byte	0
 7743 0a56 18       		.uleb128 0x18
 7744 0a57 5C100000 		.4byte	.LVL381
 7745 0a5b 742A0000 		.4byte	0x2a74
 7746 0a5f 00       		.byte	0
 7747 0a60 07       		.uleb128 0x7
 7748 0a61 04       		.byte	0x4
 7749 0a62 ED000000 		.4byte	0xed
 7750 0a66 06       		.uleb128 0x6
 7751 0a67 600A0000 		.4byte	0xa60
 7752 0a6b 1C       		.uleb128 0x1c
 7753 0a6c 01       		.byte	0x1
 7754 0a6d 94030000 		.4byte	.LASF120
 7755 0a71 01       		.byte	0x1
 7756 0a72 6A12     		.2byte	0x126a
 7757 0a74 0D       		.byte	0xd
 7758 0a75 01       		.byte	0x1
 7759 0a76 32010000 		.4byte	0x132
 7760 0a7a 340F0000 		.4byte	.LFB58
 7761 0a7e D00F0000 		.4byte	.LFE58
 7762 0a82 DE040000 		.4byte	.LLST190
 7763 0a86 01       		.byte	0x1
 7764 0a87 550B0000 		.4byte	0xb55
 7765 0a8b 16       		.uleb128 0x16
 7766 0a8c CE090000 		.4byte	.LASF111
 7767 0a90 01       		.byte	0x1
ARM GAS  /tmp/ccaP1CVS.s 			page 263


 7768 0a91 6A12     		.2byte	0x126a
 7769 0a93 2E       		.byte	0x2e
 7770 0a94 7E020000 		.4byte	0x27e
 7771 0a98 02050000 		.4byte	.LLST191
 7772 0a9c FE040000 		.4byte	.LVUS191
 7773 0aa0 16       		.uleb128 0x16
 7774 0aa1 4E0C0000 		.4byte	.LASF117
 7775 0aa5 01       		.byte	0x1
 7776 0aa6 6A12     		.2byte	0x126a
 7777 0aa8 46       		.byte	0x46
 7778 0aa9 ED000000 		.4byte	0xed
 7779 0aad 2E050000 		.4byte	.LLST192
 7780 0ab1 20050000 		.4byte	.LVUS192
 7781 0ab5 16       		.uleb128 0x16
 7782 0ab6 5B090000 		.4byte	.LASF118
 7783 0aba 01       		.byte	0x1
 7784 0abb 6A12     		.2byte	0x126a
 7785 0abd 5D       		.byte	0x5d
 7786 0abe CE030000 		.4byte	0x3ce
 7787 0ac2 90050000 		.4byte	.LLST193
 7788 0ac6 8C050000 		.4byte	.LVUS193
 7789 0aca 16       		.uleb128 0x16
 7790 0acb CB080000 		.4byte	.LASF119
 7791 0acf 01       		.byte	0x1
 7792 0ad0 6A12     		.2byte	0x126a
 7793 0ad2 70       		.byte	0x70
 7794 0ad3 600A0000 		.4byte	0xa60
 7795 0ad7 B7050000 		.4byte	.LLST194
 7796 0adb B1050000 		.4byte	.LVUS194
 7797 0adf 17       		.uleb128 0x17
 7798 0ae0 EE0F0000 		.4byte	.LASF109
 7799 0ae4 01       		.byte	0x1
 7800 0ae5 6C12     		.2byte	0x126c
 7801 0ae7 0A       		.byte	0xa
 7802 0ae8 4E050000 		.4byte	0x54e
 7803 0aec E7050000 		.4byte	.LLST195
 7804 0af0 E3050000 		.4byte	.LVUS195
 7805 0af4 17       		.uleb128 0x17
 7806 0af5 F40C0000 		.4byte	.LASF110
 7807 0af9 01       		.byte	0x1
 7808 0afa 6D12     		.2byte	0x126d
 7809 0afc 0D       		.byte	0xd
 7810 0afd 32010000 		.4byte	0x132
 7811 0b01 09060000 		.4byte	.LLST196
 7812 0b05 05060000 		.4byte	.LVUS196
 7813 0b09 17       		.uleb128 0x17
 7814 0b0a FC010000 		.4byte	.LASF113
 7815 0b0e 01       		.byte	0x1
 7816 0b0f 6E12     		.2byte	0x126e
 7817 0b11 0A       		.byte	0xa
 7818 0b12 C6000000 		.4byte	0xc6
 7819 0b16 2F060000 		.4byte	.LLST197
 7820 0b1a 29060000 		.4byte	.LVUS197
 7821 0b1e 18       		.uleb128 0x18
 7822 0b1f 420F0000 		.4byte	.LVL352
 7823 0b23 922A0000 		.4byte	0x2a92
 7824 0b27 18       		.uleb128 0x18
ARM GAS  /tmp/ccaP1CVS.s 			page 264


 7825 0b28 7A0F0000 		.4byte	.LVL359
 7826 0b2c A02A0000 		.4byte	0x2aa0
 7827 0b30 24       		.uleb128 0x24
 7828 0b31 8E0F0000 		.4byte	.LVL363
 7829 0b35 652A0000 		.4byte	0x2a65
 7830 0b39 440B0000 		.4byte	0xb44
 7831 0b3d 1A       		.uleb128 0x1a
 7832 0b3e 01       		.byte	0x1
 7833 0b3f 50       		.byte	0x50
 7834 0b40 02       		.byte	0x2
 7835 0b41 77       		.byte	0x77
 7836 0b42 00       		.sleb128 0
 7837 0b43 00       		.byte	0
 7838 0b44 25       		.uleb128 0x25
 7839 0b45 AC0F0000 		.4byte	.LVL364
 7840 0b49 742A0000 		.4byte	0x2a74
 7841 0b4d 1A       		.uleb128 0x1a
 7842 0b4e 01       		.byte	0x1
 7843 0b4f 51       		.byte	0x51
 7844 0b50 02       		.byte	0x2
 7845 0b51 77       		.byte	0x77
 7846 0b52 00       		.sleb128 0
 7847 0b53 00       		.byte	0
 7848 0b54 00       		.byte	0
 7849 0b55 1C       		.uleb128 0x1c
 7850 0b56 01       		.byte	0x1
 7851 0b57 E5060000 		.4byte	.LASF121
 7852 0b5b 01       		.byte	0x1
 7853 0b5c 1A12     		.2byte	0x121a
 7854 0b5e 0D       		.byte	0xd
 7855 0b5f 01       		.byte	0x1
 7856 0b60 32010000 		.4byte	0x132
 7857 0b64 AC0E0000 		.4byte	.LFB57
 7858 0b68 340F0000 		.4byte	.LFE57
 7859 0b6c 58060000 		.4byte	.LLST184
 7860 0b70 01       		.byte	0x1
 7861 0b71 1C0C0000 		.4byte	0xc1c
 7862 0b75 16       		.uleb128 0x16
 7863 0b76 3F040000 		.4byte	.LASF122
 7864 0b7a 01       		.byte	0x1
 7865 0b7b 1A12     		.2byte	0x121a
 7866 0b7d 27       		.byte	0x27
 7867 0b7e ED000000 		.4byte	0xed
 7868 0b82 7E060000 		.4byte	.LLST185
 7869 0b86 78060000 		.4byte	.LVUS185
 7870 0b8a 16       		.uleb128 0x16
 7871 0b8b CE000000 		.4byte	.LASF123
 7872 0b8f 01       		.byte	0x1
 7873 0b90 1A12     		.2byte	0x121a
 7874 0b92 46       		.byte	0x46
 7875 0b93 ED000000 		.4byte	0xed
 7876 0b97 B0060000 		.4byte	.LLST186
 7877 0b9b AA060000 		.4byte	.LVUS186
 7878 0b9f 16       		.uleb128 0x16
 7879 0ba0 DF0C0000 		.4byte	.LASF124
 7880 0ba4 01       		.byte	0x1
 7881 0ba5 1A12     		.2byte	0x121a
ARM GAS  /tmp/ccaP1CVS.s 			page 265


 7882 0ba7 65       		.byte	0x65
 7883 0ba8 600A0000 		.4byte	0xa60
 7884 0bac E2060000 		.4byte	.LLST187
 7885 0bb0 DC060000 		.4byte	.LVUS187
 7886 0bb4 16       		.uleb128 0x16
 7887 0bb5 A40E0000 		.4byte	.LASF103
 7888 0bb9 01       		.byte	0x1
 7889 0bba 1A12     		.2byte	0x121a
 7890 0bbc 86       		.byte	0x86
 7891 0bbd 5E010000 		.4byte	0x15e
 7892 0bc1 14070000 		.4byte	.LLST188
 7893 0bc5 0E070000 		.4byte	.LVUS188
 7894 0bc9 17       		.uleb128 0x17
 7895 0bca F40C0000 		.4byte	.LASF110
 7896 0bce 01       		.byte	0x1
 7897 0bcf 1C12     		.2byte	0x121c
 7898 0bd1 0D       		.byte	0xd
 7899 0bd2 32010000 		.4byte	0x132
 7900 0bd6 44070000 		.4byte	.LLST189
 7901 0bda 40070000 		.4byte	.LVUS189
 7902 0bde 18       		.uleb128 0x18
 7903 0bdf BE0E0000 		.4byte	.LVL342
 7904 0be3 922A0000 		.4byte	0x2a92
 7905 0be7 24       		.uleb128 0x24
 7906 0be8 E20E0000 		.4byte	.LVL343
 7907 0bec FA060000 		.4byte	0x6fa
 7908 0bf0 000C0000 		.4byte	0xc00
 7909 0bf4 1A       		.uleb128 0x1a
 7910 0bf5 01       		.byte	0x1
 7911 0bf6 50       		.byte	0x50
 7912 0bf7 02       		.byte	0x2
 7913 0bf8 76       		.byte	0x76
 7914 0bf9 00       		.sleb128 0
 7915 0bfa 1A       		.uleb128 0x1a
 7916 0bfb 01       		.byte	0x1
 7917 0bfc 51       		.byte	0x51
 7918 0bfd 01       		.byte	0x1
 7919 0bfe 31       		.byte	0x31
 7920 0bff 00       		.byte	0
 7921 0c00 18       		.uleb128 0x18
 7922 0c01 FA0E0000 		.4byte	.LVL344
 7923 0c05 A02A0000 		.4byte	0x2aa0
 7924 0c09 18       		.uleb128 0x18
 7925 0c0a FE0E0000 		.4byte	.LVL345
 7926 0c0e 922A0000 		.4byte	0x2a92
 7927 0c12 18       		.uleb128 0x18
 7928 0c13 2A0F0000 		.4byte	.LVL348
 7929 0c17 A02A0000 		.4byte	0x2aa0
 7930 0c1b 00       		.byte	0
 7931 0c1c 1C       		.uleb128 0x1c
 7932 0c1d 01       		.byte	0x1
 7933 0c1e 30070000 		.4byte	.LASF125
 7934 0c22 01       		.byte	0x1
 7935 0c23 D611     		.2byte	0x11d6
 7936 0c25 0B       		.byte	0xb
 7937 0c26 01       		.byte	0x1
 7938 0c27 ED000000 		.4byte	0xed
ARM GAS  /tmp/ccaP1CVS.s 			page 266


 7939 0c2b 480E0000 		.4byte	.LFB56
 7940 0c2f AC0E0000 		.4byte	.LFE56
 7941 0c33 62070000 		.4byte	.LLST180
 7942 0c37 01       		.byte	0x1
 7943 0c38 B90C0000 		.4byte	0xcb9
 7944 0c3c 16       		.uleb128 0x16
 7945 0c3d C3030000 		.4byte	.LASF126
 7946 0c41 01       		.byte	0x1
 7947 0c42 D611     		.2byte	0x11d6
 7948 0c44 28       		.byte	0x28
 7949 0c45 32010000 		.4byte	0x132
 7950 0c49 86070000 		.4byte	.LLST181
 7951 0c4d 82070000 		.4byte	.LVUS181
 7952 0c51 16       		.uleb128 0x16
 7953 0c52 A40E0000 		.4byte	.LASF103
 7954 0c56 01       		.byte	0x1
 7955 0c57 D611     		.2byte	0x11d6
 7956 0c59 46       		.byte	0x46
 7957 0c5a 5E010000 		.4byte	0x15e
 7958 0c5e AA070000 		.4byte	.LLST182
 7959 0c62 A4070000 		.4byte	.LVUS182
 7960 0c66 17       		.uleb128 0x17
 7961 0c67 BD100000 		.4byte	.LASF127
 7962 0c6b 01       		.byte	0x1
 7963 0c6c D811     		.2byte	0x11d8
 7964 0c6e 0B       		.byte	0xb
 7965 0c6f ED000000 		.4byte	0xed
 7966 0c73 D8070000 		.4byte	.LLST183
 7967 0c77 D6070000 		.4byte	.LVUS183
 7968 0c7b 18       		.uleb128 0x18
 7969 0c7c 540E0000 		.4byte	.LVL334
 7970 0c80 922A0000 		.4byte	0x2a92
 7971 0c84 24       		.uleb128 0x24
 7972 0c85 6A0E0000 		.4byte	.LVL335
 7973 0c89 FA060000 		.4byte	0x6fa
 7974 0c8d 9D0C0000 		.4byte	0xc9d
 7975 0c91 1A       		.uleb128 0x1a
 7976 0c92 01       		.byte	0x1
 7977 0c93 50       		.byte	0x50
 7978 0c94 02       		.byte	0x2
 7979 0c95 75       		.byte	0x75
 7980 0c96 00       		.sleb128 0
 7981 0c97 1A       		.uleb128 0x1a
 7982 0c98 01       		.byte	0x1
 7983 0c99 51       		.byte	0x51
 7984 0c9a 01       		.byte	0x1
 7985 0c9b 31       		.byte	0x31
 7986 0c9c 00       		.byte	0
 7987 0c9d 18       		.uleb128 0x18
 7988 0c9e 820E0000 		.4byte	.LVL336
 7989 0ca2 A02A0000 		.4byte	0x2aa0
 7990 0ca6 18       		.uleb128 0x18
 7991 0ca7 860E0000 		.4byte	.LVL337
 7992 0cab 922A0000 		.4byte	0x2a92
 7993 0caf 18       		.uleb128 0x18
 7994 0cb0 A00E0000 		.4byte	.LVL339
 7995 0cb4 A02A0000 		.4byte	0x2aa0
ARM GAS  /tmp/ccaP1CVS.s 			page 267


 7996 0cb8 00       		.byte	0
 7997 0cb9 26       		.uleb128 0x26
 7998 0cba 01       		.byte	0x1
 7999 0cbb 0D060000 		.4byte	.LASF191
 8000 0cbf 01       		.byte	0x1
 8001 0cc0 C511     		.2byte	0x11c5
 8002 0cc2 0F       		.byte	0xf
 8003 0cc3 01       		.byte	0x1
 8004 0cc4 7E020000 		.4byte	0x27e
 8005 0cc8 300E0000 		.4byte	.LFB55
 8006 0ccc 480E0000 		.4byte	.LFE55
 8007 0cd0 02       		.byte	0x2
 8008 0cd1 7D       		.byte	0x7d
 8009 0cd2 00       		.sleb128 0
 8010 0cd3 01       		.byte	0x1
 8011 0cd4 27       		.uleb128 0x27
 8012 0cd5 01       		.byte	0x1
 8013 0cd6 79090000 		.4byte	.LASF128
 8014 0cda 01       		.byte	0x1
 8015 0cdb B511     		.2byte	0x11b5
 8016 0cdd 0C       		.byte	0xc
 8017 0cde 01       		.byte	0x1
 8018 0cdf 5E010000 		.4byte	0x15e
 8019 0ce3 180E0000 		.4byte	.LFB54
 8020 0ce7 300E0000 		.4byte	.LFE54
 8021 0ceb 02       		.byte	0x2
 8022 0cec 7D       		.byte	0x7d
 8023 0ced 00       		.sleb128 0
 8024 0cee 01       		.byte	0x1
 8025 0cef 090D0000 		.4byte	0xd09
 8026 0cf3 17       		.uleb128 0x17
 8027 0cf4 12030000 		.4byte	.LASF129
 8028 0cf8 01       		.byte	0x1
 8029 0cf9 B711     		.2byte	0x11b7
 8030 0cfb 0C       		.byte	0xc
 8031 0cfc 5E010000 		.4byte	0x15e
 8032 0d00 ED070000 		.4byte	.LLST179
 8033 0d04 EB070000 		.4byte	.LVUS179
 8034 0d08 00       		.byte	0
 8035 0d09 1D       		.uleb128 0x1d
 8036 0d0a 01       		.byte	0x1
 8037 0d0b 95040000 		.4byte	.LASF131
 8038 0d0f 01       		.byte	0x1
 8039 0d10 1610     		.2byte	0x1016
 8040 0d12 07       		.byte	0x7
 8041 0d13 01       		.byte	0x1
 8042 0d14 940D0000 		.4byte	.LFB53
 8043 0d18 180E0000 		.4byte	.LFE53
 8044 0d1c 00080000 		.4byte	.LLST173
 8045 0d20 01       		.byte	0x1
 8046 0d21 C50D0000 		.4byte	0xdc5
 8047 0d25 16       		.uleb128 0x16
 8048 0d26 2B0C0000 		.4byte	.LASF132
 8049 0d2a 01       		.byte	0x1
 8050 0d2b 1610     		.2byte	0x1016
 8051 0d2d 3F       		.byte	0x3f
 8052 0d2e 8A020000 		.4byte	0x28a
ARM GAS  /tmp/ccaP1CVS.s 			page 268


 8053 0d32 42080000 		.4byte	.LLST174
 8054 0d36 38080000 		.4byte	.LVUS174
 8055 0d3a 16       		.uleb128 0x16
 8056 0d3b FD0A0000 		.4byte	.LASF133
 8057 0d3f 01       		.byte	0x1
 8058 0d40 1610     		.2byte	0x1016
 8059 0d42 5A       		.byte	0x5a
 8060 0d43 48010000 		.4byte	0x148
 8061 0d47 8A080000 		.4byte	.LLST175
 8062 0d4b 86080000 		.4byte	.LVUS175
 8063 0d4f 17       		.uleb128 0x17
 8064 0d50 EE0F0000 		.4byte	.LASF109
 8065 0d54 01       		.byte	0x1
 8066 0d55 1810     		.2byte	0x1018
 8067 0d57 10       		.byte	0x10
 8068 0d58 59050000 		.4byte	0x559
 8069 0d5c B5080000 		.4byte	.LLST176
 8070 0d60 AB080000 		.4byte	.LVUS176
 8071 0d64 17       		.uleb128 0x17
 8072 0d65 880E0000 		.4byte	.LASF134
 8073 0d69 01       		.byte	0x1
 8074 0d6a 1910     		.2byte	0x1019
 8075 0d6c 0E       		.byte	0xe
 8076 0d6d 48010000 		.4byte	0x148
 8077 0d71 FD080000 		.4byte	.LLST177
 8078 0d75 F9080000 		.4byte	.LVUS177
 8079 0d79 17       		.uleb128 0x17
 8080 0d7a 1B0A0000 		.4byte	.LASF135
 8081 0d7e 01       		.byte	0x1
 8082 0d7f 1910     		.2byte	0x1019
 8083 0d81 25       		.byte	0x25
 8084 0d82 48010000 		.4byte	0x148
 8085 0d86 22090000 		.4byte	.LLST178
 8086 0d8a 1C090000 		.4byte	.LVUS178
 8087 0d8e 28       		.uleb128 0x28
 8088 0d8f BB000000 		.4byte	.LASF136
 8089 0d93 01       		.byte	0x1
 8090 0d94 1A10     		.2byte	0x101a
 8091 0d96 14       		.byte	0x14
 8092 0d97 59010000 		.4byte	0x159
 8093 0d9b 01       		.byte	0x1
 8094 0d9c 24       		.uleb128 0x24
 8095 0d9d DC0D0000 		.4byte	.LVL329
 8096 0da1 652A0000 		.4byte	0x2a65
 8097 0da5 B00D0000 		.4byte	0xdb0
 8098 0da9 1A       		.uleb128 0x1a
 8099 0daa 01       		.byte	0x1
 8100 0dab 50       		.byte	0x50
 8101 0dac 02       		.byte	0x2
 8102 0dad 78       		.byte	0x78
 8103 0dae 00       		.sleb128 0
 8104 0daf 00       		.byte	0
 8105 0db0 29       		.uleb128 0x29
 8106 0db1 0E0E0000 		.4byte	.LVL331
 8107 0db5 01       		.byte	0x1
 8108 0db6 742A0000 		.4byte	0x2a74
 8109 0dba 1A       		.uleb128 0x1a
ARM GAS  /tmp/ccaP1CVS.s 			page 269


 8110 0dbb 01       		.byte	0x1
 8111 0dbc 51       		.byte	0x51
 8112 0dbd 05       		.byte	0x5
 8113 0dbe F3       		.byte	0xf3
 8114 0dbf 01       		.uleb128 0x1
 8115 0dc0 50       		.byte	0x50
 8116 0dc1 23       		.byte	0x23
 8117 0dc2 04       		.uleb128 0x4
 8118 0dc3 00       		.byte	0
 8119 0dc4 00       		.byte	0
 8120 0dc5 1C       		.uleb128 0x1c
 8121 0dc6 01       		.byte	0x1
 8122 0dc7 7D060000 		.4byte	.LASF137
 8123 0dcb 01       		.byte	0x1
 8124 0dcc C60F     		.2byte	0xfc6
 8125 0dce 0D       		.byte	0xd
 8126 0dcf 01       		.byte	0x1
 8127 0dd0 32010000 		.4byte	0x132
 8128 0dd4 240D0000 		.4byte	.LFB52
 8129 0dd8 940D0000 		.4byte	.LFE52
 8130 0ddc 4D090000 		.4byte	.LLST169
 8131 0de0 01       		.byte	0x1
 8132 0de1 490E0000 		.4byte	0xe49
 8133 0de5 16       		.uleb128 0x16
 8134 0de6 2B0C0000 		.4byte	.LASF132
 8135 0dea 01       		.byte	0x1
 8136 0deb C60F     		.2byte	0xfc6
 8137 0ded 39       		.byte	0x39
 8138 0dee 8A020000 		.4byte	0x28a
 8139 0df2 77090000 		.4byte	.LLST170
 8140 0df6 6D090000 		.4byte	.LVUS170
 8141 0dfa 17       		.uleb128 0x17
 8142 0dfb EE0F0000 		.4byte	.LASF109
 8143 0dff 01       		.byte	0x1
 8144 0e00 C80F     		.2byte	0xfc8
 8145 0e02 10       		.byte	0x10
 8146 0e03 59050000 		.4byte	0x559
 8147 0e07 C5090000 		.4byte	.LLST171
 8148 0e0b BB090000 		.4byte	.LVUS171
 8149 0e0f 17       		.uleb128 0x17
 8150 0e10 F40C0000 		.4byte	.LASF110
 8151 0e14 01       		.byte	0x1
 8152 0e15 C90F     		.2byte	0xfc9
 8153 0e17 0D       		.byte	0xd
 8154 0e18 32010000 		.4byte	0x132
 8155 0e1c 0F0A0000 		.4byte	.LLST172
 8156 0e20 090A0000 		.4byte	.LVUS172
 8157 0e24 24       		.uleb128 0x24
 8158 0e25 480D0000 		.4byte	.LVL319
 8159 0e29 652A0000 		.4byte	0x2a65
 8160 0e2d 380E0000 		.4byte	0xe38
 8161 0e31 1A       		.uleb128 0x1a
 8162 0e32 01       		.byte	0x1
 8163 0e33 50       		.byte	0x50
 8164 0e34 02       		.byte	0x2
 8165 0e35 75       		.byte	0x75
 8166 0e36 00       		.sleb128 0
ARM GAS  /tmp/ccaP1CVS.s 			page 270


 8167 0e37 00       		.byte	0
 8168 0e38 25       		.uleb128 0x25
 8169 0e39 880D0000 		.4byte	.LVL321
 8170 0e3d 742A0000 		.4byte	0x2a74
 8171 0e41 1A       		.uleb128 0x1a
 8172 0e42 01       		.byte	0x1
 8173 0e43 51       		.byte	0x51
 8174 0e44 02       		.byte	0x2
 8175 0e45 75       		.byte	0x75
 8176 0e46 00       		.sleb128 0
 8177 0e47 00       		.byte	0
 8178 0e48 00       		.byte	0
 8179 0e49 1C       		.uleb128 0x1c
 8180 0e4a 01       		.byte	0x1
 8181 0e4b 460D0000 		.4byte	.LASF138
 8182 0e4f 01       		.byte	0x1
 8183 0e50 6F0F     		.2byte	0xf6f
 8184 0e52 0D       		.byte	0xd
 8185 0e53 01       		.byte	0x1
 8186 0e54 32010000 		.4byte	0x132
 8187 0e58 840C0000 		.4byte	.LFB51
 8188 0e5c 240D0000 		.4byte	.LFE51
 8189 0e60 3B0A0000 		.4byte	.LLST165
 8190 0e64 01       		.byte	0x1
 8191 0e65 CD0E0000 		.4byte	0xecd
 8192 0e69 16       		.uleb128 0x16
 8193 0e6a 2B0C0000 		.4byte	.LASF132
 8194 0e6e 01       		.byte	0x1
 8195 0e6f 6F0F     		.2byte	0xf6f
 8196 0e71 36       		.byte	0x36
 8197 0e72 8A020000 		.4byte	0x28a
 8198 0e76 6D0A0000 		.4byte	.LLST166
 8199 0e7a 5B0A0000 		.4byte	.LVUS166
 8200 0e7e 17       		.uleb128 0x17
 8201 0e7f 5B0D0000 		.4byte	.LASF139
 8202 0e83 01       		.byte	0x1
 8203 0e84 710F     		.2byte	0xf71
 8204 0e86 10       		.byte	0x10
 8205 0e87 59050000 		.4byte	0x559
 8206 0e8b F50A0000 		.4byte	.LLST167
 8207 0e8f E30A0000 		.4byte	.LVUS167
 8208 0e93 17       		.uleb128 0x17
 8209 0e94 F40C0000 		.4byte	.LASF110
 8210 0e98 01       		.byte	0x1
 8211 0e99 720F     		.2byte	0xf72
 8212 0e9b 0D       		.byte	0xd
 8213 0e9c 32010000 		.4byte	0x132
 8214 0ea0 730B0000 		.4byte	.LLST168
 8215 0ea4 6B0B0000 		.4byte	.LVUS168
 8216 0ea8 24       		.uleb128 0x24
 8217 0ea9 C40C0000 		.4byte	.LVL306
 8218 0ead 652A0000 		.4byte	0x2a65
 8219 0eb1 BC0E0000 		.4byte	0xebc
 8220 0eb5 1A       		.uleb128 0x1a
 8221 0eb6 01       		.byte	0x1
 8222 0eb7 50       		.byte	0x50
 8223 0eb8 02       		.byte	0x2
ARM GAS  /tmp/ccaP1CVS.s 			page 271


 8224 0eb9 78       		.byte	0x78
 8225 0eba 00       		.sleb128 0
 8226 0ebb 00       		.byte	0
 8227 0ebc 25       		.uleb128 0x25
 8228 0ebd FA0C0000 		.4byte	.LVL308
 8229 0ec1 742A0000 		.4byte	0x2a74
 8230 0ec5 1A       		.uleb128 0x1a
 8231 0ec6 01       		.byte	0x1
 8232 0ec7 51       		.byte	0x51
 8233 0ec8 02       		.byte	0x2
 8234 0ec9 78       		.byte	0x78
 8235 0eca 00       		.sleb128 0
 8236 0ecb 00       		.byte	0
 8237 0ecc 00       		.byte	0
 8238 0ecd 27       		.uleb128 0x27
 8239 0ece 01       		.byte	0x1
 8240 0ecf F9000000 		.4byte	.LASF140
 8241 0ed3 01       		.byte	0x1
 8242 0ed4 530F     		.2byte	0xf53
 8243 0ed6 0D       		.byte	0xd
 8244 0ed7 01       		.byte	0x1
 8245 0ed8 32010000 		.4byte	0x132
 8246 0edc 640C0000 		.4byte	.LFB50
 8247 0ee0 840C0000 		.4byte	.LFE50
 8248 0ee4 02       		.byte	0x2
 8249 0ee5 7D       		.byte	0x7d
 8250 0ee6 00       		.sleb128 0
 8251 0ee7 01       		.byte	0x1
 8252 0ee8 FC0E0000 		.4byte	0xefc
 8253 0eec 14       		.uleb128 0x14
 8254 0eed F40C0000 		.4byte	.LASF110
 8255 0ef1 01       		.byte	0x1
 8256 0ef2 550F     		.2byte	0xf55
 8257 0ef4 0D       		.byte	0xd
 8258 0ef5 32010000 		.4byte	0x132
 8259 0ef9 01       		.byte	0x1
 8260 0efa 50       		.byte	0x50
 8261 0efb 00       		.byte	0
 8262 0efc 27       		.uleb128 0x27
 8263 0efd 01       		.byte	0x1
 8264 0efe EC0E0000 		.4byte	.LASF141
 8265 0f02 01       		.byte	0x1
 8266 0f03 420F     		.2byte	0xf42
 8267 0f05 0F       		.byte	0xf
 8268 0f06 01       		.byte	0x1
 8269 0f07 7E020000 		.4byte	0x27e
 8270 0f0b 580C0000 		.4byte	.LFB49
 8271 0f0f 640C0000 		.4byte	.LFE49
 8272 0f13 02       		.byte	0x2
 8273 0f14 7D       		.byte	0x7d
 8274 0f15 00       		.sleb128 0
 8275 0f16 01       		.byte	0x1
 8276 0f17 310F0000 		.4byte	0xf31
 8277 0f1b 17       		.uleb128 0x17
 8278 0f1c F40C0000 		.4byte	.LASF110
 8279 0f20 01       		.byte	0x1
 8280 0f21 440F     		.2byte	0xf44
ARM GAS  /tmp/ccaP1CVS.s 			page 272


 8281 0f23 0F       		.byte	0xf
 8282 0f24 7E020000 		.4byte	0x27e
 8283 0f28 AF0B0000 		.4byte	.LLST164
 8284 0f2c AD0B0000 		.4byte	.LVUS164
 8285 0f30 00       		.byte	0
 8286 0f31 2A       		.uleb128 0x2a
 8287 0f32 7B080000 		.4byte	.LASF142
 8288 0f36 01       		.byte	0x1
 8289 0f37 280F     		.2byte	0xf28
 8290 0f39 0D       		.byte	0xd
 8291 0f3a 01       		.byte	0x1
 8292 0f3b 01       		.byte	0x1
 8293 0f3c 4E0F0000 		.4byte	0xf4e
 8294 0f40 2B       		.uleb128 0x2b
 8295 0f41 EE0F0000 		.4byte	.LASF109
 8296 0f45 01       		.byte	0x1
 8297 0f46 2A0F     		.2byte	0xf2a
 8298 0f48 08       		.byte	0x8
 8299 0f49 4E050000 		.4byte	0x54e
 8300 0f4d 00       		.byte	0
 8301 0f4e 2A       		.uleb128 0x2a
 8302 0f4f B90E0000 		.4byte	.LASF143
 8303 0f53 01       		.byte	0x1
 8304 0f54 F20E     		.2byte	0xef2
 8305 0f56 0E       		.byte	0xe
 8306 0f57 01       		.byte	0x1
 8307 0f58 01       		.byte	0x1
 8308 0f59 6B0F0000 		.4byte	0xf6b
 8309 0f5d 2C       		.uleb128 0x2c
 8310 0f5e EE0F0000 		.4byte	.LASF109
 8311 0f62 01       		.byte	0x1
 8312 0f63 F20E     		.2byte	0xef2
 8313 0f65 23       		.byte	0x23
 8314 0f66 4E050000 		.4byte	0x54e
 8315 0f6a 00       		.byte	0
 8316 0f6b 2D       		.uleb128 0x2d
 8317 0f6c 1D0F0000 		.4byte	.LASF146
 8318 0f70 01       		.byte	0x1
 8319 0f71 9A0E     		.2byte	0xe9a
 8320 0f73 20       		.byte	0x20
 8321 0f74 01       		.byte	0x1
 8322 0f75 DC000000 		.4byte	0xdc
 8323 0f79 01       		.byte	0x1
 8324 0f7a 990F0000 		.4byte	0xf99
 8325 0f7e 2C       		.uleb128 0x2c
 8326 0f7f 4A020000 		.4byte	.LASF144
 8327 0f83 01       		.byte	0x1
 8328 0f84 9A0E     		.2byte	0xe9a
 8329 0f86 4C       		.byte	0x4c
 8330 0f87 990F0000 		.4byte	0xf99
 8331 0f8b 2B       		.uleb128 0x2b
 8332 0f8c 12090000 		.4byte	.LASF145
 8333 0f90 01       		.byte	0x1
 8334 0f91 9C0E     		.2byte	0xe9c
 8335 0f93 0B       		.byte	0xb
 8336 0f94 ED000000 		.4byte	0xed
 8337 0f98 00       		.byte	0
ARM GAS  /tmp/ccaP1CVS.s 			page 273


 8338 0f99 07       		.uleb128 0x7
 8339 0f9a 04       		.byte	0x4
 8340 0f9b D7000000 		.4byte	0xd7
 8341 0f9f 2D       		.uleb128 0x2d
 8342 0fa0 48000000 		.4byte	.LASF147
 8343 0fa4 01       		.byte	0x1
 8344 0fa5 790E     		.2byte	0xe79
 8345 0fa7 15       		.byte	0x15
 8346 0fa8 01       		.byte	0x1
 8347 0fa9 48010000 		.4byte	0x148
 8348 0fad 01       		.byte	0x1
 8349 0fae 23100000 		.4byte	0x1023
 8350 0fb2 2C       		.uleb128 0x2c
 8351 0fb3 340D0000 		.4byte	.LASF148
 8352 0fb7 01       		.byte	0x1
 8353 0fb8 790E     		.2byte	0xe79
 8354 0fba 41       		.byte	0x41
 8355 0fbb 23100000 		.4byte	0x1023
 8356 0fbf 2C       		.uleb128 0x2c
 8357 0fc0 39100000 		.4byte	.LASF149
 8358 0fc4 01       		.byte	0x1
 8359 0fc5 790E     		.2byte	0xe79
 8360 0fc7 5C       		.byte	0x5c
 8361 0fc8 BA050000 		.4byte	0x5ba
 8362 0fcc 2C       		.uleb128 0x2c
 8363 0fcd 2D0D0000 		.4byte	.LASF150
 8364 0fd1 01       		.byte	0x1
 8365 0fd2 790E     		.2byte	0xe79
 8366 0fd4 6F       		.byte	0x6f
 8367 0fd5 95030000 		.4byte	0x395
 8368 0fd9 2B       		.uleb128 0x2b
 8369 0fda DD040000 		.4byte	.LASF151
 8370 0fde 01       		.byte	0x1
 8371 0fdf 7B0E     		.2byte	0xe7b
 8372 0fe1 1D       		.byte	0x1d
 8373 0fe2 4E050000 		.4byte	0x54e
 8374 0fe6 2B       		.uleb128 0x2b
 8375 0fe7 120F0000 		.4byte	.LASF152
 8376 0feb 01       		.byte	0x1
 8377 0fec 7B0E     		.2byte	0xe7b
 8378 0fee 29       		.byte	0x29
 8379 0fef 4E050000 		.4byte	0x54e
 8380 0ff3 2B       		.uleb128 0x2b
 8381 0ff4 72090000 		.4byte	.LASF153
 8382 0ff8 01       		.byte	0x1
 8383 0ff9 7C0E     		.2byte	0xe7c
 8384 0ffb 0E       		.byte	0xe
 8385 0ffc 48010000 		.4byte	0x148
 8386 1000 2E       		.uleb128 0x2e
 8387 1001 13100000 		.4byte	0x1013
 8388 1005 2B       		.uleb128 0x2b
 8389 1006 84000000 		.4byte	.LASF154
 8390 100a 01       		.byte	0x1
 8391 100b 800E     		.2byte	0xe80
 8392 100d 04       		.byte	0x4
 8393 100e C5050000 		.4byte	0x5c5
 8394 1012 00       		.byte	0
ARM GAS  /tmp/ccaP1CVS.s 			page 274


 8395 1013 2F       		.uleb128 0x2f
 8396 1014 2B       		.uleb128 0x2b
 8397 1015 84000000 		.4byte	.LASF154
 8398 1019 01       		.byte	0x1
 8399 101a 880E     		.2byte	0xe88
 8400 101c 05       		.byte	0x5
 8401 101d C5050000 		.4byte	0x5c5
 8402 1021 00       		.byte	0
 8403 1022 00       		.byte	0
 8404 1023 07       		.uleb128 0x7
 8405 1024 04       		.byte	0x4
 8406 1025 F9040000 		.4byte	0x4f9
 8407 1029 06       		.uleb128 0x6
 8408 102a 23100000 		.4byte	0x1023
 8409 102e 1D       		.uleb128 0x1d
 8410 102f 01       		.byte	0x1
 8411 1030 410C0000 		.4byte	.LASF155
 8412 1034 01       		.byte	0x1
 8413 1035 190E     		.2byte	0xe19
 8414 1037 07       		.byte	0x7
 8415 1038 01       		.byte	0x1
 8416 1039 E40A0000 		.4byte	.LFB44
 8417 103d 600B0000 		.4byte	.LFE44
 8418 1041 C20B0000 		.4byte	.LLST138
 8419 1045 01       		.byte	0x1
 8420 1046 0D110000 		.4byte	0x110d
 8421 104a 16       		.uleb128 0x16
 8422 104b DC090000 		.4byte	.LASF108
 8423 104f 01       		.byte	0x1
 8424 1050 190E     		.2byte	0xe19
 8425 1052 22       		.byte	0x22
 8426 1053 7E020000 		.4byte	0x27e
 8427 1057 E40B0000 		.4byte	.LLST139
 8428 105b E20B0000 		.4byte	.LVUS139
 8429 105f 16       		.uleb128 0x16
 8430 1060 BE060000 		.4byte	.LASF156
 8431 1064 01       		.byte	0x1
 8432 1065 190E     		.2byte	0xe19
 8433 1067 37       		.byte	0x37
 8434 1068 23100000 		.4byte	0x1023
 8435 106c FF0B0000 		.4byte	.LLST140
 8436 1070 F70B0000 		.4byte	.LVUS140
 8437 1074 16       		.uleb128 0x16
 8438 1075 08050000 		.4byte	.LASF157
 8439 1079 01       		.byte	0x1
 8440 107a 190E     		.2byte	0xe19
 8441 107c 50       		.byte	0x50
 8442 107d 32010000 		.4byte	0x132
 8443 1081 370C0000 		.4byte	.LLST141
 8444 1085 330C0000 		.4byte	.LVUS141
 8445 1089 16       		.uleb128 0x16
 8446 108a 2D0D0000 		.4byte	.LASF150
 8447 108e 01       		.byte	0x1
 8448 108f 190E     		.2byte	0xe19
 8449 1091 6F       		.byte	0x6f
 8450 1092 95030000 		.4byte	0x395
 8451 1096 610C0000 		.4byte	.LLST142
ARM GAS  /tmp/ccaP1CVS.s 			page 275


 8452 109a 550C0000 		.4byte	.LVUS142
 8453 109e 17       		.uleb128 0x17
 8454 109f EE0F0000 		.4byte	.LASF109
 8455 10a3 01       		.byte	0x1
 8456 10a4 1B0E     		.2byte	0xe1b
 8457 10a6 09       		.byte	0x9
 8458 10a7 4E050000 		.4byte	0x54e
 8459 10ab B60C0000 		.4byte	.LLST143
 8460 10af B40C0000 		.4byte	.LVUS143
 8461 10b3 1E       		.uleb128 0x1e
 8462 10b4 6B0F0000 		.4byte	0xf6b
 8463 10b8 240B0000 		.4byte	.LBI140
 8464 10bc 00       		.byte	.LVU1155
 8465 10bd 38010000 		.4byte	.Ldebug_ranges0+0x138
 8466 10c1 01       		.byte	0x1
 8467 10c2 6A0E     		.2byte	0xe6a
 8468 10c4 2A       		.byte	0x2a
 8469 10c5 EA100000 		.4byte	0x10ea
 8470 10c9 23       		.uleb128 0x23
 8471 10ca 7E0F0000 		.4byte	0xf7e
 8472 10ce CF0C0000 		.4byte	.LLST144
 8473 10d2 C90C0000 		.4byte	.LVUS144
 8474 10d6 1F       		.uleb128 0x1f
 8475 10d7 38010000 		.4byte	.Ldebug_ranges0+0x138
 8476 10db 20       		.uleb128 0x20
 8477 10dc 8B0F0000 		.4byte	0xf8b
 8478 10e0 0A0D0000 		.4byte	.LLST145
 8479 10e4 020D0000 		.4byte	.LVUS145
 8480 10e8 00       		.byte	0
 8481 10e9 00       		.byte	0
 8482 10ea 18       		.uleb128 0x18
 8483 10eb 3A0B0000 		.4byte	.LVL272
 8484 10ef 9F1A0000 		.4byte	0x1a9f
 8485 10f3 18       		.uleb128 0x18
 8486 10f4 460B0000 		.4byte	.LVL273
 8487 10f8 D1190000 		.4byte	0x19d1
 8488 10fc 25       		.uleb128 0x25
 8489 10fd 4E0B0000 		.4byte	.LVL275
 8490 1101 F2200000 		.4byte	0x20f2
 8491 1105 1A       		.uleb128 0x1a
 8492 1106 01       		.byte	0x1
 8493 1107 50       		.byte	0x50
 8494 1108 02       		.byte	0x2
 8495 1109 75       		.byte	0x75
 8496 110a 00       		.sleb128 0
 8497 110b 00       		.byte	0
 8498 110c 00       		.byte	0
 8499 110d 2A       		.uleb128 0x2a
 8500 110e 5E100000 		.4byte	.LASF158
 8501 1112 01       		.byte	0x1
 8502 1113 FA0D     		.2byte	0xdfa
 8503 1115 0D       		.byte	0xd
 8504 1116 01       		.byte	0x1
 8505 1117 01       		.byte	0x1
 8506 1118 2C110000 		.4byte	0x112c
 8507 111c 2F       		.uleb128 0x2f
 8508 111d 2B       		.uleb128 0x2b
ARM GAS  /tmp/ccaP1CVS.s 			page 276


 8509 111e EE0F0000 		.4byte	.LASF109
 8510 1122 01       		.byte	0x1
 8511 1123 010E     		.2byte	0xe01
 8512 1125 0A       		.byte	0xa
 8513 1126 4E050000 		.4byte	0x54e
 8514 112a 00       		.byte	0
 8515 112b 00       		.byte	0
 8516 112c 2A       		.uleb128 0x2a
 8517 112d 22100000 		.4byte	.LASF159
 8518 1131 01       		.byte	0x1
 8519 1132 DA0D     		.2byte	0xdda
 8520 1134 0D       		.byte	0xd
 8521 1135 01       		.byte	0x1
 8522 1136 01       		.byte	0x1
 8523 1137 49110000 		.4byte	0x1149
 8524 113b 2B       		.uleb128 0x2b
 8525 113c 79000000 		.4byte	.LASF42
 8526 1140 01       		.byte	0x1
 8527 1141 DC0D     		.2byte	0xddc
 8528 1143 0D       		.byte	0xd
 8529 1144 48010000 		.4byte	0x148
 8530 1148 00       		.byte	0
 8531 1149 15       		.uleb128 0x15
 8532 114a 1B070000 		.4byte	.LASF161
 8533 114e 01       		.byte	0x1
 8534 114f 060D     		.2byte	0xd06
 8535 1151 08       		.byte	0x8
 8536 1152 01       		.byte	0x1
 8537 1153 8C000000 		.4byte	.LFB41
 8538 1157 E0000000 		.4byte	.LFE41
 8539 115b 430D0000 		.4byte	.LLST6
 8540 115f 01       		.byte	0x1
 8541 1160 06120000 		.4byte	0x1206
 8542 1164 16       		.uleb128 0x16
 8543 1165 670B0000 		.4byte	.LASF162
 8544 1169 01       		.byte	0x1
 8545 116a 060D     		.2byte	0xd06
 8546 116c 08       		.byte	0x8
 8547 116d A2000000 		.4byte	0xa2
 8548 1171 670D0000 		.4byte	.LLST7
 8549 1175 630D0000 		.4byte	.LVUS7
 8550 1179 30       		.uleb128 0x30
 8551 117a 0D110000 		.4byte	0x110d
 8552 117e 18000000 		.4byte	.Ldebug_ranges0+0x18
 8553 1182 01       		.byte	0x1
 8554 1183 170D     		.2byte	0xd17
 8555 1185 03       		.byte	0x3
 8556 1186 31       		.uleb128 0x31
 8557 1187 1C110000 		.4byte	0x111c
 8558 118b 18000000 		.4byte	.Ldebug_ranges0+0x18
 8559 118f 20       		.uleb128 0x20
 8560 1190 1D110000 		.4byte	0x111d
 8561 1194 8A0D0000 		.4byte	.LLST8
 8562 1198 880D0000 		.4byte	.LVUS8
 8563 119c 22       		.uleb128 0x22
 8564 119d 4E0F0000 		.4byte	0xf4e
 8565 11a1 CE000000 		.4byte	.LBI45
ARM GAS  /tmp/ccaP1CVS.s 			page 277


 8566 11a5 01       		.byte	.LVU82
 8567 11a6 CE000000 		.4byte	.LBB45
 8568 11aa E0000000 		.4byte	.LBE45
 8569 11ae 01       		.byte	0x1
 8570 11af 100E     		.2byte	0xe10
 8571 11b1 04       		.byte	0x4
 8572 11b2 DD110000 		.4byte	0x11dd
 8573 11b6 23       		.uleb128 0x23
 8574 11b7 5D0F0000 		.4byte	0xf5d
 8575 11bb 9F0D0000 		.4byte	.LLST9
 8576 11bf 9D0D0000 		.4byte	.LVUS9
 8577 11c3 18       		.uleb128 0x18
 8578 11c4 D4000000 		.4byte	.LVL21
 8579 11c8 AE2A0000 		.4byte	0x2aae
 8580 11cc 25       		.uleb128 0x25
 8581 11cd DA000000 		.4byte	.LVL22
 8582 11d1 AE2A0000 		.4byte	0x2aae
 8583 11d5 1A       		.uleb128 0x1a
 8584 11d6 01       		.byte	0x1
 8585 11d7 50       		.byte	0x50
 8586 11d8 02       		.byte	0x2
 8587 11d9 75       		.byte	0x75
 8588 11da 00       		.sleb128 0
 8589 11db 00       		.byte	0
 8590 11dc 00       		.byte	0
 8591 11dd 18       		.uleb128 0x18
 8592 11de B4000000 		.4byte	.LVL17
 8593 11e2 922A0000 		.4byte	0x2a92
 8594 11e6 24       		.uleb128 0x24
 8595 11e7 BE000000 		.4byte	.LVL19
 8596 11eb 652A0000 		.4byte	0x2a65
 8597 11ef FA110000 		.4byte	0x11fa
 8598 11f3 1A       		.uleb128 0x1a
 8599 11f4 01       		.byte	0x1
 8600 11f5 50       		.byte	0x50
 8601 11f6 02       		.byte	0x2
 8602 11f7 75       		.byte	0x75
 8603 11f8 04       		.sleb128 4
 8604 11f9 00       		.byte	0
 8605 11fa 18       		.uleb128 0x18
 8606 11fb CE000000 		.4byte	.LVL20
 8607 11ff A02A0000 		.4byte	0x2aa0
 8608 1203 00       		.byte	0
 8609 1204 00       		.byte	0
 8610 1205 00       		.byte	0
 8611 1206 32       		.uleb128 0x32
 8612 1207 01       		.byte	0x1
 8613 1208 080C0000 		.4byte	.LASF163
 8614 120c 01       		.byte	0x1
 8615 120d EE0C     		.2byte	0xcee
 8616 120f 07       		.byte	0x7
 8617 1210 01       		.byte	0x1
 8618 1211 DE0A0000 		.4byte	.LFB40
 8619 1215 E40A0000 		.4byte	.LFE40
 8620 1219 02       		.byte	0x2
 8621 121a 7D       		.byte	0x7d
 8622 121b 00       		.sleb128 0
ARM GAS  /tmp/ccaP1CVS.s 			page 278


 8623 121c 01       		.byte	0x1
 8624 121d 55120000 		.4byte	0x1255
 8625 1221 33       		.uleb128 0x33
 8626 1222 DC090000 		.4byte	.LASF108
 8627 1226 01       		.byte	0x1
 8628 1227 EE0C     		.2byte	0xcee
 8629 1229 28       		.byte	0x28
 8630 122a 7E020000 		.4byte	0x27e
 8631 122e 01       		.byte	0x1
 8632 122f 50       		.byte	0x50
 8633 1230 33       		.uleb128 0x33
 8634 1231 60020000 		.4byte	.LASF164
 8635 1235 01       		.byte	0x1
 8636 1236 EE0C     		.2byte	0xcee
 8637 1238 41       		.byte	0x41
 8638 1239 59010000 		.4byte	0x159
 8639 123d 01       		.byte	0x1
 8640 123e 51       		.byte	0x51
 8641 123f 17       		.uleb128 0x17
 8642 1240 EE0F0000 		.4byte	.LASF109
 8643 1244 01       		.byte	0x1
 8644 1245 F00C     		.2byte	0xcf0
 8645 1247 0A       		.byte	0xa
 8646 1248 4E050000 		.4byte	0x54e
 8647 124c B40D0000 		.4byte	.LLST137
 8648 1250 B20D0000 		.4byte	.LVUS137
 8649 1254 00       		.byte	0
 8650 1255 27       		.uleb128 0x27
 8651 1256 01       		.byte	0x1
 8652 1257 380F0000 		.4byte	.LASF165
 8653 125b 01       		.byte	0x1
 8654 125c D70C     		.2byte	0xcd7
 8655 125e 0E       		.byte	0xe
 8656 125f 01       		.byte	0x1
 8657 1260 48010000 		.4byte	0x148
 8658 1264 D80A0000 		.4byte	.LFB39
 8659 1268 DE0A0000 		.4byte	.LFE39
 8660 126c 02       		.byte	0x2
 8661 126d 7D       		.byte	0x7d
 8662 126e 00       		.sleb128 0
 8663 126f 01       		.byte	0x1
 8664 1270 AC120000 		.4byte	0x12ac
 8665 1274 16       		.uleb128 0x16
 8666 1275 DC090000 		.4byte	.LASF108
 8667 1279 01       		.byte	0x1
 8668 127a D70C     		.2byte	0xcd7
 8669 127c 30       		.byte	0x30
 8670 127d 7E020000 		.4byte	0x27e
 8671 1281 CB0D0000 		.4byte	.LLST135
 8672 1285 C70D0000 		.4byte	.LVUS135
 8673 1289 2B       		.uleb128 0x2b
 8674 128a 12030000 		.4byte	.LASF129
 8675 128e 01       		.byte	0x1
 8676 128f D90C     		.2byte	0xcd9
 8677 1291 0E       		.byte	0xe
 8678 1292 48010000 		.4byte	0x148
 8679 1296 17       		.uleb128 0x17
ARM GAS  /tmp/ccaP1CVS.s 			page 279


 8680 1297 EE0F0000 		.4byte	.LASF109
 8681 129b 01       		.byte	0x1
 8682 129c DA0C     		.2byte	0xcda
 8683 129e 0F       		.byte	0xf
 8684 129f AC120000 		.4byte	0x12ac
 8685 12a3 EE0D0000 		.4byte	.LLST136
 8686 12a7 EC0D0000 		.4byte	.LVUS136
 8687 12ab 00       		.byte	0
 8688 12ac 07       		.uleb128 0x7
 8689 12ad 04       		.byte	0x4
 8690 12ae 35050000 		.4byte	0x535
 8691 12b2 06       		.uleb128 0x6
 8692 12b3 AC120000 		.4byte	0x12ac
 8693 12b7 34       		.uleb128 0x34
 8694 12b8 01       		.byte	0x1
 8695 12b9 FC0C0000 		.4byte	.LASF199
 8696 12bd 01       		.byte	0x1
 8697 12be CF0C     		.2byte	0xccf
 8698 12c0 06       		.byte	0x6
 8699 12c1 01       		.byte	0x1
 8700 12c2 C80A0000 		.4byte	.LFB38
 8701 12c6 D80A0000 		.4byte	.LFE38
 8702 12ca 02       		.byte	0x2
 8703 12cb 7D       		.byte	0x7d
 8704 12cc 00       		.sleb128 0
 8705 12cd 01       		.byte	0x1
 8706 12ce 1C       		.uleb128 0x1c
 8707 12cf 01       		.byte	0x1
 8708 12d0 650C0000 		.4byte	.LASF166
 8709 12d4 01       		.byte	0x1
 8710 12d5 900C     		.2byte	0xc90
 8711 12d7 0C       		.byte	0xc
 8712 12d8 01       		.byte	0x1
 8713 12d9 32010000 		.4byte	0x132
 8714 12dd 7C0A0000 		.4byte	.LFB37
 8715 12e1 C80A0000 		.4byte	.LFE37
 8716 12e5 010E0000 		.4byte	.LLST129
 8717 12e9 01       		.byte	0x1
 8718 12ea 84130000 		.4byte	0x1384
 8719 12ee 16       		.uleb128 0x16
 8720 12ef EF080000 		.4byte	.LASF167
 8721 12f3 01       		.byte	0x1
 8722 12f4 900C     		.2byte	0xc90
 8723 12f6 34       		.byte	0x34
 8724 12f7 8A130000 		.4byte	0x138a
 8725 12fb 250E0000 		.4byte	.LLST130
 8726 12ff 210E0000 		.4byte	.LVUS130
 8727 1303 16       		.uleb128 0x16
 8728 1304 350E0000 		.4byte	.LASF168
 8729 1308 01       		.byte	0x1
 8730 1309 900C     		.2byte	0xc90
 8731 130b 52       		.byte	0x52
 8732 130c 95130000 		.4byte	0x1395
 8733 1310 4D0E0000 		.4byte	.LLST131
 8734 1314 430E0000 		.4byte	.LVUS131
 8735 1318 17       		.uleb128 0x17
 8736 1319 F40C0000 		.4byte	.LASF110
ARM GAS  /tmp/ccaP1CVS.s 			page 280


 8737 131d 01       		.byte	0x1
 8738 131e 920C     		.2byte	0xc92
 8739 1320 0C       		.byte	0xc
 8740 1321 32010000 		.4byte	0x132
 8741 1325 940E0000 		.4byte	.LLST132
 8742 1329 920E0000 		.4byte	.LVUS132
 8743 132d 35       		.uleb128 0x35
 8744 132e 20010000 		.4byte	.Ldebug_ranges0+0x120
 8745 1332 71130000 		.4byte	0x1371
 8746 1336 17       		.uleb128 0x17
 8747 1337 99050000 		.4byte	.LASF107
 8748 133b 01       		.byte	0x1
 8749 133c 9A0C     		.2byte	0xc9a
 8750 133e 14       		.byte	0x14
 8751 133f 6F010000 		.4byte	0x16f
 8752 1343 AB0E0000 		.4byte	.LLST133
 8753 1347 A70E0000 		.4byte	.LVUS133
 8754 134b 17       		.uleb128 0x17
 8755 134c D5030000 		.4byte	.LASF169
 8756 1350 01       		.byte	0x1
 8757 1351 9B0C     		.2byte	0xc9b
 8758 1353 14       		.byte	0x14
 8759 1354 6F010000 		.4byte	0x16f
 8760 1358 CF0E0000 		.4byte	.LLST134
 8761 135c C90E0000 		.4byte	.LVUS134
 8762 1360 25       		.uleb128 0x25
 8763 1361 B20A0000 		.4byte	.LVL252
 8764 1365 9A130000 		.4byte	0x139a
 8765 1369 1A       		.uleb128 0x1a
 8766 136a 01       		.byte	0x1
 8767 136b 50       		.byte	0x50
 8768 136c 02       		.byte	0x2
 8769 136d 70       		.byte	0x70
 8770 136e 00       		.sleb128 0
 8771 136f 00       		.byte	0
 8772 1370 00       		.byte	0
 8773 1371 18       		.uleb128 0x18
 8774 1372 860A0000 		.4byte	.LVL249
 8775 1376 922A0000 		.4byte	0x2a92
 8776 137a 18       		.uleb128 0x18
 8777 137b B80A0000 		.4byte	.LVL254
 8778 137f A02A0000 		.4byte	0x2aa0
 8779 1383 00       		.byte	0
 8780 1384 07       		.uleb128 0x7
 8781 1385 04       		.byte	0x4
 8782 1386 06040000 		.4byte	0x406
 8783 138a 06       		.uleb128 0x6
 8784 138b 84130000 		.4byte	0x1384
 8785 138f 07       		.uleb128 0x7
 8786 1390 04       		.byte	0x4
 8787 1391 5E010000 		.4byte	0x15e
 8788 1395 06       		.uleb128 0x6
 8789 1396 8F130000 		.4byte	0x138f
 8790 139a 32       		.uleb128 0x32
 8791 139b 01       		.byte	0x1
 8792 139c 24090000 		.4byte	.LASF170
 8793 13a0 01       		.byte	0x1
ARM GAS  /tmp/ccaP1CVS.s 			page 281


 8794 13a1 880C     		.2byte	0xc88
 8795 13a3 06       		.byte	0x6
 8796 13a4 01       		.byte	0x1
 8797 13a5 680A0000 		.4byte	.LFB36
 8798 13a9 7C0A0000 		.4byte	.LFE36
 8799 13ad 02       		.byte	0x2
 8800 13ae 7D       		.byte	0x7d
 8801 13af 00       		.sleb128 0
 8802 13b0 01       		.byte	0x1
 8803 13b1 C5130000 		.4byte	0x13c5
 8804 13b5 33       		.uleb128 0x33
 8805 13b6 EF080000 		.4byte	.LASF167
 8806 13ba 01       		.byte	0x1
 8807 13bb 880C     		.2byte	0xc88
 8808 13bd 36       		.byte	0x36
 8809 13be 8A130000 		.4byte	0x138a
 8810 13c2 01       		.byte	0x1
 8811 13c3 50       		.byte	0x50
 8812 13c4 00       		.byte	0
 8813 13c5 1D       		.uleb128 0x1d
 8814 13c6 01       		.byte	0x1
 8815 13c7 12020000 		.4byte	.LASF171
 8816 13cb 01       		.byte	0x1
 8817 13cc 7C0C     		.2byte	0xc7c
 8818 13ce 06       		.byte	0x6
 8819 13cf 01       		.byte	0x1
 8820 13d0 480A0000 		.4byte	.LFB35
 8821 13d4 680A0000 		.4byte	.LFE35
 8822 13d8 080F0000 		.4byte	.LLST127
 8823 13dc 01       		.byte	0x1
 8824 13dd 0A140000 		.4byte	0x140a
 8825 13e1 16       		.uleb128 0x16
 8826 13e2 EF080000 		.4byte	.LASF167
 8827 13e6 01       		.byte	0x1
 8828 13e7 7C0C     		.2byte	0xc7c
 8829 13e9 2E       		.byte	0x2e
 8830 13ea 8A130000 		.4byte	0x138a
 8831 13ee 3A0F0000 		.4byte	.LLST128
 8832 13f2 340F0000 		.4byte	.LVUS128
 8833 13f6 18       		.uleb128 0x18
 8834 13f7 500A0000 		.4byte	.LVL244
 8835 13fb 922A0000 		.4byte	0x2a92
 8836 13ff 1B       		.uleb128 0x1b
 8837 1400 640A0000 		.4byte	.LVL246
 8838 1404 01       		.byte	0x1
 8839 1405 A02A0000 		.4byte	0x2aa0
 8840 1409 00       		.byte	0
 8841 140a 1D       		.uleb128 0x1d
 8842 140b 01       		.byte	0x1
 8843 140c 4D060000 		.4byte	.LASF172
 8844 1410 01       		.byte	0x1
 8845 1411 5A0C     		.2byte	0xc5a
 8846 1413 06       		.byte	0x6
 8847 1414 01       		.byte	0x1
 8848 1415 FC090000 		.4byte	.LFB34
 8849 1419 480A0000 		.4byte	.LFE34
 8850 141d 660F0000 		.4byte	.LLST123
ARM GAS  /tmp/ccaP1CVS.s 			page 282


 8851 1421 01       		.byte	0x1
 8852 1422 9F140000 		.4byte	0x149f
 8853 1426 16       		.uleb128 0x16
 8854 1427 40100000 		.4byte	.LASF173
 8855 142b 01       		.byte	0x1
 8856 142c 5A0C     		.2byte	0xc5a
 8857 142e 36       		.byte	0x36
 8858 142f 67020000 		.4byte	0x267
 8859 1433 8A0F0000 		.4byte	.LLST124
 8860 1437 860F0000 		.4byte	.LVUS124
 8861 143b 16       		.uleb128 0x16
 8862 143c 740B0000 		.4byte	.LASF23
 8863 1440 01       		.byte	0x1
 8864 1441 5A0C     		.2byte	0xc5a
 8865 1443 58       		.byte	0x58
 8866 1444 6F010000 		.4byte	0x16f
 8867 1448 AF0F0000 		.4byte	.LLST125
 8868 144c AB0F0000 		.4byte	.LVUS125
 8869 1450 17       		.uleb128 0x17
 8870 1451 A7030000 		.4byte	.LASF174
 8871 1455 01       		.byte	0x1
 8872 1456 5C0C     		.2byte	0xc5c
 8873 1458 08       		.byte	0x8
 8874 1459 4E050000 		.4byte	0x54e
 8875 145d D20F0000 		.4byte	.LLST126
 8876 1461 D00F0000 		.4byte	.LVUS126
 8877 1465 24       		.uleb128 0x24
 8878 1466 0E0A0000 		.4byte	.LVL239
 8879 146a 652A0000 		.4byte	0x2a65
 8880 146e 7A140000 		.4byte	0x147a
 8881 1472 1A       		.uleb128 0x1a
 8882 1473 01       		.byte	0x1
 8883 1474 50       		.byte	0x50
 8884 1475 03       		.byte	0x3
 8885 1476 F3       		.byte	0xf3
 8886 1477 01       		.uleb128 0x1
 8887 1478 50       		.byte	0x50
 8888 1479 00       		.byte	0
 8889 147a 24       		.uleb128 0x24
 8890 147b 140A0000 		.4byte	.LVL240
 8891 147f 652A0000 		.4byte	0x2a65
 8892 1483 8E140000 		.4byte	0x148e
 8893 1487 1A       		.uleb128 0x1a
 8894 1488 01       		.byte	0x1
 8895 1489 50       		.byte	0x50
 8896 148a 02       		.byte	0x2
 8897 148b 77       		.byte	0x77
 8898 148c 00       		.sleb128 0
 8899 148d 00       		.byte	0
 8900 148e 25       		.uleb128 0x25
 8901 148f 320A0000 		.4byte	.LVL241
 8902 1493 742A0000 		.4byte	0x2a74
 8903 1497 1A       		.uleb128 0x1a
 8904 1498 01       		.byte	0x1
 8905 1499 51       		.byte	0x51
 8906 149a 02       		.byte	0x2
 8907 149b 77       		.byte	0x77
ARM GAS  /tmp/ccaP1CVS.s 			page 283


 8908 149c 00       		.sleb128 0
 8909 149d 00       		.byte	0
 8910 149e 00       		.byte	0
 8911 149f 1C       		.uleb128 0x1c
 8912 14a0 01       		.byte	0x1
 8913 14a1 95060000 		.4byte	.LASF175
 8914 14a5 01       		.byte	0x1
 8915 14a6 160C     		.2byte	0xc16
 8916 14a8 0C       		.byte	0xc
 8917 14a9 01       		.byte	0x1
 8918 14aa 32010000 		.4byte	0x132
 8919 14ae A0090000 		.4byte	.LFB33
 8920 14b2 FC090000 		.4byte	.LFE33
 8921 14b6 E50F0000 		.4byte	.LLST119
 8922 14ba 01       		.byte	0x1
 8923 14bb 30150000 		.4byte	0x1530
 8924 14bf 16       		.uleb128 0x16
 8925 14c0 62010000 		.4byte	.LASF176
 8926 14c4 01       		.byte	0x1
 8927 14c5 160C     		.2byte	0xc16
 8928 14c7 3B       		.byte	0x3b
 8929 14c8 36150000 		.4byte	0x1536
 8930 14cc 09100000 		.4byte	.LLST120
 8931 14d0 05100000 		.4byte	.LVUS120
 8932 14d4 17       		.uleb128 0x17
 8933 14d5 A7030000 		.4byte	.LASF174
 8934 14d9 01       		.byte	0x1
 8935 14da 180C     		.2byte	0xc18
 8936 14dc 08       		.byte	0x8
 8937 14dd 4E050000 		.4byte	0x54e
 8938 14e1 2C100000 		.4byte	.LLST121
 8939 14e5 2A100000 		.4byte	.LVUS121
 8940 14e9 17       		.uleb128 0x17
 8941 14ea F40C0000 		.4byte	.LASF110
 8942 14ee 01       		.byte	0x1
 8943 14ef 190C     		.2byte	0xc19
 8944 14f1 0C       		.byte	0xc
 8945 14f2 32010000 		.4byte	0x132
 8946 14f6 43100000 		.4byte	.LLST122
 8947 14fa 3F100000 		.4byte	.LVUS122
 8948 14fe 24       		.uleb128 0x24
 8949 14ff B2090000 		.4byte	.LVL230
 8950 1503 652A0000 		.4byte	0x2a65
 8951 1507 12150000 		.4byte	0x1512
 8952 150b 1A       		.uleb128 0x1a
 8953 150c 01       		.byte	0x1
 8954 150d 50       		.byte	0x50
 8955 150e 02       		.byte	0x2
 8956 150f 76       		.byte	0x76
 8957 1510 00       		.sleb128 0
 8958 1511 00       		.byte	0
 8959 1512 24       		.uleb128 0x24
 8960 1513 C0090000 		.4byte	.LVL231
 8961 1517 652A0000 		.4byte	0x2a65
 8962 151b 26150000 		.4byte	0x1526
 8963 151f 1A       		.uleb128 0x1a
 8964 1520 01       		.byte	0x1
ARM GAS  /tmp/ccaP1CVS.s 			page 284


 8965 1521 50       		.byte	0x50
 8966 1522 02       		.byte	0x2
 8967 1523 76       		.byte	0x76
 8968 1524 00       		.sleb128 0
 8969 1525 00       		.byte	0
 8970 1526 18       		.uleb128 0x18
 8971 1527 DC090000 		.4byte	.LVL232
 8972 152b 742A0000 		.4byte	0x2a74
 8973 152f 00       		.byte	0
 8974 1530 07       		.uleb128 0x7
 8975 1531 04       		.byte	0x4
 8976 1532 79020000 		.4byte	0x279
 8977 1536 06       		.uleb128 0x6
 8978 1537 30150000 		.4byte	0x1530
 8979 153b 1D       		.uleb128 0x1d
 8980 153c 01       		.byte	0x1
 8981 153d 50070000 		.4byte	.LASF177
 8982 1541 01       		.byte	0x1
 8983 1542 F70B     		.2byte	0xbf7
 8984 1544 07       		.byte	0x7
 8985 1545 01       		.byte	0x1
 8986 1546 74090000 		.4byte	.LFB32
 8987 154a A0090000 		.4byte	.LFE32
 8988 154e 63100000 		.4byte	.LLST115
 8989 1552 01       		.byte	0x1
 8990 1553 BE150000 		.4byte	0x15be
 8991 1557 16       		.uleb128 0x16
 8992 1558 62010000 		.4byte	.LASF176
 8993 155c 01       		.byte	0x1
 8994 155d F70B     		.2byte	0xbf7
 8995 155f 37       		.byte	0x37
 8996 1560 C5050000 		.4byte	0x5c5
 8997 1564 93100000 		.4byte	.LLST116
 8998 1568 8F100000 		.4byte	.LVUS116
 8999 156c 16       		.uleb128 0x16
 9000 156d A40E0000 		.4byte	.LASF103
 9001 1571 01       		.byte	0x1
 9002 1572 F70B     		.2byte	0xbf7
 9003 1574 4F       		.byte	0x4f
 9004 1575 5E010000 		.4byte	0x15e
 9005 1579 BA100000 		.4byte	.LLST117
 9006 157d B4100000 		.4byte	.LVUS117
 9007 1581 16       		.uleb128 0x16
 9008 1582 52050000 		.4byte	.LASF178
 9009 1586 01       		.byte	0x1
 9010 1587 F70B     		.2byte	0xbf7
 9011 1589 6E       		.byte	0x6e
 9012 158a 43010000 		.4byte	0x143
 9013 158e FA100000 		.4byte	.LLST118
 9014 1592 F2100000 		.4byte	.LVUS118
 9015 1596 24       		.uleb128 0x24
 9016 1597 84090000 		.4byte	.LVL223
 9017 159b 742A0000 		.4byte	0x2a74
 9018 159f AB150000 		.4byte	0x15ab
 9019 15a3 1A       		.uleb128 0x1a
 9020 15a4 01       		.byte	0x1
 9021 15a5 50       		.byte	0x50
ARM GAS  /tmp/ccaP1CVS.s 			page 285


 9022 15a6 03       		.byte	0x3
 9023 15a7 F3       		.byte	0xf3
 9024 15a8 01       		.uleb128 0x1
 9025 15a9 50       		.byte	0x50
 9026 15aa 00       		.byte	0
 9027 15ab 29       		.uleb128 0x29
 9028 15ac 9A090000 		.4byte	.LVL226
 9029 15b0 01       		.byte	0x1
 9030 15b1 FA060000 		.4byte	0x6fa
 9031 15b5 1A       		.uleb128 0x1a
 9032 15b6 01       		.byte	0x1
 9033 15b7 51       		.byte	0x51
 9034 15b8 03       		.byte	0x3
 9035 15b9 F3       		.byte	0xf3
 9036 15ba 01       		.uleb128 0x1
 9037 15bb 52       		.byte	0x52
 9038 15bc 00       		.byte	0
 9039 15bd 00       		.byte	0
 9040 15be 1D       		.uleb128 0x1d
 9041 15bf 01       		.byte	0x1
 9042 15c0 FB0D0000 		.4byte	.LASF179
 9043 15c4 01       		.byte	0x1
 9044 15c5 DD0B     		.2byte	0xbdd
 9045 15c7 06       		.byte	0x6
 9046 15c8 01       		.byte	0x1
 9047 15c9 4C090000 		.4byte	.LFB31
 9048 15cd 74090000 		.4byte	.LFE31
 9049 15d1 31110000 		.4byte	.LLST111
 9050 15d5 01       		.byte	0x1
 9051 15d6 46160000 		.4byte	0x1646
 9052 15da 16       		.uleb128 0x16
 9053 15db 62010000 		.4byte	.LASF176
 9054 15df 01       		.byte	0x1
 9055 15e0 DD0B     		.2byte	0xbdd
 9056 15e2 2F       		.byte	0x2f
 9057 15e3 BA050000 		.4byte	0x5ba
 9058 15e7 61110000 		.4byte	.LLST112
 9059 15eb 5D110000 		.4byte	.LVUS112
 9060 15ef 16       		.uleb128 0x16
 9061 15f0 740B0000 		.4byte	.LASF23
 9062 15f4 01       		.byte	0x1
 9063 15f5 DD0B     		.2byte	0xbdd
 9064 15f7 4D       		.byte	0x4d
 9065 15f8 6F010000 		.4byte	0x16f
 9066 15fc 86110000 		.4byte	.LLST113
 9067 1600 82110000 		.4byte	.LVUS113
 9068 1604 16       		.uleb128 0x16
 9069 1605 A40E0000 		.4byte	.LASF103
 9070 1609 01       		.byte	0x1
 9071 160a DD0B     		.2byte	0xbdd
 9072 160c 6A       		.byte	0x6a
 9073 160d 6F010000 		.4byte	0x16f
 9074 1611 AF110000 		.4byte	.LLST114
 9075 1615 A7110000 		.4byte	.LVUS114
 9076 1619 24       		.uleb128 0x24
 9077 161a 62090000 		.4byte	.LVL218
 9078 161e 742A0000 		.4byte	0x2a74
ARM GAS  /tmp/ccaP1CVS.s 			page 286


 9079 1622 2E160000 		.4byte	0x162e
 9080 1626 1A       		.uleb128 0x1a
 9081 1627 01       		.byte	0x1
 9082 1628 50       		.byte	0x50
 9083 1629 03       		.byte	0x3
 9084 162a F3       		.byte	0xf3
 9085 162b 01       		.uleb128 0x1
 9086 162c 50       		.byte	0x50
 9087 162d 00       		.byte	0
 9088 162e 29       		.uleb128 0x29
 9089 162f 6E090000 		.4byte	.LVL220
 9090 1633 01       		.byte	0x1
 9091 1634 FA060000 		.4byte	0x6fa
 9092 1638 1A       		.uleb128 0x1a
 9093 1639 01       		.byte	0x1
 9094 163a 50       		.byte	0x50
 9095 163b 03       		.byte	0x3
 9096 163c F3       		.byte	0xf3
 9097 163d 01       		.uleb128 0x1
 9098 163e 52       		.byte	0x52
 9099 163f 1A       		.uleb128 0x1a
 9100 1640 01       		.byte	0x1
 9101 1641 51       		.byte	0x51
 9102 1642 01       		.byte	0x1
 9103 1643 31       		.byte	0x31
 9104 1644 00       		.byte	0
 9105 1645 00       		.byte	0
 9106 1646 1D       		.uleb128 0x1d
 9107 1647 01       		.byte	0x1
 9108 1648 670A0000 		.4byte	.LASF180
 9109 164c 01       		.byte	0x1
 9110 164d CC0B     		.2byte	0xbcc
 9111 164f 06       		.byte	0x6
 9112 1650 01       		.byte	0x1
 9113 1651 2C090000 		.4byte	.LFB30
 9114 1655 4C090000 		.4byte	.LFE30
 9115 1659 E6110000 		.4byte	.LLST108
 9116 165d 01       		.byte	0x1
 9117 165e B9160000 		.4byte	0x16b9
 9118 1662 16       		.uleb128 0x16
 9119 1663 62010000 		.4byte	.LASF176
 9120 1667 01       		.byte	0x1
 9121 1668 CC0B     		.2byte	0xbcc
 9122 166a 2C       		.byte	0x2c
 9123 166b C5050000 		.4byte	0x5c5
 9124 166f 16120000 		.4byte	.LLST109
 9125 1673 12120000 		.4byte	.LVUS109
 9126 1677 16       		.uleb128 0x16
 9127 1678 A40E0000 		.4byte	.LASF103
 9128 167c 01       		.byte	0x1
 9129 167d CC0B     		.2byte	0xbcc
 9130 167f 4A       		.byte	0x4a
 9131 1680 6F010000 		.4byte	0x16f
 9132 1684 3F120000 		.4byte	.LLST110
 9133 1688 37120000 		.4byte	.LVUS110
 9134 168c 24       		.uleb128 0x24
 9135 168d 3A090000 		.4byte	.LVL212
ARM GAS  /tmp/ccaP1CVS.s 			page 287


 9136 1691 832A0000 		.4byte	0x2a83
 9137 1695 A1160000 		.4byte	0x16a1
 9138 1699 1A       		.uleb128 0x1a
 9139 169a 01       		.byte	0x1
 9140 169b 50       		.byte	0x50
 9141 169c 03       		.byte	0x3
 9142 169d F3       		.byte	0xf3
 9143 169e 01       		.uleb128 0x1
 9144 169f 50       		.byte	0x50
 9145 16a0 00       		.byte	0
 9146 16a1 29       		.uleb128 0x29
 9147 16a2 46090000 		.4byte	.LVL214
 9148 16a6 01       		.byte	0x1
 9149 16a7 FA060000 		.4byte	0x6fa
 9150 16ab 1A       		.uleb128 0x1a
 9151 16ac 01       		.byte	0x1
 9152 16ad 50       		.byte	0x50
 9153 16ae 03       		.byte	0x3
 9154 16af F3       		.byte	0xf3
 9155 16b0 01       		.uleb128 0x1
 9156 16b1 51       		.byte	0x51
 9157 16b2 1A       		.uleb128 0x1a
 9158 16b3 01       		.byte	0x1
 9159 16b4 51       		.byte	0x51
 9160 16b5 01       		.byte	0x1
 9161 16b6 31       		.byte	0x31
 9162 16b7 00       		.byte	0
 9163 16b8 00       		.byte	0
 9164 16b9 36       		.uleb128 0x36
 9165 16ba 01       		.byte	0x1
 9166 16bb 2B0A0000 		.4byte	.LASF193
 9167 16bf 01       		.byte	0x1
 9168 16c0 830B     		.2byte	0xb83
 9169 16c2 06       		.byte	0x6
 9170 16c3 01       		.byte	0x1
 9171 16c4 01       		.byte	0x1
 9172 16c5 E8160000 		.4byte	0x16e8
 9173 16c9 2F       		.uleb128 0x2f
 9174 16ca 2B       		.uleb128 0x2b
 9175 16cb 4C0E0000 		.4byte	.LASF181
 9176 16cf 01       		.byte	0x1
 9177 16d0 B70B     		.2byte	0xbb7
 9178 16d2 03       		.byte	0x3
 9179 16d3 48010000 		.4byte	0x148
 9180 16d7 2F       		.uleb128 0x2f
 9181 16d8 2B       		.uleb128 0x2b
 9182 16d9 84000000 		.4byte	.LASF154
 9183 16dd 01       		.byte	0x1
 9184 16de B70B     		.2byte	0xbb7
 9185 16e0 03       		.byte	0x3
 9186 16e1 C5050000 		.4byte	0x5c5
 9187 16e5 00       		.byte	0
 9188 16e6 00       		.byte	0
 9189 16e7 00       		.byte	0
 9190 16e8 1C       		.uleb128 0x1c
 9191 16e9 01       		.byte	0x1
 9192 16ea E7040000 		.4byte	.LASF182
ARM GAS  /tmp/ccaP1CVS.s 			page 288


 9193 16ee 01       		.byte	0x1
 9194 16ef 690A     		.2byte	0xa69
 9195 16f1 0C       		.byte	0xc
 9196 16f2 01       		.byte	0x1
 9197 16f3 32010000 		.4byte	0x132
 9198 16f7 30060000 		.4byte	.LFB28
 9199 16fb FC060000 		.4byte	.LFE28
 9200 16ff 76120000 		.4byte	.LLST81
 9201 1703 01       		.byte	0x1
 9202 1704 C7170000 		.4byte	0x17c7
 9203 1708 17       		.uleb128 0x17
 9204 1709 EE0F0000 		.4byte	.LASF109
 9205 170d 01       		.byte	0x1
 9206 170e 6B0A     		.2byte	0xa6b
 9207 1710 09       		.byte	0x9
 9208 1711 4E050000 		.4byte	0x54e
 9209 1715 98120000 		.4byte	.LLST82
 9210 1719 96120000 		.4byte	.LVUS82
 9211 171d 17       		.uleb128 0x17
 9212 171e 740B0000 		.4byte	.LASF23
 9213 1722 01       		.byte	0x1
 9214 1723 6C0A     		.2byte	0xa6c
 9215 1725 0C       		.byte	0xc
 9216 1726 5E010000 		.4byte	0x15e
 9217 172a AD120000 		.4byte	.LLST83
 9218 172e AB120000 		.4byte	.LVUS83
 9219 1732 17       		.uleb128 0x17
 9220 1733 1B0C0000 		.4byte	.LASF183
 9221 1737 01       		.byte	0x1
 9222 1738 6D0A     		.2byte	0xa6d
 9223 173a 0C       		.byte	0xc
 9224 173b 32010000 		.4byte	0x132
 9225 173f CA120000 		.4byte	.LLST84
 9226 1743 C0120000 		.4byte	.LVUS84
 9227 1747 1F       		.uleb128 0x1f
 9228 1748 B8000000 		.4byte	.Ldebug_ranges0+0xb8
 9229 174c 17       		.uleb128 0x17
 9230 174d 99050000 		.4byte	.LASF107
 9231 1751 01       		.byte	0x1
 9232 1752 770A     		.2byte	0xa77
 9233 1754 14       		.byte	0x14
 9234 1755 6F010000 		.4byte	0x16f
 9235 1759 10130000 		.4byte	.LLST85
 9236 175d 0C130000 		.4byte	.LVUS85
 9237 1761 37       		.uleb128 0x37
 9238 1762 46060000 		.4byte	.LBB115
 9239 1766 5C060000 		.4byte	.LBE115
 9240 176a 8D170000 		.4byte	0x178d
 9241 176e 17       		.uleb128 0x17
 9242 176f B9040000 		.4byte	.LASF184
 9243 1773 01       		.byte	0x1
 9244 1774 7F0A     		.2byte	0xa7f
 9245 1776 04       		.byte	0x4
 9246 1777 BA050000 		.4byte	0x5ba
 9247 177b 32130000 		.4byte	.LLST86
 9248 177f 2E130000 		.4byte	.LVUS86
 9249 1783 18       		.uleb128 0x18
ARM GAS  /tmp/ccaP1CVS.s 			page 289


 9250 1784 5C060000 		.4byte	.LVL146
 9251 1788 310F0000 		.4byte	0xf31
 9252 178c 00       		.byte	0
 9253 178d 24       		.uleb128 0x24
 9254 178e B6060000 		.4byte	.LVL153
 9255 1792 652A0000 		.4byte	0x2a65
 9256 1796 A1170000 		.4byte	0x17a1
 9257 179a 1A       		.uleb128 0x1a
 9258 179b 01       		.byte	0x1
 9259 179c 50       		.byte	0x50
 9260 179d 02       		.byte	0x2
 9261 179e 7B       		.byte	0x7b
 9262 179f 00       		.sleb128 0
 9263 17a0 00       		.byte	0
 9264 17a1 24       		.uleb128 0x24
 9265 17a2 C2060000 		.4byte	.LVL154
 9266 17a6 652A0000 		.4byte	0x2a65
 9267 17aa B5170000 		.4byte	0x17b5
 9268 17ae 1A       		.uleb128 0x1a
 9269 17af 01       		.byte	0x1
 9270 17b0 50       		.byte	0x50
 9271 17b1 02       		.byte	0x2
 9272 17b2 76       		.byte	0x76
 9273 17b3 18       		.sleb128 24
 9274 17b4 00       		.byte	0
 9275 17b5 25       		.uleb128 0x25
 9276 17b6 D8060000 		.4byte	.LVL155
 9277 17ba 742A0000 		.4byte	0x2a74
 9278 17be 1A       		.uleb128 0x1a
 9279 17bf 01       		.byte	0x1
 9280 17c0 51       		.byte	0x51
 9281 17c1 02       		.byte	0x2
 9282 17c2 7B       		.byte	0x7b
 9283 17c3 00       		.sleb128 0
 9284 17c4 00       		.byte	0
 9285 17c5 00       		.byte	0
 9286 17c6 00       		.byte	0
 9287 17c7 1C       		.uleb128 0x1c
 9288 17c8 01       		.byte	0x1
 9289 17c9 26080000 		.4byte	.LASF185
 9290 17cd 01       		.byte	0x1
 9291 17ce B509     		.2byte	0x9b5
 9292 17d0 0E       		.byte	0xe
 9293 17d1 01       		.byte	0x1
 9294 17d2 48010000 		.4byte	0x148
 9295 17d6 C00B0000 		.4byte	.LFB27
 9296 17da 580C0000 		.4byte	.LFE27
 9297 17de 54130000 		.4byte	.LLST158
 9298 17e2 01       		.byte	0x1
 9299 17e3 1C190000 		.4byte	0x191c
 9300 17e7 16       		.uleb128 0x16
 9301 17e8 340D0000 		.4byte	.LASF148
 9302 17ec 01       		.byte	0x1
 9303 17ed B509     		.2byte	0x9b5
 9304 17ef 39       		.byte	0x39
 9305 17f0 29100000 		.4byte	0x1029
 9306 17f4 7A130000 		.4byte	.LLST159
ARM GAS  /tmp/ccaP1CVS.s 			page 290


 9307 17f8 74130000 		.4byte	.LVUS159
 9308 17fc 16       		.uleb128 0x16
 9309 17fd 950D0000 		.4byte	.LASF186
 9310 1801 01       		.byte	0x1
 9311 1802 B509     		.2byte	0x9b5
 9312 1804 5E       		.byte	0x5e
 9313 1805 59010000 		.4byte	0x159
 9314 1809 A9130000 		.4byte	.LLST160
 9315 180d A3130000 		.4byte	.LVUS160
 9316 1811 16       		.uleb128 0x16
 9317 1812 D8010000 		.4byte	.LASF187
 9318 1816 01       		.byte	0x1
 9319 1817 B509     		.2byte	0x9b5
 9320 1819 7C       		.byte	0x7c
 9321 181a 660A0000 		.4byte	0xa66
 9322 181e D9130000 		.4byte	.LLST161
 9323 1822 D5130000 		.4byte	.LVUS161
 9324 1826 17       		.uleb128 0x17
 9325 1827 72090000 		.4byte	.LASF153
 9326 182b 01       		.byte	0x1
 9327 182c B709     		.2byte	0x9b7
 9328 182e 0E       		.byte	0xe
 9329 182f 48010000 		.4byte	0x148
 9330 1833 FD130000 		.4byte	.LLST162
 9331 1837 F7130000 		.4byte	.LVUS162
 9332 183b 17       		.uleb128 0x17
 9333 183c AF070000 		.4byte	.LASF188
 9334 1840 01       		.byte	0x1
 9335 1841 B709     		.2byte	0x9b7
 9336 1843 1A       		.byte	0x1a
 9337 1844 48010000 		.4byte	0x148
 9338 1848 2E140000 		.4byte	.LLST163
 9339 184c 28140000 		.4byte	.LVUS163
 9340 1850 18       		.uleb128 0x18
 9341 1851 CE0B0000 		.4byte	.LVL287
 9342 1855 9F1A0000 		.4byte	0x1a9f
 9343 1859 24       		.uleb128 0x24
 9344 185a F80B0000 		.4byte	.LVL290
 9345 185e 9F0F0000 		.4byte	0xf9f
 9346 1862 84180000 		.4byte	0x1884
 9347 1866 1A       		.uleb128 0x1a
 9348 1867 01       		.byte	0x1
 9349 1868 50       		.byte	0x50
 9350 1869 08       		.byte	0x8
 9351 186a 78       		.byte	0x78
 9352 186b 00       		.sleb128 0
 9353 186c 74       		.byte	0x74
 9354 186d 00       		.sleb128 0
 9355 186e 1E       		.byte	0x1e
 9356 186f 75       		.byte	0x75
 9357 1870 00       		.sleb128 0
 9358 1871 22       		.byte	0x22
 9359 1872 1A       		.uleb128 0x1a
 9360 1873 01       		.byte	0x1
 9361 1874 51       		.byte	0x51
 9362 1875 08       		.byte	0x8
 9363 1876 7B       		.byte	0x7b
ARM GAS  /tmp/ccaP1CVS.s 			page 291


 9364 1877 00       		.sleb128 0
 9365 1878 76       		.byte	0x76
 9366 1879 00       		.sleb128 0
 9367 187a 1E       		.byte	0x1e
 9368 187b 7A       		.byte	0x7a
 9369 187c 00       		.sleb128 0
 9370 187d 22       		.byte	0x22
 9371 187e 1A       		.uleb128 0x1a
 9372 187f 01       		.byte	0x1
 9373 1880 52       		.byte	0x52
 9374 1881 01       		.byte	0x1
 9375 1882 31       		.byte	0x31
 9376 1883 00       		.byte	0
 9377 1884 24       		.uleb128 0x24
 9378 1885 0C0C0000 		.4byte	.LVL292
 9379 1889 9F0F0000 		.4byte	0xf9f
 9380 188d A3180000 		.4byte	0x18a3
 9381 1891 1A       		.uleb128 0x1a
 9382 1892 01       		.byte	0x1
 9383 1893 50       		.byte	0x50
 9384 1894 08       		.byte	0x8
 9385 1895 78       		.byte	0x78
 9386 1896 00       		.sleb128 0
 9387 1897 74       		.byte	0x74
 9388 1898 00       		.sleb128 0
 9389 1899 1E       		.byte	0x1e
 9390 189a 75       		.byte	0x75
 9391 189b 00       		.sleb128 0
 9392 189c 22       		.byte	0x22
 9393 189d 1A       		.uleb128 0x1a
 9394 189e 01       		.byte	0x1
 9395 189f 52       		.byte	0x52
 9396 18a0 01       		.byte	0x1
 9397 18a1 32       		.byte	0x32
 9398 18a2 00       		.byte	0
 9399 18a3 24       		.uleb128 0x24
 9400 18a4 1C0C0000 		.4byte	.LVL294
 9401 18a8 9F0F0000 		.4byte	0xf9f
 9402 18ac C2180000 		.4byte	0x18c2
 9403 18b0 1A       		.uleb128 0x1a
 9404 18b1 01       		.byte	0x1
 9405 18b2 50       		.byte	0x50
 9406 18b3 08       		.byte	0x8
 9407 18b4 78       		.byte	0x78
 9408 18b5 00       		.sleb128 0
 9409 18b6 74       		.byte	0x74
 9410 18b7 00       		.sleb128 0
 9411 18b8 1E       		.byte	0x1e
 9412 18b9 75       		.byte	0x75
 9413 18ba 00       		.sleb128 0
 9414 18bb 22       		.byte	0x22
 9415 18bc 1A       		.uleb128 0x1a
 9416 18bd 01       		.byte	0x1
 9417 18be 52       		.byte	0x52
 9418 18bf 01       		.byte	0x1
 9419 18c0 32       		.byte	0x32
 9420 18c1 00       		.byte	0
ARM GAS  /tmp/ccaP1CVS.s 			page 292


 9421 18c2 24       		.uleb128 0x24
 9422 18c3 2A0C0000 		.4byte	.LVL296
 9423 18c7 9F0F0000 		.4byte	0xf9f
 9424 18cb EA180000 		.4byte	0x18ea
 9425 18cf 1A       		.uleb128 0x1a
 9426 18d0 01       		.byte	0x1
 9427 18d1 50       		.byte	0x50
 9428 18d2 08       		.byte	0x8
 9429 18d3 78       		.byte	0x78
 9430 18d4 00       		.sleb128 0
 9431 18d5 74       		.byte	0x74
 9432 18d6 00       		.sleb128 0
 9433 18d7 1E       		.byte	0x1e
 9434 18d8 75       		.byte	0x75
 9435 18d9 00       		.sleb128 0
 9436 18da 22       		.byte	0x22
 9437 18db 1A       		.uleb128 0x1a
 9438 18dc 01       		.byte	0x1
 9439 18dd 51       		.byte	0x51
 9440 18de 05       		.byte	0x5
 9441 18df 03       		.byte	0x3
 9442 18e0 2C000000 		.4byte	.LANCHOR0+44
 9443 18e4 1A       		.uleb128 0x1a
 9444 18e5 01       		.byte	0x1
 9445 18e6 52       		.byte	0x52
 9446 18e7 01       		.byte	0x1
 9447 18e8 34       		.byte	0x34
 9448 18e9 00       		.byte	0
 9449 18ea 24       		.uleb128 0x24
 9450 18eb 380C0000 		.4byte	.LVL298
 9451 18ef 9F0F0000 		.4byte	0xf9f
 9452 18f3 12190000 		.4byte	0x1912
 9453 18f7 1A       		.uleb128 0x1a
 9454 18f8 01       		.byte	0x1
 9455 18f9 50       		.byte	0x50
 9456 18fa 08       		.byte	0x8
 9457 18fb 78       		.byte	0x78
 9458 18fc 00       		.sleb128 0
 9459 18fd 74       		.byte	0x74
 9460 18fe 00       		.sleb128 0
 9461 18ff 1E       		.byte	0x1e
 9462 1900 75       		.byte	0x75
 9463 1901 00       		.sleb128 0
 9464 1902 22       		.byte	0x22
 9465 1903 1A       		.uleb128 0x1a
 9466 1904 01       		.byte	0x1
 9467 1905 51       		.byte	0x51
 9468 1906 05       		.byte	0x5
 9469 1907 03       		.byte	0x3
 9470 1908 0C000000 		.4byte	.LANCHOR0+12
 9471 190c 1A       		.uleb128 0x1a
 9472 190d 01       		.byte	0x1
 9473 190e 52       		.byte	0x52
 9474 190f 01       		.byte	0x1
 9475 1910 33       		.byte	0x33
 9476 1911 00       		.byte	0
 9477 1912 18       		.uleb128 0x18
ARM GAS  /tmp/ccaP1CVS.s 			page 293


 9478 1913 420C0000 		.4byte	.LVL301
 9479 1917 D1190000 		.4byte	0x19d1
 9480 191b 00       		.byte	0
 9481 191c 27       		.uleb128 0x27
 9482 191d 01       		.byte	0x1
 9483 191e 6C0D0000 		.4byte	.LASF189
 9484 1922 01       		.byte	0x1
 9485 1923 2209     		.2byte	0x922
 9486 1925 07       		.byte	0x7
 9487 1926 01       		.byte	0x1
 9488 1927 A9000000 		.4byte	0xa9
 9489 192b 20060000 		.4byte	.LFB26
 9490 192f 30060000 		.4byte	.LFE26
 9491 1933 02       		.byte	0x2
 9492 1934 7D       		.byte	0x7d
 9493 1935 00       		.sleb128 0
 9494 1936 01       		.byte	0x1
 9495 1937 66190000 		.4byte	0x1966
 9496 193b 16       		.uleb128 0x16
 9497 193c B6090000 		.4byte	.LASF190
 9498 1940 01       		.byte	0x1
 9499 1941 2209     		.2byte	0x922
 9500 1943 23       		.byte	0x23
 9501 1944 7E020000 		.4byte	0x27e
 9502 1948 5B140000 		.4byte	.LLST79
 9503 194c 59140000 		.4byte	.LVUS79
 9504 1950 17       		.uleb128 0x17
 9505 1951 EE0F0000 		.4byte	.LASF109
 9506 1955 01       		.byte	0x1
 9507 1956 2409     		.2byte	0x924
 9508 1958 08       		.byte	0x8
 9509 1959 4E050000 		.4byte	0x54e
 9510 195d 72140000 		.4byte	.LLST80
 9511 1961 6E140000 		.4byte	.LVUS80
 9512 1965 00       		.byte	0
 9513 1966 26       		.uleb128 0x26
 9514 1967 01       		.byte	0x1
 9515 1968 E2000000 		.4byte	.LASF192
 9516 196c 01       		.byte	0x1
 9517 196d 1A09     		.2byte	0x91a
 9518 196f 0D       		.byte	0xd
 9519 1970 01       		.byte	0x1
 9520 1971 48010000 		.4byte	0x148
 9521 1975 14060000 		.4byte	.LFB25
 9522 1979 20060000 		.4byte	.LFE25
 9523 197d 02       		.byte	0x2
 9524 197e 7D       		.byte	0x7d
 9525 197f 00       		.sleb128 0
 9526 1980 01       		.byte	0x1
 9527 1981 38       		.uleb128 0x38
 9528 1982 01       		.byte	0x1
 9529 1983 10040000 		.4byte	.LASF194
 9530 1987 01       		.byte	0x1
 9531 1988 FB08     		.2byte	0x8fb
 9532 198a 0C       		.byte	0xc
 9533 198b 01       		.byte	0x1
 9534 198c 5E010000 		.4byte	0x15e
ARM GAS  /tmp/ccaP1CVS.s 			page 294


 9535 1990 AF190000 		.4byte	0x19af
 9536 1994 2B       		.uleb128 0x2b
 9537 1995 F40C0000 		.4byte	.LASF110
 9538 1999 01       		.byte	0x1
 9539 199a FD08     		.2byte	0x8fd
 9540 199c 0C       		.byte	0xc
 9541 199d 5E010000 		.4byte	0x15e
 9542 19a1 2B       		.uleb128 0x2b
 9543 19a2 38030000 		.4byte	.LASF114
 9544 19a6 01       		.byte	0x1
 9545 19a7 FE08     		.2byte	0x8fe
 9546 19a9 0D       		.byte	0xd
 9547 19aa 48010000 		.4byte	0x148
 9548 19ae 00       		.byte	0
 9549 19af 39       		.uleb128 0x39
 9550 19b0 01       		.byte	0x1
 9551 19b1 CD0B0000 		.4byte	.LASF216
 9552 19b5 01       		.byte	0x1
 9553 19b6 EC08     		.2byte	0x8ec
 9554 19b8 0C       		.byte	0xc
 9555 19b9 01       		.byte	0x1
 9556 19ba 5E010000 		.4byte	0x15e
 9557 19be 01       		.byte	0x1
 9558 19bf D1190000 		.4byte	0x19d1
 9559 19c3 2B       		.uleb128 0x2b
 9560 19c4 7A0D0000 		.4byte	.LASF195
 9561 19c8 01       		.byte	0x1
 9562 19c9 EE08     		.2byte	0x8ee
 9563 19cb 0C       		.byte	0xc
 9564 19cc 5E010000 		.4byte	0x15e
 9565 19d0 00       		.byte	0
 9566 19d1 1C       		.uleb128 0x1c
 9567 19d2 01       		.byte	0x1
 9568 19d3 950B0000 		.4byte	.LASF196
 9569 19d7 01       		.byte	0x1
 9570 19d8 7E08     		.2byte	0x87e
 9571 19da 0C       		.byte	0xc
 9572 19db 01       		.byte	0x1
 9573 19dc 32010000 		.4byte	0x132
 9574 19e0 FC060000 		.4byte	.LFB22
 9575 19e4 BC070000 		.4byte	.LFE22
 9576 19e8 92140000 		.4byte	.LLST87
 9577 19ec 01       		.byte	0x1
 9578 19ed 9F1A0000 		.4byte	0x1a9f
 9579 19f1 17       		.uleb128 0x17
 9580 19f2 EE0F0000 		.4byte	.LASF109
 9581 19f6 01       		.byte	0x1
 9582 19f7 8008     		.2byte	0x880
 9583 19f9 08       		.byte	0x8
 9584 19fa 4E050000 		.4byte	0x54e
 9585 19fe B8140000 		.4byte	.LLST88
 9586 1a02 B2140000 		.4byte	.LVUS88
 9587 1a06 17       		.uleb128 0x17
 9588 1a07 DC0E0000 		.4byte	.LASF197
 9589 1a0b 01       		.byte	0x1
 9590 1a0c 8108     		.2byte	0x881
 9591 1a0e 0C       		.byte	0xc
ARM GAS  /tmp/ccaP1CVS.s 			page 295


 9592 1a0f 32010000 		.4byte	0x132
 9593 1a13 EB140000 		.4byte	.LLST89
 9594 1a17 E3140000 		.4byte	.LVUS89
 9595 1a1b 37       		.uleb128 0x37
 9596 1a1c 7E070000 		.4byte	.LBB118
 9597 1a20 98070000 		.4byte	.LBE118
 9598 1a24 471A0000 		.4byte	0x1a47
 9599 1a28 17       		.uleb128 0x17
 9600 1a29 27000000 		.4byte	.LASF198
 9601 1a2d 01       		.byte	0x1
 9602 1a2e B908     		.2byte	0x8b9
 9603 1a30 12       		.byte	0x12
 9604 1a31 48010000 		.4byte	0x148
 9605 1a35 28150000 		.4byte	.LLST90
 9606 1a39 22150000 		.4byte	.LVUS90
 9607 1a3d 18       		.uleb128 0x18
 9608 1a3e 8A070000 		.4byte	.LVL172
 9609 1a42 E8160000 		.4byte	0x16e8
 9610 1a46 00       		.byte	0
 9611 1a47 18       		.uleb128 0x18
 9612 1a48 06070000 		.4byte	.LVL159
 9613 1a4c 922A0000 		.4byte	0x2a92
 9614 1a50 18       		.uleb128 0x18
 9615 1a51 1C070000 		.4byte	.LVL162
 9616 1a55 A02A0000 		.4byte	0x2aa0
 9617 1a59 24       		.uleb128 0x24
 9618 1a5a 46070000 		.4byte	.LVL166
 9619 1a5e 652A0000 		.4byte	0x2a65
 9620 1a62 6D1A0000 		.4byte	0x1a6d
 9621 1a66 1A       		.uleb128 0x1a
 9622 1a67 01       		.byte	0x1
 9623 1a68 50       		.byte	0x50
 9624 1a69 02       		.byte	0x2
 9625 1a6a 75       		.byte	0x75
 9626 1a6b 18       		.sleb128 24
 9627 1a6c 00       		.byte	0
 9628 1a6d 24       		.uleb128 0x24
 9629 1a6e 4C070000 		.4byte	.LVL167
 9630 1a72 652A0000 		.4byte	0x2a65
 9631 1a76 811A0000 		.4byte	0x1a81
 9632 1a7a 1A       		.uleb128 0x1a
 9633 1a7b 01       		.byte	0x1
 9634 1a7c 50       		.byte	0x50
 9635 1a7d 02       		.byte	0x2
 9636 1a7e 79       		.byte	0x79
 9637 1a7f 00       		.sleb128 0
 9638 1a80 00       		.byte	0
 9639 1a81 24       		.uleb128 0x24
 9640 1a82 62070000 		.4byte	.LVL168
 9641 1a86 742A0000 		.4byte	0x2a74
 9642 1a8a 951A0000 		.4byte	0x1a95
 9643 1a8e 1A       		.uleb128 0x1a
 9644 1a8f 01       		.byte	0x1
 9645 1a90 51       		.byte	0x51
 9646 1a91 02       		.byte	0x2
 9647 1a92 79       		.byte	0x79
 9648 1a93 00       		.sleb128 0
ARM GAS  /tmp/ccaP1CVS.s 			page 296


 9649 1a94 00       		.byte	0
 9650 1a95 18       		.uleb128 0x18
 9651 1a96 7E070000 		.4byte	.LVL170
 9652 1a9a 310F0000 		.4byte	0xf31
 9653 1a9e 00       		.byte	0
 9654 1a9f 34       		.uleb128 0x34
 9655 1aa0 01       		.byte	0x1
 9656 1aa1 CD040000 		.4byte	.LASF200
 9657 1aa5 01       		.byte	0x1
 9658 1aa6 3408     		.2byte	0x834
 9659 1aa8 06       		.byte	0x6
 9660 1aa9 01       		.byte	0x1
 9661 1aaa E8050000 		.4byte	.LFB21
 9662 1aae FC050000 		.4byte	.LFE21
 9663 1ab2 02       		.byte	0x2
 9664 1ab3 7D       		.byte	0x7d
 9665 1ab4 00       		.sleb128 0
 9666 1ab5 01       		.byte	0x1
 9667 1ab6 32       		.uleb128 0x32
 9668 1ab7 01       		.byte	0x1
 9669 1ab8 75050000 		.4byte	.LASF201
 9670 1abc 01       		.byte	0x1
 9671 1abd 2908     		.2byte	0x829
 9672 1abf 06       		.byte	0x6
 9673 1ac0 01       		.byte	0x1
 9674 1ac1 C8050000 		.4byte	.LFB20
 9675 1ac5 E8050000 		.4byte	.LFE20
 9676 1ac9 02       		.byte	0x2
 9677 1aca 7D       		.byte	0x7d
 9678 1acb 00       		.sleb128 0
 9679 1acc 01       		.byte	0x1
 9680 1acd FC1A0000 		.4byte	0x1afc
 9681 1ad1 22       		.uleb128 0x22
 9682 1ad2 5C270000 		.4byte	0x275c
 9683 1ad6 C8050000 		.4byte	.LBI112
 9684 1ada 02       		.byte	.LVU596
 9685 1adb C8050000 		.4byte	.LBB112
 9686 1adf D8050000 		.4byte	.LBE112
 9687 1ae3 01       		.byte	0x1
 9688 1ae4 2E08     		.2byte	0x82e
 9689 1ae6 02       		.byte	0x2
 9690 1ae7 F11A0000 		.4byte	0x1af1
 9691 1aeb 21       		.uleb128 0x21
 9692 1aec 6A270000 		.4byte	0x276a
 9693 1af0 00       		.byte	0
 9694 1af1 1B       		.uleb128 0x1b
 9695 1af2 E4050000 		.4byte	.LVL136
 9696 1af6 01       		.byte	0x1
 9697 1af7 BC2A0000 		.4byte	0x2abc
 9698 1afb 00       		.byte	0
 9699 1afc 1D       		.uleb128 0x1d
 9700 1afd 01       		.byte	0x1
 9701 1afe 810D0000 		.4byte	.LASF202
 9702 1b02 01       		.byte	0x1
 9703 1b03 AF07     		.2byte	0x7af
 9704 1b05 06       		.byte	0x6
 9705 1b06 01       		.byte	0x1
ARM GAS  /tmp/ccaP1CVS.s 			page 297


 9706 1b07 6C050000 		.4byte	.LFB19
 9707 1b0b C8050000 		.4byte	.LFE19
 9708 1b0f 53150000 		.4byte	.LLST76
 9709 1b13 01       		.byte	0x1
 9710 1b14 9C1B0000 		.4byte	0x1b9c
 9711 1b18 17       		.uleb128 0x17
 9712 1b19 F40C0000 		.4byte	.LASF110
 9713 1b1d 01       		.byte	0x1
 9714 1b1e B107     		.2byte	0x7b1
 9715 1b20 0C       		.byte	0xc
 9716 1b21 32010000 		.4byte	0x132
 9717 1b25 A9150000 		.4byte	.LLST77
 9718 1b29 A3150000 		.4byte	.LVUS77
 9719 1b2d 22       		.uleb128 0x22
 9720 1b2e 5C270000 		.4byte	0x275c
 9721 1b32 92050000 		.4byte	.LBI110
 9722 1b36 01       		.byte	.LVU579
 9723 1b37 92050000 		.4byte	.LBB110
 9724 1b3b A2050000 		.4byte	.LBE110
 9725 1b3f 01       		.byte	0x1
 9726 1b40 F707     		.2byte	0x7f7
 9727 1b42 03       		.byte	0x3
 9728 1b43 4D1B0000 		.4byte	0x1b4d
 9729 1b47 21       		.uleb128 0x21
 9730 1b48 6A270000 		.4byte	0x276a
 9731 1b4c 00       		.byte	0
 9732 1b4d 24       		.uleb128 0x24
 9733 1b4e 86050000 		.4byte	.LVL133
 9734 1b52 27240000 		.4byte	0x2427
 9735 1b56 881B0000 		.4byte	0x1b88
 9736 1b5a 1A       		.uleb128 0x1a
 9737 1b5b 01       		.byte	0x1
 9738 1b5c 50       		.byte	0x50
 9739 1b5d 05       		.byte	0x5
 9740 1b5e 03       		.byte	0x3
 9741 1b5f 00000000 		.4byte	prvIdleTask
 9742 1b63 1A       		.uleb128 0x1a
 9743 1b64 01       		.byte	0x1
 9744 1b65 51       		.byte	0x51
 9745 1b66 05       		.byte	0x5
 9746 1b67 03       		.byte	0x3
 9747 1b68 00000000 		.4byte	.LC0
 9748 1b6c 1A       		.uleb128 0x1a
 9749 1b6d 01       		.byte	0x1
 9750 1b6e 52       		.byte	0x52
 9751 1b6f 02       		.byte	0x2
 9752 1b70 08       		.byte	0x8
 9753 1b71 78       		.byte	0x78
 9754 1b72 1A       		.uleb128 0x1a
 9755 1b73 01       		.byte	0x1
 9756 1b74 53       		.byte	0x53
 9757 1b75 02       		.byte	0x2
 9758 1b76 75       		.byte	0x75
 9759 1b77 00       		.sleb128 0
 9760 1b78 1A       		.uleb128 0x1a
 9761 1b79 02       		.byte	0x2
 9762 1b7a 7D       		.byte	0x7d
ARM GAS  /tmp/ccaP1CVS.s 			page 298


 9763 1b7b 00       		.sleb128 0
 9764 1b7c 02       		.byte	0x2
 9765 1b7d 75       		.byte	0x75
 9766 1b7e 00       		.sleb128 0
 9767 1b7f 1A       		.uleb128 0x1a
 9768 1b80 02       		.byte	0x2
 9769 1b81 7D       		.byte	0x7d
 9770 1b82 04       		.sleb128 4
 9771 1b83 03       		.byte	0x3
 9772 1b84 74       		.byte	0x74
 9773 1b85 F401     		.sleb128 244
 9774 1b87 00       		.byte	0
 9775 1b88 18       		.uleb128 0x18
 9776 1b89 8E050000 		.4byte	.LVL134
 9777 1b8d CA2A0000 		.4byte	0x2aca
 9778 1b91 1B       		.uleb128 0x1b
 9779 1b92 B8050000 		.4byte	.LVL135
 9780 1b96 01       		.byte	0x1
 9781 1b97 D92A0000 		.4byte	0x2ad9
 9782 1b9b 00       		.byte	0
 9783 1b9c 1C       		.uleb128 0x1c
 9784 1b9d 01       		.byte	0x1
 9785 1b9e CC0C0000 		.4byte	.LASF203
 9786 1ba2 01       		.byte	0x1
 9787 1ba3 6907     		.2byte	0x769
 9788 1ba5 0D       		.byte	0xd
 9789 1ba6 01       		.byte	0x1
 9790 1ba7 32010000 		.4byte	0x132
 9791 1bab E8040000 		.4byte	.LFB18
 9792 1baf 6C050000 		.4byte	.LFE18
 9793 1bb3 D2150000 		.4byte	.LLST65
 9794 1bb7 01       		.byte	0x1
 9795 1bb8 F51C0000 		.4byte	0x1cf5
 9796 1bbc 16       		.uleb128 0x16
 9797 1bbd 04030000 		.4byte	.LASF204
 9798 1bc1 01       		.byte	0x1
 9799 1bc2 6907     		.2byte	0x769
 9800 1bc4 2E       		.byte	0x2e
 9801 1bc5 7E020000 		.4byte	0x27e
 9802 1bc9 F6150000 		.4byte	.LLST66
 9803 1bcd F2150000 		.4byte	.LVUS66
 9804 1bd1 17       		.uleb128 0x17
 9805 1bd2 73030000 		.4byte	.LASF205
 9806 1bd6 01       		.byte	0x1
 9807 1bd7 6B07     		.2byte	0x76b
 9808 1bd9 0D       		.byte	0xd
 9809 1bda 32010000 		.4byte	0x132
 9810 1bde 1C160000 		.4byte	.LLST67
 9811 1be2 14160000 		.4byte	.LVUS67
 9812 1be6 17       		.uleb128 0x17
 9813 1be7 EE0F0000 		.4byte	.LASF109
 9814 1beb 01       		.byte	0x1
 9815 1bec 6C07     		.2byte	0x76c
 9816 1bee 10       		.byte	0x10
 9817 1bef 59050000 		.4byte	0x559
 9818 1bf3 56160000 		.4byte	.LLST68
 9819 1bf7 52160000 		.4byte	.LVUS68
ARM GAS  /tmp/ccaP1CVS.s 			page 299


 9820 1bfb 17       		.uleb128 0x17
 9821 1bfc 38030000 		.4byte	.LASF114
 9822 1c00 01       		.byte	0x1
 9823 1c01 6D07     		.2byte	0x76d
 9824 1c03 0E       		.byte	0xe
 9825 1c04 48010000 		.4byte	0x148
 9826 1c08 76160000 		.4byte	.LLST69
 9827 1c0c 74160000 		.4byte	.LVUS69
 9828 1c10 1E       		.uleb128 0x1e
 9829 1c11 31270000 		.4byte	0x2731
 9830 1c15 E8040000 		.4byte	.LBI100
 9831 1c19 07       		.byte	.LVU512
 9832 1c1a A0000000 		.4byte	.Ldebug_ranges0+0xa0
 9833 1c1e 01       		.byte	0x1
 9834 1c1f 8307     		.2byte	0x783
 9835 1c21 1C       		.byte	0x1c
 9836 1c22 3F1C0000 		.4byte	0x1c3f
 9837 1c26 1F       		.uleb128 0x1f
 9838 1c27 A0000000 		.4byte	.Ldebug_ranges0+0xa0
 9839 1c2b 20       		.uleb128 0x20
 9840 1c2c 43270000 		.4byte	0x2743
 9841 1c30 8B160000 		.4byte	.LLST70
 9842 1c34 89160000 		.4byte	.LVUS70
 9843 1c38 21       		.uleb128 0x21
 9844 1c39 4F270000 		.4byte	0x274f
 9845 1c3d 00       		.byte	0
 9846 1c3e 00       		.byte	0
 9847 1c3f 22       		.uleb128 0x22
 9848 1c40 E71D0000 		.4byte	0x1de7
 9849 1c44 02050000 		.4byte	.LBI104
 9850 1c48 03       		.byte	.LVU521
 9851 1c49 02050000 		.4byte	.LBB104
 9852 1c4d 1A050000 		.4byte	.LBE104
 9853 1c51 01       		.byte	0x1
 9854 1c52 8507     		.2byte	0x785
 9855 1c54 08       		.byte	0x8
 9856 1c55 AF1C0000 		.4byte	0x1caf
 9857 1c59 23       		.uleb128 0x23
 9858 1c5a FA1D0000 		.4byte	0x1dfa
 9859 1c5e A4160000 		.4byte	.LLST71
 9860 1c62 9E160000 		.4byte	.LVUS71
 9861 1c66 20       		.uleb128 0x20
 9862 1c67 071E0000 		.4byte	0x1e07
 9863 1c6b D3160000 		.4byte	.LLST72
 9864 1c6f CD160000 		.4byte	.LVUS72
 9865 1c73 20       		.uleb128 0x20
 9866 1c74 141E0000 		.4byte	0x1e14
 9867 1c78 03170000 		.4byte	.LLST73
 9868 1c7c FF160000 		.4byte	.LVUS73
 9869 1c80 3A       		.uleb128 0x3a
 9870 1c81 E71D0000 		.4byte	0x1de7
 9871 1c85 0E050000 		.4byte	.LBI106
 9872 1c89 00       		.byte	.LVU527
 9873 1c8a 0E050000 		.4byte	.LBB106
 9874 1c8e 1A050000 		.4byte	.LBE106
 9875 1c92 01       		.byte	0x1
 9876 1c93 0507     		.2byte	0x705
ARM GAS  /tmp/ccaP1CVS.s 			page 300


 9877 1c95 14       		.byte	0x14
 9878 1c96 23       		.uleb128 0x23
 9879 1c97 FA1D0000 		.4byte	0x1dfa
 9880 1c9b 25170000 		.4byte	.LLST74
 9881 1c9f 21170000 		.4byte	.LVUS74
 9882 1ca3 21       		.uleb128 0x21
 9883 1ca4 071E0000 		.4byte	0x1e07
 9884 1ca8 21       		.uleb128 0x21
 9885 1ca9 141E0000 		.4byte	0x1e14
 9886 1cad 00       		.byte	0
 9887 1cae 00       		.byte	0
 9888 1caf 22       		.uleb128 0x22
 9889 1cb0 16270000 		.4byte	0x2716
 9890 1cb4 52050000 		.4byte	.LBI108
 9891 1cb8 02       		.byte	.LVU559
 9892 1cb9 52050000 		.4byte	.LBB108
 9893 1cbd 56050000 		.4byte	.LBE108
 9894 1cc1 01       		.byte	0x1
 9895 1cc2 A707     		.2byte	0x7a7
 9896 1cc4 03       		.byte	0x3
 9897 1cc5 D71C0000 		.4byte	0x1cd7
 9898 1cc9 23       		.uleb128 0x23
 9899 1cca 24270000 		.4byte	0x2724
 9900 1cce 45170000 		.4byte	.LLST75
 9901 1cd2 43170000 		.4byte	.LVUS75
 9902 1cd6 00       		.byte	0
 9903 1cd7 24       		.uleb128 0x24
 9904 1cd8 38050000 		.4byte	.LVL127
 9905 1cdc 652A0000 		.4byte	0x2a65
 9906 1ce0 EB1C0000 		.4byte	0x1ceb
 9907 1ce4 1A       		.uleb128 0x1a
 9908 1ce5 01       		.byte	0x1
 9909 1ce6 50       		.byte	0x50
 9910 1ce7 02       		.byte	0x2
 9911 1ce8 78       		.byte	0x78
 9912 1ce9 00       		.sleb128 0
 9913 1cea 00       		.byte	0
 9914 1ceb 18       		.uleb128 0x18
 9915 1cec 52050000 		.4byte	.LVL129
 9916 1cf0 742A0000 		.4byte	0x2a74
 9917 1cf4 00       		.byte	0
 9918 1cf5 1D       		.uleb128 0x1d
 9919 1cf6 01       		.byte	0x1
 9920 1cf7 16100000 		.4byte	.LASF206
 9921 1cfb 01       		.byte	0x1
 9922 1cfc 3307     		.2byte	0x733
 9923 1cfe 07       		.byte	0x7
 9924 1cff 01       		.byte	0x1
 9925 1d00 70040000 		.4byte	.LFB17
 9926 1d04 E8040000 		.4byte	.LFE17
 9927 1d08 58170000 		.4byte	.LLST58
 9928 1d0c 01       		.byte	0x1
 9929 1d0d E71D0000 		.4byte	0x1de7
 9930 1d11 16       		.uleb128 0x16
 9931 1d12 04030000 		.4byte	.LASF204
 9932 1d16 01       		.byte	0x1
 9933 1d17 3307     		.2byte	0x733
ARM GAS  /tmp/ccaP1CVS.s 			page 301


 9934 1d19 21       		.byte	0x21
 9935 1d1a 7E020000 		.4byte	0x27e
 9936 1d1e 98170000 		.4byte	.LLST59
 9937 1d22 90170000 		.4byte	.LVUS59
 9938 1d26 17       		.uleb128 0x17
 9939 1d27 EE0F0000 		.4byte	.LASF109
 9940 1d2b 01       		.byte	0x1
 9941 1d2c 3507     		.2byte	0x735
 9942 1d2e 10       		.byte	0x10
 9943 1d2f 59050000 		.4byte	0x559
 9944 1d33 D7170000 		.4byte	.LLST60
 9945 1d37 CF170000 		.4byte	.LVUS60
 9946 1d3b 22       		.uleb128 0x22
 9947 1d3c E71D0000 		.4byte	0x1de7
 9948 1d40 82040000 		.4byte	.LBI88
 9949 1d44 01       		.byte	.LVU469
 9950 1d45 82040000 		.4byte	.LBB88
 9951 1d49 98040000 		.4byte	.LBE88
 9952 1d4d 01       		.byte	0x1
 9953 1d4e 4007     		.2byte	0x740
 9954 1d50 09       		.byte	0x9
 9955 1d51 AB1D0000 		.4byte	0x1dab
 9956 1d55 23       		.uleb128 0x23
 9957 1d56 FA1D0000 		.4byte	0x1dfa
 9958 1d5a 10180000 		.4byte	.LLST61
 9959 1d5e 0E180000 		.4byte	.LVUS61
 9960 1d62 20       		.uleb128 0x20
 9961 1d63 071E0000 		.4byte	0x1e07
 9962 1d67 27180000 		.4byte	.LLST62
 9963 1d6b 23180000 		.4byte	.LVUS62
 9964 1d6f 20       		.uleb128 0x20
 9965 1d70 141E0000 		.4byte	0x1e14
 9966 1d74 4B180000 		.4byte	.LLST63
 9967 1d78 47180000 		.4byte	.LVUS63
 9968 1d7c 3A       		.uleb128 0x3a
 9969 1d7d E71D0000 		.4byte	0x1de7
 9970 1d81 8C040000 		.4byte	.LBI90
 9971 1d85 00       		.byte	.LVU475
 9972 1d86 8C040000 		.4byte	.LBB90
 9973 1d8a 98040000 		.4byte	.LBE90
 9974 1d8e 01       		.byte	0x1
 9975 1d8f 0507     		.2byte	0x705
 9976 1d91 14       		.byte	0x14
 9977 1d92 23       		.uleb128 0x23
 9978 1d93 FA1D0000 		.4byte	0x1dfa
 9979 1d97 6E180000 		.4byte	.LLST64
 9980 1d9b 6C180000 		.4byte	.LVUS64
 9981 1d9f 21       		.uleb128 0x21
 9982 1da0 071E0000 		.4byte	0x1e07
 9983 1da4 21       		.uleb128 0x21
 9984 1da5 141E0000 		.4byte	0x1e14
 9985 1da9 00       		.byte	0
 9986 1daa 00       		.byte	0
 9987 1dab 18       		.uleb128 0x18
 9988 1dac 82040000 		.4byte	.LVL114
 9989 1db0 922A0000 		.4byte	0x2a92
 9990 1db4 24       		.uleb128 0x24
ARM GAS  /tmp/ccaP1CVS.s 			page 302


 9991 1db5 A0040000 		.4byte	.LVL117
 9992 1db9 652A0000 		.4byte	0x2a65
 9993 1dbd C81D0000 		.4byte	0x1dc8
 9994 1dc1 1A       		.uleb128 0x1a
 9995 1dc2 01       		.byte	0x1
 9996 1dc3 50       		.byte	0x50
 9997 1dc4 02       		.byte	0x2
 9998 1dc5 76       		.byte	0x76
 9999 1dc6 00       		.sleb128 0
 10000 1dc7 00       		.byte	0
 10001 1dc8 24       		.uleb128 0x24
 10002 1dc9 BC040000 		.4byte	.LVL118
 10003 1dcd 742A0000 		.4byte	0x2a74
 10004 1dd1 DC1D0000 		.4byte	0x1ddc
 10005 1dd5 1A       		.uleb128 0x1a
 10006 1dd6 01       		.byte	0x1
 10007 1dd7 51       		.byte	0x51
 10008 1dd8 02       		.byte	0x2
 10009 1dd9 76       		.byte	0x76
 10010 1dda 00       		.sleb128 0
 10011 1ddb 00       		.byte	0
 10012 1ddc 1B       		.uleb128 0x1b
 10013 1ddd E2040000 		.4byte	.LVL120
 10014 1de1 01       		.byte	0x1
 10015 1de2 A02A0000 		.4byte	0x2aa0
 10016 1de6 00       		.byte	0
 10017 1de7 2D       		.uleb128 0x2d
 10018 1de8 F10B0000 		.4byte	.LASF207
 10019 1dec 01       		.byte	0x1
 10020 1ded 0507     		.2byte	0x705
 10021 1def 14       		.byte	0x14
 10022 1df0 01       		.byte	0x1
 10023 1df1 32010000 		.4byte	0x132
 10024 1df5 01       		.byte	0x1
 10025 1df6 221E0000 		.4byte	0x1e22
 10026 1dfa 2C       		.uleb128 0x2c
 10027 1dfb DC090000 		.4byte	.LASF108
 10028 1dff 01       		.byte	0x1
 10029 1e00 0507     		.2byte	0x705
 10030 1e02 3F       		.byte	0x3f
 10031 1e03 8A020000 		.4byte	0x28a
 10032 1e07 2B       		.uleb128 0x2b
 10033 1e08 F40C0000 		.4byte	.LASF110
 10034 1e0c 01       		.byte	0x1
 10035 1e0d 0707     		.2byte	0x707
 10036 1e0f 0D       		.byte	0xd
 10037 1e10 32010000 		.4byte	0x132
 10038 1e14 2B       		.uleb128 0x2b
 10039 1e15 EE0F0000 		.4byte	.LASF109
 10040 1e19 01       		.byte	0x1
 10041 1e1a 0807     		.2byte	0x708
 10042 1e1c 16       		.byte	0x16
 10043 1e1d B2120000 		.4byte	0x12b2
 10044 1e21 00       		.byte	0
 10045 1e22 1D       		.uleb128 0x1d
 10046 1e23 01       		.byte	0x1
 10047 1e24 CF0E0000 		.4byte	.LASF208
ARM GAS  /tmp/ccaP1CVS.s 			page 303


 10048 1e28 01       		.byte	0x1
 10049 1e29 A006     		.2byte	0x6a0
 10050 1e2b 07       		.byte	0x7
 10051 1e2c 01       		.byte	0x1
 10052 1e2d 84080000 		.4byte	.LFB15
 10053 1e31 2C090000 		.4byte	.LFE15
 10054 1e35 81180000 		.4byte	.LLST105
 10055 1e39 01       		.byte	0x1
 10056 1e3a E51E0000 		.4byte	0x1ee5
 10057 1e3e 16       		.uleb128 0x16
 10058 1e3f 560C0000 		.4byte	.LASF209
 10059 1e43 01       		.byte	0x1
 10060 1e44 A006     		.2byte	0x6a0
 10061 1e46 22       		.byte	0x22
 10062 1e47 7E020000 		.4byte	0x27e
 10063 1e4b B1180000 		.4byte	.LLST106
 10064 1e4f AD180000 		.4byte	.LVUS106
 10065 1e53 17       		.uleb128 0x17
 10066 1e54 EE0F0000 		.4byte	.LASF109
 10067 1e58 01       		.byte	0x1
 10068 1e59 A206     		.2byte	0x6a2
 10069 1e5b 09       		.byte	0x9
 10070 1e5c 4E050000 		.4byte	0x54e
 10071 1e60 D1180000 		.4byte	.LLST107
 10072 1e64 CF180000 		.4byte	.LVUS107
 10073 1e68 18       		.uleb128 0x18
 10074 1e69 8E080000 		.4byte	.LVL198
 10075 1e6d 922A0000 		.4byte	0x2a92
 10076 1e71 24       		.uleb128 0x24
 10077 1e72 9A080000 		.4byte	.LVL200
 10078 1e76 652A0000 		.4byte	0x2a65
 10079 1e7a 851E0000 		.4byte	0x1e85
 10080 1e7e 1A       		.uleb128 0x1a
 10081 1e7f 01       		.byte	0x1
 10082 1e80 50       		.byte	0x50
 10083 1e81 02       		.byte	0x2
 10084 1e82 76       		.byte	0x76
 10085 1e83 00       		.sleb128 0
 10086 1e84 00       		.byte	0
 10087 1e85 24       		.uleb128 0x24
 10088 1e86 C0080000 		.4byte	.LVL201
 10089 1e8a 652A0000 		.4byte	0x2a65
 10090 1e8e 991E0000 		.4byte	0x1e99
 10091 1e92 1A       		.uleb128 0x1a
 10092 1e93 01       		.byte	0x1
 10093 1e94 50       		.byte	0x50
 10094 1e95 02       		.byte	0x2
 10095 1e96 74       		.byte	0x74
 10096 1e97 18       		.sleb128 24
 10097 1e98 00       		.byte	0
 10098 1e99 24       		.uleb128 0x24
 10099 1e9a C8080000 		.4byte	.LVL202
 10100 1e9e 742A0000 		.4byte	0x2a74
 10101 1ea2 B61E0000 		.4byte	0x1eb6
 10102 1ea6 1A       		.uleb128 0x1a
 10103 1ea7 01       		.byte	0x1
 10104 1ea8 50       		.byte	0x50
ARM GAS  /tmp/ccaP1CVS.s 			page 304


 10105 1ea9 05       		.byte	0x5
 10106 1eaa 03       		.byte	0x3
 10107 1eab 0C000000 		.4byte	.LANCHOR0+12
 10108 1eaf 1A       		.uleb128 0x1a
 10109 1eb0 01       		.byte	0x1
 10110 1eb1 51       		.byte	0x51
 10111 1eb2 02       		.byte	0x2
 10112 1eb3 76       		.byte	0x76
 10113 1eb4 00       		.sleb128 0
 10114 1eb5 00       		.byte	0
 10115 1eb6 18       		.uleb128 0x18
 10116 1eb7 DA080000 		.4byte	.LVL203
 10117 1ebb A02A0000 		.4byte	0x2aa0
 10118 1ebf 18       		.uleb128 0x18
 10119 1ec0 E4080000 		.4byte	.LVL204
 10120 1ec4 922A0000 		.4byte	0x2a92
 10121 1ec8 18       		.uleb128 0x18
 10122 1ec9 E8080000 		.4byte	.LVL205
 10123 1ecd 310F0000 		.4byte	0xf31
 10124 1ed1 18       		.uleb128 0x18
 10125 1ed2 EC080000 		.4byte	.LVL206
 10126 1ed6 A02A0000 		.4byte	0x2aa0
 10127 1eda 1B       		.uleb128 0x1b
 10128 1edb 22090000 		.4byte	.LVL209
 10129 1edf 01       		.byte	0x1
 10130 1ee0 B9160000 		.4byte	0x16b9
 10131 1ee4 00       		.byte	0
 10132 1ee5 1D       		.uleb128 0x1d
 10133 1ee6 01       		.byte	0x1
 10134 1ee7 93090000 		.4byte	.LASF210
 10135 1eeb 01       		.byte	0x1
 10136 1eec FC05     		.2byte	0x5fc
 10137 1eee 07       		.byte	0x7
 10138 1eef 01       		.byte	0x1
 10139 1ef0 AC030000 		.4byte	.LFB14
 10140 1ef4 70040000 		.4byte	.LFE14
 10141 1ef8 E4180000 		.4byte	.LLST51
 10142 1efc 01       		.byte	0x1
 10143 1efd BB1F0000 		.4byte	0x1fbb
 10144 1f01 16       		.uleb128 0x16
 10145 1f02 DC090000 		.4byte	.LASF108
 10146 1f06 01       		.byte	0x1
 10147 1f07 FC05     		.2byte	0x5fc
 10148 1f09 26       		.byte	0x26
 10149 1f0a 7E020000 		.4byte	0x27e
 10150 1f0e 20190000 		.4byte	.LLST52
 10151 1f12 1C190000 		.4byte	.LVUS52
 10152 1f16 16       		.uleb128 0x16
 10153 1f17 A7080000 		.4byte	.LASF211
 10154 1f1b 01       		.byte	0x1
 10155 1f1c FC05     		.2byte	0x5fc
 10156 1f1e 39       		.byte	0x39
 10157 1f1f 48010000 		.4byte	0x148
 10158 1f23 4C190000 		.4byte	.LLST53
 10159 1f27 3E190000 		.4byte	.LVUS53
 10160 1f2b 17       		.uleb128 0x17
 10161 1f2c EE0F0000 		.4byte	.LASF109
ARM GAS  /tmp/ccaP1CVS.s 			page 305


 10162 1f30 01       		.byte	0x1
 10163 1f31 FE05     		.2byte	0x5fe
 10164 1f33 09       		.byte	0x9
 10165 1f34 4E050000 		.4byte	0x54e
 10166 1f38 C0190000 		.4byte	.LLST54
 10167 1f3c BC190000 		.4byte	.LVUS54
 10168 1f40 17       		.uleb128 0x17
 10169 1f41 C6100000 		.4byte	.LASF212
 10170 1f45 01       		.byte	0x1
 10171 1f46 FF05     		.2byte	0x5ff
 10172 1f48 0E       		.byte	0xe
 10173 1f49 48010000 		.4byte	0x148
 10174 1f4d E2190000 		.4byte	.LLST55
 10175 1f51 DE190000 		.4byte	.LVUS55
 10176 1f55 17       		.uleb128 0x17
 10177 1f56 880E0000 		.4byte	.LASF134
 10178 1f5a 01       		.byte	0x1
 10179 1f5b FF05     		.2byte	0x5ff
 10180 1f5d 25       		.byte	0x25
 10181 1f5e 48010000 		.4byte	0x148
 10182 1f62 021A0000 		.4byte	.LLST56
 10183 1f66 001A0000 		.4byte	.LVUS56
 10184 1f6a 17       		.uleb128 0x17
 10185 1f6b 73030000 		.4byte	.LASF205
 10186 1f6f 01       		.byte	0x1
 10187 1f70 0006     		.2byte	0x600
 10188 1f72 0D       		.byte	0xd
 10189 1f73 32010000 		.4byte	0x132
 10190 1f77 1B1A0000 		.4byte	.LLST57
 10191 1f7b 151A0000 		.4byte	.LVUS57
 10192 1f7f 18       		.uleb128 0x18
 10193 1f80 BE030000 		.4byte	.LVL101
 10194 1f84 922A0000 		.4byte	0x2a92
 10195 1f88 24       		.uleb128 0x24
 10196 1f89 12040000 		.4byte	.LVL108
 10197 1f8d 652A0000 		.4byte	0x2a65
 10198 1f91 9C1F0000 		.4byte	0x1f9c
 10199 1f95 1A       		.uleb128 0x1a
 10200 1f96 01       		.byte	0x1
 10201 1f97 50       		.byte	0x50
 10202 1f98 02       		.byte	0x2
 10203 1f99 78       		.byte	0x78
 10204 1f9a 00       		.sleb128 0
 10205 1f9b 00       		.byte	0
 10206 1f9c 24       		.uleb128 0x24
 10207 1f9d 3A040000 		.4byte	.LVL109
 10208 1fa1 742A0000 		.4byte	0x2a74
 10209 1fa5 B01F0000 		.4byte	0x1fb0
 10210 1fa9 1A       		.uleb128 0x1a
 10211 1faa 01       		.byte	0x1
 10212 1fab 51       		.byte	0x51
 10213 1fac 02       		.byte	0x2
 10214 1fad 78       		.byte	0x78
 10215 1fae 00       		.sleb128 0
 10216 1faf 00       		.byte	0
 10217 1fb0 1B       		.uleb128 0x1b
 10218 1fb1 58040000 		.4byte	.LVL112
ARM GAS  /tmp/ccaP1CVS.s 			page 306


 10219 1fb5 01       		.byte	0x1
 10220 1fb6 A02A0000 		.4byte	0x2aa0
 10221 1fba 00       		.byte	0
 10222 1fbb 27       		.uleb128 0x27
 10223 1fbc 01       		.byte	0x1
 10224 1fbd F9080000 		.4byte	.LASF213
 10225 1fc1 01       		.byte	0x1
 10226 1fc2 D405     		.2byte	0x5d4
 10227 1fc4 0E       		.byte	0xe
 10228 1fc5 01       		.byte	0x1
 10229 1fc6 48010000 		.4byte	0x148
 10230 1fca 84030000 		.4byte	.LFB13
 10231 1fce AC030000 		.4byte	.LFE13
 10232 1fd2 02       		.byte	0x2
 10233 1fd3 7D       		.byte	0x7d
 10234 1fd4 00       		.sleb128 0
 10235 1fd5 01       		.byte	0x1
 10236 1fd6 80200000 		.4byte	0x2080
 10237 1fda 16       		.uleb128 0x16
 10238 1fdb DC090000 		.4byte	.LASF108
 10239 1fdf 01       		.byte	0x1
 10240 1fe0 D405     		.2byte	0x5d4
 10241 1fe2 3B       		.byte	0x3b
 10242 1fe3 8A020000 		.4byte	0x28a
 10243 1fe7 481A0000 		.4byte	.LLST45
 10244 1feb 461A0000 		.4byte	.LVUS45
 10245 1fef 17       		.uleb128 0x17
 10246 1ff0 EE0F0000 		.4byte	.LASF109
 10247 1ff4 01       		.byte	0x1
 10248 1ff5 D605     		.2byte	0x5d6
 10249 1ff7 0F       		.byte	0xf
 10250 1ff8 AC120000 		.4byte	0x12ac
 10251 1ffc 5D1A0000 		.4byte	.LLST46
 10252 2000 5B1A0000 		.4byte	.LVUS46
 10253 2004 17       		.uleb128 0x17
 10254 2005 12030000 		.4byte	.LASF129
 10255 2009 01       		.byte	0x1
 10256 200a D705     		.2byte	0x5d7
 10257 200c 0E       		.byte	0xe
 10258 200d 48010000 		.4byte	0x148
 10259 2011 721A0000 		.4byte	.LLST47
 10260 2015 701A0000 		.4byte	.LVUS47
 10261 2019 17       		.uleb128 0x17
 10262 201a 29040000 		.4byte	.LASF214
 10263 201e 01       		.byte	0x1
 10264 201f D705     		.2byte	0x5d7
 10265 2021 18       		.byte	0x18
 10266 2022 48010000 		.4byte	0x148
 10267 2026 871A0000 		.4byte	.LLST48
 10268 202a 851A0000 		.4byte	.LVUS48
 10269 202e 22       		.uleb128 0x22
 10270 202f 31270000 		.4byte	0x2731
 10271 2033 84030000 		.4byte	.LBI80
 10272 2037 05       		.byte	.LVU367
 10273 2038 84030000 		.4byte	.LBB80
 10274 203c 98030000 		.4byte	.LBE80
 10275 2040 01       		.byte	0x1
ARM GAS  /tmp/ccaP1CVS.s 			page 307


 10276 2041 EB05     		.2byte	0x5eb
 10277 2043 1B       		.byte	0x1b
 10278 2044 5B200000 		.4byte	0x205b
 10279 2048 20       		.uleb128 0x20
 10280 2049 43270000 		.4byte	0x2743
 10281 204d 9C1A0000 		.4byte	.LLST49
 10282 2051 9A1A0000 		.4byte	.LVUS49
 10283 2055 21       		.uleb128 0x21
 10284 2056 4F270000 		.4byte	0x274f
 10285 205a 00       		.byte	0
 10286 205b 3A       		.uleb128 0x3a
 10287 205c 16270000 		.4byte	0x2716
 10288 2060 A0030000 		.4byte	.LBI82
 10289 2064 01       		.byte	.LVU378
 10290 2065 A0030000 		.4byte	.LBB82
 10291 2069 A4030000 		.4byte	.LBE82
 10292 206d 01       		.byte	0x1
 10293 206e F205     		.2byte	0x5f2
 10294 2070 03       		.byte	0x3
 10295 2071 23       		.uleb128 0x23
 10296 2072 24270000 		.4byte	0x2724
 10297 2076 B11A0000 		.4byte	.LLST50
 10298 207a AF1A0000 		.4byte	.LVUS50
 10299 207e 00       		.byte	0
 10300 207f 00       		.byte	0
 10301 2080 1C       		.uleb128 0x1c
 10302 2081 01       		.byte	0x1
 10303 2082 87050000 		.4byte	.LASF215
 10304 2086 01       		.byte	0x1
 10305 2087 BE05     		.2byte	0x5be
 10306 2089 0E       		.byte	0xe
 10307 208a 01       		.byte	0x1
 10308 208b 48010000 		.4byte	0x148
 10309 208f 68030000 		.4byte	.LFB12
 10310 2093 84030000 		.4byte	.LFE12
 10311 2097 C41A0000 		.4byte	.LLST41
 10312 209b 01       		.byte	0x1
 10313 209c F2200000 		.4byte	0x20f2
 10314 20a0 16       		.uleb128 0x16
 10315 20a1 DC090000 		.4byte	.LASF108
 10316 20a5 01       		.byte	0x1
 10317 20a6 BE05     		.2byte	0x5be
 10318 20a8 34       		.byte	0x34
 10319 20a9 8A020000 		.4byte	0x28a
 10320 20ad E81A0000 		.4byte	.LLST42
 10321 20b1 E41A0000 		.4byte	.LVUS42
 10322 20b5 17       		.uleb128 0x17
 10323 20b6 EE0F0000 		.4byte	.LASF109
 10324 20ba 01       		.byte	0x1
 10325 20bb C005     		.2byte	0x5c0
 10326 20bd 0F       		.byte	0xf
 10327 20be AC120000 		.4byte	0x12ac
 10328 20c2 081B0000 		.4byte	.LLST43
 10329 20c6 061B0000 		.4byte	.LVUS43
 10330 20ca 17       		.uleb128 0x17
 10331 20cb 12030000 		.4byte	.LASF129
 10332 20cf 01       		.byte	0x1
ARM GAS  /tmp/ccaP1CVS.s 			page 308


 10333 20d0 C105     		.2byte	0x5c1
 10334 20d2 0E       		.byte	0xe
 10335 20d3 48010000 		.4byte	0x148
 10336 20d7 1F1B0000 		.4byte	.LLST44
 10337 20db 1B1B0000 		.4byte	.LVUS44
 10338 20df 18       		.uleb128 0x18
 10339 20e0 70030000 		.4byte	.LVL88
 10340 20e4 922A0000 		.4byte	0x2a92
 10341 20e8 18       		.uleb128 0x18
 10342 20e9 7C030000 		.4byte	.LVL91
 10343 20ed A02A0000 		.4byte	0x2aa0
 10344 20f1 00       		.byte	0
 10345 20f2 39       		.uleb128 0x39
 10346 20f3 01       		.byte	0x1
 10347 20f4 98070000 		.4byte	.LASF217
 10348 20f8 01       		.byte	0x1
 10349 20f9 6205     		.2byte	0x562
 10350 20fb 0D       		.byte	0xd
 10351 20fc 01       		.byte	0x1
 10352 20fd 95030000 		.4byte	0x395
 10353 2101 01       		.byte	0x1
 10354 2102 55210000 		.4byte	0x2155
 10355 2106 2C       		.uleb128 0x2c
 10356 2107 DC090000 		.4byte	.LASF108
 10357 210b 01       		.byte	0x1
 10358 210c 6205     		.2byte	0x562
 10359 210e 29       		.byte	0x29
 10360 210f 7E020000 		.4byte	0x27e
 10361 2113 2B       		.uleb128 0x2b
 10362 2114 FC020000 		.4byte	.LASF218
 10363 2118 01       		.byte	0x1
 10364 2119 6405     		.2byte	0x564
 10365 211b 0D       		.byte	0xd
 10366 211c 95030000 		.4byte	0x395
 10367 2120 2B       		.uleb128 0x2b
 10368 2121 90000000 		.4byte	.LASF219
 10369 2125 01       		.byte	0x1
 10370 2126 6505     		.2byte	0x565
 10371 2128 11       		.byte	0x11
 10372 2129 30150000 		.4byte	0x1530
 10373 212d 2B       		.uleb128 0x2b
 10374 212e 47010000 		.4byte	.LASF220
 10375 2132 01       		.byte	0x1
 10376 2133 6505     		.2byte	0x565
 10377 2135 1F       		.byte	0x1f
 10378 2136 30150000 		.4byte	0x1530
 10379 213a 2B       		.uleb128 0x2b
 10380 213b BF020000 		.4byte	.LASF221
 10381 213f 01       		.byte	0x1
 10382 2140 6505     		.2byte	0x565
 10383 2142 2F       		.byte	0x2f
 10384 2143 30150000 		.4byte	0x1530
 10385 2147 2B       		.uleb128 0x2b
 10386 2148 EE0F0000 		.4byte	.LASF109
 10387 214c 01       		.byte	0x1
 10388 214d 6605     		.2byte	0x566
 10389 214f 16       		.byte	0x16
ARM GAS  /tmp/ccaP1CVS.s 			page 309


 10390 2150 B2120000 		.4byte	0x12b2
 10391 2154 00       		.byte	0
 10392 2155 1D       		.uleb128 0x1d
 10393 2156 01       		.byte	0x1
 10394 2157 02060000 		.4byte	.LASF222
 10395 215b 01       		.byte	0x1
 10396 215c 3505     		.2byte	0x535
 10397 215e 07       		.byte	0x7
 10398 215f 01       		.byte	0x1
 10399 2160 08080000 		.4byte	.LFB10
 10400 2164 36080000 		.4byte	.LFE10
 10401 2168 3D1B0000 		.4byte	.LLST97
 10402 216c 01       		.byte	0x1
 10403 216d C1210000 		.4byte	0x21c1
 10404 2171 16       		.uleb128 0x16
 10405 2172 DF0D0000 		.4byte	.LASF223
 10406 2176 01       		.byte	0x1
 10407 2177 3505     		.2byte	0x535
 10408 2179 24       		.byte	0x24
 10409 217a 6F010000 		.4byte	0x16f
 10410 217e 651B0000 		.4byte	.LLST98
 10411 2182 5D1B0000 		.4byte	.LVUS98
 10412 2186 17       		.uleb128 0x17
 10413 2187 DC0E0000 		.4byte	.LASF197
 10414 218b 01       		.byte	0x1
 10415 218c 3705     		.2byte	0x537
 10416 218e 0D       		.byte	0xd
 10417 218f 32010000 		.4byte	0x132
 10418 2193 A51B0000 		.4byte	.LLST99
 10419 2197 9F1B0000 		.4byte	.LVUS99
 10420 219b 18       		.uleb128 0x18
 10421 219c 28080000 		.4byte	.LVL189
 10422 21a0 9F1A0000 		.4byte	0x1a9f
 10423 21a4 24       		.uleb128 0x24
 10424 21a5 2C080000 		.4byte	.LVL190
 10425 21a9 FA060000 		.4byte	0x6fa
 10426 21ad B7210000 		.4byte	0x21b7
 10427 21b1 1A       		.uleb128 0x1a
 10428 21b2 01       		.byte	0x1
 10429 21b3 51       		.byte	0x51
 10430 21b4 01       		.byte	0x1
 10431 21b5 30       		.byte	0x30
 10432 21b6 00       		.byte	0
 10433 21b7 18       		.uleb128 0x18
 10434 21b8 30080000 		.4byte	.LVL191
 10435 21bc D1190000 		.4byte	0x19d1
 10436 21c0 00       		.byte	0
 10437 21c1 1D       		.uleb128 0x1d
 10438 21c2 01       		.byte	0x1
 10439 21c3 690E0000 		.4byte	.LASF224
 10440 21c7 01       		.byte	0x1
 10441 21c8 E104     		.2byte	0x4e1
 10442 21ca 07       		.byte	0x7
 10443 21cb 01       		.byte	0x1
 10444 21cc BC070000 		.4byte	.LFB9
 10445 21d0 08080000 		.4byte	.LFE9
 10446 21d4 D01B0000 		.4byte	.LLST91
ARM GAS  /tmp/ccaP1CVS.s 			page 310


 10447 21d8 01       		.byte	0x1
 10448 21d9 80220000 		.4byte	0x2280
 10449 21dd 16       		.uleb128 0x16
 10450 21de 960C0000 		.4byte	.LASF225
 10451 21e2 01       		.byte	0x1
 10452 21e3 E104     		.2byte	0x4e1
 10453 21e5 2B       		.byte	0x2b
 10454 21e6 95130000 		.4byte	0x1395
 10455 21ea F81B0000 		.4byte	.LLST92
 10456 21ee F01B0000 		.4byte	.LVUS92
 10457 21f2 16       		.uleb128 0x16
 10458 21f3 A50F0000 		.4byte	.LASF226
 10459 21f7 01       		.byte	0x1
 10460 21f8 E104     		.2byte	0x4e1
 10461 21fa 50       		.byte	0x50
 10462 21fb 6F010000 		.4byte	0x16f
 10463 21ff 361C0000 		.4byte	.LLST93
 10464 2203 321C0000 		.4byte	.LVUS93
 10465 2207 17       		.uleb128 0x17
 10466 2208 D30F0000 		.4byte	.LASF106
 10467 220c 01       		.byte	0x1
 10468 220d E304     		.2byte	0x4e3
 10469 220f 0D       		.byte	0xd
 10470 2210 5E010000 		.4byte	0x15e
 10471 2214 5F1C0000 		.4byte	.LLST94
 10472 2218 571C0000 		.4byte	.LVUS94
 10473 221c 17       		.uleb128 0x17
 10474 221d DC0E0000 		.4byte	.LASF197
 10475 2221 01       		.byte	0x1
 10476 2222 E404     		.2byte	0x4e4
 10477 2224 0D       		.byte	0xd
 10478 2225 32010000 		.4byte	0x132
 10479 2229 A11C0000 		.4byte	.LLST95
 10480 222d 9F1C0000 		.4byte	.LVUS95
 10481 2231 28       		.uleb128 0x28
 10482 2232 0E070000 		.4byte	.LASF227
 10483 2236 01       		.byte	0x1
 10484 2237 E404     		.2byte	0x4e4
 10485 2239 1E       		.byte	0x1e
 10486 223a 32010000 		.4byte	0x132
 10487 223e 00       		.byte	0
 10488 223f 35       		.uleb128 0x35
 10489 2240 D8000000 		.4byte	.Ldebug_ranges0+0xd8
 10490 2244 6D220000 		.4byte	0x226d
 10491 2248 17       		.uleb128 0x17
 10492 2249 99050000 		.4byte	.LASF107
 10493 224d 01       		.byte	0x1
 10494 224e EE04     		.2byte	0x4ee
 10495 2250 15       		.byte	0x15
 10496 2251 6F010000 		.4byte	0x16f
 10497 2255 B81C0000 		.4byte	.LLST96
 10498 2259 B41C0000 		.4byte	.LVUS96
 10499 225d 25       		.uleb128 0x25
 10500 225e 02080000 		.4byte	.LVL185
 10501 2262 FA060000 		.4byte	0x6fa
 10502 2266 1A       		.uleb128 0x1a
 10503 2267 01       		.byte	0x1
ARM GAS  /tmp/ccaP1CVS.s 			page 311


 10504 2268 51       		.byte	0x51
 10505 2269 01       		.byte	0x1
 10506 226a 30       		.byte	0x30
 10507 226b 00       		.byte	0
 10508 226c 00       		.byte	0
 10509 226d 18       		.uleb128 0x18
 10510 226e C2070000 		.4byte	.LVL177
 10511 2272 9F1A0000 		.4byte	0x1a9f
 10512 2276 18       		.uleb128 0x18
 10513 2277 DC070000 		.4byte	.LVL182
 10514 227b D1190000 		.4byte	0x19d1
 10515 227f 00       		.byte	0
 10516 2280 1D       		.uleb128 0x1d
 10517 2281 01       		.byte	0x1
 10518 2282 0F0A0000 		.4byte	.LASF228
 10519 2286 01       		.byte	0x1
 10520 2287 8504     		.2byte	0x485
 10521 2289 07       		.byte	0x7
 10522 228a 01       		.byte	0x1
 10523 228b 64020000 		.4byte	.LFB8
 10524 228f 04030000 		.4byte	.LFE8
 10525 2293 D61C0000 		.4byte	.LLST29
 10526 2297 01       		.byte	0x1
 10527 2298 64230000 		.4byte	0x2364
 10528 229c 16       		.uleb128 0x16
 10529 229d 4C0F0000 		.4byte	.LASF229
 10530 22a1 01       		.byte	0x1
 10531 22a2 8504     		.2byte	0x485
 10532 22a4 21       		.byte	0x21
 10533 22a5 7E020000 		.4byte	0x27e
 10534 22a9 FA1C0000 		.4byte	.LLST30
 10535 22ad F61C0000 		.4byte	.LVUS30
 10536 22b1 17       		.uleb128 0x17
 10537 22b2 EE0F0000 		.4byte	.LASF109
 10538 22b6 01       		.byte	0x1
 10539 22b7 8704     		.2byte	0x487
 10540 22b9 09       		.byte	0x9
 10541 22ba 4E050000 		.4byte	0x54e
 10542 22be 1A1D0000 		.4byte	.LLST31
 10543 22c2 181D0000 		.4byte	.LVUS31
 10544 22c6 1E       		.uleb128 0x1e
 10545 22c7 4E0F0000 		.4byte	0xf4e
 10546 22cb EC020000 		.4byte	.LBI72
 10547 22cf 01       		.byte	.LVU300
 10548 22d0 88000000 		.4byte	.Ldebug_ranges0+0x88
 10549 22d4 01       		.byte	0x1
 10550 22d5 C104     		.2byte	0x4c1
 10551 22d7 05       		.byte	0x5
 10552 22d8 03230000 		.4byte	0x2303
 10553 22dc 23       		.uleb128 0x23
 10554 22dd 5D0F0000 		.4byte	0xf5d
 10555 22e1 2F1D0000 		.4byte	.LLST32
 10556 22e5 2D1D0000 		.4byte	.LVUS32
 10557 22e9 18       		.uleb128 0x18
 10558 22ea F0020000 		.4byte	.LVL73
 10559 22ee AE2A0000 		.4byte	0x2aae
 10560 22f2 25       		.uleb128 0x25
ARM GAS  /tmp/ccaP1CVS.s 			page 312


 10561 22f3 F6020000 		.4byte	.LVL74
 10562 22f7 AE2A0000 		.4byte	0x2aae
 10563 22fb 1A       		.uleb128 0x1a
 10564 22fc 01       		.byte	0x1
 10565 22fd 50       		.byte	0x50
 10566 22fe 02       		.byte	0x2
 10567 22ff 75       		.byte	0x75
 10568 2300 00       		.sleb128 0
 10569 2301 00       		.byte	0
 10570 2302 00       		.byte	0
 10571 2303 18       		.uleb128 0x18
 10572 2304 6E020000 		.4byte	.LVL65
 10573 2308 922A0000 		.4byte	0x2a92
 10574 230c 24       		.uleb128 0x24
 10575 230d 7A020000 		.4byte	.LVL67
 10576 2311 652A0000 		.4byte	0x2a65
 10577 2315 20230000 		.4byte	0x2320
 10578 2319 1A       		.uleb128 0x1a
 10579 231a 01       		.byte	0x1
 10580 231b 50       		.byte	0x50
 10581 231c 02       		.byte	0x2
 10582 231d 76       		.byte	0x76
 10583 231e 00       		.sleb128 0
 10584 231f 00       		.byte	0
 10585 2320 24       		.uleb128 0x24
 10586 2321 A0020000 		.4byte	.LVL68
 10587 2325 652A0000 		.4byte	0x2a65
 10588 2329 34230000 		.4byte	0x2334
 10589 232d 1A       		.uleb128 0x1a
 10590 232e 01       		.byte	0x1
 10591 232f 50       		.byte	0x50
 10592 2330 02       		.byte	0x2
 10593 2331 75       		.byte	0x75
 10594 2332 18       		.sleb128 24
 10595 2333 00       		.byte	0
 10596 2334 24       		.uleb128 0x24
 10597 2335 B8020000 		.4byte	.LVL69
 10598 2339 742A0000 		.4byte	0x2a74
 10599 233d 51230000 		.4byte	0x2351
 10600 2341 1A       		.uleb128 0x1a
 10601 2342 01       		.byte	0x1
 10602 2343 50       		.byte	0x50
 10603 2344 05       		.byte	0x5
 10604 2345 03       		.byte	0x3
 10605 2346 2C000000 		.4byte	.LANCHOR0+44
 10606 234a 1A       		.uleb128 0x1a
 10607 234b 01       		.byte	0x1
 10608 234c 51       		.byte	0x51
 10609 234d 02       		.byte	0x2
 10610 234e 76       		.byte	0x76
 10611 234f 00       		.sleb128 0
 10612 2350 00       		.byte	0
 10613 2351 18       		.uleb128 0x18
 10614 2352 C2020000 		.4byte	.LVL70
 10615 2356 A02A0000 		.4byte	0x2aa0
 10616 235a 18       		.uleb128 0x18
 10617 235b FA020000 		.4byte	.LVL75
ARM GAS  /tmp/ccaP1CVS.s 			page 313


 10618 235f 310F0000 		.4byte	0xf31
 10619 2363 00       		.byte	0
 10620 2364 2A       		.uleb128 0x2a
 10621 2365 70070000 		.4byte	.LASF230
 10622 2369 01       		.byte	0x1
 10623 236a 3004     		.2byte	0x430
 10624 236c 0D       		.byte	0xd
 10625 236d 01       		.byte	0x1
 10626 236e 01       		.byte	0x1
 10627 236f 81230000 		.4byte	0x2381
 10628 2373 2C       		.uleb128 0x2c
 10629 2374 A6070000 		.4byte	.LASF231
 10630 2378 01       		.byte	0x1
 10631 2379 3004     		.2byte	0x430
 10632 237b 2E       		.byte	0x2e
 10633 237c 4E050000 		.4byte	0x54e
 10634 2380 00       		.byte	0
 10635 2381 2A       		.uleb128 0x2a
 10636 2382 520B0000 		.4byte	.LASF232
 10637 2386 01       		.byte	0x1
 10638 2387 3503     		.2byte	0x335
 10639 2389 0D       		.byte	0xd
 10640 238a 01       		.byte	0x1
 10641 238b 01       		.byte	0x1
 10642 238c 11240000 		.4byte	0x2411
 10643 2390 2C       		.uleb128 0x2c
 10644 2391 B7070000 		.4byte	.LASF233
 10645 2395 01       		.byte	0x1
 10646 2396 3503     		.2byte	0x335
 10647 2398 33       		.byte	0x33
 10648 2399 03010000 		.4byte	0x103
 10649 239d 2C       		.uleb128 0x2c
 10650 239e CB050000 		.4byte	.LASF234
 10651 23a2 01       		.byte	0x1
 10652 23a3 3603     		.2byte	0x336
 10653 23a5 1D       		.byte	0x1d
 10654 23a6 C1000000 		.4byte	0xc1
 10655 23aa 2C       		.uleb128 0x2c
 10656 23ab 01070000 		.4byte	.LASF235
 10657 23af 01       		.byte	0x1
 10658 23b0 3703     		.2byte	0x337
 10659 23b2 19       		.byte	0x19
 10660 23b3 FE000000 		.4byte	0xfe
 10661 23b7 2C       		.uleb128 0x2c
 10662 23b8 670B0000 		.4byte	.LASF162
 10663 23bc 01       		.byte	0x1
 10664 23bd 3803     		.2byte	0x338
 10665 23bf 17       		.byte	0x17
 10666 23c0 A4000000 		.4byte	0xa4
 10667 23c4 2C       		.uleb128 0x2c
 10668 23c5 79000000 		.4byte	.LASF42
 10669 23c9 01       		.byte	0x1
 10670 23ca 3903     		.2byte	0x339
 10671 23cc 16       		.byte	0x16
 10672 23cd 48010000 		.4byte	0x148
 10673 23d1 2C       		.uleb128 0x2c
 10674 23d2 50100000 		.4byte	.LASF236
ARM GAS  /tmp/ccaP1CVS.s 			page 314


 10675 23d6 01       		.byte	0x1
 10676 23d7 3A03     		.2byte	0x33a
 10677 23d9 1F       		.byte	0x1f
 10678 23da 17240000 		.4byte	0x2417
 10679 23de 2C       		.uleb128 0x2c
 10680 23df A6070000 		.4byte	.LASF231
 10681 23e3 01       		.byte	0x1
 10682 23e4 3B03     		.2byte	0x33b
 10683 23e6 11       		.byte	0x11
 10684 23e7 4E050000 		.4byte	0x54e
 10685 23eb 2C       		.uleb128 0x2c
 10686 23ec 41020000 		.4byte	.LASF237
 10687 23f0 01       		.byte	0x1
 10688 23f1 3C03     		.2byte	0x33c
 10689 23f3 27       		.byte	0x27
 10690 23f4 22240000 		.4byte	0x2422
 10691 23f8 2B       		.uleb128 0x2b
 10692 23f9 09100000 		.4byte	.LASF39
 10693 23fd 01       		.byte	0x1
 10694 23fe 3E03     		.2byte	0x33e
 10695 2400 0E       		.byte	0xe
 10696 2401 5E040000 		.4byte	0x45e
 10697 2405 3B       		.uleb128 0x3b
 10698 2406 7800     		.ascii	"x\000"
 10699 2408 01       		.byte	0x1
 10700 2409 3F03     		.2byte	0x33f
 10701 240b 0D       		.byte	0xd
 10702 240c 48010000 		.4byte	0x148
 10703 2410 00       		.byte	0
 10704 2411 07       		.uleb128 0x7
 10705 2412 04       		.byte	0x4
 10706 2413 7E020000 		.4byte	0x27e
 10707 2417 06       		.uleb128 0x6
 10708 2418 11240000 		.4byte	0x2411
 10709 241c 07       		.uleb128 0x7
 10710 241d 04       		.byte	0x4
 10711 241e 59040000 		.4byte	0x459
 10712 2422 06       		.uleb128 0x6
 10713 2423 1C240000 		.4byte	0x241c
 10714 2427 1C       		.uleb128 0x1c
 10715 2428 01       		.byte	0x1
 10716 2429 060F0000 		.4byte	.LASF238
 10717 242d 01       		.byte	0x1
 10718 242e DA02     		.2byte	0x2da
 10719 2430 0D       		.byte	0xd
 10720 2431 01       		.byte	0x1
 10721 2432 32010000 		.4byte	0x132
 10722 2436 E0000000 		.4byte	.LFB5
 10723 243a 64020000 		.4byte	.LFE5
 10724 243e 421D0000 		.4byte	.LLST10
 10725 2442 01       		.byte	0x1
 10726 2443 16270000 		.4byte	0x2716
 10727 2447 16       		.uleb128 0x16
 10728 2448 B7070000 		.4byte	.LASF233
 10729 244c 01       		.byte	0x1
 10730 244d DA02     		.2byte	0x2da
 10731 244f 29       		.byte	0x29
ARM GAS  /tmp/ccaP1CVS.s 			page 315


 10732 2450 03010000 		.4byte	0x103
 10733 2454 681D0000 		.4byte	.LLST11
 10734 2458 621D0000 		.4byte	.LVUS11
 10735 245c 16       		.uleb128 0x16
 10736 245d CB050000 		.4byte	.LASF234
 10737 2461 01       		.byte	0x1
 10738 2462 DB02     		.2byte	0x2db
 10739 2464 1B       		.byte	0x1b
 10740 2465 C1000000 		.4byte	0xc1
 10741 2469 9C1D0000 		.4byte	.LLST12
 10742 246d 941D0000 		.4byte	.LVUS12
 10743 2471 16       		.uleb128 0x16
 10744 2472 B6030000 		.4byte	.LASF239
 10745 2476 01       		.byte	0x1
 10746 2477 DC02     		.2byte	0x2dc
 10747 2479 25       		.byte	0x25
 10748 247a E8000000 		.4byte	0xe8
 10749 247e D91D0000 		.4byte	.LLST13
 10750 2482 D51D0000 		.4byte	.LVUS13
 10751 2486 16       		.uleb128 0x16
 10752 2487 670B0000 		.4byte	.LASF162
 10753 248b 01       		.byte	0x1
 10754 248c DD02     		.2byte	0x2dd
 10755 248e 15       		.byte	0x15
 10756 248f A4000000 		.4byte	0xa4
 10757 2493 021E0000 		.4byte	.LLST14
 10758 2497 FA1D0000 		.4byte	.LVUS14
 10759 249b 16       		.uleb128 0x16
 10760 249c 79000000 		.4byte	.LASF42
 10761 24a0 01       		.byte	0x1
 10762 24a1 DE02     		.2byte	0x2de
 10763 24a3 14       		.byte	0x14
 10764 24a4 48010000 		.4byte	0x148
 10765 24a8 3D1E0000 		.4byte	.LLST15
 10766 24ac 391E0000 		.4byte	.LVUS15
 10767 24b0 16       		.uleb128 0x16
 10768 24b1 50100000 		.4byte	.LASF236
 10769 24b5 01       		.byte	0x1
 10770 24b6 DF02     		.2byte	0x2df
 10771 24b8 1D       		.byte	0x1d
 10772 24b9 17240000 		.4byte	0x2417
 10773 24bd 611E0000 		.4byte	.LLST16
 10774 24c1 5D1E0000 		.4byte	.LVUS16
 10775 24c5 17       		.uleb128 0x17
 10776 24c6 A6070000 		.4byte	.LASF231
 10777 24ca 01       		.byte	0x1
 10778 24cb E102     		.2byte	0x2e1
 10779 24cd 09       		.byte	0x9
 10780 24ce 4E050000 		.4byte	0x54e
 10781 24d2 8F1E0000 		.4byte	.LLST17
 10782 24d6 811E0000 		.4byte	.LVUS17
 10783 24da 14       		.uleb128 0x14
 10784 24db F40C0000 		.4byte	.LASF110
 10785 24df 01       		.byte	0x1
 10786 24e0 E202     		.2byte	0x2e2
 10787 24e2 0D       		.byte	0xd
 10788 24e3 32010000 		.4byte	0x132
ARM GAS  /tmp/ccaP1CVS.s 			page 316


 10789 24e7 01       		.byte	0x1
 10790 24e8 56       		.byte	0x56
 10791 24e9 35       		.uleb128 0x35
 10792 24ea 30000000 		.4byte	.Ldebug_ranges0+0x30
 10793 24ee 40250000 		.4byte	0x2540
 10794 24f2 17       		.uleb128 0x17
 10795 24f3 390C0000 		.4byte	.LASF43
 10796 24f7 01       		.byte	0x1
 10797 24f8 FF02     		.2byte	0x2ff
 10798 24fa 10       		.byte	0x10
 10799 24fb 5E040000 		.4byte	0x45e
 10800 24ff E91E0000 		.4byte	.LLST18
 10801 2503 E51E0000 		.4byte	.LVUS18
 10802 2507 24       		.uleb128 0x24
 10803 2508 F2000000 		.4byte	.LVL25
 10804 250c E72A0000 		.4byte	0x2ae7
 10805 2510 1B250000 		.4byte	0x251b
 10806 2514 1A       		.uleb128 0x1a
 10807 2515 01       		.byte	0x1
 10808 2516 50       		.byte	0x50
 10809 2517 02       		.byte	0x2
 10810 2518 76       		.byte	0x76
 10811 2519 00       		.sleb128 0
 10812 251a 00       		.byte	0
 10813 251b 24       		.uleb128 0x24
 10814 251c FC000000 		.4byte	.LVL27
 10815 2520 E72A0000 		.4byte	0x2ae7
 10816 2524 2F250000 		.4byte	0x252f
 10817 2528 1A       		.uleb128 0x1a
 10818 2529 01       		.byte	0x1
 10819 252a 50       		.byte	0x50
 10820 252b 02       		.byte	0x2
 10821 252c 08       		.byte	0x8
 10822 252d 5C       		.byte	0x5c
 10823 252e 00       		.byte	0
 10824 252f 25       		.uleb128 0x25
 10825 2530 20010000 		.4byte	.LVL34
 10826 2534 AE2A0000 		.4byte	0x2aae
 10827 2538 1A       		.uleb128 0x1a
 10828 2539 01       		.byte	0x1
 10829 253a 50       		.byte	0x50
 10830 253b 02       		.byte	0x2
 10831 253c 79       		.byte	0x79
 10832 253d 00       		.sleb128 0
 10833 253e 00       		.byte	0
 10834 253f 00       		.byte	0
 10835 2540 1E       		.uleb128 0x1e
 10836 2541 81230000 		.4byte	0x2381
 10837 2545 04010000 		.4byte	.LBI59
 10838 2549 03       		.byte	.LVU111
 10839 254a 58000000 		.4byte	.Ldebug_ranges0+0x58
 10840 254e 01       		.byte	0x1
 10841 254f 2603     		.2byte	0x326
 10842 2551 04       		.byte	0x4
 10843 2552 36260000 		.4byte	0x2636
 10844 2556 23       		.uleb128 0x23
 10845 2557 EB230000 		.4byte	0x23eb
ARM GAS  /tmp/ccaP1CVS.s 			page 317


 10846 255b 0B1F0000 		.4byte	.LLST19
 10847 255f 071F0000 		.4byte	.LVUS19
 10848 2563 23       		.uleb128 0x23
 10849 2564 DE230000 		.4byte	0x23de
 10850 2568 311F0000 		.4byte	.LLST20
 10851 256c 2B1F0000 		.4byte	.LVUS20
 10852 2570 23       		.uleb128 0x23
 10853 2571 D1230000 		.4byte	0x23d1
 10854 2575 5E1F0000 		.4byte	.LLST21
 10855 2579 5A1F0000 		.4byte	.LVUS21
 10856 257d 23       		.uleb128 0x23
 10857 257e C4230000 		.4byte	0x23c4
 10858 2582 861F0000 		.4byte	.LLST22
 10859 2586 7E1F0000 		.4byte	.LVUS22
 10860 258a 23       		.uleb128 0x23
 10861 258b B7230000 		.4byte	0x23b7
 10862 258f D61F0000 		.4byte	.LLST23
 10863 2593 D21F0000 		.4byte	.LVUS23
 10864 2597 3C       		.uleb128 0x3c
 10865 2598 AA230000 		.4byte	0x23aa
 10866 259c 23       		.uleb128 0x23
 10867 259d 9D230000 		.4byte	0x239d
 10868 25a1 FC1F0000 		.4byte	.LLST24
 10869 25a5 F41F0000 		.4byte	.LVUS24
 10870 25a9 23       		.uleb128 0x23
 10871 25aa 90230000 		.4byte	0x2390
 10872 25ae 39200000 		.4byte	.LLST25
 10873 25b2 35200000 		.4byte	.LVUS25
 10874 25b6 1F       		.uleb128 0x1f
 10875 25b7 58000000 		.4byte	.Ldebug_ranges0+0x58
 10876 25bb 21       		.uleb128 0x21
 10877 25bc F8230000 		.4byte	0x23f8
 10878 25c0 20       		.uleb128 0x20
 10879 25c1 05240000 		.4byte	0x2405
 10880 25c5 5D200000 		.4byte	.LLST26
 10881 25c9 57200000 		.4byte	.LVUS26
 10882 25cd 24       		.uleb128 0x24
 10883 25ce 0E010000 		.4byte	.LVL30
 10884 25d2 F52A0000 		.4byte	0x2af5
 10885 25d6 ED250000 		.4byte	0x25ed
 10886 25da 1A       		.uleb128 0x1a
 10887 25db 01       		.byte	0x1
 10888 25dc 50       		.byte	0x50
 10889 25dd 02       		.byte	0x2
 10890 25de 79       		.byte	0x79
 10891 25df 00       		.sleb128 0
 10892 25e0 1A       		.uleb128 0x1a
 10893 25e1 01       		.byte	0x1
 10894 25e2 51       		.byte	0x51
 10895 25e3 02       		.byte	0x2
 10896 25e4 08       		.byte	0x8
 10897 25e5 A5       		.byte	0xa5
 10898 25e6 1A       		.uleb128 0x1a
 10899 25e7 01       		.byte	0x1
 10900 25e8 52       		.byte	0x52
 10901 25e9 02       		.byte	0x2
 10902 25ea 76       		.byte	0x76
ARM GAS  /tmp/ccaP1CVS.s 			page 318


 10903 25eb 00       		.sleb128 0
 10904 25ec 00       		.byte	0
 10905 25ed 24       		.uleb128 0x24
 10906 25ee 62010000 		.4byte	.LVL43
 10907 25f2 032B0000 		.4byte	0x2b03
 10908 25f6 01260000 		.4byte	0x2601
 10909 25fa 1A       		.uleb128 0x1a
 10910 25fb 01       		.byte	0x1
 10911 25fc 50       		.byte	0x50
 10912 25fd 02       		.byte	0x2
 10913 25fe 79       		.byte	0x79
 10914 25ff 00       		.sleb128 0
 10915 2600 00       		.byte	0
 10916 2601 24       		.uleb128 0x24
 10917 2602 70010000 		.4byte	.LVL45
 10918 2606 032B0000 		.4byte	0x2b03
 10919 260a 15260000 		.4byte	0x2615
 10920 260e 1A       		.uleb128 0x1a
 10921 260f 01       		.byte	0x1
 10922 2610 50       		.byte	0x50
 10923 2611 02       		.byte	0x2
 10924 2612 74       		.byte	0x74
 10925 2613 18       		.sleb128 24
 10926 2614 00       		.byte	0
 10927 2615 25       		.uleb128 0x25
 10928 2616 8A010000 		.4byte	.LVL46
 10929 261a 122B0000 		.4byte	0x2b12
 10930 261e 1A       		.uleb128 0x1a
 10931 261f 01       		.byte	0x1
 10932 2620 50       		.byte	0x50
 10933 2621 05       		.byte	0x5
 10934 2622 76       		.byte	0x76
 10935 2623 00       		.sleb128 0
 10936 2624 09       		.byte	0x9
 10937 2625 F8       		.byte	0xf8
 10938 2626 1A       		.byte	0x1a
 10939 2627 1A       		.uleb128 0x1a
 10940 2628 01       		.byte	0x1
 10941 2629 51       		.byte	0x51
 10942 262a 02       		.byte	0x2
 10943 262b 77       		.byte	0x77
 10944 262c 00       		.sleb128 0
 10945 262d 1A       		.uleb128 0x1a
 10946 262e 01       		.byte	0x1
 10947 262f 52       		.byte	0x52
 10948 2630 02       		.byte	0x2
 10949 2631 78       		.byte	0x78
 10950 2632 00       		.sleb128 0
 10951 2633 00       		.byte	0
 10952 2634 00       		.byte	0
 10953 2635 00       		.byte	0
 10954 2636 3D       		.uleb128 0x3d
 10955 2637 64230000 		.4byte	0x2364
 10956 263b 92010000 		.4byte	.LBI64
 10957 263f 03       		.byte	.LVU183
 10958 2640 70000000 		.4byte	.Ldebug_ranges0+0x70
 10959 2644 01       		.byte	0x1
ARM GAS  /tmp/ccaP1CVS.s 			page 319


 10960 2645 2703     		.2byte	0x327
 10961 2647 04       		.byte	0x4
 10962 2648 23       		.uleb128 0x23
 10963 2649 73230000 		.4byte	0x2373
 10964 264d 9F200000 		.4byte	.LLST27
 10965 2651 9B200000 		.4byte	.LVUS27
 10966 2655 3E       		.uleb128 0x3e
 10967 2656 2C110000 		.4byte	0x112c
 10968 265a B2010000 		.4byte	.LBB66
 10969 265e F2010000 		.4byte	.LBE66
 10970 2662 01       		.byte	0x1
 10971 2663 4204     		.2byte	0x442
 10972 2665 05       		.byte	0x5
 10973 2666 EE260000 		.4byte	0x26ee
 10974 266a 20       		.uleb128 0x20
 10975 266b 3B110000 		.4byte	0x113b
 10976 266f C3200000 		.4byte	.LLST28
 10977 2673 BD200000 		.4byte	.LVUS28
 10978 2677 24       		.uleb128 0x24
 10979 2678 BA010000 		.4byte	.LVL52
 10980 267c 202B0000 		.4byte	0x2b20
 10981 2680 8B260000 		.4byte	0x268b
 10982 2684 1A       		.uleb128 0x1a
 10983 2685 01       		.byte	0x1
 10984 2686 50       		.byte	0x50
 10985 2687 02       		.byte	0x2
 10986 2688 78       		.byte	0x78
 10987 2689 00       		.sleb128 0
 10988 268a 00       		.byte	0
 10989 268b 24       		.uleb128 0x24
 10990 268c CE010000 		.4byte	.LVL54
 10991 2690 202B0000 		.4byte	0x2b20
 10992 2694 9F260000 		.4byte	0x269f
 10993 2698 1A       		.uleb128 0x1a
 10994 2699 01       		.byte	0x1
 10995 269a 50       		.byte	0x50
 10996 269b 02       		.byte	0x2
 10997 269c 76       		.byte	0x76
 10998 269d 00       		.sleb128 0
 10999 269e 00       		.byte	0
 11000 269f 24       		.uleb128 0x24
 11001 26a0 D4010000 		.4byte	.LVL55
 11002 26a4 202B0000 		.4byte	0x2b20
 11003 26a8 B3260000 		.4byte	0x26b3
 11004 26ac 1A       		.uleb128 0x1a
 11005 26ad 01       		.byte	0x1
 11006 26ae 50       		.byte	0x50
 11007 26af 02       		.byte	0x2
 11008 26b0 78       		.byte	0x78
 11009 26b1 00       		.sleb128 0
 11010 26b2 00       		.byte	0
 11011 26b3 24       		.uleb128 0x24
 11012 26b4 DC010000 		.4byte	.LVL56
 11013 26b8 202B0000 		.4byte	0x2b20
 11014 26bc C7260000 		.4byte	0x26c7
 11015 26c0 1A       		.uleb128 0x1a
 11016 26c1 01       		.byte	0x1
ARM GAS  /tmp/ccaP1CVS.s 			page 320


 11017 26c2 50       		.byte	0x50
 11018 26c3 02       		.byte	0x2
 11019 26c4 76       		.byte	0x76
 11020 26c5 28       		.sleb128 40
 11021 26c6 00       		.byte	0
 11022 26c7 24       		.uleb128 0x24
 11023 26c8 E4010000 		.4byte	.LVL57
 11024 26cc 202B0000 		.4byte	0x2b20
 11025 26d0 DC260000 		.4byte	0x26dc
 11026 26d4 1A       		.uleb128 0x1a
 11027 26d5 01       		.byte	0x1
 11028 26d6 50       		.byte	0x50
 11029 26d7 03       		.byte	0x3
 11030 26d8 76       		.byte	0x76
 11031 26d9 807F     		.sleb128 -128
 11032 26db 00       		.byte	0
 11033 26dc 25       		.uleb128 0x25
 11034 26dd EC010000 		.4byte	.LVL58
 11035 26e1 202B0000 		.4byte	0x2b20
 11036 26e5 1A       		.uleb128 0x1a
 11037 26e6 01       		.byte	0x1
 11038 26e7 50       		.byte	0x50
 11039 26e8 03       		.byte	0x3
 11040 26e9 76       		.byte	0x76
 11041 26ea E07E     		.sleb128 -160
 11042 26ec 00       		.byte	0
 11043 26ed 00       		.byte	0
 11044 26ee 18       		.uleb128 0x18
 11045 26ef 98010000 		.4byte	.LVL48
 11046 26f3 922A0000 		.4byte	0x2a92
 11047 26f7 24       		.uleb128 0x24
 11048 26f8 18020000 		.4byte	.LVL59
 11049 26fc 742A0000 		.4byte	0x2a74
 11050 2700 0B270000 		.4byte	0x270b
 11051 2704 1A       		.uleb128 0x1a
 11052 2705 01       		.byte	0x1
 11053 2706 51       		.byte	0x51
 11054 2707 02       		.byte	0x2
 11055 2708 79       		.byte	0x79
 11056 2709 00       		.sleb128 0
 11057 270a 00       		.byte	0
 11058 270b 18       		.uleb128 0x18
 11059 270c 1C020000 		.4byte	.LVL60
 11060 2710 A02A0000 		.4byte	0x2aa0
 11061 2714 00       		.byte	0
 11062 2715 00       		.byte	0
 11063 2716 3F       		.uleb128 0x3f
 11064 2717 9C020000 		.4byte	.LASF240
 11065 271b 02       		.byte	0x2
 11066 271c E3       		.byte	0xe3
 11067 271d 1E       		.byte	0x1e
 11068 271e 01       		.byte	0x1
 11069 271f 03       		.byte	0x3
 11070 2720 31270000 		.4byte	0x2731
 11071 2724 40       		.uleb128 0x40
 11072 2725 63090000 		.4byte	.LASF241
 11073 2729 02       		.byte	0x2
ARM GAS  /tmp/ccaP1CVS.s 			page 321


 11074 272a E3       		.byte	0xe3
 11075 272b 38       		.byte	0x38
 11076 272c ED000000 		.4byte	0xed
 11077 2730 00       		.byte	0
 11078 2731 41       		.uleb128 0x41
 11079 2732 E6070000 		.4byte	.LASF242
 11080 2736 02       		.byte	0x2
 11081 2737 CF       		.byte	0xcf
 11082 2738 22       		.byte	0x22
 11083 2739 01       		.byte	0x1
 11084 273a ED000000 		.4byte	0xed
 11085 273e 03       		.byte	0x3
 11086 273f 5C270000 		.4byte	0x275c
 11087 2743 42       		.uleb128 0x42
 11088 2744 82030000 		.4byte	.LASF243
 11089 2748 02       		.byte	0x2
 11090 2749 D1       		.byte	0xd1
 11091 274a 0A       		.byte	0xa
 11092 274b ED000000 		.4byte	0xed
 11093 274f 42       		.uleb128 0x42
 11094 2750 53080000 		.4byte	.LASF244
 11095 2754 02       		.byte	0x2
 11096 2755 D1       		.byte	0xd1
 11097 2756 1D       		.byte	0x1d
 11098 2757 ED000000 		.4byte	0xed
 11099 275b 00       		.byte	0
 11100 275c 3F       		.uleb128 0x3f
 11101 275d DF0B0000 		.4byte	.LASF245
 11102 2761 02       		.byte	0x2
 11103 2762 BF       		.byte	0xbf
 11104 2763 1E       		.byte	0x1e
 11105 2764 01       		.byte	0x1
 11106 2765 03       		.byte	0x3
 11107 2766 77270000 		.4byte	0x2777
 11108 276a 42       		.uleb128 0x42
 11109 276b 53080000 		.4byte	.LASF244
 11110 276f 02       		.byte	0x2
 11111 2770 C1       		.byte	0xc1
 11112 2771 0A       		.byte	0xa
 11113 2772 ED000000 		.4byte	0xed
 11114 2776 00       		.byte	0
 11115 2777 41       		.uleb128 0x41
 11116 2778 3B080000 		.4byte	.LASF246
 11117 277c 02       		.byte	0x2
 11118 277d 82       		.byte	0x82
 11119 277e 3B       		.byte	0x3b
 11120 277f 01       		.byte	0x1
 11121 2780 C6000000 		.4byte	0xc6
 11122 2784 03       		.byte	0x3
 11123 2785 A2270000 		.4byte	0x27a2
 11124 2789 40       		.uleb128 0x40
 11125 278a 57020000 		.4byte	.LASF247
 11126 278e 02       		.byte	0x2
 11127 278f 82       		.byte	0x82
 11128 2790 5D       		.byte	0x5d
 11129 2791 ED000000 		.4byte	0xed
 11130 2795 42       		.uleb128 0x42
ARM GAS  /tmp/ccaP1CVS.s 			page 322


 11131 2796 C30C0000 		.4byte	.LASF248
 11132 279a 02       		.byte	0x2
 11133 279b 84       		.byte	0x84
 11134 279c 0A       		.byte	0xa
 11135 279d C6000000 		.4byte	0xc6
 11136 27a1 00       		.byte	0
 11137 27a2 43       		.uleb128 0x43
 11138 27a3 310F0000 		.4byte	0xf31
 11139 27a7 6C000000 		.4byte	.LFB48
 11140 27ab 8C000000 		.4byte	.LFE48
 11141 27af 02       		.byte	0x2
 11142 27b0 7D       		.byte	0x7d
 11143 27b1 00       		.sleb128 0
 11144 27b2 01       		.byte	0x1
 11145 27b3 E3270000 		.4byte	0x27e3
 11146 27b7 21       		.uleb128 0x21
 11147 27b8 400F0000 		.4byte	0xf40
 11148 27bc 3D       		.uleb128 0x3d
 11149 27bd 310F0000 		.4byte	0xf31
 11150 27c1 7C000000 		.4byte	.LBI34
 11151 27c5 00       		.byte	.LVU51
 11152 27c6 00000000 		.4byte	.Ldebug_ranges0+0
 11153 27ca 01       		.byte	0x1
 11154 27cb 280F     		.2byte	0xf28
 11155 27cd 0D       		.byte	0xd
 11156 27ce 1F       		.uleb128 0x1f
 11157 27cf 00000000 		.4byte	.Ldebug_ranges0+0
 11158 27d3 20       		.uleb128 0x20
 11159 27d4 400F0000 		.4byte	0xf40
 11160 27d8 F4200000 		.4byte	.LLST5
 11161 27dc EE200000 		.4byte	.LVUS5
 11162 27e0 00       		.byte	0
 11163 27e1 00       		.byte	0
 11164 27e2 00       		.byte	0
 11165 27e3 44       		.uleb128 0x44
 11166 27e4 F2200000 		.4byte	0x20f2
 11167 27e8 04030000 		.4byte	.LFB11
 11168 27ec 68030000 		.4byte	.LFE11
 11169 27f0 22210000 		.4byte	.LLST33
 11170 27f4 01       		.byte	0x1
 11171 27f5 9B280000 		.4byte	0x289b
 11172 27f9 23       		.uleb128 0x23
 11173 27fa 06210000 		.4byte	0x2106
 11174 27fe 4A210000 		.4byte	.LLST34
 11175 2802 42210000 		.4byte	.LVUS34
 11176 2806 20       		.uleb128 0x20
 11177 2807 13210000 		.4byte	0x2113
 11178 280b 80210000 		.4byte	.LLST35
 11179 280f 7E210000 		.4byte	.LVUS35
 11180 2813 20       		.uleb128 0x20
 11181 2814 20210000 		.4byte	0x2120
 11182 2818 99210000 		.4byte	.LLST36
 11183 281c 93210000 		.4byte	.LVUS36
 11184 2820 20       		.uleb128 0x20
 11185 2821 2D210000 		.4byte	0x212d
 11186 2825 C8210000 		.4byte	.LLST37
 11187 2829 C2210000 		.4byte	.LVUS37
ARM GAS  /tmp/ccaP1CVS.s 			page 323


 11188 282d 20       		.uleb128 0x20
 11189 282e 3A210000 		.4byte	0x213a
 11190 2832 F7210000 		.4byte	.LLST38
 11191 2836 F1210000 		.4byte	.LVUS38
 11192 283a 20       		.uleb128 0x20
 11193 283b 47210000 		.4byte	0x2147
 11194 283f 28220000 		.4byte	.LLST39
 11195 2843 20220000 		.4byte	.LVUS39
 11196 2847 22       		.uleb128 0x22
 11197 2848 F2200000 		.4byte	0x20f2
 11198 284c 32030000 		.4byte	.LBI78
 11199 2850 00       		.byte	.LVU330
 11200 2851 32030000 		.4byte	.LBB78
 11201 2855 42030000 		.4byte	.LBE78
 11202 2859 01       		.byte	0x1
 11203 285a 6205     		.2byte	0x562
 11204 285c 0D       		.byte	0xd
 11205 285d 88280000 		.4byte	0x2888
 11206 2861 23       		.uleb128 0x23
 11207 2862 06210000 		.4byte	0x2106
 11208 2866 5E220000 		.4byte	.LLST40
 11209 286a 5C220000 		.4byte	.LVUS40
 11210 286e 21       		.uleb128 0x21
 11211 286f 13210000 		.4byte	0x2113
 11212 2873 21       		.uleb128 0x21
 11213 2874 20210000 		.4byte	0x2120
 11214 2878 21       		.uleb128 0x21
 11215 2879 2D210000 		.4byte	0x212d
 11216 287d 21       		.uleb128 0x21
 11217 287e 3A210000 		.4byte	0x213a
 11218 2882 21       		.uleb128 0x21
 11219 2883 47210000 		.4byte	0x2147
 11220 2887 00       		.byte	0
 11221 2888 18       		.uleb128 0x18
 11222 2889 16030000 		.4byte	.LVL77
 11223 288d 922A0000 		.4byte	0x2a92
 11224 2891 18       		.uleb128 0x18
 11225 2892 22030000 		.4byte	.LVL80
 11226 2896 A02A0000 		.4byte	0x2aa0
 11227 289a 00       		.byte	0
 11228 289b 43       		.uleb128 0x43
 11229 289c AF190000 		.4byte	0x19af
 11230 28a0 FC050000 		.4byte	.LFB23
 11231 28a4 08060000 		.4byte	.LFE23
 11232 28a8 02       		.byte	0x2
 11233 28a9 7D       		.byte	0x7d
 11234 28aa 00       		.sleb128 0
 11235 28ab 01       		.byte	0x1
 11236 28ac BE280000 		.4byte	0x28be
 11237 28b0 20       		.uleb128 0x20
 11238 28b1 C3190000 		.4byte	0x19c3
 11239 28b5 73220000 		.4byte	.LLST78
 11240 28b9 71220000 		.4byte	.LVUS78
 11241 28bd 00       		.byte	0
 11242 28be 44       		.uleb128 0x44
 11243 28bf B9160000 		.4byte	0x16b9
 11244 28c3 36080000 		.4byte	.LFB29
ARM GAS  /tmp/ccaP1CVS.s 			page 324


 11245 28c7 84080000 		.4byte	.LFE29
 11246 28cb 86220000 		.4byte	.LLST100
 11247 28cf 01       		.byte	0x1
 11248 28d0 55290000 		.4byte	0x2955
 11249 28d4 3A       		.uleb128 0x3a
 11250 28d5 B9160000 		.4byte	0x16b9
 11251 28d9 48080000 		.4byte	.LBI127
 11252 28dd 00       		.byte	.LVU844
 11253 28de 48080000 		.4byte	.LBB127
 11254 28e2 7E080000 		.4byte	.LBE127
 11255 28e6 01       		.byte	0x1
 11256 28e7 830B     		.2byte	0xb83
 11257 28e9 06       		.byte	0x6
 11258 28ea 45       		.uleb128 0x45
 11259 28eb C9160000 		.4byte	0x16c9
 11260 28ef 4C080000 		.4byte	.LBB129
 11261 28f3 7E080000 		.4byte	.LBE129
 11262 28f7 20       		.uleb128 0x20
 11263 28f8 CA160000 		.4byte	0x16ca
 11264 28fc A8220000 		.4byte	.LLST101
 11265 2900 A6220000 		.4byte	.LVUS101
 11266 2904 1E       		.uleb128 0x1e
 11267 2905 77270000 		.4byte	0x2777
 11268 2909 4E080000 		.4byte	.LBI130
 11269 290d 00       		.byte	.LVU851
 11270 290e F0000000 		.4byte	.Ldebug_ranges0+0xf0
 11271 2912 01       		.byte	0x1
 11272 2913 B70B     		.2byte	0xbb7
 11273 2915 03       		.byte	0x3
 11274 2916 3B290000 		.4byte	0x293b
 11275 291a 23       		.uleb128 0x23
 11276 291b 89270000 		.4byte	0x2789
 11277 291f BD220000 		.4byte	.LLST102
 11278 2923 BB220000 		.4byte	.LVUS102
 11279 2927 1F       		.uleb128 0x1f
 11280 2928 F0000000 		.4byte	.Ldebug_ranges0+0xf0
 11281 292c 20       		.uleb128 0x20
 11282 292d 95270000 		.4byte	0x2795
 11283 2931 D2220000 		.4byte	.LLST103
 11284 2935 D0220000 		.4byte	.LVUS103
 11285 2939 00       		.byte	0
 11286 293a 00       		.byte	0
 11287 293b 31       		.uleb128 0x31
 11288 293c D7160000 		.4byte	0x16d7
 11289 2940 08010000 		.4byte	.Ldebug_ranges0+0x108
 11290 2944 20       		.uleb128 0x20
 11291 2945 D8160000 		.4byte	0x16d8
 11292 2949 E7220000 		.4byte	.LLST104
 11293 294d E5220000 		.4byte	.LVUS104
 11294 2951 00       		.byte	0
 11295 2952 00       		.byte	0
 11296 2953 00       		.byte	0
 11297 2954 00       		.byte	0
 11298 2955 44       		.uleb128 0x44
 11299 2956 9F0F0000 		.4byte	0xf9f
 11300 295a 600B0000 		.4byte	.LFB45
 11301 295e C00B0000 		.4byte	.LFE45
ARM GAS  /tmp/ccaP1CVS.s 			page 325


 11302 2962 04230000 		.4byte	.LLST146
 11303 2966 01       		.byte	0x1
 11304 2967 652A0000 		.4byte	0x2a65
 11305 296b 23       		.uleb128 0x23
 11306 296c B20F0000 		.4byte	0xfb2
 11307 2970 28230000 		.4byte	.LLST147
 11308 2974 24230000 		.4byte	.LVUS147
 11309 2978 23       		.uleb128 0x23
 11310 2979 BF0F0000 		.4byte	0xfbf
 11311 297d 4A230000 		.4byte	.LLST148
 11312 2981 46230000 		.4byte	.LVUS148
 11313 2985 23       		.uleb128 0x23
 11314 2986 CC0F0000 		.4byte	0xfcc
 11315 298a 6C230000 		.4byte	.LLST149
 11316 298e 68230000 		.4byte	.LVUS149
 11317 2992 21       		.uleb128 0x21
 11318 2993 D90F0000 		.4byte	0xfd9
 11319 2997 21       		.uleb128 0x21
 11320 2998 E60F0000 		.4byte	0xfe6
 11321 299c 46       		.uleb128 0x46
 11322 299d F30F0000 		.4byte	0xff3
 11323 29a1 00       		.byte	0
 11324 29a2 3A       		.uleb128 0x3a
 11325 29a3 9F0F0000 		.4byte	0xf9f
 11326 29a7 6E0B0000 		.4byte	.LBI150
 11327 29ab 00       		.byte	.LVU1196
 11328 29ac 6E0B0000 		.4byte	.LBB150
 11329 29b0 BA0B0000 		.4byte	.LBE150
 11330 29b4 01       		.byte	0x1
 11331 29b5 790E     		.2byte	0xe79
 11332 29b7 15       		.byte	0x15
 11333 29b8 23       		.uleb128 0x23
 11334 29b9 CC0F0000 		.4byte	0xfcc
 11335 29bd 8F230000 		.4byte	.LLST150
 11336 29c1 8D230000 		.4byte	.LVUS150
 11337 29c5 23       		.uleb128 0x23
 11338 29c6 BF0F0000 		.4byte	0xfbf
 11339 29ca A6230000 		.4byte	.LLST151
 11340 29ce A2230000 		.4byte	.LVUS151
 11341 29d2 23       		.uleb128 0x23
 11342 29d3 B20F0000 		.4byte	0xfb2
 11343 29d7 C8230000 		.4byte	.LLST152
 11344 29db C4230000 		.4byte	.LVUS152
 11345 29df 20       		.uleb128 0x20
 11346 29e0 D90F0000 		.4byte	0xfd9
 11347 29e4 E8230000 		.4byte	.LLST153
 11348 29e8 E6230000 		.4byte	.LVUS153
 11349 29ec 20       		.uleb128 0x20
 11350 29ed E60F0000 		.4byte	0xfe6
 11351 29f1 FD230000 		.4byte	.LLST154
 11352 29f5 FB230000 		.4byte	.LVUS154
 11353 29f9 20       		.uleb128 0x20
 11354 29fa F30F0000 		.4byte	0xff3
 11355 29fe 16240000 		.4byte	.LLST155
 11356 2a02 10240000 		.4byte	.LVUS155
 11357 2a06 47       		.uleb128 0x47
 11358 2a07 00100000 		.4byte	0x1000
ARM GAS  /tmp/ccaP1CVS.s 			page 326


 11359 2a0b 58010000 		.4byte	.Ldebug_ranges0+0x158
 11360 2a0f 212A0000 		.4byte	0x2a21
 11361 2a13 20       		.uleb128 0x20
 11362 2a14 05100000 		.4byte	0x1005
 11363 2a18 45240000 		.4byte	.LLST156
 11364 2a1c 41240000 		.4byte	.LVUS156
 11365 2a20 00       		.byte	0
 11366 2a21 47       		.uleb128 0x47
 11367 2a22 13100000 		.4byte	0x1013
 11368 2a26 70010000 		.4byte	.Ldebug_ranges0+0x170
 11369 2a2a 3C2A0000 		.4byte	0x2a3c
 11370 2a2e 20       		.uleb128 0x20
 11371 2a2f 14100000 		.4byte	0x1014
 11372 2a33 65240000 		.4byte	.LLST157
 11373 2a37 63240000 		.4byte	.LVUS157
 11374 2a3b 00       		.byte	0
 11375 2a3c 25       		.uleb128 0x25
 11376 2a3d B60B0000 		.4byte	.LVL284
 11377 2a41 2E100000 		.4byte	0x102e
 11378 2a45 1A       		.uleb128 0x1a
 11379 2a46 01       		.byte	0x1
 11380 2a47 50       		.byte	0x50
 11381 2a48 02       		.byte	0x2
 11382 2a49 79       		.byte	0x79
 11383 2a4a 00       		.sleb128 0
 11384 2a4b 1A       		.uleb128 0x1a
 11385 2a4c 01       		.byte	0x1
 11386 2a4d 51       		.byte	0x51
 11387 2a4e 08       		.byte	0x8
 11388 2a4f 75       		.byte	0x75
 11389 2a50 7F       		.sleb128 -1
 11390 2a51 7B       		.byte	0x7b
 11391 2a52 00       		.sleb128 0
 11392 2a53 1E       		.byte	0x1e
 11393 2a54 76       		.byte	0x76
 11394 2a55 00       		.sleb128 0
 11395 2a56 22       		.byte	0x22
 11396 2a57 1A       		.uleb128 0x1a
 11397 2a58 01       		.byte	0x1
 11398 2a59 52       		.byte	0x52
 11399 2a5a 01       		.byte	0x1
 11400 2a5b 31       		.byte	0x31
 11401 2a5c 1A       		.uleb128 0x1a
 11402 2a5d 01       		.byte	0x1
 11403 2a5e 53       		.byte	0x53
 11404 2a5f 02       		.byte	0x2
 11405 2a60 77       		.byte	0x77
 11406 2a61 00       		.sleb128 0
 11407 2a62 00       		.byte	0
 11408 2a63 00       		.byte	0
 11409 2a64 00       		.byte	0
 11410 2a65 48       		.uleb128 0x48
 11411 2a66 01       		.byte	0x1
 11412 2a67 01       		.byte	0x1
 11413 2a68 66030000 		.4byte	.LASF249
 11414 2a6c 66030000 		.4byte	.LASF249
 11415 2a70 07       		.byte	0x7
ARM GAS  /tmp/ccaP1CVS.s 			page 327


 11416 2a71 9501     		.2byte	0x195
 11417 2a73 0D       		.byte	0xd
 11418 2a74 48       		.uleb128 0x48
 11419 2a75 01       		.byte	0x1
 11420 2a76 01       		.byte	0x1
 11421 2a77 A9050000 		.4byte	.LASF250
 11422 2a7b A9050000 		.4byte	.LASF250
 11423 2a7f 07       		.byte	0x7
 11424 2a80 8601     		.2byte	0x186
 11425 2a82 06       		.byte	0x6
 11426 2a83 48       		.uleb128 0x48
 11427 2a84 01       		.byte	0x1
 11428 2a85 01       		.byte	0x1
 11429 2a86 00000000 		.4byte	.LASF251
 11430 2a8a 00000000 		.4byte	.LASF251
 11431 2a8e 07       		.byte	0x7
 11432 2a8f 7101     		.2byte	0x171
 11433 2a91 06       		.byte	0x6
 11434 2a92 49       		.uleb128 0x49
 11435 2a93 01       		.byte	0x1
 11436 2a94 01       		.byte	0x1
 11437 2a95 AC020000 		.4byte	.LASF252
 11438 2a99 AC020000 		.4byte	.LASF252
 11439 2a9d 02       		.byte	0x2
 11440 2a9e 61       		.byte	0x61
 11441 2a9f 0D       		.byte	0xd
 11442 2aa0 49       		.uleb128 0x49
 11443 2aa1 01       		.byte	0x1
 11444 2aa2 01       		.byte	0x1
 11445 2aa3 36000000 		.4byte	.LASF253
 11446 2aa7 36000000 		.4byte	.LASF253
 11447 2aab 02       		.byte	0x2
 11448 2aac 62       		.byte	0x62
 11449 2aad 0D       		.byte	0xd
 11450 2aae 49       		.uleb128 0x49
 11451 2aaf 01       		.byte	0x1
 11452 2ab0 01       		.byte	0x1
 11453 2ab1 8C0C0000 		.4byte	.LASF254
 11454 2ab5 8C0C0000 		.4byte	.LASF254
 11455 2ab9 09       		.byte	0x9
 11456 2aba 92       		.byte	0x92
 11457 2abb 06       		.byte	0x6
 11458 2abc 49       		.uleb128 0x49
 11459 2abd 01       		.byte	0x1
 11460 2abe 01       		.byte	0x1
 11461 2abf 7A0C0000 		.4byte	.LASF255
 11462 2ac3 7A0C0000 		.4byte	.LASF255
 11463 2ac7 09       		.byte	0x9
 11464 2ac8 A2       		.byte	0xa2
 11465 2ac9 06       		.byte	0x6
 11466 2aca 48       		.uleb128 0x48
 11467 2acb 01       		.byte	0x1
 11468 2acc 01       		.byte	0x1
 11469 2acd 1B030000 		.4byte	.LASF256
 11470 2ad1 1B030000 		.4byte	.LASF256
 11471 2ad5 0A       		.byte	0xa
 11472 2ad6 0105     		.2byte	0x501
ARM GAS  /tmp/ccaP1CVS.s 			page 328


 11473 2ad8 0C       		.byte	0xc
 11474 2ad9 49       		.uleb128 0x49
 11475 2ada 01       		.byte	0x1
 11476 2adb 01       		.byte	0x1
 11477 2adc 65000000 		.4byte	.LASF257
 11478 2ae0 65000000 		.4byte	.LASF257
 11479 2ae4 09       		.byte	0x9
 11480 2ae5 9B       		.byte	0x9b
 11481 2ae6 0C       		.byte	0xc
 11482 2ae7 49       		.uleb128 0x49
 11483 2ae8 01       		.byte	0x1
 11484 2ae9 01       		.byte	0x1
 11485 2aea C0040000 		.4byte	.LASF258
 11486 2aee C0040000 		.4byte	.LASF258
 11487 2af2 09       		.byte	0x9
 11488 2af3 91       		.byte	0x91
 11489 2af4 07       		.byte	0x7
 11490 2af5 49       		.uleb128 0x49
 11491 2af6 01       		.byte	0x1
 11492 2af7 01       		.byte	0x1
 11493 2af8 E8080000 		.4byte	.LASF259
 11494 2afc E8080000 		.4byte	.LASF259
 11495 2b00 0B       		.byte	0xb
 11496 2b01 21       		.byte	0x21
 11497 2b02 09       		.byte	0x9
 11498 2b03 48       		.uleb128 0x48
 11499 2b04 01       		.byte	0x1
 11500 2b05 01       		.byte	0x1
 11501 2b06 3E0B0000 		.4byte	.LASF260
 11502 2b0a 3E0B0000 		.4byte	.LASF260
 11503 2b0e 07       		.byte	0x7
 11504 2b0f 6401     		.2byte	0x164
 11505 2b11 06       		.byte	0x6
 11506 2b12 49       		.uleb128 0x49
 11507 2b13 01       		.byte	0x1
 11508 2b14 01       		.byte	0x1
 11509 2b15 F9070000 		.4byte	.LASF261
 11510 2b19 F9070000 		.4byte	.LASF261
 11511 2b1d 09       		.byte	0x9
 11512 2b1e 75       		.byte	0x75
 11513 2b1f 10       		.byte	0x10
 11514 2b20 48       		.uleb128 0x48
 11515 2b21 01       		.byte	0x1
 11516 2b22 01       		.byte	0x1
 11517 2b23 250E0000 		.4byte	.LASF262
 11518 2b27 250E0000 		.4byte	.LASF262
 11519 2b2b 07       		.byte	0x7
 11520 2b2c 5901     		.2byte	0x159
 11521 2b2e 06       		.byte	0x6
 11522 2b2f 00       		.byte	0
 11523              		.section	.debug_abbrev,"",%progbits
 11524              	.Ldebug_abbrev0:
 11525 0000 01       		.uleb128 0x1
 11526 0001 11       		.uleb128 0x11
 11527 0002 01       		.byte	0x1
 11528 0003 25       		.uleb128 0x25
 11529 0004 0E       		.uleb128 0xe
ARM GAS  /tmp/ccaP1CVS.s 			page 329


 11530 0005 13       		.uleb128 0x13
 11531 0006 0B       		.uleb128 0xb
 11532 0007 03       		.uleb128 0x3
 11533 0008 0E       		.uleb128 0xe
 11534 0009 1B       		.uleb128 0x1b
 11535 000a 0E       		.uleb128 0xe
 11536 000b 11       		.uleb128 0x11
 11537 000c 01       		.uleb128 0x1
 11538 000d 12       		.uleb128 0x12
 11539 000e 01       		.uleb128 0x1
 11540 000f 10       		.uleb128 0x10
 11541 0010 06       		.uleb128 0x6
 11542 0011 00       		.byte	0
 11543 0012 00       		.byte	0
 11544 0013 02       		.uleb128 0x2
 11545 0014 16       		.uleb128 0x16
 11546 0015 00       		.byte	0
 11547 0016 03       		.uleb128 0x3
 11548 0017 0E       		.uleb128 0xe
 11549 0018 3A       		.uleb128 0x3a
 11550 0019 0B       		.uleb128 0xb
 11551 001a 3B       		.uleb128 0x3b
 11552 001b 0B       		.uleb128 0xb
 11553 001c 39       		.uleb128 0x39
 11554 001d 0B       		.uleb128 0xb
 11555 001e 49       		.uleb128 0x49
 11556 001f 13       		.uleb128 0x13
 11557 0020 00       		.byte	0
 11558 0021 00       		.byte	0
 11559 0022 03       		.uleb128 0x3
 11560 0023 24       		.uleb128 0x24
 11561 0024 00       		.byte	0
 11562 0025 0B       		.uleb128 0xb
 11563 0026 0B       		.uleb128 0xb
 11564 0027 3E       		.uleb128 0x3e
 11565 0028 0B       		.uleb128 0xb
 11566 0029 03       		.uleb128 0x3
 11567 002a 0E       		.uleb128 0xe
 11568 002b 00       		.byte	0
 11569 002c 00       		.byte	0
 11570 002d 04       		.uleb128 0x4
 11571 002e 24       		.uleb128 0x24
 11572 002f 00       		.byte	0
 11573 0030 0B       		.uleb128 0xb
 11574 0031 0B       		.uleb128 0xb
 11575 0032 3E       		.uleb128 0x3e
 11576 0033 0B       		.uleb128 0xb
 11577 0034 03       		.uleb128 0x3
 11578 0035 08       		.uleb128 0x8
 11579 0036 00       		.byte	0
 11580 0037 00       		.byte	0
 11581 0038 05       		.uleb128 0x5
 11582 0039 0F       		.uleb128 0xf
 11583 003a 00       		.byte	0
 11584 003b 0B       		.uleb128 0xb
 11585 003c 0B       		.uleb128 0xb
 11586 003d 00       		.byte	0
ARM GAS  /tmp/ccaP1CVS.s 			page 330


 11587 003e 00       		.byte	0
 11588 003f 06       		.uleb128 0x6
 11589 0040 26       		.uleb128 0x26
 11590 0041 00       		.byte	0
 11591 0042 49       		.uleb128 0x49
 11592 0043 13       		.uleb128 0x13
 11593 0044 00       		.byte	0
 11594 0045 00       		.byte	0
 11595 0046 07       		.uleb128 0x7
 11596 0047 0F       		.uleb128 0xf
 11597 0048 00       		.byte	0
 11598 0049 0B       		.uleb128 0xb
 11599 004a 0B       		.uleb128 0xb
 11600 004b 49       		.uleb128 0x49
 11601 004c 13       		.uleb128 0x13
 11602 004d 00       		.byte	0
 11603 004e 00       		.byte	0
 11604 004f 08       		.uleb128 0x8
 11605 0050 35       		.uleb128 0x35
 11606 0051 00       		.byte	0
 11607 0052 49       		.uleb128 0x49
 11608 0053 13       		.uleb128 0x13
 11609 0054 00       		.byte	0
 11610 0055 00       		.byte	0
 11611 0056 09       		.uleb128 0x9
 11612 0057 15       		.uleb128 0x15
 11613 0058 01       		.byte	0x1
 11614 0059 27       		.uleb128 0x27
 11615 005a 0C       		.uleb128 0xc
 11616 005b 01       		.uleb128 0x1
 11617 005c 13       		.uleb128 0x13
 11618 005d 00       		.byte	0
 11619 005e 00       		.byte	0
 11620 005f 0A       		.uleb128 0xa
 11621 0060 05       		.uleb128 0x5
 11622 0061 00       		.byte	0
 11623 0062 49       		.uleb128 0x49
 11624 0063 13       		.uleb128 0x13
 11625 0064 00       		.byte	0
 11626 0065 00       		.byte	0
 11627 0066 0B       		.uleb128 0xb
 11628 0067 13       		.uleb128 0x13
 11629 0068 01       		.byte	0x1
 11630 0069 03       		.uleb128 0x3
 11631 006a 0E       		.uleb128 0xe
 11632 006b 0B       		.uleb128 0xb
 11633 006c 0B       		.uleb128 0xb
 11634 006d 3A       		.uleb128 0x3a
 11635 006e 0B       		.uleb128 0xb
 11636 006f 3B       		.uleb128 0x3b
 11637 0070 0B       		.uleb128 0xb
 11638 0071 39       		.uleb128 0x39
 11639 0072 0B       		.uleb128 0xb
 11640 0073 01       		.uleb128 0x1
 11641 0074 13       		.uleb128 0x13
 11642 0075 00       		.byte	0
 11643 0076 00       		.byte	0
ARM GAS  /tmp/ccaP1CVS.s 			page 331


 11644 0077 0C       		.uleb128 0xc
 11645 0078 0D       		.uleb128 0xd
 11646 0079 00       		.byte	0
 11647 007a 03       		.uleb128 0x3
 11648 007b 0E       		.uleb128 0xe
 11649 007c 3A       		.uleb128 0x3a
 11650 007d 0B       		.uleb128 0xb
 11651 007e 3B       		.uleb128 0x3b
 11652 007f 0B       		.uleb128 0xb
 11653 0080 39       		.uleb128 0x39
 11654 0081 0B       		.uleb128 0xb
 11655 0082 49       		.uleb128 0x49
 11656 0083 13       		.uleb128 0x13
 11657 0084 38       		.uleb128 0x38
 11658 0085 0A       		.uleb128 0xa
 11659 0086 00       		.byte	0
 11660 0087 00       		.byte	0
 11661 0088 0D       		.uleb128 0xd
 11662 0089 0D       		.uleb128 0xd
 11663 008a 00       		.byte	0
 11664 008b 03       		.uleb128 0x3
 11665 008c 0E       		.uleb128 0xe
 11666 008d 3A       		.uleb128 0x3a
 11667 008e 0B       		.uleb128 0xb
 11668 008f 3B       		.uleb128 0x3b
 11669 0090 05       		.uleb128 0x5
 11670 0091 39       		.uleb128 0x39
 11671 0092 0B       		.uleb128 0xb
 11672 0093 49       		.uleb128 0x49
 11673 0094 13       		.uleb128 0x13
 11674 0095 38       		.uleb128 0x38
 11675 0096 0A       		.uleb128 0xa
 11676 0097 00       		.byte	0
 11677 0098 00       		.byte	0
 11678 0099 0E       		.uleb128 0xe
 11679 009a 04       		.uleb128 0x4
 11680 009b 01       		.byte	0x1
 11681 009c 3E       		.uleb128 0x3e
 11682 009d 0B       		.uleb128 0xb
 11683 009e 0B       		.uleb128 0xb
 11684 009f 0B       		.uleb128 0xb
 11685 00a0 49       		.uleb128 0x49
 11686 00a1 13       		.uleb128 0x13
 11687 00a2 3A       		.uleb128 0x3a
 11688 00a3 0B       		.uleb128 0xb
 11689 00a4 3B       		.uleb128 0x3b
 11690 00a5 0B       		.uleb128 0xb
 11691 00a6 39       		.uleb128 0x39
 11692 00a7 0B       		.uleb128 0xb
 11693 00a8 01       		.uleb128 0x1
 11694 00a9 13       		.uleb128 0x13
 11695 00aa 00       		.byte	0
 11696 00ab 00       		.byte	0
 11697 00ac 0F       		.uleb128 0xf
 11698 00ad 28       		.uleb128 0x28
 11699 00ae 00       		.byte	0
 11700 00af 03       		.uleb128 0x3
ARM GAS  /tmp/ccaP1CVS.s 			page 332


 11701 00b0 0E       		.uleb128 0xe
 11702 00b1 1C       		.uleb128 0x1c
 11703 00b2 0B       		.uleb128 0xb
 11704 00b3 00       		.byte	0
 11705 00b4 00       		.byte	0
 11706 00b5 10       		.uleb128 0x10
 11707 00b6 01       		.uleb128 0x1
 11708 00b7 01       		.byte	0x1
 11709 00b8 49       		.uleb128 0x49
 11710 00b9 13       		.uleb128 0x13
 11711 00ba 01       		.uleb128 0x1
 11712 00bb 13       		.uleb128 0x13
 11713 00bc 00       		.byte	0
 11714 00bd 00       		.byte	0
 11715 00be 11       		.uleb128 0x11
 11716 00bf 21       		.uleb128 0x21
 11717 00c0 00       		.byte	0
 11718 00c1 49       		.uleb128 0x49
 11719 00c2 13       		.uleb128 0x13
 11720 00c3 2F       		.uleb128 0x2f
 11721 00c4 0B       		.uleb128 0xb
 11722 00c5 00       		.byte	0
 11723 00c6 00       		.byte	0
 11724 00c7 12       		.uleb128 0x12
 11725 00c8 16       		.uleb128 0x16
 11726 00c9 00       		.byte	0
 11727 00ca 03       		.uleb128 0x3
 11728 00cb 0E       		.uleb128 0xe
 11729 00cc 3A       		.uleb128 0x3a
 11730 00cd 0B       		.uleb128 0xb
 11731 00ce 3B       		.uleb128 0x3b
 11732 00cf 05       		.uleb128 0x5
 11733 00d0 39       		.uleb128 0x39
 11734 00d1 0B       		.uleb128 0xb
 11735 00d2 49       		.uleb128 0x49
 11736 00d3 13       		.uleb128 0x13
 11737 00d4 00       		.byte	0
 11738 00d5 00       		.byte	0
 11739 00d6 13       		.uleb128 0x13
 11740 00d7 34       		.uleb128 0x34
 11741 00d8 00       		.byte	0
 11742 00d9 03       		.uleb128 0x3
 11743 00da 0E       		.uleb128 0xe
 11744 00db 3A       		.uleb128 0x3a
 11745 00dc 0B       		.uleb128 0xb
 11746 00dd 3B       		.uleb128 0x3b
 11747 00de 05       		.uleb128 0x5
 11748 00df 39       		.uleb128 0x39
 11749 00e0 0B       		.uleb128 0xb
 11750 00e1 49       		.uleb128 0x49
 11751 00e2 13       		.uleb128 0x13
 11752 00e3 3F       		.uleb128 0x3f
 11753 00e4 0C       		.uleb128 0xc
 11754 00e5 02       		.uleb128 0x2
 11755 00e6 0A       		.uleb128 0xa
 11756 00e7 00       		.byte	0
 11757 00e8 00       		.byte	0
ARM GAS  /tmp/ccaP1CVS.s 			page 333


 11758 00e9 14       		.uleb128 0x14
 11759 00ea 34       		.uleb128 0x34
 11760 00eb 00       		.byte	0
 11761 00ec 03       		.uleb128 0x3
 11762 00ed 0E       		.uleb128 0xe
 11763 00ee 3A       		.uleb128 0x3a
 11764 00ef 0B       		.uleb128 0xb
 11765 00f0 3B       		.uleb128 0x3b
 11766 00f1 05       		.uleb128 0x5
 11767 00f2 39       		.uleb128 0x39
 11768 00f3 0B       		.uleb128 0xb
 11769 00f4 49       		.uleb128 0x49
 11770 00f5 13       		.uleb128 0x13
 11771 00f6 02       		.uleb128 0x2
 11772 00f7 0A       		.uleb128 0xa
 11773 00f8 00       		.byte	0
 11774 00f9 00       		.byte	0
 11775 00fa 15       		.uleb128 0x15
 11776 00fb 2E       		.uleb128 0x2e
 11777 00fc 01       		.byte	0x1
 11778 00fd 03       		.uleb128 0x3
 11779 00fe 0E       		.uleb128 0xe
 11780 00ff 3A       		.uleb128 0x3a
 11781 0100 0B       		.uleb128 0xb
 11782 0101 3B       		.uleb128 0x3b
 11783 0102 05       		.uleb128 0x5
 11784 0103 39       		.uleb128 0x39
 11785 0104 0B       		.uleb128 0xb
 11786 0105 27       		.uleb128 0x27
 11787 0106 0C       		.uleb128 0xc
 11788 0107 11       		.uleb128 0x11
 11789 0108 01       		.uleb128 0x1
 11790 0109 12       		.uleb128 0x12
 11791 010a 01       		.uleb128 0x1
 11792 010b 40       		.uleb128 0x40
 11793 010c 06       		.uleb128 0x6
 11794 010d 9742     		.uleb128 0x2117
 11795 010f 0C       		.uleb128 0xc
 11796 0110 01       		.uleb128 0x1
 11797 0111 13       		.uleb128 0x13
 11798 0112 00       		.byte	0
 11799 0113 00       		.byte	0
 11800 0114 16       		.uleb128 0x16
 11801 0115 05       		.uleb128 0x5
 11802 0116 00       		.byte	0
 11803 0117 03       		.uleb128 0x3
 11804 0118 0E       		.uleb128 0xe
 11805 0119 3A       		.uleb128 0x3a
 11806 011a 0B       		.uleb128 0xb
 11807 011b 3B       		.uleb128 0x3b
 11808 011c 05       		.uleb128 0x5
 11809 011d 39       		.uleb128 0x39
 11810 011e 0B       		.uleb128 0xb
 11811 011f 49       		.uleb128 0x49
 11812 0120 13       		.uleb128 0x13
 11813 0121 02       		.uleb128 0x2
 11814 0122 06       		.uleb128 0x6
ARM GAS  /tmp/ccaP1CVS.s 			page 334


 11815 0123 B742     		.uleb128 0x2137
 11816 0125 06       		.uleb128 0x6
 11817 0126 00       		.byte	0
 11818 0127 00       		.byte	0
 11819 0128 17       		.uleb128 0x17
 11820 0129 34       		.uleb128 0x34
 11821 012a 00       		.byte	0
 11822 012b 03       		.uleb128 0x3
 11823 012c 0E       		.uleb128 0xe
 11824 012d 3A       		.uleb128 0x3a
 11825 012e 0B       		.uleb128 0xb
 11826 012f 3B       		.uleb128 0x3b
 11827 0130 05       		.uleb128 0x5
 11828 0131 39       		.uleb128 0x39
 11829 0132 0B       		.uleb128 0xb
 11830 0133 49       		.uleb128 0x49
 11831 0134 13       		.uleb128 0x13
 11832 0135 02       		.uleb128 0x2
 11833 0136 06       		.uleb128 0x6
 11834 0137 B742     		.uleb128 0x2137
 11835 0139 06       		.uleb128 0x6
 11836 013a 00       		.byte	0
 11837 013b 00       		.byte	0
 11838 013c 18       		.uleb128 0x18
 11839 013d 898201   		.uleb128 0x4109
 11840 0140 00       		.byte	0
 11841 0141 11       		.uleb128 0x11
 11842 0142 01       		.uleb128 0x1
 11843 0143 31       		.uleb128 0x31
 11844 0144 13       		.uleb128 0x13
 11845 0145 00       		.byte	0
 11846 0146 00       		.byte	0
 11847 0147 19       		.uleb128 0x19
 11848 0148 898201   		.uleb128 0x4109
 11849 014b 01       		.byte	0x1
 11850 014c 11       		.uleb128 0x11
 11851 014d 01       		.uleb128 0x1
 11852 014e 9542     		.uleb128 0x2115
 11853 0150 0C       		.uleb128 0xc
 11854 0151 31       		.uleb128 0x31
 11855 0152 13       		.uleb128 0x13
 11856 0153 01       		.uleb128 0x1
 11857 0154 13       		.uleb128 0x13
 11858 0155 00       		.byte	0
 11859 0156 00       		.byte	0
 11860 0157 1A       		.uleb128 0x1a
 11861 0158 8A8201   		.uleb128 0x410a
 11862 015b 00       		.byte	0
 11863 015c 02       		.uleb128 0x2
 11864 015d 0A       		.uleb128 0xa
 11865 015e 9142     		.uleb128 0x2111
 11866 0160 0A       		.uleb128 0xa
 11867 0161 00       		.byte	0
 11868 0162 00       		.byte	0
 11869 0163 1B       		.uleb128 0x1b
 11870 0164 898201   		.uleb128 0x4109
 11871 0167 00       		.byte	0
ARM GAS  /tmp/ccaP1CVS.s 			page 335


 11872 0168 11       		.uleb128 0x11
 11873 0169 01       		.uleb128 0x1
 11874 016a 9542     		.uleb128 0x2115
 11875 016c 0C       		.uleb128 0xc
 11876 016d 31       		.uleb128 0x31
 11877 016e 13       		.uleb128 0x13
 11878 016f 00       		.byte	0
 11879 0170 00       		.byte	0
 11880 0171 1C       		.uleb128 0x1c
 11881 0172 2E       		.uleb128 0x2e
 11882 0173 01       		.byte	0x1
 11883 0174 3F       		.uleb128 0x3f
 11884 0175 0C       		.uleb128 0xc
 11885 0176 03       		.uleb128 0x3
 11886 0177 0E       		.uleb128 0xe
 11887 0178 3A       		.uleb128 0x3a
 11888 0179 0B       		.uleb128 0xb
 11889 017a 3B       		.uleb128 0x3b
 11890 017b 05       		.uleb128 0x5
 11891 017c 39       		.uleb128 0x39
 11892 017d 0B       		.uleb128 0xb
 11893 017e 27       		.uleb128 0x27
 11894 017f 0C       		.uleb128 0xc
 11895 0180 49       		.uleb128 0x49
 11896 0181 13       		.uleb128 0x13
 11897 0182 11       		.uleb128 0x11
 11898 0183 01       		.uleb128 0x1
 11899 0184 12       		.uleb128 0x12
 11900 0185 01       		.uleb128 0x1
 11901 0186 40       		.uleb128 0x40
 11902 0187 06       		.uleb128 0x6
 11903 0188 9742     		.uleb128 0x2117
 11904 018a 0C       		.uleb128 0xc
 11905 018b 01       		.uleb128 0x1
 11906 018c 13       		.uleb128 0x13
 11907 018d 00       		.byte	0
 11908 018e 00       		.byte	0
 11909 018f 1D       		.uleb128 0x1d
 11910 0190 2E       		.uleb128 0x2e
 11911 0191 01       		.byte	0x1
 11912 0192 3F       		.uleb128 0x3f
 11913 0193 0C       		.uleb128 0xc
 11914 0194 03       		.uleb128 0x3
 11915 0195 0E       		.uleb128 0xe
 11916 0196 3A       		.uleb128 0x3a
 11917 0197 0B       		.uleb128 0xb
 11918 0198 3B       		.uleb128 0x3b
 11919 0199 05       		.uleb128 0x5
 11920 019a 39       		.uleb128 0x39
 11921 019b 0B       		.uleb128 0xb
 11922 019c 27       		.uleb128 0x27
 11923 019d 0C       		.uleb128 0xc
 11924 019e 11       		.uleb128 0x11
 11925 019f 01       		.uleb128 0x1
 11926 01a0 12       		.uleb128 0x12
 11927 01a1 01       		.uleb128 0x1
 11928 01a2 40       		.uleb128 0x40
ARM GAS  /tmp/ccaP1CVS.s 			page 336


 11929 01a3 06       		.uleb128 0x6
 11930 01a4 9742     		.uleb128 0x2117
 11931 01a6 0C       		.uleb128 0xc
 11932 01a7 01       		.uleb128 0x1
 11933 01a8 13       		.uleb128 0x13
 11934 01a9 00       		.byte	0
 11935 01aa 00       		.byte	0
 11936 01ab 1E       		.uleb128 0x1e
 11937 01ac 1D       		.uleb128 0x1d
 11938 01ad 01       		.byte	0x1
 11939 01ae 31       		.uleb128 0x31
 11940 01af 13       		.uleb128 0x13
 11941 01b0 52       		.uleb128 0x52
 11942 01b1 01       		.uleb128 0x1
 11943 01b2 B842     		.uleb128 0x2138
 11944 01b4 0B       		.uleb128 0xb
 11945 01b5 55       		.uleb128 0x55
 11946 01b6 06       		.uleb128 0x6
 11947 01b7 58       		.uleb128 0x58
 11948 01b8 0B       		.uleb128 0xb
 11949 01b9 59       		.uleb128 0x59
 11950 01ba 05       		.uleb128 0x5
 11951 01bb 57       		.uleb128 0x57
 11952 01bc 0B       		.uleb128 0xb
 11953 01bd 01       		.uleb128 0x1
 11954 01be 13       		.uleb128 0x13
 11955 01bf 00       		.byte	0
 11956 01c0 00       		.byte	0
 11957 01c1 1F       		.uleb128 0x1f
 11958 01c2 0B       		.uleb128 0xb
 11959 01c3 01       		.byte	0x1
 11960 01c4 55       		.uleb128 0x55
 11961 01c5 06       		.uleb128 0x6
 11962 01c6 00       		.byte	0
 11963 01c7 00       		.byte	0
 11964 01c8 20       		.uleb128 0x20
 11965 01c9 34       		.uleb128 0x34
 11966 01ca 00       		.byte	0
 11967 01cb 31       		.uleb128 0x31
 11968 01cc 13       		.uleb128 0x13
 11969 01cd 02       		.uleb128 0x2
 11970 01ce 06       		.uleb128 0x6
 11971 01cf B742     		.uleb128 0x2137
 11972 01d1 06       		.uleb128 0x6
 11973 01d2 00       		.byte	0
 11974 01d3 00       		.byte	0
 11975 01d4 21       		.uleb128 0x21
 11976 01d5 34       		.uleb128 0x34
 11977 01d6 00       		.byte	0
 11978 01d7 31       		.uleb128 0x31
 11979 01d8 13       		.uleb128 0x13
 11980 01d9 00       		.byte	0
 11981 01da 00       		.byte	0
 11982 01db 22       		.uleb128 0x22
 11983 01dc 1D       		.uleb128 0x1d
 11984 01dd 01       		.byte	0x1
 11985 01de 31       		.uleb128 0x31
ARM GAS  /tmp/ccaP1CVS.s 			page 337


 11986 01df 13       		.uleb128 0x13
 11987 01e0 52       		.uleb128 0x52
 11988 01e1 01       		.uleb128 0x1
 11989 01e2 B842     		.uleb128 0x2138
 11990 01e4 0B       		.uleb128 0xb
 11991 01e5 11       		.uleb128 0x11
 11992 01e6 01       		.uleb128 0x1
 11993 01e7 12       		.uleb128 0x12
 11994 01e8 01       		.uleb128 0x1
 11995 01e9 58       		.uleb128 0x58
 11996 01ea 0B       		.uleb128 0xb
 11997 01eb 59       		.uleb128 0x59
 11998 01ec 05       		.uleb128 0x5
 11999 01ed 57       		.uleb128 0x57
 12000 01ee 0B       		.uleb128 0xb
 12001 01ef 01       		.uleb128 0x1
 12002 01f0 13       		.uleb128 0x13
 12003 01f1 00       		.byte	0
 12004 01f2 00       		.byte	0
 12005 01f3 23       		.uleb128 0x23
 12006 01f4 05       		.uleb128 0x5
 12007 01f5 00       		.byte	0
 12008 01f6 31       		.uleb128 0x31
 12009 01f7 13       		.uleb128 0x13
 12010 01f8 02       		.uleb128 0x2
 12011 01f9 06       		.uleb128 0x6
 12012 01fa B742     		.uleb128 0x2137
 12013 01fc 06       		.uleb128 0x6
 12014 01fd 00       		.byte	0
 12015 01fe 00       		.byte	0
 12016 01ff 24       		.uleb128 0x24
 12017 0200 898201   		.uleb128 0x4109
 12018 0203 01       		.byte	0x1
 12019 0204 11       		.uleb128 0x11
 12020 0205 01       		.uleb128 0x1
 12021 0206 31       		.uleb128 0x31
 12022 0207 13       		.uleb128 0x13
 12023 0208 01       		.uleb128 0x1
 12024 0209 13       		.uleb128 0x13
 12025 020a 00       		.byte	0
 12026 020b 00       		.byte	0
 12027 020c 25       		.uleb128 0x25
 12028 020d 898201   		.uleb128 0x4109
 12029 0210 01       		.byte	0x1
 12030 0211 11       		.uleb128 0x11
 12031 0212 01       		.uleb128 0x1
 12032 0213 31       		.uleb128 0x31
 12033 0214 13       		.uleb128 0x13
 12034 0215 00       		.byte	0
 12035 0216 00       		.byte	0
 12036 0217 26       		.uleb128 0x26
 12037 0218 2E       		.uleb128 0x2e
 12038 0219 00       		.byte	0
 12039 021a 3F       		.uleb128 0x3f
 12040 021b 0C       		.uleb128 0xc
 12041 021c 03       		.uleb128 0x3
 12042 021d 0E       		.uleb128 0xe
ARM GAS  /tmp/ccaP1CVS.s 			page 338


 12043 021e 3A       		.uleb128 0x3a
 12044 021f 0B       		.uleb128 0xb
 12045 0220 3B       		.uleb128 0x3b
 12046 0221 05       		.uleb128 0x5
 12047 0222 39       		.uleb128 0x39
 12048 0223 0B       		.uleb128 0xb
 12049 0224 27       		.uleb128 0x27
 12050 0225 0C       		.uleb128 0xc
 12051 0226 49       		.uleb128 0x49
 12052 0227 13       		.uleb128 0x13
 12053 0228 11       		.uleb128 0x11
 12054 0229 01       		.uleb128 0x1
 12055 022a 12       		.uleb128 0x12
 12056 022b 01       		.uleb128 0x1
 12057 022c 40       		.uleb128 0x40
 12058 022d 0A       		.uleb128 0xa
 12059 022e 9742     		.uleb128 0x2117
 12060 0230 0C       		.uleb128 0xc
 12061 0231 00       		.byte	0
 12062 0232 00       		.byte	0
 12063 0233 27       		.uleb128 0x27
 12064 0234 2E       		.uleb128 0x2e
 12065 0235 01       		.byte	0x1
 12066 0236 3F       		.uleb128 0x3f
 12067 0237 0C       		.uleb128 0xc
 12068 0238 03       		.uleb128 0x3
 12069 0239 0E       		.uleb128 0xe
 12070 023a 3A       		.uleb128 0x3a
 12071 023b 0B       		.uleb128 0xb
 12072 023c 3B       		.uleb128 0x3b
 12073 023d 05       		.uleb128 0x5
 12074 023e 39       		.uleb128 0x39
 12075 023f 0B       		.uleb128 0xb
 12076 0240 27       		.uleb128 0x27
 12077 0241 0C       		.uleb128 0xc
 12078 0242 49       		.uleb128 0x49
 12079 0243 13       		.uleb128 0x13
 12080 0244 11       		.uleb128 0x11
 12081 0245 01       		.uleb128 0x1
 12082 0246 12       		.uleb128 0x12
 12083 0247 01       		.uleb128 0x1
 12084 0248 40       		.uleb128 0x40
 12085 0249 0A       		.uleb128 0xa
 12086 024a 9742     		.uleb128 0x2117
 12087 024c 0C       		.uleb128 0xc
 12088 024d 01       		.uleb128 0x1
 12089 024e 13       		.uleb128 0x13
 12090 024f 00       		.byte	0
 12091 0250 00       		.byte	0
 12092 0251 28       		.uleb128 0x28
 12093 0252 34       		.uleb128 0x34
 12094 0253 00       		.byte	0
 12095 0254 03       		.uleb128 0x3
 12096 0255 0E       		.uleb128 0xe
 12097 0256 3A       		.uleb128 0x3a
 12098 0257 0B       		.uleb128 0xb
 12099 0258 3B       		.uleb128 0x3b
ARM GAS  /tmp/ccaP1CVS.s 			page 339


 12100 0259 05       		.uleb128 0x5
 12101 025a 39       		.uleb128 0x39
 12102 025b 0B       		.uleb128 0xb
 12103 025c 49       		.uleb128 0x49
 12104 025d 13       		.uleb128 0x13
 12105 025e 1C       		.uleb128 0x1c
 12106 025f 0B       		.uleb128 0xb
 12107 0260 00       		.byte	0
 12108 0261 00       		.byte	0
 12109 0262 29       		.uleb128 0x29
 12110 0263 898201   		.uleb128 0x4109
 12111 0266 01       		.byte	0x1
 12112 0267 11       		.uleb128 0x11
 12113 0268 01       		.uleb128 0x1
 12114 0269 9542     		.uleb128 0x2115
 12115 026b 0C       		.uleb128 0xc
 12116 026c 31       		.uleb128 0x31
 12117 026d 13       		.uleb128 0x13
 12118 026e 00       		.byte	0
 12119 026f 00       		.byte	0
 12120 0270 2A       		.uleb128 0x2a
 12121 0271 2E       		.uleb128 0x2e
 12122 0272 01       		.byte	0x1
 12123 0273 03       		.uleb128 0x3
 12124 0274 0E       		.uleb128 0xe
 12125 0275 3A       		.uleb128 0x3a
 12126 0276 0B       		.uleb128 0xb
 12127 0277 3B       		.uleb128 0x3b
 12128 0278 05       		.uleb128 0x5
 12129 0279 39       		.uleb128 0x39
 12130 027a 0B       		.uleb128 0xb
 12131 027b 27       		.uleb128 0x27
 12132 027c 0C       		.uleb128 0xc
 12133 027d 20       		.uleb128 0x20
 12134 027e 0B       		.uleb128 0xb
 12135 027f 01       		.uleb128 0x1
 12136 0280 13       		.uleb128 0x13
 12137 0281 00       		.byte	0
 12138 0282 00       		.byte	0
 12139 0283 2B       		.uleb128 0x2b
 12140 0284 34       		.uleb128 0x34
 12141 0285 00       		.byte	0
 12142 0286 03       		.uleb128 0x3
 12143 0287 0E       		.uleb128 0xe
 12144 0288 3A       		.uleb128 0x3a
 12145 0289 0B       		.uleb128 0xb
 12146 028a 3B       		.uleb128 0x3b
 12147 028b 05       		.uleb128 0x5
 12148 028c 39       		.uleb128 0x39
 12149 028d 0B       		.uleb128 0xb
 12150 028e 49       		.uleb128 0x49
 12151 028f 13       		.uleb128 0x13
 12152 0290 00       		.byte	0
 12153 0291 00       		.byte	0
 12154 0292 2C       		.uleb128 0x2c
 12155 0293 05       		.uleb128 0x5
 12156 0294 00       		.byte	0
ARM GAS  /tmp/ccaP1CVS.s 			page 340


 12157 0295 03       		.uleb128 0x3
 12158 0296 0E       		.uleb128 0xe
 12159 0297 3A       		.uleb128 0x3a
 12160 0298 0B       		.uleb128 0xb
 12161 0299 3B       		.uleb128 0x3b
 12162 029a 05       		.uleb128 0x5
 12163 029b 39       		.uleb128 0x39
 12164 029c 0B       		.uleb128 0xb
 12165 029d 49       		.uleb128 0x49
 12166 029e 13       		.uleb128 0x13
 12167 029f 00       		.byte	0
 12168 02a0 00       		.byte	0
 12169 02a1 2D       		.uleb128 0x2d
 12170 02a2 2E       		.uleb128 0x2e
 12171 02a3 01       		.byte	0x1
 12172 02a4 03       		.uleb128 0x3
 12173 02a5 0E       		.uleb128 0xe
 12174 02a6 3A       		.uleb128 0x3a
 12175 02a7 0B       		.uleb128 0xb
 12176 02a8 3B       		.uleb128 0x3b
 12177 02a9 05       		.uleb128 0x5
 12178 02aa 39       		.uleb128 0x39
 12179 02ab 0B       		.uleb128 0xb
 12180 02ac 27       		.uleb128 0x27
 12181 02ad 0C       		.uleb128 0xc
 12182 02ae 49       		.uleb128 0x49
 12183 02af 13       		.uleb128 0x13
 12184 02b0 20       		.uleb128 0x20
 12185 02b1 0B       		.uleb128 0xb
 12186 02b2 01       		.uleb128 0x1
 12187 02b3 13       		.uleb128 0x13
 12188 02b4 00       		.byte	0
 12189 02b5 00       		.byte	0
 12190 02b6 2E       		.uleb128 0x2e
 12191 02b7 0B       		.uleb128 0xb
 12192 02b8 01       		.byte	0x1
 12193 02b9 01       		.uleb128 0x1
 12194 02ba 13       		.uleb128 0x13
 12195 02bb 00       		.byte	0
 12196 02bc 00       		.byte	0
 12197 02bd 2F       		.uleb128 0x2f
 12198 02be 0B       		.uleb128 0xb
 12199 02bf 01       		.byte	0x1
 12200 02c0 00       		.byte	0
 12201 02c1 00       		.byte	0
 12202 02c2 30       		.uleb128 0x30
 12203 02c3 1D       		.uleb128 0x1d
 12204 02c4 01       		.byte	0x1
 12205 02c5 31       		.uleb128 0x31
 12206 02c6 13       		.uleb128 0x13
 12207 02c7 55       		.uleb128 0x55
 12208 02c8 06       		.uleb128 0x6
 12209 02c9 58       		.uleb128 0x58
 12210 02ca 0B       		.uleb128 0xb
 12211 02cb 59       		.uleb128 0x59
 12212 02cc 05       		.uleb128 0x5
 12213 02cd 57       		.uleb128 0x57
ARM GAS  /tmp/ccaP1CVS.s 			page 341


 12214 02ce 0B       		.uleb128 0xb
 12215 02cf 00       		.byte	0
 12216 02d0 00       		.byte	0
 12217 02d1 31       		.uleb128 0x31
 12218 02d2 0B       		.uleb128 0xb
 12219 02d3 01       		.byte	0x1
 12220 02d4 31       		.uleb128 0x31
 12221 02d5 13       		.uleb128 0x13
 12222 02d6 55       		.uleb128 0x55
 12223 02d7 06       		.uleb128 0x6
 12224 02d8 00       		.byte	0
 12225 02d9 00       		.byte	0
 12226 02da 32       		.uleb128 0x32
 12227 02db 2E       		.uleb128 0x2e
 12228 02dc 01       		.byte	0x1
 12229 02dd 3F       		.uleb128 0x3f
 12230 02de 0C       		.uleb128 0xc
 12231 02df 03       		.uleb128 0x3
 12232 02e0 0E       		.uleb128 0xe
 12233 02e1 3A       		.uleb128 0x3a
 12234 02e2 0B       		.uleb128 0xb
 12235 02e3 3B       		.uleb128 0x3b
 12236 02e4 05       		.uleb128 0x5
 12237 02e5 39       		.uleb128 0x39
 12238 02e6 0B       		.uleb128 0xb
 12239 02e7 27       		.uleb128 0x27
 12240 02e8 0C       		.uleb128 0xc
 12241 02e9 11       		.uleb128 0x11
 12242 02ea 01       		.uleb128 0x1
 12243 02eb 12       		.uleb128 0x12
 12244 02ec 01       		.uleb128 0x1
 12245 02ed 40       		.uleb128 0x40
 12246 02ee 0A       		.uleb128 0xa
 12247 02ef 9742     		.uleb128 0x2117
 12248 02f1 0C       		.uleb128 0xc
 12249 02f2 01       		.uleb128 0x1
 12250 02f3 13       		.uleb128 0x13
 12251 02f4 00       		.byte	0
 12252 02f5 00       		.byte	0
 12253 02f6 33       		.uleb128 0x33
 12254 02f7 05       		.uleb128 0x5
 12255 02f8 00       		.byte	0
 12256 02f9 03       		.uleb128 0x3
 12257 02fa 0E       		.uleb128 0xe
 12258 02fb 3A       		.uleb128 0x3a
 12259 02fc 0B       		.uleb128 0xb
 12260 02fd 3B       		.uleb128 0x3b
 12261 02fe 05       		.uleb128 0x5
 12262 02ff 39       		.uleb128 0x39
 12263 0300 0B       		.uleb128 0xb
 12264 0301 49       		.uleb128 0x49
 12265 0302 13       		.uleb128 0x13
 12266 0303 02       		.uleb128 0x2
 12267 0304 0A       		.uleb128 0xa
 12268 0305 00       		.byte	0
 12269 0306 00       		.byte	0
 12270 0307 34       		.uleb128 0x34
ARM GAS  /tmp/ccaP1CVS.s 			page 342


 12271 0308 2E       		.uleb128 0x2e
 12272 0309 00       		.byte	0
 12273 030a 3F       		.uleb128 0x3f
 12274 030b 0C       		.uleb128 0xc
 12275 030c 03       		.uleb128 0x3
 12276 030d 0E       		.uleb128 0xe
 12277 030e 3A       		.uleb128 0x3a
 12278 030f 0B       		.uleb128 0xb
 12279 0310 3B       		.uleb128 0x3b
 12280 0311 05       		.uleb128 0x5
 12281 0312 39       		.uleb128 0x39
 12282 0313 0B       		.uleb128 0xb
 12283 0314 27       		.uleb128 0x27
 12284 0315 0C       		.uleb128 0xc
 12285 0316 11       		.uleb128 0x11
 12286 0317 01       		.uleb128 0x1
 12287 0318 12       		.uleb128 0x12
 12288 0319 01       		.uleb128 0x1
 12289 031a 40       		.uleb128 0x40
 12290 031b 0A       		.uleb128 0xa
 12291 031c 9742     		.uleb128 0x2117
 12292 031e 0C       		.uleb128 0xc
 12293 031f 00       		.byte	0
 12294 0320 00       		.byte	0
 12295 0321 35       		.uleb128 0x35
 12296 0322 0B       		.uleb128 0xb
 12297 0323 01       		.byte	0x1
 12298 0324 55       		.uleb128 0x55
 12299 0325 06       		.uleb128 0x6
 12300 0326 01       		.uleb128 0x1
 12301 0327 13       		.uleb128 0x13
 12302 0328 00       		.byte	0
 12303 0329 00       		.byte	0
 12304 032a 36       		.uleb128 0x36
 12305 032b 2E       		.uleb128 0x2e
 12306 032c 01       		.byte	0x1
 12307 032d 3F       		.uleb128 0x3f
 12308 032e 0C       		.uleb128 0xc
 12309 032f 03       		.uleb128 0x3
 12310 0330 0E       		.uleb128 0xe
 12311 0331 3A       		.uleb128 0x3a
 12312 0332 0B       		.uleb128 0xb
 12313 0333 3B       		.uleb128 0x3b
 12314 0334 05       		.uleb128 0x5
 12315 0335 39       		.uleb128 0x39
 12316 0336 0B       		.uleb128 0xb
 12317 0337 27       		.uleb128 0x27
 12318 0338 0C       		.uleb128 0xc
 12319 0339 20       		.uleb128 0x20
 12320 033a 0B       		.uleb128 0xb
 12321 033b 01       		.uleb128 0x1
 12322 033c 13       		.uleb128 0x13
 12323 033d 00       		.byte	0
 12324 033e 00       		.byte	0
 12325 033f 37       		.uleb128 0x37
 12326 0340 0B       		.uleb128 0xb
 12327 0341 01       		.byte	0x1
ARM GAS  /tmp/ccaP1CVS.s 			page 343


 12328 0342 11       		.uleb128 0x11
 12329 0343 01       		.uleb128 0x1
 12330 0344 12       		.uleb128 0x12
 12331 0345 01       		.uleb128 0x1
 12332 0346 01       		.uleb128 0x1
 12333 0347 13       		.uleb128 0x13
 12334 0348 00       		.byte	0
 12335 0349 00       		.byte	0
 12336 034a 38       		.uleb128 0x38
 12337 034b 2E       		.uleb128 0x2e
 12338 034c 01       		.byte	0x1
 12339 034d 3F       		.uleb128 0x3f
 12340 034e 0C       		.uleb128 0xc
 12341 034f 03       		.uleb128 0x3
 12342 0350 0E       		.uleb128 0xe
 12343 0351 3A       		.uleb128 0x3a
 12344 0352 0B       		.uleb128 0xb
 12345 0353 3B       		.uleb128 0x3b
 12346 0354 05       		.uleb128 0x5
 12347 0355 39       		.uleb128 0x39
 12348 0356 0B       		.uleb128 0xb
 12349 0357 27       		.uleb128 0x27
 12350 0358 0C       		.uleb128 0xc
 12351 0359 49       		.uleb128 0x49
 12352 035a 13       		.uleb128 0x13
 12353 035b 01       		.uleb128 0x1
 12354 035c 13       		.uleb128 0x13
 12355 035d 00       		.byte	0
 12356 035e 00       		.byte	0
 12357 035f 39       		.uleb128 0x39
 12358 0360 2E       		.uleb128 0x2e
 12359 0361 01       		.byte	0x1
 12360 0362 3F       		.uleb128 0x3f
 12361 0363 0C       		.uleb128 0xc
 12362 0364 03       		.uleb128 0x3
 12363 0365 0E       		.uleb128 0xe
 12364 0366 3A       		.uleb128 0x3a
 12365 0367 0B       		.uleb128 0xb
 12366 0368 3B       		.uleb128 0x3b
 12367 0369 05       		.uleb128 0x5
 12368 036a 39       		.uleb128 0x39
 12369 036b 0B       		.uleb128 0xb
 12370 036c 27       		.uleb128 0x27
 12371 036d 0C       		.uleb128 0xc
 12372 036e 49       		.uleb128 0x49
 12373 036f 13       		.uleb128 0x13
 12374 0370 20       		.uleb128 0x20
 12375 0371 0B       		.uleb128 0xb
 12376 0372 01       		.uleb128 0x1
 12377 0373 13       		.uleb128 0x13
 12378 0374 00       		.byte	0
 12379 0375 00       		.byte	0
 12380 0376 3A       		.uleb128 0x3a
 12381 0377 1D       		.uleb128 0x1d
 12382 0378 01       		.byte	0x1
 12383 0379 31       		.uleb128 0x31
 12384 037a 13       		.uleb128 0x13
ARM GAS  /tmp/ccaP1CVS.s 			page 344


 12385 037b 52       		.uleb128 0x52
 12386 037c 01       		.uleb128 0x1
 12387 037d B842     		.uleb128 0x2138
 12388 037f 0B       		.uleb128 0xb
 12389 0380 11       		.uleb128 0x11
 12390 0381 01       		.uleb128 0x1
 12391 0382 12       		.uleb128 0x12
 12392 0383 01       		.uleb128 0x1
 12393 0384 58       		.uleb128 0x58
 12394 0385 0B       		.uleb128 0xb
 12395 0386 59       		.uleb128 0x59
 12396 0387 05       		.uleb128 0x5
 12397 0388 57       		.uleb128 0x57
 12398 0389 0B       		.uleb128 0xb
 12399 038a 00       		.byte	0
 12400 038b 00       		.byte	0
 12401 038c 3B       		.uleb128 0x3b
 12402 038d 34       		.uleb128 0x34
 12403 038e 00       		.byte	0
 12404 038f 03       		.uleb128 0x3
 12405 0390 08       		.uleb128 0x8
 12406 0391 3A       		.uleb128 0x3a
 12407 0392 0B       		.uleb128 0xb
 12408 0393 3B       		.uleb128 0x3b
 12409 0394 05       		.uleb128 0x5
 12410 0395 39       		.uleb128 0x39
 12411 0396 0B       		.uleb128 0xb
 12412 0397 49       		.uleb128 0x49
 12413 0398 13       		.uleb128 0x13
 12414 0399 00       		.byte	0
 12415 039a 00       		.byte	0
 12416 039b 3C       		.uleb128 0x3c
 12417 039c 05       		.uleb128 0x5
 12418 039d 00       		.byte	0
 12419 039e 31       		.uleb128 0x31
 12420 039f 13       		.uleb128 0x13
 12421 03a0 00       		.byte	0
 12422 03a1 00       		.byte	0
 12423 03a2 3D       		.uleb128 0x3d
 12424 03a3 1D       		.uleb128 0x1d
 12425 03a4 01       		.byte	0x1
 12426 03a5 31       		.uleb128 0x31
 12427 03a6 13       		.uleb128 0x13
 12428 03a7 52       		.uleb128 0x52
 12429 03a8 01       		.uleb128 0x1
 12430 03a9 B842     		.uleb128 0x2138
 12431 03ab 0B       		.uleb128 0xb
 12432 03ac 55       		.uleb128 0x55
 12433 03ad 06       		.uleb128 0x6
 12434 03ae 58       		.uleb128 0x58
 12435 03af 0B       		.uleb128 0xb
 12436 03b0 59       		.uleb128 0x59
 12437 03b1 05       		.uleb128 0x5
 12438 03b2 57       		.uleb128 0x57
 12439 03b3 0B       		.uleb128 0xb
 12440 03b4 00       		.byte	0
 12441 03b5 00       		.byte	0
ARM GAS  /tmp/ccaP1CVS.s 			page 345


 12442 03b6 3E       		.uleb128 0x3e
 12443 03b7 1D       		.uleb128 0x1d
 12444 03b8 01       		.byte	0x1
 12445 03b9 31       		.uleb128 0x31
 12446 03ba 13       		.uleb128 0x13
 12447 03bb 11       		.uleb128 0x11
 12448 03bc 01       		.uleb128 0x1
 12449 03bd 12       		.uleb128 0x12
 12450 03be 01       		.uleb128 0x1
 12451 03bf 58       		.uleb128 0x58
 12452 03c0 0B       		.uleb128 0xb
 12453 03c1 59       		.uleb128 0x59
 12454 03c2 05       		.uleb128 0x5
 12455 03c3 57       		.uleb128 0x57
 12456 03c4 0B       		.uleb128 0xb
 12457 03c5 01       		.uleb128 0x1
 12458 03c6 13       		.uleb128 0x13
 12459 03c7 00       		.byte	0
 12460 03c8 00       		.byte	0
 12461 03c9 3F       		.uleb128 0x3f
 12462 03ca 2E       		.uleb128 0x2e
 12463 03cb 01       		.byte	0x1
 12464 03cc 03       		.uleb128 0x3
 12465 03cd 0E       		.uleb128 0xe
 12466 03ce 3A       		.uleb128 0x3a
 12467 03cf 0B       		.uleb128 0xb
 12468 03d0 3B       		.uleb128 0x3b
 12469 03d1 0B       		.uleb128 0xb
 12470 03d2 39       		.uleb128 0x39
 12471 03d3 0B       		.uleb128 0xb
 12472 03d4 27       		.uleb128 0x27
 12473 03d5 0C       		.uleb128 0xc
 12474 03d6 20       		.uleb128 0x20
 12475 03d7 0B       		.uleb128 0xb
 12476 03d8 01       		.uleb128 0x1
 12477 03d9 13       		.uleb128 0x13
 12478 03da 00       		.byte	0
 12479 03db 00       		.byte	0
 12480 03dc 40       		.uleb128 0x40
 12481 03dd 05       		.uleb128 0x5
 12482 03de 00       		.byte	0
 12483 03df 03       		.uleb128 0x3
 12484 03e0 0E       		.uleb128 0xe
 12485 03e1 3A       		.uleb128 0x3a
 12486 03e2 0B       		.uleb128 0xb
 12487 03e3 3B       		.uleb128 0x3b
 12488 03e4 0B       		.uleb128 0xb
 12489 03e5 39       		.uleb128 0x39
 12490 03e6 0B       		.uleb128 0xb
 12491 03e7 49       		.uleb128 0x49
 12492 03e8 13       		.uleb128 0x13
 12493 03e9 00       		.byte	0
 12494 03ea 00       		.byte	0
 12495 03eb 41       		.uleb128 0x41
 12496 03ec 2E       		.uleb128 0x2e
 12497 03ed 01       		.byte	0x1
 12498 03ee 03       		.uleb128 0x3
ARM GAS  /tmp/ccaP1CVS.s 			page 346


 12499 03ef 0E       		.uleb128 0xe
 12500 03f0 3A       		.uleb128 0x3a
 12501 03f1 0B       		.uleb128 0xb
 12502 03f2 3B       		.uleb128 0x3b
 12503 03f3 0B       		.uleb128 0xb
 12504 03f4 39       		.uleb128 0x39
 12505 03f5 0B       		.uleb128 0xb
 12506 03f6 27       		.uleb128 0x27
 12507 03f7 0C       		.uleb128 0xc
 12508 03f8 49       		.uleb128 0x49
 12509 03f9 13       		.uleb128 0x13
 12510 03fa 20       		.uleb128 0x20
 12511 03fb 0B       		.uleb128 0xb
 12512 03fc 01       		.uleb128 0x1
 12513 03fd 13       		.uleb128 0x13
 12514 03fe 00       		.byte	0
 12515 03ff 00       		.byte	0
 12516 0400 42       		.uleb128 0x42
 12517 0401 34       		.uleb128 0x34
 12518 0402 00       		.byte	0
 12519 0403 03       		.uleb128 0x3
 12520 0404 0E       		.uleb128 0xe
 12521 0405 3A       		.uleb128 0x3a
 12522 0406 0B       		.uleb128 0xb
 12523 0407 3B       		.uleb128 0x3b
 12524 0408 0B       		.uleb128 0xb
 12525 0409 39       		.uleb128 0x39
 12526 040a 0B       		.uleb128 0xb
 12527 040b 49       		.uleb128 0x49
 12528 040c 13       		.uleb128 0x13
 12529 040d 00       		.byte	0
 12530 040e 00       		.byte	0
 12531 040f 43       		.uleb128 0x43
 12532 0410 2E       		.uleb128 0x2e
 12533 0411 01       		.byte	0x1
 12534 0412 31       		.uleb128 0x31
 12535 0413 13       		.uleb128 0x13
 12536 0414 11       		.uleb128 0x11
 12537 0415 01       		.uleb128 0x1
 12538 0416 12       		.uleb128 0x12
 12539 0417 01       		.uleb128 0x1
 12540 0418 40       		.uleb128 0x40
 12541 0419 0A       		.uleb128 0xa
 12542 041a 9742     		.uleb128 0x2117
 12543 041c 0C       		.uleb128 0xc
 12544 041d 01       		.uleb128 0x1
 12545 041e 13       		.uleb128 0x13
 12546 041f 00       		.byte	0
 12547 0420 00       		.byte	0
 12548 0421 44       		.uleb128 0x44
 12549 0422 2E       		.uleb128 0x2e
 12550 0423 01       		.byte	0x1
 12551 0424 31       		.uleb128 0x31
 12552 0425 13       		.uleb128 0x13
 12553 0426 11       		.uleb128 0x11
 12554 0427 01       		.uleb128 0x1
 12555 0428 12       		.uleb128 0x12
ARM GAS  /tmp/ccaP1CVS.s 			page 347


 12556 0429 01       		.uleb128 0x1
 12557 042a 40       		.uleb128 0x40
 12558 042b 06       		.uleb128 0x6
 12559 042c 9742     		.uleb128 0x2117
 12560 042e 0C       		.uleb128 0xc
 12561 042f 01       		.uleb128 0x1
 12562 0430 13       		.uleb128 0x13
 12563 0431 00       		.byte	0
 12564 0432 00       		.byte	0
 12565 0433 45       		.uleb128 0x45
 12566 0434 0B       		.uleb128 0xb
 12567 0435 01       		.byte	0x1
 12568 0436 31       		.uleb128 0x31
 12569 0437 13       		.uleb128 0x13
 12570 0438 11       		.uleb128 0x11
 12571 0439 01       		.uleb128 0x1
 12572 043a 12       		.uleb128 0x12
 12573 043b 01       		.uleb128 0x1
 12574 043c 00       		.byte	0
 12575 043d 00       		.byte	0
 12576 043e 46       		.uleb128 0x46
 12577 043f 34       		.uleb128 0x34
 12578 0440 00       		.byte	0
 12579 0441 31       		.uleb128 0x31
 12580 0442 13       		.uleb128 0x13
 12581 0443 1C       		.uleb128 0x1c
 12582 0444 0B       		.uleb128 0xb
 12583 0445 00       		.byte	0
 12584 0446 00       		.byte	0
 12585 0447 47       		.uleb128 0x47
 12586 0448 0B       		.uleb128 0xb
 12587 0449 01       		.byte	0x1
 12588 044a 31       		.uleb128 0x31
 12589 044b 13       		.uleb128 0x13
 12590 044c 55       		.uleb128 0x55
 12591 044d 06       		.uleb128 0x6
 12592 044e 01       		.uleb128 0x1
 12593 044f 13       		.uleb128 0x13
 12594 0450 00       		.byte	0
 12595 0451 00       		.byte	0
 12596 0452 48       		.uleb128 0x48
 12597 0453 2E       		.uleb128 0x2e
 12598 0454 00       		.byte	0
 12599 0455 3F       		.uleb128 0x3f
 12600 0456 0C       		.uleb128 0xc
 12601 0457 3C       		.uleb128 0x3c
 12602 0458 0C       		.uleb128 0xc
 12603 0459 8740     		.uleb128 0x2007
 12604 045b 0E       		.uleb128 0xe
 12605 045c 03       		.uleb128 0x3
 12606 045d 0E       		.uleb128 0xe
 12607 045e 3A       		.uleb128 0x3a
 12608 045f 0B       		.uleb128 0xb
 12609 0460 3B       		.uleb128 0x3b
 12610 0461 05       		.uleb128 0x5
 12611 0462 39       		.uleb128 0x39
 12612 0463 0B       		.uleb128 0xb
ARM GAS  /tmp/ccaP1CVS.s 			page 348


 12613 0464 00       		.byte	0
 12614 0465 00       		.byte	0
 12615 0466 49       		.uleb128 0x49
 12616 0467 2E       		.uleb128 0x2e
 12617 0468 00       		.byte	0
 12618 0469 3F       		.uleb128 0x3f
 12619 046a 0C       		.uleb128 0xc
 12620 046b 3C       		.uleb128 0x3c
 12621 046c 0C       		.uleb128 0xc
 12622 046d 8740     		.uleb128 0x2007
 12623 046f 0E       		.uleb128 0xe
 12624 0470 03       		.uleb128 0x3
 12625 0471 0E       		.uleb128 0xe
 12626 0472 3A       		.uleb128 0x3a
 12627 0473 0B       		.uleb128 0xb
 12628 0474 3B       		.uleb128 0x3b
 12629 0475 0B       		.uleb128 0xb
 12630 0476 39       		.uleb128 0x39
 12631 0477 0B       		.uleb128 0xb
 12632 0478 00       		.byte	0
 12633 0479 00       		.byte	0
 12634 047a 00       		.byte	0
 12635              		.section	.debug_loc,"",%progbits
 12636              	.Ldebug_loc0:
 12637              	.LLST0:
 12638 0000 00000000 		.4byte	.LFB62-.Ltext0
 12639 0004 02000000 		.4byte	.LCFI0-.Ltext0
 12640 0008 0200     		.2byte	0x2
 12641 000a 7D       		.byte	0x7d
 12642 000b 00       		.sleb128 0
 12643 000c 02000000 		.4byte	.LCFI0-.Ltext0
 12644 0010 34000000 		.4byte	.LCFI1-.Ltext0
 12645 0014 0200     		.2byte	0x2
 12646 0016 7D       		.byte	0x7d
 12647 0017 18       		.sleb128 24
 12648 0018 34000000 		.4byte	.LCFI1-.Ltext0
 12649 001c 38000000 		.4byte	.LCFI2-.Ltext0
 12650 0020 0200     		.2byte	0x2
 12651 0022 7D       		.byte	0x7d
 12652 0023 00       		.sleb128 0
 12653 0024 38000000 		.4byte	.LCFI2-.Ltext0
 12654 0028 48000000 		.4byte	.LCFI3-.Ltext0
 12655 002c 0200     		.2byte	0x2
 12656 002e 7D       		.byte	0x7d
 12657 002f 18       		.sleb128 24
 12658 0030 48000000 		.4byte	.LCFI3-.Ltext0
 12659 0034 4E000000 		.4byte	.LCFI4-.Ltext0
 12660 0038 0200     		.2byte	0x2
 12661 003a 7D       		.byte	0x7d
 12662 003b 00       		.sleb128 0
 12663 003c 4E000000 		.4byte	.LCFI4-.Ltext0
 12664 0040 6C000000 		.4byte	.LFE62-.Ltext0
 12665 0044 0200     		.2byte	0x2
 12666 0046 7D       		.byte	0x7d
 12667 0047 18       		.sleb128 24
 12668 0048 00000000 		.4byte	0
 12669 004c 00000000 		.4byte	0
ARM GAS  /tmp/ccaP1CVS.s 			page 349


 12670              	.LVUS1:
 12671 0050 00       		.uleb128 0
 12672 0051 00       		.uleb128 .LVU9
 12673 0052 00       		.uleb128 .LVU9
 12674 0053 00       		.uleb128 .LVU21
 12675 0054 00       		.uleb128 .LVU21
 12676 0055 00       		.uleb128 .LVU22
 12677 0056 00       		.uleb128 .LVU22
 12678 0057 00       		.uleb128 .LVU30
 12679 0058 00       		.uleb128 .LVU30
 12680 0059 00       		.uleb128 .LVU31
 12681 005a 00       		.uleb128 .LVU31
 12682 005b 00       		.uleb128 .LVU41
 12683 005c 00       		.uleb128 .LVU41
 12684 005d 00       		.uleb128 0
 12685              	.LLST1:
 12686 005e 00000000 		.4byte	.LVL0-.Ltext0
 12687 0062 0A000000 		.4byte	.LVL2-.Ltext0
 12688 0066 0100     		.2byte	0x1
 12689 0068 50       		.byte	0x50
 12690 0069 0A000000 		.4byte	.LVL2-.Ltext0
 12691 006d 34000000 		.4byte	.LVL4-.Ltext0
 12692 0071 0100     		.2byte	0x1
 12693 0073 56       		.byte	0x56
 12694 0074 34000000 		.4byte	.LVL4-.Ltext0
 12695 0078 38000000 		.4byte	.LVL5-.Ltext0
 12696 007c 0400     		.2byte	0x4
 12697 007e F3       		.byte	0xf3
 12698 007f 01       		.uleb128 0x1
 12699 0080 50       		.byte	0x50
 12700 0081 9F       		.byte	0x9f
 12701 0082 38000000 		.4byte	.LVL5-.Ltext0
 12702 0086 48000000 		.4byte	.LVL7-.Ltext0
 12703 008a 0100     		.2byte	0x1
 12704 008c 56       		.byte	0x56
 12705 008d 48000000 		.4byte	.LVL7-.Ltext0
 12706 0091 4E000000 		.4byte	.LVL8-.Ltext0
 12707 0095 0400     		.2byte	0x4
 12708 0097 F3       		.byte	0xf3
 12709 0098 01       		.uleb128 0x1
 12710 0099 50       		.byte	0x50
 12711 009a 9F       		.byte	0x9f
 12712 009b 4E000000 		.4byte	.LVL8-.Ltext0
 12713 009f 62000000 		.4byte	.LVL10-.Ltext0
 12714 00a3 0100     		.2byte	0x1
 12715 00a5 56       		.byte	0x56
 12716 00a6 62000000 		.4byte	.LVL10-.Ltext0
 12717 00aa 6C000000 		.4byte	.LFE62-.Ltext0
 12718 00ae 0400     		.2byte	0x4
 12719 00b0 F3       		.byte	0xf3
 12720 00b1 01       		.uleb128 0x1
 12721 00b2 50       		.byte	0x50
 12722 00b3 9F       		.byte	0x9f
 12723 00b4 00000000 		.4byte	0
 12724 00b8 00000000 		.4byte	0
 12725              	.LVUS2:
 12726 00bc 00       		.uleb128 0
ARM GAS  /tmp/ccaP1CVS.s 			page 350


 12727 00bd 00       		.uleb128 .LVU11
 12728 00be 00       		.uleb128 .LVU11
 12729 00bf 00       		.uleb128 .LVU21
 12730 00c0 00       		.uleb128 .LVU21
 12731 00c1 00       		.uleb128 .LVU22
 12732 00c2 00       		.uleb128 .LVU22
 12733 00c3 00       		.uleb128 .LVU30
 12734 00c4 00       		.uleb128 .LVU30
 12735 00c5 00       		.uleb128 .LVU31
 12736 00c6 00       		.uleb128 .LVU31
 12737 00c7 00       		.uleb128 .LVU41
 12738 00c8 00       		.uleb128 .LVU41
 12739 00c9 00       		.uleb128 0
 12740              	.LLST2:
 12741 00ca 00000000 		.4byte	.LVL0-.Ltext0
 12742 00ce 11000000 		.4byte	.LVL3-1-.Ltext0
 12743 00d2 0100     		.2byte	0x1
 12744 00d4 51       		.byte	0x51
 12745 00d5 11000000 		.4byte	.LVL3-1-.Ltext0
 12746 00d9 34000000 		.4byte	.LVL4-.Ltext0
 12747 00dd 0100     		.2byte	0x1
 12748 00df 57       		.byte	0x57
 12749 00e0 34000000 		.4byte	.LVL4-.Ltext0
 12750 00e4 38000000 		.4byte	.LVL5-.Ltext0
 12751 00e8 0400     		.2byte	0x4
 12752 00ea F3       		.byte	0xf3
 12753 00eb 01       		.uleb128 0x1
 12754 00ec 51       		.byte	0x51
 12755 00ed 9F       		.byte	0x9f
 12756 00ee 38000000 		.4byte	.LVL5-.Ltext0
 12757 00f2 48000000 		.4byte	.LVL7-.Ltext0
 12758 00f6 0100     		.2byte	0x1
 12759 00f8 57       		.byte	0x57
 12760 00f9 48000000 		.4byte	.LVL7-.Ltext0
 12761 00fd 4E000000 		.4byte	.LVL8-.Ltext0
 12762 0101 0400     		.2byte	0x4
 12763 0103 F3       		.byte	0xf3
 12764 0104 01       		.uleb128 0x1
 12765 0105 51       		.byte	0x51
 12766 0106 9F       		.byte	0x9f
 12767 0107 4E000000 		.4byte	.LVL8-.Ltext0
 12768 010b 62000000 		.4byte	.LVL10-.Ltext0
 12769 010f 0100     		.2byte	0x1
 12770 0111 57       		.byte	0x57
 12771 0112 62000000 		.4byte	.LVL10-.Ltext0
 12772 0116 6C000000 		.4byte	.LFE62-.Ltext0
 12773 011a 0400     		.2byte	0x4
 12774 011c F3       		.byte	0xf3
 12775 011d 01       		.uleb128 0x1
 12776 011e 51       		.byte	0x51
 12777 011f 9F       		.byte	0x9f
 12778 0120 00000000 		.4byte	0
 12779 0124 00000000 		.4byte	0
 12780              	.LVUS3:
 12781 0128 00       		.uleb128 .LVU24
 12782 0129 00       		.uleb128 .LVU30
 12783 012a 00       		.uleb128 .LVU31
ARM GAS  /tmp/ccaP1CVS.s 			page 351


 12784 012b 00       		.uleb128 .LVU41
 12785              	.LLST3:
 12786 012c 3C000000 		.4byte	.LVL6-.Ltext0
 12787 0130 48000000 		.4byte	.LVL7-.Ltext0
 12788 0134 0100     		.2byte	0x1
 12789 0136 55       		.byte	0x55
 12790 0137 4E000000 		.4byte	.LVL8-.Ltext0
 12791 013b 62000000 		.4byte	.LVL10-.Ltext0
 12792 013f 0100     		.2byte	0x1
 12793 0141 55       		.byte	0x55
 12794 0142 00000000 		.4byte	0
 12795 0146 00000000 		.4byte	0
 12796              	.LVUS4:
 12797 014a 00       		.uleb128 .LVU7
 12798 014b 00       		.uleb128 .LVU21
 12799 014c 00       		.uleb128 .LVU22
 12800 014d 00       		.uleb128 .LVU24
 12801              	.LLST4:
 12802 014e 08000000 		.4byte	.LVL1-.Ltext0
 12803 0152 34000000 		.4byte	.LVL4-.Ltext0
 12804 0156 0100     		.2byte	0x1
 12805 0158 55       		.byte	0x55
 12806 0159 38000000 		.4byte	.LVL5-.Ltext0
 12807 015d 3C000000 		.4byte	.LVL6-.Ltext0
 12808 0161 0100     		.2byte	0x1
 12809 0163 55       		.byte	0x55
 12810 0164 00000000 		.4byte	0
 12811 0168 00000000 		.4byte	0
 12812              	.LLST218:
 12813 016c 0C110000 		.4byte	.LFB61-.Ltext0
 12814 0170 0E110000 		.4byte	.LCFI53-.Ltext0
 12815 0174 0200     		.2byte	0x2
 12816 0176 7D       		.byte	0x7d
 12817 0177 00       		.sleb128 0
 12818 0178 0E110000 		.4byte	.LCFI53-.Ltext0
 12819 017c 38110000 		.4byte	.LFE61-.Ltext0
 12820 0180 0200     		.2byte	0x2
 12821 0182 7D       		.byte	0x7d
 12822 0183 08       		.sleb128 8
 12823 0184 00000000 		.4byte	0
 12824 0188 00000000 		.4byte	0
 12825              	.LVUS219:
 12826 018c 00       		.uleb128 0
 12827 018d 00       		.uleb128 .LVU1745
 12828              	.LLST219:
 12829 018e 0C110000 		.4byte	.LVL395-.Ltext0
 12830 0192 16110000 		.4byte	.LVL396-.Ltext0
 12831 0196 0100     		.2byte	0x1
 12832 0198 50       		.byte	0x50
 12833 0199 00000000 		.4byte	0
 12834 019d 00000000 		.4byte	0
 12835              	.LVUS220:
 12836 01a1 00       		.uleb128 .LVU1745
 12837 01a2 00       		.uleb128 .LVU1753
 12838              	.LLST220:
 12839 01a3 16110000 		.4byte	.LVL396-.Ltext0
 12840 01a7 2A110000 		.4byte	.LVL399-.Ltext0
ARM GAS  /tmp/ccaP1CVS.s 			page 352


 12841 01ab 0100     		.2byte	0x1
 12842 01ad 54       		.byte	0x54
 12843 01ae 00000000 		.4byte	0
 12844 01b2 00000000 		.4byte	0
 12845              	.LVUS221:
 12846 01b6 01       		.uleb128 .LVU1752
 12847 01b7 00       		.uleb128 .LVU1754
 12848 01b8 00       		.uleb128 .LVU1754
 12849 01b9 00       		.uleb128 .LVU1757
 12850 01ba 00       		.uleb128 .LVU1757
 12851 01bb 00       		.uleb128 0
 12852              	.LLST221:
 12853 01bc 28110000 		.4byte	.LVL398-.Ltext0
 12854 01c0 2C110000 		.4byte	.LVL400-.Ltext0
 12855 01c4 0200     		.2byte	0x2
 12856 01c6 31       		.byte	0x31
 12857 01c7 9F       		.byte	0x9f
 12858 01c8 2C110000 		.4byte	.LVL400-.Ltext0
 12859 01cc 34110000 		.4byte	.LVL402-.Ltext0
 12860 01d0 0100     		.2byte	0x1
 12861 01d2 54       		.byte	0x54
 12862 01d3 34110000 		.4byte	.LVL402-.Ltext0
 12863 01d7 38110000 		.4byte	.LFE61-.Ltext0
 12864 01db 0100     		.2byte	0x1
 12865 01dd 50       		.byte	0x50
 12866 01de 00000000 		.4byte	0
 12867 01e2 00000000 		.4byte	0
 12868              	.LLST210:
 12869 01e6 80100000 		.4byte	.LFB60-.Ltext0
 12870 01ea 84100000 		.4byte	.LCFI52-.Ltext0
 12871 01ee 0200     		.2byte	0x2
 12872 01f0 7D       		.byte	0x7d
 12873 01f1 00       		.sleb128 0
 12874 01f2 84100000 		.4byte	.LCFI52-.Ltext0
 12875 01f6 0C110000 		.4byte	.LFE60-.Ltext0
 12876 01fa 0200     		.2byte	0x2
 12877 01fc 7D       		.byte	0x7d
 12878 01fd 20       		.sleb128 32
 12879 01fe 00000000 		.4byte	0
 12880 0202 00000000 		.4byte	0
 12881              	.LVUS211:
 12882 0206 00       		.uleb128 0
 12883 0207 00       		.uleb128 .LVU1714
 12884 0208 00       		.uleb128 .LVU1714
 12885 0209 00       		.uleb128 .LVU1735
 12886 020a 00       		.uleb128 .LVU1735
 12887 020b 00       		.uleb128 .LVU1737
 12888 020c 00       		.uleb128 .LVU1737
 12889 020d 00       		.uleb128 0
 12890              	.LLST211:
 12891 020e 80100000 		.4byte	.LVL383-.Ltext0
 12892 0212 C2100000 		.4byte	.LVL386-.Ltext0
 12893 0216 0100     		.2byte	0x1
 12894 0218 50       		.byte	0x50
 12895 0219 C2100000 		.4byte	.LVL386-.Ltext0
 12896 021d FC100000 		.4byte	.LVL392-.Ltext0
 12897 0221 0100     		.2byte	0x1
ARM GAS  /tmp/ccaP1CVS.s 			page 353


 12898 0223 54       		.byte	0x54
 12899 0224 FC100000 		.4byte	.LVL392-.Ltext0
 12900 0228 04110000 		.4byte	.LVL394-.Ltext0
 12901 022c 0100     		.2byte	0x1
 12902 022e 50       		.byte	0x50
 12903 022f 04110000 		.4byte	.LVL394-.Ltext0
 12904 0233 0C110000 		.4byte	.LFE60-.Ltext0
 12905 0237 0100     		.2byte	0x1
 12906 0239 54       		.byte	0x54
 12907 023a 00000000 		.4byte	0
 12908 023e 00000000 		.4byte	0
 12909              	.LVUS212:
 12910 0242 00       		.uleb128 0
 12911 0243 00       		.uleb128 .LVU1715
 12912 0244 00       		.uleb128 .LVU1715
 12913 0245 00       		.uleb128 .LVU1735
 12914 0246 00       		.uleb128 .LVU1735
 12915 0247 00       		.uleb128 .LVU1736
 12916 0248 00       		.uleb128 .LVU1736
 12917 0249 00       		.uleb128 0
 12918              	.LLST212:
 12919 024a 80100000 		.4byte	.LVL383-.Ltext0
 12920 024e C5100000 		.4byte	.LVL387-1-.Ltext0
 12921 0252 0100     		.2byte	0x1
 12922 0254 51       		.byte	0x51
 12923 0255 C5100000 		.4byte	.LVL387-1-.Ltext0
 12924 0259 FC100000 		.4byte	.LVL392-.Ltext0
 12925 025d 0100     		.2byte	0x1
 12926 025f 57       		.byte	0x57
 12927 0260 FC100000 		.4byte	.LVL392-.Ltext0
 12928 0264 00110000 		.4byte	.LVL393-.Ltext0
 12929 0268 0100     		.2byte	0x1
 12930 026a 51       		.byte	0x51
 12931 026b 00110000 		.4byte	.LVL393-.Ltext0
 12932 026f 0C110000 		.4byte	.LFE60-.Ltext0
 12933 0273 0100     		.2byte	0x1
 12934 0275 57       		.byte	0x57
 12935 0276 00000000 		.4byte	0
 12936 027a 00000000 		.4byte	0
 12937              	.LVUS213:
 12938 027e 07       		.uleb128 .LVU1685
 12939 027f 00       		.uleb128 .LVU1714
 12940 0280 00       		.uleb128 .LVU1714
 12941 0281 00       		.uleb128 .LVU1735
 12942 0282 00       		.uleb128 .LVU1735
 12943 0283 00       		.uleb128 .LVU1737
 12944 0284 00       		.uleb128 .LVU1737
 12945 0285 00       		.uleb128 0
 12946              	.LLST213:
 12947 0286 80100000 		.4byte	.LVL383-.Ltext0
 12948 028a C2100000 		.4byte	.LVL386-.Ltext0
 12949 028e 0100     		.2byte	0x1
 12950 0290 50       		.byte	0x50
 12951 0291 C2100000 		.4byte	.LVL386-.Ltext0
 12952 0295 FC100000 		.4byte	.LVL392-.Ltext0
 12953 0299 0100     		.2byte	0x1
 12954 029b 54       		.byte	0x54
ARM GAS  /tmp/ccaP1CVS.s 			page 354


 12955 029c FC100000 		.4byte	.LVL392-.Ltext0
 12956 02a0 04110000 		.4byte	.LVL394-.Ltext0
 12957 02a4 0100     		.2byte	0x1
 12958 02a6 50       		.byte	0x50
 12959 02a7 04110000 		.4byte	.LVL394-.Ltext0
 12960 02ab 0C110000 		.4byte	.LFE60-.Ltext0
 12961 02af 0100     		.2byte	0x1
 12962 02b1 54       		.byte	0x54
 12963 02b2 00000000 		.4byte	0
 12964 02b6 00000000 		.4byte	0
 12965              	.LVUS214:
 12966 02ba 00       		.uleb128 .LVU1702
 12967 02bb 00       		.uleb128 .LVU1717
 12968 02bc 00       		.uleb128 .LVU1735
 12969 02bd 00       		.uleb128 0
 12970              	.LLST214:
 12971 02be B0100000 		.4byte	.LVL385-.Ltext0
 12972 02c2 D0100000 		.4byte	.LVL388-.Ltext0
 12973 02c6 0100     		.2byte	0x1
 12974 02c8 56       		.byte	0x56
 12975 02c9 FC100000 		.4byte	.LVL392-.Ltext0
 12976 02cd 0C110000 		.4byte	.LFE60-.Ltext0
 12977 02d1 0100     		.2byte	0x1
 12978 02d3 56       		.byte	0x56
 12979 02d4 00000000 		.4byte	0
 12980 02d8 00000000 		.4byte	0
 12981              	.LVUS215:
 12982 02dc 01       		.uleb128 .LVU1693
 12983 02dd 00       		.uleb128 0
 12984              	.LLST215:
 12985 02de 9C100000 		.4byte	.LVL384-.Ltext0
 12986 02e2 0C110000 		.4byte	.LFE60-.Ltext0
 12987 02e6 0100     		.2byte	0x1
 12988 02e8 58       		.byte	0x58
 12989 02e9 00000000 		.4byte	0
 12990 02ed 00000000 		.4byte	0
 12991              	.LVUS216:
 12992 02f1 00       		.uleb128 .LVU1692
 12993 02f2 01       		.uleb128 .LVU1693
 12994              	.LLST216:
 12995 02f3 9C100000 		.4byte	.LVL384-.Ltext0
 12996 02f7 9C100000 		.4byte	.LVL384-.Ltext0
 12997 02fb 0100     		.2byte	0x1
 12998 02fd 58       		.byte	0x58
 12999 02fe 00000000 		.4byte	0
 13000 0302 00000000 		.4byte	0
 13001              	.LVUS217:
 13002 0306 02       		.uleb128 .LVU1731
 13003 0307 00       		.uleb128 .LVU1733
 13004              	.LLST217:
 13005 0308 F4100000 		.4byte	.LVL390-.Ltext0
 13006 030c F8100000 		.4byte	.LVL391-.Ltext0
 13007 0310 0100     		.2byte	0x1
 13008 0312 58       		.byte	0x58
 13009 0313 00000000 		.4byte	0
 13010 0317 00000000 		.4byte	0
 13011              	.LLST198:
ARM GAS  /tmp/ccaP1CVS.s 			page 355


 13012 031b D00F0000 		.4byte	.LFB59-.Ltext0
 13013 031f D40F0000 		.4byte	.LCFI51-.Ltext0
 13014 0323 0200     		.2byte	0x2
 13015 0325 7D       		.byte	0x7d
 13016 0326 00       		.sleb128 0
 13017 0327 D40F0000 		.4byte	.LCFI51-.Ltext0
 13018 032b 80100000 		.4byte	.LFE59-.Ltext0
 13019 032f 0200     		.2byte	0x2
 13020 0331 7D       		.byte	0x7d
 13021 0332 20       		.sleb128 32
 13022 0333 00000000 		.4byte	0
 13023 0337 00000000 		.4byte	0
 13024              	.LVUS199:
 13025 033b 00       		.uleb128 0
 13026 033c 00       		.uleb128 .LVU1620
 13027 033d 00       		.uleb128 .LVU1620
 13028 033e 00       		.uleb128 0
 13029              	.LLST199:
 13030 033f D00F0000 		.4byte	.LVL365-.Ltext0
 13031 0343 EC0F0000 		.4byte	.LVL367-.Ltext0
 13032 0347 0100     		.2byte	0x1
 13033 0349 50       		.byte	0x50
 13034 034a EC0F0000 		.4byte	.LVL367-.Ltext0
 13035 034e 80100000 		.4byte	.LFE59-.Ltext0
 13036 0352 0100     		.2byte	0x1
 13037 0354 54       		.byte	0x54
 13038 0355 00000000 		.4byte	0
 13039 0359 00000000 		.4byte	0
 13040              	.LVUS200:
 13041 035d 00       		.uleb128 0
 13042 035e 00       		.uleb128 .LVU1637
 13043 035f 00       		.uleb128 .LVU1637
 13044 0360 00       		.uleb128 .LVU1639
 13045 0361 00       		.uleb128 .LVU1639
 13046 0362 01       		.uleb128 .LVU1643
 13047 0363 01       		.uleb128 .LVU1643
 13048 0364 00       		.uleb128 .LVU1654
 13049 0365 00       		.uleb128 .LVU1654
 13050 0366 00       		.uleb128 .LVU1657
 13051 0367 00       		.uleb128 .LVU1657
 13052 0368 00       		.uleb128 0
 13053              	.LLST200:
 13054 0369 D00F0000 		.4byte	.LVL365-.Ltext0
 13055 036d 10100000 		.4byte	.LVL371-.Ltext0
 13056 0371 0100     		.2byte	0x1
 13057 0373 51       		.byte	0x51
 13058 0374 10100000 		.4byte	.LVL371-.Ltext0
 13059 0378 14100000 		.4byte	.LVL372-.Ltext0
 13060 037c 0400     		.2byte	0x4
 13061 037e F3       		.byte	0xf3
 13062 037f 01       		.uleb128 0x1
 13063 0380 51       		.byte	0x51
 13064 0381 9F       		.byte	0x9f
 13065 0382 14100000 		.4byte	.LVL372-.Ltext0
 13066 0386 1A100000 		.4byte	.LVL373-.Ltext0
 13067 038a 0100     		.2byte	0x1
 13068 038c 51       		.byte	0x51
ARM GAS  /tmp/ccaP1CVS.s 			page 356


 13069 038d 1A100000 		.4byte	.LVL373-.Ltext0
 13070 0391 28100000 		.4byte	.LVL377-.Ltext0
 13071 0395 0400     		.2byte	0x4
 13072 0397 F3       		.byte	0xf3
 13073 0398 01       		.uleb128 0x1
 13074 0399 51       		.byte	0x51
 13075 039a 9F       		.byte	0x9f
 13076 039b 28100000 		.4byte	.LVL377-.Ltext0
 13077 039f 30100000 		.4byte	.LVL378-.Ltext0
 13078 03a3 0100     		.2byte	0x1
 13079 03a5 51       		.byte	0x51
 13080 03a6 30100000 		.4byte	.LVL378-.Ltext0
 13081 03aa 80100000 		.4byte	.LFE59-.Ltext0
 13082 03ae 0400     		.2byte	0x4
 13083 03b0 F3       		.byte	0xf3
 13084 03b1 01       		.uleb128 0x1
 13085 03b2 51       		.byte	0x51
 13086 03b3 9F       		.byte	0x9f
 13087 03b4 00000000 		.4byte	0
 13088 03b8 00000000 		.4byte	0
 13089              	.LVUS201:
 13090 03bc 00       		.uleb128 0
 13091 03bd 00       		.uleb128 .LVU1631
 13092 03be 00       		.uleb128 .LVU1631
 13093 03bf 00       		.uleb128 0
 13094              	.LLST201:
 13095 03c0 D00F0000 		.4byte	.LVL365-.Ltext0
 13096 03c4 FA0F0000 		.4byte	.LVL369-.Ltext0
 13097 03c8 0100     		.2byte	0x1
 13098 03ca 52       		.byte	0x52
 13099 03cb FA0F0000 		.4byte	.LVL369-.Ltext0
 13100 03cf 80100000 		.4byte	.LFE59-.Ltext0
 13101 03d3 0400     		.2byte	0x4
 13102 03d5 F3       		.byte	0xf3
 13103 03d6 01       		.uleb128 0x1
 13104 03d7 52       		.byte	0x52
 13105 03d8 9F       		.byte	0x9f
 13106 03d9 00000000 		.4byte	0
 13107 03dd 00000000 		.4byte	0
 13108              	.LVUS202:
 13109 03e1 00       		.uleb128 0
 13110 03e2 00       		.uleb128 .LVU1629
 13111 03e3 00       		.uleb128 .LVU1629
 13112 03e4 00       		.uleb128 0
 13113              	.LLST202:
 13114 03e5 D00F0000 		.4byte	.LVL365-.Ltext0
 13115 03e9 F40F0000 		.4byte	.LVL368-.Ltext0
 13116 03ed 0100     		.2byte	0x1
 13117 03ef 53       		.byte	0x53
 13118 03f0 F40F0000 		.4byte	.LVL368-.Ltext0
 13119 03f4 80100000 		.4byte	.LFE59-.Ltext0
 13120 03f8 0400     		.2byte	0x4
 13121 03fa F3       		.byte	0xf3
 13122 03fb 01       		.uleb128 0x1
 13123 03fc 53       		.byte	0x53
 13124 03fd 9F       		.byte	0x9f
 13125 03fe 00000000 		.4byte	0
ARM GAS  /tmp/ccaP1CVS.s 			page 357


 13126 0402 00000000 		.4byte	0
 13127              	.LVUS203:
 13128 0406 00       		.uleb128 0
 13129 0407 00       		.uleb128 .LVU1654
 13130 0408 00       		.uleb128 .LVU1654
 13131 0409 00       		.uleb128 0
 13132              	.LLST203:
 13133 040a D00F0000 		.4byte	.LVL365-.Ltext0
 13134 040e 28100000 		.4byte	.LVL377-.Ltext0
 13135 0412 0200     		.2byte	0x2
 13136 0414 91       		.byte	0x91
 13137 0415 00       		.sleb128 0
 13138 0416 28100000 		.4byte	.LVL377-.Ltext0
 13139 041a 80100000 		.4byte	.LFE59-.Ltext0
 13140 041e 0200     		.2byte	0x2
 13141 0420 91       		.byte	0x91
 13142 0421 00       		.sleb128 0
 13143 0422 00000000 		.4byte	0
 13144 0426 00000000 		.4byte	0
 13145              	.LVUS204:
 13146 042a 00       		.uleb128 .LVU1616
 13147 042b 00       		.uleb128 .LVU1620
 13148 042c 00       		.uleb128 .LVU1620
 13149 042d 00       		.uleb128 0
 13150              	.LLST204:
 13151 042e D80F0000 		.4byte	.LVL366-.Ltext0
 13152 0432 EC0F0000 		.4byte	.LVL367-.Ltext0
 13153 0436 0100     		.2byte	0x1
 13154 0438 50       		.byte	0x50
 13155 0439 EC0F0000 		.4byte	.LVL367-.Ltext0
 13156 043d 80100000 		.4byte	.LFE59-.Ltext0
 13157 0441 0100     		.2byte	0x1
 13158 0443 54       		.byte	0x54
 13159 0444 00000000 		.4byte	0
 13160 0448 00000000 		.4byte	0
 13161              	.LVUS205:
 13162 044c 00       		.uleb128 .LVU1632
 13163 044d 00       		.uleb128 .LVU1646
 13164 044e 00       		.uleb128 .LVU1654
 13165 044f 00       		.uleb128 .LVU1665
 13166 0450 00       		.uleb128 .LVU1677
 13167 0451 00       		.uleb128 0
 13168              	.LLST205:
 13169 0452 FC0F0000 		.4byte	.LVL370-.Ltext0
 13170 0456 1E100000 		.4byte	.LVL374-.Ltext0
 13171 045a 0100     		.2byte	0x1
 13172 045c 55       		.byte	0x55
 13173 045d 28100000 		.4byte	.LVL377-.Ltext0
 13174 0461 4C100000 		.4byte	.LVL380-.Ltext0
 13175 0465 0100     		.2byte	0x1
 13176 0467 55       		.byte	0x55
 13177 0468 72100000 		.4byte	.LVL382-.Ltext0
 13178 046c 80100000 		.4byte	.LFE59-.Ltext0
 13179 0470 0100     		.2byte	0x1
 13180 0472 55       		.byte	0x55
 13181 0473 00000000 		.4byte	0
 13182 0477 00000000 		.4byte	0
ARM GAS  /tmp/ccaP1CVS.s 			page 358


 13183              	.LVUS206:
 13184 047b 04       		.uleb128 .LVU1610
 13185 047c 00       		.uleb128 .LVU1647
 13186 047d 00       		.uleb128 .LVU1654
 13187 047e 00       		.uleb128 0
 13188              	.LLST206:
 13189 047f D00F0000 		.4byte	.LVL365-.Ltext0
 13190 0483 20100000 		.4byte	.LVL375-.Ltext0
 13191 0487 0200     		.2byte	0x2
 13192 0489 31       		.byte	0x31
 13193 048a 9F       		.byte	0x9f
 13194 048b 28100000 		.4byte	.LVL377-.Ltext0
 13195 048f 80100000 		.4byte	.LFE59-.Ltext0
 13196 0493 0200     		.2byte	0x2
 13197 0495 31       		.byte	0x31
 13198 0496 9F       		.byte	0x9f
 13199 0497 00000000 		.4byte	0
 13200 049b 00000000 		.4byte	0
 13201              	.LVUS207:
 13202 049f 01       		.uleb128 .LVU1621
 13203 04a0 00       		.uleb128 0
 13204              	.LLST207:
 13205 04a1 EC0F0000 		.4byte	.LVL367-.Ltext0
 13206 04a5 80100000 		.4byte	.LFE59-.Ltext0
 13207 04a9 0100     		.2byte	0x1
 13208 04ab 58       		.byte	0x58
 13209 04ac 00000000 		.4byte	0
 13210 04b0 00000000 		.4byte	0
 13211              	.LVUS208:
 13212 04b4 00       		.uleb128 .LVU1620
 13213 04b5 01       		.uleb128 .LVU1621
 13214              	.LLST208:
 13215 04b6 EC0F0000 		.4byte	.LVL367-.Ltext0
 13216 04ba EC0F0000 		.4byte	.LVL367-.Ltext0
 13217 04be 0100     		.2byte	0x1
 13218 04c0 58       		.byte	0x58
 13219 04c1 00000000 		.4byte	0
 13220 04c5 00000000 		.4byte	0
 13221              	.LVUS209:
 13222 04c9 02       		.uleb128 .LVU1649
 13223 04ca 00       		.uleb128 .LVU1651
 13224              	.LLST209:
 13225 04cb 20100000 		.4byte	.LVL375-.Ltext0
 13226 04cf 24100000 		.4byte	.LVL376-.Ltext0
 13227 04d3 0100     		.2byte	0x1
 13228 04d5 58       		.byte	0x58
 13229 04d6 00000000 		.4byte	0
 13230 04da 00000000 		.4byte	0
 13231              	.LLST190:
 13232 04de 340F0000 		.4byte	.LFB58-.Ltext0
 13233 04e2 360F0000 		.4byte	.LCFI50-.Ltext0
 13234 04e6 0200     		.2byte	0x2
 13235 04e8 7D       		.byte	0x7d
 13236 04e9 00       		.sleb128 0
 13237 04ea 360F0000 		.4byte	.LCFI50-.Ltext0
 13238 04ee D00F0000 		.4byte	.LFE58-.Ltext0
 13239 04f2 0200     		.2byte	0x2
ARM GAS  /tmp/ccaP1CVS.s 			page 359


 13240 04f4 7D       		.byte	0x7d
 13241 04f5 18       		.sleb128 24
 13242 04f6 00000000 		.4byte	0
 13243 04fa 00000000 		.4byte	0
 13244              	.LVUS191:
 13245 04fe 00       		.uleb128 0
 13246 04ff 00       		.uleb128 .LVU1559
 13247 0500 00       		.uleb128 .LVU1559
 13248 0501 00       		.uleb128 0
 13249              	.LLST191:
 13250 0502 340F0000 		.4byte	.LVL350-.Ltext0
 13251 0506 410F0000 		.4byte	.LVL352-1-.Ltext0
 13252 050a 0100     		.2byte	0x1
 13253 050c 50       		.byte	0x50
 13254 050d 410F0000 		.4byte	.LVL352-1-.Ltext0
 13255 0511 D00F0000 		.4byte	.LFE58-.Ltext0
 13256 0515 0100     		.2byte	0x1
 13257 0517 54       		.byte	0x54
 13258 0518 00000000 		.4byte	0
 13259 051c 00000000 		.4byte	0
 13260              	.LVUS192:
 13261 0520 00       		.uleb128 0
 13262 0521 00       		.uleb128 .LVU1559
 13263 0522 00       		.uleb128 .LVU1559
 13264 0523 00       		.uleb128 .LVU1574
 13265 0524 00       		.uleb128 .LVU1574
 13266 0525 00       		.uleb128 .LVU1576
 13267 0526 00       		.uleb128 .LVU1576
 13268 0527 01       		.uleb128 .LVU1580
 13269 0528 01       		.uleb128 .LVU1580
 13270 0529 00       		.uleb128 .LVU1588
 13271 052a 00       		.uleb128 .LVU1588
 13272 052b 00       		.uleb128 .LVU1592
 13273 052c 00       		.uleb128 .LVU1592
 13274 052d 00       		.uleb128 0
 13275              	.LLST192:
 13276 052e 340F0000 		.4byte	.LVL350-.Ltext0
 13277 0532 410F0000 		.4byte	.LVL352-1-.Ltext0
 13278 0536 0100     		.2byte	0x1
 13279 0538 51       		.byte	0x51
 13280 0539 410F0000 		.4byte	.LVL352-1-.Ltext0
 13281 053d 660F0000 		.4byte	.LVL355-.Ltext0
 13282 0541 0100     		.2byte	0x1
 13283 0543 57       		.byte	0x57
 13284 0544 660F0000 		.4byte	.LVL355-.Ltext0
 13285 0548 6A0F0000 		.4byte	.LVL356-.Ltext0
 13286 054c 0400     		.2byte	0x4
 13287 054e F3       		.byte	0xf3
 13288 054f 01       		.uleb128 0x1
 13289 0550 51       		.byte	0x51
 13290 0551 9F       		.byte	0x9f
 13291 0552 6A0F0000 		.4byte	.LVL356-.Ltext0
 13292 0556 700F0000 		.4byte	.LVL357-.Ltext0
 13293 055a 0100     		.2byte	0x1
 13294 055c 57       		.byte	0x57
 13295 055d 700F0000 		.4byte	.LVL357-.Ltext0
 13296 0561 7E0F0000 		.4byte	.LVL360-.Ltext0
ARM GAS  /tmp/ccaP1CVS.s 			page 360


 13297 0565 0400     		.2byte	0x4
 13298 0567 F3       		.byte	0xf3
 13299 0568 01       		.uleb128 0x1
 13300 0569 51       		.byte	0x51
 13301 056a 9F       		.byte	0x9f
 13302 056b 7E0F0000 		.4byte	.LVL360-.Ltext0
 13303 056f 860F0000 		.4byte	.LVL362-.Ltext0
 13304 0573 0100     		.2byte	0x1
 13305 0575 57       		.byte	0x57
 13306 0576 860F0000 		.4byte	.LVL362-.Ltext0
 13307 057a D00F0000 		.4byte	.LFE58-.Ltext0
 13308 057e 0400     		.2byte	0x4
 13309 0580 F3       		.byte	0xf3
 13310 0581 01       		.uleb128 0x1
 13311 0582 51       		.byte	0x51
 13312 0583 9F       		.byte	0x9f
 13313 0584 00000000 		.4byte	0
 13314 0588 00000000 		.4byte	0
 13315              	.LVUS193:
 13316 058c 00       		.uleb128 0
 13317 058d 00       		.uleb128 .LVU1559
 13318 058e 00       		.uleb128 .LVU1559
 13319 058f 00       		.uleb128 0
 13320              	.LLST193:
 13321 0590 340F0000 		.4byte	.LVL350-.Ltext0
 13322 0594 410F0000 		.4byte	.LVL352-1-.Ltext0
 13323 0598 0100     		.2byte	0x1
 13324 059a 52       		.byte	0x52
 13325 059b 410F0000 		.4byte	.LVL352-1-.Ltext0
 13326 059f D00F0000 		.4byte	.LFE58-.Ltext0
 13327 05a3 0400     		.2byte	0x4
 13328 05a5 F3       		.byte	0xf3
 13329 05a6 01       		.uleb128 0x1
 13330 05a7 52       		.byte	0x52
 13331 05a8 9F       		.byte	0x9f
 13332 05a9 00000000 		.4byte	0
 13333 05ad 00000000 		.4byte	0
 13334              	.LVUS194:
 13335 05b1 00       		.uleb128 0
 13336 05b2 00       		.uleb128 .LVU1559
 13337 05b3 00       		.uleb128 .LVU1559
 13338 05b4 00       		.uleb128 .LVU1567
 13339 05b5 00       		.uleb128 .LVU1567
 13340 05b6 00       		.uleb128 0
 13341              	.LLST194:
 13342 05b7 340F0000 		.4byte	.LVL350-.Ltext0
 13343 05bb 410F0000 		.4byte	.LVL352-1-.Ltext0
 13344 05bf 0100     		.2byte	0x1
 13345 05c1 53       		.byte	0x53
 13346 05c2 410F0000 		.4byte	.LVL352-1-.Ltext0
 13347 05c6 4E0F0000 		.4byte	.LVL353-.Ltext0
 13348 05ca 0100     		.2byte	0x1
 13349 05cc 55       		.byte	0x55
 13350 05cd 4E0F0000 		.4byte	.LVL353-.Ltext0
 13351 05d1 D00F0000 		.4byte	.LFE58-.Ltext0
 13352 05d5 0400     		.2byte	0x4
 13353 05d7 F3       		.byte	0xf3
ARM GAS  /tmp/ccaP1CVS.s 			page 361


 13354 05d8 01       		.uleb128 0x1
 13355 05d9 53       		.byte	0x53
 13356 05da 9F       		.byte	0x9f
 13357 05db 00000000 		.4byte	0
 13358 05df 00000000 		.4byte	0
 13359              	.LVUS195:
 13360 05e3 00       		.uleb128 .LVU1556
 13361 05e4 00       		.uleb128 .LVU1559
 13362 05e5 00       		.uleb128 .LVU1559
 13363 05e6 00       		.uleb128 0
 13364              	.LLST195:
 13365 05e7 3A0F0000 		.4byte	.LVL351-.Ltext0
 13366 05eb 410F0000 		.4byte	.LVL352-1-.Ltext0
 13367 05ef 0100     		.2byte	0x1
 13368 05f1 50       		.byte	0x50
 13369 05f2 410F0000 		.4byte	.LVL352-1-.Ltext0
 13370 05f6 D00F0000 		.4byte	.LFE58-.Ltext0
 13371 05fa 0100     		.2byte	0x1
 13372 05fc 54       		.byte	0x54
 13373 05fd 00000000 		.4byte	0
 13374 0601 00000000 		.4byte	0
 13375              	.LVUS196:
 13376 0605 03       		.uleb128 .LVU1551
 13377 0606 00       		.uleb128 .LVU1584
 13378 0607 00       		.uleb128 .LVU1588
 13379 0608 00       		.uleb128 0
 13380              	.LLST196:
 13381 0609 340F0000 		.4byte	.LVL350-.Ltext0
 13382 060d 760F0000 		.4byte	.LVL358-.Ltext0
 13383 0611 0200     		.2byte	0x2
 13384 0613 31       		.byte	0x31
 13385 0614 9F       		.byte	0x9f
 13386 0615 7E0F0000 		.4byte	.LVL360-.Ltext0
 13387 0619 D00F0000 		.4byte	.LFE58-.Ltext0
 13388 061d 0200     		.2byte	0x2
 13389 061f 31       		.byte	0x31
 13390 0620 9F       		.byte	0x9f
 13391 0621 00000000 		.4byte	0
 13392 0625 00000000 		.4byte	0
 13393              	.LVUS197:
 13394 0629 00       		.uleb128 .LVU1569
 13395 062a 00       		.uleb128 .LVU1584
 13396 062b 00       		.uleb128 .LVU1588
 13397 062c 00       		.uleb128 .LVU1591
 13398 062d 00       		.uleb128 .LVU1592
 13399 062e 00       		.uleb128 0
 13400              	.LLST197:
 13401 062f 520F0000 		.4byte	.LVL354-.Ltext0
 13402 0633 760F0000 		.4byte	.LVL358-.Ltext0
 13403 0637 0100     		.2byte	0x1
 13404 0639 55       		.byte	0x55
 13405 063a 7E0F0000 		.4byte	.LVL360-.Ltext0
 13406 063e 840F0000 		.4byte	.LVL361-.Ltext0
 13407 0642 0100     		.2byte	0x1
 13408 0644 55       		.byte	0x55
 13409 0645 860F0000 		.4byte	.LVL362-.Ltext0
 13410 0649 D00F0000 		.4byte	.LFE58-.Ltext0
ARM GAS  /tmp/ccaP1CVS.s 			page 362


 13411 064d 0100     		.2byte	0x1
 13412 064f 55       		.byte	0x55
 13413 0650 00000000 		.4byte	0
 13414 0654 00000000 		.4byte	0
 13415              	.LLST184:
 13416 0658 AC0E0000 		.4byte	.LFB57-.Ltext0
 13417 065c B00E0000 		.4byte	.LCFI49-.Ltext0
 13418 0660 0200     		.2byte	0x2
 13419 0662 7D       		.byte	0x7d
 13420 0663 00       		.sleb128 0
 13421 0664 B00E0000 		.4byte	.LCFI49-.Ltext0
 13422 0668 340F0000 		.4byte	.LFE57-.Ltext0
 13423 066c 0200     		.2byte	0x2
 13424 066e 7D       		.byte	0x7d
 13425 066f 18       		.sleb128 24
 13426 0670 00000000 		.4byte	0
 13427 0674 00000000 		.4byte	0
 13428              	.LVUS185:
 13429 0678 00       		.uleb128 0
 13430 0679 00       		.uleb128 .LVU1504
 13431 067a 00       		.uleb128 .LVU1504
 13432 067b 00       		.uleb128 .LVU1547
 13433 067c 00       		.uleb128 .LVU1547
 13434 067d 00       		.uleb128 0
 13435              	.LLST185:
 13436 067e AC0E0000 		.4byte	.LVL341-.Ltext0
 13437 0682 BD0E0000 		.4byte	.LVL342-1-.Ltext0
 13438 0686 0100     		.2byte	0x1
 13439 0688 50       		.byte	0x50
 13440 0689 BD0E0000 		.4byte	.LVL342-1-.Ltext0
 13441 068d 300F0000 		.4byte	.LVL349-.Ltext0
 13442 0691 0100     		.2byte	0x1
 13443 0693 58       		.byte	0x58
 13444 0694 300F0000 		.4byte	.LVL349-.Ltext0
 13445 0698 340F0000 		.4byte	.LFE57-.Ltext0
 13446 069c 0400     		.2byte	0x4
 13447 069e F3       		.byte	0xf3
 13448 069f 01       		.uleb128 0x1
 13449 06a0 50       		.byte	0x50
 13450 06a1 9F       		.byte	0x9f
 13451 06a2 00000000 		.4byte	0
 13452 06a6 00000000 		.4byte	0
 13453              	.LVUS186:
 13454 06aa 00       		.uleb128 0
 13455 06ab 00       		.uleb128 .LVU1504
 13456 06ac 00       		.uleb128 .LVU1504
 13457 06ad 00       		.uleb128 .LVU1547
 13458 06ae 00       		.uleb128 .LVU1547
 13459 06af 00       		.uleb128 0
 13460              	.LLST186:
 13461 06b0 AC0E0000 		.4byte	.LVL341-.Ltext0
 13462 06b4 BD0E0000 		.4byte	.LVL342-1-.Ltext0
 13463 06b8 0100     		.2byte	0x1
 13464 06ba 51       		.byte	0x51
 13465 06bb BD0E0000 		.4byte	.LVL342-1-.Ltext0
 13466 06bf 300F0000 		.4byte	.LVL349-.Ltext0
 13467 06c3 0100     		.2byte	0x1
ARM GAS  /tmp/ccaP1CVS.s 			page 363


 13468 06c5 57       		.byte	0x57
 13469 06c6 300F0000 		.4byte	.LVL349-.Ltext0
 13470 06ca 340F0000 		.4byte	.LFE57-.Ltext0
 13471 06ce 0400     		.2byte	0x4
 13472 06d0 F3       		.byte	0xf3
 13473 06d1 01       		.uleb128 0x1
 13474 06d2 51       		.byte	0x51
 13475 06d3 9F       		.byte	0x9f
 13476 06d4 00000000 		.4byte	0
 13477 06d8 00000000 		.4byte	0
 13478              	.LVUS187:
 13479 06dc 00       		.uleb128 0
 13480 06dd 00       		.uleb128 .LVU1504
 13481 06de 00       		.uleb128 .LVU1504
 13482 06df 00       		.uleb128 .LVU1536
 13483 06e0 00       		.uleb128 .LVU1536
 13484 06e1 00       		.uleb128 0
 13485              	.LLST187:
 13486 06e2 AC0E0000 		.4byte	.LVL341-.Ltext0
 13487 06e6 BD0E0000 		.4byte	.LVL342-1-.Ltext0
 13488 06ea 0100     		.2byte	0x1
 13489 06ec 52       		.byte	0x52
 13490 06ed BD0E0000 		.4byte	.LVL342-1-.Ltext0
 13491 06f1 140F0000 		.4byte	.LVL346-.Ltext0
 13492 06f5 0100     		.2byte	0x1
 13493 06f7 55       		.byte	0x55
 13494 06f8 140F0000 		.4byte	.LVL346-.Ltext0
 13495 06fc 340F0000 		.4byte	.LFE57-.Ltext0
 13496 0700 0400     		.2byte	0x4
 13497 0702 F3       		.byte	0xf3
 13498 0703 01       		.uleb128 0x1
 13499 0704 52       		.byte	0x52
 13500 0705 9F       		.byte	0x9f
 13501 0706 00000000 		.4byte	0
 13502 070a 00000000 		.4byte	0
 13503              	.LVUS188:
 13504 070e 00       		.uleb128 0
 13505 070f 00       		.uleb128 .LVU1504
 13506 0710 00       		.uleb128 .LVU1504
 13507 0711 00       		.uleb128 .LVU1547
 13508 0712 00       		.uleb128 .LVU1547
 13509 0713 00       		.uleb128 0
 13510              	.LLST188:
 13511 0714 AC0E0000 		.4byte	.LVL341-.Ltext0
 13512 0718 BD0E0000 		.4byte	.LVL342-1-.Ltext0
 13513 071c 0100     		.2byte	0x1
 13514 071e 53       		.byte	0x53
 13515 071f BD0E0000 		.4byte	.LVL342-1-.Ltext0
 13516 0723 300F0000 		.4byte	.LVL349-.Ltext0
 13517 0727 0100     		.2byte	0x1
 13518 0729 56       		.byte	0x56
 13519 072a 300F0000 		.4byte	.LVL349-.Ltext0
 13520 072e 340F0000 		.4byte	.LFE57-.Ltext0
 13521 0732 0400     		.2byte	0x4
 13522 0734 F3       		.byte	0xf3
 13523 0735 01       		.uleb128 0x1
 13524 0736 53       		.byte	0x53
ARM GAS  /tmp/ccaP1CVS.s 			page 364


 13525 0737 9F       		.byte	0x9f
 13526 0738 00000000 		.4byte	0
 13527 073c 00000000 		.4byte	0
 13528              	.LVUS189:
 13529 0740 01       		.uleb128 .LVU1540
 13530 0741 00       		.uleb128 .LVU1547
 13531 0742 00       		.uleb128 .LVU1547
 13532 0743 00       		.uleb128 0
 13533              	.LLST189:
 13534 0744 1E0F0000 		.4byte	.LVL347-.Ltext0
 13535 0748 300F0000 		.4byte	.LVL349-.Ltext0
 13536 074c 0100     		.2byte	0x1
 13537 074e 55       		.byte	0x55
 13538 074f 300F0000 		.4byte	.LVL349-.Ltext0
 13539 0753 340F0000 		.4byte	.LFE57-.Ltext0
 13540 0757 0100     		.2byte	0x1
 13541 0759 50       		.byte	0x50
 13542 075a 00000000 		.4byte	0
 13543 075e 00000000 		.4byte	0
 13544              	.LLST180:
 13545 0762 480E0000 		.4byte	.LFB56-.Ltext0
 13546 0766 4A0E0000 		.4byte	.LCFI48-.Ltext0
 13547 076a 0200     		.2byte	0x2
 13548 076c 7D       		.byte	0x7d
 13549 076d 00       		.sleb128 0
 13550 076e 4A0E0000 		.4byte	.LCFI48-.Ltext0
 13551 0772 AC0E0000 		.4byte	.LFE56-.Ltext0
 13552 0776 0200     		.2byte	0x2
 13553 0778 7D       		.byte	0x7d
 13554 0779 10       		.sleb128 16
 13555 077a 00000000 		.4byte	0
 13556 077e 00000000 		.4byte	0
 13557              	.LVUS181:
 13558 0782 00       		.uleb128 0
 13559 0783 00       		.uleb128 .LVU1457
 13560 0784 00       		.uleb128 .LVU1457
 13561 0785 00       		.uleb128 0
 13562              	.LLST181:
 13563 0786 480E0000 		.4byte	.LVL333-.Ltext0
 13564 078a 530E0000 		.4byte	.LVL334-1-.Ltext0
 13565 078e 0100     		.2byte	0x1
 13566 0790 50       		.byte	0x50
 13567 0791 530E0000 		.4byte	.LVL334-1-.Ltext0
 13568 0795 AC0E0000 		.4byte	.LFE56-.Ltext0
 13569 0799 0100     		.2byte	0x1
 13570 079b 56       		.byte	0x56
 13571 079c 00000000 		.4byte	0
 13572 07a0 00000000 		.4byte	0
 13573              	.LVUS182:
 13574 07a4 00       		.uleb128 0
 13575 07a5 00       		.uleb128 .LVU1457
 13576 07a6 00       		.uleb128 .LVU1457
 13577 07a7 00       		.uleb128 .LVU1479
 13578 07a8 00       		.uleb128 .LVU1479
 13579 07a9 00       		.uleb128 0
 13580              	.LLST182:
 13581 07aa 480E0000 		.4byte	.LVL333-.Ltext0
ARM GAS  /tmp/ccaP1CVS.s 			page 365


 13582 07ae 530E0000 		.4byte	.LVL334-1-.Ltext0
 13583 07b2 0100     		.2byte	0x1
 13584 07b4 51       		.byte	0x51
 13585 07b5 530E0000 		.4byte	.LVL334-1-.Ltext0
 13586 07b9 8A0E0000 		.4byte	.LVL338-.Ltext0
 13587 07bd 0100     		.2byte	0x1
 13588 07bf 55       		.byte	0x55
 13589 07c0 8A0E0000 		.4byte	.LVL338-.Ltext0
 13590 07c4 AC0E0000 		.4byte	.LFE56-.Ltext0
 13591 07c8 0400     		.2byte	0x4
 13592 07ca F3       		.byte	0xf3
 13593 07cb 01       		.uleb128 0x1
 13594 07cc 51       		.byte	0x51
 13595 07cd 9F       		.byte	0x9f
 13596 07ce 00000000 		.4byte	0
 13597 07d2 00000000 		.4byte	0
 13598              	.LVUS183:
 13599 07d6 00       		.uleb128 .LVU1479
 13600 07d7 00       		.uleb128 0
 13601              	.LLST183:
 13602 07d8 8A0E0000 		.4byte	.LVL338-.Ltext0
 13603 07dc AC0E0000 		.4byte	.LFE56-.Ltext0
 13604 07e0 0100     		.2byte	0x1
 13605 07e2 55       		.byte	0x55
 13606 07e3 00000000 		.4byte	0
 13607 07e7 00000000 		.4byte	0
 13608              	.LVUS179:
 13609 07eb 00       		.uleb128 .LVU1437
 13610 07ec 00       		.uleb128 0
 13611              	.LLST179:
 13612 07ed 200E0000 		.4byte	.LVL332-.Ltext0
 13613 07f1 300E0000 		.4byte	.LFE54-.Ltext0
 13614 07f5 0100     		.2byte	0x1
 13615 07f7 50       		.byte	0x50
 13616 07f8 00000000 		.4byte	0
 13617 07fc 00000000 		.4byte	0
 13618              	.LLST173:
 13619 0800 940D0000 		.4byte	.LFB53-.Ltext0
 13620 0804 980D0000 		.4byte	.LCFI45-.Ltext0
 13621 0808 0200     		.2byte	0x2
 13622 080a 7D       		.byte	0x7d
 13623 080b 00       		.sleb128 0
 13624 080c 980D0000 		.4byte	.LCFI45-.Ltext0
 13625 0810 0A0E0000 		.4byte	.LCFI46-.Ltext0
 13626 0814 0200     		.2byte	0x2
 13627 0816 7D       		.byte	0x7d
 13628 0817 18       		.sleb128 24
 13629 0818 0A0E0000 		.4byte	.LCFI46-.Ltext0
 13630 081c 0E0E0000 		.4byte	.LCFI47-.Ltext0
 13631 0820 0200     		.2byte	0x2
 13632 0822 7D       		.byte	0x7d
 13633 0823 00       		.sleb128 0
 13634 0824 0E0E0000 		.4byte	.LCFI47-.Ltext0
 13635 0828 180E0000 		.4byte	.LFE53-.Ltext0
 13636 082c 0200     		.2byte	0x2
 13637 082e 7D       		.byte	0x7d
 13638 082f 18       		.sleb128 24
ARM GAS  /tmp/ccaP1CVS.s 			page 366


 13639 0830 00000000 		.4byte	0
 13640 0834 00000000 		.4byte	0
 13641              	.LVUS174:
 13642 0838 00       		.uleb128 0
 13643 0839 00       		.uleb128 .LVU1419
 13644 083a 00       		.uleb128 .LVU1419
 13645 083b 00       		.uleb128 .LVU1429
 13646 083c 00       		.uleb128 .LVU1429
 13647 083d 00       		.uleb128 .LVU1430
 13648 083e 00       		.uleb128 .LVU1430
 13649 083f 00       		.uleb128 .LVU1430
 13650 0840 00       		.uleb128 .LVU1430
 13651 0841 00       		.uleb128 0
 13652              	.LLST174:
 13653 0842 940D0000 		.4byte	.LVL322-.Ltext0
 13654 0846 D80D0000 		.4byte	.LVL328-.Ltext0
 13655 084a 0100     		.2byte	0x1
 13656 084c 50       		.byte	0x50
 13657 084d D80D0000 		.4byte	.LVL328-.Ltext0
 13658 0851 0A0E0000 		.4byte	.LVL330-.Ltext0
 13659 0855 0100     		.2byte	0x1
 13660 0857 54       		.byte	0x54
 13661 0858 0A0E0000 		.4byte	.LVL330-.Ltext0
 13662 085c 0D0E0000 		.4byte	.LVL331-1-.Ltext0
 13663 0860 0300     		.2byte	0x3
 13664 0862 71       		.byte	0x71
 13665 0863 7C       		.sleb128 -4
 13666 0864 9F       		.byte	0x9f
 13667 0865 0D0E0000 		.4byte	.LVL331-1-.Ltext0
 13668 0869 0E0E0000 		.4byte	.LVL331-.Ltext0
 13669 086d 0400     		.2byte	0x4
 13670 086f F3       		.byte	0xf3
 13671 0870 01       		.uleb128 0x1
 13672 0871 50       		.byte	0x50
 13673 0872 9F       		.byte	0x9f
 13674 0873 0E0E0000 		.4byte	.LVL331-.Ltext0
 13675 0877 180E0000 		.4byte	.LFE53-.Ltext0
 13676 087b 0100     		.2byte	0x1
 13677 087d 50       		.byte	0x50
 13678 087e 00000000 		.4byte	0
 13679 0882 00000000 		.4byte	0
 13680              	.LVUS175:
 13681 0886 00       		.uleb128 0
 13682 0887 00       		.uleb128 .LVU1396
 13683 0888 00       		.uleb128 .LVU1396
 13684 0889 00       		.uleb128 0
 13685              	.LLST175:
 13686 088a 940D0000 		.4byte	.LVL322-.Ltext0
 13687 088e A60D0000 		.4byte	.LVL323-.Ltext0
 13688 0892 0100     		.2byte	0x1
 13689 0894 51       		.byte	0x51
 13690 0895 A60D0000 		.4byte	.LVL323-.Ltext0
 13691 0899 180E0000 		.4byte	.LFE53-.Ltext0
 13692 089d 0400     		.2byte	0x4
 13693 089f F3       		.byte	0xf3
 13694 08a0 01       		.uleb128 0x1
 13695 08a1 51       		.byte	0x51
ARM GAS  /tmp/ccaP1CVS.s 			page 367


 13696 08a2 9F       		.byte	0x9f
 13697 08a3 00000000 		.4byte	0
 13698 08a7 00000000 		.4byte	0
 13699              	.LVUS176:
 13700 08ab 02       		.uleb128 .LVU1389
 13701 08ac 00       		.uleb128 .LVU1419
 13702 08ad 00       		.uleb128 .LVU1419
 13703 08ae 00       		.uleb128 .LVU1429
 13704 08af 00       		.uleb128 .LVU1429
 13705 08b0 00       		.uleb128 .LVU1430
 13706 08b1 00       		.uleb128 .LVU1430
 13707 08b2 00       		.uleb128 .LVU1430
 13708 08b3 00       		.uleb128 .LVU1430
 13709 08b4 00       		.uleb128 0
 13710              	.LLST176:
 13711 08b5 940D0000 		.4byte	.LVL322-.Ltext0
 13712 08b9 D80D0000 		.4byte	.LVL328-.Ltext0
 13713 08bd 0100     		.2byte	0x1
 13714 08bf 50       		.byte	0x50
 13715 08c0 D80D0000 		.4byte	.LVL328-.Ltext0
 13716 08c4 0A0E0000 		.4byte	.LVL330-.Ltext0
 13717 08c8 0100     		.2byte	0x1
 13718 08ca 54       		.byte	0x54
 13719 08cb 0A0E0000 		.4byte	.LVL330-.Ltext0
 13720 08cf 0D0E0000 		.4byte	.LVL331-1-.Ltext0
 13721 08d3 0300     		.2byte	0x3
 13722 08d5 71       		.byte	0x71
 13723 08d6 7C       		.sleb128 -4
 13724 08d7 9F       		.byte	0x9f
 13725 08d8 0D0E0000 		.4byte	.LVL331-1-.Ltext0
 13726 08dc 0E0E0000 		.4byte	.LVL331-.Ltext0
 13727 08e0 0400     		.2byte	0x4
 13728 08e2 F3       		.byte	0xf3
 13729 08e3 01       		.uleb128 0x1
 13730 08e4 50       		.byte	0x50
 13731 08e5 9F       		.byte	0x9f
 13732 08e6 0E0E0000 		.4byte	.LVL331-.Ltext0
 13733 08ea 180E0000 		.4byte	.LFE53-.Ltext0
 13734 08ee 0100     		.2byte	0x1
 13735 08f0 50       		.byte	0x50
 13736 08f1 00000000 		.4byte	0
 13737 08f5 00000000 		.4byte	0
 13738              	.LVUS177:
 13739 08f9 03       		.uleb128 .LVU1404
 13740 08fa 00       		.uleb128 .LVU1408
 13741 08fb 00       		.uleb128 .LVU1408
 13742 08fc 00       		.uleb128 .LVU1411
 13743              	.LLST177:
 13744 08fd B20D0000 		.4byte	.LVL324-.Ltext0
 13745 0901 C00D0000 		.4byte	.LVL325-.Ltext0
 13746 0905 0100     		.2byte	0x1
 13747 0907 53       		.byte	0x53
 13748 0908 C00D0000 		.4byte	.LVL325-.Ltext0
 13749 090c C60D0000 		.4byte	.LVL326-.Ltext0
 13750 0910 0200     		.2byte	0x2
 13751 0912 70       		.byte	0x70
 13752 0913 2C       		.sleb128 44
ARM GAS  /tmp/ccaP1CVS.s 			page 368


 13753 0914 00000000 		.4byte	0
 13754 0918 00000000 		.4byte	0
 13755              	.LVUS178:
 13756 091c 00       		.uleb128 .LVU1396
 13757 091d 00       		.uleb128 .LVU1413
 13758 091e 00       		.uleb128 .LVU1413
 13759 091f 00       		.uleb128 .LVU1419
 13760 0920 00       		.uleb128 .LVU1419
 13761 0921 00       		.uleb128 .LVU1420
 13762              	.LLST178:
 13763 0922 A60D0000 		.4byte	.LVL323-.Ltext0
 13764 0926 CC0D0000 		.4byte	.LVL327-.Ltext0
 13765 092a 0100     		.2byte	0x1
 13766 092c 51       		.byte	0x51
 13767 092d CC0D0000 		.4byte	.LVL327-.Ltext0
 13768 0931 D80D0000 		.4byte	.LVL328-.Ltext0
 13769 0935 0200     		.2byte	0x2
 13770 0937 70       		.byte	0x70
 13771 0938 2C       		.sleb128 44
 13772 0939 D80D0000 		.4byte	.LVL328-.Ltext0
 13773 093d DB0D0000 		.4byte	.LVL329-1-.Ltext0
 13774 0941 0200     		.2byte	0x2
 13775 0943 74       		.byte	0x74
 13776 0944 2C       		.sleb128 44
 13777 0945 00000000 		.4byte	0
 13778 0949 00000000 		.4byte	0
 13779              	.LLST169:
 13780 094d 240D0000 		.4byte	.LFB52-.Ltext0
 13781 0951 260D0000 		.4byte	.LCFI44-.Ltext0
 13782 0955 0200     		.2byte	0x2
 13783 0957 7D       		.byte	0x7d
 13784 0958 00       		.sleb128 0
 13785 0959 260D0000 		.4byte	.LCFI44-.Ltext0
 13786 095d 940D0000 		.4byte	.LFE52-.Ltext0
 13787 0961 0200     		.2byte	0x2
 13788 0963 7D       		.byte	0x7d
 13789 0964 10       		.sleb128 16
 13790 0965 00000000 		.4byte	0
 13791 0969 00000000 		.4byte	0
 13792              	.LVUS170:
 13793 096d 00       		.uleb128 0
 13794 096e 00       		.uleb128 .LVU1351
 13795 096f 00       		.uleb128 .LVU1351
 13796 0970 00       		.uleb128 .LVU1352
 13797 0971 00       		.uleb128 .LVU1352
 13798 0972 00       		.uleb128 .LVU1366
 13799 0973 00       		.uleb128 .LVU1366
 13800 0974 00       		.uleb128 .LVU1379
 13801 0975 00       		.uleb128 .LVU1379
 13802 0976 00       		.uleb128 0
 13803              	.LLST170:
 13804 0977 240D0000 		.4byte	.LVL315-.Ltext0
 13805 097b 2C0D0000 		.4byte	.LVL316-.Ltext0
 13806 097f 0100     		.2byte	0x1
 13807 0981 50       		.byte	0x50
 13808 0982 2C0D0000 		.4byte	.LVL316-.Ltext0
 13809 0986 2E0D0000 		.4byte	.LVL317-.Ltext0
ARM GAS  /tmp/ccaP1CVS.s 			page 369


 13810 098a 0400     		.2byte	0x4
 13811 098c F3       		.byte	0xf3
 13812 098d 01       		.uleb128 0x1
 13813 098e 50       		.byte	0x50
 13814 098f 9F       		.byte	0x9f
 13815 0990 2E0D0000 		.4byte	.LVL317-.Ltext0
 13816 0994 440D0000 		.4byte	.LVL318-.Ltext0
 13817 0998 0100     		.2byte	0x1
 13818 099a 50       		.byte	0x50
 13819 099b 440D0000 		.4byte	.LVL318-.Ltext0
 13820 099f 700D0000 		.4byte	.LVL320-.Ltext0
 13821 09a3 0100     		.2byte	0x1
 13822 09a5 54       		.byte	0x54
 13823 09a6 700D0000 		.4byte	.LVL320-.Ltext0
 13824 09aa 940D0000 		.4byte	.LFE52-.Ltext0
 13825 09ae 0300     		.2byte	0x3
 13826 09b0 75       		.byte	0x75
 13827 09b1 7C       		.sleb128 -4
 13828 09b2 9F       		.byte	0x9f
 13829 09b3 00000000 		.4byte	0
 13830 09b7 00000000 		.4byte	0
 13831              	.LVUS171:
 13832 09bb 02       		.uleb128 .LVU1346
 13833 09bc 00       		.uleb128 .LVU1351
 13834 09bd 00       		.uleb128 .LVU1351
 13835 09be 00       		.uleb128 .LVU1352
 13836 09bf 00       		.uleb128 .LVU1352
 13837 09c0 00       		.uleb128 .LVU1366
 13838 09c1 00       		.uleb128 .LVU1366
 13839 09c2 00       		.uleb128 .LVU1379
 13840 09c3 00       		.uleb128 .LVU1379
 13841 09c4 00       		.uleb128 0
 13842              	.LLST171:
 13843 09c5 240D0000 		.4byte	.LVL315-.Ltext0
 13844 09c9 2C0D0000 		.4byte	.LVL316-.Ltext0
 13845 09cd 0100     		.2byte	0x1
 13846 09cf 50       		.byte	0x50
 13847 09d0 2C0D0000 		.4byte	.LVL316-.Ltext0
 13848 09d4 2E0D0000 		.4byte	.LVL317-.Ltext0
 13849 09d8 0400     		.2byte	0x4
 13850 09da F3       		.byte	0xf3
 13851 09db 01       		.uleb128 0x1
 13852 09dc 50       		.byte	0x50
 13853 09dd 9F       		.byte	0x9f
 13854 09de 2E0D0000 		.4byte	.LVL317-.Ltext0
 13855 09e2 440D0000 		.4byte	.LVL318-.Ltext0
 13856 09e6 0100     		.2byte	0x1
 13857 09e8 50       		.byte	0x50
 13858 09e9 440D0000 		.4byte	.LVL318-.Ltext0
 13859 09ed 700D0000 		.4byte	.LVL320-.Ltext0
 13860 09f1 0100     		.2byte	0x1
 13861 09f3 54       		.byte	0x54
 13862 09f4 700D0000 		.4byte	.LVL320-.Ltext0
 13863 09f8 940D0000 		.4byte	.LFE52-.Ltext0
 13864 09fc 0300     		.2byte	0x3
 13865 09fe 75       		.byte	0x75
 13866 09ff 7C       		.sleb128 -4
ARM GAS  /tmp/ccaP1CVS.s 			page 370


 13867 0a00 9F       		.byte	0x9f
 13868 0a01 00000000 		.4byte	0
 13869 0a05 00000000 		.4byte	0
 13870              	.LVUS172:
 13871 0a09 03       		.uleb128 .LVU1347
 13872 0a0a 00       		.uleb128 .LVU1351
 13873 0a0b 00       		.uleb128 .LVU1352
 13874 0a0c 02       		.uleb128 .LVU1383
 13875 0a0d 02       		.uleb128 .LVU1383
 13876 0a0e 00       		.uleb128 0
 13877              	.LLST172:
 13878 0a0f 240D0000 		.4byte	.LVL315-.Ltext0
 13879 0a13 2C0D0000 		.4byte	.LVL316-.Ltext0
 13880 0a17 0200     		.2byte	0x2
 13881 0a19 30       		.byte	0x30
 13882 0a1a 9F       		.byte	0x9f
 13883 0a1b 2E0D0000 		.4byte	.LVL317-.Ltext0
 13884 0a1f 880D0000 		.4byte	.LVL321-.Ltext0
 13885 0a23 0200     		.2byte	0x2
 13886 0a25 30       		.byte	0x30
 13887 0a26 9F       		.byte	0x9f
 13888 0a27 880D0000 		.4byte	.LVL321-.Ltext0
 13889 0a2b 940D0000 		.4byte	.LFE52-.Ltext0
 13890 0a2f 0200     		.2byte	0x2
 13891 0a31 31       		.byte	0x31
 13892 0a32 9F       		.byte	0x9f
 13893 0a33 00000000 		.4byte	0
 13894 0a37 00000000 		.4byte	0
 13895              	.LLST165:
 13896 0a3b 840C0000 		.4byte	.LFB51-.Ltext0
 13897 0a3f 880C0000 		.4byte	.LCFI43-.Ltext0
 13898 0a43 0200     		.2byte	0x2
 13899 0a45 7D       		.byte	0x7d
 13900 0a46 00       		.sleb128 0
 13901 0a47 880C0000 		.4byte	.LCFI43-.Ltext0
 13902 0a4b 240D0000 		.4byte	.LFE51-.Ltext0
 13903 0a4f 0200     		.2byte	0x2
 13904 0a51 7D       		.byte	0x7d
 13905 0a52 18       		.sleb128 24
 13906 0a53 00000000 		.4byte	0
 13907 0a57 00000000 		.4byte	0
 13908              	.LVUS166:
 13909 0a5b 00       		.uleb128 0
 13910 0a5c 00       		.uleb128 .LVU1314
 13911 0a5d 00       		.uleb128 .LVU1314
 13912 0a5e 00       		.uleb128 .LVU1327
 13913 0a5f 00       		.uleb128 .LVU1327
 13914 0a60 01       		.uleb128 .LVU1330
 13915 0a61 01       		.uleb128 .LVU1330
 13916 0a62 00       		.uleb128 .LVU1334
 13917 0a63 00       		.uleb128 .LVU1334
 13918 0a64 00       		.uleb128 .LVU1338
 13919 0a65 00       		.uleb128 .LVU1338
 13920 0a66 00       		.uleb128 .LVU1339
 13921 0a67 00       		.uleb128 .LVU1339
 13922 0a68 00       		.uleb128 .LVU1342
 13923 0a69 00       		.uleb128 .LVU1342
ARM GAS  /tmp/ccaP1CVS.s 			page 371


 13924 0a6a 00       		.uleb128 .LVU1343
 13925 0a6b 00       		.uleb128 .LVU1343
 13926 0a6c 00       		.uleb128 0
 13927              	.LLST166:
 13928 0a6d 840C0000 		.4byte	.LVL304-.Ltext0
 13929 0a71 C00C0000 		.4byte	.LVL305-.Ltext0
 13930 0a75 0100     		.2byte	0x1
 13931 0a77 50       		.byte	0x50
 13932 0a78 C00C0000 		.4byte	.LVL305-.Ltext0
 13933 0a7c E80C0000 		.4byte	.LVL307-.Ltext0
 13934 0a80 0100     		.2byte	0x1
 13935 0a82 54       		.byte	0x54
 13936 0a83 E80C0000 		.4byte	.LVL307-.Ltext0
 13937 0a87 FA0C0000 		.4byte	.LVL308-.Ltext0
 13938 0a8b 0300     		.2byte	0x3
 13939 0a8d 78       		.byte	0x78
 13940 0a8e 7C       		.sleb128 -4
 13941 0a8f 9F       		.byte	0x9f
 13942 0a90 FA0C0000 		.4byte	.LVL308-.Ltext0
 13943 0a94 FE0C0000 		.4byte	.LVL310-.Ltext0
 13944 0a98 0400     		.2byte	0x4
 13945 0a9a F3       		.byte	0xf3
 13946 0a9b 01       		.uleb128 0x1
 13947 0a9c 50       		.byte	0x50
 13948 0a9d 9F       		.byte	0x9f
 13949 0a9e FE0C0000 		.4byte	.LVL310-.Ltext0
 13950 0aa2 060D0000 		.4byte	.LVL311-.Ltext0
 13951 0aa6 0100     		.2byte	0x1
 13952 0aa8 50       		.byte	0x50
 13953 0aa9 060D0000 		.4byte	.LVL311-.Ltext0
 13954 0aad 0A0D0000 		.4byte	.LVL312-.Ltext0
 13955 0ab1 0400     		.2byte	0x4
 13956 0ab3 F3       		.byte	0xf3
 13957 0ab4 01       		.uleb128 0x1
 13958 0ab5 50       		.byte	0x50
 13959 0ab6 9F       		.byte	0x9f
 13960 0ab7 0A0D0000 		.4byte	.LVL312-.Ltext0
 13961 0abb 0E0D0000 		.4byte	.LVL313-.Ltext0
 13962 0abf 0100     		.2byte	0x1
 13963 0ac1 50       		.byte	0x50
 13964 0ac2 0E0D0000 		.4byte	.LVL313-.Ltext0
 13965 0ac6 100D0000 		.4byte	.LVL314-.Ltext0
 13966 0aca 0100     		.2byte	0x1
 13967 0acc 54       		.byte	0x54
 13968 0acd 100D0000 		.4byte	.LVL314-.Ltext0
 13969 0ad1 240D0000 		.4byte	.LFE51-.Ltext0
 13970 0ad5 0400     		.2byte	0x4
 13971 0ad7 F3       		.byte	0xf3
 13972 0ad8 01       		.uleb128 0x1
 13973 0ad9 50       		.byte	0x50
 13974 0ada 9F       		.byte	0x9f
 13975 0adb 00000000 		.4byte	0
 13976 0adf 00000000 		.4byte	0
 13977              	.LVUS167:
 13978 0ae3 02       		.uleb128 .LVU1292
 13979 0ae4 00       		.uleb128 .LVU1314
 13980 0ae5 00       		.uleb128 .LVU1314
ARM GAS  /tmp/ccaP1CVS.s 			page 372


 13981 0ae6 00       		.uleb128 .LVU1327
 13982 0ae7 00       		.uleb128 .LVU1327
 13983 0ae8 01       		.uleb128 .LVU1330
 13984 0ae9 01       		.uleb128 .LVU1330
 13985 0aea 00       		.uleb128 .LVU1334
 13986 0aeb 00       		.uleb128 .LVU1334
 13987 0aec 00       		.uleb128 .LVU1338
 13988 0aed 00       		.uleb128 .LVU1338
 13989 0aee 00       		.uleb128 .LVU1339
 13990 0aef 00       		.uleb128 .LVU1339
 13991 0af0 00       		.uleb128 .LVU1342
 13992 0af1 00       		.uleb128 .LVU1342
 13993 0af2 00       		.uleb128 .LVU1343
 13994 0af3 00       		.uleb128 .LVU1343
 13995 0af4 00       		.uleb128 0
 13996              	.LLST167:
 13997 0af5 840C0000 		.4byte	.LVL304-.Ltext0
 13998 0af9 C00C0000 		.4byte	.LVL305-.Ltext0
 13999 0afd 0100     		.2byte	0x1
 14000 0aff 50       		.byte	0x50
 14001 0b00 C00C0000 		.4byte	.LVL305-.Ltext0
 14002 0b04 E80C0000 		.4byte	.LVL307-.Ltext0
 14003 0b08 0100     		.2byte	0x1
 14004 0b0a 54       		.byte	0x54
 14005 0b0b E80C0000 		.4byte	.LVL307-.Ltext0
 14006 0b0f FA0C0000 		.4byte	.LVL308-.Ltext0
 14007 0b13 0300     		.2byte	0x3
 14008 0b15 78       		.byte	0x78
 14009 0b16 7C       		.sleb128 -4
 14010 0b17 9F       		.byte	0x9f
 14011 0b18 FA0C0000 		.4byte	.LVL308-.Ltext0
 14012 0b1c FE0C0000 		.4byte	.LVL310-.Ltext0
 14013 0b20 0400     		.2byte	0x4
 14014 0b22 F3       		.byte	0xf3
 14015 0b23 01       		.uleb128 0x1
 14016 0b24 50       		.byte	0x50
 14017 0b25 9F       		.byte	0x9f
 14018 0b26 FE0C0000 		.4byte	.LVL310-.Ltext0
 14019 0b2a 060D0000 		.4byte	.LVL311-.Ltext0
 14020 0b2e 0100     		.2byte	0x1
 14021 0b30 50       		.byte	0x50
 14022 0b31 060D0000 		.4byte	.LVL311-.Ltext0
 14023 0b35 0A0D0000 		.4byte	.LVL312-.Ltext0
 14024 0b39 0400     		.2byte	0x4
 14025 0b3b F3       		.byte	0xf3
 14026 0b3c 01       		.uleb128 0x1
 14027 0b3d 50       		.byte	0x50
 14028 0b3e 9F       		.byte	0x9f
 14029 0b3f 0A0D0000 		.4byte	.LVL312-.Ltext0
 14030 0b43 0E0D0000 		.4byte	.LVL313-.Ltext0
 14031 0b47 0100     		.2byte	0x1
 14032 0b49 50       		.byte	0x50
 14033 0b4a 0E0D0000 		.4byte	.LVL313-.Ltext0
 14034 0b4e 100D0000 		.4byte	.LVL314-.Ltext0
 14035 0b52 0100     		.2byte	0x1
 14036 0b54 54       		.byte	0x54
 14037 0b55 100D0000 		.4byte	.LVL314-.Ltext0
ARM GAS  /tmp/ccaP1CVS.s 			page 373


 14038 0b59 240D0000 		.4byte	.LFE51-.Ltext0
 14039 0b5d 0400     		.2byte	0x4
 14040 0b5f F3       		.byte	0xf3
 14041 0b60 01       		.uleb128 0x1
 14042 0b61 50       		.byte	0x50
 14043 0b62 9F       		.byte	0x9f
 14044 0b63 00000000 		.4byte	0
 14045 0b67 00000000 		.4byte	0
 14046              	.LVUS168:
 14047 0b6b 03       		.uleb128 .LVU1293
 14048 0b6c 00       		.uleb128 .LVU1331
 14049 0b6d 00       		.uleb128 .LVU1331
 14050 0b6e 00       		.uleb128 .LVU1334
 14051 0b6f 00       		.uleb128 .LVU1334
 14052 0b70 00       		.uleb128 .LVU1338
 14053 0b71 00       		.uleb128 .LVU1339
 14054 0b72 00       		.uleb128 0
 14055              	.LLST168:
 14056 0b73 840C0000 		.4byte	.LVL304-.Ltext0
 14057 0b77 FC0C0000 		.4byte	.LVL309-.Ltext0
 14058 0b7b 0200     		.2byte	0x2
 14059 0b7d 30       		.byte	0x30
 14060 0b7e 9F       		.byte	0x9f
 14061 0b7f FC0C0000 		.4byte	.LVL309-.Ltext0
 14062 0b83 FE0C0000 		.4byte	.LVL310-.Ltext0
 14063 0b87 0400     		.2byte	0x4
 14064 0b89 F3       		.byte	0xf3
 14065 0b8a 01       		.uleb128 0x1
 14066 0b8b 50       		.byte	0x50
 14067 0b8c 9F       		.byte	0x9f
 14068 0b8d FE0C0000 		.4byte	.LVL310-.Ltext0
 14069 0b91 060D0000 		.4byte	.LVL311-.Ltext0
 14070 0b95 0200     		.2byte	0x2
 14071 0b97 30       		.byte	0x30
 14072 0b98 9F       		.byte	0x9f
 14073 0b99 0A0D0000 		.4byte	.LVL312-.Ltext0
 14074 0b9d 240D0000 		.4byte	.LFE51-.Ltext0
 14075 0ba1 0200     		.2byte	0x2
 14076 0ba3 30       		.byte	0x30
 14077 0ba4 9F       		.byte	0x9f
 14078 0ba5 00000000 		.4byte	0
 14079 0ba9 00000000 		.4byte	0
 14080              	.LVUS164:
 14081 0bad 00       		.uleb128 .LVU1278
 14082 0bae 00       		.uleb128 0
 14083              	.LLST164:
 14084 0baf 5C0C0000 		.4byte	.LVL303-.Ltext0
 14085 0bb3 640C0000 		.4byte	.LFE49-.Ltext0
 14086 0bb7 0100     		.2byte	0x1
 14087 0bb9 50       		.byte	0x50
 14088 0bba 00000000 		.4byte	0
 14089 0bbe 00000000 		.4byte	0
 14090              	.LLST138:
 14091 0bc2 E40A0000 		.4byte	.LFB44-.Ltext0
 14092 0bc6 E60A0000 		.4byte	.LCFI40-.Ltext0
 14093 0bca 0200     		.2byte	0x2
 14094 0bcc 7D       		.byte	0x7d
ARM GAS  /tmp/ccaP1CVS.s 			page 374


 14095 0bcd 00       		.sleb128 0
 14096 0bce E60A0000 		.4byte	.LCFI40-.Ltext0
 14097 0bd2 600B0000 		.4byte	.LFE44-.Ltext0
 14098 0bd6 0200     		.2byte	0x2
 14099 0bd8 7D       		.byte	0x7d
 14100 0bd9 10       		.sleb128 16
 14101 0bda 00000000 		.4byte	0
 14102 0bde 00000000 		.4byte	0
 14103              	.LVUS139:
 14104 0be2 00       		.uleb128 0
 14105 0be3 00       		.uleb128 .LVU1124
 14106              	.LLST139:
 14107 0be4 E40A0000 		.4byte	.LVL264-.Ltext0
 14108 0be8 F20A0000 		.4byte	.LVL266-.Ltext0
 14109 0bec 0100     		.2byte	0x1
 14110 0bee 50       		.byte	0x50
 14111 0bef 00000000 		.4byte	0
 14112 0bf3 00000000 		.4byte	0
 14113              	.LVUS140:
 14114 0bf7 00       		.uleb128 0
 14115 0bf8 00       		.uleb128 .LVU1146
 14116 0bf9 00       		.uleb128 .LVU1146
 14117 0bfa 00       		.uleb128 .LVU1177
 14118 0bfb 00       		.uleb128 .LVU1177
 14119 0bfc 00       		.uleb128 .LVU1179
 14120 0bfd 00       		.uleb128 .LVU1179
 14121 0bfe 00       		.uleb128 0
 14122              	.LLST140:
 14123 0bff E40A0000 		.4byte	.LVL264-.Ltext0
 14124 0c03 160B0000 		.4byte	.LVL267-.Ltext0
 14125 0c07 0100     		.2byte	0x1
 14126 0c09 51       		.byte	0x51
 14127 0c0a 160B0000 		.4byte	.LVL267-.Ltext0
 14128 0c0e 480B0000 		.4byte	.LVL274-.Ltext0
 14129 0c12 0100     		.2byte	0x1
 14130 0c14 54       		.byte	0x54
 14131 0c15 480B0000 		.4byte	.LVL274-.Ltext0
 14132 0c19 4D0B0000 		.4byte	.LVL275-1-.Ltext0
 14133 0c1d 0100     		.2byte	0x1
 14134 0c1f 51       		.byte	0x51
 14135 0c20 4D0B0000 		.4byte	.LVL275-1-.Ltext0
 14136 0c24 600B0000 		.4byte	.LFE44-.Ltext0
 14137 0c28 0100     		.2byte	0x1
 14138 0c2a 54       		.byte	0x54
 14139 0c2b 00000000 		.4byte	0
 14140 0c2f 00000000 		.4byte	0
 14141              	.LVUS141:
 14142 0c33 00       		.uleb128 0
 14143 0c34 00       		.uleb128 .LVU1123
 14144 0c35 00       		.uleb128 .LVU1123
 14145 0c36 00       		.uleb128 0
 14146              	.LLST141:
 14147 0c37 E40A0000 		.4byte	.LVL264-.Ltext0
 14148 0c3b F00A0000 		.4byte	.LVL265-.Ltext0
 14149 0c3f 0100     		.2byte	0x1
 14150 0c41 52       		.byte	0x52
 14151 0c42 F00A0000 		.4byte	.LVL265-.Ltext0
ARM GAS  /tmp/ccaP1CVS.s 			page 375


 14152 0c46 600B0000 		.4byte	.LFE44-.Ltext0
 14153 0c4a 0100     		.2byte	0x1
 14154 0c4c 56       		.byte	0x56
 14155 0c4d 00000000 		.4byte	0
 14156 0c51 00000000 		.4byte	0
 14157              	.LVUS142:
 14158 0c55 00       		.uleb128 0
 14159 0c56 00       		.uleb128 .LVU1150
 14160 0c57 00       		.uleb128 .LVU1150
 14161 0c58 00       		.uleb128 .LVU1165
 14162 0c59 00       		.uleb128 .LVU1165
 14163 0c5a 00       		.uleb128 .LVU1171
 14164 0c5b 00       		.uleb128 .LVU1171
 14165 0c5c 00       		.uleb128 .LVU1177
 14166 0c5d 00       		.uleb128 .LVU1177
 14167 0c5e 00       		.uleb128 .LVU1179
 14168 0c5f 00       		.uleb128 .LVU1179
 14169 0c60 00       		.uleb128 0
 14170              	.LLST142:
 14171 0c61 E40A0000 		.4byte	.LVL264-.Ltext0
 14172 0c65 1E0B0000 		.4byte	.LVL268-.Ltext0
 14173 0c69 0100     		.2byte	0x1
 14174 0c6b 53       		.byte	0x53
 14175 0c6c 1E0B0000 		.4byte	.LVL268-.Ltext0
 14176 0c70 300B0000 		.4byte	.LVL271-.Ltext0
 14177 0c74 0400     		.2byte	0x4
 14178 0c76 F3       		.byte	0xf3
 14179 0c77 01       		.uleb128 0x1
 14180 0c78 53       		.byte	0x53
 14181 0c79 9F       		.byte	0x9f
 14182 0c7a 300B0000 		.4byte	.LVL271-.Ltext0
 14183 0c7e 390B0000 		.4byte	.LVL272-1-.Ltext0
 14184 0c82 0100     		.2byte	0x1
 14185 0c84 53       		.byte	0x53
 14186 0c85 390B0000 		.4byte	.LVL272-1-.Ltext0
 14187 0c89 480B0000 		.4byte	.LVL274-.Ltext0
 14188 0c8d 0400     		.2byte	0x4
 14189 0c8f F3       		.byte	0xf3
 14190 0c90 01       		.uleb128 0x1
 14191 0c91 53       		.byte	0x53
 14192 0c92 9F       		.byte	0x9f
 14193 0c93 480B0000 		.4byte	.LVL274-.Ltext0
 14194 0c97 4D0B0000 		.4byte	.LVL275-1-.Ltext0
 14195 0c9b 0100     		.2byte	0x1
 14196 0c9d 53       		.byte	0x53
 14197 0c9e 4D0B0000 		.4byte	.LVL275-1-.Ltext0
 14198 0ca2 600B0000 		.4byte	.LFE44-.Ltext0
 14199 0ca6 0400     		.2byte	0x4
 14200 0ca8 F3       		.byte	0xf3
 14201 0ca9 01       		.uleb128 0x1
 14202 0caa 53       		.byte	0x53
 14203 0cab 9F       		.byte	0x9f
 14204 0cac 00000000 		.4byte	0
 14205 0cb0 00000000 		.4byte	0
 14206              	.LVUS143:
 14207 0cb4 00       		.uleb128 .LVU1124
 14208 0cb5 00       		.uleb128 0
ARM GAS  /tmp/ccaP1CVS.s 			page 376


 14209              	.LLST143:
 14210 0cb6 F20A0000 		.4byte	.LVL266-.Ltext0
 14211 0cba 600B0000 		.4byte	.LFE44-.Ltext0
 14212 0cbe 0100     		.2byte	0x1
 14213 0cc0 55       		.byte	0x55
 14214 0cc1 00000000 		.4byte	0
 14215 0cc5 00000000 		.4byte	0
 14216              	.LVUS144:
 14217 0cc9 00       		.uleb128 .LVU1155
 14218 0cca 03       		.uleb128 .LVU1158
 14219 0ccb 03       		.uleb128 .LVU1158
 14220 0ccc 02       		.uleb128 .LVU1161
 14221 0ccd 00       		.uleb128 .LVU1180
 14222 0cce 01       		.uleb128 .LVU1181
 14223              	.LLST144:
 14224 0ccf 240B0000 		.4byte	.LVL269-.Ltext0
 14225 0cd3 240B0000 		.4byte	.LVL269-.Ltext0
 14226 0cd7 0100     		.2byte	0x1
 14227 0cd9 51       		.byte	0x51
 14228 0cda 240B0000 		.4byte	.LVL269-.Ltext0
 14229 0cde 2A0B0000 		.4byte	.LVL270-.Ltext0
 14230 0ce2 0600     		.2byte	0x6
 14231 0ce4 71       		.byte	0x71
 14232 0ce5 00       		.sleb128 0
 14233 0ce6 73       		.byte	0x73
 14234 0ce7 00       		.sleb128 0
 14235 0ce8 22       		.byte	0x22
 14236 0ce9 9F       		.byte	0x9f
 14237 0cea 520B0000 		.4byte	.LVL276-.Ltext0
 14238 0cee 520B0000 		.4byte	.LVL276-.Ltext0
 14239 0cf2 0600     		.2byte	0x6
 14240 0cf4 71       		.byte	0x71
 14241 0cf5 00       		.sleb128 0
 14242 0cf6 73       		.byte	0x73
 14243 0cf7 00       		.sleb128 0
 14244 0cf8 22       		.byte	0x22
 14245 0cf9 9F       		.byte	0x9f
 14246 0cfa 00000000 		.4byte	0
 14247 0cfe 00000000 		.4byte	0
 14248              	.LVUS145:
 14249 0d02 02       		.uleb128 .LVU1157
 14250 0d03 03       		.uleb128 .LVU1158
 14251 0d04 03       		.uleb128 .LVU1158
 14252 0d05 01       		.uleb128 .LVU1160
 14253 0d06 01       		.uleb128 .LVU1160
 14254 0d07 02       		.uleb128 .LVU1161
 14255 0d08 00       		.uleb128 .LVU1180
 14256 0d09 00       		.uleb128 .LVU1184
 14257              	.LLST145:
 14258 0d0a 240B0000 		.4byte	.LVL269-.Ltext0
 14259 0d0e 240B0000 		.4byte	.LVL269-.Ltext0
 14260 0d12 0200     		.2byte	0x2
 14261 0d14 30       		.byte	0x30
 14262 0d15 9F       		.byte	0x9f
 14263 0d16 240B0000 		.4byte	.LVL269-.Ltext0
 14264 0d1a 2A0B0000 		.4byte	.LVL270-.Ltext0
 14265 0d1e 0100     		.2byte	0x1
ARM GAS  /tmp/ccaP1CVS.s 			page 377


 14266 0d20 53       		.byte	0x53
 14267 0d21 2A0B0000 		.4byte	.LVL270-.Ltext0
 14268 0d25 2A0B0000 		.4byte	.LVL270-.Ltext0
 14269 0d29 0500     		.2byte	0x5
 14270 0d2b 73       		.byte	0x73
 14271 0d2c 00       		.sleb128 0
 14272 0d2d 32       		.byte	0x32
 14273 0d2e 25       		.byte	0x25
 14274 0d2f 9F       		.byte	0x9f
 14275 0d30 520B0000 		.4byte	.LVL276-.Ltext0
 14276 0d34 560B0000 		.4byte	.LVL278-.Ltext0
 14277 0d38 0100     		.2byte	0x1
 14278 0d3a 53       		.byte	0x53
 14279 0d3b 00000000 		.4byte	0
 14280 0d3f 00000000 		.4byte	0
 14281              	.LLST6:
 14282 0d43 8C000000 		.4byte	.LFB41-.Ltext0
 14283 0d47 8E000000 		.4byte	.LCFI5-.Ltext0
 14284 0d4b 0200     		.2byte	0x2
 14285 0d4d 7D       		.byte	0x7d
 14286 0d4e 00       		.sleb128 0
 14287 0d4f 8E000000 		.4byte	.LCFI5-.Ltext0
 14288 0d53 E0000000 		.4byte	.LFE41-.Ltext0
 14289 0d57 0200     		.2byte	0x2
 14290 0d59 7D       		.byte	0x7d
 14291 0d5a 08       		.sleb128 8
 14292 0d5b 00000000 		.4byte	0
 14293 0d5f 00000000 		.4byte	0
 14294              	.LVUS7:
 14295 0d63 00       		.uleb128 0
 14296 0d64 00       		.uleb128 .LVU63
 14297 0d65 00       		.uleb128 .LVU63
 14298 0d66 00       		.uleb128 0
 14299              	.LLST7:
 14300 0d67 8C000000 		.4byte	.LVL15-.Ltext0
 14301 0d6b 98000000 		.4byte	.LVL16-.Ltext0
 14302 0d6f 0100     		.2byte	0x1
 14303 0d71 50       		.byte	0x50
 14304 0d72 98000000 		.4byte	.LVL16-.Ltext0
 14305 0d76 E0000000 		.4byte	.LFE41-.Ltext0
 14306 0d7a 0400     		.2byte	0x4
 14307 0d7c F3       		.byte	0xf3
 14308 0d7d 01       		.uleb128 0x1
 14309 0d7e 50       		.byte	0x50
 14310 0d7f 9F       		.byte	0x9f
 14311 0d80 00000000 		.4byte	0
 14312 0d84 00000000 		.4byte	0
 14313              	.LVUS8:
 14314 0d88 00       		.uleb128 .LVU76
 14315 0d89 00       		.uleb128 0
 14316              	.LLST8:
 14317 0d8a B8000000 		.4byte	.LVL18-.Ltext0
 14318 0d8e E0000000 		.4byte	.LFE41-.Ltext0
 14319 0d92 0100     		.2byte	0x1
 14320 0d94 55       		.byte	0x55
 14321 0d95 00000000 		.4byte	0
 14322 0d99 00000000 		.4byte	0
ARM GAS  /tmp/ccaP1CVS.s 			page 378


 14323              	.LVUS9:
 14324 0d9d 01       		.uleb128 .LVU82
 14325 0d9e 00       		.uleb128 0
 14326              	.LLST9:
 14327 0d9f CE000000 		.4byte	.LVL20-.Ltext0
 14328 0da3 E0000000 		.4byte	.LFE41-.Ltext0
 14329 0da7 0100     		.2byte	0x1
 14330 0da9 55       		.byte	0x55
 14331 0daa 00000000 		.4byte	0
 14332 0dae 00000000 		.4byte	0
 14333              	.LVUS137:
 14334 0db2 01       		.uleb128 .LVU1113
 14335 0db3 00       		.uleb128 .LVU1115
 14336              	.LLST137:
 14337 0db4 E00A0000 		.4byte	.LVL262-.Ltext0
 14338 0db8 E20A0000 		.4byte	.LVL263-.Ltext0
 14339 0dbc 0100     		.2byte	0x1
 14340 0dbe 50       		.byte	0x50
 14341 0dbf 00000000 		.4byte	0
 14342 0dc3 00000000 		.4byte	0
 14343              	.LVUS135:
 14344 0dc7 00       		.uleb128 0
 14345 0dc8 00       		.uleb128 .LVU1107
 14346 0dc9 00       		.uleb128 .LVU1107
 14347 0dca 00       		.uleb128 0
 14348              	.LLST135:
 14349 0dcb D80A0000 		.4byte	.LVL258-.Ltext0
 14350 0dcf DC0A0000 		.4byte	.LVL260-.Ltext0
 14351 0dd3 0100     		.2byte	0x1
 14352 0dd5 50       		.byte	0x50
 14353 0dd6 DC0A0000 		.4byte	.LVL260-.Ltext0
 14354 0dda DE0A0000 		.4byte	.LFE39-.Ltext0
 14355 0dde 0400     		.2byte	0x4
 14356 0de0 F3       		.byte	0xf3
 14357 0de1 01       		.uleb128 0x1
 14358 0de2 50       		.byte	0x50
 14359 0de3 9F       		.byte	0x9f
 14360 0de4 00000000 		.4byte	0
 14361 0de8 00000000 		.4byte	0
 14362              	.LVUS136:
 14363 0dec 01       		.uleb128 .LVU1105
 14364 0ded 00       		.uleb128 .LVU1107
 14365              	.LLST136:
 14366 0dee DA0A0000 		.4byte	.LVL259-.Ltext0
 14367 0df2 DC0A0000 		.4byte	.LVL260-.Ltext0
 14368 0df6 0100     		.2byte	0x1
 14369 0df8 50       		.byte	0x50
 14370 0df9 00000000 		.4byte	0
 14371 0dfd 00000000 		.4byte	0
 14372              	.LLST129:
 14373 0e01 7C0A0000 		.4byte	.LFB37-.Ltext0
 14374 0e05 7E0A0000 		.4byte	.LCFI39-.Ltext0
 14375 0e09 0200     		.2byte	0x2
 14376 0e0b 7D       		.byte	0x7d
 14377 0e0c 00       		.sleb128 0
 14378 0e0d 7E0A0000 		.4byte	.LCFI39-.Ltext0
 14379 0e11 C80A0000 		.4byte	.LFE37-.Ltext0
ARM GAS  /tmp/ccaP1CVS.s 			page 379


 14380 0e15 0200     		.2byte	0x2
 14381 0e17 7D       		.byte	0x7d
 14382 0e18 10       		.sleb128 16
 14383 0e19 00000000 		.4byte	0
 14384 0e1d 00000000 		.4byte	0
 14385              	.LVUS130:
 14386 0e21 00       		.uleb128 0
 14387 0e22 00       		.uleb128 .LVU1062
 14388 0e23 00       		.uleb128 .LVU1062
 14389 0e24 00       		.uleb128 0
 14390              	.LLST130:
 14391 0e25 7C0A0000 		.4byte	.LVL248-.Ltext0
 14392 0e29 850A0000 		.4byte	.LVL249-1-.Ltext0
 14393 0e2d 0100     		.2byte	0x1
 14394 0e2f 50       		.byte	0x50
 14395 0e30 850A0000 		.4byte	.LVL249-1-.Ltext0
 14396 0e34 C80A0000 		.4byte	.LFE37-.Ltext0
 14397 0e38 0100     		.2byte	0x1
 14398 0e3a 55       		.byte	0x55
 14399 0e3b 00000000 		.4byte	0
 14400 0e3f 00000000 		.4byte	0
 14401              	.LVUS131:
 14402 0e43 00       		.uleb128 0
 14403 0e44 00       		.uleb128 .LVU1062
 14404 0e45 00       		.uleb128 .LVU1062
 14405 0e46 00       		.uleb128 .LVU1086
 14406 0e47 00       		.uleb128 .LVU1086
 14407 0e48 00       		.uleb128 .LVU1090
 14408 0e49 00       		.uleb128 .LVU1090
 14409 0e4a 00       		.uleb128 .LVU1094
 14410 0e4b 00       		.uleb128 .LVU1094
 14411 0e4c 00       		.uleb128 0
 14412              	.LLST131:
 14413 0e4d 7C0A0000 		.4byte	.LVL248-.Ltext0
 14414 0e51 850A0000 		.4byte	.LVL249-1-.Ltext0
 14415 0e55 0100     		.2byte	0x1
 14416 0e57 51       		.byte	0x51
 14417 0e58 850A0000 		.4byte	.LVL249-1-.Ltext0
 14418 0e5c B40A0000 		.4byte	.LVL253-.Ltext0
 14419 0e60 0100     		.2byte	0x1
 14420 0e62 54       		.byte	0x54
 14421 0e63 B40A0000 		.4byte	.LVL253-.Ltext0
 14422 0e67 BC0A0000 		.4byte	.LVL255-.Ltext0
 14423 0e6b 0400     		.2byte	0x4
 14424 0e6d F3       		.byte	0xf3
 14425 0e6e 01       		.uleb128 0x1
 14426 0e6f 51       		.byte	0x51
 14427 0e70 9F       		.byte	0x9f
 14428 0e71 BC0A0000 		.4byte	.LVL255-.Ltext0
 14429 0e75 C20A0000 		.4byte	.LVL257-.Ltext0
 14430 0e79 0100     		.2byte	0x1
 14431 0e7b 54       		.byte	0x54
 14432 0e7c C20A0000 		.4byte	.LVL257-.Ltext0
 14433 0e80 C80A0000 		.4byte	.LFE37-.Ltext0
 14434 0e84 0400     		.2byte	0x4
 14435 0e86 F3       		.byte	0xf3
 14436 0e87 01       		.uleb128 0x1
ARM GAS  /tmp/ccaP1CVS.s 			page 380


 14437 0e88 51       		.byte	0x51
 14438 0e89 9F       		.byte	0x9f
 14439 0e8a 00000000 		.4byte	0
 14440 0e8e 00000000 		.4byte	0
 14441              	.LVUS132:
 14442 0e92 00       		.uleb128 .LVU1086
 14443 0e93 00       		.uleb128 .LVU1090
 14444              	.LLST132:
 14445 0e94 B40A0000 		.4byte	.LVL253-.Ltext0
 14446 0e98 BC0A0000 		.4byte	.LVL255-.Ltext0
 14447 0e9c 0100     		.2byte	0x1
 14448 0e9e 54       		.byte	0x54
 14449 0e9f 00000000 		.4byte	0
 14450 0ea3 00000000 		.4byte	0
 14451              	.LVUS133:
 14452 0ea7 00       		.uleb128 .LVU1067
 14453 0ea8 00       		.uleb128 .LVU1088
 14454 0ea9 00       		.uleb128 .LVU1090
 14455 0eaa 00       		.uleb128 0
 14456              	.LLST133:
 14457 0eab 8E0A0000 		.4byte	.LVL250-.Ltext0
 14458 0eaf B70A0000 		.4byte	.LVL254-1-.Ltext0
 14459 0eb3 0100     		.2byte	0x1
 14460 0eb5 51       		.byte	0x51
 14461 0eb6 BC0A0000 		.4byte	.LVL255-.Ltext0
 14462 0eba C80A0000 		.4byte	.LFE37-.Ltext0
 14463 0ebe 0100     		.2byte	0x1
 14464 0ec0 51       		.byte	0x51
 14465 0ec1 00000000 		.4byte	0
 14466 0ec5 00000000 		.4byte	0
 14467              	.LVUS134:
 14468 0ec9 01       		.uleb128 .LVU1068
 14469 0eca 00       		.uleb128 .LVU1083
 14470 0ecb 00       		.uleb128 .LVU1083
 14471 0ecc 00       		.uleb128 .LVU1084
 14472 0ecd 00       		.uleb128 .LVU1090
 14473 0ece 00       		.uleb128 0
 14474              	.LLST134:
 14475 0ecf 8E0A0000 		.4byte	.LVL250-.Ltext0
 14476 0ed3 AE0A0000 		.4byte	.LVL251-.Ltext0
 14477 0ed7 0700     		.2byte	0x7
 14478 0ed9 71       		.byte	0x71
 14479 0eda 00       		.sleb128 0
 14480 0edb 75       		.byte	0x75
 14481 0edc 04       		.sleb128 4
 14482 0edd 06       		.byte	0x6
 14483 0ede 1C       		.byte	0x1c
 14484 0edf 9F       		.byte	0x9f
 14485 0ee0 AE0A0000 		.4byte	.LVL251-.Ltext0
 14486 0ee4 B10A0000 		.4byte	.LVL252-1-.Ltext0
 14487 0ee8 0600     		.2byte	0x6
 14488 0eea 71       		.byte	0x71
 14489 0eeb 00       		.sleb128 0
 14490 0eec 72       		.byte	0x72
 14491 0eed 00       		.sleb128 0
 14492 0eee 1C       		.byte	0x1c
 14493 0eef 9F       		.byte	0x9f
ARM GAS  /tmp/ccaP1CVS.s 			page 381


 14494 0ef0 BC0A0000 		.4byte	.LVL255-.Ltext0
 14495 0ef4 C80A0000 		.4byte	.LFE37-.Ltext0
 14496 0ef8 0600     		.2byte	0x6
 14497 0efa 71       		.byte	0x71
 14498 0efb 00       		.sleb128 0
 14499 0efc 72       		.byte	0x72
 14500 0efd 00       		.sleb128 0
 14501 0efe 1C       		.byte	0x1c
 14502 0eff 9F       		.byte	0x9f
 14503 0f00 00000000 		.4byte	0
 14504 0f04 00000000 		.4byte	0
 14505              	.LLST127:
 14506 0f08 480A0000 		.4byte	.LFB35-.Ltext0
 14507 0f0c 4A0A0000 		.4byte	.LCFI37-.Ltext0
 14508 0f10 0200     		.2byte	0x2
 14509 0f12 7D       		.byte	0x7d
 14510 0f13 00       		.sleb128 0
 14511 0f14 4A0A0000 		.4byte	.LCFI37-.Ltext0
 14512 0f18 600A0000 		.4byte	.LCFI38-.Ltext0
 14513 0f1c 0200     		.2byte	0x2
 14514 0f1e 7D       		.byte	0x7d
 14515 0f1f 08       		.sleb128 8
 14516 0f20 600A0000 		.4byte	.LCFI38-.Ltext0
 14517 0f24 680A0000 		.4byte	.LFE35-.Ltext0
 14518 0f28 0200     		.2byte	0x2
 14519 0f2a 7D       		.byte	0x7d
 14520 0f2b 00       		.sleb128 0
 14521 0f2c 00000000 		.4byte	0
 14522 0f30 00000000 		.4byte	0
 14523              	.LVUS128:
 14524 0f34 00       		.uleb128 0
 14525 0f35 00       		.uleb128 .LVU1037
 14526 0f36 00       		.uleb128 .LVU1037
 14527 0f37 00       		.uleb128 .LVU1045
 14528 0f38 00       		.uleb128 .LVU1045
 14529 0f39 00       		.uleb128 0
 14530              	.LLST128:
 14531 0f3a 480A0000 		.4byte	.LVL243-.Ltext0
 14532 0f3e 4F0A0000 		.4byte	.LVL244-1-.Ltext0
 14533 0f42 0100     		.2byte	0x1
 14534 0f44 50       		.byte	0x50
 14535 0f45 4F0A0000 		.4byte	.LVL244-1-.Ltext0
 14536 0f49 600A0000 		.4byte	.LVL245-.Ltext0
 14537 0f4d 0100     		.2byte	0x1
 14538 0f4f 54       		.byte	0x54
 14539 0f50 600A0000 		.4byte	.LVL245-.Ltext0
 14540 0f54 680A0000 		.4byte	.LFE35-.Ltext0
 14541 0f58 0400     		.2byte	0x4
 14542 0f5a F3       		.byte	0xf3
 14543 0f5b 01       		.uleb128 0x1
 14544 0f5c 50       		.byte	0x50
 14545 0f5d 9F       		.byte	0x9f
 14546 0f5e 00000000 		.4byte	0
 14547 0f62 00000000 		.4byte	0
 14548              	.LLST123:
 14549 0f66 FC090000 		.4byte	.LFB34-.Ltext0
 14550 0f6a FE090000 		.4byte	.LCFI36-.Ltext0
ARM GAS  /tmp/ccaP1CVS.s 			page 382


 14551 0f6e 0200     		.2byte	0x2
 14552 0f70 7D       		.byte	0x7d
 14553 0f71 00       		.sleb128 0
 14554 0f72 FE090000 		.4byte	.LCFI36-.Ltext0
 14555 0f76 480A0000 		.4byte	.LFE34-.Ltext0
 14556 0f7a 0200     		.2byte	0x2
 14557 0f7c 7D       		.byte	0x7d
 14558 0f7d 18       		.sleb128 24
 14559 0f7e 00000000 		.4byte	0
 14560 0f82 00000000 		.4byte	0
 14561              	.LVUS124:
 14562 0f86 00       		.uleb128 0
 14563 0f87 00       		.uleb128 .LVU1018
 14564 0f88 00       		.uleb128 .LVU1018
 14565 0f89 00       		.uleb128 0
 14566              	.LLST124:
 14567 0f8a FC090000 		.4byte	.LVL236-.Ltext0
 14568 0f8e 0D0A0000 		.4byte	.LVL239-1-.Ltext0
 14569 0f92 0100     		.2byte	0x1
 14570 0f94 50       		.byte	0x50
 14571 0f95 0D0A0000 		.4byte	.LVL239-1-.Ltext0
 14572 0f99 480A0000 		.4byte	.LFE34-.Ltext0
 14573 0f9d 0400     		.2byte	0x4
 14574 0f9f F3       		.byte	0xf3
 14575 0fa0 01       		.uleb128 0x1
 14576 0fa1 50       		.byte	0x50
 14577 0fa2 9F       		.byte	0x9f
 14578 0fa3 00000000 		.4byte	0
 14579 0fa7 00000000 		.4byte	0
 14580              	.LVUS125:
 14581 0fab 00       		.uleb128 0
 14582 0fac 00       		.uleb128 .LVU1011
 14583 0fad 00       		.uleb128 .LVU1011
 14584 0fae 00       		.uleb128 0
 14585              	.LLST125:
 14586 0faf FC090000 		.4byte	.LVL236-.Ltext0
 14587 0fb3 040A0000 		.4byte	.LVL237-.Ltext0
 14588 0fb7 0100     		.2byte	0x1
 14589 0fb9 51       		.byte	0x51
 14590 0fba 040A0000 		.4byte	.LVL237-.Ltext0
 14591 0fbe 480A0000 		.4byte	.LFE34-.Ltext0
 14592 0fc2 0400     		.2byte	0x4
 14593 0fc4 F3       		.byte	0xf3
 14594 0fc5 01       		.uleb128 0x1
 14595 0fc6 51       		.byte	0x51
 14596 0fc7 9F       		.byte	0x9f
 14597 0fc8 00000000 		.4byte	0
 14598 0fcc 00000000 		.4byte	0
 14599              	.LVUS126:
 14600 0fd0 01       		.uleb128 .LVU1014
 14601 0fd1 00       		.uleb128 .LVU1030
 14602              	.LLST126:
 14603 0fd2 080A0000 		.4byte	.LVL238-.Ltext0
 14604 0fd6 420A0000 		.4byte	.LVL242-.Ltext0
 14605 0fda 0100     		.2byte	0x1
 14606 0fdc 55       		.byte	0x55
 14607 0fdd 00000000 		.4byte	0
ARM GAS  /tmp/ccaP1CVS.s 			page 383


 14608 0fe1 00000000 		.4byte	0
 14609              	.LLST119:
 14610 0fe5 A0090000 		.4byte	.LFB33-.Ltext0
 14611 0fe9 A4090000 		.4byte	.LCFI35-.Ltext0
 14612 0fed 0200     		.2byte	0x2
 14613 0fef 7D       		.byte	0x7d
 14614 0ff0 00       		.sleb128 0
 14615 0ff1 A4090000 		.4byte	.LCFI35-.Ltext0
 14616 0ff5 FC090000 		.4byte	.LFE33-.Ltext0
 14617 0ff9 0200     		.2byte	0x2
 14618 0ffb 7D       		.byte	0x7d
 14619 0ffc 10       		.sleb128 16
 14620 0ffd 00000000 		.4byte	0
 14621 1001 00000000 		.4byte	0
 14622              	.LVUS120:
 14623 1005 00       		.uleb128 0
 14624 1006 00       		.uleb128 .LVU983
 14625 1007 00       		.uleb128 .LVU983
 14626 1008 00       		.uleb128 0
 14627              	.LLST120:
 14628 1009 A0090000 		.4byte	.LVL227-.Ltext0
 14629 100d AE090000 		.4byte	.LVL229-.Ltext0
 14630 1011 0100     		.2byte	0x1
 14631 1013 50       		.byte	0x50
 14632 1014 AE090000 		.4byte	.LVL229-.Ltext0
 14633 1018 FC090000 		.4byte	.LFE33-.Ltext0
 14634 101c 0400     		.2byte	0x4
 14635 101e F3       		.byte	0xf3
 14636 101f 01       		.uleb128 0x1
 14637 1020 50       		.byte	0x50
 14638 1021 9F       		.byte	0x9f
 14639 1022 00000000 		.4byte	0
 14640 1026 00000000 		.4byte	0
 14641              	.LVUS121:
 14642 102a 00       		.uleb128 .LVU979
 14643 102b 00       		.uleb128 0
 14644              	.LLST121:
 14645 102c A6090000 		.4byte	.LVL228-.Ltext0
 14646 1030 FC090000 		.4byte	.LFE33-.Ltext0
 14647 1034 0100     		.2byte	0x1
 14648 1036 55       		.byte	0x55
 14649 1037 00000000 		.4byte	0
 14650 103b 00000000 		.4byte	0
 14651              	.LVUS122:
 14652 103f 01       		.uleb128 .LVU997
 14653 1040 00       		.uleb128 .LVU1000
 14654 1041 00       		.uleb128 .LVU1000
 14655 1042 00       		.uleb128 .LVU1003
 14656              	.LLST122:
 14657 1043 E4090000 		.4byte	.LVL233-.Ltext0
 14658 1047 EA090000 		.4byte	.LVL234-.Ltext0
 14659 104b 0200     		.2byte	0x2
 14660 104d 31       		.byte	0x31
 14661 104e 9F       		.byte	0x9f
 14662 104f EA090000 		.4byte	.LVL234-.Ltext0
 14663 1053 F0090000 		.4byte	.LVL235-.Ltext0
 14664 1057 0200     		.2byte	0x2
ARM GAS  /tmp/ccaP1CVS.s 			page 384


 14665 1059 30       		.byte	0x30
 14666 105a 9F       		.byte	0x9f
 14667 105b 00000000 		.4byte	0
 14668 105f 00000000 		.4byte	0
 14669              	.LLST115:
 14670 1063 74090000 		.4byte	.LFB32-.Ltext0
 14671 1067 76090000 		.4byte	.LCFI33-.Ltext0
 14672 106b 0200     		.2byte	0x2
 14673 106d 7D       		.byte	0x7d
 14674 106e 00       		.sleb128 0
 14675 106f 76090000 		.4byte	.LCFI33-.Ltext0
 14676 1073 90090000 		.4byte	.LCFI34-.Ltext0
 14677 1077 0200     		.2byte	0x2
 14678 1079 7D       		.byte	0x7d
 14679 107a 10       		.sleb128 16
 14680 107b 90090000 		.4byte	.LCFI34-.Ltext0
 14681 107f A0090000 		.4byte	.LFE32-.Ltext0
 14682 1083 0200     		.2byte	0x2
 14683 1085 7D       		.byte	0x7d
 14684 1086 00       		.sleb128 0
 14685 1087 00000000 		.4byte	0
 14686 108b 00000000 		.4byte	0
 14687              	.LVUS116:
 14688 108f 00       		.uleb128 0
 14689 1090 00       		.uleb128 .LVU965
 14690 1091 00       		.uleb128 .LVU965
 14691 1092 00       		.uleb128 0
 14692              	.LLST116:
 14693 1093 74090000 		.4byte	.LVL221-.Ltext0
 14694 1097 83090000 		.4byte	.LVL223-1-.Ltext0
 14695 109b 0100     		.2byte	0x1
 14696 109d 50       		.byte	0x50
 14697 109e 83090000 		.4byte	.LVL223-1-.Ltext0
 14698 10a2 A0090000 		.4byte	.LFE32-.Ltext0
 14699 10a6 0400     		.2byte	0x4
 14700 10a8 F3       		.byte	0xf3
 14701 10a9 01       		.uleb128 0x1
 14702 10aa 50       		.byte	0x50
 14703 10ab 9F       		.byte	0x9f
 14704 10ac 00000000 		.4byte	0
 14705 10b0 00000000 		.4byte	0
 14706              	.LVUS117:
 14707 10b4 00       		.uleb128 0
 14708 10b5 00       		.uleb128 .LVU964
 14709 10b6 00       		.uleb128 .LVU964
 14710 10b7 00       		.uleb128 .LVU967
 14711 10b8 00       		.uleb128 .LVU971
 14712 10b9 00       		.uleb128 0
 14713              	.LLST117:
 14714 10ba 74090000 		.4byte	.LVL221-.Ltext0
 14715 10be 7E090000 		.4byte	.LVL222-.Ltext0
 14716 10c2 0100     		.2byte	0x1
 14717 10c4 51       		.byte	0x51
 14718 10c5 7E090000 		.4byte	.LVL222-.Ltext0
 14719 10c9 86090000 		.4byte	.LVL224-.Ltext0
 14720 10cd 0100     		.2byte	0x1
 14721 10cf 55       		.byte	0x55
ARM GAS  /tmp/ccaP1CVS.s 			page 385


 14722 10d0 99090000 		.4byte	.LVL226-1-.Ltext0
 14723 10d4 A0090000 		.4byte	.LFE32-.Ltext0
 14724 10d8 1000     		.2byte	0x10
 14725 10da F3       		.byte	0xf3
 14726 10db 01       		.uleb128 0x1
 14727 10dc 51       		.byte	0x51
 14728 10dd 09       		.byte	0x9
 14729 10de FF       		.byte	0xff
 14730 10df F3       		.byte	0xf3
 14731 10e0 01       		.uleb128 0x1
 14732 10e1 52       		.byte	0x52
 14733 10e2 30       		.byte	0x30
 14734 10e3 29       		.byte	0x29
 14735 10e4 28       		.byte	0x28
 14736 10e5 0100     		.2byte	0x1
 14737 10e7 16       		.byte	0x16
 14738 10e8 13       		.byte	0x13
 14739 10e9 9F       		.byte	0x9f
 14740 10ea 00000000 		.4byte	0
 14741 10ee 00000000 		.4byte	0
 14742              	.LVUS118:
 14743 10f2 00       		.uleb128 0
 14744 10f3 00       		.uleb128 .LVU965
 14745 10f4 00       		.uleb128 .LVU965
 14746 10f5 00       		.uleb128 .LVU970
 14747 10f6 00       		.uleb128 .LVU970
 14748 10f7 00       		.uleb128 .LVU971
 14749 10f8 00       		.uleb128 .LVU971
 14750 10f9 00       		.uleb128 0
 14751              	.LLST118:
 14752 10fa 74090000 		.4byte	.LVL221-.Ltext0
 14753 10fe 83090000 		.4byte	.LVL223-1-.Ltext0
 14754 1102 0100     		.2byte	0x1
 14755 1104 52       		.byte	0x52
 14756 1105 83090000 		.4byte	.LVL223-1-.Ltext0
 14757 1109 90090000 		.4byte	.LVL225-.Ltext0
 14758 110d 0100     		.2byte	0x1
 14759 110f 54       		.byte	0x54
 14760 1110 90090000 		.4byte	.LVL225-.Ltext0
 14761 1114 99090000 		.4byte	.LVL226-1-.Ltext0
 14762 1118 0100     		.2byte	0x1
 14763 111a 51       		.byte	0x51
 14764 111b 99090000 		.4byte	.LVL226-1-.Ltext0
 14765 111f A0090000 		.4byte	.LFE32-.Ltext0
 14766 1123 0400     		.2byte	0x4
 14767 1125 F3       		.byte	0xf3
 14768 1126 01       		.uleb128 0x1
 14769 1127 52       		.byte	0x52
 14770 1128 9F       		.byte	0x9f
 14771 1129 00000000 		.4byte	0
 14772 112d 00000000 		.4byte	0
 14773              	.LLST111:
 14774 1131 4C090000 		.4byte	.LFB31-.Ltext0
 14775 1135 4E090000 		.4byte	.LCFI31-.Ltext0
 14776 1139 0200     		.2byte	0x2
 14777 113b 7D       		.byte	0x7d
 14778 113c 00       		.sleb128 0
ARM GAS  /tmp/ccaP1CVS.s 			page 386


 14779 113d 4E090000 		.4byte	.LCFI31-.Ltext0
 14780 1141 68090000 		.4byte	.LCFI32-.Ltext0
 14781 1145 0200     		.2byte	0x2
 14782 1147 7D       		.byte	0x7d
 14783 1148 08       		.sleb128 8
 14784 1149 68090000 		.4byte	.LCFI32-.Ltext0
 14785 114d 74090000 		.4byte	.LFE31-.Ltext0
 14786 1151 0200     		.2byte	0x2
 14787 1153 7D       		.byte	0x7d
 14788 1154 00       		.sleb128 0
 14789 1155 00000000 		.4byte	0
 14790 1159 00000000 		.4byte	0
 14791              	.LVUS112:
 14792 115d 00       		.uleb128 0
 14793 115e 00       		.uleb128 .LVU954
 14794 115f 00       		.uleb128 .LVU954
 14795 1160 00       		.uleb128 0
 14796              	.LLST112:
 14797 1161 4C090000 		.4byte	.LVL215-.Ltext0
 14798 1165 61090000 		.4byte	.LVL218-1-.Ltext0
 14799 1169 0100     		.2byte	0x1
 14800 116b 50       		.byte	0x50
 14801 116c 61090000 		.4byte	.LVL218-1-.Ltext0
 14802 1170 74090000 		.4byte	.LFE31-.Ltext0
 14803 1174 0400     		.2byte	0x4
 14804 1176 F3       		.byte	0xf3
 14805 1177 01       		.uleb128 0x1
 14806 1178 50       		.byte	0x50
 14807 1179 9F       		.byte	0x9f
 14808 117a 00000000 		.4byte	0
 14809 117e 00000000 		.4byte	0
 14810              	.LVUS113:
 14811 1182 00       		.uleb128 0
 14812 1183 00       		.uleb128 .LVU949
 14813 1184 00       		.uleb128 .LVU949
 14814 1185 00       		.uleb128 0
 14815              	.LLST113:
 14816 1186 4C090000 		.4byte	.LVL215-.Ltext0
 14817 118a 56090000 		.4byte	.LVL216-.Ltext0
 14818 118e 0100     		.2byte	0x1
 14819 1190 51       		.byte	0x51
 14820 1191 56090000 		.4byte	.LVL216-.Ltext0
 14821 1195 74090000 		.4byte	.LFE31-.Ltext0
 14822 1199 0400     		.2byte	0x4
 14823 119b F3       		.byte	0xf3
 14824 119c 01       		.uleb128 0x1
 14825 119d 51       		.byte	0x51
 14826 119e 9F       		.byte	0x9f
 14827 119f 00000000 		.4byte	0
 14828 11a3 00000000 		.4byte	0
 14829              	.LVUS114:
 14830 11a7 00       		.uleb128 0
 14831 11a8 00       		.uleb128 .LVU950
 14832 11a9 00       		.uleb128 .LVU950
 14833 11aa 00       		.uleb128 .LVU956
 14834 11ab 00       		.uleb128 .LVU956
 14835 11ac 00       		.uleb128 .LVU957
ARM GAS  /tmp/ccaP1CVS.s 			page 387


 14836 11ad 00       		.uleb128 .LVU957
 14837 11ae 00       		.uleb128 0
 14838              	.LLST114:
 14839 11af 4C090000 		.4byte	.LVL215-.Ltext0
 14840 11b3 58090000 		.4byte	.LVL217-.Ltext0
 14841 11b7 0100     		.2byte	0x1
 14842 11b9 52       		.byte	0x52
 14843 11ba 58090000 		.4byte	.LVL217-.Ltext0
 14844 11be 68090000 		.4byte	.LVL219-.Ltext0
 14845 11c2 0100     		.2byte	0x1
 14846 11c4 54       		.byte	0x54
 14847 11c5 68090000 		.4byte	.LVL219-.Ltext0
 14848 11c9 6D090000 		.4byte	.LVL220-1-.Ltext0
 14849 11cd 0100     		.2byte	0x1
 14850 11cf 50       		.byte	0x50
 14851 11d0 6D090000 		.4byte	.LVL220-1-.Ltext0
 14852 11d4 74090000 		.4byte	.LFE31-.Ltext0
 14853 11d8 0400     		.2byte	0x4
 14854 11da F3       		.byte	0xf3
 14855 11db 01       		.uleb128 0x1
 14856 11dc 52       		.byte	0x52
 14857 11dd 9F       		.byte	0x9f
 14858 11de 00000000 		.4byte	0
 14859 11e2 00000000 		.4byte	0
 14860              	.LLST108:
 14861 11e6 2C090000 		.4byte	.LFB30-.Ltext0
 14862 11ea 2E090000 		.4byte	.LCFI29-.Ltext0
 14863 11ee 0200     		.2byte	0x2
 14864 11f0 7D       		.byte	0x7d
 14865 11f1 00       		.sleb128 0
 14866 11f2 2E090000 		.4byte	.LCFI29-.Ltext0
 14867 11f6 40090000 		.4byte	.LCFI30-.Ltext0
 14868 11fa 0200     		.2byte	0x2
 14869 11fc 7D       		.byte	0x7d
 14870 11fd 08       		.sleb128 8
 14871 11fe 40090000 		.4byte	.LCFI30-.Ltext0
 14872 1202 4C090000 		.4byte	.LFE30-.Ltext0
 14873 1206 0200     		.2byte	0x2
 14874 1208 7D       		.byte	0x7d
 14875 1209 00       		.sleb128 0
 14876 120a 00000000 		.4byte	0
 14877 120e 00000000 		.4byte	0
 14878              	.LVUS109:
 14879 1212 00       		.uleb128 0
 14880 1213 00       		.uleb128 .LVU938
 14881 1214 00       		.uleb128 .LVU938
 14882 1215 00       		.uleb128 0
 14883              	.LLST109:
 14884 1216 2C090000 		.4byte	.LVL210-.Ltext0
 14885 121a 39090000 		.4byte	.LVL212-1-.Ltext0
 14886 121e 0100     		.2byte	0x1
 14887 1220 50       		.byte	0x50
 14888 1221 39090000 		.4byte	.LVL212-1-.Ltext0
 14889 1225 4C090000 		.4byte	.LFE30-.Ltext0
 14890 1229 0400     		.2byte	0x4
 14891 122b F3       		.byte	0xf3
 14892 122c 01       		.uleb128 0x1
ARM GAS  /tmp/ccaP1CVS.s 			page 388


 14893 122d 50       		.byte	0x50
 14894 122e 9F       		.byte	0x9f
 14895 122f 00000000 		.4byte	0
 14896 1233 00000000 		.4byte	0
 14897              	.LVUS110:
 14898 1237 00       		.uleb128 0
 14899 1238 00       		.uleb128 .LVU937
 14900 1239 00       		.uleb128 .LVU937
 14901 123a 00       		.uleb128 .LVU940
 14902 123b 00       		.uleb128 .LVU940
 14903 123c 00       		.uleb128 .LVU941
 14904 123d 00       		.uleb128 .LVU941
 14905 123e 00       		.uleb128 0
 14906              	.LLST110:
 14907 123f 2C090000 		.4byte	.LVL210-.Ltext0
 14908 1243 34090000 		.4byte	.LVL211-.Ltext0
 14909 1247 0100     		.2byte	0x1
 14910 1249 51       		.byte	0x51
 14911 124a 34090000 		.4byte	.LVL211-.Ltext0
 14912 124e 40090000 		.4byte	.LVL213-.Ltext0
 14913 1252 0100     		.2byte	0x1
 14914 1254 54       		.byte	0x54
 14915 1255 40090000 		.4byte	.LVL213-.Ltext0
 14916 1259 45090000 		.4byte	.LVL214-1-.Ltext0
 14917 125d 0100     		.2byte	0x1
 14918 125f 50       		.byte	0x50
 14919 1260 45090000 		.4byte	.LVL214-1-.Ltext0
 14920 1264 4C090000 		.4byte	.LFE30-.Ltext0
 14921 1268 0400     		.2byte	0x4
 14922 126a F3       		.byte	0xf3
 14923 126b 01       		.uleb128 0x1
 14924 126c 51       		.byte	0x51
 14925 126d 9F       		.byte	0x9f
 14926 126e 00000000 		.4byte	0
 14927 1272 00000000 		.4byte	0
 14928              	.LLST81:
 14929 1276 30060000 		.4byte	.LFB28-.Ltext0
 14930 127a 34060000 		.4byte	.LCFI22-.Ltext0
 14931 127e 0200     		.2byte	0x2
 14932 1280 7D       		.byte	0x7d
 14933 1281 00       		.sleb128 0
 14934 1282 34060000 		.4byte	.LCFI22-.Ltext0
 14935 1286 FC060000 		.4byte	.LFE28-.Ltext0
 14936 128a 0200     		.2byte	0x2
 14937 128c 7D       		.byte	0x7d
 14938 128d 28       		.sleb128 40
 14939 128e 00000000 		.4byte	0
 14940 1292 00000000 		.4byte	0
 14941              	.LVUS82:
 14942 1296 00       		.uleb128 .LVU678
 14943 1297 00       		.uleb128 .LVU699
 14944              	.LLST82:
 14945 1298 A6060000 		.4byte	.LVL151-.Ltext0
 14946 129c E6060000 		.4byte	.LVL157-.Ltext0
 14947 12a0 0100     		.2byte	0x1
 14948 12a2 56       		.byte	0x56
 14949 12a3 00000000 		.4byte	0
ARM GAS  /tmp/ccaP1CVS.s 			page 389


 14950 12a7 00000000 		.4byte	0
 14951              	.LVUS83:
 14952 12ab 00       		.uleb128 .LVU680
 14953 12ac 00       		.uleb128 .LVU685
 14954              	.LLST83:
 14955 12ad A8060000 		.4byte	.LVL152-.Ltext0
 14956 12b1 B5060000 		.4byte	.LVL153-1-.Ltext0
 14957 12b5 0100     		.2byte	0x1
 14958 12b7 53       		.byte	0x53
 14959 12b8 00000000 		.4byte	0
 14960 12bc 00000000 		.4byte	0
 14961              	.LVUS84:
 14962 12c0 04       		.uleb128 .LVU631
 14963 12c1 00       		.uleb128 .LVU657
 14964 12c2 00       		.uleb128 .LVU657
 14965 12c3 00       		.uleb128 .LVU665
 14966 12c4 00       		.uleb128 .LVU665
 14967 12c5 00       		.uleb128 .LVU666
 14968 12c6 00       		.uleb128 .LVU666
 14969 12c7 00       		.uleb128 .LVU698
 14970 12c8 00       		.uleb128 .LVU699
 14971 12c9 00       		.uleb128 0
 14972              	.LLST84:
 14973 12ca 30060000 		.4byte	.LVL141-.Ltext0
 14974 12ce 64060000 		.4byte	.LVL147-.Ltext0
 14975 12d2 0200     		.2byte	0x2
 14976 12d4 30       		.byte	0x30
 14977 12d5 9F       		.byte	0x9f
 14978 12d6 64060000 		.4byte	.LVL147-.Ltext0
 14979 12da 86060000 		.4byte	.LVL149-.Ltext0
 14980 12de 0100     		.2byte	0x1
 14981 12e0 55       		.byte	0x55
 14982 12e1 86060000 		.4byte	.LVL149-.Ltext0
 14983 12e5 92060000 		.4byte	.LVL150-.Ltext0
 14984 12e9 0200     		.2byte	0x2
 14985 12eb 30       		.byte	0x30
 14986 12ec 9F       		.byte	0x9f
 14987 12ed 92060000 		.4byte	.LVL150-.Ltext0
 14988 12f1 E4060000 		.4byte	.LVL156-.Ltext0
 14989 12f5 0100     		.2byte	0x1
 14990 12f7 55       		.byte	0x55
 14991 12f8 E6060000 		.4byte	.LVL157-.Ltext0
 14992 12fc FC060000 		.4byte	.LFE28-.Ltext0
 14993 1300 0200     		.2byte	0x2
 14994 1302 30       		.byte	0x30
 14995 1303 9F       		.byte	0x9f
 14996 1304 00000000 		.4byte	0
 14997 1308 00000000 		.4byte	0
 14998              	.LVUS85:
 14999 130c 00       		.uleb128 .LVU639
 15000 130d 00       		.uleb128 .LVU660
 15001 130e 00       		.uleb128 .LVU665
 15002 130f 00       		.uleb128 .LVU699
 15003              	.LLST85:
 15004 1310 42060000 		.4byte	.LVL142-.Ltext0
 15005 1314 76060000 		.4byte	.LVL148-.Ltext0
 15006 1318 0100     		.2byte	0x1
ARM GAS  /tmp/ccaP1CVS.s 			page 390


 15007 131a 57       		.byte	0x57
 15008 131b 86060000 		.4byte	.LVL149-.Ltext0
 15009 131f E6060000 		.4byte	.LVL157-.Ltext0
 15010 1323 0100     		.2byte	0x1
 15011 1325 57       		.byte	0x57
 15012 1326 00000000 		.4byte	0
 15013 132a 00000000 		.4byte	0
 15014              	.LVUS86:
 15015 132e 00       		.uleb128 .LVU646
 15016 132f 00       		.uleb128 .LVU649
 15017 1330 00       		.uleb128 .LVU649
 15018 1331 00       		.uleb128 .LVU650
 15019              	.LLST86:
 15020 1332 48060000 		.4byte	.LVL143-.Ltext0
 15021 1336 52060000 		.4byte	.LVL144-.Ltext0
 15022 133a 0100     		.2byte	0x1
 15023 133c 53       		.byte	0x53
 15024 133d 52060000 		.4byte	.LVL144-.Ltext0
 15025 1341 58060000 		.4byte	.LVL145-.Ltext0
 15026 1345 0500     		.2byte	0x5
 15027 1347 03       		.byte	0x3
 15028 1348 20000000 		.4byte	pxOverflowDelayedTaskList
 15029 134c 00000000 		.4byte	0
 15030 1350 00000000 		.4byte	0
 15031              	.LLST158:
 15032 1354 C00B0000 		.4byte	.LFB27-.Ltext0
 15033 1358 C40B0000 		.4byte	.LCFI42-.Ltext0
 15034 135c 0200     		.2byte	0x2
 15035 135e 7D       		.byte	0x7d
 15036 135f 00       		.sleb128 0
 15037 1360 C40B0000 		.4byte	.LCFI42-.Ltext0
 15038 1364 580C0000 		.4byte	.LFE27-.Ltext0
 15039 1368 0200     		.2byte	0x2
 15040 136a 7D       		.byte	0x7d
 15041 136b 28       		.sleb128 40
 15042 136c 00000000 		.4byte	0
 15043 1370 00000000 		.4byte	0
 15044              	.LVUS159:
 15045 1374 00       		.uleb128 0
 15046 1375 00       		.uleb128 .LVU1244
 15047 1376 00       		.uleb128 .LVU1244
 15048 1377 00       		.uleb128 .LVU1273
 15049 1378 00       		.uleb128 .LVU1273
 15050 1379 00       		.uleb128 0
 15051              	.LLST159:
 15052 137a C00B0000 		.4byte	.LVL286-.Ltext0
 15053 137e E80B0000 		.4byte	.LVL288-.Ltext0
 15054 1382 0100     		.2byte	0x1
 15055 1384 50       		.byte	0x50
 15056 1385 E80B0000 		.4byte	.LVL288-.Ltext0
 15057 1389 480C0000 		.4byte	.LVL302-.Ltext0
 15058 138d 0100     		.2byte	0x1
 15059 138f 55       		.byte	0x55
 15060 1390 480C0000 		.4byte	.LVL302-.Ltext0
 15061 1394 580C0000 		.4byte	.LFE27-.Ltext0
 15062 1398 0100     		.2byte	0x1
 15063 139a 50       		.byte	0x50
ARM GAS  /tmp/ccaP1CVS.s 			page 391


 15064 139b 00000000 		.4byte	0
 15065 139f 00000000 		.4byte	0
 15066              	.LVUS160:
 15067 13a3 00       		.uleb128 0
 15068 13a4 00       		.uleb128 .LVU1244
 15069 13a5 00       		.uleb128 .LVU1244
 15070 13a6 00       		.uleb128 .LVU1273
 15071 13a7 00       		.uleb128 .LVU1273
 15072 13a8 00       		.uleb128 0
 15073              	.LLST160:
 15074 13a9 C00B0000 		.4byte	.LVL286-.Ltext0
 15075 13ad E80B0000 		.4byte	.LVL288-.Ltext0
 15076 13b1 0100     		.2byte	0x1
 15077 13b3 51       		.byte	0x51
 15078 13b4 E80B0000 		.4byte	.LVL288-.Ltext0
 15079 13b8 480C0000 		.4byte	.LVL302-.Ltext0
 15080 13bc 0400     		.2byte	0x4
 15081 13be F3       		.byte	0xf3
 15082 13bf 01       		.uleb128 0x1
 15083 13c0 51       		.byte	0x51
 15084 13c1 9F       		.byte	0x9f
 15085 13c2 480C0000 		.4byte	.LVL302-.Ltext0
 15086 13c6 580C0000 		.4byte	.LFE27-.Ltext0
 15087 13ca 0100     		.2byte	0x1
 15088 13cc 51       		.byte	0x51
 15089 13cd 00000000 		.4byte	0
 15090 13d1 00000000 		.4byte	0
 15091              	.LVUS161:
 15092 13d5 00       		.uleb128 0
 15093 13d6 00       		.uleb128 .LVU1235
 15094 13d7 00       		.uleb128 .LVU1235
 15095 13d8 00       		.uleb128 0
 15096              	.LLST161:
 15097 13d9 C00B0000 		.4byte	.LVL286-.Ltext0
 15098 13dd CD0B0000 		.4byte	.LVL287-1-.Ltext0
 15099 13e1 0100     		.2byte	0x1
 15100 13e3 52       		.byte	0x52
 15101 13e4 CD0B0000 		.4byte	.LVL287-1-.Ltext0
 15102 13e8 580C0000 		.4byte	.LFE27-.Ltext0
 15103 13ec 0100     		.2byte	0x1
 15104 13ee 57       		.byte	0x57
 15105 13ef 00000000 		.4byte	0
 15106 13f3 00000000 		.4byte	0
 15107              	.LVUS162:
 15108 13f7 02       		.uleb128 .LVU1230
 15109 13f8 00       		.uleb128 .LVU1244
 15110 13f9 00       		.uleb128 .LVU1244
 15111 13fa 00       		.uleb128 .LVU1273
 15112 13fb 00       		.uleb128 .LVU1273
 15113 13fc 00       		.uleb128 0
 15114              	.LLST162:
 15115 13fd C00B0000 		.4byte	.LVL286-.Ltext0
 15116 1401 E80B0000 		.4byte	.LVL288-.Ltext0
 15117 1405 0200     		.2byte	0x2
 15118 1407 30       		.byte	0x30
 15119 1408 9F       		.byte	0x9f
 15120 1409 E80B0000 		.4byte	.LVL288-.Ltext0
ARM GAS  /tmp/ccaP1CVS.s 			page 392


 15121 140d 480C0000 		.4byte	.LVL302-.Ltext0
 15122 1411 0100     		.2byte	0x1
 15123 1413 54       		.byte	0x54
 15124 1414 480C0000 		.4byte	.LVL302-.Ltext0
 15125 1418 580C0000 		.4byte	.LFE27-.Ltext0
 15126 141c 0200     		.2byte	0x2
 15127 141e 30       		.byte	0x30
 15128 141f 9F       		.byte	0x9f
 15129 1420 00000000 		.4byte	0
 15130 1424 00000000 		.4byte	0
 15131              	.LVUS163:
 15132 1428 02       		.uleb128 .LVU1230
 15133 1429 00       		.uleb128 .LVU1244
 15134 142a 00       		.uleb128 .LVU1244
 15135 142b 00       		.uleb128 .LVU1268
 15136 142c 00       		.uleb128 .LVU1273
 15137 142d 00       		.uleb128 0
 15138              	.LLST163:
 15139 142e C00B0000 		.4byte	.LVL286-.Ltext0
 15140 1432 E80B0000 		.4byte	.LVL288-.Ltext0
 15141 1436 0200     		.2byte	0x2
 15142 1438 35       		.byte	0x35
 15143 1439 9F       		.byte	0x9f
 15144 143a E80B0000 		.4byte	.LVL288-.Ltext0
 15145 143e 3E0C0000 		.4byte	.LVL300-.Ltext0
 15146 1442 0100     		.2byte	0x1
 15147 1444 56       		.byte	0x56
 15148 1445 480C0000 		.4byte	.LVL302-.Ltext0
 15149 1449 580C0000 		.4byte	.LFE27-.Ltext0
 15150 144d 0200     		.2byte	0x2
 15151 144f 35       		.byte	0x35
 15152 1450 9F       		.byte	0x9f
 15153 1451 00000000 		.4byte	0
 15154 1455 00000000 		.4byte	0
 15155              	.LVUS79:
 15156 1459 00       		.uleb128 0
 15157 145a 00       		.uleb128 .LVU623
 15158              	.LLST79:
 15159 145b 20060000 		.4byte	.LVL138-.Ltext0
 15160 145f 26060000 		.4byte	.LVL139-.Ltext0
 15161 1463 0100     		.2byte	0x1
 15162 1465 50       		.byte	0x50
 15163 1466 00000000 		.4byte	0
 15164 146a 00000000 		.4byte	0
 15165              	.LVUS80:
 15166 146e 00       		.uleb128 .LVU623
 15167 146f 00       		.uleb128 .LVU626
 15168 1470 00       		.uleb128 .LVU626
 15169 1471 00       		.uleb128 0
 15170              	.LLST80:
 15171 1472 26060000 		.4byte	.LVL139-.Ltext0
 15172 1476 28060000 		.4byte	.LVL140-.Ltext0
 15173 147a 0100     		.2byte	0x1
 15174 147c 50       		.byte	0x50
 15175 147d 28060000 		.4byte	.LVL140-.Ltext0
 15176 1481 30060000 		.4byte	.LFE26-.Ltext0
 15177 1485 0300     		.2byte	0x3
ARM GAS  /tmp/ccaP1CVS.s 			page 393


 15178 1487 70       		.byte	0x70
 15179 1488 4C       		.sleb128 -52
 15180 1489 9F       		.byte	0x9f
 15181 148a 00000000 		.4byte	0
 15182 148e 00000000 		.4byte	0
 15183              	.LLST87:
 15184 1492 FC060000 		.4byte	.LFB22-.Ltext0
 15185 1496 00070000 		.4byte	.LCFI23-.Ltext0
 15186 149a 0200     		.2byte	0x2
 15187 149c 7D       		.byte	0x7d
 15188 149d 00       		.sleb128 0
 15189 149e 00070000 		.4byte	.LCFI23-.Ltext0
 15190 14a2 BC070000 		.4byte	.LFE22-.Ltext0
 15191 14a6 0200     		.2byte	0x2
 15192 14a8 7D       		.byte	0x7d
 15193 14a9 20       		.sleb128 32
 15194 14aa 00000000 		.4byte	0
 15195 14ae 00000000 		.4byte	0
 15196              	.LVUS88:
 15197 14b2 02       		.uleb128 .LVU705
 15198 14b3 00       		.uleb128 .LVU715
 15199 14b4 00       		.uleb128 .LVU720
 15200 14b5 00       		.uleb128 .LVU724
 15201 14b6 00       		.uleb128 .LVU726
 15202 14b7 00       		.uleb128 .LVU740
 15203              	.LLST88:
 15204 14b8 FC060000 		.4byte	.LVL158-.Ltext0
 15205 14bc 16070000 		.4byte	.LVL160-.Ltext0
 15206 14c0 0200     		.2byte	0x2
 15207 14c2 30       		.byte	0x30
 15208 14c3 9F       		.byte	0x9f
 15209 14c4 22070000 		.4byte	.LVL163-.Ltext0
 15210 14c8 34070000 		.4byte	.LVL164-.Ltext0
 15211 14cc 0200     		.2byte	0x2
 15212 14ce 30       		.byte	0x30
 15213 14cf 9F       		.byte	0x9f
 15214 14d0 3A070000 		.4byte	.LVL165-.Ltext0
 15215 14d4 70070000 		.4byte	.LVL169-.Ltext0
 15216 14d8 0100     		.2byte	0x1
 15217 14da 55       		.byte	0x55
 15218 14db 00000000 		.4byte	0
 15219 14df 00000000 		.4byte	0
 15220              	.LVUS89:
 15221 14e3 03       		.uleb128 .LVU706
 15222 14e4 00       		.uleb128 .LVU716
 15223 14e5 00       		.uleb128 .LVU716
 15224 14e6 00       		.uleb128 .LVU720
 15225 14e7 00       		.uleb128 .LVU720
 15226 14e8 01       		.uleb128 .LVU770
 15227 14e9 01       		.uleb128 .LVU770
 15228 14ea 00       		.uleb128 0
 15229              	.LLST89:
 15230 14eb FC060000 		.4byte	.LVL158-.Ltext0
 15231 14ef 18070000 		.4byte	.LVL161-.Ltext0
 15232 14f3 0200     		.2byte	0x2
 15233 14f5 30       		.byte	0x30
 15234 14f6 9F       		.byte	0x9f
ARM GAS  /tmp/ccaP1CVS.s 			page 394


 15235 14f7 18070000 		.4byte	.LVL161-.Ltext0
 15236 14fb 22070000 		.4byte	.LVL163-.Ltext0
 15237 14ff 0100     		.2byte	0x1
 15238 1501 54       		.byte	0x54
 15239 1502 22070000 		.4byte	.LVL163-.Ltext0
 15240 1506 A0070000 		.4byte	.LVL175-.Ltext0
 15241 150a 0200     		.2byte	0x2
 15242 150c 30       		.byte	0x30
 15243 150d 9F       		.byte	0x9f
 15244 150e A0070000 		.4byte	.LVL175-.Ltext0
 15245 1512 BC070000 		.4byte	.LFE22-.Ltext0
 15246 1516 0200     		.2byte	0x2
 15247 1518 31       		.byte	0x31
 15248 1519 9F       		.byte	0x9f
 15249 151a 00000000 		.4byte	0
 15250 151e 00000000 		.4byte	0
 15251              	.LVUS90:
 15252 1522 00       		.uleb128 .LVU749
 15253 1523 02       		.uleb128 .LVU760
 15254 1524 02       		.uleb128 .LVU760
 15255 1525 00       		.uleb128 .LVU762
 15256 1526 00       		.uleb128 .LVU762
 15257 1527 00       		.uleb128 0
 15258              	.LLST90:
 15259 1528 82070000 		.4byte	.LVL171-.Ltext0
 15260 152c 90070000 		.4byte	.LVL173-.Ltext0
 15261 1530 0100     		.2byte	0x1
 15262 1532 55       		.byte	0x55
 15263 1533 90070000 		.4byte	.LVL173-.Ltext0
 15264 1537 92070000 		.4byte	.LVL174-.Ltext0
 15265 153b 0300     		.2byte	0x3
 15266 153d 75       		.byte	0x75
 15267 153e 7F       		.sleb128 -1
 15268 153f 9F       		.byte	0x9f
 15269 1540 92070000 		.4byte	.LVL174-.Ltext0
 15270 1544 BC070000 		.4byte	.LFE22-.Ltext0
 15271 1548 0100     		.2byte	0x1
 15272 154a 55       		.byte	0x55
 15273 154b 00000000 		.4byte	0
 15274 154f 00000000 		.4byte	0
 15275              	.LLST76:
 15276 1553 6C050000 		.4byte	.LFB19-.Ltext0
 15277 1557 6E050000 		.4byte	.LCFI17-.Ltext0
 15278 155b 0200     		.2byte	0x2
 15279 155d 7D       		.byte	0x7d
 15280 155e 00       		.sleb128 0
 15281 155f 6E050000 		.4byte	.LCFI17-.Ltext0
 15282 1563 B0050000 		.4byte	.LCFI18-.Ltext0
 15283 1567 0200     		.2byte	0x2
 15284 1569 7D       		.byte	0x7d
 15285 156a 18       		.sleb128 24
 15286 156b B0050000 		.4byte	.LCFI18-.Ltext0
 15287 156f B4050000 		.4byte	.LCFI19-.Ltext0
 15288 1573 0200     		.2byte	0x2
 15289 1575 7D       		.byte	0x7d
 15290 1576 0C       		.sleb128 12
 15291 1577 B4050000 		.4byte	.LCFI19-.Ltext0
ARM GAS  /tmp/ccaP1CVS.s 			page 395


 15292 157b B8050000 		.4byte	.LCFI20-.Ltext0
 15293 157f 0200     		.2byte	0x2
 15294 1581 7D       		.byte	0x7d
 15295 1582 00       		.sleb128 0
 15296 1583 B8050000 		.4byte	.LCFI20-.Ltext0
 15297 1587 BA050000 		.4byte	.LCFI21-.Ltext0
 15298 158b 0200     		.2byte	0x2
 15299 158d 7D       		.byte	0x7d
 15300 158e 18       		.sleb128 24
 15301 158f BA050000 		.4byte	.LCFI21-.Ltext0
 15302 1593 C8050000 		.4byte	.LFE19-.Ltext0
 15303 1597 0200     		.2byte	0x2
 15304 1599 7D       		.byte	0x7d
 15305 159a 0C       		.sleb128 12
 15306 159b 00000000 		.4byte	0
 15307 159f 00000000 		.4byte	0
 15308              	.LVUS77:
 15309 15a3 00       		.uleb128 .LVU571
 15310 15a4 00       		.uleb128 .LVU575
 15311 15a5 00       		.uleb128 .LVU575
 15312 15a6 00       		.uleb128 .LVU593
 15313 15a7 00       		.uleb128 .LVU593
 15314 15a8 00       		.uleb128 0
 15315              	.LLST77:
 15316 15a9 86050000 		.4byte	.LVL133-.Ltext0
 15317 15ad 8D050000 		.4byte	.LVL134-1-.Ltext0
 15318 15b1 0100     		.2byte	0x1
 15319 15b3 50       		.byte	0x50
 15320 15b4 8E050000 		.4byte	.LVL134-.Ltext0
 15321 15b8 B7050000 		.4byte	.LVL135-1-.Ltext0
 15322 15bc 0100     		.2byte	0x1
 15323 15be 50       		.byte	0x50
 15324 15bf B8050000 		.4byte	.LVL135-.Ltext0
 15325 15c3 C8050000 		.4byte	.LFE19-.Ltext0
 15326 15c7 0100     		.2byte	0x1
 15327 15c9 50       		.byte	0x50
 15328 15ca 00000000 		.4byte	0
 15329 15ce 00000000 		.4byte	0
 15330              	.LLST65:
 15331 15d2 E8040000 		.4byte	.LFB18-.Ltext0
 15332 15d6 EC040000 		.4byte	.LCFI16-.Ltext0
 15333 15da 0200     		.2byte	0x2
 15334 15dc 7D       		.byte	0x7d
 15335 15dd 00       		.sleb128 0
 15336 15de EC040000 		.4byte	.LCFI16-.Ltext0
 15337 15e2 6C050000 		.4byte	.LFE18-.Ltext0
 15338 15e6 0200     		.2byte	0x2
 15339 15e8 7D       		.byte	0x7d
 15340 15e9 18       		.sleb128 24
 15341 15ea 00000000 		.4byte	0
 15342 15ee 00000000 		.4byte	0
 15343              	.LVUS66:
 15344 15f2 00       		.uleb128 0
 15345 15f3 00       		.uleb128 .LVU531
 15346 15f4 00       		.uleb128 .LVU531
 15347 15f5 00       		.uleb128 0
 15348              	.LLST66:
ARM GAS  /tmp/ccaP1CVS.s 			page 396


 15349 15f6 E8040000 		.4byte	.LVL121-.Ltext0
 15350 15fa 14050000 		.4byte	.LVL124-.Ltext0
 15351 15fe 0100     		.2byte	0x1
 15352 1600 50       		.byte	0x50
 15353 1601 14050000 		.4byte	.LVL124-.Ltext0
 15354 1605 6C050000 		.4byte	.LFE18-.Ltext0
 15355 1609 0100     		.2byte	0x1
 15356 160b 56       		.byte	0x56
 15357 160c 00000000 		.4byte	0
 15358 1610 00000000 		.4byte	0
 15359              	.LVUS67:
 15360 1614 02       		.uleb128 .LVU507
 15361 1615 00       		.uleb128 .LVU550
 15362 1616 00       		.uleb128 .LVU550
 15363 1617 00       		.uleb128 .LVU556
 15364 1618 00       		.uleb128 .LVU557
 15365 1619 00       		.uleb128 .LVU564
 15366 161a 00       		.uleb128 .LVU564
 15367 161b 00       		.uleb128 0
 15368              	.LLST67:
 15369 161c E8040000 		.4byte	.LVL121-.Ltext0
 15370 1620 34050000 		.4byte	.LVL126-.Ltext0
 15371 1624 0200     		.2byte	0x2
 15372 1626 30       		.byte	0x30
 15373 1627 9F       		.byte	0x9f
 15374 1628 34050000 		.4byte	.LVL126-.Ltext0
 15375 162c 4E050000 		.4byte	.LVL128-.Ltext0
 15376 1630 0100     		.2byte	0x1
 15377 1632 54       		.byte	0x54
 15378 1633 52050000 		.4byte	.LVL129-.Ltext0
 15379 1637 5C050000 		.4byte	.LVL131-.Ltext0
 15380 163b 0100     		.2byte	0x1
 15381 163d 54       		.byte	0x54
 15382 163e 5C050000 		.4byte	.LVL131-.Ltext0
 15383 1642 6C050000 		.4byte	.LFE18-.Ltext0
 15384 1646 0200     		.2byte	0x2
 15385 1648 30       		.byte	0x30
 15386 1649 9F       		.byte	0x9f
 15387 164a 00000000 		.4byte	0
 15388 164e 00000000 		.4byte	0
 15389              	.LVUS68:
 15390 1652 03       		.uleb128 .LVU508
 15391 1653 00       		.uleb128 .LVU531
 15392 1654 00       		.uleb128 .LVU531
 15393 1655 00       		.uleb128 0
 15394              	.LLST68:
 15395 1656 E8040000 		.4byte	.LVL121-.Ltext0
 15396 165a 14050000 		.4byte	.LVL124-.Ltext0
 15397 165e 0100     		.2byte	0x1
 15398 1660 50       		.byte	0x50
 15399 1661 14050000 		.4byte	.LVL124-.Ltext0
 15400 1665 6C050000 		.4byte	.LFE18-.Ltext0
 15401 1669 0100     		.2byte	0x1
 15402 166b 56       		.byte	0x56
 15403 166c 00000000 		.4byte	0
 15404 1670 00000000 		.4byte	0
 15405              	.LVUS69:
ARM GAS  /tmp/ccaP1CVS.s 			page 397


 15406 1674 01       		.uleb128 .LVU519
 15407 1675 00       		.uleb128 0
 15408              	.LLST69:
 15409 1676 02050000 		.4byte	.LVL122-.Ltext0
 15410 167a 6C050000 		.4byte	.LFE18-.Ltext0
 15411 167e 0100     		.2byte	0x1
 15412 1680 57       		.byte	0x57
 15413 1681 00000000 		.4byte	0
 15414 1685 00000000 		.4byte	0
 15415              	.LVUS70:
 15416 1689 00       		.uleb128 .LVU518
 15417 168a 01       		.uleb128 .LVU519
 15418              	.LLST70:
 15419 168b 02050000 		.4byte	.LVL122-.Ltext0
 15420 168f 02050000 		.4byte	.LVL122-.Ltext0
 15421 1693 0100     		.2byte	0x1
 15422 1695 57       		.byte	0x57
 15423 1696 00000000 		.4byte	0
 15424 169a 00000000 		.4byte	0
 15425              	.LVUS71:
 15426 169e 03       		.uleb128 .LVU521
 15427 169f 00       		.uleb128 .LVU531
 15428 16a0 00       		.uleb128 .LVU531
 15429 16a1 04       		.uleb128 .LVU538
 15430 16a2 00       		.uleb128 .LVU565
 15431 16a3 00       		.uleb128 0
 15432              	.LLST71:
 15433 16a4 02050000 		.4byte	.LVL122-.Ltext0
 15434 16a8 14050000 		.4byte	.LVL124-.Ltext0
 15435 16ac 0100     		.2byte	0x1
 15436 16ae 50       		.byte	0x50
 15437 16af 14050000 		.4byte	.LVL124-.Ltext0
 15438 16b3 1A050000 		.4byte	.LVL125-.Ltext0
 15439 16b7 0100     		.2byte	0x1
 15440 16b9 56       		.byte	0x56
 15441 16ba 62050000 		.4byte	.LVL132-.Ltext0
 15442 16be 6C050000 		.4byte	.LFE18-.Ltext0
 15443 16c2 0100     		.2byte	0x1
 15444 16c4 56       		.byte	0x56
 15445 16c5 00000000 		.4byte	0
 15446 16c9 00000000 		.4byte	0
 15447              	.LVUS72:
 15448 16cd 05       		.uleb128 .LVU523
 15449 16ce 01       		.uleb128 .LVU535
 15450 16cf 01       		.uleb128 .LVU535
 15451 16d0 04       		.uleb128 .LVU538
 15452 16d1 00       		.uleb128 .LVU565
 15453 16d2 00       		.uleb128 0
 15454              	.LLST72:
 15455 16d3 02050000 		.4byte	.LVL122-.Ltext0
 15456 16d7 1A050000 		.4byte	.LVL125-.Ltext0
 15457 16db 0200     		.2byte	0x2
 15458 16dd 30       		.byte	0x30
 15459 16de 9F       		.byte	0x9f
 15460 16df 1A050000 		.4byte	.LVL125-.Ltext0
 15461 16e3 1A050000 		.4byte	.LVL125-.Ltext0
 15462 16e7 0200     		.2byte	0x2
ARM GAS  /tmp/ccaP1CVS.s 			page 398


 15463 16e9 31       		.byte	0x31
 15464 16ea 9F       		.byte	0x9f
 15465 16eb 62050000 		.4byte	.LVL132-.Ltext0
 15466 16ef 6C050000 		.4byte	.LFE18-.Ltext0
 15467 16f3 0200     		.2byte	0x2
 15468 16f5 30       		.byte	0x30
 15469 16f6 9F       		.byte	0x9f
 15470 16f7 00000000 		.4byte	0
 15471 16fb 00000000 		.4byte	0
 15472              	.LVUS73:
 15473 16ff 06       		.uleb128 .LVU524
 15474 1700 00       		.uleb128 .LVU531
 15475 1701 00       		.uleb128 .LVU531
 15476 1702 00       		.uleb128 0
 15477              	.LLST73:
 15478 1703 02050000 		.4byte	.LVL122-.Ltext0
 15479 1707 14050000 		.4byte	.LVL124-.Ltext0
 15480 170b 0100     		.2byte	0x1
 15481 170d 50       		.byte	0x50
 15482 170e 14050000 		.4byte	.LVL124-.Ltext0
 15483 1712 6C050000 		.4byte	.LFE18-.Ltext0
 15484 1716 0100     		.2byte	0x1
 15485 1718 56       		.byte	0x56
 15486 1719 00000000 		.4byte	0
 15487 171d 00000000 		.4byte	0
 15488              	.LVUS74:
 15489 1721 00       		.uleb128 .LVU527
 15490 1722 00       		.uleb128 .LVU531
 15491 1723 00       		.uleb128 .LVU531
 15492 1724 01       		.uleb128 .LVU535
 15493              	.LLST74:
 15494 1725 0E050000 		.4byte	.LVL123-.Ltext0
 15495 1729 14050000 		.4byte	.LVL124-.Ltext0
 15496 172d 0100     		.2byte	0x1
 15497 172f 50       		.byte	0x50
 15498 1730 14050000 		.4byte	.LVL124-.Ltext0
 15499 1734 1A050000 		.4byte	.LVL125-.Ltext0
 15500 1738 0100     		.2byte	0x1
 15501 173a 56       		.byte	0x56
 15502 173b 00000000 		.4byte	0
 15503 173f 00000000 		.4byte	0
 15504              	.LVUS75:
 15505 1743 02       		.uleb128 .LVU559
 15506 1744 00       		.uleb128 .LVU561
 15507              	.LLST75:
 15508 1745 52050000 		.4byte	.LVL129-.Ltext0
 15509 1749 56050000 		.4byte	.LVL130-.Ltext0
 15510 174d 0100     		.2byte	0x1
 15511 174f 57       		.byte	0x57
 15512 1750 00000000 		.4byte	0
 15513 1754 00000000 		.4byte	0
 15514              	.LLST58:
 15515 1758 70040000 		.4byte	.LFB17-.Ltext0
 15516 175c 72040000 		.4byte	.LCFI13-.Ltext0
 15517 1760 0200     		.2byte	0x2
 15518 1762 7D       		.byte	0x7d
 15519 1763 00       		.sleb128 0
ARM GAS  /tmp/ccaP1CVS.s 			page 399


 15520 1764 72040000 		.4byte	.LCFI13-.Ltext0
 15521 1768 DE040000 		.4byte	.LCFI14-.Ltext0
 15522 176c 0200     		.2byte	0x2
 15523 176e 7D       		.byte	0x7d
 15524 176f 10       		.sleb128 16
 15525 1770 DE040000 		.4byte	.LCFI14-.Ltext0
 15526 1774 E2040000 		.4byte	.LCFI15-.Ltext0
 15527 1778 0200     		.2byte	0x2
 15528 177a 7D       		.byte	0x7d
 15529 177b 00       		.sleb128 0
 15530 177c E2040000 		.4byte	.LCFI15-.Ltext0
 15531 1780 E8040000 		.4byte	.LFE17-.Ltext0
 15532 1784 0200     		.2byte	0x2
 15533 1786 7D       		.byte	0x7d
 15534 1787 10       		.sleb128 16
 15535 1788 00000000 		.4byte	0
 15536 178c 00000000 		.4byte	0
 15537              	.LVUS59:
 15538 1790 00       		.uleb128 0
 15539 1791 00       		.uleb128 .LVU468
 15540 1792 00       		.uleb128 .LVU468
 15541 1793 00       		.uleb128 .LVU503
 15542 1794 00       		.uleb128 .LVU503
 15543 1795 00       		.uleb128 .LVU504
 15544 1796 00       		.uleb128 .LVU504
 15545 1797 00       		.uleb128 0
 15546              	.LLST59:
 15547 1798 70040000 		.4byte	.LVL113-.Ltext0
 15548 179c 81040000 		.4byte	.LVL114-1-.Ltext0
 15549 17a0 0100     		.2byte	0x1
 15550 17a2 50       		.byte	0x50
 15551 17a3 81040000 		.4byte	.LVL114-1-.Ltext0
 15552 17a7 DE040000 		.4byte	.LVL119-.Ltext0
 15553 17ab 0100     		.2byte	0x1
 15554 17ad 54       		.byte	0x54
 15555 17ae DE040000 		.4byte	.LVL119-.Ltext0
 15556 17b2 E2040000 		.4byte	.LVL120-.Ltext0
 15557 17b6 0400     		.2byte	0x4
 15558 17b8 F3       		.byte	0xf3
 15559 17b9 01       		.uleb128 0x1
 15560 17ba 50       		.byte	0x50
 15561 17bb 9F       		.byte	0x9f
 15562 17bc E2040000 		.4byte	.LVL120-.Ltext0
 15563 17c0 E8040000 		.4byte	.LFE17-.Ltext0
 15564 17c4 0100     		.2byte	0x1
 15565 17c6 50       		.byte	0x50
 15566 17c7 00000000 		.4byte	0
 15567 17cb 00000000 		.4byte	0
 15568              	.LVUS60:
 15569 17cf 02       		.uleb128 .LVU459
 15570 17d0 00       		.uleb128 .LVU468
 15571 17d1 00       		.uleb128 .LVU468
 15572 17d2 00       		.uleb128 .LVU503
 15573 17d3 00       		.uleb128 .LVU503
 15574 17d4 00       		.uleb128 .LVU504
 15575 17d5 00       		.uleb128 .LVU504
 15576 17d6 00       		.uleb128 0
ARM GAS  /tmp/ccaP1CVS.s 			page 400


 15577              	.LLST60:
 15578 17d7 70040000 		.4byte	.LVL113-.Ltext0
 15579 17db 81040000 		.4byte	.LVL114-1-.Ltext0
 15580 17df 0100     		.2byte	0x1
 15581 17e1 50       		.byte	0x50
 15582 17e2 81040000 		.4byte	.LVL114-1-.Ltext0
 15583 17e6 DE040000 		.4byte	.LVL119-.Ltext0
 15584 17ea 0100     		.2byte	0x1
 15585 17ec 54       		.byte	0x54
 15586 17ed DE040000 		.4byte	.LVL119-.Ltext0
 15587 17f1 E2040000 		.4byte	.LVL120-.Ltext0
 15588 17f5 0400     		.2byte	0x4
 15589 17f7 F3       		.byte	0xf3
 15590 17f8 01       		.uleb128 0x1
 15591 17f9 50       		.byte	0x50
 15592 17fa 9F       		.byte	0x9f
 15593 17fb E2040000 		.4byte	.LVL120-.Ltext0
 15594 17ff E8040000 		.4byte	.LFE17-.Ltext0
 15595 1803 0100     		.2byte	0x1
 15596 1805 50       		.byte	0x50
 15597 1806 00000000 		.4byte	0
 15598 180a 00000000 		.4byte	0
 15599              	.LVUS61:
 15600 180e 01       		.uleb128 .LVU469
 15601 180f 04       		.uleb128 .LVU485
 15602              	.LLST61:
 15603 1810 82040000 		.4byte	.LVL114-.Ltext0
 15604 1814 98040000 		.4byte	.LVL116-.Ltext0
 15605 1818 0100     		.2byte	0x1
 15606 181a 54       		.byte	0x54
 15607 181b 00000000 		.4byte	0
 15608 181f 00000000 		.4byte	0
 15609              	.LVUS62:
 15610 1823 03       		.uleb128 .LVU471
 15611 1824 01       		.uleb128 .LVU482
 15612 1825 01       		.uleb128 .LVU482
 15613 1826 04       		.uleb128 .LVU485
 15614              	.LLST62:
 15615 1827 82040000 		.4byte	.LVL114-.Ltext0
 15616 182b 98040000 		.4byte	.LVL116-.Ltext0
 15617 182f 0200     		.2byte	0x2
 15618 1831 30       		.byte	0x30
 15619 1832 9F       		.byte	0x9f
 15620 1833 98040000 		.4byte	.LVL116-.Ltext0
 15621 1837 98040000 		.4byte	.LVL116-.Ltext0
 15622 183b 0200     		.2byte	0x2
 15623 183d 31       		.byte	0x31
 15624 183e 9F       		.byte	0x9f
 15625 183f 00000000 		.4byte	0
 15626 1843 00000000 		.4byte	0
 15627              	.LVUS63:
 15628 1847 04       		.uleb128 .LVU472
 15629 1848 00       		.uleb128 .LVU503
 15630 1849 00       		.uleb128 .LVU503
 15631 184a 00       		.uleb128 .LVU504
 15632              	.LLST63:
 15633 184b 82040000 		.4byte	.LVL114-.Ltext0
ARM GAS  /tmp/ccaP1CVS.s 			page 401


 15634 184f DE040000 		.4byte	.LVL119-.Ltext0
 15635 1853 0100     		.2byte	0x1
 15636 1855 54       		.byte	0x54
 15637 1856 DE040000 		.4byte	.LVL119-.Ltext0
 15638 185a E2040000 		.4byte	.LVL120-.Ltext0
 15639 185e 0400     		.2byte	0x4
 15640 1860 F3       		.byte	0xf3
 15641 1861 01       		.uleb128 0x1
 15642 1862 50       		.byte	0x50
 15643 1863 9F       		.byte	0x9f
 15644 1864 00000000 		.4byte	0
 15645 1868 00000000 		.4byte	0
 15646              	.LVUS64:
 15647 186c 00       		.uleb128 .LVU475
 15648 186d 01       		.uleb128 .LVU482
 15649              	.LLST64:
 15650 186e 8C040000 		.4byte	.LVL115-.Ltext0
 15651 1872 98040000 		.4byte	.LVL116-.Ltext0
 15652 1876 0100     		.2byte	0x1
 15653 1878 54       		.byte	0x54
 15654 1879 00000000 		.4byte	0
 15655 187d 00000000 		.4byte	0
 15656              	.LLST105:
 15657 1881 84080000 		.4byte	.LFB15-.Ltext0
 15658 1885 86080000 		.4byte	.LCFI27-.Ltext0
 15659 1889 0200     		.2byte	0x2
 15660 188b 7D       		.byte	0x7d
 15661 188c 00       		.sleb128 0
 15662 188d 86080000 		.4byte	.LCFI27-.Ltext0
 15663 1891 1E090000 		.4byte	.LCFI28-.Ltext0
 15664 1895 0200     		.2byte	0x2
 15665 1897 7D       		.byte	0x7d
 15666 1898 10       		.sleb128 16
 15667 1899 1E090000 		.4byte	.LCFI28-.Ltext0
 15668 189d 2C090000 		.4byte	.LFE15-.Ltext0
 15669 18a1 0200     		.2byte	0x2
 15670 18a3 7D       		.byte	0x7d
 15671 18a4 00       		.sleb128 0
 15672 18a5 00000000 		.4byte	0
 15673 18a9 00000000 		.4byte	0
 15674              	.LVUS106:
 15675 18ad 00       		.uleb128 0
 15676 18ae 00       		.uleb128 .LVU881
 15677 18af 00       		.uleb128 .LVU881
 15678 18b0 00       		.uleb128 .LVU884
 15679              	.LLST106:
 15680 18b1 84080000 		.4byte	.LVL197-.Ltext0
 15681 18b5 8D080000 		.4byte	.LVL198-1-.Ltext0
 15682 18b9 0100     		.2byte	0x1
 15683 18bb 50       		.byte	0x50
 15684 18bc 8D080000 		.4byte	.LVL198-1-.Ltext0
 15685 18c0 92080000 		.4byte	.LVL199-.Ltext0
 15686 18c4 0100     		.2byte	0x1
 15687 18c6 54       		.byte	0x54
 15688 18c7 00000000 		.4byte	0
 15689 18cb 00000000 		.4byte	0
 15690              	.LVUS107:
ARM GAS  /tmp/ccaP1CVS.s 			page 402


 15691 18cf 00       		.uleb128 .LVU884
 15692 18d0 00       		.uleb128 .LVU930
 15693              	.LLST107:
 15694 18d1 92080000 		.4byte	.LVL199-.Ltext0
 15695 18d5 1E090000 		.4byte	.LVL208-.Ltext0
 15696 18d9 0100     		.2byte	0x1
 15697 18db 54       		.byte	0x54
 15698 18dc 00000000 		.4byte	0
 15699 18e0 00000000 		.4byte	0
 15700              	.LLST51:
 15701 18e4 AC030000 		.4byte	.LFB14-.Ltext0
 15702 18e8 B2030000 		.4byte	.LCFI10-.Ltext0
 15703 18ec 0200     		.2byte	0x2
 15704 18ee 7D       		.byte	0x7d
 15705 18ef 00       		.sleb128 0
 15706 18f0 B2030000 		.4byte	.LCFI10-.Ltext0
 15707 18f4 54040000 		.4byte	.LCFI11-.Ltext0
 15708 18f8 0200     		.2byte	0x2
 15709 18fa 7D       		.byte	0x7d
 15710 18fb 20       		.sleb128 32
 15711 18fc 54040000 		.4byte	.LCFI11-.Ltext0
 15712 1900 58040000 		.4byte	.LCFI12-.Ltext0
 15713 1904 0200     		.2byte	0x2
 15714 1906 7D       		.byte	0x7d
 15715 1907 00       		.sleb128 0
 15716 1908 58040000 		.4byte	.LCFI12-.Ltext0
 15717 190c 70040000 		.4byte	.LFE14-.Ltext0
 15718 1910 0200     		.2byte	0x2
 15719 1912 7D       		.byte	0x7d
 15720 1913 20       		.sleb128 32
 15721 1914 00000000 		.4byte	0
 15722 1918 00000000 		.4byte	0
 15723              	.LVUS52:
 15724 191c 00       		.uleb128 0
 15725 191d 00       		.uleb128 .LVU393
 15726 191e 00       		.uleb128 .LVU393
 15727 191f 00       		.uleb128 .LVU396
 15728              	.LLST52:
 15729 1920 AC030000 		.4byte	.LVL98-.Ltext0
 15730 1924 BD030000 		.4byte	.LVL101-1-.Ltext0
 15731 1928 0100     		.2byte	0x1
 15732 192a 50       		.byte	0x50
 15733 192b BD030000 		.4byte	.LVL101-1-.Ltext0
 15734 192f C4030000 		.4byte	.LVL102-.Ltext0
 15735 1933 0100     		.2byte	0x1
 15736 1935 54       		.byte	0x54
 15737 1936 00000000 		.4byte	0
 15738 193a 00000000 		.4byte	0
 15739              	.LVUS53:
 15740 193e 00       		.uleb128 0
 15741 193f 00       		.uleb128 .LVU390
 15742 1940 00       		.uleb128 .LVU390
 15743 1941 00       		.uleb128 .LVU391
 15744 1942 00       		.uleb128 .LVU391
 15745 1943 00       		.uleb128 .LVU393
 15746 1944 00       		.uleb128 .LVU393
 15747 1945 00       		.uleb128 .LVU425
ARM GAS  /tmp/ccaP1CVS.s 			page 403


 15748 1946 00       		.uleb128 .LVU425
 15749 1947 00       		.uleb128 .LVU434
 15750 1948 00       		.uleb128 .LVU434
 15751 1949 00       		.uleb128 .LVU453
 15752 194a 00       		.uleb128 .LVU453
 15753 194b 00       		.uleb128 0
 15754              	.LLST53:
 15755 194c AC030000 		.4byte	.LVL98-.Ltext0
 15756 1950 B6030000 		.4byte	.LVL99-.Ltext0
 15757 1954 0100     		.2byte	0x1
 15758 1956 51       		.byte	0x51
 15759 1957 B6030000 		.4byte	.LVL99-.Ltext0
 15760 195b BA030000 		.4byte	.LVL100-.Ltext0
 15761 195f 0400     		.2byte	0x4
 15762 1961 F3       		.byte	0xf3
 15763 1962 01       		.uleb128 0x1
 15764 1963 51       		.byte	0x51
 15765 1964 9F       		.byte	0x9f
 15766 1965 BA030000 		.4byte	.LVL100-.Ltext0
 15767 1969 BD030000 		.4byte	.LVL101-1-.Ltext0
 15768 196d 0100     		.2byte	0x1
 15769 196f 51       		.byte	0x51
 15770 1970 BD030000 		.4byte	.LVL101-1-.Ltext0
 15771 1974 FA030000 		.4byte	.LVL107-.Ltext0
 15772 1978 0100     		.2byte	0x1
 15773 197a 55       		.byte	0x55
 15774 197b FA030000 		.4byte	.LVL107-.Ltext0
 15775 197f 11040000 		.4byte	.LVL108-1-.Ltext0
 15776 1983 0300     		.2byte	0x3
 15777 1985 74       		.byte	0x74
 15778 1986 CC00     		.sleb128 76
 15779 1988 11040000 		.4byte	.LVL108-1-.Ltext0
 15780 198c 58040000 		.4byte	.LVL112-.Ltext0
 15781 1990 1700     		.2byte	0x17
 15782 1992 34       		.byte	0x34
 15783 1993 F3       		.byte	0xf3
 15784 1994 01       		.uleb128 0x1
 15785 1995 51       		.byte	0x51
 15786 1996 F3       		.byte	0xf3
 15787 1997 01       		.uleb128 0x1
 15788 1998 51       		.byte	0x51
 15789 1999 40       		.byte	0x40
 15790 199a 4B       		.byte	0x4b
 15791 199b 24       		.byte	0x24
 15792 199c 22       		.byte	0x22
 15793 199d 0C       		.byte	0xc
 15794 199e 04000080 		.4byte	0x80000004
 15795 19a2 2A       		.byte	0x2a
 15796 19a3 28       		.byte	0x28
 15797 19a4 0100     		.2byte	0x1
 15798 19a6 16       		.byte	0x16
 15799 19a7 13       		.byte	0x13
 15800 19a8 9F       		.byte	0x9f
 15801 19a9 58040000 		.4byte	.LVL112-.Ltext0
 15802 19ad 70040000 		.4byte	.LFE14-.Ltext0
 15803 19b1 0100     		.2byte	0x1
 15804 19b3 55       		.byte	0x55
ARM GAS  /tmp/ccaP1CVS.s 			page 404


 15805 19b4 00000000 		.4byte	0
 15806 19b8 00000000 		.4byte	0
 15807              	.LVUS54:
 15808 19bc 00       		.uleb128 .LVU396
 15809 19bd 00       		.uleb128 .LVU452
 15810 19be 00       		.uleb128 .LVU453
 15811 19bf 00       		.uleb128 0
 15812              	.LLST54:
 15813 19c0 C4030000 		.4byte	.LVL102-.Ltext0
 15814 19c4 54040000 		.4byte	.LVL111-.Ltext0
 15815 19c8 0100     		.2byte	0x1
 15816 19ca 54       		.byte	0x54
 15817 19cb 58040000 		.4byte	.LVL112-.Ltext0
 15818 19cf 70040000 		.4byte	.LFE14-.Ltext0
 15819 19d3 0100     		.2byte	0x1
 15820 19d5 54       		.byte	0x54
 15821 19d6 00000000 		.4byte	0
 15822 19da 00000000 		.4byte	0
 15823              	.LVUS55:
 15824 19de 00       		.uleb128 .LVU399
 15825 19df 00       		.uleb128 .LVU417
 15826 19e0 00       		.uleb128 .LVU453
 15827 19e1 00       		.uleb128 0
 15828              	.LLST55:
 15829 19e2 C6030000 		.4byte	.LVL103-.Ltext0
 15830 19e6 EA030000 		.4byte	.LVL106-.Ltext0
 15831 19ea 0100     		.2byte	0x1
 15832 19ec 53       		.byte	0x53
 15833 19ed 58040000 		.4byte	.LVL112-.Ltext0
 15834 19f1 70040000 		.4byte	.LFE14-.Ltext0
 15835 19f5 0100     		.2byte	0x1
 15836 19f7 53       		.byte	0x53
 15837 19f8 00000000 		.4byte	0
 15838 19fc 00000000 		.4byte	0
 15839              	.LVUS56:
 15840 1a00 00       		.uleb128 .LVU412
 15841 1a01 01       		.uleb128 .LVU448
 15842              	.LLST56:
 15843 1a02 E4030000 		.4byte	.LVL105-.Ltext0
 15844 1a06 50040000 		.4byte	.LVL110-.Ltext0
 15845 1a0a 0100     		.2byte	0x1
 15846 1a0c 59       		.byte	0x59
 15847 1a0d 00000000 		.4byte	0
 15848 1a11 00000000 		.4byte	0
 15849              	.LVUS57:
 15850 1a15 04       		.uleb128 .LVU387
 15851 1a16 00       		.uleb128 .LVU409
 15852 1a17 00       		.uleb128 .LVU409
 15853 1a18 01       		.uleb128 .LVU448
 15854 1a19 00       		.uleb128 .LVU453
 15855 1a1a 00       		.uleb128 0
 15856              	.LLST57:
 15857 1a1b AC030000 		.4byte	.LVL98-.Ltext0
 15858 1a1f E0030000 		.4byte	.LVL104-.Ltext0
 15859 1a23 0200     		.2byte	0x2
 15860 1a25 30       		.byte	0x30
 15861 1a26 9F       		.byte	0x9f
ARM GAS  /tmp/ccaP1CVS.s 			page 405


 15862 1a27 E0030000 		.4byte	.LVL104-.Ltext0
 15863 1a2b 50040000 		.4byte	.LVL110-.Ltext0
 15864 1a2f 0100     		.2byte	0x1
 15865 1a31 56       		.byte	0x56
 15866 1a32 58040000 		.4byte	.LVL112-.Ltext0
 15867 1a36 70040000 		.4byte	.LFE14-.Ltext0
 15868 1a3a 0200     		.2byte	0x2
 15869 1a3c 30       		.byte	0x30
 15870 1a3d 9F       		.byte	0x9f
 15871 1a3e 00000000 		.4byte	0
 15872 1a42 00000000 		.4byte	0
 15873              	.LVUS45:
 15874 1a46 00       		.uleb128 0
 15875 1a47 00       		.uleb128 .LVU375
 15876              	.LLST45:
 15877 1a48 84030000 		.4byte	.LVL93-.Ltext0
 15878 1a4c 9E030000 		.4byte	.LVL95-.Ltext0
 15879 1a50 0100     		.2byte	0x1
 15880 1a52 50       		.byte	0x50
 15881 1a53 00000000 		.4byte	0
 15882 1a57 00000000 		.4byte	0
 15883              	.LVUS46:
 15884 1a5b 00       		.uleb128 .LVU375
 15885 1a5c 00       		.uleb128 .LVU377
 15886              	.LLST46:
 15887 1a5d 9E030000 		.4byte	.LVL95-.Ltext0
 15888 1a61 A0030000 		.4byte	.LVL96-.Ltext0
 15889 1a65 0100     		.2byte	0x1
 15890 1a67 50       		.byte	0x50
 15891 1a68 00000000 		.4byte	0
 15892 1a6c 00000000 		.4byte	0
 15893              	.LVUS47:
 15894 1a70 00       		.uleb128 .LVU377
 15895 1a71 00       		.uleb128 0
 15896              	.LLST47:
 15897 1a72 A0030000 		.4byte	.LVL96-.Ltext0
 15898 1a76 AC030000 		.4byte	.LFE13-.Ltext0
 15899 1a7a 0100     		.2byte	0x1
 15900 1a7c 50       		.byte	0x50
 15901 1a7d 00000000 		.4byte	0
 15902 1a81 00000000 		.4byte	0
 15903              	.LVUS48:
 15904 1a85 01       		.uleb128 .LVU371
 15905 1a86 00       		.uleb128 0
 15906              	.LLST48:
 15907 1a87 98030000 		.4byte	.LVL94-.Ltext0
 15908 1a8b AC030000 		.4byte	.LFE13-.Ltext0
 15909 1a8f 0100     		.2byte	0x1
 15910 1a91 53       		.byte	0x53
 15911 1a92 00000000 		.4byte	0
 15912 1a96 00000000 		.4byte	0
 15913              	.LVUS49:
 15914 1a9a 00       		.uleb128 .LVU370
 15915 1a9b 01       		.uleb128 .LVU371
 15916              	.LLST49:
 15917 1a9c 98030000 		.4byte	.LVL94-.Ltext0
 15918 1aa0 98030000 		.4byte	.LVL94-.Ltext0
ARM GAS  /tmp/ccaP1CVS.s 			page 406


 15919 1aa4 0100     		.2byte	0x1
 15920 1aa6 53       		.byte	0x53
 15921 1aa7 00000000 		.4byte	0
 15922 1aab 00000000 		.4byte	0
 15923              	.LVUS50:
 15924 1aaf 01       		.uleb128 .LVU378
 15925 1ab0 00       		.uleb128 .LVU380
 15926              	.LLST50:
 15927 1ab1 A0030000 		.4byte	.LVL96-.Ltext0
 15928 1ab5 A4030000 		.4byte	.LVL97-.Ltext0
 15929 1ab9 0100     		.2byte	0x1
 15930 1abb 53       		.byte	0x53
 15931 1abc 00000000 		.4byte	0
 15932 1ac0 00000000 		.4byte	0
 15933              	.LLST41:
 15934 1ac4 68030000 		.4byte	.LFB12-.Ltext0
 15935 1ac8 6A030000 		.4byte	.LCFI9-.Ltext0
 15936 1acc 0200     		.2byte	0x2
 15937 1ace 7D       		.byte	0x7d
 15938 1acf 00       		.sleb128 0
 15939 1ad0 6A030000 		.4byte	.LCFI9-.Ltext0
 15940 1ad4 84030000 		.4byte	.LFE12-.Ltext0
 15941 1ad8 0200     		.2byte	0x2
 15942 1ada 7D       		.byte	0x7d
 15943 1adb 08       		.sleb128 8
 15944 1adc 00000000 		.4byte	0
 15945 1ae0 00000000 		.4byte	0
 15946              	.LVUS42:
 15947 1ae4 00       		.uleb128 0
 15948 1ae5 00       		.uleb128 .LVU353
 15949 1ae6 00       		.uleb128 .LVU353
 15950 1ae7 00       		.uleb128 .LVU356
 15951              	.LLST42:
 15952 1ae8 68030000 		.4byte	.LVL87-.Ltext0
 15953 1aec 6F030000 		.4byte	.LVL88-1-.Ltext0
 15954 1af0 0100     		.2byte	0x1
 15955 1af2 50       		.byte	0x50
 15956 1af3 6F030000 		.4byte	.LVL88-1-.Ltext0
 15957 1af7 76030000 		.4byte	.LVL89-.Ltext0
 15958 1afb 0100     		.2byte	0x1
 15959 1afd 54       		.byte	0x54
 15960 1afe 00000000 		.4byte	0
 15961 1b02 00000000 		.4byte	0
 15962              	.LVUS43:
 15963 1b06 00       		.uleb128 .LVU356
 15964 1b07 00       		.uleb128 .LVU358
 15965              	.LLST43:
 15966 1b08 76030000 		.4byte	.LVL89-.Ltext0
 15967 1b0c 78030000 		.4byte	.LVL90-.Ltext0
 15968 1b10 0100     		.2byte	0x1
 15969 1b12 54       		.byte	0x54
 15970 1b13 00000000 		.4byte	0
 15971 1b17 00000000 		.4byte	0
 15972              	.LVUS44:
 15973 1b1b 00       		.uleb128 .LVU358
 15974 1b1c 00       		.uleb128 .LVU361
 15975 1b1d 00       		.uleb128 .LVU361
ARM GAS  /tmp/ccaP1CVS.s 			page 407


 15976 1b1e 00       		.uleb128 0
 15977              	.LLST44:
 15978 1b1f 78030000 		.4byte	.LVL90-.Ltext0
 15979 1b23 80030000 		.4byte	.LVL92-.Ltext0
 15980 1b27 0100     		.2byte	0x1
 15981 1b29 54       		.byte	0x54
 15982 1b2a 80030000 		.4byte	.LVL92-.Ltext0
 15983 1b2e 84030000 		.4byte	.LFE12-.Ltext0
 15984 1b32 0100     		.2byte	0x1
 15985 1b34 50       		.byte	0x50
 15986 1b35 00000000 		.4byte	0
 15987 1b39 00000000 		.4byte	0
 15988              	.LLST97:
 15989 1b3d 08080000 		.4byte	.LFB10-.Ltext0
 15990 1b41 0A080000 		.4byte	.LCFI25-.Ltext0
 15991 1b45 0200     		.2byte	0x2
 15992 1b47 7D       		.byte	0x7d
 15993 1b48 00       		.sleb128 0
 15994 1b49 0A080000 		.4byte	.LCFI25-.Ltext0
 15995 1b4d 36080000 		.4byte	.LFE10-.Ltext0
 15996 1b51 0200     		.2byte	0x2
 15997 1b53 7D       		.byte	0x7d
 15998 1b54 08       		.sleb128 8
 15999 1b55 00000000 		.4byte	0
 16000 1b59 00000000 		.4byte	0
 16001              	.LVUS98:
 16002 1b5d 00       		.uleb128 0
 16003 1b5e 00       		.uleb128 .LVU819
 16004 1b5f 00       		.uleb128 .LVU819
 16005 1b60 00       		.uleb128 .LVU824
 16006 1b61 00       		.uleb128 .LVU824
 16007 1b62 00       		.uleb128 .LVU830
 16008 1b63 00       		.uleb128 .LVU830
 16009 1b64 00       		.uleb128 0
 16010              	.LLST98:
 16011 1b65 08080000 		.4byte	.LVL186-.Ltext0
 16012 1b69 0C080000 		.4byte	.LVL187-.Ltext0
 16013 1b6d 0100     		.2byte	0x1
 16014 1b6f 50       		.byte	0x50
 16015 1b70 0C080000 		.4byte	.LVL187-.Ltext0
 16016 1b74 22080000 		.4byte	.LVL188-.Ltext0
 16017 1b78 0400     		.2byte	0x4
 16018 1b7a F3       		.byte	0xf3
 16019 1b7b 01       		.uleb128 0x1
 16020 1b7c 50       		.byte	0x50
 16021 1b7d 9F       		.byte	0x9f
 16022 1b7e 22080000 		.4byte	.LVL188-.Ltext0
 16023 1b82 2B080000 		.4byte	.LVL190-1-.Ltext0
 16024 1b86 0100     		.2byte	0x1
 16025 1b88 50       		.byte	0x50
 16026 1b89 2B080000 		.4byte	.LVL190-1-.Ltext0
 16027 1b8d 36080000 		.4byte	.LFE10-.Ltext0
 16028 1b91 0400     		.2byte	0x4
 16029 1b93 F3       		.byte	0xf3
 16030 1b94 01       		.uleb128 0x1
 16031 1b95 50       		.byte	0x50
 16032 1b96 9F       		.byte	0x9f
ARM GAS  /tmp/ccaP1CVS.s 			page 408


 16033 1b97 00000000 		.4byte	0
 16034 1b9b 00000000 		.4byte	0
 16035              	.LVUS99:
 16036 1b9f 02       		.uleb128 .LVU816
 16037 1ba0 00       		.uleb128 .LVU819
 16038 1ba1 00       		.uleb128 .LVU824
 16039 1ba2 00       		.uleb128 .LVU832
 16040 1ba3 00       		.uleb128 .LVU832
 16041 1ba4 00       		.uleb128 0
 16042              	.LLST99:
 16043 1ba5 08080000 		.4byte	.LVL186-.Ltext0
 16044 1ba9 0C080000 		.4byte	.LVL187-.Ltext0
 16045 1bad 0200     		.2byte	0x2
 16046 1baf 30       		.byte	0x30
 16047 1bb0 9F       		.byte	0x9f
 16048 1bb1 22080000 		.4byte	.LVL188-.Ltext0
 16049 1bb5 30080000 		.4byte	.LVL191-.Ltext0
 16050 1bb9 0200     		.2byte	0x2
 16051 1bbb 30       		.byte	0x30
 16052 1bbc 9F       		.byte	0x9f
 16053 1bbd 30080000 		.4byte	.LVL191-.Ltext0
 16054 1bc1 36080000 		.4byte	.LFE10-.Ltext0
 16055 1bc5 0100     		.2byte	0x1
 16056 1bc7 50       		.byte	0x50
 16057 1bc8 00000000 		.4byte	0
 16058 1bcc 00000000 		.4byte	0
 16059              	.LLST91:
 16060 1bd0 BC070000 		.4byte	.LFB9-.Ltext0
 16061 1bd4 BE070000 		.4byte	.LCFI24-.Ltext0
 16062 1bd8 0200     		.2byte	0x2
 16063 1bda 7D       		.byte	0x7d
 16064 1bdb 00       		.sleb128 0
 16065 1bdc BE070000 		.4byte	.LCFI24-.Ltext0
 16066 1be0 08080000 		.4byte	.LFE9-.Ltext0
 16067 1be4 0200     		.2byte	0x2
 16068 1be6 7D       		.byte	0x7d
 16069 1be7 08       		.sleb128 8
 16070 1be8 00000000 		.4byte	0
 16071 1bec 00000000 		.4byte	0
 16072              	.LVUS92:
 16073 1bf0 00       		.uleb128 0
 16074 1bf1 00       		.uleb128 .LVU796
 16075 1bf2 00       		.uleb128 .LVU796
 16076 1bf3 00       		.uleb128 .LVU807
 16077 1bf4 00       		.uleb128 .LVU807
 16078 1bf5 00       		.uleb128 .LVU812
 16079 1bf6 00       		.uleb128 .LVU812
 16080 1bf7 00       		.uleb128 0
 16081              	.LLST92:
 16082 1bf8 BC070000 		.4byte	.LVL176-.Ltext0
 16083 1bfc D8070000 		.4byte	.LVL181-.Ltext0
 16084 1c00 0100     		.2byte	0x1
 16085 1c02 50       		.byte	0x50
 16086 1c03 D8070000 		.4byte	.LVL181-.Ltext0
 16087 1c07 F4070000 		.4byte	.LVL183-.Ltext0
 16088 1c0b 0400     		.2byte	0x4
 16089 1c0d F3       		.byte	0xf3
ARM GAS  /tmp/ccaP1CVS.s 			page 409


 16090 1c0e 01       		.uleb128 0x1
 16091 1c0f 50       		.byte	0x50
 16092 1c10 9F       		.byte	0x9f
 16093 1c11 F4070000 		.4byte	.LVL183-.Ltext0
 16094 1c15 FE070000 		.4byte	.LVL184-.Ltext0
 16095 1c19 0100     		.2byte	0x1
 16096 1c1b 50       		.byte	0x50
 16097 1c1c FE070000 		.4byte	.LVL184-.Ltext0
 16098 1c20 08080000 		.4byte	.LFE9-.Ltext0
 16099 1c24 0400     		.2byte	0x4
 16100 1c26 F3       		.byte	0xf3
 16101 1c27 01       		.uleb128 0x1
 16102 1c28 50       		.byte	0x50
 16103 1c29 9F       		.byte	0x9f
 16104 1c2a 00000000 		.4byte	0
 16105 1c2e 00000000 		.4byte	0
 16106              	.LVUS93:
 16107 1c32 00       		.uleb128 0
 16108 1c33 00       		.uleb128 .LVU789
 16109 1c34 00       		.uleb128 .LVU789
 16110 1c35 00       		.uleb128 0
 16111              	.LLST93:
 16112 1c36 BC070000 		.4byte	.LVL176-.Ltext0
 16113 1c3a CE070000 		.4byte	.LVL179-.Ltext0
 16114 1c3e 0100     		.2byte	0x1
 16115 1c40 51       		.byte	0x51
 16116 1c41 CE070000 		.4byte	.LVL179-.Ltext0
 16117 1c45 08080000 		.4byte	.LFE9-.Ltext0
 16118 1c49 0400     		.2byte	0x4
 16119 1c4b F3       		.byte	0xf3
 16120 1c4c 01       		.uleb128 0x1
 16121 1c4d 51       		.byte	0x51
 16122 1c4e 9F       		.byte	0x9f
 16123 1c4f 00000000 		.4byte	0
 16124 1c53 00000000 		.4byte	0
 16125              	.LVUS94:
 16126 1c57 00       		.uleb128 .LVU790
 16127 1c58 00       		.uleb128 .LVU796
 16128 1c59 00       		.uleb128 .LVU796
 16129 1c5a 00       		.uleb128 .LVU807
 16130 1c5b 00       		.uleb128 .LVU807
 16131 1c5c 00       		.uleb128 .LVU813
 16132 1c5d 00       		.uleb128 .LVU813
 16133 1c5e 00       		.uleb128 0
 16134              	.LLST94:
 16135 1c5f D0070000 		.4byte	.LVL180-.Ltext0
 16136 1c63 D8070000 		.4byte	.LVL181-.Ltext0
 16137 1c67 0100     		.2byte	0x1
 16138 1c69 53       		.byte	0x53
 16139 1c6a D8070000 		.4byte	.LVL181-.Ltext0
 16140 1c6e F4070000 		.4byte	.LVL183-.Ltext0
 16141 1c72 0700     		.2byte	0x7
 16142 1c74 74       		.byte	0x74
 16143 1c75 00       		.sleb128 0
 16144 1c76 F3       		.byte	0xf3
 16145 1c77 01       		.uleb128 0x1
 16146 1c78 51       		.byte	0x51
ARM GAS  /tmp/ccaP1CVS.s 			page 410


 16147 1c79 22       		.byte	0x22
 16148 1c7a 9F       		.byte	0x9f
 16149 1c7b F4070000 		.4byte	.LVL183-.Ltext0
 16150 1c7f 01080000 		.4byte	.LVL185-1-.Ltext0
 16151 1c83 0100     		.2byte	0x1
 16152 1c85 53       		.byte	0x53
 16153 1c86 01080000 		.4byte	.LVL185-1-.Ltext0
 16154 1c8a 08080000 		.4byte	.LFE9-.Ltext0
 16155 1c8e 0700     		.2byte	0x7
 16156 1c90 74       		.byte	0x74
 16157 1c91 00       		.sleb128 0
 16158 1c92 F3       		.byte	0xf3
 16159 1c93 01       		.uleb128 0x1
 16160 1c94 51       		.byte	0x51
 16161 1c95 22       		.byte	0x22
 16162 1c96 9F       		.byte	0x9f
 16163 1c97 00000000 		.4byte	0
 16164 1c9b 00000000 		.4byte	0
 16165              	.LVUS95:
 16166 1c9f 00       		.uleb128 .LVU799
 16167 1ca0 00       		.uleb128 .LVU807
 16168              	.LLST95:
 16169 1ca1 DC070000 		.4byte	.LVL182-.Ltext0
 16170 1ca5 F4070000 		.4byte	.LVL183-.Ltext0
 16171 1ca9 0100     		.2byte	0x1
 16172 1cab 50       		.byte	0x50
 16173 1cac 00000000 		.4byte	0
 16174 1cb0 00000000 		.4byte	0
 16175              	.LVUS96:
 16176 1cb4 00       		.uleb128 .LVU788
 16177 1cb5 00       		.uleb128 .LVU796
 16178 1cb6 00       		.uleb128 .LVU807
 16179 1cb7 00       		.uleb128 .LVU813
 16180              	.LLST96:
 16181 1cb8 C8070000 		.4byte	.LVL178-.Ltext0
 16182 1cbc D8070000 		.4byte	.LVL181-.Ltext0
 16183 1cc0 0100     		.2byte	0x1
 16184 1cc2 52       		.byte	0x52
 16185 1cc3 F4070000 		.4byte	.LVL183-.Ltext0
 16186 1cc7 01080000 		.4byte	.LVL185-1-.Ltext0
 16187 1ccb 0100     		.2byte	0x1
 16188 1ccd 52       		.byte	0x52
 16189 1cce 00000000 		.4byte	0
 16190 1cd2 00000000 		.4byte	0
 16191              	.LLST29:
 16192 1cd6 64020000 		.4byte	.LFB8-.Ltext0
 16193 1cda 66020000 		.4byte	.LCFI7-.Ltext0
 16194 1cde 0200     		.2byte	0x2
 16195 1ce0 7D       		.byte	0x7d
 16196 1ce1 00       		.sleb128 0
 16197 1ce2 66020000 		.4byte	.LCFI7-.Ltext0
 16198 1ce6 04030000 		.4byte	.LFE8-.Ltext0
 16199 1cea 0200     		.2byte	0x2
 16200 1cec 7D       		.byte	0x7d
 16201 1ced 10       		.sleb128 16
 16202 1cee 00000000 		.4byte	0
 16203 1cf2 00000000 		.4byte	0
ARM GAS  /tmp/ccaP1CVS.s 			page 411


 16204              	.LVUS30:
 16205 1cf6 00       		.uleb128 0
 16206 1cf7 00       		.uleb128 .LVU259
 16207 1cf8 00       		.uleb128 .LVU259
 16208 1cf9 00       		.uleb128 .LVU262
 16209              	.LLST30:
 16210 1cfa 64020000 		.4byte	.LVL64-.Ltext0
 16211 1cfe 6D020000 		.4byte	.LVL65-1-.Ltext0
 16212 1d02 0100     		.2byte	0x1
 16213 1d04 50       		.byte	0x50
 16214 1d05 6D020000 		.4byte	.LVL65-1-.Ltext0
 16215 1d09 72020000 		.4byte	.LVL66-.Ltext0
 16216 1d0d 0100     		.2byte	0x1
 16217 1d0f 55       		.byte	0x55
 16218 1d10 00000000 		.4byte	0
 16219 1d14 00000000 		.4byte	0
 16220              	.LVUS31:
 16221 1d18 00       		.uleb128 .LVU262
 16222 1d19 00       		.uleb128 0
 16223              	.LLST31:
 16224 1d1a 72020000 		.4byte	.LVL66-.Ltext0
 16225 1d1e 04030000 		.4byte	.LFE8-.Ltext0
 16226 1d22 0100     		.2byte	0x1
 16227 1d24 55       		.byte	0x55
 16228 1d25 00000000 		.4byte	0
 16229 1d29 00000000 		.4byte	0
 16230              	.LVUS32:
 16231 1d2d 01       		.uleb128 .LVU300
 16232 1d2e 00       		.uleb128 .LVU304
 16233              	.LLST32:
 16234 1d2f EC020000 		.4byte	.LVL72-.Ltext0
 16235 1d33 F6020000 		.4byte	.LVL74-.Ltext0
 16236 1d37 0100     		.2byte	0x1
 16237 1d39 55       		.byte	0x55
 16238 1d3a 00000000 		.4byte	0
 16239 1d3e 00000000 		.4byte	0
 16240              	.LLST10:
 16241 1d42 E0000000 		.4byte	.LFB5-.Ltext0
 16242 1d46 E4000000 		.4byte	.LCFI6-.Ltext0
 16243 1d4a 0200     		.2byte	0x2
 16244 1d4c 7D       		.byte	0x7d
 16245 1d4d 00       		.sleb128 0
 16246 1d4e E4000000 		.4byte	.LCFI6-.Ltext0
 16247 1d52 64020000 		.4byte	.LFE5-.Ltext0
 16248 1d56 0200     		.2byte	0x2
 16249 1d58 7D       		.byte	0x7d
 16250 1d59 28       		.sleb128 40
 16251 1d5a 00000000 		.4byte	0
 16252 1d5e 00000000 		.4byte	0
 16253              	.LVUS11:
 16254 1d62 00       		.uleb128 0
 16255 1d63 00       		.uleb128 .LVU96
 16256 1d64 00       		.uleb128 .LVU96
 16257 1d65 00       		.uleb128 .LVU189
 16258 1d66 00       		.uleb128 .LVU189
 16259 1d67 00       		.uleb128 0
 16260              	.LLST11:
ARM GAS  /tmp/ccaP1CVS.s 			page 412


 16261 1d68 E0000000 		.4byte	.LVL23-.Ltext0
 16262 1d6c EA000000 		.4byte	.LVL24-.Ltext0
 16263 1d70 0100     		.2byte	0x1
 16264 1d72 50       		.byte	0x50
 16265 1d73 EA000000 		.4byte	.LVL24-.Ltext0
 16266 1d77 9E010000 		.4byte	.LVL49-.Ltext0
 16267 1d7b 0100     		.2byte	0x1
 16268 1d7d 57       		.byte	0x57
 16269 1d7e 9E010000 		.4byte	.LVL49-.Ltext0
 16270 1d82 64020000 		.4byte	.LFE5-.Ltext0
 16271 1d86 0400     		.2byte	0x4
 16272 1d88 F3       		.byte	0xf3
 16273 1d89 01       		.uleb128 0x1
 16274 1d8a 50       		.byte	0x50
 16275 1d8b 9F       		.byte	0x9f
 16276 1d8c 00000000 		.4byte	0
 16277 1d90 00000000 		.4byte	0
 16278              	.LVUS12:
 16279 1d94 00       		.uleb128 0
 16280 1d95 00       		.uleb128 .LVU99
 16281 1d96 00       		.uleb128 .LVU99
 16282 1d97 00       		.uleb128 .LVU132
 16283 1d98 00       		.uleb128 .LVU132
 16284 1d99 00       		.uleb128 .LVU143
 16285 1d9a 00       		.uleb128 .LVU143
 16286 1d9b 00       		.uleb128 0
 16287              	.LLST12:
 16288 1d9c E0000000 		.4byte	.LVL23-.Ltext0
 16289 1da0 F1000000 		.4byte	.LVL25-1-.Ltext0
 16290 1da4 0100     		.2byte	0x1
 16291 1da6 51       		.byte	0x51
 16292 1da7 F1000000 		.4byte	.LVL25-1-.Ltext0
 16293 1dab 2E010000 		.4byte	.LVL36-.Ltext0
 16294 1daf 0100     		.2byte	0x1
 16295 1db1 55       		.byte	0x55
 16296 1db2 2E010000 		.4byte	.LVL36-.Ltext0
 16297 1db6 42010000 		.4byte	.LVL40-.Ltext0
 16298 1dba 0300     		.2byte	0x3
 16299 1dbc 75       		.byte	0x75
 16300 1dbd 71       		.sleb128 -15
 16301 1dbe 9F       		.byte	0x9f
 16302 1dbf 42010000 		.4byte	.LVL40-.Ltext0
 16303 1dc3 64020000 		.4byte	.LFE5-.Ltext0
 16304 1dc7 0400     		.2byte	0x4
 16305 1dc9 F3       		.byte	0xf3
 16306 1dca 01       		.uleb128 0x1
 16307 1dcb 51       		.byte	0x51
 16308 1dcc 9F       		.byte	0x9f
 16309 1dcd 00000000 		.4byte	0
 16310 1dd1 00000000 		.4byte	0
 16311              	.LVUS13:
 16312 1dd5 00       		.uleb128 0
 16313 1dd6 00       		.uleb128 .LVU99
 16314 1dd7 00       		.uleb128 .LVU99
 16315 1dd8 00       		.uleb128 0
 16316              	.LLST13:
 16317 1dd9 E0000000 		.4byte	.LVL23-.Ltext0
ARM GAS  /tmp/ccaP1CVS.s 			page 413


 16318 1ddd F1000000 		.4byte	.LVL25-1-.Ltext0
 16319 1de1 0100     		.2byte	0x1
 16320 1de3 52       		.byte	0x52
 16321 1de4 F1000000 		.4byte	.LVL25-1-.Ltext0
 16322 1de8 64020000 		.4byte	.LFE5-.Ltext0
 16323 1dec 0400     		.2byte	0x4
 16324 1dee F3       		.byte	0xf3
 16325 1def 01       		.uleb128 0x1
 16326 1df0 52       		.byte	0x52
 16327 1df1 9F       		.byte	0x9f
 16328 1df2 00000000 		.4byte	0
 16329 1df6 00000000 		.4byte	0
 16330              	.LVUS14:
 16331 1dfa 00       		.uleb128 0
 16332 1dfb 00       		.uleb128 .LVU99
 16333 1dfc 00       		.uleb128 .LVU99
 16334 1dfd 00       		.uleb128 .LVU199
 16335 1dfe 00       		.uleb128 .LVU199
 16336 1dff 00       		.uleb128 .LVU245
 16337 1e00 00       		.uleb128 .LVU245
 16338 1e01 00       		.uleb128 0
 16339              	.LLST14:
 16340 1e02 E0000000 		.4byte	.LVL23-.Ltext0
 16341 1e06 F1000000 		.4byte	.LVL25-1-.Ltext0
 16342 1e0a 0100     		.2byte	0x1
 16343 1e0c 53       		.byte	0x53
 16344 1e0d F1000000 		.4byte	.LVL25-1-.Ltext0
 16345 1e11 B2010000 		.4byte	.LVL50-.Ltext0
 16346 1e15 0100     		.2byte	0x1
 16347 1e17 58       		.byte	0x58
 16348 1e18 B2010000 		.4byte	.LVL50-.Ltext0
 16349 1e1c 46020000 		.4byte	.LVL63-.Ltext0
 16350 1e20 0400     		.2byte	0x4
 16351 1e22 F3       		.byte	0xf3
 16352 1e23 01       		.uleb128 0x1
 16353 1e24 53       		.byte	0x53
 16354 1e25 9F       		.byte	0x9f
 16355 1e26 46020000 		.4byte	.LVL63-.Ltext0
 16356 1e2a 64020000 		.4byte	.LFE5-.Ltext0
 16357 1e2e 0100     		.2byte	0x1
 16358 1e30 58       		.byte	0x58
 16359 1e31 00000000 		.4byte	0
 16360 1e35 00000000 		.4byte	0
 16361              	.LVUS15:
 16362 1e39 00       		.uleb128 0
 16363 1e3a 00       		.uleb128 .LVU240
 16364 1e3b 00       		.uleb128 .LVU245
 16365 1e3c 00       		.uleb128 0
 16366              	.LLST15:
 16367 1e3d E0000000 		.4byte	.LVL23-.Ltext0
 16368 1e41 38020000 		.4byte	.LVL61-.Ltext0
 16369 1e45 0200     		.2byte	0x2
 16370 1e47 91       		.byte	0x91
 16371 1e48 00       		.sleb128 0
 16372 1e49 46020000 		.4byte	.LVL63-.Ltext0
 16373 1e4d 64020000 		.4byte	.LFE5-.Ltext0
 16374 1e51 0200     		.2byte	0x2
ARM GAS  /tmp/ccaP1CVS.s 			page 414


 16375 1e53 91       		.byte	0x91
 16376 1e54 00       		.sleb128 0
 16377 1e55 00000000 		.4byte	0
 16378 1e59 00000000 		.4byte	0
 16379              	.LVUS16:
 16380 1e5d 00       		.uleb128 0
 16381 1e5e 00       		.uleb128 .LVU245
 16382 1e5f 00       		.uleb128 .LVU245
 16383 1e60 00       		.uleb128 0
 16384              	.LLST16:
 16385 1e61 E0000000 		.4byte	.LVL23-.Ltext0
 16386 1e65 46020000 		.4byte	.LVL63-.Ltext0
 16387 1e69 0200     		.2byte	0x2
 16388 1e6b 91       		.byte	0x91
 16389 1e6c 04       		.sleb128 4
 16390 1e6d 46020000 		.4byte	.LVL63-.Ltext0
 16391 1e71 64020000 		.4byte	.LFE5-.Ltext0
 16392 1e75 0200     		.2byte	0x2
 16393 1e77 91       		.byte	0x91
 16394 1e78 04       		.sleb128 4
 16395 1e79 00000000 		.4byte	0
 16396 1e7d 00000000 		.4byte	0
 16397              	.LVUS17:
 16398 1e81 00       		.uleb128 .LVU104
 16399 1e82 00       		.uleb128 .LVU116
 16400 1e83 00       		.uleb128 .LVU116
 16401 1e84 00       		.uleb128 .LVU125
 16402 1e85 00       		.uleb128 .LVU125
 16403 1e86 00       		.uleb128 .LVU127
 16404 1e87 00       		.uleb128 .LVU127
 16405 1e88 00       		.uleb128 .LVU128
 16406 1e89 00       		.uleb128 .LVU128
 16407 1e8a 02       		.uleb128 .LVU130
 16408 1e8b 00       		.uleb128 .LVU131
 16409 1e8c 01       		.uleb128 .LVU243
 16410 1e8d 00       		.uleb128 .LVU245
 16411 1e8e 00       		.uleb128 0
 16412              	.LLST17:
 16413 1e8f FC000000 		.4byte	.LVL27-.Ltext0
 16414 1e93 0A010000 		.4byte	.LVL29-.Ltext0
 16415 1e97 0100     		.2byte	0x1
 16416 1e99 50       		.byte	0x50
 16417 1e9a 0A010000 		.4byte	.LVL29-.Ltext0
 16418 1e9e 1A010000 		.4byte	.LVL32-.Ltext0
 16419 1ea2 0100     		.2byte	0x1
 16420 1ea4 54       		.byte	0x54
 16421 1ea5 1A010000 		.4byte	.LVL32-.Ltext0
 16422 1ea9 1C010000 		.4byte	.LVL33-.Ltext0
 16423 1ead 0100     		.2byte	0x1
 16424 1eaf 50       		.byte	0x50
 16425 1eb0 1C010000 		.4byte	.LVL33-.Ltext0
 16426 1eb4 20010000 		.4byte	.LVL34-.Ltext0
 16427 1eb8 0100     		.2byte	0x1
 16428 1eba 54       		.byte	0x54
 16429 1ebb 20010000 		.4byte	.LVL34-.Ltext0
 16430 1ebf 20010000 		.4byte	.LVL34-.Ltext0
 16431 1ec3 0200     		.2byte	0x2
ARM GAS  /tmp/ccaP1CVS.s 			page 415


 16432 1ec5 30       		.byte	0x30
 16433 1ec6 9F       		.byte	0x9f
 16434 1ec7 26010000 		.4byte	.LVL35-.Ltext0
 16435 1ecb 40020000 		.4byte	.LVL62-.Ltext0
 16436 1ecf 0100     		.2byte	0x1
 16437 1ed1 54       		.byte	0x54
 16438 1ed2 46020000 		.4byte	.LVL63-.Ltext0
 16439 1ed6 64020000 		.4byte	.LFE5-.Ltext0
 16440 1eda 0100     		.2byte	0x1
 16441 1edc 54       		.byte	0x54
 16442 1edd 00000000 		.4byte	0
 16443 1ee1 00000000 		.4byte	0
 16444              	.LVUS18:
 16445 1ee5 00       		.uleb128 .LVU99
 16446 1ee6 00       		.uleb128 .LVU103
 16447 1ee7 00       		.uleb128 .LVU103
 16448 1ee8 00       		.uleb128 .LVU148
 16449              	.LLST18:
 16450 1ee9 F2000000 		.4byte	.LVL25-.Ltext0
 16451 1eed F8000000 		.4byte	.LVL26-.Ltext0
 16452 1ef1 0100     		.2byte	0x1
 16453 1ef3 50       		.byte	0x50
 16454 1ef4 F8000000 		.4byte	.LVL26-.Ltext0
 16455 1ef8 52010000 		.4byte	.LVL42-.Ltext0
 16456 1efc 0100     		.2byte	0x1
 16457 1efe 59       		.byte	0x59
 16458 1eff 00000000 		.4byte	0
 16459 1f03 00000000 		.4byte	0
 16460              	.LVUS19:
 16461 1f07 04       		.uleb128 .LVU112
 16462 1f08 00       		.uleb128 .LVU125
 16463 1f09 00       		.uleb128 .LVU131
 16464 1f0a 01       		.uleb128 .LVU181
 16465              	.LLST19:
 16466 1f0b 04010000 		.4byte	.LVL28-.Ltext0
 16467 1f0f 1A010000 		.4byte	.LVL32-.Ltext0
 16468 1f13 0200     		.2byte	0x2
 16469 1f15 30       		.byte	0x30
 16470 1f16 9F       		.byte	0x9f
 16471 1f17 26010000 		.4byte	.LVL35-.Ltext0
 16472 1f1b 92010000 		.4byte	.LVL47-.Ltext0
 16473 1f1f 0200     		.2byte	0x2
 16474 1f21 30       		.byte	0x30
 16475 1f22 9F       		.byte	0x9f
 16476 1f23 00000000 		.4byte	0
 16477 1f27 00000000 		.4byte	0
 16478              	.LVUS20:
 16479 1f2b 03       		.uleb128 .LVU111
 16480 1f2c 00       		.uleb128 .LVU116
 16481 1f2d 00       		.uleb128 .LVU116
 16482 1f2e 00       		.uleb128 .LVU125
 16483 1f2f 00       		.uleb128 .LVU131
 16484 1f30 01       		.uleb128 .LVU181
 16485              	.LLST20:
 16486 1f31 04010000 		.4byte	.LVL28-.Ltext0
 16487 1f35 0A010000 		.4byte	.LVL29-.Ltext0
 16488 1f39 0100     		.2byte	0x1
ARM GAS  /tmp/ccaP1CVS.s 			page 416


 16489 1f3b 50       		.byte	0x50
 16490 1f3c 0A010000 		.4byte	.LVL29-.Ltext0
 16491 1f40 1A010000 		.4byte	.LVL32-.Ltext0
 16492 1f44 0100     		.2byte	0x1
 16493 1f46 54       		.byte	0x54
 16494 1f47 26010000 		.4byte	.LVL35-.Ltext0
 16495 1f4b 92010000 		.4byte	.LVL47-.Ltext0
 16496 1f4f 0100     		.2byte	0x1
 16497 1f51 54       		.byte	0x54
 16498 1f52 00000000 		.4byte	0
 16499 1f56 00000000 		.4byte	0
 16500              	.LVUS21:
 16501 1f5a 03       		.uleb128 .LVU111
 16502 1f5b 00       		.uleb128 .LVU125
 16503 1f5c 00       		.uleb128 .LVU131
 16504 1f5d 01       		.uleb128 .LVU181
 16505              	.LLST21:
 16506 1f5e 04010000 		.4byte	.LVL28-.Ltext0
 16507 1f62 1A010000 		.4byte	.LVL32-.Ltext0
 16508 1f66 0200     		.2byte	0x2
 16509 1f68 91       		.byte	0x91
 16510 1f69 04       		.sleb128 4
 16511 1f6a 26010000 		.4byte	.LVL35-.Ltext0
 16512 1f6e 92010000 		.4byte	.LVL47-.Ltext0
 16513 1f72 0200     		.2byte	0x2
 16514 1f74 91       		.byte	0x91
 16515 1f75 04       		.sleb128 4
 16516 1f76 00000000 		.4byte	0
 16517 1f7a 00000000 		.4byte	0
 16518              	.LVUS22:
 16519 1f7e 03       		.uleb128 .LVU111
 16520 1f7f 00       		.uleb128 .LVU125
 16521 1f80 00       		.uleb128 .LVU131
 16522 1f81 00       		.uleb128 .LVU145
 16523 1f82 00       		.uleb128 .LVU145
 16524 1f83 00       		.uleb128 .LVU159
 16525 1f84 00       		.uleb128 .LVU159
 16526 1f85 01       		.uleb128 .LVU181
 16527              	.LLST22:
 16528 1f86 04010000 		.4byte	.LVL28-.Ltext0
 16529 1f8a 1A010000 		.4byte	.LVL32-.Ltext0
 16530 1f8e 0200     		.2byte	0x2
 16531 1f90 91       		.byte	0x91
 16532 1f91 00       		.sleb128 0
 16533 1f92 26010000 		.4byte	.LVL35-.Ltext0
 16534 1f96 4E010000 		.4byte	.LVL41-.Ltext0
 16535 1f9a 0200     		.2byte	0x2
 16536 1f9c 91       		.byte	0x91
 16537 1f9d 00       		.sleb128 0
 16538 1f9e 4E010000 		.4byte	.LVL41-.Ltext0
 16539 1fa2 66010000 		.4byte	.LVL44-.Ltext0
 16540 1fa6 0100     		.2byte	0x1
 16541 1fa8 55       		.byte	0x55
 16542 1fa9 66010000 		.4byte	.LVL44-.Ltext0
 16543 1fad 92010000 		.4byte	.LVL47-.Ltext0
 16544 1fb1 1700     		.2byte	0x17
 16545 1fb3 34       		.byte	0x34
ARM GAS  /tmp/ccaP1CVS.s 			page 417


 16546 1fb4 91       		.byte	0x91
 16547 1fb5 00       		.sleb128 0
 16548 1fb6 06       		.byte	0x6
 16549 1fb7 91       		.byte	0x91
 16550 1fb8 00       		.sleb128 0
 16551 1fb9 06       		.byte	0x6
 16552 1fba 40       		.byte	0x40
 16553 1fbb 4B       		.byte	0x4b
 16554 1fbc 24       		.byte	0x24
 16555 1fbd 22       		.byte	0x22
 16556 1fbe 0C       		.byte	0xc
 16557 1fbf 04000080 		.4byte	0x80000004
 16558 1fc3 2A       		.byte	0x2a
 16559 1fc4 28       		.byte	0x28
 16560 1fc5 0100     		.2byte	0x1
 16561 1fc7 16       		.byte	0x16
 16562 1fc8 13       		.byte	0x13
 16563 1fc9 9F       		.byte	0x9f
 16564 1fca 00000000 		.4byte	0
 16565 1fce 00000000 		.4byte	0
 16566              	.LVUS23:
 16567 1fd2 03       		.uleb128 .LVU111
 16568 1fd3 00       		.uleb128 .LVU125
 16569 1fd4 00       		.uleb128 .LVU131
 16570 1fd5 01       		.uleb128 .LVU181
 16571              	.LLST23:
 16572 1fd6 04010000 		.4byte	.LVL28-.Ltext0
 16573 1fda 1A010000 		.4byte	.LVL32-.Ltext0
 16574 1fde 0100     		.2byte	0x1
 16575 1fe0 58       		.byte	0x58
 16576 1fe1 26010000 		.4byte	.LVL35-.Ltext0
 16577 1fe5 92010000 		.4byte	.LVL47-.Ltext0
 16578 1fe9 0100     		.2byte	0x1
 16579 1feb 58       		.byte	0x58
 16580 1fec 00000000 		.4byte	0
 16581 1ff0 00000000 		.4byte	0
 16582              	.LVUS24:
 16583 1ff4 03       		.uleb128 .LVU111
 16584 1ff5 00       		.uleb128 .LVU125
 16585 1ff6 00       		.uleb128 .LVU131
 16586 1ff7 00       		.uleb128 .LVU132
 16587 1ff8 00       		.uleb128 .LVU132
 16588 1ff9 00       		.uleb128 .LVU143
 16589 1ffa 00       		.uleb128 .LVU143
 16590 1ffb 01       		.uleb128 .LVU181
 16591              	.LLST24:
 16592 1ffc 04010000 		.4byte	.LVL28-.Ltext0
 16593 2000 1A010000 		.4byte	.LVL32-.Ltext0
 16594 2004 0100     		.2byte	0x1
 16595 2006 55       		.byte	0x55
 16596 2007 26010000 		.4byte	.LVL35-.Ltext0
 16597 200b 2E010000 		.4byte	.LVL36-.Ltext0
 16598 200f 0100     		.2byte	0x1
 16599 2011 55       		.byte	0x55
 16600 2012 2E010000 		.4byte	.LVL36-.Ltext0
 16601 2016 42010000 		.4byte	.LVL40-.Ltext0
 16602 201a 0300     		.2byte	0x3
ARM GAS  /tmp/ccaP1CVS.s 			page 418


 16603 201c 75       		.byte	0x75
 16604 201d 71       		.sleb128 -15
 16605 201e 9F       		.byte	0x9f
 16606 201f 42010000 		.4byte	.LVL40-.Ltext0
 16607 2023 92010000 		.4byte	.LVL47-.Ltext0
 16608 2027 0400     		.2byte	0x4
 16609 2029 F3       		.byte	0xf3
 16610 202a 01       		.uleb128 0x1
 16611 202b 51       		.byte	0x51
 16612 202c 9F       		.byte	0x9f
 16613 202d 00000000 		.4byte	0
 16614 2031 00000000 		.4byte	0
 16615              	.LVUS25:
 16616 2035 03       		.uleb128 .LVU111
 16617 2036 00       		.uleb128 .LVU125
 16618 2037 00       		.uleb128 .LVU131
 16619 2038 01       		.uleb128 .LVU181
 16620              	.LLST25:
 16621 2039 04010000 		.4byte	.LVL28-.Ltext0
 16622 203d 1A010000 		.4byte	.LVL32-.Ltext0
 16623 2041 0100     		.2byte	0x1
 16624 2043 57       		.byte	0x57
 16625 2044 26010000 		.4byte	.LVL35-.Ltext0
 16626 2048 92010000 		.4byte	.LVL47-.Ltext0
 16627 204c 0100     		.2byte	0x1
 16628 204e 57       		.byte	0x57
 16629 204f 00000000 		.4byte	0
 16630 2053 00000000 		.4byte	0
 16631              	.LVUS26:
 16632 2057 00       		.uleb128 .LVU132
 16633 2058 00       		.uleb128 .LVU134
 16634 2059 00       		.uleb128 .LVU134
 16635 205a 02       		.uleb128 .LVU139
 16636 205b 02       		.uleb128 .LVU139
 16637 205c 00       		.uleb128 .LVU141
 16638              	.LLST26:
 16639 205d 2E010000 		.4byte	.LVL36-.Ltext0
 16640 2061 32010000 		.4byte	.LVL37-.Ltext0
 16641 2065 0800     		.2byte	0x8
 16642 2067 73       		.byte	0x73
 16643 2068 00       		.sleb128 0
 16644 2069 75       		.byte	0x75
 16645 206a 00       		.sleb128 0
 16646 206b 1C       		.byte	0x1c
 16647 206c 23       		.byte	0x23
 16648 206d 10       		.uleb128 0x10
 16649 206e 9F       		.byte	0x9f
 16650 206f 32010000 		.4byte	.LVL37-.Ltext0
 16651 2073 38010000 		.4byte	.LVL38-.Ltext0
 16652 2077 0800     		.2byte	0x8
 16653 2079 73       		.byte	0x73
 16654 207a 00       		.sleb128 0
 16655 207b 75       		.byte	0x75
 16656 207c 00       		.sleb128 0
 16657 207d 1C       		.byte	0x1c
 16658 207e 23       		.byte	0x23
 16659 207f 0F       		.uleb128 0xf
ARM GAS  /tmp/ccaP1CVS.s 			page 419


 16660 2080 9F       		.byte	0x9f
 16661 2081 38010000 		.4byte	.LVL38-.Ltext0
 16662 2085 3C010000 		.4byte	.LVL39-.Ltext0
 16663 2089 0800     		.2byte	0x8
 16664 208b 73       		.byte	0x73
 16665 208c 00       		.sleb128 0
 16666 208d 75       		.byte	0x75
 16667 208e 00       		.sleb128 0
 16668 208f 1C       		.byte	0x1c
 16669 2090 23       		.byte	0x23
 16670 2091 10       		.uleb128 0x10
 16671 2092 9F       		.byte	0x9f
 16672 2093 00000000 		.4byte	0
 16673 2097 00000000 		.4byte	0
 16674              	.LVUS27:
 16675 209b 03       		.uleb128 .LVU183
 16676 209c 01       		.uleb128 .LVU243
 16677 209d 00       		.uleb128 .LVU245
 16678 209e 00       		.uleb128 0
 16679              	.LLST27:
 16680 209f 92010000 		.4byte	.LVL47-.Ltext0
 16681 20a3 40020000 		.4byte	.LVL62-.Ltext0
 16682 20a7 0100     		.2byte	0x1
 16683 20a9 54       		.byte	0x54
 16684 20aa 46020000 		.4byte	.LVL63-.Ltext0
 16685 20ae 64020000 		.4byte	.LFE5-.Ltext0
 16686 20b2 0100     		.2byte	0x1
 16687 20b4 54       		.byte	0x54
 16688 20b5 00000000 		.4byte	0
 16689 20b9 00000000 		.4byte	0
 16690              	.LVUS28:
 16691 20bd 00       		.uleb128 .LVU199
 16692 20be 00       		.uleb128 .LVU201
 16693 20bf 00       		.uleb128 .LVU201
 16694 20c0 01       		.uleb128 .LVU203
 16695 20c1 01       		.uleb128 .LVU203
 16696 20c2 00       		.uleb128 .LVU206
 16697              	.LLST28:
 16698 20c3 B2010000 		.4byte	.LVL50-.Ltext0
 16699 20c7 B6010000 		.4byte	.LVL51-.Ltext0
 16700 20cb 0100     		.2byte	0x1
 16701 20cd 56       		.byte	0x56
 16702 20ce B6010000 		.4byte	.LVL51-.Ltext0
 16703 20d2 BA010000 		.4byte	.LVL52-.Ltext0
 16704 20d6 0300     		.2byte	0x3
 16705 20d8 76       		.byte	0x76
 16706 20d9 7F       		.sleb128 -1
 16707 20da 9F       		.byte	0x9f
 16708 20db BA010000 		.4byte	.LVL52-.Ltext0
 16709 20df C4010000 		.4byte	.LVL53-.Ltext0
 16710 20e3 0100     		.2byte	0x1
 16711 20e5 56       		.byte	0x56
 16712 20e6 00000000 		.4byte	0
 16713 20ea 00000000 		.4byte	0
 16714              	.LVUS5:
 16715 20ee 00       		.uleb128 .LVU54
 16716 20ef 00       		.uleb128 .LVU56
ARM GAS  /tmp/ccaP1CVS.s 			page 420


 16717 20f0 00       		.uleb128 .LVU56
 16718 20f1 00       		.uleb128 .LVU57
 16719 20f2 00       		.uleb128 .LVU57
 16720 20f3 00       		.uleb128 .LVU58
 16721              	.LLST5:
 16722 20f4 7E000000 		.4byte	.LVL11-.Ltext0
 16723 20f8 80000000 		.4byte	.LVL12-.Ltext0
 16724 20fc 0500     		.2byte	0x5
 16725 20fe 72       		.byte	0x72
 16726 20ff 0C       		.sleb128 12
 16727 2100 06       		.byte	0x6
 16728 2101 23       		.byte	0x23
 16729 2102 0C       		.uleb128 0xc
 16730 2103 80000000 		.4byte	.LVL12-.Ltext0
 16731 2107 82000000 		.4byte	.LVL13-.Ltext0
 16732 210b 0200     		.2byte	0x2
 16733 210d 72       		.byte	0x72
 16734 210e 0C       		.sleb128 12
 16735 210f 82000000 		.4byte	.LVL13-.Ltext0
 16736 2113 84000000 		.4byte	.LVL14-.Ltext0
 16737 2117 0100     		.2byte	0x1
 16738 2119 52       		.byte	0x52
 16739 211a 00000000 		.4byte	0
 16740 211e 00000000 		.4byte	0
 16741              	.LLST33:
 16742 2122 04030000 		.4byte	.LFB11-.Ltext0
 16743 2126 08030000 		.4byte	.LCFI8-.Ltext0
 16744 212a 0200     		.2byte	0x2
 16745 212c 7D       		.byte	0x7d
 16746 212d 00       		.sleb128 0
 16747 212e 08030000 		.4byte	.LCFI8-.Ltext0
 16748 2132 68030000 		.4byte	.LFE11-.Ltext0
 16749 2136 0200     		.2byte	0x2
 16750 2138 7D       		.byte	0x7d
 16751 2139 18       		.sleb128 24
 16752 213a 00000000 		.4byte	0
 16753 213e 00000000 		.4byte	0
 16754              	.LVUS34:
 16755 2142 00       		.uleb128 0
 16756 2143 00       		.uleb128 .LVU318
 16757 2144 00       		.uleb128 .LVU318
 16758 2145 00       		.uleb128 .LVU342
 16759 2146 00       		.uleb128 .LVU342
 16760 2147 00       		.uleb128 .LVU343
 16761 2148 00       		.uleb128 .LVU343
 16762 2149 00       		.uleb128 0
 16763              	.LLST34:
 16764 214a 04030000 		.4byte	.LVL76-.Ltext0
 16765 214e 15030000 		.4byte	.LVL77-1-.Ltext0
 16766 2152 0100     		.2byte	0x1
 16767 2154 50       		.byte	0x50
 16768 2155 15030000 		.4byte	.LVL77-1-.Ltext0
 16769 2159 56030000 		.4byte	.LVL84-.Ltext0
 16770 215d 0100     		.2byte	0x1
 16771 215f 55       		.byte	0x55
 16772 2160 56030000 		.4byte	.LVL84-.Ltext0
 16773 2164 58030000 		.4byte	.LVL85-.Ltext0
ARM GAS  /tmp/ccaP1CVS.s 			page 421


 16774 2168 0100     		.2byte	0x1
 16775 216a 50       		.byte	0x50
 16776 216b 58030000 		.4byte	.LVL85-.Ltext0
 16777 216f 68030000 		.4byte	.LFE11-.Ltext0
 16778 2173 0100     		.2byte	0x1
 16779 2175 55       		.byte	0x55
 16780 2176 00000000 		.4byte	0
 16781 217a 00000000 		.4byte	0
 16782              	.LVUS35:
 16783 217e 00       		.uleb128 .LVU336
 16784 217f 00       		.uleb128 .LVU339
 16785              	.LLST35:
 16786 2180 42030000 		.4byte	.LVL82-.Ltext0
 16787 2184 46030000 		.4byte	.LVL83-.Ltext0
 16788 2188 0100     		.2byte	0x1
 16789 218a 50       		.byte	0x50
 16790 218b 00000000 		.4byte	0
 16791 218f 00000000 		.4byte	0
 16792              	.LVUS36:
 16793 2193 00       		.uleb128 .LVU321
 16794 2194 00       		.uleb128 .LVU336
 16795 2195 00       		.uleb128 .LVU339
 16796 2196 00       		.uleb128 .LVU342
 16797 2197 00       		.uleb128 .LVU344
 16798 2198 00       		.uleb128 0
 16799              	.LLST36:
 16800 2199 1C030000 		.4byte	.LVL78-.Ltext0
 16801 219d 42030000 		.4byte	.LVL82-.Ltext0
 16802 21a1 0100     		.2byte	0x1
 16803 21a3 56       		.byte	0x56
 16804 21a4 46030000 		.4byte	.LVL83-.Ltext0
 16805 21a8 56030000 		.4byte	.LVL84-.Ltext0
 16806 21ac 0100     		.2byte	0x1
 16807 21ae 56       		.byte	0x56
 16808 21af 5A030000 		.4byte	.LVL86-.Ltext0
 16809 21b3 68030000 		.4byte	.LFE11-.Ltext0
 16810 21b7 0100     		.2byte	0x1
 16811 21b9 56       		.byte	0x56
 16812 21ba 00000000 		.4byte	0
 16813 21be 00000000 		.4byte	0
 16814              	.LVUS37:
 16815 21c2 01       		.uleb128 .LVU322
 16816 21c3 00       		.uleb128 .LVU336
 16817 21c4 00       		.uleb128 .LVU339
 16818 21c5 00       		.uleb128 .LVU342
 16819 21c6 00       		.uleb128 .LVU344
 16820 21c7 00       		.uleb128 0
 16821              	.LLST37:
 16822 21c8 1C030000 		.4byte	.LVL78-.Ltext0
 16823 21cc 42030000 		.4byte	.LVL82-.Ltext0
 16824 21d0 0100     		.2byte	0x1
 16825 21d2 58       		.byte	0x58
 16826 21d3 46030000 		.4byte	.LVL83-.Ltext0
 16827 21d7 56030000 		.4byte	.LVL84-.Ltext0
 16828 21db 0100     		.2byte	0x1
 16829 21dd 58       		.byte	0x58
 16830 21de 5A030000 		.4byte	.LVL86-.Ltext0
ARM GAS  /tmp/ccaP1CVS.s 			page 422


 16831 21e2 68030000 		.4byte	.LFE11-.Ltext0
 16832 21e6 0100     		.2byte	0x1
 16833 21e8 58       		.byte	0x58
 16834 21e9 00000000 		.4byte	0
 16835 21ed 00000000 		.4byte	0
 16836              	.LVUS38:
 16837 21f1 00       		.uleb128 .LVU324
 16838 21f2 00       		.uleb128 .LVU336
 16839 21f3 00       		.uleb128 .LVU339
 16840 21f4 00       		.uleb128 .LVU342
 16841 21f5 00       		.uleb128 .LVU344
 16842 21f6 00       		.uleb128 0
 16843              	.LLST38:
 16844 21f7 1E030000 		.4byte	.LVL79-.Ltext0
 16845 21fb 42030000 		.4byte	.LVL82-.Ltext0
 16846 21ff 0100     		.2byte	0x1
 16847 2201 57       		.byte	0x57
 16848 2202 46030000 		.4byte	.LVL83-.Ltext0
 16849 2206 56030000 		.4byte	.LVL84-.Ltext0
 16850 220a 0100     		.2byte	0x1
 16851 220c 57       		.byte	0x57
 16852 220d 5A030000 		.4byte	.LVL86-.Ltext0
 16853 2211 68030000 		.4byte	.LFE11-.Ltext0
 16854 2215 0100     		.2byte	0x1
 16855 2217 57       		.byte	0x57
 16856 2218 00000000 		.4byte	0
 16857 221c 00000000 		.4byte	0
 16858              	.LVUS39:
 16859 2220 04       		.uleb128 .LVU310
 16860 2221 00       		.uleb128 .LVU318
 16861 2222 00       		.uleb128 .LVU318
 16862 2223 00       		.uleb128 .LVU342
 16863 2224 00       		.uleb128 .LVU342
 16864 2225 00       		.uleb128 .LVU343
 16865 2226 00       		.uleb128 .LVU343
 16866 2227 00       		.uleb128 0
 16867              	.LLST39:
 16868 2228 04030000 		.4byte	.LVL76-.Ltext0
 16869 222c 15030000 		.4byte	.LVL77-1-.Ltext0
 16870 2230 0100     		.2byte	0x1
 16871 2232 50       		.byte	0x50
 16872 2233 15030000 		.4byte	.LVL77-1-.Ltext0
 16873 2237 56030000 		.4byte	.LVL84-.Ltext0
 16874 223b 0100     		.2byte	0x1
 16875 223d 55       		.byte	0x55
 16876 223e 56030000 		.4byte	.LVL84-.Ltext0
 16877 2242 58030000 		.4byte	.LVL85-.Ltext0
 16878 2246 0100     		.2byte	0x1
 16879 2248 50       		.byte	0x50
 16880 2249 58030000 		.4byte	.LVL85-.Ltext0
 16881 224d 68030000 		.4byte	.LFE11-.Ltext0
 16882 2251 0100     		.2byte	0x1
 16883 2253 55       		.byte	0x55
 16884 2254 00000000 		.4byte	0
 16885 2258 00000000 		.4byte	0
 16886              	.LVUS40:
 16887 225c 00       		.uleb128 .LVU330
ARM GAS  /tmp/ccaP1CVS.s 			page 423


 16888 225d 00       		.uleb128 .LVU336
 16889              	.LLST40:
 16890 225e 32030000 		.4byte	.LVL81-.Ltext0
 16891 2262 42030000 		.4byte	.LVL82-.Ltext0
 16892 2266 0100     		.2byte	0x1
 16893 2268 55       		.byte	0x55
 16894 2269 00000000 		.4byte	0
 16895 226d 00000000 		.4byte	0
 16896              	.LVUS78:
 16897 2271 00       		.uleb128 .LVU611
 16898 2272 00       		.uleb128 0
 16899              	.LLST78:
 16900 2273 00060000 		.4byte	.LVL137-.Ltext0
 16901 2277 08060000 		.4byte	.LFE23-.Ltext0
 16902 227b 0100     		.2byte	0x1
 16903 227d 50       		.byte	0x50
 16904 227e 00000000 		.4byte	0
 16905 2282 00000000 		.4byte	0
 16906              	.LLST100:
 16907 2286 36080000 		.4byte	.LFB29-.Ltext0
 16908 228a 3A080000 		.4byte	.LCFI26-.Ltext0
 16909 228e 0200     		.2byte	0x2
 16910 2290 7D       		.byte	0x7d
 16911 2291 00       		.sleb128 0
 16912 2292 3A080000 		.4byte	.LCFI26-.Ltext0
 16913 2296 84080000 		.4byte	.LFE29-.Ltext0
 16914 229a 0200     		.2byte	0x2
 16915 229c 7D       		.byte	0x7d
 16916 229d 0C       		.sleb128 12
 16917 229e 00000000 		.4byte	0
 16918 22a2 00000000 		.4byte	0
 16919              	.LVUS101:
 16920 22a6 00       		.uleb128 .LVU860
 16921 22a7 00       		.uleb128 .LVU863
 16922              	.LLST101:
 16923 22a8 5A080000 		.4byte	.LVL195-.Ltext0
 16924 22ac 6C080000 		.4byte	.LVL196-.Ltext0
 16925 22b0 0100     		.2byte	0x1
 16926 22b2 53       		.byte	0x53
 16927 22b3 00000000 		.4byte	0
 16928 22b7 00000000 		.4byte	0
 16929              	.LVUS102:
 16930 22bb 00       		.uleb128 .LVU851
 16931 22bc 00       		.uleb128 .LVU854
 16932              	.LLST102:
 16933 22bd 4E080000 		.4byte	.LVL192-.Ltext0
 16934 22c1 52080000 		.4byte	.LVL193-.Ltext0
 16935 22c5 0100     		.2byte	0x1
 16936 22c7 53       		.byte	0x53
 16937 22c8 00000000 		.4byte	0
 16938 22cc 00000000 		.4byte	0
 16939              	.LVUS103:
 16940 22d0 00       		.uleb128 .LVU857
 16941 22d1 01       		.uleb128 .LVU858
 16942              	.LLST103:
 16943 22d2 56080000 		.4byte	.LVL194-.Ltext0
 16944 22d6 56080000 		.4byte	.LVL194-.Ltext0
ARM GAS  /tmp/ccaP1CVS.s 			page 424


 16945 22da 0100     		.2byte	0x1
 16946 22dc 53       		.byte	0x53
 16947 22dd 00000000 		.4byte	0
 16948 22e1 00000000 		.4byte	0
 16949              	.LVUS104:
 16950 22e5 02       		.uleb128 .LVU862
 16951 22e6 00       		.uleb128 .LVU863
 16952              	.LLST104:
 16953 22e7 5A080000 		.4byte	.LVL195-.Ltext0
 16954 22eb 6C080000 		.4byte	.LVL196-.Ltext0
 16955 22ef 0B00     		.2byte	0xb
 16956 22f1 73       		.byte	0x73
 16957 22f2 00       		.sleb128 0
 16958 22f3 44       		.byte	0x44
 16959 22f4 1E       		.byte	0x1e
 16960 22f5 03       		.byte	0x3
 16961 22f6 48000000 		.4byte	pxReadyTasksLists
 16962 22fa 22       		.byte	0x22
 16963 22fb 9F       		.byte	0x9f
 16964 22fc 00000000 		.4byte	0
 16965 2300 00000000 		.4byte	0
 16966              	.LLST146:
 16967 2304 600B0000 		.4byte	.LFB45-.Ltext0
 16968 2308 640B0000 		.4byte	.LCFI41-.Ltext0
 16969 230c 0200     		.2byte	0x2
 16970 230e 7D       		.byte	0x7d
 16971 230f 00       		.sleb128 0
 16972 2310 640B0000 		.4byte	.LCFI41-.Ltext0
 16973 2314 C00B0000 		.4byte	.LFE45-.Ltext0
 16974 2318 0200     		.2byte	0x2
 16975 231a 7D       		.byte	0x7d
 16976 231b 28       		.sleb128 40
 16977 231c 00000000 		.4byte	0
 16978 2320 00000000 		.4byte	0
 16979              	.LVUS147:
 16980 2324 00       		.uleb128 0
 16981 2325 00       		.uleb128 .LVU1205
 16982 2326 00       		.uleb128 .LVU1205
 16983 2327 00       		.uleb128 0
 16984              	.LLST147:
 16985 2328 600B0000 		.4byte	.LVL279-.Ltext0
 16986 232c 8C0B0000 		.4byte	.LVL281-.Ltext0
 16987 2330 0100     		.2byte	0x1
 16988 2332 50       		.byte	0x50
 16989 2333 8C0B0000 		.4byte	.LVL281-.Ltext0
 16990 2337 C00B0000 		.4byte	.LFE45-.Ltext0
 16991 233b 0100     		.2byte	0x1
 16992 233d 56       		.byte	0x56
 16993 233e 00000000 		.4byte	0
 16994 2342 00000000 		.4byte	0
 16995              	.LVUS148:
 16996 2346 00       		.uleb128 0
 16997 2347 00       		.uleb128 .LVU1205
 16998 2348 00       		.uleb128 .LVU1205
 16999 2349 00       		.uleb128 0
 17000              	.LLST148:
 17001 234a 600B0000 		.4byte	.LVL279-.Ltext0
ARM GAS  /tmp/ccaP1CVS.s 			page 425


 17002 234e 8C0B0000 		.4byte	.LVL281-.Ltext0
 17003 2352 0100     		.2byte	0x1
 17004 2354 51       		.byte	0x51
 17005 2355 8C0B0000 		.4byte	.LVL281-.Ltext0
 17006 2359 C00B0000 		.4byte	.LFE45-.Ltext0
 17007 235d 0100     		.2byte	0x1
 17008 235f 54       		.byte	0x54
 17009 2360 00000000 		.4byte	0
 17010 2364 00000000 		.4byte	0
 17011              	.LVUS149:
 17012 2368 00       		.uleb128 0
 17013 2369 00       		.uleb128 .LVU1205
 17014 236a 00       		.uleb128 .LVU1205
 17015 236b 00       		.uleb128 0
 17016              	.LLST149:
 17017 236c 600B0000 		.4byte	.LVL279-.Ltext0
 17018 2370 8C0B0000 		.4byte	.LVL281-.Ltext0
 17019 2374 0100     		.2byte	0x1
 17020 2376 52       		.byte	0x52
 17021 2377 8C0B0000 		.4byte	.LVL281-.Ltext0
 17022 237b C00B0000 		.4byte	.LFE45-.Ltext0
 17023 237f 0400     		.2byte	0x4
 17024 2381 F3       		.byte	0xf3
 17025 2382 01       		.uleb128 0x1
 17026 2383 52       		.byte	0x52
 17027 2384 9F       		.byte	0x9f
 17028 2385 00000000 		.4byte	0
 17029 2389 00000000 		.4byte	0
 17030              	.LVUS150:
 17031 238d 00       		.uleb128 .LVU1196
 17032 238e 00       		.uleb128 .LVU1225
 17033              	.LLST150:
 17034 238f 6E0B0000 		.4byte	.LVL280-.Ltext0
 17035 2393 BA0B0000 		.4byte	.LVL285-.Ltext0
 17036 2397 0100     		.2byte	0x1
 17037 2399 57       		.byte	0x57
 17038 239a 00000000 		.4byte	0
 17039 239e 00000000 		.4byte	0
 17040              	.LVUS151:
 17041 23a2 00       		.uleb128 .LVU1196
 17042 23a3 00       		.uleb128 .LVU1205
 17043 23a4 00       		.uleb128 .LVU1205
 17044 23a5 00       		.uleb128 .LVU1225
 17045              	.LLST151:
 17046 23a6 6E0B0000 		.4byte	.LVL280-.Ltext0
 17047 23aa 8C0B0000 		.4byte	.LVL281-.Ltext0
 17048 23ae 0100     		.2byte	0x1
 17049 23b0 51       		.byte	0x51
 17050 23b1 8C0B0000 		.4byte	.LVL281-.Ltext0
 17051 23b5 BA0B0000 		.4byte	.LVL285-.Ltext0
 17052 23b9 0100     		.2byte	0x1
 17053 23bb 54       		.byte	0x54
 17054 23bc 00000000 		.4byte	0
 17055 23c0 00000000 		.4byte	0
 17056              	.LVUS152:
 17057 23c4 00       		.uleb128 .LVU1196
 17058 23c5 00       		.uleb128 .LVU1205
ARM GAS  /tmp/ccaP1CVS.s 			page 426


 17059 23c6 00       		.uleb128 .LVU1205
 17060 23c7 00       		.uleb128 .LVU1225
 17061              	.LLST152:
 17062 23c8 6E0B0000 		.4byte	.LVL280-.Ltext0
 17063 23cc 8C0B0000 		.4byte	.LVL281-.Ltext0
 17064 23d0 0100     		.2byte	0x1
 17065 23d2 50       		.byte	0x50
 17066 23d3 8C0B0000 		.4byte	.LVL281-.Ltext0
 17067 23d7 BA0B0000 		.4byte	.LVL285-.Ltext0
 17068 23db 0100     		.2byte	0x1
 17069 23dd 56       		.byte	0x56
 17070 23de 00000000 		.4byte	0
 17071 23e2 00000000 		.4byte	0
 17072              	.LVUS153:
 17073 23e6 00       		.uleb128 .LVU1219
 17074 23e7 00       		.uleb128 .LVU1225
 17075              	.LLST153:
 17076 23e8 AE0B0000 		.4byte	.LVL283-.Ltext0
 17077 23ec BA0B0000 		.4byte	.LVL285-.Ltext0
 17078 23f0 0100     		.2byte	0x1
 17079 23f2 59       		.byte	0x59
 17080 23f3 00000000 		.4byte	0
 17081 23f7 00000000 		.4byte	0
 17082              	.LVUS154:
 17083 23fb 00       		.uleb128 .LVU1205
 17084 23fc 00       		.uleb128 .LVU1225
 17085              	.LLST154:
 17086 23fd 8C0B0000 		.4byte	.LVL281-.Ltext0
 17087 2401 BA0B0000 		.4byte	.LVL285-.Ltext0
 17088 2405 0100     		.2byte	0x1
 17089 2407 5A       		.byte	0x5a
 17090 2408 00000000 		.4byte	0
 17091 240c 00000000 		.4byte	0
 17092              	.LVUS155:
 17093 2410 00       		.uleb128 .LVU1205
 17094 2411 00       		.uleb128 .LVU1217
 17095 2412 00       		.uleb128 .LVU1217
 17096 2413 01       		.uleb128 .LVU1223
 17097 2414 01       		.uleb128 .LVU1223
 17098 2415 00       		.uleb128 .LVU1225
 17099              	.LLST155:
 17100 2416 8C0B0000 		.4byte	.LVL281-.Ltext0
 17101 241a A40B0000 		.4byte	.LVL282-.Ltext0
 17102 241e 0100     		.2byte	0x1
 17103 2420 55       		.byte	0x55
 17104 2421 A40B0000 		.4byte	.LVL282-.Ltext0
 17105 2425 B60B0000 		.4byte	.LVL284-.Ltext0
 17106 2429 0300     		.2byte	0x3
 17107 242b 75       		.byte	0x75
 17108 242c 7F       		.sleb128 -1
 17109 242d 9F       		.byte	0x9f
 17110 242e B60B0000 		.4byte	.LVL284-.Ltext0
 17111 2432 BA0B0000 		.4byte	.LVL285-.Ltext0
 17112 2436 0100     		.2byte	0x1
 17113 2438 55       		.byte	0x55
 17114 2439 00000000 		.4byte	0
 17115 243d 00000000 		.4byte	0
ARM GAS  /tmp/ccaP1CVS.s 			page 427


 17116              	.LVUS156:
 17117 2441 02       		.uleb128 .LVU1198
 17118 2442 00       		.uleb128 .LVU1205
 17119 2443 00       		.uleb128 .LVU1205
 17120 2444 00       		.uleb128 .LVU1225
 17121              	.LLST156:
 17122 2445 6E0B0000 		.4byte	.LVL280-.Ltext0
 17123 2449 8C0B0000 		.4byte	.LVL281-.Ltext0
 17124 244d 0100     		.2byte	0x1
 17125 244f 51       		.byte	0x51
 17126 2450 8C0B0000 		.4byte	.LVL281-.Ltext0
 17127 2454 BA0B0000 		.4byte	.LVL285-.Ltext0
 17128 2458 0100     		.2byte	0x1
 17129 245a 54       		.byte	0x54
 17130 245b 00000000 		.4byte	0
 17131 245f 00000000 		.4byte	0
 17132              	.LVUS157:
 17133 2463 04       		.uleb128 .LVU1209
 17134 2464 00       		.uleb128 .LVU1225
 17135              	.LLST157:
 17136 2465 8C0B0000 		.4byte	.LVL281-.Ltext0
 17137 2469 BA0B0000 		.4byte	.LVL285-.Ltext0
 17138 246d 0100     		.2byte	0x1
 17139 246f 54       		.byte	0x54
 17140 2470 00000000 		.4byte	0
 17141 2474 00000000 		.4byte	0
 17142              		.section	.debug_aranges,"",%progbits
 17143 0000 1C000000 		.4byte	0x1c
 17144 0004 0200     		.2byte	0x2
 17145 0006 00000000 		.4byte	.Ldebug_info0
 17146 000a 04       		.byte	0x4
 17147 000b 00       		.byte	0
 17148 000c 0000     		.2byte	0
 17149 000e 0000     		.2byte	0
 17150 0010 00000000 		.4byte	.Ltext0
 17151 0014 38110000 		.4byte	.Letext0-.Ltext0
 17152 0018 00000000 		.4byte	0
 17153 001c 00000000 		.4byte	0
 17154              		.section	.debug_ranges,"",%progbits
 17155              	.Ldebug_ranges0:
 17156 0000 78000000 		.4byte	.LBB34-.Ltext0
 17157 0004 7A000000 		.4byte	.LBE34-.Ltext0
 17158 0008 7C000000 		.4byte	.LBB37-.Ltext0
 17159 000c 8C000000 		.4byte	.LBE37-.Ltext0
 17160 0010 00000000 		.4byte	0
 17161 0014 00000000 		.4byte	0
 17162 0018 96000000 		.4byte	.LBB43-.Ltext0
 17163 001c 9C000000 		.4byte	.LBE43-.Ltext0
 17164 0020 B0000000 		.4byte	.LBB48-.Ltext0
 17165 0024 E0000000 		.4byte	.LBE48-.Ltext0
 17166 0028 00000000 		.4byte	0
 17167 002c 00000000 		.4byte	0
 17168 0030 E4000000 		.4byte	.LBB56-.Ltext0
 17169 0034 E6000000 		.4byte	.LBE56-.Ltext0
 17170 0038 E8000000 		.4byte	.LBB57-.Ltext0
 17171 003c EA000000 		.4byte	.LBE57-.Ltext0
 17172 0040 EE000000 		.4byte	.LBB58-.Ltext0
ARM GAS  /tmp/ccaP1CVS.s 			page 428


 17173 0044 04010000 		.4byte	.LBE58-.Ltext0
 17174 0048 1A010000 		.4byte	.LBB62-.Ltext0
 17175 004c 20010000 		.4byte	.LBE62-.Ltext0
 17176 0050 00000000 		.4byte	0
 17177 0054 00000000 		.4byte	0
 17178 0058 04010000 		.4byte	.LBB59-.Ltext0
 17179 005c 1A010000 		.4byte	.LBE59-.Ltext0
 17180 0060 2E010000 		.4byte	.LBB63-.Ltext0
 17181 0064 92010000 		.4byte	.LBE63-.Ltext0
 17182 0068 00000000 		.4byte	0
 17183 006c 00000000 		.4byte	0
 17184 0070 92010000 		.4byte	.LBB64-.Ltext0
 17185 0074 40020000 		.4byte	.LBE64-.Ltext0
 17186 0078 46020000 		.4byte	.LBB69-.Ltext0
 17187 007c 64020000 		.4byte	.LBE69-.Ltext0
 17188 0080 00000000 		.4byte	0
 17189 0084 00000000 		.4byte	0
 17190 0088 E6020000 		.4byte	.LBB72-.Ltext0
 17191 008c E8020000 		.4byte	.LBE72-.Ltext0
 17192 0090 EC020000 		.4byte	.LBB75-.Ltext0
 17193 0094 F6020000 		.4byte	.LBE75-.Ltext0
 17194 0098 00000000 		.4byte	0
 17195 009c 00000000 		.4byte	0
 17196 00a0 E8040000 		.4byte	.LBB100-.Ltext0
 17197 00a4 E8040000 		.4byte	.LBE100-.Ltext0
 17198 00a8 EE040000 		.4byte	.LBB103-.Ltext0
 17199 00ac 02050000 		.4byte	.LBE103-.Ltext0
 17200 00b0 00000000 		.4byte	0
 17201 00b4 00000000 		.4byte	0
 17202 00b8 3E060000 		.4byte	.LBB114-.Ltext0
 17203 00bc 5E060000 		.4byte	.LBE114-.Ltext0
 17204 00c0 60060000 		.4byte	.LBB116-.Ltext0
 17205 00c4 76060000 		.4byte	.LBE116-.Ltext0
 17206 00c8 86060000 		.4byte	.LBB117-.Ltext0
 17207 00cc E6060000 		.4byte	.LBE117-.Ltext0
 17208 00d0 00000000 		.4byte	0
 17209 00d4 00000000 		.4byte	0
 17210 00d8 C2070000 		.4byte	.LBB119-.Ltext0
 17211 00dc D8070000 		.4byte	.LBE119-.Ltext0
 17212 00e0 F4070000 		.4byte	.LBB120-.Ltext0
 17213 00e4 08080000 		.4byte	.LBE120-.Ltext0
 17214 00e8 00000000 		.4byte	0
 17215 00ec 00000000 		.4byte	0
 17216 00f0 4E080000 		.4byte	.LBB130-.Ltext0
 17217 00f4 52080000 		.4byte	.LBE130-.Ltext0
 17218 00f8 54080000 		.4byte	.LBB134-.Ltext0
 17219 00fc 56080000 		.4byte	.LBE134-.Ltext0
 17220 0100 00000000 		.4byte	0
 17221 0104 00000000 		.4byte	0
 17222 0108 52080000 		.4byte	.LBB133-.Ltext0
 17223 010c 54080000 		.4byte	.LBE133-.Ltext0
 17224 0110 5A080000 		.4byte	.LBB135-.Ltext0
 17225 0114 7E080000 		.4byte	.LBE135-.Ltext0
 17226 0118 00000000 		.4byte	0
 17227 011c 00000000 		.4byte	0
 17228 0120 860A0000 		.4byte	.LBB136-.Ltext0
 17229 0124 B40A0000 		.4byte	.LBE136-.Ltext0
ARM GAS  /tmp/ccaP1CVS.s 			page 429


 17230 0128 BC0A0000 		.4byte	.LBB137-.Ltext0
 17231 012c C80A0000 		.4byte	.LBE137-.Ltext0
 17232 0130 00000000 		.4byte	0
 17233 0134 00000000 		.4byte	0
 17234 0138 200B0000 		.4byte	.LBB140-.Ltext0
 17235 013c 220B0000 		.4byte	.LBE140-.Ltext0
 17236 0140 240B0000 		.4byte	.LBB144-.Ltext0
 17237 0144 2E0B0000 		.4byte	.LBE144-.Ltext0
 17238 0148 520B0000 		.4byte	.LBB145-.Ltext0
 17239 014c 560B0000 		.4byte	.LBE145-.Ltext0
 17240 0150 00000000 		.4byte	0
 17241 0154 00000000 		.4byte	0
 17242 0158 6E0B0000 		.4byte	.LBB152-.Ltext0
 17243 015c 6E0B0000 		.4byte	.LBE152-.Ltext0
 17244 0160 740B0000 		.4byte	.LBB153-.Ltext0
 17245 0164 8C0B0000 		.4byte	.LBE153-.Ltext0
 17246 0168 00000000 		.4byte	0
 17247 016c 00000000 		.4byte	0
 17248 0170 8C0B0000 		.4byte	.LBB154-.Ltext0
 17249 0174 8E0B0000 		.4byte	.LBE154-.Ltext0
 17250 0178 920B0000 		.4byte	.LBB155-.Ltext0
 17251 017c 940B0000 		.4byte	.LBE155-.Ltext0
 17252 0180 960B0000 		.4byte	.LBB156-.Ltext0
 17253 0184 A00B0000 		.4byte	.LBE156-.Ltext0
 17254 0188 A40B0000 		.4byte	.LBB157-.Ltext0
 17255 018c AE0B0000 		.4byte	.LBE157-.Ltext0
 17256 0190 00000000 		.4byte	0
 17257 0194 00000000 		.4byte	0
 17258 0198 80100000 		.4byte	.LBB162-.Ltext0
 17259 019c 80100000 		.4byte	.LBE162-.Ltext0
 17260 01a0 88100000 		.4byte	.LBB165-.Ltext0
 17261 01a4 9C100000 		.4byte	.LBE165-.Ltext0
 17262 01a8 00000000 		.4byte	0
 17263 01ac 00000000 		.4byte	0
 17264              		.section	.debug_line,"",%progbits
 17265              	.Ldebug_line0:
 17266 0000 5D1C0000 		.section	.debug_str,"MS",%progbits,1
 17266      03006A01 
 17266      00000201 
 17266      FB0E0D00 
 17266      01010101 
 17267              	.LASF251:
 17268 0000 764C6973 		.ascii	"vListInsert\000"
 17268      74496E73 
 17268      65727400 
 17269              	.LASF44:
 17270 000c 70635461 		.ascii	"pcTaskName\000"
 17270      736B4E61 
 17270      6D6500
 17271              	.LASF30:
 17272 0017 75784E75 		.ascii	"uxNumberOfItems\000"
 17272      6D626572 
 17272      4F664974 
 17272      656D7300 
 17273              	.LASF198:
 17274 0027 75785065 		.ascii	"uxPendedCounts\000"
 17274      6E646564 
ARM GAS  /tmp/ccaP1CVS.s 			page 430


 17274      436F756E 
 17274      747300
 17275              	.LASF253:
 17276 0036 76506F72 		.ascii	"vPortExitCritical\000"
 17276      74457869 
 17276      74437269 
 17276      74696361 
 17276      6C00
 17277              	.LASF147:
 17278 0048 7072764C 		.ascii	"prvListTasksWithinSingleList\000"
 17278      69737454 
 17278      61736B73 
 17278      57697468 
 17278      696E5369 
 17279              	.LASF257:
 17280 0065 78506F72 		.ascii	"xPortStartScheduler\000"
 17280      74537461 
 17280      72745363 
 17280      68656475 
 17280      6C657200 
 17281              	.LASF42:
 17282 0079 75785072 		.ascii	"uxPriority\000"
 17282      696F7269 
 17282      747900
 17283              	.LASF154:
 17284 0084 7078436F 		.ascii	"pxConstList\000"
 17284      6E73744C 
 17284      69737400 
 17285              	.LASF219:
 17286 0090 70785374 		.ascii	"pxStateList\000"
 17286      6174654C 
 17286      69737400 
 17287              	.LASF54:
 17288 009c 65537573 		.ascii	"eSuspended\000"
 17288      70656E64 
 17288      656400
 17289              	.LASF38:
 17290 00a7 74736B54 		.ascii	"tskTaskControlBlock\000"
 17290      61736B43 
 17290      6F6E7472 
 17290      6F6C426C 
 17290      6F636B00 
 17291              	.LASF136:
 17292 00bb 75784F6E 		.ascii	"uxOnlyOneMutexHeld\000"
 17292      6C794F6E 
 17292      654D7574 
 17292      65784865 
 17292      6C6400
 17293              	.LASF123:
 17294 00ce 756C4269 		.ascii	"ulBitsToClearOnExit\000"
 17294      7473546F 
 17294      436C6561 
 17294      724F6E45 
 17294      78697400 
 17295              	.LASF192:
 17296 00e2 75785461 		.ascii	"uxTaskGetNumberOfTasks\000"
 17296      736B4765 
ARM GAS  /tmp/ccaP1CVS.s 			page 431


 17296      744E756D 
 17296      6265724F 
 17296      66546173 
 17297              	.LASF140:
 17298 00f9 78546173 		.ascii	"xTaskGetSchedulerState\000"
 17298      6B476574 
 17298      53636865 
 17298      64756C65 
 17298      72537461 
 17299              	.LASF112:
 17300 0110 70784869 		.ascii	"pxHigherPriorityTaskWoken\000"
 17300      67686572 
 17300      5072696F 
 17300      72697479 
 17300      5461736B 
 17301              	.LASF58:
 17302 012a 654E6F41 		.ascii	"eNoAction\000"
 17302      6374696F 
 17302      6E00
 17303              	.LASF95:
 17304 0134 7578546F 		.ascii	"uxTopReadyPriority\000"
 17304      70526561 
 17304      64795072 
 17304      696F7269 
 17304      747900
 17305              	.LASF220:
 17306 0147 70784465 		.ascii	"pxDelayedList\000"
 17306      6C617965 
 17306      644C6973 
 17306      7400
 17307              	.LASF0:
 17308 0155 756E7369 		.ascii	"unsigned int\000"
 17308      676E6564 
 17308      20696E74 
 17308      00
 17309              	.LASF176:
 17310 0162 70784576 		.ascii	"pxEventList\000"
 17310      656E744C 
 17310      69737400 
 17311              	.LASF96:
 17312 016e 78536368 		.ascii	"xSchedulerRunning\000"
 17312      6564756C 
 17312      65725275 
 17312      6E6E696E 
 17312      6700
 17313              	.LASF31:
 17314 0180 7078496E 		.ascii	"pxIndex\000"
 17314      64657800 
 17315              	.LASF19:
 17316 0188 53746163 		.ascii	"StackType_t\000"
 17316      6B547970 
 17316      655F7400 
 17317              	.LASF64:
 17318 0194 7854494D 		.ascii	"xTIME_OUT\000"
 17318      455F4F55 
 17318      5400
 17319              	.LASF91:
ARM GAS  /tmp/ccaP1CVS.s 			page 432


 17320 019e 75784465 		.ascii	"uxDeletedTasksWaitingCleanUp\000"
 17320      6C657465 
 17320      64546173 
 17320      6B735761 
 17320      6974696E 
 17321              	.LASF28:
 17322 01bb 784C4953 		.ascii	"xLIST_ITEM\000"
 17322      545F4954 
 17322      454D00
 17323              	.LASF84:
 17324 01c6 70785265 		.ascii	"pxReadyTasksLists\000"
 17324      61647954 
 17324      61736B73 
 17324      4C697374 
 17324      7300
 17325              	.LASF187:
 17326 01d8 70756C54 		.ascii	"pulTotalRunTime\000"
 17326      6F74616C 
 17326      52756E54 
 17326      696D6500 
 17327              	.LASF264:
 17328 01e8 2E2E2F66 		.ascii	"../freertos/tasks.c\000"
 17328      72656572 
 17328      746F732F 
 17328      7461736B 
 17328      732E6300 
 17329              	.LASF113:
 17330 01fc 75634F72 		.ascii	"ucOriginalNotifyState\000"
 17330      6967696E 
 17330      616C4E6F 
 17330      74696679 
 17330      53746174 
 17331              	.LASF171:
 17332 0212 76546173 		.ascii	"vTaskSetTimeOutState\000"
 17332      6B536574 
 17332      54696D65 
 17332      4F757453 
 17332      74617465 
 17333              	.LASF116:
 17334 0227 78546173 		.ascii	"xTaskGenericNotifyFromISR\000"
 17334      6B47656E 
 17334      65726963 
 17334      4E6F7469 
 17334      66794672 
 17335              	.LASF237:
 17336 0241 78526567 		.ascii	"xRegions\000"
 17336      696F6E73 
 17336      00
 17337              	.LASF144:
 17338 024a 70756353 		.ascii	"pucStackByte\000"
 17338      7461636B 
 17338      42797465 
 17338      00
 17339              	.LASF247:
 17340 0257 756C4269 		.ascii	"ulBitmap\000"
 17340      746D6170 
 17340      00
ARM GAS  /tmp/ccaP1CVS.s 			page 433


 17341              	.LASF164:
 17342 0260 75784861 		.ascii	"uxHandle\000"
 17342      6E646C65 
 17342      00
 17343              	.LASF85:
 17344 0269 7844656C 		.ascii	"xDelayedTaskList1\000"
 17344      61796564 
 17344      5461736B 
 17344      4C697374 
 17344      3100
 17345              	.LASF86:
 17346 027b 7844656C 		.ascii	"xDelayedTaskList2\000"
 17346      61796564 
 17346      5461736B 
 17346      4C697374 
 17346      3200
 17347              	.LASF65:
 17348 028d 784F7665 		.ascii	"xOverflowCount\000"
 17348      72666C6F 
 17348      77436F75 
 17348      6E7400
 17349              	.LASF240:
 17350 029c 76506F72 		.ascii	"vPortSetBASEPRI\000"
 17350      74536574 
 17350      42415345 
 17350      50524900 
 17351              	.LASF252:
 17352 02ac 76506F72 		.ascii	"vPortEnterCritical\000"
 17352      74456E74 
 17352      65724372 
 17352      69746963 
 17352      616C00
 17353              	.LASF221:
 17354 02bf 70784F76 		.ascii	"pxOverflowedDelayedList\000"
 17354      6572666C 
 17354      6F776564 
 17354      44656C61 
 17354      7965644C 
 17355              	.LASF75:
 17356 02d7 78546173 		.ascii	"xTaskNumber\000"
 17356      6B4E756D 
 17356      62657200 
 17357              	.LASF45:
 17358 02e3 75785443 		.ascii	"uxTCBNumber\000"
 17358      424E756D 
 17358      62657200 
 17359              	.LASF71:
 17360 02ef 756C5061 		.ascii	"ulParameters\000"
 17360      72616D65 
 17360      74657273 
 17360      00
 17361              	.LASF218:
 17362 02fc 65526574 		.ascii	"eReturn\000"
 17362      75726E00 
 17363              	.LASF204:
 17364 0304 78546173 		.ascii	"xTaskToResume\000"
 17364      6B546F52 
ARM GAS  /tmp/ccaP1CVS.s 			page 434


 17364      6573756D 
 17364      6500
 17365              	.LASF129:
 17366 0312 75785265 		.ascii	"uxReturn\000"
 17366      7475726E 
 17366      00
 17367              	.LASF256:
 17368 031b 7854696D 		.ascii	"xTimerCreateTimerTask\000"
 17368      65724372 
 17368      65617465 
 17368      54696D65 
 17368      72546173 
 17369              	.LASF82:
 17370 0331 74736B54 		.ascii	"tskTCB\000"
 17370      434200
 17371              	.LASF114:
 17372 0338 75785361 		.ascii	"uxSavedInterruptStatus\000"
 17372      76656449 
 17372      6E746572 
 17372      72757074 
 17372      53746174 
 17373              	.LASF17:
 17374 034f 75696E74 		.ascii	"uint32_t\000"
 17374      33325F74 
 17374      00
 17375              	.LASF50:
 17376 0358 75634E6F 		.ascii	"ucNotifyState\000"
 17376      74696679 
 17376      53746174 
 17376      6500
 17377              	.LASF249:
 17378 0366 75784C69 		.ascii	"uxListRemove\000"
 17378      73745265 
 17378      6D6F7665 
 17378      00
 17379              	.LASF205:
 17380 0373 78596965 		.ascii	"xYieldRequired\000"
 17380      6C645265 
 17380      71756972 
 17380      656400
 17381              	.LASF243:
 17382 0382 756C4F72 		.ascii	"ulOriginalBASEPRI\000"
 17382      6967696E 
 17382      616C4241 
 17382      53455052 
 17382      4900
 17383              	.LASF120:
 17384 0394 78546173 		.ascii	"xTaskGenericNotify\000"
 17384      6B47656E 
 17384      65726963 
 17384      4E6F7469 
 17384      667900
 17385              	.LASF174:
 17386 03a7 7078556E 		.ascii	"pxUnblockedTCB\000"
 17386      626C6F63 
 17386      6B656454 
 17386      434200
ARM GAS  /tmp/ccaP1CVS.s 			page 435


 17387              	.LASF239:
 17388 03b6 75735374 		.ascii	"usStackDepth\000"
 17388      61636B44 
 17388      65707468 
 17388      00
 17389              	.LASF126:
 17390 03c3 78436C65 		.ascii	"xClearCountOnExit\000"
 17390      6172436F 
 17390      756E744F 
 17390      6E457869 
 17390      7400
 17391              	.LASF169:
 17392 03d5 78456C61 		.ascii	"xElapsedTime\000"
 17392      70736564 
 17392      54696D65 
 17392      00
 17393              	.LASF61:
 17394 03e2 65536574 		.ascii	"eSetValueWithOverwrite\000"
 17394      56616C75 
 17394      65576974 
 17394      684F7665 
 17394      72777269 
 17395              	.LASF13:
 17396 03f9 6C6F6E67 		.ascii	"long long unsigned int\000"
 17396      206C6F6E 
 17396      6720756E 
 17396      7369676E 
 17396      65642069 
 17397              	.LASF194:
 17398 0410 78546173 		.ascii	"xTaskGetTickCountFromISR\000"
 17398      6B476574 
 17398      5469636B 
 17398      436F756E 
 17398      7446726F 
 17399              	.LASF214:
 17400 0429 75785361 		.ascii	"uxSavedInterruptState\000"
 17400      76656449 
 17400      6E746572 
 17400      72757074 
 17400      53746174 
 17401              	.LASF122:
 17402 043f 756C4269 		.ascii	"ulBitsToClearOnEntry\000"
 17402      7473546F 
 17402      436C6561 
 17402      724F6E45 
 17402      6E747279 
 17403              	.LASF89:
 17404 0454 7850656E 		.ascii	"xPendingReadyList\000"
 17404      64696E67 
 17404      52656164 
 17404      794C6973 
 17404      7400
 17405              	.LASF25:
 17406 0466 70785072 		.ascii	"pxPrevious\000"
 17406      6576696F 
 17406      757300
 17407              	.LASF90:
ARM GAS  /tmp/ccaP1CVS.s 			page 436


 17408 0471 78546173 		.ascii	"xTasksWaitingTermination\000"
 17408      6B735761 
 17408      6974696E 
 17408      67546572 
 17408      6D696E61 
 17409              	.LASF8:
 17410 048a 5F5F7569 		.ascii	"__uint16_t\000"
 17410      6E743136 
 17410      5F7400
 17411              	.LASF131:
 17412 0495 76546173 		.ascii	"vTaskPriorityDisinheritAfterTimeout\000"
 17412      6B507269 
 17412      6F726974 
 17412      79446973 
 17412      696E6865 
 17413              	.LASF184:
 17414 04b9 70785465 		.ascii	"pxTemp\000"
 17414      6D7000
 17415              	.LASF258:
 17416 04c0 7076506F 		.ascii	"pvPortMalloc\000"
 17416      72744D61 
 17416      6C6C6F63 
 17416      00
 17417              	.LASF200:
 17418 04cd 76546173 		.ascii	"vTaskSuspendAll\000"
 17418      6B537573 
 17418      70656E64 
 17418      416C6C00 
 17419              	.LASF151:
 17420 04dd 70784E65 		.ascii	"pxNextTCB\000"
 17420      78745443 
 17420      4200
 17421              	.LASF182:
 17422 04e7 78546173 		.ascii	"xTaskIncrementTick\000"
 17422      6B496E63 
 17422      72656D65 
 17422      6E745469 
 17422      636B00
 17423              	.LASF63:
 17424 04fa 654E6F74 		.ascii	"eNotifyAction\000"
 17424      69667941 
 17424      6374696F 
 17424      6E00
 17425              	.LASF157:
 17426 0508 78476574 		.ascii	"xGetFreeStackSpace\000"
 17426      46726565 
 17426      53746163 
 17426      6B537061 
 17426      636500
 17427              	.LASF4:
 17428 051b 73697A65 		.ascii	"size_t\000"
 17428      5F7400
 17429              	.LASF74:
 17430 0522 7848616E 		.ascii	"xHandle\000"
 17430      646C6500 
 17431              	.LASF81:
 17432 052a 5461736B 		.ascii	"TaskStatus_t\000"
ARM GAS  /tmp/ccaP1CVS.s 			page 437


 17432      53746174 
 17432      75735F74 
 17432      00
 17433              	.LASF60:
 17434 0537 65496E63 		.ascii	"eIncrement\000"
 17434      72656D65 
 17434      6E7400
 17435              	.LASF34:
 17436 0542 784D494E 		.ascii	"xMINI_LIST_ITEM\000"
 17436      495F4C49 
 17436      53545F49 
 17436      54454D00 
 17437              	.LASF178:
 17438 0552 78576169 		.ascii	"xWaitIndefinitely\000"
 17438      74496E64 
 17438      6566696E 
 17438      6974656C 
 17438      7900
 17439              	.LASF94:
 17440 0564 78546963 		.ascii	"xTickCount\000"
 17440      6B436F75 
 17440      6E7400
 17441              	.LASF29:
 17442 056f 784C4953 		.ascii	"xLIST\000"
 17442      5400
 17443              	.LASF201:
 17444 0575 76546173 		.ascii	"vTaskEndScheduler\000"
 17444      6B456E64 
 17444      53636865 
 17444      64756C65 
 17444      7200
 17445              	.LASF215:
 17446 0587 75785461 		.ascii	"uxTaskPriorityGet\000"
 17446      736B5072 
 17446      696F7269 
 17446      74794765 
 17446      7400
 17447              	.LASF107:
 17448 0599 78436F6E 		.ascii	"xConstTickCount\000"
 17448      73745469 
 17448      636B436F 
 17448      756E7400 
 17449              	.LASF250:
 17450 05a9 764C6973 		.ascii	"vListInsertEnd\000"
 17450      74496E73 
 17450      65727445 
 17450      6E6400
 17451              	.LASF92:
 17452 05b8 78537573 		.ascii	"xSuspendedTaskList\000"
 17452      70656E64 
 17452      65645461 
 17452      736B4C69 
 17452      737400
 17453              	.LASF234:
 17454 05cb 70634E61 		.ascii	"pcName\000"
 17454      6D6500
 17455              	.LASF88:
ARM GAS  /tmp/ccaP1CVS.s 			page 438


 17456 05d2 70784F76 		.ascii	"pxOverflowDelayedTaskList\000"
 17456      6572666C 
 17456      6F774465 
 17456      6C617965 
 17456      64546173 
 17457              	.LASF115:
 17458 05ec 78546173 		.ascii	"xTaskNotifyStateClear\000"
 17458      6B4E6F74 
 17458      69667953 
 17458      74617465 
 17458      436C6561 
 17459              	.LASF222:
 17460 0602 76546173 		.ascii	"vTaskDelay\000"
 17460      6B44656C 
 17460      617900
 17461              	.LASF191:
 17462 060d 70765461 		.ascii	"pvTaskIncrementMutexHeldCount\000"
 17462      736B496E 
 17462      6372656D 
 17462      656E744D 
 17462      75746578 
 17463              	.LASF77:
 17464 062b 75784375 		.ascii	"uxCurrentPriority\000"
 17464      7272656E 
 17464      74507269 
 17464      6F726974 
 17464      7900
 17465              	.LASF49:
 17466 063d 756C4E6F 		.ascii	"ulNotifiedValue\000"
 17466      74696669 
 17466      65645661 
 17466      6C756500 
 17467              	.LASF172:
 17468 064d 76546173 		.ascii	"vTaskRemoveFromUnorderedEventList\000"
 17468      6B52656D 
 17468      6F766546 
 17468      726F6D55 
 17468      6E6F7264 
 17469              	.LASF48:
 17470 066f 75784D75 		.ascii	"uxMutexesHeld\000"
 17470      74657865 
 17470      7348656C 
 17470      6400
 17471              	.LASF137:
 17472 067d 78546173 		.ascii	"xTaskPriorityDisinherit\000"
 17472      6B507269 
 17472      6F726974 
 17472      79446973 
 17472      696E6865 
 17473              	.LASF175:
 17474 0695 78546173 		.ascii	"xTaskRemoveFromEventList\000"
 17474      6B52656D 
 17474      6F766546 
 17474      726F6D45 
 17474      76656E74 
 17475              	.LASF14:
 17476 06ae 63686172 		.ascii	"char\000"
ARM GAS  /tmp/ccaP1CVS.s 			page 439


 17476      00
 17477              	.LASF33:
 17478 06b3 4C697374 		.ascii	"ListItem_t\000"
 17478      4974656D 
 17478      5F7400
 17479              	.LASF156:
 17480 06be 70785461 		.ascii	"pxTaskStatus\000"
 17480      736B5374 
 17480      61747573 
 17480      00
 17481              	.LASF62:
 17482 06cb 65536574 		.ascii	"eSetValueWithoutOverwrite\000"
 17482      56616C75 
 17482      65576974 
 17482      686F7574 
 17482      4F766572 
 17483              	.LASF121:
 17484 06e5 78546173 		.ascii	"xTaskNotifyWait\000"
 17484      6B4E6F74 
 17484      69667957 
 17484      61697400 
 17485              	.LASF21:
 17486 06f5 55426173 		.ascii	"UBaseType_t\000"
 17486      65547970 
 17486      655F7400 
 17487              	.LASF235:
 17488 0701 756C5374 		.ascii	"ulStackDepth\000"
 17488      61636B44 
 17488      65707468 
 17488      00
 17489              	.LASF227:
 17490 070e 7853686F 		.ascii	"xShouldDelay\000"
 17490      756C6444 
 17490      656C6179 
 17490      00
 17491              	.LASF161:
 17492 071b 70727649 		.ascii	"prvIdleTask\000"
 17492      646C6554 
 17492      61736B00 
 17493              	.LASF32:
 17494 0727 784C6973 		.ascii	"xListEnd\000"
 17494      74456E64 
 17494      00
 17495              	.LASF125:
 17496 0730 756C5461 		.ascii	"ulTaskNotifyTake\000"
 17496      736B4E6F 
 17496      74696679 
 17496      54616B65 
 17496      00
 17497              	.LASF35:
 17498 0741 4D696E69 		.ascii	"MiniListItem_t\000"
 17498      4C697374 
 17498      4974656D 
 17498      5F7400
 17499              	.LASF177:
 17500 0750 76546173 		.ascii	"vTaskPlaceOnEventListRestricted\000"
 17500      6B506C61 
ARM GAS  /tmp/ccaP1CVS.s 			page 440


 17500      63654F6E 
 17500      4576656E 
 17500      744C6973 
 17501              	.LASF230:
 17502 0770 70727641 		.ascii	"prvAddNewTaskToReadyList\000"
 17502      64644E65 
 17502      77546173 
 17502      6B546F52 
 17502      65616479 
 17503              	.LASF15:
 17504 0789 75696E74 		.ascii	"uint8_t\000"
 17504      385F7400 
 17505              	.LASF52:
 17506 0791 65526561 		.ascii	"eReady\000"
 17506      647900
 17507              	.LASF217:
 17508 0798 65546173 		.ascii	"eTaskGetState\000"
 17508      6B476574 
 17508      53746174 
 17508      6500
 17509              	.LASF231:
 17510 07a6 70784E65 		.ascii	"pxNewTCB\000"
 17510      77544342 
 17510      00
 17511              	.LASF188:
 17512 07af 75785175 		.ascii	"uxQueue\000"
 17512      65756500 
 17513              	.LASF233:
 17514 07b7 70785461 		.ascii	"pxTaskCode\000"
 17514      736B436F 
 17514      646500
 17515              	.LASF72:
 17516 07c2 4D656D6F 		.ascii	"MemoryRegion_t\000"
 17516      72795265 
 17516      67696F6E 
 17516      5F7400
 17517              	.LASF100:
 17518 07d1 784E6578 		.ascii	"xNextTaskUnblockTime\000"
 17518      74546173 
 17518      6B556E62 
 17518      6C6F636B 
 17518      54696D65 
 17519              	.LASF242:
 17520 07e6 756C506F 		.ascii	"ulPortRaiseBASEPRI\000"
 17520      72745261 
 17520      69736542 
 17520      41534550 
 17520      524900
 17521              	.LASF261:
 17522 07f9 7078506F 		.ascii	"pxPortInitialiseStack\000"
 17522      7274496E 
 17522      69746961 
 17522      6C697365 
 17522      53746163 
 17523              	.LASF1:
 17524 080f 6C6F6E67 		.ascii	"long long int\000"
 17524      206C6F6E 
ARM GAS  /tmp/ccaP1CVS.s 			page 441


 17524      6720696E 
 17524      7400
 17525              	.LASF55:
 17526 081d 6544656C 		.ascii	"eDeleted\000"
 17526      65746564 
 17526      00
 17527              	.LASF185:
 17528 0826 75785461 		.ascii	"uxTaskGetSystemState\000"
 17528      736B4765 
 17528      74537973 
 17528      74656D53 
 17528      74617465 
 17529              	.LASF246:
 17530 083b 7563506F 		.ascii	"ucPortCountLeadingZeros\000"
 17530      7274436F 
 17530      756E744C 
 17530      65616469 
 17530      6E675A65 
 17531              	.LASF244:
 17532 0853 756C4E65 		.ascii	"ulNewBASEPRI\000"
 17532      77424153 
 17532      45505249 
 17532      00
 17533              	.LASF70:
 17534 0860 756C4C65 		.ascii	"ulLengthInBytes\000"
 17534      6E677468 
 17534      496E4279 
 17534      74657300 
 17535              	.LASF20:
 17536 0870 42617365 		.ascii	"BaseType_t\000"
 17536      54797065 
 17536      5F7400
 17537              	.LASF142:
 17538 087b 70727652 		.ascii	"prvResetNextTaskUnblockTime\000"
 17538      65736574 
 17538      4E657874 
 17538      5461736B 
 17538      556E626C 
 17539              	.LASF66:
 17540 0897 7854696D 		.ascii	"xTimeOnEntering\000"
 17540      654F6E45 
 17540      6E746572 
 17540      696E6700 
 17541              	.LASF211:
 17542 08a7 75784E65 		.ascii	"uxNewPriority\000"
 17542      77507269 
 17542      6F726974 
 17542      7900
 17543              	.LASF18:
 17544 08b5 5461736B 		.ascii	"TaskFunction_t\000"
 17544      46756E63 
 17544      74696F6E 
 17544      5F7400
 17545              	.LASF24:
 17546 08c4 70784E65 		.ascii	"pxNext\000"
 17546      787400
 17547              	.LASF119:
ARM GAS  /tmp/ccaP1CVS.s 			page 442


 17548 08cb 70756C50 		.ascii	"pulPreviousNotificationValue\000"
 17548      72657669 
 17548      6F75734E 
 17548      6F746966 
 17548      69636174 
 17549              	.LASF259:
 17550 08e8 6D656D73 		.ascii	"memset\000"
 17550      657400
 17551              	.LASF167:
 17552 08ef 70785469 		.ascii	"pxTimeOut\000"
 17552      6D654F75 
 17552      7400
 17553              	.LASF213:
 17554 08f9 75785461 		.ascii	"uxTaskPriorityGetFromISR\000"
 17554      736B5072 
 17554      696F7269 
 17554      74794765 
 17554      7446726F 
 17555              	.LASF145:
 17556 0912 756C436F 		.ascii	"ulCount\000"
 17556      756E7400 
 17557              	.LASF67:
 17558 091a 54696D65 		.ascii	"TimeOut_t\000"
 17558      4F75745F 
 17558      7400
 17559              	.LASF170:
 17560 0924 76546173 		.ascii	"vTaskInternalSetTimeOutState\000"
 17560      6B496E74 
 17560      65726E61 
 17560      6C536574 
 17560      54696D65 
 17561              	.LASF46:
 17562 0941 75785461 		.ascii	"uxTaskNumber\000"
 17562      736B4E75 
 17562      6D626572 
 17562      00
 17563              	.LASF37:
 17564 094e 5461736B 		.ascii	"TaskHandle_t\000"
 17564      48616E64 
 17564      6C655F74 
 17564      00
 17565              	.LASF118:
 17566 095b 65416374 		.ascii	"eAction\000"
 17566      696F6E00 
 17567              	.LASF241:
 17568 0963 756C4E65 		.ascii	"ulNewMaskValue\000"
 17568      774D6173 
 17568      6B56616C 
 17568      756500
 17569              	.LASF153:
 17570 0972 75785461 		.ascii	"uxTask\000"
 17570      736B00
 17571              	.LASF128:
 17572 0979 75785461 		.ascii	"uxTaskResetEventItemValue\000"
 17572      736B5265 
 17572      73657445 
 17572      76656E74 
ARM GAS  /tmp/ccaP1CVS.s 			page 443


 17572      4974656D 
 17573              	.LASF210:
 17574 0993 76546173 		.ascii	"vTaskPrioritySet\000"
 17574      6B507269 
 17574      6F726974 
 17574      79536574 
 17574      00
 17575              	.LASF57:
 17576 09a4 65546173 		.ascii	"eTaskState\000"
 17576      6B537461 
 17576      746500
 17577              	.LASF36:
 17578 09af 4C697374 		.ascii	"List_t\000"
 17578      5F7400
 17579              	.LASF190:
 17580 09b6 78546173 		.ascii	"xTaskToQuery\000"
 17580      6B546F51 
 17580      75657279 
 17580      00
 17581              	.LASF22:
 17582 09c3 5469636B 		.ascii	"TickType_t\000"
 17582      54797065 
 17582      5F7400
 17583              	.LASF111:
 17584 09ce 78546173 		.ascii	"xTaskToNotify\000"
 17584      6B546F4E 
 17584      6F746966 
 17584      7900
 17585              	.LASF108:
 17586 09dc 78546173 		.ascii	"xTask\000"
 17586      6B00
 17587              	.LASF59:
 17588 09e2 65536574 		.ascii	"eSetBits\000"
 17588      42697473 
 17588      00
 17589              	.LASF2:
 17590 09eb 6C6F6E67 		.ascii	"long double\000"
 17590      20646F75 
 17590      626C6500 
 17591              	.LASF68:
 17592 09f7 784D454D 		.ascii	"xMEMORY_REGION\000"
 17592      4F52595F 
 17592      52454749 
 17592      4F4E00
 17593              	.LASF16:
 17594 0a06 75696E74 		.ascii	"uint16_t\000"
 17594      31365F74 
 17594      00
 17595              	.LASF228:
 17596 0a0f 76546173 		.ascii	"vTaskDelete\000"
 17596      6B44656C 
 17596      65746500 
 17597              	.LASF135:
 17598 0a1b 75785072 		.ascii	"uxPriorityToUse\000"
 17598      696F7269 
 17598      7479546F 
 17598      55736500 
ARM GAS  /tmp/ccaP1CVS.s 			page 444


 17599              	.LASF193:
 17600 0a2b 76546173 		.ascii	"vTaskSwitchContext\000"
 17600      6B537769 
 17600      74636843 
 17600      6F6E7465 
 17600      787400
 17601              	.LASF99:
 17602 0a3e 784E756D 		.ascii	"xNumOfOverflows\000"
 17602      4F664F76 
 17602      6572666C 
 17602      6F777300 
 17603              	.LASF27:
 17604 0a4e 7076436F 		.ascii	"pvContainer\000"
 17604      6E746169 
 17604      6E657200 
 17605              	.LASF105:
 17606 0a5a 70784375 		.ascii	"pxCurrentTCB\000"
 17606      7272656E 
 17606      74544342 
 17606      00
 17607              	.LASF180:
 17608 0a67 76546173 		.ascii	"vTaskPlaceOnEventList\000"
 17608      6B506C61 
 17608      63654F6E 
 17608      4576656E 
 17608      744C6973 
 17609              	.LASF263:
 17610 0a7d 474E5520 		.ascii	"GNU C17 10.3.1 20210824 (release) -mcpu=cortex-m3 -"
 17610      43313720 
 17610      31302E33 
 17610      2E312032 
 17610      30323130 
 17611 0ab0 6D746875 		.ascii	"mthumb -mfloat-abi=soft -march=armv7-m -g -gdwarf-2"
 17611      6D62202D 
 17611      6D666C6F 
 17611      61742D61 
 17611      62693D73 
 17612 0ae3 202D4F73 		.ascii	" -Os -fomit-frame-pointer\000"
 17612      202D666F 
 17612      6D69742D 
 17612      6672616D 
 17612      652D706F 
 17613              	.LASF133:
 17614 0afd 75784869 		.ascii	"uxHighestPriorityWaitingTask\000"
 17614      67686573 
 17614      74507269 
 17614      6F726974 
 17614      79576169 
 17615              	.LASF79:
 17616 0b1a 70785374 		.ascii	"pxStackBase\000"
 17616      61636B42 
 17616      61736500 
 17617              	.LASF7:
 17618 0b26 73686F72 		.ascii	"short int\000"
 17618      7420696E 
 17618      7400
 17619              	.LASF76:
ARM GAS  /tmp/ccaP1CVS.s 			page 445


 17620 0b30 65437572 		.ascii	"eCurrentState\000"
 17620      72656E74 
 17620      53746174 
 17620      6500
 17621              	.LASF260:
 17622 0b3e 764C6973 		.ascii	"vListInitialiseItem\000"
 17622      74496E69 
 17622      7469616C 
 17622      69736549 
 17622      74656D00 
 17623              	.LASF232:
 17624 0b52 70727649 		.ascii	"prvInitialiseNewTask\000"
 17624      6E697469 
 17624      616C6973 
 17624      654E6577 
 17624      5461736B 
 17625              	.LASF162:
 17626 0b67 70765061 		.ascii	"pvParameters\000"
 17626      72616D65 
 17626      74657273 
 17626      00
 17627              	.LASF23:
 17628 0b74 78497465 		.ascii	"xItemValue\000"
 17628      6D56616C 
 17628      756500
 17629              	.LASF10:
 17630 0b7f 6C6F6E67 		.ascii	"long int\000"
 17630      20696E74 
 17630      00
 17631              	.LASF73:
 17632 0b88 78544153 		.ascii	"xTASK_STATUS\000"
 17632      4B5F5354 
 17632      41545553 
 17632      00
 17633              	.LASF196:
 17634 0b95 78546173 		.ascii	"xTaskResumeAll\000"
 17634      6B526573 
 17634      756D6541 
 17634      6C6C00
 17635              	.LASF130:
 17636 0ba4 76546173 		.ascii	"vTaskNotifyGiveFromISR\000"
 17636      6B4E6F74 
 17636      69667947 
 17636      69766546 
 17636      726F6D49 
 17637              	.LASF87:
 17638 0bbb 70784465 		.ascii	"pxDelayedTaskList\000"
 17638      6C617965 
 17638      64546173 
 17638      6B4C6973 
 17638      7400
 17639              	.LASF216:
 17640 0bcd 78546173 		.ascii	"xTaskGetTickCount\000"
 17640      6B476574 
 17640      5469636B 
 17640      436F756E 
 17640      7400
ARM GAS  /tmp/ccaP1CVS.s 			page 446


 17641              	.LASF245:
 17642 0bdf 76506F72 		.ascii	"vPortRaiseBASEPRI\000"
 17642      74526169 
 17642      73654241 
 17642      53455052 
 17642      4900
 17643              	.LASF207:
 17644 0bf1 70727654 		.ascii	"prvTaskIsTaskSuspended\000"
 17644      61736B49 
 17644      73546173 
 17644      6B537573 
 17644      70656E64 
 17645              	.LASF163:
 17646 0c08 76546173 		.ascii	"vTaskSetTaskNumber\000"
 17646      6B536574 
 17646      5461736B 
 17646      4E756D62 
 17646      657200
 17647              	.LASF183:
 17648 0c1b 78537769 		.ascii	"xSwitchRequired\000"
 17648      74636852 
 17648      65717569 
 17648      72656400 
 17649              	.LASF132:
 17650 0c2b 70784D75 		.ascii	"pxMutexHolder\000"
 17650      74657848 
 17650      6F6C6465 
 17650      7200
 17651              	.LASF43:
 17652 0c39 70785374 		.ascii	"pxStack\000"
 17652      61636B00 
 17653              	.LASF155:
 17654 0c41 76546173 		.ascii	"vTaskGetInfo\000"
 17654      6B476574 
 17654      496E666F 
 17654      00
 17655              	.LASF117:
 17656 0c4e 756C5661 		.ascii	"ulValue\000"
 17656      6C756500 
 17657              	.LASF209:
 17658 0c56 78546173 		.ascii	"xTaskToSuspend\000"
 17658      6B546F53 
 17658      75737065 
 17658      6E6400
 17659              	.LASF166:
 17660 0c65 78546173 		.ascii	"xTaskCheckForTimeOut\000"
 17660      6B436865 
 17660      636B466F 
 17660      7254696D 
 17660      654F7574 
 17661              	.LASF255:
 17662 0c7a 76506F72 		.ascii	"vPortEndScheduler\000"
 17662      74456E64 
 17662      53636865 
 17662      64756C65 
 17662      7200
 17663              	.LASF254:
ARM GAS  /tmp/ccaP1CVS.s 			page 447


 17664 0c8c 76506F72 		.ascii	"vPortFree\000"
 17664      74467265 
 17664      6500
 17665              	.LASF225:
 17666 0c96 70785072 		.ascii	"pxPreviousWakeTime\000"
 17666      6576696F 
 17666      75735761 
 17666      6B655469 
 17666      6D6500
 17667              	.LASF5:
 17668 0ca9 5F5F7569 		.ascii	"__uint8_t\000"
 17668      6E74385F 
 17668      7400
 17669              	.LASF101:
 17670 0cb3 7849646C 		.ascii	"xIdleTaskHandle\000"
 17670      65546173 
 17670      6B48616E 
 17670      646C6500 
 17671              	.LASF248:
 17672 0cc3 75635265 		.ascii	"ucReturn\000"
 17672      7475726E 
 17672      00
 17673              	.LASF203:
 17674 0ccc 78546173 		.ascii	"xTaskResumeFromISR\000"
 17674      6B526573 
 17674      756D6546 
 17674      726F6D49 
 17674      535200
 17675              	.LASF124:
 17676 0cdf 70756C4E 		.ascii	"pulNotificationValue\000"
 17676      6F746966 
 17676      69636174 
 17676      696F6E56 
 17676      616C7565 
 17677              	.LASF110:
 17678 0cf4 78526574 		.ascii	"xReturn\000"
 17678      75726E00 
 17679              	.LASF199:
 17680 0cfc 76546173 		.ascii	"vTaskMissedYield\000"
 17680      6B4D6973 
 17680      73656459 
 17680      69656C64 
 17680      00
 17681              	.LASF97:
 17682 0d0d 75785065 		.ascii	"uxPendedTicks\000"
 17682      6E646564 
 17682      5469636B 
 17682      7300
 17683              	.LASF12:
 17684 0d1b 6C6F6E67 		.ascii	"long unsigned int\000"
 17684      20756E73 
 17684      69676E65 
 17684      6420696E 
 17684      7400
 17685              	.LASF150:
 17686 0d2d 65537461 		.ascii	"eState\000"
 17686      746500
ARM GAS  /tmp/ccaP1CVS.s 			page 448


 17687              	.LASF148:
 17688 0d34 70785461 		.ascii	"pxTaskStatusArray\000"
 17688      736B5374 
 17688      61747573 
 17688      41727261 
 17688      7900
 17689              	.LASF138:
 17690 0d46 78546173 		.ascii	"xTaskPriorityInherit\000"
 17690      6B507269 
 17690      6F726974 
 17690      79496E68 
 17690      65726974 
 17691              	.LASF139:
 17692 0d5b 70784D75 		.ascii	"pxMutexHolderTCB\000"
 17692      74657848 
 17692      6F6C6465 
 17692      72544342 
 17692      00
 17693              	.LASF189:
 17694 0d6c 70635461 		.ascii	"pcTaskGetName\000"
 17694      736B4765 
 17694      744E616D 
 17694      6500
 17695              	.LASF195:
 17696 0d7a 78546963 		.ascii	"xTicks\000"
 17696      6B7300
 17697              	.LASF202:
 17698 0d81 76546173 		.ascii	"vTaskStartScheduler\000"
 17698      6B537461 
 17698      72745363 
 17698      68656475 
 17698      6C657200 
 17699              	.LASF186:
 17700 0d95 75784172 		.ascii	"uxArraySize\000"
 17700      72617953 
 17700      697A6500 
 17701              	.LASF104:
 17702 0da1 7843616E 		.ascii	"xCanBlockIndefinitely\000"
 17702      426C6F63 
 17702      6B496E64 
 17702      6566696E 
 17702      6974656C 
 17703              	.LASF51:
 17704 0db7 6552756E 		.ascii	"eRunning\000"
 17704      6E696E67 
 17704      00
 17705              	.LASF78:
 17706 0dc0 756C5275 		.ascii	"ulRunTimeCounter\000"
 17706      6E54696D 
 17706      65436F75 
 17706      6E746572 
 17706      00
 17707              	.LASF69:
 17708 0dd1 70764261 		.ascii	"pvBaseAddress\000"
 17708      73654164 
 17708      64726573 
 17708      7300
ARM GAS  /tmp/ccaP1CVS.s 			page 449


 17709              	.LASF223:
 17710 0ddf 78546963 		.ascii	"xTicksToDelay\000"
 17710      6B73546F 
 17710      44656C61 
 17710      7900
 17711              	.LASF6:
 17712 0ded 756E7369 		.ascii	"unsigned char\000"
 17712      676E6564 
 17712      20636861 
 17712      7200
 17713              	.LASF179:
 17714 0dfb 76546173 		.ascii	"vTaskPlaceOnUnorderedEventList\000"
 17714      6B506C61 
 17714      63654F6E 
 17714      556E6F72 
 17714      64657265 
 17715              	.LASF11:
 17716 0e1a 5F5F7569 		.ascii	"__uint32_t\000"
 17716      6E743332 
 17716      5F7400
 17717              	.LASF262:
 17718 0e25 764C6973 		.ascii	"vListInitialise\000"
 17718      74496E69 
 17718      7469616C 
 17718      69736500 
 17719              	.LASF168:
 17720 0e35 70785469 		.ascii	"pxTicksToWait\000"
 17720      636B7354 
 17720      6F576169 
 17720      7400
 17721              	.LASF56:
 17722 0e43 65496E76 		.ascii	"eInvalid\000"
 17722      616C6964 
 17722      00
 17723              	.LASF181:
 17724 0e4c 7578546F 		.ascii	"uxTopPriority\000"
 17724      70507269 
 17724      6F726974 
 17724      7900
 17725              	.LASF47:
 17726 0e5a 75784261 		.ascii	"uxBasePriority\000"
 17726      73655072 
 17726      696F7269 
 17726      747900
 17727              	.LASF224:
 17728 0e69 76546173 		.ascii	"vTaskDelayUntil\000"
 17728      6B44656C 
 17728      6179556E 
 17728      74696C00 
 17729              	.LASF41:
 17730 0e79 78457665 		.ascii	"xEventListItem\000"
 17730      6E744C69 
 17730      73744974 
 17730      656D00
 17731              	.LASF134:
 17732 0e88 75785072 		.ascii	"uxPriorityUsedOnEntry\000"
 17732      696F7269 
ARM GAS  /tmp/ccaP1CVS.s 			page 450


 17732      74795573 
 17732      65644F6E 
 17732      456E7472 
 17733              	.LASF83:
 17734 0e9e 5443425F 		.ascii	"TCB_t\000"
 17734      7400
 17735              	.LASF103:
 17736 0ea4 78546963 		.ascii	"xTicksToWait\000"
 17736      6B73546F 
 17736      57616974 
 17736      00
 17737              	.LASF26:
 17738 0eb1 70764F77 		.ascii	"pvOwner\000"
 17738      6E657200 
 17739              	.LASF143:
 17740 0eb9 70727644 		.ascii	"prvDeleteTCB\000"
 17740      656C6574 
 17740      65544342 
 17740      00
 17741              	.LASF53:
 17742 0ec6 65426C6F 		.ascii	"eBlocked\000"
 17742      636B6564 
 17742      00
 17743              	.LASF208:
 17744 0ecf 76546173 		.ascii	"vTaskSuspend\000"
 17744      6B537573 
 17744      70656E64 
 17744      00
 17745              	.LASF197:
 17746 0edc 78416C72 		.ascii	"xAlreadyYielded\000"
 17746      65616479 
 17746      5969656C 
 17746      64656400 
 17747              	.LASF141:
 17748 0eec 78546173 		.ascii	"xTaskGetCurrentTaskHandle\000"
 17748      6B476574 
 17748      43757272 
 17748      656E7454 
 17748      61736B48 
 17749              	.LASF238:
 17750 0f06 78546173 		.ascii	"xTaskCreate\000"
 17750      6B437265 
 17750      61746500 
 17751              	.LASF152:
 17752 0f12 70784669 		.ascii	"pxFirstTCB\000"
 17752      72737454 
 17752      434200
 17753              	.LASF146:
 17754 0f1d 70727654 		.ascii	"prvTaskCheckFreeStackSpace\000"
 17754      61736B43 
 17754      6865636B 
 17754      46726565 
 17754      53746163 
 17755              	.LASF165:
 17756 0f38 75785461 		.ascii	"uxTaskGetTaskNumber\000"
 17756      736B4765 
 17756      74546173 
ARM GAS  /tmp/ccaP1CVS.s 			page 451


 17756      6B4E756D 
 17756      62657200 
 17757              	.LASF229:
 17758 0f4c 78546173 		.ascii	"xTaskToDelete\000"
 17758      6B546F44 
 17758      656C6574 
 17758      6500
 17759              	.LASF160:
 17760 0f5a 70727641 		.ascii	"prvAddCurrentTaskToDelayedList\000"
 17760      64644375 
 17760      7272656E 
 17760      74546173 
 17760      6B546F44 
 17761              	.LASF80:
 17762 0f79 75735374 		.ascii	"usStackHighWaterMark\000"
 17762      61636B48 
 17762      69676857 
 17762      61746572 
 17762      4D61726B 
 17763              	.LASF93:
 17764 0f8e 75784375 		.ascii	"uxCurrentNumberOfTasks\000"
 17764      7272656E 
 17764      744E756D 
 17764      6265724F 
 17764      66546173 
 17765              	.LASF226:
 17766 0fa5 7854696D 		.ascii	"xTimeIncrement\000"
 17766      65496E63 
 17766      72656D65 
 17766      6E7400
 17767              	.LASF3:
 17768 0fb4 7369676E 		.ascii	"signed char\000"
 17768      65642063 
 17768      68617200 
 17769              	.LASF9:
 17770 0fc0 73686F72 		.ascii	"short unsigned int\000"
 17770      7420756E 
 17770      7369676E 
 17770      65642069 
 17770      6E7400
 17771              	.LASF106:
 17772 0fd3 7854696D 		.ascii	"xTimeToWake\000"
 17772      65546F57 
 17772      616B6500 
 17773              	.LASF40:
 17774 0fdf 78537461 		.ascii	"xStateListItem\000"
 17774      74654C69 
 17774      73744974 
 17774      656D00
 17775              	.LASF109:
 17776 0fee 70785443 		.ascii	"pxTCB\000"
 17776      4200
 17777              	.LASF102:
 17778 0ff4 75785363 		.ascii	"uxSchedulerSuspended\000"
 17778      68656475 
 17778      6C657253 
 17778      75737065 
ARM GAS  /tmp/ccaP1CVS.s 			page 452


 17778      6E646564 
 17779              	.LASF39:
 17780 1009 7078546F 		.ascii	"pxTopOfStack\000"
 17780      704F6653 
 17780      7461636B 
 17780      00
 17781              	.LASF206:
 17782 1016 76546173 		.ascii	"vTaskResume\000"
 17782      6B526573 
 17782      756D6500 
 17783              	.LASF159:
 17784 1022 70727649 		.ascii	"prvInitialiseTaskLists\000"
 17784      6E697469 
 17784      616C6973 
 17784      65546173 
 17784      6B4C6973 
 17785              	.LASF149:
 17786 1039 70784C69 		.ascii	"pxList\000"
 17786      737400
 17787              	.LASF173:
 17788 1040 70784576 		.ascii	"pxEventListItem\000"
 17788      656E744C 
 17788      69737449 
 17788      74656D00 
 17789              	.LASF236:
 17790 1050 70784372 		.ascii	"pxCreatedTask\000"
 17790      65617465 
 17790      64546173 
 17790      6B00
 17791              	.LASF158:
 17792 105e 70727643 		.ascii	"prvCheckTasksWaitingTermination\000"
 17792      6865636B 
 17792      5461736B 
 17792      73576169 
 17792      74696E67 
 17793              	.LASF265:
 17794 107e 2F686F6D 		.ascii	"/home/junior/Codigos/6-Stm32_GCC_FreeRTOS10.2.1/3-C"
 17794      652F6A75 
 17794      6E696F72 
 17794      2F436F64 
 17794      69676F73 
 17795 10b1 6F6D5072 		.ascii	"omProcessos\000"
 17795      6F636573 
 17795      736F7300 
 17796              	.LASF127:
 17797 10bd 756C5265 		.ascii	"ulReturn\000"
 17797      7475726E 
 17797      00
 17798              	.LASF212:
 17799 10c6 75784375 		.ascii	"uxCurrentBasePriority\000"
 17799      7272656E 
 17799      74426173 
 17799      65507269 
 17799      6F726974 
 17800              	.LASF98:
 17801 10dc 78596965 		.ascii	"xYieldPending\000"
 17801      6C645065 
ARM GAS  /tmp/ccaP1CVS.s 			page 453


 17801      6E64696E 
 17801      6700
 17802              		.ident	"GCC: (GNU Arm Embedded Toolchain 10.3-2021.10) 10.3.1 20210824 (release)"
ARM GAS  /tmp/ccaP1CVS.s 			page 454


DEFINED SYMBOLS
                            *ABS*:0000000000000000 tasks.c
     /tmp/ccaP1CVS.s:77     .text:0000000000000000 $t
     /tmp/ccaP1CVS.s:82     .text:0000000000000000 prvAddCurrentTaskToDelayedList
     /tmp/ccaP1CVS.s:244    .text:0000000000000064 $d
     /tmp/ccaP1CVS.s:249    .text:000000000000006c $t
     /tmp/ccaP1CVS.s:254    .text:000000000000006c prvResetNextTaskUnblockTime
     /tmp/ccaP1CVS.s:313    .text:0000000000000088 $d
     /tmp/ccaP1CVS.s:319    .text:000000000000008c $t
     /tmp/ccaP1CVS.s:324    .text:000000000000008c prvIdleTask
     /tmp/ccaP1CVS.s:430    .text:00000000000000dc $d
     /tmp/ccaP1CVS.s:438    .text:00000000000000e0 $t
     /tmp/ccaP1CVS.s:444    .text:00000000000000e0 xTaskCreate
     /tmp/ccaP1CVS.s:924    .text:000000000000025c $d
     /tmp/ccaP1CVS.s:931    .text:0000000000000264 $t
     /tmp/ccaP1CVS.s:937    .text:0000000000000264 vTaskDelete
     /tmp/ccaP1CVS.s:1114   .text:00000000000002fc $d
     /tmp/ccaP1CVS.s:1119   .text:0000000000000304 $t
     /tmp/ccaP1CVS.s:1125   .text:0000000000000304 eTaskGetState
     /tmp/ccaP1CVS.s:1262   .text:0000000000000364 $d
     /tmp/ccaP1CVS.s:1266   .text:0000000000000368 $t
     /tmp/ccaP1CVS.s:1272   .text:0000000000000368 uxTaskPriorityGet
     /tmp/ccaP1CVS.s:1324   .text:0000000000000380 $d
     /tmp/ccaP1CVS.s:1328   .text:0000000000000384 $t
     /tmp/ccaP1CVS.s:1334   .text:0000000000000384 uxTaskPriorityGetFromISR
     /tmp/ccaP1CVS.s:1407   .text:00000000000003a8 $d
     /tmp/ccaP1CVS.s:1411   .text:00000000000003ac $t
     /tmp/ccaP1CVS.s:1417   .text:00000000000003ac vTaskPrioritySet
     /tmp/ccaP1CVS.s:1656   .text:0000000000000468 $d
     /tmp/ccaP1CVS.s:1661   .text:0000000000000470 $t
     /tmp/ccaP1CVS.s:1667   .text:0000000000000470 vTaskResume
     /tmp/ccaP1CVS.s:1825   .text:00000000000004e4 $d
     /tmp/ccaP1CVS.s:1829   .text:00000000000004e8 $t
     /tmp/ccaP1CVS.s:1835   .text:00000000000004e8 xTaskResumeFromISR
     /tmp/ccaP1CVS.s:2029   .text:0000000000000568 $d
     /tmp/ccaP1CVS.s:2037   .text:000000000000056c $t
     /tmp/ccaP1CVS.s:2043   .text:000000000000056c vTaskStartScheduler
     /tmp/ccaP1CVS.s:2153   .text:00000000000005bc $d
     /tmp/ccaP1CVS.s:2159   .text:00000000000005c8 $t
     /tmp/ccaP1CVS.s:2165   .text:00000000000005c8 vTaskEndScheduler
     /tmp/ccaP1CVS.s:2203   .text:00000000000005e4 $d
     /tmp/ccaP1CVS.s:2207   .text:00000000000005e8 $t
     /tmp/ccaP1CVS.s:2213   .text:00000000000005e8 vTaskSuspendAll
     /tmp/ccaP1CVS.s:2232   .text:00000000000005f8 $d
     /tmp/ccaP1CVS.s:2236   .text:00000000000005fc $t
     /tmp/ccaP1CVS.s:2242   .text:00000000000005fc xTaskGetTickCount
     /tmp/ccaP1CVS.s:2265   .text:0000000000000604 $d
     /tmp/ccaP1CVS.s:2269   .text:0000000000000608 $t
     /tmp/ccaP1CVS.s:2275   .text:0000000000000608 xTaskGetTickCountFromISR
     /tmp/ccaP1CVS.s:2287   .text:0000000000000610 $d
     /tmp/ccaP1CVS.s:2291   .text:0000000000000614 $t
     /tmp/ccaP1CVS.s:2297   .text:0000000000000614 uxTaskGetNumberOfTasks
     /tmp/ccaP1CVS.s:2315   .text:000000000000061c $d
     /tmp/ccaP1CVS.s:2319   .text:0000000000000620 $t
     /tmp/ccaP1CVS.s:2325   .text:0000000000000620 pcTaskGetName
     /tmp/ccaP1CVS.s:2355   .text:000000000000062c $d
     /tmp/ccaP1CVS.s:2359   .text:0000000000000630 $t
ARM GAS  /tmp/ccaP1CVS.s 			page 455


     /tmp/ccaP1CVS.s:2365   .text:0000000000000630 xTaskIncrementTick
     /tmp/ccaP1CVS.s:2604   .text:00000000000006f4 $d
     /tmp/ccaP1CVS.s:2609   .text:00000000000006fc $t
     /tmp/ccaP1CVS.s:2615   .text:00000000000006fc xTaskResumeAll
     /tmp/ccaP1CVS.s:2836   .text:00000000000007b8 $d
     /tmp/ccaP1CVS.s:2840   .text:00000000000007bc $t
     /tmp/ccaP1CVS.s:2846   .text:00000000000007bc vTaskDelayUntil
     /tmp/ccaP1CVS.s:2964   .text:0000000000000804 $d
     /tmp/ccaP1CVS.s:2969   .text:0000000000000808 $t
     /tmp/ccaP1CVS.s:2975   .text:0000000000000808 vTaskDelay
     /tmp/ccaP1CVS.s:3052   .text:0000000000000836 vTaskSwitchContext
     /tmp/ccaP1CVS.s:3178   .text:0000000000000880 $d
     /tmp/ccaP1CVS.s:3182   .text:0000000000000884 $t
     /tmp/ccaP1CVS.s:3188   .text:0000000000000884 vTaskSuspend
     /tmp/ccaP1CVS.s:3373   .text:0000000000000924 $d
     /tmp/ccaP1CVS.s:3378   .text:000000000000092c $t
     /tmp/ccaP1CVS.s:3384   .text:000000000000092c vTaskPlaceOnEventList
     /tmp/ccaP1CVS.s:3432   .text:0000000000000948 $d
     /tmp/ccaP1CVS.s:3436   .text:000000000000094c $t
     /tmp/ccaP1CVS.s:3442   .text:000000000000094c vTaskPlaceOnUnorderedEventList
     /tmp/ccaP1CVS.s:3500   .text:0000000000000970 $d
     /tmp/ccaP1CVS.s:3504   .text:0000000000000974 $t
     /tmp/ccaP1CVS.s:3510   .text:0000000000000974 vTaskPlaceOnEventListRestricted
     /tmp/ccaP1CVS.s:3572   .text:000000000000099c $d
     /tmp/ccaP1CVS.s:3576   .text:00000000000009a0 $t
     /tmp/ccaP1CVS.s:3582   .text:00000000000009a0 xTaskRemoveFromEventList
     /tmp/ccaP1CVS.s:3689   .text:00000000000009f8 $d
     /tmp/ccaP1CVS.s:3693   .text:00000000000009fc $t
     /tmp/ccaP1CVS.s:3699   .text:00000000000009fc vTaskRemoveFromUnorderedEventList
     /tmp/ccaP1CVS.s:3788   .text:0000000000000a44 $d
     /tmp/ccaP1CVS.s:3792   .text:0000000000000a48 $t
     /tmp/ccaP1CVS.s:3798   .text:0000000000000a48 vTaskSetTimeOutState
     /tmp/ccaP1CVS.s:3852   .text:0000000000000a64 $d
     /tmp/ccaP1CVS.s:3856   .text:0000000000000a68 $t
     /tmp/ccaP1CVS.s:3862   .text:0000000000000a68 vTaskInternalSetTimeOutState
     /tmp/ccaP1CVS.s:3891   .text:0000000000000a78 $d
     /tmp/ccaP1CVS.s:3895   .text:0000000000000a7c $t
     /tmp/ccaP1CVS.s:3901   .text:0000000000000a7c xTaskCheckForTimeOut
     /tmp/ccaP1CVS.s:4028   .text:0000000000000ac4 $d
     /tmp/ccaP1CVS.s:4033   .text:0000000000000ac8 $t
     /tmp/ccaP1CVS.s:4039   .text:0000000000000ac8 vTaskMissedYield
     /tmp/ccaP1CVS.s:4058   .text:0000000000000ad4 $d
     /tmp/ccaP1CVS.s:4062   .text:0000000000000ad8 $t
     /tmp/ccaP1CVS.s:4068   .text:0000000000000ad8 uxTaskGetTaskNumber
     /tmp/ccaP1CVS.s:4102   .text:0000000000000ade vTaskSetTaskNumber
     /tmp/ccaP1CVS.s:4135   .text:0000000000000ae4 vTaskGetInfo
     /tmp/ccaP1CVS.s:4348   .text:0000000000000b5c $d
     /tmp/ccaP1CVS.s:4352   .text:0000000000000b60 $t
     /tmp/ccaP1CVS.s:4357   .text:0000000000000b60 prvListTasksWithinSingleList
     /tmp/ccaP1CVS.s:4502   .text:0000000000000bc0 uxTaskGetSystemState
     /tmp/ccaP1CVS.s:4665   .text:0000000000000c4c $d
     /tmp/ccaP1CVS.s:4671   .text:0000000000000c58 $t
     /tmp/ccaP1CVS.s:4677   .text:0000000000000c58 xTaskGetCurrentTaskHandle
     /tmp/ccaP1CVS.s:4698   .text:0000000000000c60 $d
     /tmp/ccaP1CVS.s:4702   .text:0000000000000c64 $t
     /tmp/ccaP1CVS.s:4708   .text:0000000000000c64 xTaskGetSchedulerState
     /tmp/ccaP1CVS.s:4745   .text:0000000000000c80 $d
ARM GAS  /tmp/ccaP1CVS.s 			page 456


     /tmp/ccaP1CVS.s:4749   .text:0000000000000c84 $t
     /tmp/ccaP1CVS.s:4755   .text:0000000000000c84 xTaskPriorityInherit
     /tmp/ccaP1CVS.s:4933   .text:0000000000000d1c $d
     /tmp/ccaP1CVS.s:4938   .text:0000000000000d24 $t
     /tmp/ccaP1CVS.s:4944   .text:0000000000000d24 xTaskPriorityDisinherit
     /tmp/ccaP1CVS.s:5075   .text:0000000000000d8c $d
     /tmp/ccaP1CVS.s:5080   .text:0000000000000d94 $t
     /tmp/ccaP1CVS.s:5086   .text:0000000000000d94 vTaskPriorityDisinheritAfterTimeout
     /tmp/ccaP1CVS.s:5237   .text:0000000000000e14 $d
     /tmp/ccaP1CVS.s:5241   .text:0000000000000e18 $t
     /tmp/ccaP1CVS.s:5247   .text:0000000000000e18 uxTaskResetEventItemValue
     /tmp/ccaP1CVS.s:5279   .text:0000000000000e2c $d
     /tmp/ccaP1CVS.s:5283   .text:0000000000000e30 $t
     /tmp/ccaP1CVS.s:5289   .text:0000000000000e30 pvTaskIncrementMutexHeldCount
     /tmp/ccaP1CVS.s:5324   .text:0000000000000e44 $d
     /tmp/ccaP1CVS.s:5328   .text:0000000000000e48 $t
     /tmp/ccaP1CVS.s:5334   .text:0000000000000e48 ulTaskNotifyTake
     /tmp/ccaP1CVS.s:5472   .text:0000000000000ea8 $d
     /tmp/ccaP1CVS.s:5476   .text:0000000000000eac $t
     /tmp/ccaP1CVS.s:5482   .text:0000000000000eac xTaskNotifyWait
     /tmp/ccaP1CVS.s:5641   .text:0000000000000f30 $d
     /tmp/ccaP1CVS.s:5645   .text:0000000000000f34 $t
     /tmp/ccaP1CVS.s:5651   .text:0000000000000f34 xTaskGenericNotify
     /tmp/ccaP1CVS.s:5724   .text:0000000000000f5e $d
     /tmp/ccaP1CVS.s:5728   .text:0000000000000f62 $t
     /tmp/ccaP1CVS.s:5845   .text:0000000000000fcc $d
     /tmp/ccaP1CVS.s:5849   .text:0000000000000fd0 $t
     /tmp/ccaP1CVS.s:5855   .text:0000000000000fd0 xTaskGenericNotifyFromISR
     /tmp/ccaP1CVS.s:5947   .text:0000000000001008 $d
     /tmp/ccaP1CVS.s:5951   .text:000000000000100c $t
     /tmp/ccaP1CVS.s:6093   .text:000000000000107c $d
     /tmp/ccaP1CVS.s:6097   .text:0000000000001080 $t
     /tmp/ccaP1CVS.s:6103   .text:0000000000001080 vTaskNotifyGiveFromISR
     /tmp/ccaP1CVS.s:6291   .text:0000000000001108 $d
     /tmp/ccaP1CVS.s:6295   .text:000000000000110c $t
     /tmp/ccaP1CVS.s:6301   .text:000000000000110c xTaskNotifyStateClear
     /tmp/ccaP1CVS.s:6367   .text:0000000000001134 $d
     /tmp/ccaP1CVS.s:6381   .bss:0000000000000004 pxCurrentTCB
     /tmp/ccaP1CVS.s:6373   .bss:0000000000000000 $d
     /tmp/ccaP1CVS.s:6377   .bss:0000000000000000 xTickCount
     /tmp/ccaP1CVS.s:6385   .bss:0000000000000008 uxTopReadyPriority
     /tmp/ccaP1CVS.s:6389   .bss:000000000000000c xSuspendedTaskList
     /tmp/ccaP1CVS.s:6393   .bss:0000000000000020 pxOverflowDelayedTaskList
     /tmp/ccaP1CVS.s:6397   .bss:0000000000000024 pxDelayedTaskList
     /tmp/ccaP1CVS.s:6401   .bss:0000000000000028 xNextTaskUnblockTime
     /tmp/ccaP1CVS.s:6405   .bss:000000000000002c xTasksWaitingTermination
     /tmp/ccaP1CVS.s:6409   .bss:0000000000000040 uxCurrentNumberOfTasks
     /tmp/ccaP1CVS.s:6413   .bss:0000000000000044 uxDeletedTasksWaitingCleanUp
     /tmp/ccaP1CVS.s:6417   .bss:0000000000000048 pxReadyTasksLists
     /tmp/ccaP1CVS.s:6421   .bss:00000000000000ac xDelayedTaskList1
     /tmp/ccaP1CVS.s:6425   .bss:00000000000000c0 xDelayedTaskList2
     /tmp/ccaP1CVS.s:6429   .bss:00000000000000d4 xPendingReadyList
     /tmp/ccaP1CVS.s:6433   .bss:00000000000000e8 xSchedulerRunning
     /tmp/ccaP1CVS.s:6437   .bss:00000000000000ec uxTaskNumber
     /tmp/ccaP1CVS.s:6441   .bss:00000000000000f0 uxSchedulerSuspended
     /tmp/ccaP1CVS.s:6445   .bss:00000000000000f4 xIdleTaskHandle
     /tmp/ccaP1CVS.s:6449   .bss:00000000000000f8 xNumOfOverflows
ARM GAS  /tmp/ccaP1CVS.s 			page 457


     /tmp/ccaP1CVS.s:6453   .bss:00000000000000fc uxPendedTicks
     /tmp/ccaP1CVS.s:6457   .bss:0000000000000100 xYieldPending

UNDEFINED SYMBOLS
uxListRemove
vListInsertEnd
vListInsert
vPortEnterCritical
vPortExitCritical
vPortFree
pvPortMalloc
memset
vListInitialiseItem
pxPortInitialiseStack
vListInitialise
xTimerCreateTimerTask
xPortStartScheduler
vPortEndScheduler
